
RCGoKart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006968  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08006b2c  08006b2c  00016b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b44  08006b44  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08006b44  08006b44  00016b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b4c  08006b4c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b4c  08006b4c  00016b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b50  08006b50  00016b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08006b54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  20000024  08006b78  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000408  08006b78  00020408  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013ea3  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002722  00000000  00000000  00033f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d8  00000000  00000000  00036660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ef7  00000000  00000000  00037938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000244e7  00000000  00000000  0003882f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016d40  00000000  00000000  0005cd16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5a89  00000000  00000000  00073a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052f4  00000000  00000000  001594e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0015e7d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000024 	.word	0x20000024
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08006b14 	.word	0x08006b14

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000028 	.word	0x20000028
 8000200:	08006b14 	.word	0x08006b14

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	; 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	3c01      	subs	r4, #1
 8000340:	bf28      	it	cs
 8000342:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000346:	d2e9      	bcs.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ee:	bf08      	it	eq
 80004f0:	4770      	bxeq	lr
 80004f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f6:	bf04      	itt	eq
 80004f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000508:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800050c:	e71c      	b.n	8000348 <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_ul2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	e00a      	b.n	8000536 <__aeabi_l2d+0x16>

08000520 <__aeabi_l2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052e:	d502      	bpl.n	8000536 <__aeabi_l2d+0x16>
 8000530:	4240      	negs	r0, r0
 8000532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000536:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000542:	f43f aed8 	beq.w	80002f6 <__adddf3+0xe6>
 8000546:	f04f 0203 	mov.w	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000556:	bf18      	it	ne
 8000558:	3203      	addne	r2, #3
 800055a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055e:	f1c2 0320 	rsb	r3, r2, #32
 8000562:	fa00 fc03 	lsl.w	ip, r0, r3
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 fe03 	lsl.w	lr, r1, r3
 800056e:	ea40 000e 	orr.w	r0, r0, lr
 8000572:	fa21 f102 	lsr.w	r1, r1, r2
 8000576:	4414      	add	r4, r2
 8000578:	e6bd      	b.n	80002f6 <__adddf3+0xe6>
 800057a:	bf00      	nop

0800057c <__gedf2>:
 800057c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000580:	e006      	b.n	8000590 <__cmpdf2+0x4>
 8000582:	bf00      	nop

08000584 <__ledf2>:
 8000584:	f04f 0c01 	mov.w	ip, #1
 8000588:	e002      	b.n	8000590 <__cmpdf2+0x4>
 800058a:	bf00      	nop

0800058c <__cmpdf2>:
 800058c:	f04f 0c01 	mov.w	ip, #1
 8000590:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000594:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000598:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800059c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005a0:	bf18      	it	ne
 80005a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005a6:	d01b      	beq.n	80005e0 <__cmpdf2+0x54>
 80005a8:	b001      	add	sp, #4
 80005aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005ae:	bf0c      	ite	eq
 80005b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005b4:	ea91 0f03 	teqne	r1, r3
 80005b8:	bf02      	ittt	eq
 80005ba:	ea90 0f02 	teqeq	r0, r2
 80005be:	2000      	moveq	r0, #0
 80005c0:	4770      	bxeq	lr
 80005c2:	f110 0f00 	cmn.w	r0, #0
 80005c6:	ea91 0f03 	teq	r1, r3
 80005ca:	bf58      	it	pl
 80005cc:	4299      	cmppl	r1, r3
 80005ce:	bf08      	it	eq
 80005d0:	4290      	cmpeq	r0, r2
 80005d2:	bf2c      	ite	cs
 80005d4:	17d8      	asrcs	r0, r3, #31
 80005d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005da:	f040 0001 	orr.w	r0, r0, #1
 80005de:	4770      	bx	lr
 80005e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005e8:	d102      	bne.n	80005f0 <__cmpdf2+0x64>
 80005ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005ee:	d107      	bne.n	8000600 <__cmpdf2+0x74>
 80005f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005f8:	d1d6      	bne.n	80005a8 <__cmpdf2+0x1c>
 80005fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005fe:	d0d3      	beq.n	80005a8 <__cmpdf2+0x1c>
 8000600:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <__aeabi_cdrcmple>:
 8000608:	4684      	mov	ip, r0
 800060a:	4610      	mov	r0, r2
 800060c:	4662      	mov	r2, ip
 800060e:	468c      	mov	ip, r1
 8000610:	4619      	mov	r1, r3
 8000612:	4663      	mov	r3, ip
 8000614:	e000      	b.n	8000618 <__aeabi_cdcmpeq>
 8000616:	bf00      	nop

08000618 <__aeabi_cdcmpeq>:
 8000618:	b501      	push	{r0, lr}
 800061a:	f7ff ffb7 	bl	800058c <__cmpdf2>
 800061e:	2800      	cmp	r0, #0
 8000620:	bf48      	it	mi
 8000622:	f110 0f00 	cmnmi.w	r0, #0
 8000626:	bd01      	pop	{r0, pc}

08000628 <__aeabi_dcmpeq>:
 8000628:	f84d ed08 	str.w	lr, [sp, #-8]!
 800062c:	f7ff fff4 	bl	8000618 <__aeabi_cdcmpeq>
 8000630:	bf0c      	ite	eq
 8000632:	2001      	moveq	r0, #1
 8000634:	2000      	movne	r0, #0
 8000636:	f85d fb08 	ldr.w	pc, [sp], #8
 800063a:	bf00      	nop

0800063c <__aeabi_dcmplt>:
 800063c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000640:	f7ff ffea 	bl	8000618 <__aeabi_cdcmpeq>
 8000644:	bf34      	ite	cc
 8000646:	2001      	movcc	r0, #1
 8000648:	2000      	movcs	r0, #0
 800064a:	f85d fb08 	ldr.w	pc, [sp], #8
 800064e:	bf00      	nop

08000650 <__aeabi_dcmple>:
 8000650:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000654:	f7ff ffe0 	bl	8000618 <__aeabi_cdcmpeq>
 8000658:	bf94      	ite	ls
 800065a:	2001      	movls	r0, #1
 800065c:	2000      	movhi	r0, #0
 800065e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000662:	bf00      	nop

08000664 <__aeabi_dcmpge>:
 8000664:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000668:	f7ff ffce 	bl	8000608 <__aeabi_cdrcmple>
 800066c:	bf94      	ite	ls
 800066e:	2001      	movls	r0, #1
 8000670:	2000      	movhi	r0, #0
 8000672:	f85d fb08 	ldr.w	pc, [sp], #8
 8000676:	bf00      	nop

08000678 <__aeabi_dcmpgt>:
 8000678:	f84d ed08 	str.w	lr, [sp, #-8]!
 800067c:	f7ff ffc4 	bl	8000608 <__aeabi_cdrcmple>
 8000680:	bf34      	ite	cc
 8000682:	2001      	movcc	r0, #1
 8000684:	2000      	movcs	r0, #0
 8000686:	f85d fb08 	ldr.w	pc, [sp], #8
 800068a:	bf00      	nop

0800068c <__aeabi_uldivmod>:
 800068c:	b953      	cbnz	r3, 80006a4 <__aeabi_uldivmod+0x18>
 800068e:	b94a      	cbnz	r2, 80006a4 <__aeabi_uldivmod+0x18>
 8000690:	2900      	cmp	r1, #0
 8000692:	bf08      	it	eq
 8000694:	2800      	cmpeq	r0, #0
 8000696:	bf1c      	itt	ne
 8000698:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800069c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80006a0:	f000 b970 	b.w	8000984 <__aeabi_idiv0>
 80006a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80006a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006ac:	f000 f806 	bl	80006bc <__udivmoddi4>
 80006b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006b8:	b004      	add	sp, #16
 80006ba:	4770      	bx	lr

080006bc <__udivmoddi4>:
 80006bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006c0:	9e08      	ldr	r6, [sp, #32]
 80006c2:	460d      	mov	r5, r1
 80006c4:	4604      	mov	r4, r0
 80006c6:	460f      	mov	r7, r1
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d14a      	bne.n	8000762 <__udivmoddi4+0xa6>
 80006cc:	428a      	cmp	r2, r1
 80006ce:	4694      	mov	ip, r2
 80006d0:	d965      	bls.n	800079e <__udivmoddi4+0xe2>
 80006d2:	fab2 f382 	clz	r3, r2
 80006d6:	b143      	cbz	r3, 80006ea <__udivmoddi4+0x2e>
 80006d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80006dc:	f1c3 0220 	rsb	r2, r3, #32
 80006e0:	409f      	lsls	r7, r3
 80006e2:	fa20 f202 	lsr.w	r2, r0, r2
 80006e6:	4317      	orrs	r7, r2
 80006e8:	409c      	lsls	r4, r3
 80006ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80006ee:	fa1f f58c 	uxth.w	r5, ip
 80006f2:	fbb7 f1fe 	udiv	r1, r7, lr
 80006f6:	0c22      	lsrs	r2, r4, #16
 80006f8:	fb0e 7711 	mls	r7, lr, r1, r7
 80006fc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000700:	fb01 f005 	mul.w	r0, r1, r5
 8000704:	4290      	cmp	r0, r2
 8000706:	d90a      	bls.n	800071e <__udivmoddi4+0x62>
 8000708:	eb1c 0202 	adds.w	r2, ip, r2
 800070c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000710:	f080 811c 	bcs.w	800094c <__udivmoddi4+0x290>
 8000714:	4290      	cmp	r0, r2
 8000716:	f240 8119 	bls.w	800094c <__udivmoddi4+0x290>
 800071a:	3902      	subs	r1, #2
 800071c:	4462      	add	r2, ip
 800071e:	1a12      	subs	r2, r2, r0
 8000720:	b2a4      	uxth	r4, r4
 8000722:	fbb2 f0fe 	udiv	r0, r2, lr
 8000726:	fb0e 2210 	mls	r2, lr, r0, r2
 800072a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800072e:	fb00 f505 	mul.w	r5, r0, r5
 8000732:	42a5      	cmp	r5, r4
 8000734:	d90a      	bls.n	800074c <__udivmoddi4+0x90>
 8000736:	eb1c 0404 	adds.w	r4, ip, r4
 800073a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800073e:	f080 8107 	bcs.w	8000950 <__udivmoddi4+0x294>
 8000742:	42a5      	cmp	r5, r4
 8000744:	f240 8104 	bls.w	8000950 <__udivmoddi4+0x294>
 8000748:	4464      	add	r4, ip
 800074a:	3802      	subs	r0, #2
 800074c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000750:	1b64      	subs	r4, r4, r5
 8000752:	2100      	movs	r1, #0
 8000754:	b11e      	cbz	r6, 800075e <__udivmoddi4+0xa2>
 8000756:	40dc      	lsrs	r4, r3
 8000758:	2300      	movs	r3, #0
 800075a:	e9c6 4300 	strd	r4, r3, [r6]
 800075e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000762:	428b      	cmp	r3, r1
 8000764:	d908      	bls.n	8000778 <__udivmoddi4+0xbc>
 8000766:	2e00      	cmp	r6, #0
 8000768:	f000 80ed 	beq.w	8000946 <__udivmoddi4+0x28a>
 800076c:	2100      	movs	r1, #0
 800076e:	e9c6 0500 	strd	r0, r5, [r6]
 8000772:	4608      	mov	r0, r1
 8000774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000778:	fab3 f183 	clz	r1, r3
 800077c:	2900      	cmp	r1, #0
 800077e:	d149      	bne.n	8000814 <__udivmoddi4+0x158>
 8000780:	42ab      	cmp	r3, r5
 8000782:	d302      	bcc.n	800078a <__udivmoddi4+0xce>
 8000784:	4282      	cmp	r2, r0
 8000786:	f200 80f8 	bhi.w	800097a <__udivmoddi4+0x2be>
 800078a:	1a84      	subs	r4, r0, r2
 800078c:	eb65 0203 	sbc.w	r2, r5, r3
 8000790:	2001      	movs	r0, #1
 8000792:	4617      	mov	r7, r2
 8000794:	2e00      	cmp	r6, #0
 8000796:	d0e2      	beq.n	800075e <__udivmoddi4+0xa2>
 8000798:	e9c6 4700 	strd	r4, r7, [r6]
 800079c:	e7df      	b.n	800075e <__udivmoddi4+0xa2>
 800079e:	b902      	cbnz	r2, 80007a2 <__udivmoddi4+0xe6>
 80007a0:	deff      	udf	#255	; 0xff
 80007a2:	fab2 f382 	clz	r3, r2
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	f040 8090 	bne.w	80008cc <__udivmoddi4+0x210>
 80007ac:	1a8a      	subs	r2, r1, r2
 80007ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007b2:	fa1f fe8c 	uxth.w	lr, ip
 80007b6:	2101      	movs	r1, #1
 80007b8:	fbb2 f5f7 	udiv	r5, r2, r7
 80007bc:	fb07 2015 	mls	r0, r7, r5, r2
 80007c0:	0c22      	lsrs	r2, r4, #16
 80007c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80007c6:	fb0e f005 	mul.w	r0, lr, r5
 80007ca:	4290      	cmp	r0, r2
 80007cc:	d908      	bls.n	80007e0 <__udivmoddi4+0x124>
 80007ce:	eb1c 0202 	adds.w	r2, ip, r2
 80007d2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80007d6:	d202      	bcs.n	80007de <__udivmoddi4+0x122>
 80007d8:	4290      	cmp	r0, r2
 80007da:	f200 80cb 	bhi.w	8000974 <__udivmoddi4+0x2b8>
 80007de:	4645      	mov	r5, r8
 80007e0:	1a12      	subs	r2, r2, r0
 80007e2:	b2a4      	uxth	r4, r4
 80007e4:	fbb2 f0f7 	udiv	r0, r2, r7
 80007e8:	fb07 2210 	mls	r2, r7, r0, r2
 80007ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80007f0:	fb0e fe00 	mul.w	lr, lr, r0
 80007f4:	45a6      	cmp	lr, r4
 80007f6:	d908      	bls.n	800080a <__udivmoddi4+0x14e>
 80007f8:	eb1c 0404 	adds.w	r4, ip, r4
 80007fc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000800:	d202      	bcs.n	8000808 <__udivmoddi4+0x14c>
 8000802:	45a6      	cmp	lr, r4
 8000804:	f200 80bb 	bhi.w	800097e <__udivmoddi4+0x2c2>
 8000808:	4610      	mov	r0, r2
 800080a:	eba4 040e 	sub.w	r4, r4, lr
 800080e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000812:	e79f      	b.n	8000754 <__udivmoddi4+0x98>
 8000814:	f1c1 0720 	rsb	r7, r1, #32
 8000818:	408b      	lsls	r3, r1
 800081a:	fa22 fc07 	lsr.w	ip, r2, r7
 800081e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000822:	fa05 f401 	lsl.w	r4, r5, r1
 8000826:	fa20 f307 	lsr.w	r3, r0, r7
 800082a:	40fd      	lsrs	r5, r7
 800082c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000830:	4323      	orrs	r3, r4
 8000832:	fbb5 f8f9 	udiv	r8, r5, r9
 8000836:	fa1f fe8c 	uxth.w	lr, ip
 800083a:	fb09 5518 	mls	r5, r9, r8, r5
 800083e:	0c1c      	lsrs	r4, r3, #16
 8000840:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000844:	fb08 f50e 	mul.w	r5, r8, lr
 8000848:	42a5      	cmp	r5, r4
 800084a:	fa02 f201 	lsl.w	r2, r2, r1
 800084e:	fa00 f001 	lsl.w	r0, r0, r1
 8000852:	d90b      	bls.n	800086c <__udivmoddi4+0x1b0>
 8000854:	eb1c 0404 	adds.w	r4, ip, r4
 8000858:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800085c:	f080 8088 	bcs.w	8000970 <__udivmoddi4+0x2b4>
 8000860:	42a5      	cmp	r5, r4
 8000862:	f240 8085 	bls.w	8000970 <__udivmoddi4+0x2b4>
 8000866:	f1a8 0802 	sub.w	r8, r8, #2
 800086a:	4464      	add	r4, ip
 800086c:	1b64      	subs	r4, r4, r5
 800086e:	b29d      	uxth	r5, r3
 8000870:	fbb4 f3f9 	udiv	r3, r4, r9
 8000874:	fb09 4413 	mls	r4, r9, r3, r4
 8000878:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800087c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000880:	45a6      	cmp	lr, r4
 8000882:	d908      	bls.n	8000896 <__udivmoddi4+0x1da>
 8000884:	eb1c 0404 	adds.w	r4, ip, r4
 8000888:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 800088c:	d26c      	bcs.n	8000968 <__udivmoddi4+0x2ac>
 800088e:	45a6      	cmp	lr, r4
 8000890:	d96a      	bls.n	8000968 <__udivmoddi4+0x2ac>
 8000892:	3b02      	subs	r3, #2
 8000894:	4464      	add	r4, ip
 8000896:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800089a:	fba3 9502 	umull	r9, r5, r3, r2
 800089e:	eba4 040e 	sub.w	r4, r4, lr
 80008a2:	42ac      	cmp	r4, r5
 80008a4:	46c8      	mov	r8, r9
 80008a6:	46ae      	mov	lr, r5
 80008a8:	d356      	bcc.n	8000958 <__udivmoddi4+0x29c>
 80008aa:	d053      	beq.n	8000954 <__udivmoddi4+0x298>
 80008ac:	b156      	cbz	r6, 80008c4 <__udivmoddi4+0x208>
 80008ae:	ebb0 0208 	subs.w	r2, r0, r8
 80008b2:	eb64 040e 	sbc.w	r4, r4, lr
 80008b6:	fa04 f707 	lsl.w	r7, r4, r7
 80008ba:	40ca      	lsrs	r2, r1
 80008bc:	40cc      	lsrs	r4, r1
 80008be:	4317      	orrs	r7, r2
 80008c0:	e9c6 7400 	strd	r7, r4, [r6]
 80008c4:	4618      	mov	r0, r3
 80008c6:	2100      	movs	r1, #0
 80008c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008cc:	f1c3 0120 	rsb	r1, r3, #32
 80008d0:	fa02 fc03 	lsl.w	ip, r2, r3
 80008d4:	fa20 f201 	lsr.w	r2, r0, r1
 80008d8:	fa25 f101 	lsr.w	r1, r5, r1
 80008dc:	409d      	lsls	r5, r3
 80008de:	432a      	orrs	r2, r5
 80008e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008e4:	fa1f fe8c 	uxth.w	lr, ip
 80008e8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008ec:	fb07 1510 	mls	r5, r7, r0, r1
 80008f0:	0c11      	lsrs	r1, r2, #16
 80008f2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80008f6:	fb00 f50e 	mul.w	r5, r0, lr
 80008fa:	428d      	cmp	r5, r1
 80008fc:	fa04 f403 	lsl.w	r4, r4, r3
 8000900:	d908      	bls.n	8000914 <__udivmoddi4+0x258>
 8000902:	eb1c 0101 	adds.w	r1, ip, r1
 8000906:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800090a:	d22f      	bcs.n	800096c <__udivmoddi4+0x2b0>
 800090c:	428d      	cmp	r5, r1
 800090e:	d92d      	bls.n	800096c <__udivmoddi4+0x2b0>
 8000910:	3802      	subs	r0, #2
 8000912:	4461      	add	r1, ip
 8000914:	1b49      	subs	r1, r1, r5
 8000916:	b292      	uxth	r2, r2
 8000918:	fbb1 f5f7 	udiv	r5, r1, r7
 800091c:	fb07 1115 	mls	r1, r7, r5, r1
 8000920:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000924:	fb05 f10e 	mul.w	r1, r5, lr
 8000928:	4291      	cmp	r1, r2
 800092a:	d908      	bls.n	800093e <__udivmoddi4+0x282>
 800092c:	eb1c 0202 	adds.w	r2, ip, r2
 8000930:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000934:	d216      	bcs.n	8000964 <__udivmoddi4+0x2a8>
 8000936:	4291      	cmp	r1, r2
 8000938:	d914      	bls.n	8000964 <__udivmoddi4+0x2a8>
 800093a:	3d02      	subs	r5, #2
 800093c:	4462      	add	r2, ip
 800093e:	1a52      	subs	r2, r2, r1
 8000940:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000944:	e738      	b.n	80007b8 <__udivmoddi4+0xfc>
 8000946:	4631      	mov	r1, r6
 8000948:	4630      	mov	r0, r6
 800094a:	e708      	b.n	800075e <__udivmoddi4+0xa2>
 800094c:	4639      	mov	r1, r7
 800094e:	e6e6      	b.n	800071e <__udivmoddi4+0x62>
 8000950:	4610      	mov	r0, r2
 8000952:	e6fb      	b.n	800074c <__udivmoddi4+0x90>
 8000954:	4548      	cmp	r0, r9
 8000956:	d2a9      	bcs.n	80008ac <__udivmoddi4+0x1f0>
 8000958:	ebb9 0802 	subs.w	r8, r9, r2
 800095c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000960:	3b01      	subs	r3, #1
 8000962:	e7a3      	b.n	80008ac <__udivmoddi4+0x1f0>
 8000964:	4645      	mov	r5, r8
 8000966:	e7ea      	b.n	800093e <__udivmoddi4+0x282>
 8000968:	462b      	mov	r3, r5
 800096a:	e794      	b.n	8000896 <__udivmoddi4+0x1da>
 800096c:	4640      	mov	r0, r8
 800096e:	e7d1      	b.n	8000914 <__udivmoddi4+0x258>
 8000970:	46d0      	mov	r8, sl
 8000972:	e77b      	b.n	800086c <__udivmoddi4+0x1b0>
 8000974:	3d02      	subs	r5, #2
 8000976:	4462      	add	r2, ip
 8000978:	e732      	b.n	80007e0 <__udivmoddi4+0x124>
 800097a:	4608      	mov	r0, r1
 800097c:	e70a      	b.n	8000794 <__udivmoddi4+0xd8>
 800097e:	4464      	add	r4, ip
 8000980:	3802      	subs	r0, #2
 8000982:	e742      	b.n	800080a <__udivmoddi4+0x14e>

08000984 <__aeabi_idiv0>:
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <HAL_TIM_IC_CaptureCallback>:

uint32_t ICValue = 0;
uint32_t Frequency = 0;
float Duty = 0;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // If the interrupt is triggered by channel 1
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	7f1b      	ldrb	r3, [r3, #28]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d124      	bne.n	80009e2 <HAL_TIM_IC_CaptureCallback+0x5a>
	{
		// Read the IC value
		ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000998:	2100      	movs	r1, #0
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f005 f804 	bl	80059a8 <HAL_TIM_ReadCapturedValue>
 80009a0:	4603      	mov	r3, r0
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <HAL_TIM_IC_CaptureCallback+0x64>)
 80009a4:	6013      	str	r3, [r2, #0]

		if (ICValue != 0)
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <HAL_TIM_IC_CaptureCallback+0x64>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d019      	beq.n	80009e2 <HAL_TIM_IC_CaptureCallback+0x5a>
		{
			// calculate the Duty Cycle
			Duty = (HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) *100)/ICValue;
 80009ae:	2104      	movs	r1, #4
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f004 fff9 	bl	80059a8 <HAL_TIM_ReadCapturedValue>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2264      	movs	r2, #100	; 0x64
 80009ba:	fb03 f202 	mul.w	r2, r3, r2
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <HAL_TIM_IC_CaptureCallback+0x64>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c6:	ee07 3a90 	vmov	s15, r3
 80009ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <HAL_TIM_IC_CaptureCallback+0x68>)
 80009d0:	edc3 7a00 	vstr	s15, [r3]

			Frequency = 90000000/ICValue;
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <HAL_TIM_IC_CaptureCallback+0x64>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a06      	ldr	r2, [pc, #24]	; (80009f4 <HAL_TIM_IC_CaptureCallback+0x6c>)
 80009da:	fbb2 f3f3 	udiv	r3, r2, r3
 80009de:	4a06      	ldr	r2, [pc, #24]	; (80009f8 <HAL_TIM_IC_CaptureCallback+0x70>)
 80009e0:	6013      	str	r3, [r2, #0]
		}
	}
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200003dc 	.word	0x200003dc
 80009f0:	200003e4 	.word	0x200003e4
 80009f4:	055d4a80 	.word	0x055d4a80
 80009f8:	200003e0 	.word	0x200003e0

080009fc <steeringInput>:
uint32_t c = 0;
float error;
float derivative;
float pos = 0;
float pidMax =15;
float steeringInput(uint32_t rawSteeringInput){
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	if(rawSteeringInput>max){
 8000a04:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <steeringInput+0x60>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d902      	bls.n	8000a14 <steeringInput+0x18>
		max = rawSteeringInput;
 8000a0e:	4a13      	ldr	r2, [pc, #76]	; (8000a5c <steeringInput+0x60>)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6013      	str	r3, [r2, #0]
	}
	if(min>rawSteeringInput){
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <steeringInput+0x64>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d202      	bcs.n	8000a24 <steeringInput+0x28>
		min = rawSteeringInput;
 8000a1e:	4a10      	ldr	r2, [pc, #64]	; (8000a60 <steeringInput+0x64>)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6013      	str	r3, [r2, #0]
	}
	return (float)(rawSteeringInput-min)/(max-min);
 8000a24:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <steeringInput+0x64>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	1ad3      	subs	r3, r2, r3
 8000a2c:	ee07 3a90 	vmov	s15, r3
 8000a30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a34:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <steeringInput+0x60>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <steeringInput+0x64>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	ee07 3a90 	vmov	s15, r3
 8000a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a46:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000a4a:	eef0 7a66 	vmov.f32	s15, s13
}
 8000a4e:	eeb0 0a67 	vmov.f32	s0, s15
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	20000004 	.word	0x20000004
 8000a60:	20000008 	.word	0x20000008

08000a64 <drivingInput>:

float drivingInput(uint32_t rawDrivingInput){
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	if(rawDrivingInput>max2){
 8000a6c:	4b17      	ldr	r3, [pc, #92]	; (8000acc <drivingInput+0x68>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d902      	bls.n	8000a7c <drivingInput+0x18>
		max2 = rawDrivingInput;
 8000a76:	4a15      	ldr	r2, [pc, #84]	; (8000acc <drivingInput+0x68>)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6013      	str	r3, [r2, #0]
	}
	if(min2>rawDrivingInput&&rawDrivingInput>80000){
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <drivingInput+0x6c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d206      	bcs.n	8000a94 <drivingInput+0x30>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <drivingInput+0x70>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d902      	bls.n	8000a94 <drivingInput+0x30>
		min2 = rawDrivingInput;
 8000a8e:	4a10      	ldr	r2, [pc, #64]	; (8000ad0 <drivingInput+0x6c>)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6013      	str	r3, [r2, #0]
	}
	return (float)(rawDrivingInput-min2)/(max2-min2);
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <drivingInput+0x6c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	ee07 3a90 	vmov	s15, r3
 8000aa0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <drivingInput+0x68>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <drivingInput+0x6c>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	ee07 3a90 	vmov	s15, r3
 8000ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ab6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000aba:	eef0 7a66 	vmov.f32	s15, s13
}
 8000abe:	eeb0 0a67 	vmov.f32	s0, s15
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	2000000c 	.word	0x2000000c
 8000ad0:	20000010 	.word	0x20000010
 8000ad4:	00013880 	.word	0x00013880

08000ad8 <getPIDPower>:

float getPIDPower(float currentPosition, float requestPosition, float cycleTime){
 8000ad8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000adc:	b086      	sub	sp, #24
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	ed87 0a03 	vstr	s0, [r7, #12]
 8000ae4:	edc7 0a02 	vstr	s1, [r7, #8]
 8000ae8:	ed87 1a01 	vstr	s2, [r7, #4]

	error = requestPosition-currentPosition;
 8000aec:	ed97 7a02 	vldr	s14, [r7, #8]
 8000af0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000af4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000af8:	4b44      	ldr	r3, [pc, #272]	; (8000c0c <getPIDPower+0x134>)
 8000afa:	edc3 7a00 	vstr	s15, [r3]
	integral = integral + (error * cycleTime);
 8000afe:	4b43      	ldr	r3, [pc, #268]	; (8000c0c <getPIDPower+0x134>)
 8000b00:	ed93 7a00 	vldr	s14, [r3]
 8000b04:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b0c:	4b40      	ldr	r3, [pc, #256]	; (8000c10 <getPIDPower+0x138>)
 8000b0e:	edd3 7a00 	vldr	s15, [r3]
 8000b12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b16:	4b3e      	ldr	r3, [pc, #248]	; (8000c10 <getPIDPower+0x138>)
 8000b18:	edc3 7a00 	vstr	s15, [r3]
	derivative = (error-pastError)/cycleTime;
 8000b1c:	4b3b      	ldr	r3, [pc, #236]	; (8000c0c <getPIDPower+0x134>)
 8000b1e:	ed93 7a00 	vldr	s14, [r3]
 8000b22:	4b3c      	ldr	r3, [pc, #240]	; (8000c14 <getPIDPower+0x13c>)
 8000b24:	edd3 7a00 	vldr	s15, [r3]
 8000b28:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000b2c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000b30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b34:	4b38      	ldr	r3, [pc, #224]	; (8000c18 <getPIDPower+0x140>)
 8000b36:	edc3 7a00 	vstr	s15, [r3]
//	return absMax(kP*error+kI*integral+kD*derivative, (float)1.0);
	pos = kP*error+kI*integral+kD*derivative;
 8000b3a:	4b38      	ldr	r3, [pc, #224]	; (8000c1c <getPIDPower+0x144>)
 8000b3c:	ed93 7a00 	vldr	s14, [r3]
 8000b40:	4b32      	ldr	r3, [pc, #200]	; (8000c0c <getPIDPower+0x134>)
 8000b42:	edd3 7a00 	vldr	s15, [r3]
 8000b46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b4a:	4b35      	ldr	r3, [pc, #212]	; (8000c20 <getPIDPower+0x148>)
 8000b4c:	edd3 6a00 	vldr	s13, [r3]
 8000b50:	4b2f      	ldr	r3, [pc, #188]	; (8000c10 <getPIDPower+0x138>)
 8000b52:	edd3 7a00 	vldr	s15, [r3]
 8000b56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b5e:	4b31      	ldr	r3, [pc, #196]	; (8000c24 <getPIDPower+0x14c>)
 8000b60:	edd3 6a00 	vldr	s13, [r3]
 8000b64:	4b2c      	ldr	r3, [pc, #176]	; (8000c18 <getPIDPower+0x140>)
 8000b66:	edd3 7a00 	vldr	s15, [r3]
 8000b6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b72:	4b2d      	ldr	r3, [pc, #180]	; (8000c28 <getPIDPower+0x150>)
 8000b74:	edc3 7a00 	vstr	s15, [r3]
	float encReturn = 0.5;
 8000b78:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8000b7c:	617b      	str	r3, [r7, #20]
	if(pos<(pidMax*-1.0)){
 8000b7e:	4b2a      	ldr	r3, [pc, #168]	; (8000c28 <getPIDPower+0x150>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fca2 	bl	80004cc <__aeabi_f2d>
 8000b88:	4680      	mov	r8, r0
 8000b8a:	4689      	mov	r9, r1
 8000b8c:	4b27      	ldr	r3, [pc, #156]	; (8000c2c <getPIDPower+0x154>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fc9b 	bl	80004cc <__aeabi_f2d>
 8000b96:	4602      	mov	r2, r0
 8000b98:	460b      	mov	r3, r1
 8000b9a:	4614      	mov	r4, r2
 8000b9c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000ba0:	4622      	mov	r2, r4
 8000ba2:	462b      	mov	r3, r5
 8000ba4:	4640      	mov	r0, r8
 8000ba6:	4649      	mov	r1, r9
 8000ba8:	f7ff fd48 	bl	800063c <__aeabi_dcmplt>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d003      	beq.n	8000bba <getPIDPower+0xe2>
		encReturn = 0.0;
 8000bb2:	f04f 0300 	mov.w	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	e01f      	b.n	8000bfa <getPIDPower+0x122>
	}
	else if(pos>pidMax){
 8000bba:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <getPIDPower+0x150>)
 8000bbc:	ed93 7a00 	vldr	s14, [r3]
 8000bc0:	4b1a      	ldr	r3, [pc, #104]	; (8000c2c <getPIDPower+0x154>)
 8000bc2:	edd3 7a00 	vldr	s15, [r3]
 8000bc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bce:	dd03      	ble.n	8000bd8 <getPIDPower+0x100>
		encReturn = 1.0;
 8000bd0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000bd4:	617b      	str	r3, [r7, #20]
 8000bd6:	e010      	b.n	8000bfa <getPIDPower+0x122>
	}
	else{
		encReturn = (pos+pidMax)/(pidMax*2);
 8000bd8:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <getPIDPower+0x150>)
 8000bda:	ed93 7a00 	vldr	s14, [r3]
 8000bde:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <getPIDPower+0x154>)
 8000be0:	edd3 7a00 	vldr	s15, [r3]
 8000be4:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000be8:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <getPIDPower+0x154>)
 8000bea:	edd3 7a00 	vldr	s15, [r3]
 8000bee:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000bf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bf6:	edc7 7a05 	vstr	s15, [r7, #20]
	}
//	if(encReturn>.505){
		return encReturn;
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	ee07 3a90 	vmov	s15, r3
//		return encReturn;
//	}
//	else{
//		return .5;
//	}
}
 8000c00:	eeb0 0a67 	vmov.f32	s0, s15
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000c0c:	200003f8 	.word	0x200003f8
 8000c10:	200003d4 	.word	0x200003d4
 8000c14:	200003d0 	.word	0x200003d0
 8000c18:	200003fc 	.word	0x200003fc
 8000c1c:	20000000 	.word	0x20000000
 8000c20:	200003c8 	.word	0x200003c8
 8000c24:	200003cc 	.word	0x200003cc
 8000c28:	20000400 	.word	0x20000400
 8000c2c:	20000014 	.word	0x20000014

08000c30 <getEncoderAngle>:

float getEncoderAngle(){
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
	return (((int)(36000*((TIM3->CCR2-kSteeringEncoderMin)/(kSteeringEncoderRange)))+18000)%36000)/100;
 8000c34:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <getEncoderAngle+0x6c>)
 8000c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c38:	ee07 3a90 	vmov	s15, r3
 8000c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c40:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000ca0 <getEncoderAngle+0x70>
 8000c44:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000c48:	eddf 6a16 	vldr	s13, [pc, #88]	; 8000ca4 <getEncoderAngle+0x74>
 8000c4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c50:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000ca8 <getEncoderAngle+0x78>
 8000c54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c5c:	ee17 3a90 	vmov	r3, s15
 8000c60:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 8000c64:	3350      	adds	r3, #80	; 0x50
 8000c66:	4a11      	ldr	r2, [pc, #68]	; (8000cac <getEncoderAngle+0x7c>)
 8000c68:	fb82 1203 	smull	r1, r2, r2, r3
 8000c6c:	1391      	asrs	r1, r2, #14
 8000c6e:	17da      	asrs	r2, r3, #31
 8000c70:	1a8a      	subs	r2, r1, r2
 8000c72:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 8000c76:	fb01 f202 	mul.w	r2, r1, r2
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <getEncoderAngle+0x80>)
 8000c7e:	fb83 1302 	smull	r1, r3, r3, r2
 8000c82:	1159      	asrs	r1, r3, #5
 8000c84:	17d3      	asrs	r3, r2, #31
 8000c86:	1acb      	subs	r3, r1, r3
 8000c88:	ee07 3a90 	vmov	s15, r3
 8000c8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8000c90:	eeb0 0a67 	vmov.f32	s0, s15
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	40000400 	.word	0x40000400
 8000ca0:	465ac000 	.word	0x465ac000
 8000ca4:	477a0000 	.word	0x477a0000
 8000ca8:	470ca000 	.word	0x470ca000
 8000cac:	7482296b 	.word	0x7482296b
 8000cb0:	51eb851f 	.word	0x51eb851f

08000cb4 <rawSteeringToAngle>:

float rawSteeringToAngle(float steerInput){
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	ed87 0a01 	vstr	s0, [r7, #4]
	return (steerInput*180)+167;
 8000cbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cc2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000ce0 <rawSteeringToAngle+0x2c>
 8000cc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cca:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000ce4 <rawSteeringToAngle+0x30>
 8000cce:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8000cd2:	eeb0 0a67 	vmov.f32	s0, s15
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	43340000 	.word	0x43340000
 8000ce4:	43270000 	.word	0x43270000

08000ce8 <setSteeringMotor>:

/**
 * Sets the steering motors power
 * @power value from -1.0 to 1.0
 */
void setSteeringMotor(float power){//+-1.0
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	ed87 0a01 	vstr	s0, [r7, #4]
	short int out = (((power)+1)/2)*180;//Converts the range 0 to 1, to 0 to 1800
 8000cf2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000cfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000cfe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000d02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d06:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000d2c <setSteeringMotor+0x44>
 8000d0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d12:	ee17 3a90 	vmov	r3, s15
 8000d16:	81fb      	strh	r3, [r7, #14]
	TIM10->CCR1 = out;
 8000d18:	4a05      	ldr	r2, [pc, #20]	; (8000d30 <setSteeringMotor+0x48>)
 8000d1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d1e:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	43340000 	.word	0x43340000
 8000d30:	40014400 	.word	0x40014400

08000d34 <setDrivingMotor>:

/**
 * Sets the driving motors power
 * @power value from 0 to 1.0
 */
void setDrivingMotor(float power){//0 to 1.0
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	ed87 0a01 	vstr	s0, [r7, #4]
	short int out = (((power)+1)/2)*1800;//Converts the range 0 to 1, to 0 to 1800
 8000d3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000d46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000d4a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000d4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d52:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000d94 <setDrivingMotor+0x60>
 8000d56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d5e:	ee17 3a90 	vmov	r3, s15
 8000d62:	81fb      	strh	r3, [r7, #14]
	TIM11->CCR1 = out*maxSpeed;
 8000d64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d68:	ee07 3a90 	vmov	s15, r3
 8000d6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d70:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <setDrivingMotor+0x64>)
 8000d72:	edd3 7a00 	vldr	s15, [r3]
 8000d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <setDrivingMotor+0x68>)
 8000d7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d80:	ee17 2a90 	vmov	r2, s15
 8000d84:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d86:	bf00      	nop
 8000d88:	3714      	adds	r7, #20
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	44e10000 	.word	0x44e10000
 8000d98:	200003d8 	.word	0x200003d8
 8000d9c:	40014800 	.word	0x40014800

08000da0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	ed2d 8b02 	vpush	{d8}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000daa:	f001 fba3 	bl	80024f4 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint32_t steeringRequest = max-min;
 8000dae:	4b7f      	ldr	r3, [pc, #508]	; (8000fac <main+0x20c>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	4b7f      	ldr	r3, [pc, #508]	; (8000fb0 <main+0x210>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	60fb      	str	r3, [r7, #12]
  uint32_t drivingRequest = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60bb      	str	r3, [r7, #8]
  uint16_t pwmBottomState = 5000;
 8000dbe:	f241 3388 	movw	r3, #5000	; 0x1388
 8000dc2:	80fb      	strh	r3, [r7, #6]
  uint16_t pwmLowState = 25000;
 8000dc4:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8000dc8:	80bb      	strh	r3, [r7, #4]
  uint16_t pwmHighState = 45000;
 8000dca:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 8000dce:	807b      	strh	r3, [r7, #2]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd0:	f000 f914 	bl	8000ffc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd4:	f000 ff38 	bl	8001c48 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000dd8:	f000 f986 	bl	80010e8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000ddc:	f000 fa68 	bl	80012b0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000de0:	f000 faea 	bl	80013b8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000de4:	f000 fb68 	bl	80014b8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000de8:	f000 fc04 	bl	80015f4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000dec:	f000 fca0 	bl	8001730 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000df0:	f000 fd3c 	bl	800186c <MX_TIM8_Init>
  MX_TIM10_Init();
 8000df4:	f000 fdda 	bl	80019ac <MX_TIM10_Init>
  MX_TIM11_Init();
 8000df8:	f000 fe26 	bl	8001a48 <MX_TIM11_Init>
  MX_TIM12_Init();
 8000dfc:	f000 fe72 	bl	8001ae4 <MX_TIM12_Init>
  MX_RTC_Init();
 8000e00:	f000 f9f2 	bl	80011e8 <MX_RTC_Init>
  MX_I2C2_Init();
 8000e04:	f000 f9c2 	bl	800118c <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8000e08:	f000 fef4 	bl	8001bf4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //Starts HAL timing for input capture
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4869      	ldr	r0, [pc, #420]	; (8000fb4 <main+0x214>)
 8000e10:	f004 f932 	bl	8005078 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 8000e14:	2104      	movs	r1, #4
 8000e16:	4867      	ldr	r0, [pc, #412]	; (8000fb4 <main+0x214>)
 8000e18:	f004 f852 	bl	8004ec0 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4866      	ldr	r0, [pc, #408]	; (8000fb8 <main+0x218>)
 8000e20:	f004 f92a 	bl	8005078 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8000e24:	2104      	movs	r1, #4
 8000e26:	4864      	ldr	r0, [pc, #400]	; (8000fb8 <main+0x218>)
 8000e28:	f004 f84a 	bl	8004ec0 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4863      	ldr	r0, [pc, #396]	; (8000fbc <main+0x21c>)
 8000e30:	f004 f922 	bl	8005078 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 8000e34:	2104      	movs	r1, #4
 8000e36:	4861      	ldr	r0, [pc, #388]	; (8000fbc <main+0x21c>)
 8000e38:	f004 f842 	bl	8004ec0 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4860      	ldr	r0, [pc, #384]	; (8000fc0 <main+0x220>)
 8000e40:	f004 f91a 	bl	8005078 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2);
 8000e44:	2104      	movs	r1, #4
 8000e46:	485e      	ldr	r0, [pc, #376]	; (8000fc0 <main+0x220>)
 8000e48:	f004 f83a 	bl	8004ec0 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	485d      	ldr	r0, [pc, #372]	; (8000fc4 <main+0x224>)
 8000e50:	f004 f912 	bl	8005078 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 8000e54:	2104      	movs	r1, #4
 8000e56:	485b      	ldr	r0, [pc, #364]	; (8000fc4 <main+0x224>)
 8000e58:	f004 f832 	bl	8004ec0 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_1);
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	485a      	ldr	r0, [pc, #360]	; (8000fc8 <main+0x228>)
 8000e60:	f004 f90a 	bl	8005078 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_2);
 8000e64:	2104      	movs	r1, #4
 8000e66:	4858      	ldr	r0, [pc, #352]	; (8000fc8 <main+0x228>)
 8000e68:	f004 f82a 	bl	8004ec0 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_1);
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4856      	ldr	r0, [pc, #344]	; (8000fc8 <main+0x228>)
 8000e70:	f004 f902 	bl	8005078 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_2);
 8000e74:	2104      	movs	r1, #4
 8000e76:	4854      	ldr	r0, [pc, #336]	; (8000fc8 <main+0x228>)
 8000e78:	f004 f822 	bl	8004ec0 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim12, TIM_CHANNEL_1);
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4853      	ldr	r0, [pc, #332]	; (8000fcc <main+0x22c>)
 8000e80:	f004 f8fa 	bl	8005078 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim12, TIM_CHANNEL_2);
 8000e84:	2104      	movs	r1, #4
 8000e86:	4851      	ldr	r0, [pc, #324]	; (8000fcc <main+0x22c>)
 8000e88:	f004 f81a 	bl	8004ec0 <HAL_TIM_IC_Start>

  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4850      	ldr	r0, [pc, #320]	; (8000fd0 <main+0x230>)
 8000e90:	f003 fefe 	bl	8004c90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8000e94:	2100      	movs	r1, #0
 8000e96:	484f      	ldr	r0, [pc, #316]	; (8000fd4 <main+0x234>)
 8000e98:	f003 fefa 	bl	8004c90 <HAL_TIM_PWM_Start>
  TIM10->CCR1 = 450; //Sets the PWM output of tim1 channel 1 to 450
 8000e9c:	4b4e      	ldr	r3, [pc, #312]	; (8000fd8 <main+0x238>)
 8000e9e:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8000ea2:	635a      	str	r2, [r3, #52]	; 0x34
  TIM11->CCR1 = 0; //Sets the PWM output of tim1 channel 1 to 450
 8000ea4:	4b4d      	ldr	r3, [pc, #308]	; (8000fdc <main+0x23c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	635a      	str	r2, [r3, #52]	; 0x34
//		  printf("%lu0a\n", TIM4->CCR2);
//		  printf("%lu0a\n", TIM1->CCR2);
//		  printf("%lu0a\n", steeringInput(TIM2->CCR2));
	  }
	  //E-STOP
	  if(TIM4->CCR2>pwmLowState){//Checking if E-Stop is switched to the high state, forces user on RC controller to switch the e-stop switch to start it
 8000eaa:	4b4d      	ldr	r3, [pc, #308]	; (8000fe0 <main+0x240>)
 8000eac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000eae:	88bb      	ldrh	r3, [r7, #4]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d976      	bls.n	8000fa2 <main+0x202>
		  //State management

		  //PID:
		  a = getPIDPower(getEncoderAngle(), rawSteeringToAngle(steeringInput(steeringRequest)), 10.0);
 8000eb4:	f7ff febc 	bl	8000c30 <getEncoderAngle>
 8000eb8:	eeb0 8a40 	vmov.f32	s16, s0
 8000ebc:	68f8      	ldr	r0, [r7, #12]
 8000ebe:	f7ff fd9d 	bl	80009fc <steeringInput>
 8000ec2:	eef0 7a40 	vmov.f32	s15, s0
 8000ec6:	eeb0 0a67 	vmov.f32	s0, s15
 8000eca:	f7ff fef3 	bl	8000cb4 <rawSteeringToAngle>
 8000ece:	eef0 7a40 	vmov.f32	s15, s0
 8000ed2:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 8000ed6:	eef0 0a67 	vmov.f32	s1, s15
 8000eda:	eeb0 0a48 	vmov.f32	s0, s16
 8000ede:	f7ff fdfb 	bl	8000ad8 <getPIDPower>
 8000ee2:	eef0 7a40 	vmov.f32	s15, s0
 8000ee6:	4b3f      	ldr	r3, [pc, #252]	; (8000fe4 <main+0x244>)
 8000ee8:	edc3 7a00 	vstr	s15, [r3]
		  b = steeringInput(steeringRequest);
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f7ff fd85 	bl	80009fc <steeringInput>
 8000ef2:	eef0 7a40 	vmov.f32	s15, s0
 8000ef6:	4b3c      	ldr	r3, [pc, #240]	; (8000fe8 <main+0x248>)
 8000ef8:	edc3 7a00 	vstr	s15, [r3]
		  x = drivingInput(drivingRequest);
 8000efc:	68b8      	ldr	r0, [r7, #8]
 8000efe:	f7ff fdb1 	bl	8000a64 <drivingInput>
 8000f02:	eef0 7a40 	vmov.f32	s15, s0
 8000f06:	4b39      	ldr	r3, [pc, #228]	; (8000fec <main+0x24c>)
 8000f08:	edc3 7a00 	vstr	s15, [r3]
		  y = rawSteeringToAngle(steeringInput(steeringRequest));
 8000f0c:	68f8      	ldr	r0, [r7, #12]
 8000f0e:	f7ff fd75 	bl	80009fc <steeringInput>
 8000f12:	eef0 7a40 	vmov.f32	s15, s0
 8000f16:	eeb0 0a67 	vmov.f32	s0, s15
 8000f1a:	f7ff fecb 	bl	8000cb4 <rawSteeringToAngle>
 8000f1e:	eef0 7a40 	vmov.f32	s15, s0
 8000f22:	4b33      	ldr	r3, [pc, #204]	; (8000ff0 <main+0x250>)
 8000f24:	edc3 7a00 	vstr	s15, [r3]
		  steeringRequest = TIM2->CCR2;//Sets curVal to the timer counts per period(PWM signal)
 8000f28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f2e:	60fb      	str	r3, [r7, #12]
		  drivingRequest = TIM5->CCR2;
 8000f30:	4b30      	ldr	r3, [pc, #192]	; (8000ff4 <main+0x254>)
 8000f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f34:	60bb      	str	r3, [r7, #8]

		  if(TIM1->CCR2<pwmBottomState){//Switch to RC mode, middle switch state
 8000f36:	4b30      	ldr	r3, [pc, #192]	; (8000ff8 <main+0x258>)
 8000f38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d210      	bcs.n	8000f62 <main+0x1c2>
			  setSteeringMotor(a);
 8000f40:	4b28      	ldr	r3, [pc, #160]	; (8000fe4 <main+0x244>)
 8000f42:	edd3 7a00 	vldr	s15, [r3]
 8000f46:	eeb0 0a67 	vmov.f32	s0, s15
 8000f4a:	f7ff fecd 	bl	8000ce8 <setSteeringMotor>
			  setDrivingMotor(drivingInput(drivingRequest));
 8000f4e:	68b8      	ldr	r0, [r7, #8]
 8000f50:	f7ff fd88 	bl	8000a64 <drivingInput>
 8000f54:	eef0 7a40 	vmov.f32	s15, s0
 8000f58:	eeb0 0a67 	vmov.f32	s0, s15
 8000f5c:	f7ff feea 	bl	8000d34 <setDrivingMotor>
 8000f60:	e01b      	b.n	8000f9a <main+0x1fa>

		  }
		  else if(TIM1->CCR2>pwmHighState){//Switch to auto mode, high switch state
 8000f62:	4b25      	ldr	r3, [pc, #148]	; (8000ff8 <main+0x258>)
 8000f64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f66:	887b      	ldrh	r3, [r7, #2]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d912      	bls.n	8000f92 <main+0x1f2>
			  setSteeringMotor(steeringInput(steeringRequest));//Sets the PWM output to the converted PWM input
 8000f6c:	68f8      	ldr	r0, [r7, #12]
 8000f6e:	f7ff fd45 	bl	80009fc <steeringInput>
 8000f72:	eef0 7a40 	vmov.f32	s15, s0
 8000f76:	eeb0 0a67 	vmov.f32	s0, s15
 8000f7a:	f7ff feb5 	bl	8000ce8 <setSteeringMotor>
			  setDrivingMotor(drivingInput(drivingRequest));
 8000f7e:	68b8      	ldr	r0, [r7, #8]
 8000f80:	f7ff fd70 	bl	8000a64 <drivingInput>
 8000f84:	eef0 7a40 	vmov.f32	s15, s0
 8000f88:	eeb0 0a67 	vmov.f32	s0, s15
 8000f8c:	f7ff fed2 	bl	8000d34 <setDrivingMotor>
 8000f90:	e003      	b.n	8000f9a <main+0x1fa>
//			  setSteeringMotor(0.5);
			  //TODO: Auto Code
		  }
		  else{
			  //off state, low switch state
			  setSteeringMotor(0.5);
 8000f92:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8000f96:	f7ff fea7 	bl	8000ce8 <setSteeringMotor>
//			  TIM10->CCR2 = pwmOutMax/2;//Sets steering motor power to 0
		  }

		  HAL_Delay(10);//For faster response decrease delay
 8000f9a:	200a      	movs	r0, #10
 8000f9c:	f001 fb1c 	bl	80025d8 <HAL_Delay>
 8000fa0:	e783      	b.n	8000eaa <main+0x10a>
	  }
	  else{
//		  TIM10->CCR2 = pwmOutMax/2;//Sets steering motor power to 0
//		  setSteeringMotor(0);
		  setSteeringMotor(0.5);
 8000fa2:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8000fa6:	f7ff fe9f 	bl	8000ce8 <setSteeringMotor>
	  if(true){
 8000faa:	e77e      	b.n	8000eaa <main+0x10a>
 8000fac:	20000004 	.word	0x20000004
 8000fb0:	20000008 	.word	0x20000008
 8000fb4:	200000fc 	.word	0x200000fc
 8000fb8:	20000144 	.word	0x20000144
 8000fbc:	2000018c 	.word	0x2000018c
 8000fc0:	200001d4 	.word	0x200001d4
 8000fc4:	2000021c 	.word	0x2000021c
 8000fc8:	20000264 	.word	0x20000264
 8000fcc:	2000033c 	.word	0x2000033c
 8000fd0:	200002ac 	.word	0x200002ac
 8000fd4:	200002f4 	.word	0x200002f4
 8000fd8:	40014400 	.word	0x40014400
 8000fdc:	40014800 	.word	0x40014800
 8000fe0:	40000800 	.word	0x40000800
 8000fe4:	200003f0 	.word	0x200003f0
 8000fe8:	200003f4 	.word	0x200003f4
 8000fec:	200003e8 	.word	0x200003e8
 8000ff0:	200003ec 	.word	0x200003ec
 8000ff4:	40000c00 	.word	0x40000c00
 8000ff8:	40010000 	.word	0x40010000

08000ffc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b094      	sub	sp, #80	; 0x50
 8001000:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	2234      	movs	r2, #52	; 0x34
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f005 fd56 	bl	8006abc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001010:	f107 0308 	add.w	r3, r7, #8
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	4b2e      	ldr	r3, [pc, #184]	; (80010e0 <SystemClock_Config+0xe4>)
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	4a2d      	ldr	r2, [pc, #180]	; (80010e0 <SystemClock_Config+0xe4>)
 800102a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102e:	6413      	str	r3, [r2, #64]	; 0x40
 8001030:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <SystemClock_Config+0xe4>)
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800103c:	2300      	movs	r3, #0
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	4b28      	ldr	r3, [pc, #160]	; (80010e4 <SystemClock_Config+0xe8>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a27      	ldr	r2, [pc, #156]	; (80010e4 <SystemClock_Config+0xe8>)
 8001046:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800104a:	6013      	str	r3, [r2, #0]
 800104c:	4b25      	ldr	r3, [pc, #148]	; (80010e4 <SystemClock_Config+0xe8>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001058:	2309      	movs	r3, #9
 800105a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800105c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001060:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001062:	2301      	movs	r3, #1
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001066:	2301      	movs	r3, #1
 8001068:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800106a:	2302      	movs	r3, #2
 800106c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800106e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001072:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001074:	2304      	movs	r3, #4
 8001076:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001078:	23b4      	movs	r3, #180	; 0xb4
 800107a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800107c:	2302      	movs	r3, #2
 800107e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001080:	2302      	movs	r3, #2
 8001082:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001084:	2302      	movs	r3, #2
 8001086:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001088:	f107 031c 	add.w	r3, r7, #28
 800108c:	4618      	mov	r0, r3
 800108e:	f002 ffe7 	bl	8004060 <HAL_RCC_OscConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001098:	f000 fe30 	bl	8001cfc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800109c:	f002 f91c 	bl	80032d8 <HAL_PWREx_EnableOverDrive>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80010a6:	f000 fe29 	bl	8001cfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010aa:	230f      	movs	r3, #15
 80010ac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ae:	2302      	movs	r3, #2
 80010b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80010bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010c0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010c2:	f107 0308 	add.w	r3, r7, #8
 80010c6:	2105      	movs	r1, #5
 80010c8:	4618      	mov	r0, r3
 80010ca:	f002 f955 	bl	8003378 <HAL_RCC_ClockConfig>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80010d4:	f000 fe12 	bl	8001cfc <Error_Handler>
  }
}
 80010d8:	bf00      	nop
 80010da:	3750      	adds	r7, #80	; 0x50
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40007000 	.word	0x40007000

080010e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ee:	463b      	mov	r3, r7
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010fa:	4b21      	ldr	r3, [pc, #132]	; (8001180 <MX_ADC1_Init+0x98>)
 80010fc:	4a21      	ldr	r2, [pc, #132]	; (8001184 <MX_ADC1_Init+0x9c>)
 80010fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001100:	4b1f      	ldr	r3, [pc, #124]	; (8001180 <MX_ADC1_Init+0x98>)
 8001102:	2200      	movs	r2, #0
 8001104:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001106:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <MX_ADC1_Init+0x98>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800110c:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <MX_ADC1_Init+0x98>)
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001112:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <MX_ADC1_Init+0x98>)
 8001114:	2200      	movs	r2, #0
 8001116:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001118:	4b19      	ldr	r3, [pc, #100]	; (8001180 <MX_ADC1_Init+0x98>)
 800111a:	2200      	movs	r2, #0
 800111c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001120:	4b17      	ldr	r3, [pc, #92]	; (8001180 <MX_ADC1_Init+0x98>)
 8001122:	2200      	movs	r2, #0
 8001124:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001126:	4b16      	ldr	r3, [pc, #88]	; (8001180 <MX_ADC1_Init+0x98>)
 8001128:	4a17      	ldr	r2, [pc, #92]	; (8001188 <MX_ADC1_Init+0xa0>)
 800112a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800112c:	4b14      	ldr	r3, [pc, #80]	; (8001180 <MX_ADC1_Init+0x98>)
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001132:	4b13      	ldr	r3, [pc, #76]	; (8001180 <MX_ADC1_Init+0x98>)
 8001134:	2201      	movs	r2, #1
 8001136:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <MX_ADC1_Init+0x98>)
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <MX_ADC1_Init+0x98>)
 8001142:	2201      	movs	r2, #1
 8001144:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001146:	480e      	ldr	r0, [pc, #56]	; (8001180 <MX_ADC1_Init+0x98>)
 8001148:	f001 fa6a 	bl	8002620 <HAL_ADC_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001152:	f000 fdd3 	bl	8001cfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001156:	2307      	movs	r3, #7
 8001158:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800115a:	2301      	movs	r3, #1
 800115c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001162:	463b      	mov	r3, r7
 8001164:	4619      	mov	r1, r3
 8001166:	4806      	ldr	r0, [pc, #24]	; (8001180 <MX_ADC1_Init+0x98>)
 8001168:	f001 fa9e 	bl	80026a8 <HAL_ADC_ConfigChannel>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001172:	f000 fdc3 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000040 	.word	0x20000040
 8001184:	40012000 	.word	0x40012000
 8001188:	0f000001 	.word	0x0f000001

0800118c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <MX_I2C2_Init+0x50>)
 8001192:	4a13      	ldr	r2, [pc, #76]	; (80011e0 <MX_I2C2_Init+0x54>)
 8001194:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <MX_I2C2_Init+0x50>)
 8001198:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <MX_I2C2_Init+0x58>)
 800119a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <MX_I2C2_Init+0x50>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <MX_I2C2_Init+0x50>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <MX_I2C2_Init+0x50>)
 80011aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011b0:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <MX_I2C2_Init+0x50>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_I2C2_Init+0x50>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <MX_I2C2_Init+0x50>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <MX_I2C2_Init+0x50>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011c8:	4804      	ldr	r0, [pc, #16]	; (80011dc <MX_I2C2_Init+0x50>)
 80011ca:	f001 ff41 	bl	8003050 <HAL_I2C_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80011d4:	f000 fd92 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000088 	.word	0x20000088
 80011e0:	40005800 	.word	0x40005800
 80011e4:	000186a0 	.word	0x000186a0

080011e8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80011fc:	2300      	movs	r3, #0
 80011fe:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001200:	4b29      	ldr	r3, [pc, #164]	; (80012a8 <MX_RTC_Init+0xc0>)
 8001202:	4a2a      	ldr	r2, [pc, #168]	; (80012ac <MX_RTC_Init+0xc4>)
 8001204:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001206:	4b28      	ldr	r3, [pc, #160]	; (80012a8 <MX_RTC_Init+0xc0>)
 8001208:	2200      	movs	r2, #0
 800120a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800120c:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <MX_RTC_Init+0xc0>)
 800120e:	227f      	movs	r2, #127	; 0x7f
 8001210:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001212:	4b25      	ldr	r3, [pc, #148]	; (80012a8 <MX_RTC_Init+0xc0>)
 8001214:	22ff      	movs	r2, #255	; 0xff
 8001216:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001218:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <MX_RTC_Init+0xc0>)
 800121a:	2200      	movs	r2, #0
 800121c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800121e:	4b22      	ldr	r3, [pc, #136]	; (80012a8 <MX_RTC_Init+0xc0>)
 8001220:	2200      	movs	r2, #0
 8001222:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001224:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <MX_RTC_Init+0xc0>)
 8001226:	2200      	movs	r2, #0
 8001228:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800122a:	481f      	ldr	r0, [pc, #124]	; (80012a8 <MX_RTC_Init+0xc0>)
 800122c:	f003 f9b6 	bl	800459c <HAL_RTC_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001236:	f000 fd61 	bl	8001cfc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800123a:	2300      	movs	r3, #0
 800123c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800123e:	2300      	movs	r3, #0
 8001240:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001242:	2300      	movs	r3, #0
 8001244:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2201      	movs	r2, #1
 8001252:	4619      	mov	r1, r3
 8001254:	4814      	ldr	r0, [pc, #80]	; (80012a8 <MX_RTC_Init+0xc0>)
 8001256:	f003 fa17 	bl	8004688 <HAL_RTC_SetTime>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001260:	f000 fd4c 	bl	8001cfc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001264:	2301      	movs	r3, #1
 8001266:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001268:	2301      	movs	r3, #1
 800126a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800126c:	2301      	movs	r3, #1
 800126e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001270:	2300      	movs	r3, #0
 8001272:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001274:	463b      	mov	r3, r7
 8001276:	2201      	movs	r2, #1
 8001278:	4619      	mov	r1, r3
 800127a:	480b      	ldr	r0, [pc, #44]	; (80012a8 <MX_RTC_Init+0xc0>)
 800127c:	f003 fa9e 	bl	80047bc <HAL_RTC_SetDate>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001286:	f000 fd39 	bl	8001cfc <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	4806      	ldr	r0, [pc, #24]	; (80012a8 <MX_RTC_Init+0xc0>)
 8001290:	f003 fbb9 	bl	8004a06 <HAL_RTCEx_SetWakeUpTimer>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 800129a:	f000 fd2f 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200000dc 	.word	0x200000dc
 80012ac:	40002800 	.word	0x40002800

080012b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08c      	sub	sp, #48	; 0x30
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80012b6:	f107 031c 	add.w	r3, r7, #28
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
 80012c4:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012c6:	f107 030c 	add.w	r3, r7, #12
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012dc:	4b34      	ldr	r3, [pc, #208]	; (80013b0 <MX_TIM1_Init+0x100>)
 80012de:	4a35      	ldr	r2, [pc, #212]	; (80013b4 <MX_TIM1_Init+0x104>)
 80012e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012e2:	4b33      	ldr	r3, [pc, #204]	; (80013b0 <MX_TIM1_Init+0x100>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e8:	4b31      	ldr	r3, [pc, #196]	; (80013b0 <MX_TIM1_Init+0x100>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012ee:	4b30      	ldr	r3, [pc, #192]	; (80013b0 <MX_TIM1_Init+0x100>)
 80012f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f6:	4b2e      	ldr	r3, [pc, #184]	; (80013b0 <MX_TIM1_Init+0x100>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012fc:	4b2c      	ldr	r3, [pc, #176]	; (80013b0 <MX_TIM1_Init+0x100>)
 80012fe:	2200      	movs	r2, #0
 8001300:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001302:	4b2b      	ldr	r3, [pc, #172]	; (80013b0 <MX_TIM1_Init+0x100>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001308:	4829      	ldr	r0, [pc, #164]	; (80013b0 <MX_TIM1_Init+0x100>)
 800130a:	f003 fd89 	bl	8004e20 <HAL_TIM_IC_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001314:	f000 fcf2 	bl	8001cfc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001318:	2304      	movs	r3, #4
 800131a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800131c:	2350      	movs	r3, #80	; 0x50
 800131e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001320:	2300      	movs	r3, #0
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001324:	2300      	movs	r3, #0
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	4619      	mov	r1, r3
 8001332:	481f      	ldr	r0, [pc, #124]	; (80013b0 <MX_TIM1_Init+0x100>)
 8001334:	f004 faf5 	bl	8005922 <HAL_TIM_SlaveConfigSynchro>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800133e:	f000 fcdd 	bl	8001cfc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001346:	2301      	movs	r3, #1
 8001348:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	2200      	movs	r2, #0
 8001358:	4619      	mov	r1, r3
 800135a:	4815      	ldr	r0, [pc, #84]	; (80013b0 <MX_TIM1_Init+0x100>)
 800135c:	f004 f8bc 	bl	80054d8 <HAL_TIM_IC_ConfigChannel>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8001366:	f000 fcc9 	bl	8001cfc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800136a:	2302      	movs	r3, #2
 800136c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800136e:	2302      	movs	r3, #2
 8001370:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001372:	f107 030c 	add.w	r3, r7, #12
 8001376:	2204      	movs	r2, #4
 8001378:	4619      	mov	r1, r3
 800137a:	480d      	ldr	r0, [pc, #52]	; (80013b0 <MX_TIM1_Init+0x100>)
 800137c:	f004 f8ac 	bl	80054d8 <HAL_TIM_IC_ConfigChannel>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8001386:	f000 fcb9 	bl	8001cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	4619      	mov	r1, r3
 8001396:	4806      	ldr	r0, [pc, #24]	; (80013b0 <MX_TIM1_Init+0x100>)
 8001398:	f005 f83e 	bl	8006418 <HAL_TIMEx_MasterConfigSynchronization>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80013a2:	f000 fcab 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	3730      	adds	r7, #48	; 0x30
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200000fc 	.word	0x200000fc
 80013b4:	40010000 	.word	0x40010000

080013b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08c      	sub	sp, #48	; 0x30
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
 80013cc:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013ce:	f107 030c 	add.w	r3, r7, #12
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013e4:	4b33      	ldr	r3, [pc, #204]	; (80014b4 <MX_TIM2_Init+0xfc>)
 80013e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013ec:	4b31      	ldr	r3, [pc, #196]	; (80014b4 <MX_TIM2_Init+0xfc>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f2:	4b30      	ldr	r3, [pc, #192]	; (80014b4 <MX_TIM2_Init+0xfc>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013f8:	4b2e      	ldr	r3, [pc, #184]	; (80014b4 <MX_TIM2_Init+0xfc>)
 80013fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001400:	4b2c      	ldr	r3, [pc, #176]	; (80014b4 <MX_TIM2_Init+0xfc>)
 8001402:	2200      	movs	r2, #0
 8001404:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001406:	4b2b      	ldr	r3, [pc, #172]	; (80014b4 <MX_TIM2_Init+0xfc>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800140c:	4829      	ldr	r0, [pc, #164]	; (80014b4 <MX_TIM2_Init+0xfc>)
 800140e:	f003 fd07 	bl	8004e20 <HAL_TIM_IC_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001418:	f000 fc70 	bl	8001cfc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800141c:	2304      	movs	r3, #4
 800141e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001420:	2350      	movs	r3, #80	; 0x50
 8001422:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001424:	2300      	movs	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001428:	2300      	movs	r3, #0
 800142a:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001430:	f107 031c 	add.w	r3, r7, #28
 8001434:	4619      	mov	r1, r3
 8001436:	481f      	ldr	r0, [pc, #124]	; (80014b4 <MX_TIM2_Init+0xfc>)
 8001438:	f004 fa73 	bl	8005922 <HAL_TIM_SlaveConfigSynchro>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001442:	f000 fc5b 	bl	8001cfc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800144a:	2301      	movs	r3, #1
 800144c:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001456:	f107 030c 	add.w	r3, r7, #12
 800145a:	2200      	movs	r2, #0
 800145c:	4619      	mov	r1, r3
 800145e:	4815      	ldr	r0, [pc, #84]	; (80014b4 <MX_TIM2_Init+0xfc>)
 8001460:	f004 f83a 	bl	80054d8 <HAL_TIM_IC_ConfigChannel>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800146a:	f000 fc47 	bl	8001cfc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800146e:	2302      	movs	r3, #2
 8001470:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001472:	2302      	movs	r3, #2
 8001474:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001476:	f107 030c 	add.w	r3, r7, #12
 800147a:	2204      	movs	r2, #4
 800147c:	4619      	mov	r1, r3
 800147e:	480d      	ldr	r0, [pc, #52]	; (80014b4 <MX_TIM2_Init+0xfc>)
 8001480:	f004 f82a 	bl	80054d8 <HAL_TIM_IC_ConfigChannel>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800148a:	f000 fc37 	bl	8001cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	4619      	mov	r1, r3
 800149a:	4806      	ldr	r0, [pc, #24]	; (80014b4 <MX_TIM2_Init+0xfc>)
 800149c:	f004 ffbc 	bl	8006418 <HAL_TIMEx_MasterConfigSynchronization>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 80014a6:	f000 fc29 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	3730      	adds	r7, #48	; 0x30
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000144 	.word	0x20000144

080014b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b090      	sub	sp, #64	; 0x40
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80014cc:	f107 031c 	add.w	r3, r7, #28
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014dc:	f107 030c 	add.w	r3, r7, #12
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014f2:	4b3e      	ldr	r3, [pc, #248]	; (80015ec <MX_TIM3_Init+0x134>)
 80014f4:	4a3e      	ldr	r2, [pc, #248]	; (80015f0 <MX_TIM3_Init+0x138>)
 80014f6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014f8:	4b3c      	ldr	r3, [pc, #240]	; (80015ec <MX_TIM3_Init+0x134>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fe:	4b3b      	ldr	r3, [pc, #236]	; (80015ec <MX_TIM3_Init+0x134>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001504:	4b39      	ldr	r3, [pc, #228]	; (80015ec <MX_TIM3_Init+0x134>)
 8001506:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800150a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150c:	4b37      	ldr	r3, [pc, #220]	; (80015ec <MX_TIM3_Init+0x134>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001512:	4b36      	ldr	r3, [pc, #216]	; (80015ec <MX_TIM3_Init+0x134>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001518:	4834      	ldr	r0, [pc, #208]	; (80015ec <MX_TIM3_Init+0x134>)
 800151a:	f003 fb11 	bl	8004b40 <HAL_TIM_Base_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001524:	f000 fbea 	bl	8001cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800152e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001532:	4619      	mov	r1, r3
 8001534:	482d      	ldr	r0, [pc, #180]	; (80015ec <MX_TIM3_Init+0x134>)
 8001536:	f004 f92d 	bl	8005794 <HAL_TIM_ConfigClockSource>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001540:	f000 fbdc 	bl	8001cfc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001544:	4829      	ldr	r0, [pc, #164]	; (80015ec <MX_TIM3_Init+0x134>)
 8001546:	f003 fc6b 	bl	8004e20 <HAL_TIM_IC_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001550:	f000 fbd4 	bl	8001cfc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001554:	2304      	movs	r3, #4
 8001556:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001558:	2350      	movs	r3, #80	; 0x50
 800155a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800155c:	2300      	movs	r3, #0
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001568:	f107 031c 	add.w	r3, r7, #28
 800156c:	4619      	mov	r1, r3
 800156e:	481f      	ldr	r0, [pc, #124]	; (80015ec <MX_TIM3_Init+0x134>)
 8001570:	f004 f9d7 	bl	8005922 <HAL_TIM_SlaveConfigSynchro>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 800157a:	f000 fbbf 	bl	8001cfc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001582:	2301      	movs	r3, #1
 8001584:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800158e:	f107 030c 	add.w	r3, r7, #12
 8001592:	2200      	movs	r2, #0
 8001594:	4619      	mov	r1, r3
 8001596:	4815      	ldr	r0, [pc, #84]	; (80015ec <MX_TIM3_Init+0x134>)
 8001598:	f003 ff9e 	bl	80054d8 <HAL_TIM_IC_ConfigChannel>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80015a2:	f000 fbab 	bl	8001cfc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80015a6:	2302      	movs	r3, #2
 80015a8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80015aa:	2302      	movs	r3, #2
 80015ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80015ae:	f107 030c 	add.w	r3, r7, #12
 80015b2:	2204      	movs	r2, #4
 80015b4:	4619      	mov	r1, r3
 80015b6:	480d      	ldr	r0, [pc, #52]	; (80015ec <MX_TIM3_Init+0x134>)
 80015b8:	f003 ff8e 	bl	80054d8 <HAL_TIM_IC_ConfigChannel>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 80015c2:	f000 fb9b 	bl	8001cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	4619      	mov	r1, r3
 80015d2:	4806      	ldr	r0, [pc, #24]	; (80015ec <MX_TIM3_Init+0x134>)
 80015d4:	f004 ff20 	bl	8006418 <HAL_TIMEx_MasterConfigSynchronization>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM3_Init+0x12a>
  {
    Error_Handler();
 80015de:	f000 fb8d 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	3740      	adds	r7, #64	; 0x40
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	2000018c 	.word	0x2000018c
 80015f0:	40000400 	.word	0x40000400

080015f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b090      	sub	sp, #64	; 0x40
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001608:	f107 031c 	add.w	r3, r7, #28
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001618:	f107 030c 	add.w	r3, r7, #12
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800162e:	4b3e      	ldr	r3, [pc, #248]	; (8001728 <MX_TIM4_Init+0x134>)
 8001630:	4a3e      	ldr	r2, [pc, #248]	; (800172c <MX_TIM4_Init+0x138>)
 8001632:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001634:	4b3c      	ldr	r3, [pc, #240]	; (8001728 <MX_TIM4_Init+0x134>)
 8001636:	2200      	movs	r2, #0
 8001638:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163a:	4b3b      	ldr	r3, [pc, #236]	; (8001728 <MX_TIM4_Init+0x134>)
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001640:	4b39      	ldr	r3, [pc, #228]	; (8001728 <MX_TIM4_Init+0x134>)
 8001642:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001646:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001648:	4b37      	ldr	r3, [pc, #220]	; (8001728 <MX_TIM4_Init+0x134>)
 800164a:	2200      	movs	r2, #0
 800164c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164e:	4b36      	ldr	r3, [pc, #216]	; (8001728 <MX_TIM4_Init+0x134>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001654:	4834      	ldr	r0, [pc, #208]	; (8001728 <MX_TIM4_Init+0x134>)
 8001656:	f003 fa73 	bl	8004b40 <HAL_TIM_Base_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001660:	f000 fb4c 	bl	8001cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001668:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800166a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800166e:	4619      	mov	r1, r3
 8001670:	482d      	ldr	r0, [pc, #180]	; (8001728 <MX_TIM4_Init+0x134>)
 8001672:	f004 f88f 	bl	8005794 <HAL_TIM_ConfigClockSource>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800167c:	f000 fb3e 	bl	8001cfc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001680:	4829      	ldr	r0, [pc, #164]	; (8001728 <MX_TIM4_Init+0x134>)
 8001682:	f003 fbcd 	bl	8004e20 <HAL_TIM_IC_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800168c:	f000 fb36 	bl	8001cfc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001690:	2304      	movs	r3, #4
 8001692:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001694:	2350      	movs	r3, #80	; 0x50
 8001696:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001698:	2300      	movs	r3, #0
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800169c:	2300      	movs	r3, #0
 800169e:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80016a4:	f107 031c 	add.w	r3, r7, #28
 80016a8:	4619      	mov	r1, r3
 80016aa:	481f      	ldr	r0, [pc, #124]	; (8001728 <MX_TIM4_Init+0x134>)
 80016ac:	f004 f939 	bl	8005922 <HAL_TIM_SlaveConfigSynchro>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 80016b6:	f000 fb21 	bl	8001cfc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016be:	2301      	movs	r3, #1
 80016c0:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	2200      	movs	r2, #0
 80016d0:	4619      	mov	r1, r3
 80016d2:	4815      	ldr	r0, [pc, #84]	; (8001728 <MX_TIM4_Init+0x134>)
 80016d4:	f003 ff00 	bl	80054d8 <HAL_TIM_IC_ConfigChannel>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80016de:	f000 fb0d 	bl	8001cfc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80016e2:	2302      	movs	r3, #2
 80016e4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80016e6:	2302      	movs	r3, #2
 80016e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80016ea:	f107 030c 	add.w	r3, r7, #12
 80016ee:	2204      	movs	r2, #4
 80016f0:	4619      	mov	r1, r3
 80016f2:	480d      	ldr	r0, [pc, #52]	; (8001728 <MX_TIM4_Init+0x134>)
 80016f4:	f003 fef0 	bl	80054d8 <HAL_TIM_IC_ConfigChannel>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM4_Init+0x10e>
  {
    Error_Handler();
 80016fe:	f000 fafd 	bl	8001cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001706:	2300      	movs	r3, #0
 8001708:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	4619      	mov	r1, r3
 800170e:	4806      	ldr	r0, [pc, #24]	; (8001728 <MX_TIM4_Init+0x134>)
 8001710:	f004 fe82 	bl	8006418 <HAL_TIMEx_MasterConfigSynchronization>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM4_Init+0x12a>
  {
    Error_Handler();
 800171a:	f000 faef 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800171e:	bf00      	nop
 8001720:	3740      	adds	r7, #64	; 0x40
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	200001d4 	.word	0x200001d4
 800172c:	40000800 	.word	0x40000800

08001730 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b090      	sub	sp, #64	; 0x40
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001736:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001744:	f107 031c 	add.w	r3, r7, #28
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800176a:	4b3e      	ldr	r3, [pc, #248]	; (8001864 <MX_TIM5_Init+0x134>)
 800176c:	4a3e      	ldr	r2, [pc, #248]	; (8001868 <MX_TIM5_Init+0x138>)
 800176e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001770:	4b3c      	ldr	r3, [pc, #240]	; (8001864 <MX_TIM5_Init+0x134>)
 8001772:	2200      	movs	r2, #0
 8001774:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001776:	4b3b      	ldr	r3, [pc, #236]	; (8001864 <MX_TIM5_Init+0x134>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800177c:	4b39      	ldr	r3, [pc, #228]	; (8001864 <MX_TIM5_Init+0x134>)
 800177e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001782:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001784:	4b37      	ldr	r3, [pc, #220]	; (8001864 <MX_TIM5_Init+0x134>)
 8001786:	2200      	movs	r2, #0
 8001788:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800178a:	4b36      	ldr	r3, [pc, #216]	; (8001864 <MX_TIM5_Init+0x134>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001790:	4834      	ldr	r0, [pc, #208]	; (8001864 <MX_TIM5_Init+0x134>)
 8001792:	f003 f9d5 	bl	8004b40 <HAL_TIM_Base_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800179c:	f000 faae 	bl	8001cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80017a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017aa:	4619      	mov	r1, r3
 80017ac:	482d      	ldr	r0, [pc, #180]	; (8001864 <MX_TIM5_Init+0x134>)
 80017ae:	f003 fff1 	bl	8005794 <HAL_TIM_ConfigClockSource>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80017b8:	f000 faa0 	bl	8001cfc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80017bc:	4829      	ldr	r0, [pc, #164]	; (8001864 <MX_TIM5_Init+0x134>)
 80017be:	f003 fb2f 	bl	8004e20 <HAL_TIM_IC_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80017c8:	f000 fa98 	bl	8001cfc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80017cc:	2304      	movs	r3, #4
 80017ce:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80017d0:	2350      	movs	r3, #80	; 0x50
 80017d2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017d4:	2300      	movs	r3, #0
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80017d8:	2300      	movs	r3, #0
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 80017e0:	f107 031c 	add.w	r3, r7, #28
 80017e4:	4619      	mov	r1, r3
 80017e6:	481f      	ldr	r0, [pc, #124]	; (8001864 <MX_TIM5_Init+0x134>)
 80017e8:	f004 f89b 	bl	8005922 <HAL_TIM_SlaveConfigSynchro>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM5_Init+0xc6>
  {
    Error_Handler();
 80017f2:	f000 fa83 	bl	8001cfc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017fa:	2301      	movs	r3, #1
 80017fc:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001806:	f107 030c 	add.w	r3, r7, #12
 800180a:	2200      	movs	r2, #0
 800180c:	4619      	mov	r1, r3
 800180e:	4815      	ldr	r0, [pc, #84]	; (8001864 <MX_TIM5_Init+0x134>)
 8001810:	f003 fe62 	bl	80054d8 <HAL_TIM_IC_ConfigChannel>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 800181a:	f000 fa6f 	bl	8001cfc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800181e:	2302      	movs	r3, #2
 8001820:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001822:	2302      	movs	r3, #2
 8001824:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001826:	f107 030c 	add.w	r3, r7, #12
 800182a:	2204      	movs	r2, #4
 800182c:	4619      	mov	r1, r3
 800182e:	480d      	ldr	r0, [pc, #52]	; (8001864 <MX_TIM5_Init+0x134>)
 8001830:	f003 fe52 	bl	80054d8 <HAL_TIM_IC_ConfigChannel>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_TIM5_Init+0x10e>
  {
    Error_Handler();
 800183a:	f000 fa5f 	bl	8001cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	4619      	mov	r1, r3
 800184a:	4806      	ldr	r0, [pc, #24]	; (8001864 <MX_TIM5_Init+0x134>)
 800184c:	f004 fde4 	bl	8006418 <HAL_TIMEx_MasterConfigSynchronization>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM5_Init+0x12a>
  {
    Error_Handler();
 8001856:	f000 fa51 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800185a:	bf00      	nop
 800185c:	3740      	adds	r7, #64	; 0x40
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	2000021c 	.word	0x2000021c
 8001868:	40000c00 	.word	0x40000c00

0800186c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b090      	sub	sp, #64	; 0x40
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001872:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001880:	f107 031c 	add.w	r3, r7, #28
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001890:	f107 030c 	add.w	r3, r7, #12
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80018a6:	4b3f      	ldr	r3, [pc, #252]	; (80019a4 <MX_TIM8_Init+0x138>)
 80018a8:	4a3f      	ldr	r2, [pc, #252]	; (80019a8 <MX_TIM8_Init+0x13c>)
 80018aa:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80018ac:	4b3d      	ldr	r3, [pc, #244]	; (80019a4 <MX_TIM8_Init+0x138>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b2:	4b3c      	ldr	r3, [pc, #240]	; (80019a4 <MX_TIM8_Init+0x138>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80018b8:	4b3a      	ldr	r3, [pc, #232]	; (80019a4 <MX_TIM8_Init+0x138>)
 80018ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018be:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c0:	4b38      	ldr	r3, [pc, #224]	; (80019a4 <MX_TIM8_Init+0x138>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80018c6:	4b37      	ldr	r3, [pc, #220]	; (80019a4 <MX_TIM8_Init+0x138>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018cc:	4b35      	ldr	r3, [pc, #212]	; (80019a4 <MX_TIM8_Init+0x138>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80018d2:	4834      	ldr	r0, [pc, #208]	; (80019a4 <MX_TIM8_Init+0x138>)
 80018d4:	f003 f934 	bl	8004b40 <HAL_TIM_Base_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80018de:	f000 fa0d 	bl	8001cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018e6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80018e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018ec:	4619      	mov	r1, r3
 80018ee:	482d      	ldr	r0, [pc, #180]	; (80019a4 <MX_TIM8_Init+0x138>)
 80018f0:	f003 ff50 	bl	8005794 <HAL_TIM_ConfigClockSource>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 80018fa:	f000 f9ff 	bl	8001cfc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 80018fe:	4829      	ldr	r0, [pc, #164]	; (80019a4 <MX_TIM8_Init+0x138>)
 8001900:	f003 fa8e 	bl	8004e20 <HAL_TIM_IC_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM8_Init+0xa2>
  {
    Error_Handler();
 800190a:	f000 f9f7 	bl	8001cfc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800190e:	2304      	movs	r3, #4
 8001910:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001912:	2350      	movs	r3, #80	; 0x50
 8001914:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001916:	2300      	movs	r3, #0
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800191a:	2300      	movs	r3, #0
 800191c:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8001922:	f107 031c 	add.w	r3, r7, #28
 8001926:	4619      	mov	r1, r3
 8001928:	481e      	ldr	r0, [pc, #120]	; (80019a4 <MX_TIM8_Init+0x138>)
 800192a:	f003 fffa 	bl	8005922 <HAL_TIM_SlaveConfigSynchro>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8001934:	f000 f9e2 	bl	8001cfc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800193c:	2301      	movs	r3, #1
 800193e:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001944:	2300      	movs	r3, #0
 8001946:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001948:	f107 030c 	add.w	r3, r7, #12
 800194c:	2200      	movs	r2, #0
 800194e:	4619      	mov	r1, r3
 8001950:	4814      	ldr	r0, [pc, #80]	; (80019a4 <MX_TIM8_Init+0x138>)
 8001952:	f003 fdc1 	bl	80054d8 <HAL_TIM_IC_ConfigChannel>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 800195c:	f000 f9ce 	bl	8001cfc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001960:	2302      	movs	r3, #2
 8001962:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001964:	2302      	movs	r3, #2
 8001966:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	2204      	movs	r2, #4
 800196e:	4619      	mov	r1, r3
 8001970:	480c      	ldr	r0, [pc, #48]	; (80019a4 <MX_TIM8_Init+0x138>)
 8001972:	f003 fdb1 	bl	80054d8 <HAL_TIM_IC_ConfigChannel>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM8_Init+0x114>
  {
    Error_Handler();
 800197c:	f000 f9be 	bl	8001cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001980:	2300      	movs	r3, #0
 8001982:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001984:	2300      	movs	r3, #0
 8001986:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001988:	1d3b      	adds	r3, r7, #4
 800198a:	4619      	mov	r1, r3
 800198c:	4805      	ldr	r0, [pc, #20]	; (80019a4 <MX_TIM8_Init+0x138>)
 800198e:	f004 fd43 	bl	8006418 <HAL_TIMEx_MasterConfigSynchronization>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8001998:	f000 f9b0 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800199c:	bf00      	nop
 800199e:	3740      	adds	r7, #64	; 0x40
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20000264 	.word	0x20000264
 80019a8:	40010400 	.word	0x40010400

080019ac <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
 80019c0:	615a      	str	r2, [r3, #20]
 80019c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80019c4:	4b1e      	ldr	r3, [pc, #120]	; (8001a40 <MX_TIM10_Init+0x94>)
 80019c6:	4a1f      	ldr	r2, [pc, #124]	; (8001a44 <MX_TIM10_Init+0x98>)
 80019c8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 999;
 80019ca:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <MX_TIM10_Init+0x94>)
 80019cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019d0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d2:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <MX_TIM10_Init+0x94>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1800-1;
 80019d8:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <MX_TIM10_Init+0x94>)
 80019da:	f240 7207 	movw	r2, #1799	; 0x707
 80019de:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e0:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <MX_TIM10_Init+0x94>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e6:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <MX_TIM10_Init+0x94>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80019ec:	4814      	ldr	r0, [pc, #80]	; (8001a40 <MX_TIM10_Init+0x94>)
 80019ee:	f003 f8a7 	bl	8004b40 <HAL_TIM_Base_Init>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 80019f8:	f000 f980 	bl	8001cfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80019fc:	4810      	ldr	r0, [pc, #64]	; (8001a40 <MX_TIM10_Init+0x94>)
 80019fe:	f003 f8ee 	bl	8004bde <HAL_TIM_PWM_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 8001a08:	f000 f978 	bl	8001cfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a0c:	2360      	movs	r3, #96	; 0x60
 8001a0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a1c:	1d3b      	adds	r3, r7, #4
 8001a1e:	2200      	movs	r2, #0
 8001a20:	4619      	mov	r1, r3
 8001a22:	4807      	ldr	r0, [pc, #28]	; (8001a40 <MX_TIM10_Init+0x94>)
 8001a24:	f003 fdf4 	bl	8005610 <HAL_TIM_PWM_ConfigChannel>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 8001a2e:	f000 f965 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001a32:	4803      	ldr	r0, [pc, #12]	; (8001a40 <MX_TIM10_Init+0x94>)
 8001a34:	f000 fc3a 	bl	80022ac <HAL_TIM_MspPostInit>

}
 8001a38:	bf00      	nop
 8001a3a:	3720      	adds	r7, #32
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	200002ac 	.word	0x200002ac
 8001a44:	40014400 	.word	0x40014400

08001a48 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a4e:	1d3b      	adds	r3, r7, #4
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
 8001a5c:	615a      	str	r2, [r3, #20]
 8001a5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001a60:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <MX_TIM11_Init+0x94>)
 8001a62:	4a1f      	ldr	r2, [pc, #124]	; (8001ae0 <MX_TIM11_Init+0x98>)
 8001a64:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8001a66:	4b1d      	ldr	r3, [pc, #116]	; (8001adc <MX_TIM11_Init+0x94>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <MX_TIM11_Init+0x94>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1800-1;
 8001a72:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <MX_TIM11_Init+0x94>)
 8001a74:	f240 7207 	movw	r2, #1799	; 0x707
 8001a78:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7a:	4b18      	ldr	r3, [pc, #96]	; (8001adc <MX_TIM11_Init+0x94>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a80:	4b16      	ldr	r3, [pc, #88]	; (8001adc <MX_TIM11_Init+0x94>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001a86:	4815      	ldr	r0, [pc, #84]	; (8001adc <MX_TIM11_Init+0x94>)
 8001a88:	f003 f85a 	bl	8004b40 <HAL_TIM_Base_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001a92:	f000 f933 	bl	8001cfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001a96:	4811      	ldr	r0, [pc, #68]	; (8001adc <MX_TIM11_Init+0x94>)
 8001a98:	f003 f8a1 	bl	8004bde <HAL_TIM_PWM_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001aa2:	f000 f92b 	bl	8001cfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aa6:	2360      	movs	r3, #96	; 0x60
 8001aa8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	2200      	movs	r2, #0
 8001aba:	4619      	mov	r1, r3
 8001abc:	4807      	ldr	r0, [pc, #28]	; (8001adc <MX_TIM11_Init+0x94>)
 8001abe:	f003 fda7 	bl	8005610 <HAL_TIM_PWM_ConfigChannel>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001ac8:	f000 f918 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001acc:	4803      	ldr	r0, [pc, #12]	; (8001adc <MX_TIM11_Init+0x94>)
 8001ace:	f000 fbed 	bl	80022ac <HAL_TIM_MspPostInit>

}
 8001ad2:	bf00      	nop
 8001ad4:	3720      	adds	r7, #32
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200002f4 	.word	0x200002f4
 8001ae0:	40014800 	.word	0x40014800

08001ae4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08e      	sub	sp, #56	; 0x38
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	609a      	str	r2, [r3, #8]
 8001b12:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001b14:	4b35      	ldr	r3, [pc, #212]	; (8001bec <MX_TIM12_Init+0x108>)
 8001b16:	4a36      	ldr	r2, [pc, #216]	; (8001bf0 <MX_TIM12_Init+0x10c>)
 8001b18:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001b1a:	4b34      	ldr	r3, [pc, #208]	; (8001bec <MX_TIM12_Init+0x108>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b20:	4b32      	ldr	r3, [pc, #200]	; (8001bec <MX_TIM12_Init+0x108>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001b26:	4b31      	ldr	r3, [pc, #196]	; (8001bec <MX_TIM12_Init+0x108>)
 8001b28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b2c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b2e:	4b2f      	ldr	r3, [pc, #188]	; (8001bec <MX_TIM12_Init+0x108>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b34:	4b2d      	ldr	r3, [pc, #180]	; (8001bec <MX_TIM12_Init+0x108>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001b3a:	482c      	ldr	r0, [pc, #176]	; (8001bec <MX_TIM12_Init+0x108>)
 8001b3c:	f003 f800 	bl	8004b40 <HAL_TIM_Base_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM12_Init+0x66>
  {
    Error_Handler();
 8001b46:	f000 f8d9 	bl	8001cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001b50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b54:	4619      	mov	r1, r3
 8001b56:	4825      	ldr	r0, [pc, #148]	; (8001bec <MX_TIM12_Init+0x108>)
 8001b58:	f003 fe1c 	bl	8005794 <HAL_TIM_ConfigClockSource>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM12_Init+0x82>
  {
    Error_Handler();
 8001b62:	f000 f8cb 	bl	8001cfc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 8001b66:	4821      	ldr	r0, [pc, #132]	; (8001bec <MX_TIM12_Init+0x108>)
 8001b68:	f003 f95a 	bl	8004e20 <HAL_TIM_IC_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM12_Init+0x92>
  {
    Error_Handler();
 8001b72:	f000 f8c3 	bl	8001cfc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001b76:	2304      	movs	r3, #4
 8001b78:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001b7a:	2350      	movs	r3, #80	; 0x50
 8001b7c:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim12, &sSlaveConfig) != HAL_OK)
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4816      	ldr	r0, [pc, #88]	; (8001bec <MX_TIM12_Init+0x108>)
 8001b92:	f003 fec6 	bl	8005922 <HAL_TIM_SlaveConfigSynchro>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_TIM12_Init+0xbc>
  {
    Error_Handler();
 8001b9c:	f000 f8ae 	bl	8001cfc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001bb0:	1d3b      	adds	r3, r7, #4
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	480d      	ldr	r0, [pc, #52]	; (8001bec <MX_TIM12_Init+0x108>)
 8001bb8:	f003 fc8e 	bl	80054d8 <HAL_TIM_IC_ConfigChannel>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM12_Init+0xe2>
  {
    Error_Handler();
 8001bc2:	f000 f89b 	bl	8001cfc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	2204      	movs	r2, #4
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4805      	ldr	r0, [pc, #20]	; (8001bec <MX_TIM12_Init+0x108>)
 8001bd6:	f003 fc7f 	bl	80054d8 <HAL_TIM_IC_ConfigChannel>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM12_Init+0x100>
  {
    Error_Handler();
 8001be0:	f000 f88c 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8001be4:	bf00      	nop
 8001be6:	3738      	adds	r7, #56	; 0x38
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	2000033c 	.word	0x2000033c
 8001bf0:	40001800 	.word	0x40001800

08001bf4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <MX_USART2_UART_Init+0x4c>)
 8001bfa:	4a12      	ldr	r2, [pc, #72]	; (8001c44 <MX_USART2_UART_Init+0x50>)
 8001bfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <MX_USART2_UART_Init+0x4c>)
 8001c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c06:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <MX_USART2_UART_Init+0x4c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <MX_USART2_UART_Init+0x4c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c12:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <MX_USART2_UART_Init+0x4c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c18:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <MX_USART2_UART_Init+0x4c>)
 8001c1a:	220c      	movs	r2, #12
 8001c1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c1e:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <MX_USART2_UART_Init+0x4c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <MX_USART2_UART_Init+0x4c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c2a:	4805      	ldr	r0, [pc, #20]	; (8001c40 <MX_USART2_UART_Init+0x4c>)
 8001c2c:	f004 fc84 	bl	8006538 <HAL_UART_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c36:	f000 f861 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000384 	.word	0x20000384
 8001c44:	40004400 	.word	0x40004400

08001c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	; 0x28
 8001c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	60da      	str	r2, [r3, #12]
 8001c5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	4b24      	ldr	r3, [pc, #144]	; (8001cf4 <MX_GPIO_Init+0xac>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a23      	ldr	r2, [pc, #140]	; (8001cf4 <MX_GPIO_Init+0xac>)
 8001c68:	f043 0304 	orr.w	r3, r3, #4
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b21      	ldr	r3, [pc, #132]	; (8001cf4 <MX_GPIO_Init+0xac>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0304 	and.w	r3, r3, #4
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <MX_GPIO_Init+0xac>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a1c      	ldr	r2, [pc, #112]	; (8001cf4 <MX_GPIO_Init+0xac>)
 8001c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <MX_GPIO_Init+0xac>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <MX_GPIO_Init+0xac>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	4a15      	ldr	r2, [pc, #84]	; (8001cf4 <MX_GPIO_Init+0xac>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca6:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <MX_GPIO_Init+0xac>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	607b      	str	r3, [r7, #4]
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <MX_GPIO_Init+0xac>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	4a0e      	ldr	r2, [pc, #56]	; (8001cf4 <MX_GPIO_Init+0xac>)
 8001cbc:	f043 0302 	orr.w	r3, r3, #2
 8001cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <MX_GPIO_Init+0xac>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001cce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cd4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cde:	f107 0314 	add.w	r3, r7, #20
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4804      	ldr	r0, [pc, #16]	; (8001cf8 <MX_GPIO_Init+0xb0>)
 8001ce6:	f001 f81f 	bl	8002d28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cea:	bf00      	nop
 8001cec:	3728      	adds	r7, #40	; 0x28
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40020800 	.word	0x40020800

08001cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d00:	b672      	cpsid	i
}
 8001d02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d04:	e7fe      	b.n	8001d04 <Error_Handler+0x8>
	...

08001d08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <HAL_MspInit+0x4c>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	4a0f      	ldr	r2, [pc, #60]	; (8001d54 <HAL_MspInit+0x4c>)
 8001d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d1e:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <HAL_MspInit+0x4c>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	603b      	str	r3, [r7, #0]
 8001d2e:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <HAL_MspInit+0x4c>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	4a08      	ldr	r2, [pc, #32]	; (8001d54 <HAL_MspInit+0x4c>)
 8001d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d38:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <HAL_MspInit+0x4c>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d42:	603b      	str	r3, [r7, #0]
 8001d44:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d46:	2007      	movs	r0, #7
 8001d48:	f000 ffac 	bl	8002ca4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40023800 	.word	0x40023800

08001d58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08a      	sub	sp, #40	; 0x28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a17      	ldr	r2, [pc, #92]	; (8001dd4 <HAL_ADC_MspInit+0x7c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d127      	bne.n	8001dca <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <HAL_ADC_MspInit+0x80>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d82:	4a15      	ldr	r2, [pc, #84]	; (8001dd8 <HAL_ADC_MspInit+0x80>)
 8001d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d88:	6453      	str	r3, [r2, #68]	; 0x44
 8001d8a:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <HAL_ADC_MspInit+0x80>)
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <HAL_ADC_MspInit+0x80>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	4a0e      	ldr	r2, [pc, #56]	; (8001dd8 <HAL_ADC_MspInit+0x80>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	6313      	str	r3, [r2, #48]	; 0x30
 8001da6:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <HAL_ADC_MspInit+0x80>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001db2:	2380      	movs	r3, #128	; 0x80
 8001db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001db6:	2303      	movs	r3, #3
 8001db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbe:	f107 0314 	add.w	r3, r7, #20
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4805      	ldr	r0, [pc, #20]	; (8001ddc <HAL_ADC_MspInit+0x84>)
 8001dc6:	f000 ffaf 	bl	8002d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001dca:	bf00      	nop
 8001dcc:	3728      	adds	r7, #40	; 0x28
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40012000 	.word	0x40012000
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40020000 	.word	0x40020000

08001de0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08a      	sub	sp, #40	; 0x28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a29      	ldr	r2, [pc, #164]	; (8001ea4 <HAL_I2C_MspInit+0xc4>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d14b      	bne.n	8001e9a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	4b28      	ldr	r3, [pc, #160]	; (8001ea8 <HAL_I2C_MspInit+0xc8>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a27      	ldr	r2, [pc, #156]	; (8001ea8 <HAL_I2C_MspInit+0xc8>)
 8001e0c:	f043 0302 	orr.w	r3, r3, #2
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b25      	ldr	r3, [pc, #148]	; (8001ea8 <HAL_I2C_MspInit+0xc8>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	4b21      	ldr	r3, [pc, #132]	; (8001ea8 <HAL_I2C_MspInit+0xc8>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a20      	ldr	r2, [pc, #128]	; (8001ea8 <HAL_I2C_MspInit+0xc8>)
 8001e28:	f043 0304 	orr.w	r3, r3, #4
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ea8 <HAL_I2C_MspInit+0xc8>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f003 0304 	and.w	r3, r3, #4
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e40:	2312      	movs	r3, #18
 8001e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e4c:	2304      	movs	r3, #4
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e50:	f107 0314 	add.w	r3, r7, #20
 8001e54:	4619      	mov	r1, r3
 8001e56:	4815      	ldr	r0, [pc, #84]	; (8001eac <HAL_I2C_MspInit+0xcc>)
 8001e58:	f000 ff66 	bl	8002d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e62:	2312      	movs	r3, #18
 8001e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e6e:	2304      	movs	r3, #4
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	4619      	mov	r1, r3
 8001e78:	480d      	ldr	r0, [pc, #52]	; (8001eb0 <HAL_I2C_MspInit+0xd0>)
 8001e7a:	f000 ff55 	bl	8002d28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60bb      	str	r3, [r7, #8]
 8001e82:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <HAL_I2C_MspInit+0xc8>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	4a08      	ldr	r2, [pc, #32]	; (8001ea8 <HAL_I2C_MspInit+0xc8>)
 8001e88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_I2C_MspInit+0xc8>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e9a:	bf00      	nop
 8001e9c:	3728      	adds	r7, #40	; 0x28
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40005800 	.word	0x40005800
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40020400 	.word	0x40020400
 8001eb0:	40020800 	.word	0x40020800

08001eb4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b09a      	sub	sp, #104	; 0x68
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ebc:	f107 030c 	add.w	r3, r7, #12
 8001ec0:	225c      	movs	r2, #92	; 0x5c
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f004 fdf9 	bl	8006abc <memset>
  if(hrtc->Instance==RTC)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a0c      	ldr	r2, [pc, #48]	; (8001f00 <HAL_RTC_MspInit+0x4c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d111      	bne.n	8001ef8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ed4:	2320      	movs	r3, #32
 8001ed6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001ed8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001edc:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ede:	f107 030c 	add.w	r3, r7, #12
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f001 fb62 	bl	80035ac <HAL_RCCEx_PeriphCLKConfig>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001eee:	f7ff ff05 	bl	8001cfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ef2:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <HAL_RTC_MspInit+0x50>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ef8:	bf00      	nop
 8001efa:	3768      	adds	r7, #104	; 0x68
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40002800 	.word	0x40002800
 8001f04:	42470e3c 	.word	0x42470e3c

08001f08 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08c      	sub	sp, #48	; 0x30
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 031c 	add.w	r3, r7, #28
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a36      	ldr	r2, [pc, #216]	; (8002000 <HAL_TIM_IC_MspInit+0xf8>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d12d      	bne.n	8001f86 <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61bb      	str	r3, [r7, #24]
 8001f2e:	4b35      	ldr	r3, [pc, #212]	; (8002004 <HAL_TIM_IC_MspInit+0xfc>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f32:	4a34      	ldr	r2, [pc, #208]	; (8002004 <HAL_TIM_IC_MspInit+0xfc>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	6453      	str	r3, [r2, #68]	; 0x44
 8001f3a:	4b32      	ldr	r3, [pc, #200]	; (8002004 <HAL_TIM_IC_MspInit+0xfc>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	61bb      	str	r3, [r7, #24]
 8001f44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	4b2e      	ldr	r3, [pc, #184]	; (8002004 <HAL_TIM_IC_MspInit+0xfc>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	4a2d      	ldr	r2, [pc, #180]	; (8002004 <HAL_TIM_IC_MspInit+0xfc>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	6313      	str	r3, [r2, #48]	; 0x30
 8001f56:	4b2b      	ldr	r3, [pc, #172]	; (8002004 <HAL_TIM_IC_MspInit+0xfc>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f70:	2300      	movs	r3, #0
 8001f72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f74:	2301      	movs	r3, #1
 8001f76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f78:	f107 031c 	add.w	r3, r7, #28
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4822      	ldr	r0, [pc, #136]	; (8002008 <HAL_TIM_IC_MspInit+0x100>)
 8001f80:	f000 fed2 	bl	8002d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f84:	e038      	b.n	8001ff8 <HAL_TIM_IC_MspInit+0xf0>
  else if(htim_ic->Instance==TIM2)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f8e:	d133      	bne.n	8001ff8 <HAL_TIM_IC_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f90:	2300      	movs	r3, #0
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <HAL_TIM_IC_MspInit+0xfc>)
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	4a1a      	ldr	r2, [pc, #104]	; (8002004 <HAL_TIM_IC_MspInit+0xfc>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa0:	4b18      	ldr	r3, [pc, #96]	; (8002004 <HAL_TIM_IC_MspInit+0xfc>)
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fac:	2300      	movs	r3, #0
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	4b14      	ldr	r3, [pc, #80]	; (8002004 <HAL_TIM_IC_MspInit+0xfc>)
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb4:	4a13      	ldr	r2, [pc, #76]	; (8002004 <HAL_TIM_IC_MspInit+0xfc>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	6313      	str	r3, [r2, #48]	; 0x30
 8001fbc:	4b11      	ldr	r3, [pc, #68]	; (8002004 <HAL_TIM_IC_MspInit+0xfc>)
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001fc8:	2320      	movs	r3, #32
 8001fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fdc:	f107 031c 	add.w	r3, r7, #28
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4809      	ldr	r0, [pc, #36]	; (8002008 <HAL_TIM_IC_MspInit+0x100>)
 8001fe4:	f000 fea0 	bl	8002d28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2100      	movs	r1, #0
 8001fec:	201c      	movs	r0, #28
 8001fee:	f000 fe64 	bl	8002cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ff2:	201c      	movs	r0, #28
 8001ff4:	f000 fe7d 	bl	8002cf2 <HAL_NVIC_EnableIRQ>
}
 8001ff8:	bf00      	nop
 8001ffa:	3730      	adds	r7, #48	; 0x30
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40010000 	.word	0x40010000
 8002004:	40023800 	.word	0x40023800
 8002008:	40020000 	.word	0x40020000

0800200c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b094      	sub	sp, #80	; 0x50
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a95      	ldr	r2, [pc, #596]	; (8002280 <HAL_TIM_Base_MspInit+0x274>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d134      	bne.n	8002098 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	63bb      	str	r3, [r7, #56]	; 0x38
 8002032:	4b94      	ldr	r3, [pc, #592]	; (8002284 <HAL_TIM_Base_MspInit+0x278>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	4a93      	ldr	r2, [pc, #588]	; (8002284 <HAL_TIM_Base_MspInit+0x278>)
 8002038:	f043 0302 	orr.w	r3, r3, #2
 800203c:	6413      	str	r3, [r2, #64]	; 0x40
 800203e:	4b91      	ldr	r3, [pc, #580]	; (8002284 <HAL_TIM_Base_MspInit+0x278>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	63bb      	str	r3, [r7, #56]	; 0x38
 8002048:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	637b      	str	r3, [r7, #52]	; 0x34
 800204e:	4b8d      	ldr	r3, [pc, #564]	; (8002284 <HAL_TIM_Base_MspInit+0x278>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	4a8c      	ldr	r2, [pc, #560]	; (8002284 <HAL_TIM_Base_MspInit+0x278>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	6313      	str	r3, [r2, #48]	; 0x30
 800205a:	4b8a      	ldr	r3, [pc, #552]	; (8002284 <HAL_TIM_Base_MspInit+0x278>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	637b      	str	r3, [r7, #52]	; 0x34
 8002064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002066:	2340      	movs	r3, #64	; 0x40
 8002068:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206a:	2302      	movs	r3, #2
 800206c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002072:	2300      	movs	r3, #0
 8002074:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002076:	2302      	movs	r3, #2
 8002078:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800207e:	4619      	mov	r1, r3
 8002080:	4881      	ldr	r0, [pc, #516]	; (8002288 <HAL_TIM_Base_MspInit+0x27c>)
 8002082:	f000 fe51 	bl	8002d28 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002086:	2200      	movs	r2, #0
 8002088:	2100      	movs	r1, #0
 800208a:	201d      	movs	r0, #29
 800208c:	f000 fe15 	bl	8002cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002090:	201d      	movs	r0, #29
 8002092:	f000 fe2e 	bl	8002cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002096:	e0ef      	b.n	8002278 <HAL_TIM_Base_MspInit+0x26c>
  else if(htim_base->Instance==TIM4)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a7b      	ldr	r2, [pc, #492]	; (800228c <HAL_TIM_Base_MspInit+0x280>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d12c      	bne.n	80020fc <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	633b      	str	r3, [r7, #48]	; 0x30
 80020a6:	4b77      	ldr	r3, [pc, #476]	; (8002284 <HAL_TIM_Base_MspInit+0x278>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	4a76      	ldr	r2, [pc, #472]	; (8002284 <HAL_TIM_Base_MspInit+0x278>)
 80020ac:	f043 0304 	orr.w	r3, r3, #4
 80020b0:	6413      	str	r3, [r2, #64]	; 0x40
 80020b2:	4b74      	ldr	r3, [pc, #464]	; (8002284 <HAL_TIM_Base_MspInit+0x278>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	633b      	str	r3, [r7, #48]	; 0x30
 80020bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020c2:	4b70      	ldr	r3, [pc, #448]	; (8002284 <HAL_TIM_Base_MspInit+0x278>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a6f      	ldr	r2, [pc, #444]	; (8002284 <HAL_TIM_Base_MspInit+0x278>)
 80020c8:	f043 0302 	orr.w	r3, r3, #2
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b6d      	ldr	r3, [pc, #436]	; (8002284 <HAL_TIM_Base_MspInit+0x278>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020da:	2340      	movs	r3, #64	; 0x40
 80020dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020de:	2302      	movs	r3, #2
 80020e0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e6:	2300      	movs	r3, #0
 80020e8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020ea:	2302      	movs	r3, #2
 80020ec:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020f2:	4619      	mov	r1, r3
 80020f4:	4866      	ldr	r0, [pc, #408]	; (8002290 <HAL_TIM_Base_MspInit+0x284>)
 80020f6:	f000 fe17 	bl	8002d28 <HAL_GPIO_Init>
}
 80020fa:	e0bd      	b.n	8002278 <HAL_TIM_Base_MspInit+0x26c>
  else if(htim_base->Instance==TIM5)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a64      	ldr	r2, [pc, #400]	; (8002294 <HAL_TIM_Base_MspInit+0x288>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d12c      	bne.n	8002160 <HAL_TIM_Base_MspInit+0x154>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	62bb      	str	r3, [r7, #40]	; 0x28
 800210a:	4b5e      	ldr	r3, [pc, #376]	; (8002284 <HAL_TIM_Base_MspInit+0x278>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	4a5d      	ldr	r2, [pc, #372]	; (8002284 <HAL_TIM_Base_MspInit+0x278>)
 8002110:	f043 0308 	orr.w	r3, r3, #8
 8002114:	6413      	str	r3, [r2, #64]	; 0x40
 8002116:	4b5b      	ldr	r3, [pc, #364]	; (8002284 <HAL_TIM_Base_MspInit+0x278>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002120:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
 8002126:	4b57      	ldr	r3, [pc, #348]	; (8002284 <HAL_TIM_Base_MspInit+0x278>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	4a56      	ldr	r2, [pc, #344]	; (8002284 <HAL_TIM_Base_MspInit+0x278>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6313      	str	r3, [r2, #48]	; 0x30
 8002132:	4b54      	ldr	r3, [pc, #336]	; (8002284 <HAL_TIM_Base_MspInit+0x278>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800213e:	2301      	movs	r3, #1
 8002140:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002142:	2302      	movs	r3, #2
 8002144:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214a:	2300      	movs	r3, #0
 800214c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800214e:	2302      	movs	r3, #2
 8002150:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002152:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002156:	4619      	mov	r1, r3
 8002158:	484b      	ldr	r0, [pc, #300]	; (8002288 <HAL_TIM_Base_MspInit+0x27c>)
 800215a:	f000 fde5 	bl	8002d28 <HAL_GPIO_Init>
}
 800215e:	e08b      	b.n	8002278 <HAL_TIM_Base_MspInit+0x26c>
  else if(htim_base->Instance==TIM8)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a4c      	ldr	r2, [pc, #304]	; (8002298 <HAL_TIM_Base_MspInit+0x28c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d12c      	bne.n	80021c4 <HAL_TIM_Base_MspInit+0x1b8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	623b      	str	r3, [r7, #32]
 800216e:	4b45      	ldr	r3, [pc, #276]	; (8002284 <HAL_TIM_Base_MspInit+0x278>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	4a44      	ldr	r2, [pc, #272]	; (8002284 <HAL_TIM_Base_MspInit+0x278>)
 8002174:	f043 0302 	orr.w	r3, r3, #2
 8002178:	6453      	str	r3, [r2, #68]	; 0x44
 800217a:	4b42      	ldr	r3, [pc, #264]	; (8002284 <HAL_TIM_Base_MspInit+0x278>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	623b      	str	r3, [r7, #32]
 8002184:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	61fb      	str	r3, [r7, #28]
 800218a:	4b3e      	ldr	r3, [pc, #248]	; (8002284 <HAL_TIM_Base_MspInit+0x278>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	4a3d      	ldr	r2, [pc, #244]	; (8002284 <HAL_TIM_Base_MspInit+0x278>)
 8002190:	f043 0304 	orr.w	r3, r3, #4
 8002194:	6313      	str	r3, [r2, #48]	; 0x30
 8002196:	4b3b      	ldr	r3, [pc, #236]	; (8002284 <HAL_TIM_Base_MspInit+0x278>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	61fb      	str	r3, [r7, #28]
 80021a0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021a2:	2340      	movs	r3, #64	; 0x40
 80021a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a6:	2302      	movs	r3, #2
 80021a8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ae:	2300      	movs	r3, #0
 80021b0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80021b2:	2303      	movs	r3, #3
 80021b4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021ba:	4619      	mov	r1, r3
 80021bc:	4837      	ldr	r0, [pc, #220]	; (800229c <HAL_TIM_Base_MspInit+0x290>)
 80021be:	f000 fdb3 	bl	8002d28 <HAL_GPIO_Init>
}
 80021c2:	e059      	b.n	8002278 <HAL_TIM_Base_MspInit+0x26c>
  else if(htim_base->Instance==TIM10)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a35      	ldr	r2, [pc, #212]	; (80022a0 <HAL_TIM_Base_MspInit+0x294>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d10e      	bne.n	80021ec <HAL_TIM_Base_MspInit+0x1e0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	61bb      	str	r3, [r7, #24]
 80021d2:	4b2c      	ldr	r3, [pc, #176]	; (8002284 <HAL_TIM_Base_MspInit+0x278>)
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	4a2b      	ldr	r2, [pc, #172]	; (8002284 <HAL_TIM_Base_MspInit+0x278>)
 80021d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021dc:	6453      	str	r3, [r2, #68]	; 0x44
 80021de:	4b29      	ldr	r3, [pc, #164]	; (8002284 <HAL_TIM_Base_MspInit+0x278>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e6:	61bb      	str	r3, [r7, #24]
 80021e8:	69bb      	ldr	r3, [r7, #24]
}
 80021ea:	e045      	b.n	8002278 <HAL_TIM_Base_MspInit+0x26c>
  else if(htim_base->Instance==TIM11)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a2c      	ldr	r2, [pc, #176]	; (80022a4 <HAL_TIM_Base_MspInit+0x298>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d10e      	bne.n	8002214 <HAL_TIM_Base_MspInit+0x208>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	4b22      	ldr	r3, [pc, #136]	; (8002284 <HAL_TIM_Base_MspInit+0x278>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	4a21      	ldr	r2, [pc, #132]	; (8002284 <HAL_TIM_Base_MspInit+0x278>)
 8002200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002204:	6453      	str	r3, [r2, #68]	; 0x44
 8002206:	4b1f      	ldr	r3, [pc, #124]	; (8002284 <HAL_TIM_Base_MspInit+0x278>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	697b      	ldr	r3, [r7, #20]
}
 8002212:	e031      	b.n	8002278 <HAL_TIM_Base_MspInit+0x26c>
  else if(htim_base->Instance==TIM12)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a23      	ldr	r2, [pc, #140]	; (80022a8 <HAL_TIM_Base_MspInit+0x29c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d12c      	bne.n	8002278 <HAL_TIM_Base_MspInit+0x26c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	4b18      	ldr	r3, [pc, #96]	; (8002284 <HAL_TIM_Base_MspInit+0x278>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	4a17      	ldr	r2, [pc, #92]	; (8002284 <HAL_TIM_Base_MspInit+0x278>)
 8002228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800222c:	6413      	str	r3, [r2, #64]	; 0x40
 800222e:	4b15      	ldr	r3, [pc, #84]	; (8002284 <HAL_TIM_Base_MspInit+0x278>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	4b11      	ldr	r3, [pc, #68]	; (8002284 <HAL_TIM_Base_MspInit+0x278>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	4a10      	ldr	r2, [pc, #64]	; (8002284 <HAL_TIM_Base_MspInit+0x278>)
 8002244:	f043 0302 	orr.w	r3, r3, #2
 8002248:	6313      	str	r3, [r2, #48]	; 0x30
 800224a:	4b0e      	ldr	r3, [pc, #56]	; (8002284 <HAL_TIM_Base_MspInit+0x278>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002256:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800225a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225c:	2302      	movs	r3, #2
 800225e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002264:	2300      	movs	r3, #0
 8002266:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002268:	2309      	movs	r3, #9
 800226a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800226c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002270:	4619      	mov	r1, r3
 8002272:	4807      	ldr	r0, [pc, #28]	; (8002290 <HAL_TIM_Base_MspInit+0x284>)
 8002274:	f000 fd58 	bl	8002d28 <HAL_GPIO_Init>
}
 8002278:	bf00      	nop
 800227a:	3750      	adds	r7, #80	; 0x50
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40000400 	.word	0x40000400
 8002284:	40023800 	.word	0x40023800
 8002288:	40020000 	.word	0x40020000
 800228c:	40000800 	.word	0x40000800
 8002290:	40020400 	.word	0x40020400
 8002294:	40000c00 	.word	0x40000c00
 8002298:	40010400 	.word	0x40010400
 800229c:	40020800 	.word	0x40020800
 80022a0:	40014400 	.word	0x40014400
 80022a4:	40014800 	.word	0x40014800
 80022a8:	40001800 	.word	0x40001800

080022ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08a      	sub	sp, #40	; 0x28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 0314 	add.w	r3, r7, #20
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM10)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a25      	ldr	r2, [pc, #148]	; (8002360 <HAL_TIM_MspPostInit+0xb4>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d11f      	bne.n	800230e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	4b24      	ldr	r3, [pc, #144]	; (8002364 <HAL_TIM_MspPostInit+0xb8>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	4a23      	ldr	r2, [pc, #140]	; (8002364 <HAL_TIM_MspPostInit+0xb8>)
 80022d8:	f043 0302 	orr.w	r3, r3, #2
 80022dc:	6313      	str	r3, [r2, #48]	; 0x30
 80022de:	4b21      	ldr	r3, [pc, #132]	; (8002364 <HAL_TIM_MspPostInit+0xb8>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	693b      	ldr	r3, [r7, #16]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f0:	2302      	movs	r3, #2
 80022f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f8:	2300      	movs	r3, #0
 80022fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80022fc:	2303      	movs	r3, #3
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002300:	f107 0314 	add.w	r3, r7, #20
 8002304:	4619      	mov	r1, r3
 8002306:	4818      	ldr	r0, [pc, #96]	; (8002368 <HAL_TIM_MspPostInit+0xbc>)
 8002308:	f000 fd0e 	bl	8002d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 800230c:	e023      	b.n	8002356 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM11)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a16      	ldr	r2, [pc, #88]	; (800236c <HAL_TIM_MspPostInit+0xc0>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d11e      	bne.n	8002356 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002318:	2300      	movs	r3, #0
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	4b11      	ldr	r3, [pc, #68]	; (8002364 <HAL_TIM_MspPostInit+0xb8>)
 800231e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002320:	4a10      	ldr	r2, [pc, #64]	; (8002364 <HAL_TIM_MspPostInit+0xb8>)
 8002322:	f043 0302 	orr.w	r3, r3, #2
 8002326:	6313      	str	r3, [r2, #48]	; 0x30
 8002328:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <HAL_TIM_MspPostInit+0xb8>)
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002334:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233a:	2302      	movs	r3, #2
 800233c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233e:	2300      	movs	r3, #0
 8002340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002342:	2300      	movs	r3, #0
 8002344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002346:	2303      	movs	r3, #3
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800234a:	f107 0314 	add.w	r3, r7, #20
 800234e:	4619      	mov	r1, r3
 8002350:	4805      	ldr	r0, [pc, #20]	; (8002368 <HAL_TIM_MspPostInit+0xbc>)
 8002352:	f000 fce9 	bl	8002d28 <HAL_GPIO_Init>
}
 8002356:	bf00      	nop
 8002358:	3728      	adds	r7, #40	; 0x28
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40014400 	.word	0x40014400
 8002364:	40023800 	.word	0x40023800
 8002368:	40020400 	.word	0x40020400
 800236c:	40014800 	.word	0x40014800

08002370 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b08a      	sub	sp, #40	; 0x28
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002378:	f107 0314 	add.w	r3, r7, #20
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a19      	ldr	r2, [pc, #100]	; (80023f4 <HAL_UART_MspInit+0x84>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d12b      	bne.n	80023ea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	613b      	str	r3, [r7, #16]
 8002396:	4b18      	ldr	r3, [pc, #96]	; (80023f8 <HAL_UART_MspInit+0x88>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	4a17      	ldr	r2, [pc, #92]	; (80023f8 <HAL_UART_MspInit+0x88>)
 800239c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a0:	6413      	str	r3, [r2, #64]	; 0x40
 80023a2:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <HAL_UART_MspInit+0x88>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <HAL_UART_MspInit+0x88>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	4a10      	ldr	r2, [pc, #64]	; (80023f8 <HAL_UART_MspInit+0x88>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
 80023be:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <HAL_UART_MspInit+0x88>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80023ca:	230c      	movs	r3, #12
 80023cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ce:	2302      	movs	r3, #2
 80023d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d6:	2303      	movs	r3, #3
 80023d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023da:	2307      	movs	r3, #7
 80023dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023de:	f107 0314 	add.w	r3, r7, #20
 80023e2:	4619      	mov	r1, r3
 80023e4:	4805      	ldr	r0, [pc, #20]	; (80023fc <HAL_UART_MspInit+0x8c>)
 80023e6:	f000 fc9f 	bl	8002d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80023ea:	bf00      	nop
 80023ec:	3728      	adds	r7, #40	; 0x28
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40004400 	.word	0x40004400
 80023f8:	40023800 	.word	0x40023800
 80023fc:	40020000 	.word	0x40020000

08002400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002404:	e7fe      	b.n	8002404 <NMI_Handler+0x4>

08002406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002406:	b480      	push	{r7}
 8002408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800240a:	e7fe      	b.n	800240a <HardFault_Handler+0x4>

0800240c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002410:	e7fe      	b.n	8002410 <MemManage_Handler+0x4>

08002412 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002416:	e7fe      	b.n	8002416 <BusFault_Handler+0x4>

08002418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800241c:	e7fe      	b.n	800241c <UsageFault_Handler+0x4>

0800241e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800244c:	f000 f8a4 	bl	8002598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}

08002454 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002458:	4802      	ldr	r0, [pc, #8]	; (8002464 <TIM2_IRQHandler+0x10>)
 800245a:	f002 ff35 	bl	80052c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000144 	.word	0x20000144

08002468 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <TIM3_IRQHandler+0x10>)
 800246e:	f002 ff2b 	bl	80052c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	2000018c 	.word	0x2000018c

0800247c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <SystemInit+0x20>)
 8002482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002486:	4a05      	ldr	r2, [pc, #20]	; (800249c <SystemInit+0x20>)
 8002488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800248c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80024a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024a4:	480d      	ldr	r0, [pc, #52]	; (80024dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024a6:	490e      	ldr	r1, [pc, #56]	; (80024e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024a8:	4a0e      	ldr	r2, [pc, #56]	; (80024e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024ac:	e002      	b.n	80024b4 <LoopCopyDataInit>

080024ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024b2:	3304      	adds	r3, #4

080024b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024b8:	d3f9      	bcc.n	80024ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ba:	4a0b      	ldr	r2, [pc, #44]	; (80024e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024bc:	4c0b      	ldr	r4, [pc, #44]	; (80024ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80024be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024c0:	e001      	b.n	80024c6 <LoopFillZerobss>

080024c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024c4:	3204      	adds	r2, #4

080024c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024c8:	d3fb      	bcc.n	80024c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024ca:	f7ff ffd7 	bl	800247c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024ce:	f004 fafd 	bl	8006acc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024d2:	f7fe fc65 	bl	8000da0 <main>
  bx  lr    
 80024d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024e0:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80024e4:	08006b54 	.word	0x08006b54
  ldr r2, =_sbss
 80024e8:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80024ec:	20000408 	.word	0x20000408

080024f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024f0:	e7fe      	b.n	80024f0 <ADC_IRQHandler>
	...

080024f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024f8:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <HAL_Init+0x40>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a0d      	ldr	r2, [pc, #52]	; (8002534 <HAL_Init+0x40>)
 80024fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002502:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002504:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <HAL_Init+0x40>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <HAL_Init+0x40>)
 800250a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800250e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002510:	4b08      	ldr	r3, [pc, #32]	; (8002534 <HAL_Init+0x40>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a07      	ldr	r2, [pc, #28]	; (8002534 <HAL_Init+0x40>)
 8002516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800251a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800251c:	2003      	movs	r0, #3
 800251e:	f000 fbc1 	bl	8002ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002522:	2000      	movs	r0, #0
 8002524:	f000 f808 	bl	8002538 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002528:	f7ff fbee 	bl	8001d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40023c00 	.word	0x40023c00

08002538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002540:	4b12      	ldr	r3, [pc, #72]	; (800258c <HAL_InitTick+0x54>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4b12      	ldr	r3, [pc, #72]	; (8002590 <HAL_InitTick+0x58>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	4619      	mov	r1, r3
 800254a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800254e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002552:	fbb2 f3f3 	udiv	r3, r2, r3
 8002556:	4618      	mov	r0, r3
 8002558:	f000 fbd9 	bl	8002d0e <HAL_SYSTICK_Config>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e00e      	b.n	8002584 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b0f      	cmp	r3, #15
 800256a:	d80a      	bhi.n	8002582 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800256c:	2200      	movs	r2, #0
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002574:	f000 fba1 	bl	8002cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002578:	4a06      	ldr	r2, [pc, #24]	; (8002594 <HAL_InitTick+0x5c>)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	e000      	b.n	8002584 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
}
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20000018 	.word	0x20000018
 8002590:	20000020 	.word	0x20000020
 8002594:	2000001c 	.word	0x2000001c

08002598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800259c:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <HAL_IncTick+0x20>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	461a      	mov	r2, r3
 80025a2:	4b06      	ldr	r3, [pc, #24]	; (80025bc <HAL_IncTick+0x24>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4413      	add	r3, r2
 80025a8:	4a04      	ldr	r2, [pc, #16]	; (80025bc <HAL_IncTick+0x24>)
 80025aa:	6013      	str	r3, [r2, #0]
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	20000020 	.word	0x20000020
 80025bc:	20000404 	.word	0x20000404

080025c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return uwTick;
 80025c4:	4b03      	ldr	r3, [pc, #12]	; (80025d4 <HAL_GetTick+0x14>)
 80025c6:	681b      	ldr	r3, [r3, #0]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	20000404 	.word	0x20000404

080025d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025e0:	f7ff ffee 	bl	80025c0 <HAL_GetTick>
 80025e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025f0:	d005      	beq.n	80025fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025f2:	4b0a      	ldr	r3, [pc, #40]	; (800261c <HAL_Delay+0x44>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4413      	add	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025fe:	bf00      	nop
 8002600:	f7ff ffde 	bl	80025c0 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	429a      	cmp	r2, r3
 800260e:	d8f7      	bhi.n	8002600 <HAL_Delay+0x28>
  {
  }
}
 8002610:	bf00      	nop
 8002612:	bf00      	nop
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20000020 	.word	0x20000020

08002620 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002628:	2300      	movs	r3, #0
 800262a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e033      	b.n	800269e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	2b00      	cmp	r3, #0
 800263c:	d109      	bne.n	8002652 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff fb8a 	bl	8001d58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	f003 0310 	and.w	r3, r3, #16
 800265a:	2b00      	cmp	r3, #0
 800265c:	d118      	bne.n	8002690 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002666:	f023 0302 	bic.w	r3, r3, #2
 800266a:	f043 0202 	orr.w	r2, r3, #2
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f94a 	bl	800290c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f023 0303 	bic.w	r3, r3, #3
 8002686:	f043 0201 	orr.w	r2, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	641a      	str	r2, [r3, #64]	; 0x40
 800268e:	e001      	b.n	8002694 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800269c:	7bfb      	ldrb	r3, [r7, #15]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d101      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x1c>
 80026c0:	2302      	movs	r3, #2
 80026c2:	e113      	b.n	80028ec <HAL_ADC_ConfigChannel+0x244>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b09      	cmp	r3, #9
 80026d2:	d925      	bls.n	8002720 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68d9      	ldr	r1, [r3, #12]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	461a      	mov	r2, r3
 80026e2:	4613      	mov	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4413      	add	r3, r2
 80026e8:	3b1e      	subs	r3, #30
 80026ea:	2207      	movs	r2, #7
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43da      	mvns	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	400a      	ands	r2, r1
 80026f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68d9      	ldr	r1, [r3, #12]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	b29b      	uxth	r3, r3
 800270a:	4618      	mov	r0, r3
 800270c:	4603      	mov	r3, r0
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	4403      	add	r3, r0
 8002712:	3b1e      	subs	r3, #30
 8002714:	409a      	lsls	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	60da      	str	r2, [r3, #12]
 800271e:	e022      	b.n	8002766 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6919      	ldr	r1, [r3, #16]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	b29b      	uxth	r3, r3
 800272c:	461a      	mov	r2, r3
 800272e:	4613      	mov	r3, r2
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	4413      	add	r3, r2
 8002734:	2207      	movs	r2, #7
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43da      	mvns	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	400a      	ands	r2, r1
 8002742:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6919      	ldr	r1, [r3, #16]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	b29b      	uxth	r3, r3
 8002754:	4618      	mov	r0, r3
 8002756:	4603      	mov	r3, r0
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	4403      	add	r3, r0
 800275c:	409a      	lsls	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b06      	cmp	r3, #6
 800276c:	d824      	bhi.n	80027b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	3b05      	subs	r3, #5
 8002780:	221f      	movs	r2, #31
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43da      	mvns	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	400a      	ands	r2, r1
 800278e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	b29b      	uxth	r3, r3
 800279c:	4618      	mov	r0, r3
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	3b05      	subs	r3, #5
 80027aa:	fa00 f203 	lsl.w	r2, r0, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	635a      	str	r2, [r3, #52]	; 0x34
 80027b6:	e04c      	b.n	8002852 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b0c      	cmp	r3, #12
 80027be:	d824      	bhi.n	800280a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	3b23      	subs	r3, #35	; 0x23
 80027d2:	221f      	movs	r2, #31
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43da      	mvns	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	400a      	ands	r2, r1
 80027e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	4618      	mov	r0, r3
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	3b23      	subs	r3, #35	; 0x23
 80027fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	631a      	str	r2, [r3, #48]	; 0x30
 8002808:	e023      	b.n	8002852 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	3b41      	subs	r3, #65	; 0x41
 800281c:	221f      	movs	r2, #31
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43da      	mvns	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	400a      	ands	r2, r1
 800282a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	b29b      	uxth	r3, r3
 8002838:	4618      	mov	r0, r3
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	3b41      	subs	r3, #65	; 0x41
 8002846:	fa00 f203 	lsl.w	r2, r0, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002852:	4b29      	ldr	r3, [pc, #164]	; (80028f8 <HAL_ADC_ConfigChannel+0x250>)
 8002854:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a28      	ldr	r2, [pc, #160]	; (80028fc <HAL_ADC_ConfigChannel+0x254>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d10f      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x1d8>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b12      	cmp	r3, #18
 8002866:	d10b      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a1d      	ldr	r2, [pc, #116]	; (80028fc <HAL_ADC_ConfigChannel+0x254>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d12b      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x23a>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a1c      	ldr	r2, [pc, #112]	; (8002900 <HAL_ADC_ConfigChannel+0x258>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d003      	beq.n	800289c <HAL_ADC_ConfigChannel+0x1f4>
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2b11      	cmp	r3, #17
 800289a:	d122      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a11      	ldr	r2, [pc, #68]	; (8002900 <HAL_ADC_ConfigChannel+0x258>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d111      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028be:	4b11      	ldr	r3, [pc, #68]	; (8002904 <HAL_ADC_ConfigChannel+0x25c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a11      	ldr	r2, [pc, #68]	; (8002908 <HAL_ADC_ConfigChannel+0x260>)
 80028c4:	fba2 2303 	umull	r2, r3, r2, r3
 80028c8:	0c9a      	lsrs	r2, r3, #18
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028d4:	e002      	b.n	80028dc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	3b01      	subs	r3, #1
 80028da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f9      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	40012300 	.word	0x40012300
 80028fc:	40012000 	.word	0x40012000
 8002900:	10000012 	.word	0x10000012
 8002904:	20000018 	.word	0x20000018
 8002908:	431bde83 	.word	0x431bde83

0800290c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002914:	4b79      	ldr	r3, [pc, #484]	; (8002afc <ADC_Init+0x1f0>)
 8002916:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	431a      	orrs	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002940:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6859      	ldr	r1, [r3, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	021a      	lsls	r2, r3, #8
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002964:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6859      	ldr	r1, [r3, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002986:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6899      	ldr	r1, [r3, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299e:	4a58      	ldr	r2, [pc, #352]	; (8002b00 <ADC_Init+0x1f4>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d022      	beq.n	80029ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6899      	ldr	r1, [r3, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6899      	ldr	r1, [r3, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	e00f      	b.n	8002a0a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0202 	bic.w	r2, r2, #2
 8002a18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6899      	ldr	r1, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	7e1b      	ldrb	r3, [r3, #24]
 8002a24:	005a      	lsls	r2, r3, #1
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d01b      	beq.n	8002a70 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6859      	ldr	r1, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	3b01      	subs	r3, #1
 8002a64:	035a      	lsls	r2, r3, #13
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	605a      	str	r2, [r3, #4]
 8002a6e:	e007      	b.n	8002a80 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	051a      	lsls	r2, r3, #20
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ab4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6899      	ldr	r1, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ac2:	025a      	lsls	r2, r3, #9
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ada:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6899      	ldr	r1, [r3, #8]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	029a      	lsls	r2, r3, #10
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	609a      	str	r2, [r3, #8]
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	40012300 	.word	0x40012300
 8002b00:	0f000001 	.word	0x0f000001

08002b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b14:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <__NVIC_SetPriorityGrouping+0x44>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b20:	4013      	ands	r3, r2
 8002b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b36:	4a04      	ldr	r2, [pc, #16]	; (8002b48 <__NVIC_SetPriorityGrouping+0x44>)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	60d3      	str	r3, [r2, #12]
}
 8002b3c:	bf00      	nop
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b50:	4b04      	ldr	r3, [pc, #16]	; (8002b64 <__NVIC_GetPriorityGrouping+0x18>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	0a1b      	lsrs	r3, r3, #8
 8002b56:	f003 0307 	and.w	r3, r3, #7
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	db0b      	blt.n	8002b92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b7a:	79fb      	ldrb	r3, [r7, #7]
 8002b7c:	f003 021f 	and.w	r2, r3, #31
 8002b80:	4907      	ldr	r1, [pc, #28]	; (8002ba0 <__NVIC_EnableIRQ+0x38>)
 8002b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b86:	095b      	lsrs	r3, r3, #5
 8002b88:	2001      	movs	r0, #1
 8002b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	e000e100 	.word	0xe000e100

08002ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	6039      	str	r1, [r7, #0]
 8002bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	db0a      	blt.n	8002bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	490c      	ldr	r1, [pc, #48]	; (8002bf0 <__NVIC_SetPriority+0x4c>)
 8002bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc2:	0112      	lsls	r2, r2, #4
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bcc:	e00a      	b.n	8002be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	4908      	ldr	r1, [pc, #32]	; (8002bf4 <__NVIC_SetPriority+0x50>)
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	3b04      	subs	r3, #4
 8002bdc:	0112      	lsls	r2, r2, #4
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	440b      	add	r3, r1
 8002be2:	761a      	strb	r2, [r3, #24]
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	e000e100 	.word	0xe000e100
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b089      	sub	sp, #36	; 0x24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f1c3 0307 	rsb	r3, r3, #7
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	bf28      	it	cs
 8002c16:	2304      	movcs	r3, #4
 8002c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	2b06      	cmp	r3, #6
 8002c20:	d902      	bls.n	8002c28 <NVIC_EncodePriority+0x30>
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3b03      	subs	r3, #3
 8002c26:	e000      	b.n	8002c2a <NVIC_EncodePriority+0x32>
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43da      	mvns	r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	401a      	ands	r2, r3
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4a:	43d9      	mvns	r1, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c50:	4313      	orrs	r3, r2
         );
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3724      	adds	r7, #36	; 0x24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
	...

08002c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c70:	d301      	bcc.n	8002c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c72:	2301      	movs	r3, #1
 8002c74:	e00f      	b.n	8002c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c76:	4a0a      	ldr	r2, [pc, #40]	; (8002ca0 <SysTick_Config+0x40>)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c7e:	210f      	movs	r1, #15
 8002c80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c84:	f7ff ff8e 	bl	8002ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c88:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <SysTick_Config+0x40>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c8e:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <SysTick_Config+0x40>)
 8002c90:	2207      	movs	r2, #7
 8002c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	e000e010 	.word	0xe000e010

08002ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7ff ff29 	bl	8002b04 <__NVIC_SetPriorityGrouping>
}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b086      	sub	sp, #24
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	607a      	str	r2, [r7, #4]
 8002cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ccc:	f7ff ff3e 	bl	8002b4c <__NVIC_GetPriorityGrouping>
 8002cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	68b9      	ldr	r1, [r7, #8]
 8002cd6:	6978      	ldr	r0, [r7, #20]
 8002cd8:	f7ff ff8e 	bl	8002bf8 <NVIC_EncodePriority>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ce2:	4611      	mov	r1, r2
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff ff5d 	bl	8002ba4 <__NVIC_SetPriority>
}
 8002cea:	bf00      	nop
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff ff31 	bl	8002b68 <__NVIC_EnableIRQ>
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7ff ffa2 	bl	8002c60 <SysTick_Config>
 8002d1c:	4603      	mov	r3, r0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b089      	sub	sp, #36	; 0x24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61fb      	str	r3, [r7, #28]
 8002d42:	e165      	b.n	8003010 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d44:	2201      	movs	r2, #1
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	4013      	ands	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	f040 8154 	bne.w	800300a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d005      	beq.n	8002d7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d130      	bne.n	8002ddc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	2203      	movs	r2, #3
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002db0:	2201      	movs	r2, #1
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	43db      	mvns	r3, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	091b      	lsrs	r3, r3, #4
 8002dc6:	f003 0201 	and.w	r2, r3, #1
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f003 0303 	and.w	r3, r3, #3
 8002de4:	2b03      	cmp	r3, #3
 8002de6:	d017      	beq.n	8002e18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	2203      	movs	r2, #3
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f003 0303 	and.w	r3, r3, #3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d123      	bne.n	8002e6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	08da      	lsrs	r2, r3, #3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3208      	adds	r2, #8
 8002e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	220f      	movs	r2, #15
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	4013      	ands	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	691a      	ldr	r2, [r3, #16]
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	08da      	lsrs	r2, r3, #3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	3208      	adds	r2, #8
 8002e66:	69b9      	ldr	r1, [r7, #24]
 8002e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	2203      	movs	r2, #3
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4013      	ands	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 0203 	and.w	r2, r3, #3
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 80ae 	beq.w	800300a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	4b5d      	ldr	r3, [pc, #372]	; (8003028 <HAL_GPIO_Init+0x300>)
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb6:	4a5c      	ldr	r2, [pc, #368]	; (8003028 <HAL_GPIO_Init+0x300>)
 8002eb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ebe:	4b5a      	ldr	r3, [pc, #360]	; (8003028 <HAL_GPIO_Init+0x300>)
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eca:	4a58      	ldr	r2, [pc, #352]	; (800302c <HAL_GPIO_Init+0x304>)
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	089b      	lsrs	r3, r3, #2
 8002ed0:	3302      	adds	r3, #2
 8002ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	220f      	movs	r2, #15
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4013      	ands	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a4f      	ldr	r2, [pc, #316]	; (8003030 <HAL_GPIO_Init+0x308>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d025      	beq.n	8002f42 <HAL_GPIO_Init+0x21a>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a4e      	ldr	r2, [pc, #312]	; (8003034 <HAL_GPIO_Init+0x30c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d01f      	beq.n	8002f3e <HAL_GPIO_Init+0x216>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a4d      	ldr	r2, [pc, #308]	; (8003038 <HAL_GPIO_Init+0x310>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d019      	beq.n	8002f3a <HAL_GPIO_Init+0x212>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a4c      	ldr	r2, [pc, #304]	; (800303c <HAL_GPIO_Init+0x314>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d013      	beq.n	8002f36 <HAL_GPIO_Init+0x20e>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a4b      	ldr	r2, [pc, #300]	; (8003040 <HAL_GPIO_Init+0x318>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d00d      	beq.n	8002f32 <HAL_GPIO_Init+0x20a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a4a      	ldr	r2, [pc, #296]	; (8003044 <HAL_GPIO_Init+0x31c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d007      	beq.n	8002f2e <HAL_GPIO_Init+0x206>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a49      	ldr	r2, [pc, #292]	; (8003048 <HAL_GPIO_Init+0x320>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d101      	bne.n	8002f2a <HAL_GPIO_Init+0x202>
 8002f26:	2306      	movs	r3, #6
 8002f28:	e00c      	b.n	8002f44 <HAL_GPIO_Init+0x21c>
 8002f2a:	2307      	movs	r3, #7
 8002f2c:	e00a      	b.n	8002f44 <HAL_GPIO_Init+0x21c>
 8002f2e:	2305      	movs	r3, #5
 8002f30:	e008      	b.n	8002f44 <HAL_GPIO_Init+0x21c>
 8002f32:	2304      	movs	r3, #4
 8002f34:	e006      	b.n	8002f44 <HAL_GPIO_Init+0x21c>
 8002f36:	2303      	movs	r3, #3
 8002f38:	e004      	b.n	8002f44 <HAL_GPIO_Init+0x21c>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e002      	b.n	8002f44 <HAL_GPIO_Init+0x21c>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <HAL_GPIO_Init+0x21c>
 8002f42:	2300      	movs	r3, #0
 8002f44:	69fa      	ldr	r2, [r7, #28]
 8002f46:	f002 0203 	and.w	r2, r2, #3
 8002f4a:	0092      	lsls	r2, r2, #2
 8002f4c:	4093      	lsls	r3, r2
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f54:	4935      	ldr	r1, [pc, #212]	; (800302c <HAL_GPIO_Init+0x304>)
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	089b      	lsrs	r3, r3, #2
 8002f5a:	3302      	adds	r3, #2
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f62:	4b3a      	ldr	r3, [pc, #232]	; (800304c <HAL_GPIO_Init+0x324>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f86:	4a31      	ldr	r2, [pc, #196]	; (800304c <HAL_GPIO_Init+0x324>)
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f8c:	4b2f      	ldr	r3, [pc, #188]	; (800304c <HAL_GPIO_Init+0x324>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fb0:	4a26      	ldr	r2, [pc, #152]	; (800304c <HAL_GPIO_Init+0x324>)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fb6:	4b25      	ldr	r3, [pc, #148]	; (800304c <HAL_GPIO_Init+0x324>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fda:	4a1c      	ldr	r2, [pc, #112]	; (800304c <HAL_GPIO_Init+0x324>)
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fe0:	4b1a      	ldr	r3, [pc, #104]	; (800304c <HAL_GPIO_Init+0x324>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	4313      	orrs	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003004:	4a11      	ldr	r2, [pc, #68]	; (800304c <HAL_GPIO_Init+0x324>)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3301      	adds	r3, #1
 800300e:	61fb      	str	r3, [r7, #28]
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	2b0f      	cmp	r3, #15
 8003014:	f67f ae96 	bls.w	8002d44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003018:	bf00      	nop
 800301a:	bf00      	nop
 800301c:	3724      	adds	r7, #36	; 0x24
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	40023800 	.word	0x40023800
 800302c:	40013800 	.word	0x40013800
 8003030:	40020000 	.word	0x40020000
 8003034:	40020400 	.word	0x40020400
 8003038:	40020800 	.word	0x40020800
 800303c:	40020c00 	.word	0x40020c00
 8003040:	40021000 	.word	0x40021000
 8003044:	40021400 	.word	0x40021400
 8003048:	40021800 	.word	0x40021800
 800304c:	40013c00 	.word	0x40013c00

08003050 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e12b      	b.n	80032ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d106      	bne.n	800307c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7fe feb2 	bl	8001de0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2224      	movs	r2, #36	; 0x24
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0201 	bic.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030b4:	f000 fa52 	bl	800355c <HAL_RCC_GetPCLK1Freq>
 80030b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	4a81      	ldr	r2, [pc, #516]	; (80032c4 <HAL_I2C_Init+0x274>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d807      	bhi.n	80030d4 <HAL_I2C_Init+0x84>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4a80      	ldr	r2, [pc, #512]	; (80032c8 <HAL_I2C_Init+0x278>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	bf94      	ite	ls
 80030cc:	2301      	movls	r3, #1
 80030ce:	2300      	movhi	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	e006      	b.n	80030e2 <HAL_I2C_Init+0x92>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4a7d      	ldr	r2, [pc, #500]	; (80032cc <HAL_I2C_Init+0x27c>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	bf94      	ite	ls
 80030dc:	2301      	movls	r3, #1
 80030de:	2300      	movhi	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e0e7      	b.n	80032ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4a78      	ldr	r2, [pc, #480]	; (80032d0 <HAL_I2C_Init+0x280>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	0c9b      	lsrs	r3, r3, #18
 80030f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	430a      	orrs	r2, r1
 8003108:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	4a6a      	ldr	r2, [pc, #424]	; (80032c4 <HAL_I2C_Init+0x274>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d802      	bhi.n	8003124 <HAL_I2C_Init+0xd4>
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	3301      	adds	r3, #1
 8003122:	e009      	b.n	8003138 <HAL_I2C_Init+0xe8>
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800312a:	fb02 f303 	mul.w	r3, r2, r3
 800312e:	4a69      	ldr	r2, [pc, #420]	; (80032d4 <HAL_I2C_Init+0x284>)
 8003130:	fba2 2303 	umull	r2, r3, r2, r3
 8003134:	099b      	lsrs	r3, r3, #6
 8003136:	3301      	adds	r3, #1
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6812      	ldr	r2, [r2, #0]
 800313c:	430b      	orrs	r3, r1
 800313e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800314a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	495c      	ldr	r1, [pc, #368]	; (80032c4 <HAL_I2C_Init+0x274>)
 8003154:	428b      	cmp	r3, r1
 8003156:	d819      	bhi.n	800318c <HAL_I2C_Init+0x13c>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	1e59      	subs	r1, r3, #1
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	fbb1 f3f3 	udiv	r3, r1, r3
 8003166:	1c59      	adds	r1, r3, #1
 8003168:	f640 73fc 	movw	r3, #4092	; 0xffc
 800316c:	400b      	ands	r3, r1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00a      	beq.n	8003188 <HAL_I2C_Init+0x138>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	1e59      	subs	r1, r3, #1
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003180:	3301      	adds	r3, #1
 8003182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003186:	e051      	b.n	800322c <HAL_I2C_Init+0x1dc>
 8003188:	2304      	movs	r3, #4
 800318a:	e04f      	b.n	800322c <HAL_I2C_Init+0x1dc>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d111      	bne.n	80031b8 <HAL_I2C_Init+0x168>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	1e58      	subs	r0, r3, #1
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6859      	ldr	r1, [r3, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	440b      	add	r3, r1
 80031a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031a6:	3301      	adds	r3, #1
 80031a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	bf0c      	ite	eq
 80031b0:	2301      	moveq	r3, #1
 80031b2:	2300      	movne	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	e012      	b.n	80031de <HAL_I2C_Init+0x18e>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	1e58      	subs	r0, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6859      	ldr	r1, [r3, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	0099      	lsls	r1, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ce:	3301      	adds	r3, #1
 80031d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	bf0c      	ite	eq
 80031d8:	2301      	moveq	r3, #1
 80031da:	2300      	movne	r3, #0
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <HAL_I2C_Init+0x196>
 80031e2:	2301      	movs	r3, #1
 80031e4:	e022      	b.n	800322c <HAL_I2C_Init+0x1dc>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10e      	bne.n	800320c <HAL_I2C_Init+0x1bc>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	1e58      	subs	r0, r3, #1
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6859      	ldr	r1, [r3, #4]
 80031f6:	460b      	mov	r3, r1
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	440b      	add	r3, r1
 80031fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003200:	3301      	adds	r3, #1
 8003202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800320a:	e00f      	b.n	800322c <HAL_I2C_Init+0x1dc>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	1e58      	subs	r0, r3, #1
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6859      	ldr	r1, [r3, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	0099      	lsls	r1, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003222:	3301      	adds	r3, #1
 8003224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003228:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	6809      	ldr	r1, [r1, #0]
 8003230:	4313      	orrs	r3, r2
 8003232:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69da      	ldr	r2, [r3, #28]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800325a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6911      	ldr	r1, [r2, #16]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	68d2      	ldr	r2, [r2, #12]
 8003266:	4311      	orrs	r1, r2
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6812      	ldr	r2, [r2, #0]
 800326c:	430b      	orrs	r3, r1
 800326e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	695a      	ldr	r2, [r3, #20]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0201 	orr.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2220      	movs	r2, #32
 80032a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	000186a0 	.word	0x000186a0
 80032c8:	001e847f 	.word	0x001e847f
 80032cc:	003d08ff 	.word	0x003d08ff
 80032d0:	431bde83 	.word	0x431bde83
 80032d4:	10624dd3 	.word	0x10624dd3

080032d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80032de:	2300      	movs	r3, #0
 80032e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80032e2:	2300      	movs	r3, #0
 80032e4:	603b      	str	r3, [r7, #0]
 80032e6:	4b20      	ldr	r3, [pc, #128]	; (8003368 <HAL_PWREx_EnableOverDrive+0x90>)
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	4a1f      	ldr	r2, [pc, #124]	; (8003368 <HAL_PWREx_EnableOverDrive+0x90>)
 80032ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f0:	6413      	str	r3, [r2, #64]	; 0x40
 80032f2:	4b1d      	ldr	r3, [pc, #116]	; (8003368 <HAL_PWREx_EnableOverDrive+0x90>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fa:	603b      	str	r3, [r7, #0]
 80032fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80032fe:	4b1b      	ldr	r3, [pc, #108]	; (800336c <HAL_PWREx_EnableOverDrive+0x94>)
 8003300:	2201      	movs	r2, #1
 8003302:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003304:	f7ff f95c 	bl	80025c0 <HAL_GetTick>
 8003308:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800330a:	e009      	b.n	8003320 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800330c:	f7ff f958 	bl	80025c0 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800331a:	d901      	bls.n	8003320 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e01f      	b.n	8003360 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003320:	4b13      	ldr	r3, [pc, #76]	; (8003370 <HAL_PWREx_EnableOverDrive+0x98>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800332c:	d1ee      	bne.n	800330c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800332e:	4b11      	ldr	r3, [pc, #68]	; (8003374 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003330:	2201      	movs	r2, #1
 8003332:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003334:	f7ff f944 	bl	80025c0 <HAL_GetTick>
 8003338:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800333a:	e009      	b.n	8003350 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800333c:	f7ff f940 	bl	80025c0 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800334a:	d901      	bls.n	8003350 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e007      	b.n	8003360 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003350:	4b07      	ldr	r3, [pc, #28]	; (8003370 <HAL_PWREx_EnableOverDrive+0x98>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003358:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800335c:	d1ee      	bne.n	800333c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40023800 	.word	0x40023800
 800336c:	420e0040 	.word	0x420e0040
 8003370:	40007000 	.word	0x40007000
 8003374:	420e0044 	.word	0x420e0044

08003378 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e0cc      	b.n	8003526 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800338c:	4b68      	ldr	r3, [pc, #416]	; (8003530 <HAL_RCC_ClockConfig+0x1b8>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 030f 	and.w	r3, r3, #15
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	429a      	cmp	r2, r3
 8003398:	d90c      	bls.n	80033b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800339a:	4b65      	ldr	r3, [pc, #404]	; (8003530 <HAL_RCC_ClockConfig+0x1b8>)
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a2:	4b63      	ldr	r3, [pc, #396]	; (8003530 <HAL_RCC_ClockConfig+0x1b8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 030f 	and.w	r3, r3, #15
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d001      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e0b8      	b.n	8003526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d020      	beq.n	8003402 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033cc:	4b59      	ldr	r3, [pc, #356]	; (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	4a58      	ldr	r2, [pc, #352]	; (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80033d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0308 	and.w	r3, r3, #8
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d005      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033e4:	4b53      	ldr	r3, [pc, #332]	; (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	4a52      	ldr	r2, [pc, #328]	; (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033f0:	4b50      	ldr	r3, [pc, #320]	; (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	494d      	ldr	r1, [pc, #308]	; (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d044      	beq.n	8003498 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d107      	bne.n	8003426 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003416:	4b47      	ldr	r3, [pc, #284]	; (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d119      	bne.n	8003456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e07f      	b.n	8003526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b02      	cmp	r3, #2
 800342c:	d003      	beq.n	8003436 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003432:	2b03      	cmp	r3, #3
 8003434:	d107      	bne.n	8003446 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003436:	4b3f      	ldr	r3, [pc, #252]	; (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d109      	bne.n	8003456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e06f      	b.n	8003526 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003446:	4b3b      	ldr	r3, [pc, #236]	; (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e067      	b.n	8003526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003456:	4b37      	ldr	r3, [pc, #220]	; (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f023 0203 	bic.w	r2, r3, #3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	4934      	ldr	r1, [pc, #208]	; (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 8003464:	4313      	orrs	r3, r2
 8003466:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003468:	f7ff f8aa 	bl	80025c0 <HAL_GetTick>
 800346c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346e:	e00a      	b.n	8003486 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003470:	f7ff f8a6 	bl	80025c0 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	f241 3288 	movw	r2, #5000	; 0x1388
 800347e:	4293      	cmp	r3, r2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e04f      	b.n	8003526 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003486:	4b2b      	ldr	r3, [pc, #172]	; (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 020c 	and.w	r2, r3, #12
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	429a      	cmp	r2, r3
 8003496:	d1eb      	bne.n	8003470 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003498:	4b25      	ldr	r3, [pc, #148]	; (8003530 <HAL_RCC_ClockConfig+0x1b8>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 030f 	and.w	r3, r3, #15
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d20c      	bcs.n	80034c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a6:	4b22      	ldr	r3, [pc, #136]	; (8003530 <HAL_RCC_ClockConfig+0x1b8>)
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ae:	4b20      	ldr	r3, [pc, #128]	; (8003530 <HAL_RCC_ClockConfig+0x1b8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d001      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e032      	b.n	8003526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d008      	beq.n	80034de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034cc:	4b19      	ldr	r3, [pc, #100]	; (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	4916      	ldr	r1, [pc, #88]	; (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d009      	beq.n	80034fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ea:	4b12      	ldr	r3, [pc, #72]	; (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	490e      	ldr	r1, [pc, #56]	; (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034fe:	f000 fb7f 	bl	8003c00 <HAL_RCC_GetSysClockFreq>
 8003502:	4602      	mov	r2, r0
 8003504:	4b0b      	ldr	r3, [pc, #44]	; (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	091b      	lsrs	r3, r3, #4
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	490a      	ldr	r1, [pc, #40]	; (8003538 <HAL_RCC_ClockConfig+0x1c0>)
 8003510:	5ccb      	ldrb	r3, [r1, r3]
 8003512:	fa22 f303 	lsr.w	r3, r2, r3
 8003516:	4a09      	ldr	r2, [pc, #36]	; (800353c <HAL_RCC_ClockConfig+0x1c4>)
 8003518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800351a:	4b09      	ldr	r3, [pc, #36]	; (8003540 <HAL_RCC_ClockConfig+0x1c8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff f80a 	bl	8002538 <HAL_InitTick>

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	40023c00 	.word	0x40023c00
 8003534:	40023800 	.word	0x40023800
 8003538:	08006b2c 	.word	0x08006b2c
 800353c:	20000018 	.word	0x20000018
 8003540:	2000001c 	.word	0x2000001c

08003544 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003548:	4b03      	ldr	r3, [pc, #12]	; (8003558 <HAL_RCC_GetHCLKFreq+0x14>)
 800354a:	681b      	ldr	r3, [r3, #0]
}
 800354c:	4618      	mov	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	20000018 	.word	0x20000018

0800355c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003560:	f7ff fff0 	bl	8003544 <HAL_RCC_GetHCLKFreq>
 8003564:	4602      	mov	r2, r0
 8003566:	4b05      	ldr	r3, [pc, #20]	; (800357c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	0a9b      	lsrs	r3, r3, #10
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	4903      	ldr	r1, [pc, #12]	; (8003580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003572:	5ccb      	ldrb	r3, [r1, r3]
 8003574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003578:	4618      	mov	r0, r3
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40023800 	.word	0x40023800
 8003580:	08006b3c 	.word	0x08006b3c

08003584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003588:	f7ff ffdc 	bl	8003544 <HAL_RCC_GetHCLKFreq>
 800358c:	4602      	mov	r2, r0
 800358e:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	0b5b      	lsrs	r3, r3, #13
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	4903      	ldr	r1, [pc, #12]	; (80035a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800359a:	5ccb      	ldrb	r3, [r1, r3]
 800359c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40023800 	.word	0x40023800
 80035a8:	08006b3c 	.word	0x08006b3c

080035ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b08c      	sub	sp, #48	; 0x30
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80035b8:	2300      	movs	r3, #0
 80035ba:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80035bc:	2300      	movs	r3, #0
 80035be:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d010      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80035e4:	4b6f      	ldr	r3, [pc, #444]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035ea:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f2:	496c      	ldr	r1, [pc, #432]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003602:	2301      	movs	r3, #1
 8003604:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d010      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003612:	4b64      	ldr	r3, [pc, #400]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003618:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003620:	4960      	ldr	r1, [pc, #384]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003622:	4313      	orrs	r3, r2
 8003624:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003630:	2301      	movs	r3, #1
 8003632:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b00      	cmp	r3, #0
 800363e:	d017      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003640:	4b58      	ldr	r3, [pc, #352]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003642:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003646:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	4955      	ldr	r1, [pc, #340]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003650:	4313      	orrs	r3, r2
 8003652:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800365e:	d101      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003660:	2301      	movs	r3, #1
 8003662:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800366c:	2301      	movs	r3, #1
 800366e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b00      	cmp	r3, #0
 800367a:	d017      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800367c:	4b49      	ldr	r3, [pc, #292]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800367e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003682:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800368a:	4946      	ldr	r1, [pc, #280]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800368c:	4313      	orrs	r3, r2
 800368e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003696:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800369a:	d101      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800369c:	2301      	movs	r3, #1
 800369e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80036a8:	2301      	movs	r3, #1
 80036aa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0320 	and.w	r3, r3, #32
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 808a 	beq.w	80037ce <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80036ba:	2300      	movs	r3, #0
 80036bc:	60bb      	str	r3, [r7, #8]
 80036be:	4b39      	ldr	r3, [pc, #228]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	4a38      	ldr	r2, [pc, #224]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036c8:	6413      	str	r3, [r2, #64]	; 0x40
 80036ca:	4b36      	ldr	r3, [pc, #216]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d2:	60bb      	str	r3, [r7, #8]
 80036d4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80036d6:	4b34      	ldr	r3, [pc, #208]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a33      	ldr	r2, [pc, #204]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80036dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80036e2:	f7fe ff6d 	bl	80025c0 <HAL_GetTick>
 80036e6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80036e8:	e008      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80036ea:	f7fe ff69 	bl	80025c0 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d901      	bls.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e278      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80036fc:	4b2a      	ldr	r3, [pc, #168]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0f0      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003708:	4b26      	ldr	r3, [pc, #152]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800370a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003710:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d02f      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003720:	6a3a      	ldr	r2, [r7, #32]
 8003722:	429a      	cmp	r2, r3
 8003724:	d028      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003726:	4b1f      	ldr	r3, [pc, #124]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800372e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003730:	4b1e      	ldr	r3, [pc, #120]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003732:	2201      	movs	r2, #1
 8003734:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003736:	4b1d      	ldr	r3, [pc, #116]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800373c:	4a19      	ldr	r2, [pc, #100]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003742:	4b18      	ldr	r3, [pc, #96]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b01      	cmp	r3, #1
 800374c:	d114      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800374e:	f7fe ff37 	bl	80025c0 <HAL_GetTick>
 8003752:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003754:	e00a      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003756:	f7fe ff33 	bl	80025c0 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	f241 3288 	movw	r2, #5000	; 0x1388
 8003764:	4293      	cmp	r3, r2
 8003766:	d901      	bls.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e240      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800376c:	4b0d      	ldr	r3, [pc, #52]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800376e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d0ee      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003780:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003784:	d114      	bne.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003786:	4b07      	ldr	r3, [pc, #28]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800379a:	4902      	ldr	r1, [pc, #8]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800379c:	4313      	orrs	r3, r2
 800379e:	608b      	str	r3, [r1, #8]
 80037a0:	e00c      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x210>
 80037a2:	bf00      	nop
 80037a4:	40023800 	.word	0x40023800
 80037a8:	40007000 	.word	0x40007000
 80037ac:	42470e40 	.word	0x42470e40
 80037b0:	4b4a      	ldr	r3, [pc, #296]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	4a49      	ldr	r2, [pc, #292]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037b6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80037ba:	6093      	str	r3, [r2, #8]
 80037bc:	4b47      	ldr	r3, [pc, #284]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c8:	4944      	ldr	r1, [pc, #272]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0310 	and.w	r3, r3, #16
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d004      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80037e0:	4b3f      	ldr	r3, [pc, #252]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80037e2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00a      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80037f0:	4b3a      	ldr	r3, [pc, #232]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037fe:	4937      	ldr	r1, [pc, #220]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003800:	4313      	orrs	r3, r2
 8003802:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00a      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003812:	4b32      	ldr	r3, [pc, #200]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003814:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003818:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003820:	492e      	ldr	r1, [pc, #184]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003822:	4313      	orrs	r3, r2
 8003824:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003830:	2b00      	cmp	r3, #0
 8003832:	d011      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003834:	4b29      	ldr	r3, [pc, #164]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003836:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800383a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003842:	4926      	ldr	r1, [pc, #152]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003852:	d101      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003854:	2301      	movs	r3, #1
 8003856:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00a      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003864:	4b1d      	ldr	r3, [pc, #116]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003866:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800386a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003872:	491a      	ldr	r1, [pc, #104]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003874:	4313      	orrs	r3, r2
 8003876:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003882:	2b00      	cmp	r3, #0
 8003884:	d011      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003886:	4b15      	ldr	r3, [pc, #84]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003888:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800388c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003894:	4911      	ldr	r1, [pc, #68]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003896:	4313      	orrs	r3, r2
 8003898:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038a4:	d101      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80038a6:	2301      	movs	r3, #1
 80038a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80038aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d005      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038b8:	f040 80ff 	bne.w	8003aba <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80038bc:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038be:	2200      	movs	r2, #0
 80038c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038c2:	f7fe fe7d 	bl	80025c0 <HAL_GetTick>
 80038c6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038c8:	e00e      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80038ca:	f7fe fe79 	bl	80025c0 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d907      	bls.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e188      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x642>
 80038dc:	40023800 	.word	0x40023800
 80038e0:	424711e0 	.word	0x424711e0
 80038e4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038e8:	4b7e      	ldr	r3, [pc, #504]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1ea      	bne.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003904:	2b00      	cmp	r3, #0
 8003906:	d009      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003910:	2b00      	cmp	r3, #0
 8003912:	d028      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003918:	2b00      	cmp	r3, #0
 800391a:	d124      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800391c:	4b71      	ldr	r3, [pc, #452]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800391e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003922:	0c1b      	lsrs	r3, r3, #16
 8003924:	f003 0303 	and.w	r3, r3, #3
 8003928:	3301      	adds	r3, #1
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800392e:	4b6d      	ldr	r3, [pc, #436]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003934:	0e1b      	lsrs	r3, r3, #24
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	019b      	lsls	r3, r3, #6
 8003946:	431a      	orrs	r2, r3
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	085b      	lsrs	r3, r3, #1
 800394c:	3b01      	subs	r3, #1
 800394e:	041b      	lsls	r3, r3, #16
 8003950:	431a      	orrs	r2, r3
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	061b      	lsls	r3, r3, #24
 8003956:	431a      	orrs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	071b      	lsls	r3, r3, #28
 800395e:	4961      	ldr	r1, [pc, #388]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003960:	4313      	orrs	r3, r2
 8003962:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0304 	and.w	r3, r3, #4
 800396e:	2b00      	cmp	r3, #0
 8003970:	d004      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800397a:	d00a      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003984:	2b00      	cmp	r3, #0
 8003986:	d035      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003990:	d130      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003992:	4b54      	ldr	r3, [pc, #336]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003994:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003998:	0c1b      	lsrs	r3, r3, #16
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	3301      	adds	r3, #1
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80039a4:	4b4f      	ldr	r3, [pc, #316]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039aa:	0f1b      	lsrs	r3, r3, #28
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	019b      	lsls	r3, r3, #6
 80039bc:	431a      	orrs	r2, r3
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	085b      	lsrs	r3, r3, #1
 80039c2:	3b01      	subs	r3, #1
 80039c4:	041b      	lsls	r3, r3, #16
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	061b      	lsls	r3, r3, #24
 80039ce:	431a      	orrs	r2, r3
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	071b      	lsls	r3, r3, #28
 80039d4:	4943      	ldr	r1, [pc, #268]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80039dc:	4b41      	ldr	r3, [pc, #260]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039e2:	f023 021f 	bic.w	r2, r3, #31
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ea:	3b01      	subs	r3, #1
 80039ec:	493d      	ldr	r1, [pc, #244]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d029      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a08:	d124      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003a0a:	4b36      	ldr	r3, [pc, #216]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a10:	0c1b      	lsrs	r3, r3, #16
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	3301      	adds	r3, #1
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a1c:	4b31      	ldr	r3, [pc, #196]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a22:	0f1b      	lsrs	r3, r3, #28
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	019b      	lsls	r3, r3, #6
 8003a34:	431a      	orrs	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	085b      	lsrs	r3, r3, #1
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	041b      	lsls	r3, r3, #16
 8003a40:	431a      	orrs	r2, r3
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	061b      	lsls	r3, r3, #24
 8003a46:	431a      	orrs	r2, r3
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	071b      	lsls	r3, r3, #28
 8003a4c:	4925      	ldr	r1, [pc, #148]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d016      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	019b      	lsls	r3, r3, #6
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	085b      	lsrs	r3, r3, #1
 8003a72:	3b01      	subs	r3, #1
 8003a74:	041b      	lsls	r3, r3, #16
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	061b      	lsls	r3, r3, #24
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	071b      	lsls	r3, r3, #28
 8003a86:	4917      	ldr	r1, [pc, #92]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a8e:	4b16      	ldr	r3, [pc, #88]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003a90:	2201      	movs	r2, #1
 8003a92:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a94:	f7fe fd94 	bl	80025c0 <HAL_GetTick>
 8003a98:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003a9c:	f7fe fd90 	bl	80025c0 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e09f      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003aae:	4b0d      	ldr	r3, [pc, #52]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d0f0      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	f040 8095 	bne.w	8003bec <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ac2:	4b0a      	ldr	r3, [pc, #40]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ac8:	f7fe fd7a 	bl	80025c0 <HAL_GetTick>
 8003acc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ace:	e00f      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003ad0:	f7fe fd76 	bl	80025c0 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d908      	bls.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e085      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003ae2:	bf00      	nop
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	42470068 	.word	0x42470068
 8003aec:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003af0:	4b41      	ldr	r3, [pc, #260]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003af8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003afc:	d0e8      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0304 	and.w	r3, r3, #4
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d009      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d02b      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d127      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003b26:	4b34      	ldr	r3, [pc, #208]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2c:	0c1b      	lsrs	r3, r3, #16
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	3301      	adds	r3, #1
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	699a      	ldr	r2, [r3, #24]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	019b      	lsls	r3, r3, #6
 8003b42:	431a      	orrs	r2, r3
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	085b      	lsrs	r3, r3, #1
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	041b      	lsls	r3, r3, #16
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	061b      	lsls	r3, r3, #24
 8003b54:	4928      	ldr	r1, [pc, #160]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b5c:	4b26      	ldr	r3, [pc, #152]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b62:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	021b      	lsls	r3, r3, #8
 8003b6e:	4922      	ldr	r1, [pc, #136]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d01d      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b8a:	d118      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b8c:	4b1a      	ldr	r3, [pc, #104]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b92:	0e1b      	lsrs	r3, r3, #24
 8003b94:	f003 030f 	and.w	r3, r3, #15
 8003b98:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699a      	ldr	r2, [r3, #24]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	019b      	lsls	r3, r3, #6
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	085b      	lsrs	r3, r3, #1
 8003bac:	3b01      	subs	r3, #1
 8003bae:	041b      	lsls	r3, r3, #16
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	061b      	lsls	r3, r3, #24
 8003bb6:	4910      	ldr	r1, [pc, #64]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003bbe:	4b0f      	ldr	r3, [pc, #60]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bc4:	f7fe fcfc 	bl	80025c0 <HAL_GetTick>
 8003bc8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003bcc:	f7fe fcf8 	bl	80025c0 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e007      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bde:	4b06      	ldr	r3, [pc, #24]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003be6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bea:	d1ef      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3730      	adds	r7, #48	; 0x30
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	42470070 	.word	0x42470070

08003c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c04:	b0ae      	sub	sp, #184	; 0xb8
 8003c06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c26:	4bcb      	ldr	r3, [pc, #812]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 030c 	and.w	r3, r3, #12
 8003c2e:	2b0c      	cmp	r3, #12
 8003c30:	f200 8206 	bhi.w	8004040 <HAL_RCC_GetSysClockFreq+0x440>
 8003c34:	a201      	add	r2, pc, #4	; (adr r2, 8003c3c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3a:	bf00      	nop
 8003c3c:	08003c71 	.word	0x08003c71
 8003c40:	08004041 	.word	0x08004041
 8003c44:	08004041 	.word	0x08004041
 8003c48:	08004041 	.word	0x08004041
 8003c4c:	08003c79 	.word	0x08003c79
 8003c50:	08004041 	.word	0x08004041
 8003c54:	08004041 	.word	0x08004041
 8003c58:	08004041 	.word	0x08004041
 8003c5c:	08003c81 	.word	0x08003c81
 8003c60:	08004041 	.word	0x08004041
 8003c64:	08004041 	.word	0x08004041
 8003c68:	08004041 	.word	0x08004041
 8003c6c:	08003e71 	.word	0x08003e71
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c70:	4bb9      	ldr	r3, [pc, #740]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x358>)
 8003c72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003c76:	e1e7      	b.n	8004048 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c78:	4bb8      	ldr	r3, [pc, #736]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003c7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c7e:	e1e3      	b.n	8004048 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c80:	4bb4      	ldr	r3, [pc, #720]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c8c:	4bb1      	ldr	r3, [pc, #708]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d071      	beq.n	8003d7c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c98:	4bae      	ldr	r3, [pc, #696]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	099b      	lsrs	r3, r3, #6
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ca4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003ca8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003cba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003cbe:	4622      	mov	r2, r4
 8003cc0:	462b      	mov	r3, r5
 8003cc2:	f04f 0000 	mov.w	r0, #0
 8003cc6:	f04f 0100 	mov.w	r1, #0
 8003cca:	0159      	lsls	r1, r3, #5
 8003ccc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cd0:	0150      	lsls	r0, r2, #5
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4621      	mov	r1, r4
 8003cd8:	1a51      	subs	r1, r2, r1
 8003cda:	6439      	str	r1, [r7, #64]	; 0x40
 8003cdc:	4629      	mov	r1, r5
 8003cde:	eb63 0301 	sbc.w	r3, r3, r1
 8003ce2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ce4:	f04f 0200 	mov.w	r2, #0
 8003ce8:	f04f 0300 	mov.w	r3, #0
 8003cec:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003cf0:	4649      	mov	r1, r9
 8003cf2:	018b      	lsls	r3, r1, #6
 8003cf4:	4641      	mov	r1, r8
 8003cf6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cfa:	4641      	mov	r1, r8
 8003cfc:	018a      	lsls	r2, r1, #6
 8003cfe:	4641      	mov	r1, r8
 8003d00:	1a51      	subs	r1, r2, r1
 8003d02:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d04:	4649      	mov	r1, r9
 8003d06:	eb63 0301 	sbc.w	r3, r3, r1
 8003d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d0c:	f04f 0200 	mov.w	r2, #0
 8003d10:	f04f 0300 	mov.w	r3, #0
 8003d14:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003d18:	4649      	mov	r1, r9
 8003d1a:	00cb      	lsls	r3, r1, #3
 8003d1c:	4641      	mov	r1, r8
 8003d1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d22:	4641      	mov	r1, r8
 8003d24:	00ca      	lsls	r2, r1, #3
 8003d26:	4610      	mov	r0, r2
 8003d28:	4619      	mov	r1, r3
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	4622      	mov	r2, r4
 8003d2e:	189b      	adds	r3, r3, r2
 8003d30:	633b      	str	r3, [r7, #48]	; 0x30
 8003d32:	462b      	mov	r3, r5
 8003d34:	460a      	mov	r2, r1
 8003d36:	eb42 0303 	adc.w	r3, r2, r3
 8003d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	f04f 0300 	mov.w	r3, #0
 8003d44:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d48:	4629      	mov	r1, r5
 8003d4a:	024b      	lsls	r3, r1, #9
 8003d4c:	4621      	mov	r1, r4
 8003d4e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d52:	4621      	mov	r1, r4
 8003d54:	024a      	lsls	r2, r1, #9
 8003d56:	4610      	mov	r0, r2
 8003d58:	4619      	mov	r1, r3
 8003d5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d64:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d68:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003d6c:	f7fc fc8e 	bl	800068c <__aeabi_uldivmod>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4613      	mov	r3, r2
 8003d76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d7a:	e067      	b.n	8003e4c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d7c:	4b75      	ldr	r3, [pc, #468]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	099b      	lsrs	r3, r3, #6
 8003d82:	2200      	movs	r2, #0
 8003d84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d88:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003d8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d94:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d96:	2300      	movs	r3, #0
 8003d98:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d9a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003d9e:	4622      	mov	r2, r4
 8003da0:	462b      	mov	r3, r5
 8003da2:	f04f 0000 	mov.w	r0, #0
 8003da6:	f04f 0100 	mov.w	r1, #0
 8003daa:	0159      	lsls	r1, r3, #5
 8003dac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003db0:	0150      	lsls	r0, r2, #5
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	4621      	mov	r1, r4
 8003db8:	1a51      	subs	r1, r2, r1
 8003dba:	62b9      	str	r1, [r7, #40]	; 0x28
 8003dbc:	4629      	mov	r1, r5
 8003dbe:	eb63 0301 	sbc.w	r3, r3, r1
 8003dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dc4:	f04f 0200 	mov.w	r2, #0
 8003dc8:	f04f 0300 	mov.w	r3, #0
 8003dcc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003dd0:	4649      	mov	r1, r9
 8003dd2:	018b      	lsls	r3, r1, #6
 8003dd4:	4641      	mov	r1, r8
 8003dd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dda:	4641      	mov	r1, r8
 8003ddc:	018a      	lsls	r2, r1, #6
 8003dde:	4641      	mov	r1, r8
 8003de0:	ebb2 0a01 	subs.w	sl, r2, r1
 8003de4:	4649      	mov	r1, r9
 8003de6:	eb63 0b01 	sbc.w	fp, r3, r1
 8003dea:	f04f 0200 	mov.w	r2, #0
 8003dee:	f04f 0300 	mov.w	r3, #0
 8003df2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003df6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003dfa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dfe:	4692      	mov	sl, r2
 8003e00:	469b      	mov	fp, r3
 8003e02:	4623      	mov	r3, r4
 8003e04:	eb1a 0303 	adds.w	r3, sl, r3
 8003e08:	623b      	str	r3, [r7, #32]
 8003e0a:	462b      	mov	r3, r5
 8003e0c:	eb4b 0303 	adc.w	r3, fp, r3
 8003e10:	627b      	str	r3, [r7, #36]	; 0x24
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	f04f 0300 	mov.w	r3, #0
 8003e1a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003e1e:	4629      	mov	r1, r5
 8003e20:	028b      	lsls	r3, r1, #10
 8003e22:	4621      	mov	r1, r4
 8003e24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e28:	4621      	mov	r1, r4
 8003e2a:	028a      	lsls	r2, r1, #10
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	4619      	mov	r1, r3
 8003e30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e34:	2200      	movs	r2, #0
 8003e36:	673b      	str	r3, [r7, #112]	; 0x70
 8003e38:	677a      	str	r2, [r7, #116]	; 0x74
 8003e3a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003e3e:	f7fc fc25 	bl	800068c <__aeabi_uldivmod>
 8003e42:	4602      	mov	r2, r0
 8003e44:	460b      	mov	r3, r1
 8003e46:	4613      	mov	r3, r2
 8003e48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e4c:	4b41      	ldr	r3, [pc, #260]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	0c1b      	lsrs	r3, r3, #16
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	3301      	adds	r3, #1
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003e5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e6e:	e0eb      	b.n	8004048 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e70:	4b38      	ldr	r3, [pc, #224]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e7c:	4b35      	ldr	r3, [pc, #212]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d06b      	beq.n	8003f60 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e88:	4b32      	ldr	r3, [pc, #200]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	099b      	lsrs	r3, r3, #6
 8003e8e:	2200      	movs	r2, #0
 8003e90:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e9a:	663b      	str	r3, [r7, #96]	; 0x60
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	667b      	str	r3, [r7, #100]	; 0x64
 8003ea0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003ea4:	4622      	mov	r2, r4
 8003ea6:	462b      	mov	r3, r5
 8003ea8:	f04f 0000 	mov.w	r0, #0
 8003eac:	f04f 0100 	mov.w	r1, #0
 8003eb0:	0159      	lsls	r1, r3, #5
 8003eb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eb6:	0150      	lsls	r0, r2, #5
 8003eb8:	4602      	mov	r2, r0
 8003eba:	460b      	mov	r3, r1
 8003ebc:	4621      	mov	r1, r4
 8003ebe:	1a51      	subs	r1, r2, r1
 8003ec0:	61b9      	str	r1, [r7, #24]
 8003ec2:	4629      	mov	r1, r5
 8003ec4:	eb63 0301 	sbc.w	r3, r3, r1
 8003ec8:	61fb      	str	r3, [r7, #28]
 8003eca:	f04f 0200 	mov.w	r2, #0
 8003ece:	f04f 0300 	mov.w	r3, #0
 8003ed2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003ed6:	4659      	mov	r1, fp
 8003ed8:	018b      	lsls	r3, r1, #6
 8003eda:	4651      	mov	r1, sl
 8003edc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ee0:	4651      	mov	r1, sl
 8003ee2:	018a      	lsls	r2, r1, #6
 8003ee4:	4651      	mov	r1, sl
 8003ee6:	ebb2 0801 	subs.w	r8, r2, r1
 8003eea:	4659      	mov	r1, fp
 8003eec:	eb63 0901 	sbc.w	r9, r3, r1
 8003ef0:	f04f 0200 	mov.w	r2, #0
 8003ef4:	f04f 0300 	mov.w	r3, #0
 8003ef8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003efc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f00:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f04:	4690      	mov	r8, r2
 8003f06:	4699      	mov	r9, r3
 8003f08:	4623      	mov	r3, r4
 8003f0a:	eb18 0303 	adds.w	r3, r8, r3
 8003f0e:	613b      	str	r3, [r7, #16]
 8003f10:	462b      	mov	r3, r5
 8003f12:	eb49 0303 	adc.w	r3, r9, r3
 8003f16:	617b      	str	r3, [r7, #20]
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	f04f 0300 	mov.w	r3, #0
 8003f20:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003f24:	4629      	mov	r1, r5
 8003f26:	024b      	lsls	r3, r1, #9
 8003f28:	4621      	mov	r1, r4
 8003f2a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f2e:	4621      	mov	r1, r4
 8003f30:	024a      	lsls	r2, r1, #9
 8003f32:	4610      	mov	r0, r2
 8003f34:	4619      	mov	r1, r3
 8003f36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f3e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003f40:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f44:	f7fc fba2 	bl	800068c <__aeabi_uldivmod>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f52:	e065      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x420>
 8003f54:	40023800 	.word	0x40023800
 8003f58:	00f42400 	.word	0x00f42400
 8003f5c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f60:	4b3d      	ldr	r3, [pc, #244]	; (8004058 <HAL_RCC_GetSysClockFreq+0x458>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	099b      	lsrs	r3, r3, #6
 8003f66:	2200      	movs	r2, #0
 8003f68:	4618      	mov	r0, r3
 8003f6a:	4611      	mov	r1, r2
 8003f6c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f70:	653b      	str	r3, [r7, #80]	; 0x50
 8003f72:	2300      	movs	r3, #0
 8003f74:	657b      	str	r3, [r7, #84]	; 0x54
 8003f76:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003f7a:	4642      	mov	r2, r8
 8003f7c:	464b      	mov	r3, r9
 8003f7e:	f04f 0000 	mov.w	r0, #0
 8003f82:	f04f 0100 	mov.w	r1, #0
 8003f86:	0159      	lsls	r1, r3, #5
 8003f88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f8c:	0150      	lsls	r0, r2, #5
 8003f8e:	4602      	mov	r2, r0
 8003f90:	460b      	mov	r3, r1
 8003f92:	4641      	mov	r1, r8
 8003f94:	1a51      	subs	r1, r2, r1
 8003f96:	60b9      	str	r1, [r7, #8]
 8003f98:	4649      	mov	r1, r9
 8003f9a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003fac:	4659      	mov	r1, fp
 8003fae:	018b      	lsls	r3, r1, #6
 8003fb0:	4651      	mov	r1, sl
 8003fb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fb6:	4651      	mov	r1, sl
 8003fb8:	018a      	lsls	r2, r1, #6
 8003fba:	4651      	mov	r1, sl
 8003fbc:	1a54      	subs	r4, r2, r1
 8003fbe:	4659      	mov	r1, fp
 8003fc0:	eb63 0501 	sbc.w	r5, r3, r1
 8003fc4:	f04f 0200 	mov.w	r2, #0
 8003fc8:	f04f 0300 	mov.w	r3, #0
 8003fcc:	00eb      	lsls	r3, r5, #3
 8003fce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fd2:	00e2      	lsls	r2, r4, #3
 8003fd4:	4614      	mov	r4, r2
 8003fd6:	461d      	mov	r5, r3
 8003fd8:	4643      	mov	r3, r8
 8003fda:	18e3      	adds	r3, r4, r3
 8003fdc:	603b      	str	r3, [r7, #0]
 8003fde:	464b      	mov	r3, r9
 8003fe0:	eb45 0303 	adc.w	r3, r5, r3
 8003fe4:	607b      	str	r3, [r7, #4]
 8003fe6:	f04f 0200 	mov.w	r2, #0
 8003fea:	f04f 0300 	mov.w	r3, #0
 8003fee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ff2:	4629      	mov	r1, r5
 8003ff4:	028b      	lsls	r3, r1, #10
 8003ff6:	4621      	mov	r1, r4
 8003ff8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ffc:	4621      	mov	r1, r4
 8003ffe:	028a      	lsls	r2, r1, #10
 8004000:	4610      	mov	r0, r2
 8004002:	4619      	mov	r1, r3
 8004004:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004008:	2200      	movs	r2, #0
 800400a:	64bb      	str	r3, [r7, #72]	; 0x48
 800400c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800400e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004012:	f7fc fb3b 	bl	800068c <__aeabi_uldivmod>
 8004016:	4602      	mov	r2, r0
 8004018:	460b      	mov	r3, r1
 800401a:	4613      	mov	r3, r2
 800401c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004020:	4b0d      	ldr	r3, [pc, #52]	; (8004058 <HAL_RCC_GetSysClockFreq+0x458>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	0f1b      	lsrs	r3, r3, #28
 8004026:	f003 0307 	and.w	r3, r3, #7
 800402a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800402e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004032:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004036:	fbb2 f3f3 	udiv	r3, r2, r3
 800403a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800403e:	e003      	b.n	8004048 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004040:	4b06      	ldr	r3, [pc, #24]	; (800405c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004042:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004046:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004048:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800404c:	4618      	mov	r0, r3
 800404e:	37b8      	adds	r7, #184	; 0xb8
 8004050:	46bd      	mov	sp, r7
 8004052:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004056:	bf00      	nop
 8004058:	40023800 	.word	0x40023800
 800405c:	00f42400 	.word	0x00f42400

08004060 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e28d      	b.n	800458e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 8083 	beq.w	8004186 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004080:	4b94      	ldr	r3, [pc, #592]	; (80042d4 <HAL_RCC_OscConfig+0x274>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f003 030c 	and.w	r3, r3, #12
 8004088:	2b04      	cmp	r3, #4
 800408a:	d019      	beq.n	80040c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800408c:	4b91      	ldr	r3, [pc, #580]	; (80042d4 <HAL_RCC_OscConfig+0x274>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004094:	2b08      	cmp	r3, #8
 8004096:	d106      	bne.n	80040a6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004098:	4b8e      	ldr	r3, [pc, #568]	; (80042d4 <HAL_RCC_OscConfig+0x274>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040a4:	d00c      	beq.n	80040c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040a6:	4b8b      	ldr	r3, [pc, #556]	; (80042d4 <HAL_RCC_OscConfig+0x274>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80040ae:	2b0c      	cmp	r3, #12
 80040b0:	d112      	bne.n	80040d8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040b2:	4b88      	ldr	r3, [pc, #544]	; (80042d4 <HAL_RCC_OscConfig+0x274>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040be:	d10b      	bne.n	80040d8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c0:	4b84      	ldr	r3, [pc, #528]	; (80042d4 <HAL_RCC_OscConfig+0x274>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d05b      	beq.n	8004184 <HAL_RCC_OscConfig+0x124>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d157      	bne.n	8004184 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e25a      	b.n	800458e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e0:	d106      	bne.n	80040f0 <HAL_RCC_OscConfig+0x90>
 80040e2:	4b7c      	ldr	r3, [pc, #496]	; (80042d4 <HAL_RCC_OscConfig+0x274>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a7b      	ldr	r2, [pc, #492]	; (80042d4 <HAL_RCC_OscConfig+0x274>)
 80040e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	e01d      	b.n	800412c <HAL_RCC_OscConfig+0xcc>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040f8:	d10c      	bne.n	8004114 <HAL_RCC_OscConfig+0xb4>
 80040fa:	4b76      	ldr	r3, [pc, #472]	; (80042d4 <HAL_RCC_OscConfig+0x274>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a75      	ldr	r2, [pc, #468]	; (80042d4 <HAL_RCC_OscConfig+0x274>)
 8004100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	4b73      	ldr	r3, [pc, #460]	; (80042d4 <HAL_RCC_OscConfig+0x274>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a72      	ldr	r2, [pc, #456]	; (80042d4 <HAL_RCC_OscConfig+0x274>)
 800410c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	e00b      	b.n	800412c <HAL_RCC_OscConfig+0xcc>
 8004114:	4b6f      	ldr	r3, [pc, #444]	; (80042d4 <HAL_RCC_OscConfig+0x274>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a6e      	ldr	r2, [pc, #440]	; (80042d4 <HAL_RCC_OscConfig+0x274>)
 800411a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	4b6c      	ldr	r3, [pc, #432]	; (80042d4 <HAL_RCC_OscConfig+0x274>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a6b      	ldr	r2, [pc, #428]	; (80042d4 <HAL_RCC_OscConfig+0x274>)
 8004126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800412a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d013      	beq.n	800415c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004134:	f7fe fa44 	bl	80025c0 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800413c:	f7fe fa40 	bl	80025c0 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b64      	cmp	r3, #100	; 0x64
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e21f      	b.n	800458e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414e:	4b61      	ldr	r3, [pc, #388]	; (80042d4 <HAL_RCC_OscConfig+0x274>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0f0      	beq.n	800413c <HAL_RCC_OscConfig+0xdc>
 800415a:	e014      	b.n	8004186 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800415c:	f7fe fa30 	bl	80025c0 <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004164:	f7fe fa2c 	bl	80025c0 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b64      	cmp	r3, #100	; 0x64
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e20b      	b.n	800458e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004176:	4b57      	ldr	r3, [pc, #348]	; (80042d4 <HAL_RCC_OscConfig+0x274>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1f0      	bne.n	8004164 <HAL_RCC_OscConfig+0x104>
 8004182:	e000      	b.n	8004186 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d06f      	beq.n	8004272 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004192:	4b50      	ldr	r3, [pc, #320]	; (80042d4 <HAL_RCC_OscConfig+0x274>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 030c 	and.w	r3, r3, #12
 800419a:	2b00      	cmp	r3, #0
 800419c:	d017      	beq.n	80041ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800419e:	4b4d      	ldr	r3, [pc, #308]	; (80042d4 <HAL_RCC_OscConfig+0x274>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80041a6:	2b08      	cmp	r3, #8
 80041a8:	d105      	bne.n	80041b6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041aa:	4b4a      	ldr	r3, [pc, #296]	; (80042d4 <HAL_RCC_OscConfig+0x274>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00b      	beq.n	80041ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041b6:	4b47      	ldr	r3, [pc, #284]	; (80042d4 <HAL_RCC_OscConfig+0x274>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041be:	2b0c      	cmp	r3, #12
 80041c0:	d11c      	bne.n	80041fc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041c2:	4b44      	ldr	r3, [pc, #272]	; (80042d4 <HAL_RCC_OscConfig+0x274>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d116      	bne.n	80041fc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ce:	4b41      	ldr	r3, [pc, #260]	; (80042d4 <HAL_RCC_OscConfig+0x274>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d005      	beq.n	80041e6 <HAL_RCC_OscConfig+0x186>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d001      	beq.n	80041e6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e1d3      	b.n	800458e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041e6:	4b3b      	ldr	r3, [pc, #236]	; (80042d4 <HAL_RCC_OscConfig+0x274>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	4937      	ldr	r1, [pc, #220]	; (80042d4 <HAL_RCC_OscConfig+0x274>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041fa:	e03a      	b.n	8004272 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d020      	beq.n	8004246 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004204:	4b34      	ldr	r3, [pc, #208]	; (80042d8 <HAL_RCC_OscConfig+0x278>)
 8004206:	2201      	movs	r2, #1
 8004208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420a:	f7fe f9d9 	bl	80025c0 <HAL_GetTick>
 800420e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004212:	f7fe f9d5 	bl	80025c0 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e1b4      	b.n	800458e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004224:	4b2b      	ldr	r3, [pc, #172]	; (80042d4 <HAL_RCC_OscConfig+0x274>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0f0      	beq.n	8004212 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004230:	4b28      	ldr	r3, [pc, #160]	; (80042d4 <HAL_RCC_OscConfig+0x274>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	4925      	ldr	r1, [pc, #148]	; (80042d4 <HAL_RCC_OscConfig+0x274>)
 8004240:	4313      	orrs	r3, r2
 8004242:	600b      	str	r3, [r1, #0]
 8004244:	e015      	b.n	8004272 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004246:	4b24      	ldr	r3, [pc, #144]	; (80042d8 <HAL_RCC_OscConfig+0x278>)
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424c:	f7fe f9b8 	bl	80025c0 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004254:	f7fe f9b4 	bl	80025c0 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e193      	b.n	800458e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004266:	4b1b      	ldr	r3, [pc, #108]	; (80042d4 <HAL_RCC_OscConfig+0x274>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1f0      	bne.n	8004254 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b00      	cmp	r3, #0
 800427c:	d036      	beq.n	80042ec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d016      	beq.n	80042b4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004286:	4b15      	ldr	r3, [pc, #84]	; (80042dc <HAL_RCC_OscConfig+0x27c>)
 8004288:	2201      	movs	r2, #1
 800428a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428c:	f7fe f998 	bl	80025c0 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004294:	f7fe f994 	bl	80025c0 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e173      	b.n	800458e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042a6:	4b0b      	ldr	r3, [pc, #44]	; (80042d4 <HAL_RCC_OscConfig+0x274>)
 80042a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d0f0      	beq.n	8004294 <HAL_RCC_OscConfig+0x234>
 80042b2:	e01b      	b.n	80042ec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042b4:	4b09      	ldr	r3, [pc, #36]	; (80042dc <HAL_RCC_OscConfig+0x27c>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ba:	f7fe f981 	bl	80025c0 <HAL_GetTick>
 80042be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042c0:	e00e      	b.n	80042e0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042c2:	f7fe f97d 	bl	80025c0 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d907      	bls.n	80042e0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e15c      	b.n	800458e <HAL_RCC_OscConfig+0x52e>
 80042d4:	40023800 	.word	0x40023800
 80042d8:	42470000 	.word	0x42470000
 80042dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042e0:	4b8a      	ldr	r3, [pc, #552]	; (800450c <HAL_RCC_OscConfig+0x4ac>)
 80042e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1ea      	bne.n	80042c2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 8097 	beq.w	8004428 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042fa:	2300      	movs	r3, #0
 80042fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042fe:	4b83      	ldr	r3, [pc, #524]	; (800450c <HAL_RCC_OscConfig+0x4ac>)
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10f      	bne.n	800432a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800430a:	2300      	movs	r3, #0
 800430c:	60bb      	str	r3, [r7, #8]
 800430e:	4b7f      	ldr	r3, [pc, #508]	; (800450c <HAL_RCC_OscConfig+0x4ac>)
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	4a7e      	ldr	r2, [pc, #504]	; (800450c <HAL_RCC_OscConfig+0x4ac>)
 8004314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004318:	6413      	str	r3, [r2, #64]	; 0x40
 800431a:	4b7c      	ldr	r3, [pc, #496]	; (800450c <HAL_RCC_OscConfig+0x4ac>)
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004322:	60bb      	str	r3, [r7, #8]
 8004324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004326:	2301      	movs	r3, #1
 8004328:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800432a:	4b79      	ldr	r3, [pc, #484]	; (8004510 <HAL_RCC_OscConfig+0x4b0>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004332:	2b00      	cmp	r3, #0
 8004334:	d118      	bne.n	8004368 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004336:	4b76      	ldr	r3, [pc, #472]	; (8004510 <HAL_RCC_OscConfig+0x4b0>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a75      	ldr	r2, [pc, #468]	; (8004510 <HAL_RCC_OscConfig+0x4b0>)
 800433c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004340:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004342:	f7fe f93d 	bl	80025c0 <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004348:	e008      	b.n	800435c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800434a:	f7fe f939 	bl	80025c0 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d901      	bls.n	800435c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e118      	b.n	800458e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800435c:	4b6c      	ldr	r3, [pc, #432]	; (8004510 <HAL_RCC_OscConfig+0x4b0>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0f0      	beq.n	800434a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d106      	bne.n	800437e <HAL_RCC_OscConfig+0x31e>
 8004370:	4b66      	ldr	r3, [pc, #408]	; (800450c <HAL_RCC_OscConfig+0x4ac>)
 8004372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004374:	4a65      	ldr	r2, [pc, #404]	; (800450c <HAL_RCC_OscConfig+0x4ac>)
 8004376:	f043 0301 	orr.w	r3, r3, #1
 800437a:	6713      	str	r3, [r2, #112]	; 0x70
 800437c:	e01c      	b.n	80043b8 <HAL_RCC_OscConfig+0x358>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	2b05      	cmp	r3, #5
 8004384:	d10c      	bne.n	80043a0 <HAL_RCC_OscConfig+0x340>
 8004386:	4b61      	ldr	r3, [pc, #388]	; (800450c <HAL_RCC_OscConfig+0x4ac>)
 8004388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438a:	4a60      	ldr	r2, [pc, #384]	; (800450c <HAL_RCC_OscConfig+0x4ac>)
 800438c:	f043 0304 	orr.w	r3, r3, #4
 8004390:	6713      	str	r3, [r2, #112]	; 0x70
 8004392:	4b5e      	ldr	r3, [pc, #376]	; (800450c <HAL_RCC_OscConfig+0x4ac>)
 8004394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004396:	4a5d      	ldr	r2, [pc, #372]	; (800450c <HAL_RCC_OscConfig+0x4ac>)
 8004398:	f043 0301 	orr.w	r3, r3, #1
 800439c:	6713      	str	r3, [r2, #112]	; 0x70
 800439e:	e00b      	b.n	80043b8 <HAL_RCC_OscConfig+0x358>
 80043a0:	4b5a      	ldr	r3, [pc, #360]	; (800450c <HAL_RCC_OscConfig+0x4ac>)
 80043a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a4:	4a59      	ldr	r2, [pc, #356]	; (800450c <HAL_RCC_OscConfig+0x4ac>)
 80043a6:	f023 0301 	bic.w	r3, r3, #1
 80043aa:	6713      	str	r3, [r2, #112]	; 0x70
 80043ac:	4b57      	ldr	r3, [pc, #348]	; (800450c <HAL_RCC_OscConfig+0x4ac>)
 80043ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b0:	4a56      	ldr	r2, [pc, #344]	; (800450c <HAL_RCC_OscConfig+0x4ac>)
 80043b2:	f023 0304 	bic.w	r3, r3, #4
 80043b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d015      	beq.n	80043ec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c0:	f7fe f8fe 	bl	80025c0 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c6:	e00a      	b.n	80043de <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043c8:	f7fe f8fa 	bl	80025c0 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e0d7      	b.n	800458e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043de:	4b4b      	ldr	r3, [pc, #300]	; (800450c <HAL_RCC_OscConfig+0x4ac>)
 80043e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0ee      	beq.n	80043c8 <HAL_RCC_OscConfig+0x368>
 80043ea:	e014      	b.n	8004416 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ec:	f7fe f8e8 	bl	80025c0 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043f2:	e00a      	b.n	800440a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043f4:	f7fe f8e4 	bl	80025c0 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004402:	4293      	cmp	r3, r2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e0c1      	b.n	800458e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800440a:	4b40      	ldr	r3, [pc, #256]	; (800450c <HAL_RCC_OscConfig+0x4ac>)
 800440c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1ee      	bne.n	80043f4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004416:	7dfb      	ldrb	r3, [r7, #23]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d105      	bne.n	8004428 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800441c:	4b3b      	ldr	r3, [pc, #236]	; (800450c <HAL_RCC_OscConfig+0x4ac>)
 800441e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004420:	4a3a      	ldr	r2, [pc, #232]	; (800450c <HAL_RCC_OscConfig+0x4ac>)
 8004422:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004426:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 80ad 	beq.w	800458c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004432:	4b36      	ldr	r3, [pc, #216]	; (800450c <HAL_RCC_OscConfig+0x4ac>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f003 030c 	and.w	r3, r3, #12
 800443a:	2b08      	cmp	r3, #8
 800443c:	d060      	beq.n	8004500 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	2b02      	cmp	r3, #2
 8004444:	d145      	bne.n	80044d2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004446:	4b33      	ldr	r3, [pc, #204]	; (8004514 <HAL_RCC_OscConfig+0x4b4>)
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444c:	f7fe f8b8 	bl	80025c0 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004454:	f7fe f8b4 	bl	80025c0 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e093      	b.n	800458e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004466:	4b29      	ldr	r3, [pc, #164]	; (800450c <HAL_RCC_OscConfig+0x4ac>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1f0      	bne.n	8004454 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	69da      	ldr	r2, [r3, #28]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004480:	019b      	lsls	r3, r3, #6
 8004482:	431a      	orrs	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004488:	085b      	lsrs	r3, r3, #1
 800448a:	3b01      	subs	r3, #1
 800448c:	041b      	lsls	r3, r3, #16
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004494:	061b      	lsls	r3, r3, #24
 8004496:	431a      	orrs	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449c:	071b      	lsls	r3, r3, #28
 800449e:	491b      	ldr	r1, [pc, #108]	; (800450c <HAL_RCC_OscConfig+0x4ac>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044a4:	4b1b      	ldr	r3, [pc, #108]	; (8004514 <HAL_RCC_OscConfig+0x4b4>)
 80044a6:	2201      	movs	r2, #1
 80044a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044aa:	f7fe f889 	bl	80025c0 <HAL_GetTick>
 80044ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044b0:	e008      	b.n	80044c4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b2:	f7fe f885 	bl	80025c0 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e064      	b.n	800458e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044c4:	4b11      	ldr	r3, [pc, #68]	; (800450c <HAL_RCC_OscConfig+0x4ac>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0f0      	beq.n	80044b2 <HAL_RCC_OscConfig+0x452>
 80044d0:	e05c      	b.n	800458c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d2:	4b10      	ldr	r3, [pc, #64]	; (8004514 <HAL_RCC_OscConfig+0x4b4>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d8:	f7fe f872 	bl	80025c0 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044e0:	f7fe f86e 	bl	80025c0 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e04d      	b.n	800458e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044f2:	4b06      	ldr	r3, [pc, #24]	; (800450c <HAL_RCC_OscConfig+0x4ac>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f0      	bne.n	80044e0 <HAL_RCC_OscConfig+0x480>
 80044fe:	e045      	b.n	800458c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d107      	bne.n	8004518 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e040      	b.n	800458e <HAL_RCC_OscConfig+0x52e>
 800450c:	40023800 	.word	0x40023800
 8004510:	40007000 	.word	0x40007000
 8004514:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004518:	4b1f      	ldr	r3, [pc, #124]	; (8004598 <HAL_RCC_OscConfig+0x538>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d030      	beq.n	8004588 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004530:	429a      	cmp	r2, r3
 8004532:	d129      	bne.n	8004588 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800453e:	429a      	cmp	r2, r3
 8004540:	d122      	bne.n	8004588 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004548:	4013      	ands	r3, r2
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800454e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004550:	4293      	cmp	r3, r2
 8004552:	d119      	bne.n	8004588 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455e:	085b      	lsrs	r3, r3, #1
 8004560:	3b01      	subs	r3, #1
 8004562:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004564:	429a      	cmp	r2, r3
 8004566:	d10f      	bne.n	8004588 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004572:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004574:	429a      	cmp	r2, r3
 8004576:	d107      	bne.n	8004588 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004582:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004584:	429a      	cmp	r2, r3
 8004586:	d001      	beq.n	800458c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e000      	b.n	800458e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3718      	adds	r7, #24
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	40023800 	.word	0x40023800

0800459c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e066      	b.n	8004680 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	7f5b      	ldrb	r3, [r3, #29]
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d105      	bne.n	80045c8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7fd fc76 	bl	8001eb4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	22ca      	movs	r2, #202	; 0xca
 80045d4:	625a      	str	r2, [r3, #36]	; 0x24
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2253      	movs	r2, #83	; 0x53
 80045dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f998 	bl	8004914 <RTC_EnterInitMode>
 80045e4:	4603      	mov	r3, r0
 80045e6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80045e8:	7bfb      	ldrb	r3, [r7, #15]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d12c      	bne.n	8004648 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6812      	ldr	r2, [r2, #0]
 80045f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80045fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004600:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6899      	ldr	r1, [r3, #8]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	431a      	orrs	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	68d2      	ldr	r2, [r2, #12]
 8004628:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6919      	ldr	r1, [r3, #16]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	041a      	lsls	r2, r3, #16
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f99f 	bl	8004982 <RTC_ExitInitMode>
 8004644:	4603      	mov	r3, r0
 8004646:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004648:	7bfb      	ldrb	r3, [r7, #15]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d113      	bne.n	8004676 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800465c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	699a      	ldr	r2, [r3, #24]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	22ff      	movs	r2, #255	; 0xff
 800467c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800467e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004688:	b590      	push	{r4, r7, lr}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004694:	2300      	movs	r3, #0
 8004696:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	7f1b      	ldrb	r3, [r3, #28]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_RTC_SetTime+0x1c>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e087      	b.n	80047b4 <HAL_RTC_SetTime+0x12c>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2201      	movs	r2, #1
 80046a8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2202      	movs	r2, #2
 80046ae:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d126      	bne.n	8004704 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d102      	bne.n	80046ca <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2200      	movs	r2, #0
 80046c8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 f97c 	bl	80049cc <RTC_ByteToBcd2>
 80046d4:	4603      	mov	r3, r0
 80046d6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	785b      	ldrb	r3, [r3, #1]
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 f975 	bl	80049cc <RTC_ByteToBcd2>
 80046e2:	4603      	mov	r3, r0
 80046e4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80046e6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	789b      	ldrb	r3, [r3, #2]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 f96d 	bl	80049cc <RTC_ByteToBcd2>
 80046f2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80046f4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	78db      	ldrb	r3, [r3, #3]
 80046fc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80046fe:	4313      	orrs	r3, r2
 8004700:	617b      	str	r3, [r7, #20]
 8004702:	e018      	b.n	8004736 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800470e:	2b00      	cmp	r3, #0
 8004710:	d102      	bne.n	8004718 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2200      	movs	r2, #0
 8004716:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	785b      	ldrb	r3, [r3, #1]
 8004722:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004724:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800472a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	78db      	ldrb	r3, [r3, #3]
 8004730:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004732:	4313      	orrs	r3, r2
 8004734:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	22ca      	movs	r2, #202	; 0xca
 800473c:	625a      	str	r2, [r3, #36]	; 0x24
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2253      	movs	r2, #83	; 0x53
 8004744:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 f8e4 	bl	8004914 <RTC_EnterInitMode>
 800474c:	4603      	mov	r3, r0
 800474e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004750:	7cfb      	ldrb	r3, [r7, #19]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d120      	bne.n	8004798 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004760:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004764:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004774:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6899      	ldr	r1, [r3, #8]
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	68da      	ldr	r2, [r3, #12]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	431a      	orrs	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 f8f7 	bl	8004982 <RTC_ExitInitMode>
 8004794:	4603      	mov	r3, r0
 8004796:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004798:	7cfb      	ldrb	r3, [r7, #19]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d102      	bne.n	80047a4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2201      	movs	r2, #1
 80047a2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	22ff      	movs	r2, #255	; 0xff
 80047aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	771a      	strb	r2, [r3, #28]

  return status;
 80047b2:	7cfb      	ldrb	r3, [r7, #19]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	371c      	adds	r7, #28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd90      	pop	{r4, r7, pc}

080047bc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80047bc:	b590      	push	{r4, r7, lr}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	7f1b      	ldrb	r3, [r3, #28]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d101      	bne.n	80047d8 <HAL_RTC_SetDate+0x1c>
 80047d4:	2302      	movs	r3, #2
 80047d6:	e071      	b.n	80048bc <HAL_RTC_SetDate+0x100>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2201      	movs	r2, #1
 80047dc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2202      	movs	r2, #2
 80047e2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10e      	bne.n	8004808 <HAL_RTC_SetDate+0x4c>
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	785b      	ldrb	r3, [r3, #1]
 80047ee:	f003 0310 	and.w	r3, r3, #16
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d008      	beq.n	8004808 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	785b      	ldrb	r3, [r3, #1]
 80047fa:	f023 0310 	bic.w	r3, r3, #16
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	330a      	adds	r3, #10
 8004802:	b2da      	uxtb	r2, r3
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d11c      	bne.n	8004848 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	78db      	ldrb	r3, [r3, #3]
 8004812:	4618      	mov	r0, r3
 8004814:	f000 f8da 	bl	80049cc <RTC_ByteToBcd2>
 8004818:	4603      	mov	r3, r0
 800481a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	785b      	ldrb	r3, [r3, #1]
 8004820:	4618      	mov	r0, r3
 8004822:	f000 f8d3 	bl	80049cc <RTC_ByteToBcd2>
 8004826:	4603      	mov	r3, r0
 8004828:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800482a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	789b      	ldrb	r3, [r3, #2]
 8004830:	4618      	mov	r0, r3
 8004832:	f000 f8cb 	bl	80049cc <RTC_ByteToBcd2>
 8004836:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004838:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004842:	4313      	orrs	r3, r2
 8004844:	617b      	str	r3, [r7, #20]
 8004846:	e00e      	b.n	8004866 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	78db      	ldrb	r3, [r3, #3]
 800484c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	785b      	ldrb	r3, [r3, #1]
 8004852:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004854:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800485a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004862:	4313      	orrs	r3, r2
 8004864:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	22ca      	movs	r2, #202	; 0xca
 800486c:	625a      	str	r2, [r3, #36]	; 0x24
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2253      	movs	r2, #83	; 0x53
 8004874:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f000 f84c 	bl	8004914 <RTC_EnterInitMode>
 800487c:	4603      	mov	r3, r0
 800487e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004880:	7cfb      	ldrb	r3, [r7, #19]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10c      	bne.n	80048a0 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004890:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004894:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 f873 	bl	8004982 <RTC_ExitInitMode>
 800489c:	4603      	mov	r3, r0
 800489e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80048a0:	7cfb      	ldrb	r3, [r7, #19]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d102      	bne.n	80048ac <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2201      	movs	r2, #1
 80048aa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	22ff      	movs	r2, #255	; 0xff
 80048b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	771a      	strb	r2, [r3, #28]

  return status;
 80048ba:	7cfb      	ldrb	r3, [r7, #19]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	371c      	adds	r7, #28
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd90      	pop	{r4, r7, pc}

080048c4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80048de:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048e0:	f7fd fe6e 	bl	80025c0 <HAL_GetTick>
 80048e4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80048e6:	e009      	b.n	80048fc <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80048e8:	f7fd fe6a 	bl	80025c0 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048f6:	d901      	bls.n	80048fc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e007      	b.n	800490c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	f003 0320 	and.w	r3, r3, #32
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0ee      	beq.n	80048e8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800491c:	2300      	movs	r3, #0
 800491e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004920:	2300      	movs	r3, #0
 8004922:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492e:	2b00      	cmp	r3, #0
 8004930:	d122      	bne.n	8004978 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68da      	ldr	r2, [r3, #12]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004940:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004942:	f7fd fe3d 	bl	80025c0 <HAL_GetTick>
 8004946:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004948:	e00c      	b.n	8004964 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800494a:	f7fd fe39 	bl	80025c0 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004958:	d904      	bls.n	8004964 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2204      	movs	r2, #4
 800495e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496e:	2b00      	cmp	r3, #0
 8004970:	d102      	bne.n	8004978 <RTC_EnterInitMode+0x64>
 8004972:	7bfb      	ldrb	r3, [r7, #15]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d1e8      	bne.n	800494a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004978:	7bfb      	ldrb	r3, [r7, #15]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b084      	sub	sp, #16
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800498a:	2300      	movs	r3, #0
 800498c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68da      	ldr	r2, [r3, #12]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800499c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f003 0320 	and.w	r3, r3, #32
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10a      	bne.n	80049c2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f7ff ff89 	bl	80048c4 <HAL_RTC_WaitForSynchro>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d004      	beq.n	80049c2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2204      	movs	r2, #4
 80049bc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80049c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	4603      	mov	r3, r0
 80049d4:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80049da:	e005      	b.n	80049e8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
 80049de:	3301      	adds	r3, #1
 80049e0:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80049e2:	79fb      	ldrb	r3, [r7, #7]
 80049e4:	3b0a      	subs	r3, #10
 80049e6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80049e8:	79fb      	ldrb	r3, [r7, #7]
 80049ea:	2b09      	cmp	r3, #9
 80049ec:	d8f6      	bhi.n	80049dc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80049ee:	7bfb      	ldrb	r3, [r7, #15]
 80049f0:	011b      	lsls	r3, r3, #4
 80049f2:	b2da      	uxtb	r2, r3
 80049f4:	79fb      	ldrb	r3, [r7, #7]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	b2db      	uxtb	r3, r3
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b086      	sub	sp, #24
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	60f8      	str	r0, [r7, #12]
 8004a0e:	60b9      	str	r1, [r7, #8]
 8004a10:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8004a12:	2300      	movs	r3, #0
 8004a14:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	7f1b      	ldrb	r3, [r3, #28]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d101      	bne.n	8004a22 <HAL_RTCEx_SetWakeUpTimer+0x1c>
 8004a1e:	2302      	movs	r3, #2
 8004a20:	e08a      	b.n	8004b38 <HAL_RTCEx_SetWakeUpTimer+0x132>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2201      	movs	r2, #1
 8004a26:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	22ca      	movs	r2, #202	; 0xca
 8004a34:	625a      	str	r2, [r3, #36]	; 0x24
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2253      	movs	r2, #83	; 0x53
 8004a3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d01e      	beq.n	8004a8a <HAL_RTCEx_SetWakeUpTimer+0x84>
  {
    tickstart = HAL_GetTick();
 8004a4c:	f7fd fdb8 	bl	80025c0 <HAL_GetTick>
 8004a50:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8004a52:	e013      	b.n	8004a7c <HAL_RTCEx_SetWakeUpTimer+0x76>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a54:	f7fd fdb4 	bl	80025c0 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a62:	d90b      	bls.n	8004a7c <HAL_RTCEx_SetWakeUpTimer+0x76>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	22ff      	movs	r2, #255	; 0xff
 8004a6a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2203      	movs	r2, #3
 8004a70:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e05d      	b.n	8004b38 <HAL_RTCEx_SetWakeUpTimer+0x132>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f003 0304 	and.w	r3, r3, #4
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1e4      	bne.n	8004a54 <HAL_RTCEx_SetWakeUpTimer+0x4e>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689a      	ldr	r2, [r3, #8]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a98:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004aaa:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004aac:	f7fd fd88 	bl	80025c0 <HAL_GetTick>
 8004ab0:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004ab2:	e013      	b.n	8004adc <HAL_RTCEx_SetWakeUpTimer+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004ab4:	f7fd fd84 	bl	80025c0 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ac2:	d90b      	bls.n	8004adc <HAL_RTCEx_SetWakeUpTimer+0xd6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	22ff      	movs	r2, #255	; 0xff
 8004aca:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2203      	movs	r2, #3
 8004ad0:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e02d      	b.n	8004b38 <HAL_RTCEx_SetWakeUpTimer+0x132>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f003 0304 	and.w	r3, r3, #4
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0e4      	beq.n	8004ab4 <HAL_RTCEx_SetWakeUpTimer+0xae>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0207 	bic.w	r2, r2, #7
 8004af8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6899      	ldr	r1, [r3, #8]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b20:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	22ff      	movs	r2, #255	; 0xff
 8004b28:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e041      	b.n	8004bd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d106      	bne.n	8004b6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7fd fa50 	bl	800200c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2202      	movs	r2, #2
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	4610      	mov	r0, r2
 8004b80:	f000 ff7e 	bl	8005a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3708      	adds	r7, #8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b082      	sub	sp, #8
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e041      	b.n	8004c74 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d106      	bne.n	8004c0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 f839 	bl	8004c7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2202      	movs	r2, #2
 8004c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	3304      	adds	r3, #4
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	f000 ff2f 	bl	8005a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3708      	adds	r7, #8
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d109      	bne.n	8004cb4 <HAL_TIM_PWM_Start+0x24>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	bf14      	ite	ne
 8004cac:	2301      	movne	r3, #1
 8004cae:	2300      	moveq	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	e022      	b.n	8004cfa <HAL_TIM_PWM_Start+0x6a>
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	2b04      	cmp	r3, #4
 8004cb8:	d109      	bne.n	8004cce <HAL_TIM_PWM_Start+0x3e>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	bf14      	ite	ne
 8004cc6:	2301      	movne	r3, #1
 8004cc8:	2300      	moveq	r3, #0
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	e015      	b.n	8004cfa <HAL_TIM_PWM_Start+0x6a>
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d109      	bne.n	8004ce8 <HAL_TIM_PWM_Start+0x58>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	bf14      	ite	ne
 8004ce0:	2301      	movne	r3, #1
 8004ce2:	2300      	moveq	r3, #0
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	e008      	b.n	8004cfa <HAL_TIM_PWM_Start+0x6a>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	bf14      	ite	ne
 8004cf4:	2301      	movne	r3, #1
 8004cf6:	2300      	moveq	r3, #0
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e07c      	b.n	8004dfc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d104      	bne.n	8004d12 <HAL_TIM_PWM_Start+0x82>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d10:	e013      	b.n	8004d3a <HAL_TIM_PWM_Start+0xaa>
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	2b04      	cmp	r3, #4
 8004d16:	d104      	bne.n	8004d22 <HAL_TIM_PWM_Start+0x92>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d20:	e00b      	b.n	8004d3a <HAL_TIM_PWM_Start+0xaa>
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d104      	bne.n	8004d32 <HAL_TIM_PWM_Start+0xa2>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d30:	e003      	b.n	8004d3a <HAL_TIM_PWM_Start+0xaa>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2202      	movs	r2, #2
 8004d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	6839      	ldr	r1, [r7, #0]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f001 fb42 	bl	80063cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a2d      	ldr	r2, [pc, #180]	; (8004e04 <HAL_TIM_PWM_Start+0x174>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d004      	beq.n	8004d5c <HAL_TIM_PWM_Start+0xcc>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a2c      	ldr	r2, [pc, #176]	; (8004e08 <HAL_TIM_PWM_Start+0x178>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d101      	bne.n	8004d60 <HAL_TIM_PWM_Start+0xd0>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e000      	b.n	8004d62 <HAL_TIM_PWM_Start+0xd2>
 8004d60:	2300      	movs	r3, #0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d007      	beq.n	8004d76 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a22      	ldr	r2, [pc, #136]	; (8004e04 <HAL_TIM_PWM_Start+0x174>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d022      	beq.n	8004dc6 <HAL_TIM_PWM_Start+0x136>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d88:	d01d      	beq.n	8004dc6 <HAL_TIM_PWM_Start+0x136>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a1f      	ldr	r2, [pc, #124]	; (8004e0c <HAL_TIM_PWM_Start+0x17c>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d018      	beq.n	8004dc6 <HAL_TIM_PWM_Start+0x136>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a1d      	ldr	r2, [pc, #116]	; (8004e10 <HAL_TIM_PWM_Start+0x180>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d013      	beq.n	8004dc6 <HAL_TIM_PWM_Start+0x136>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a1c      	ldr	r2, [pc, #112]	; (8004e14 <HAL_TIM_PWM_Start+0x184>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d00e      	beq.n	8004dc6 <HAL_TIM_PWM_Start+0x136>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a16      	ldr	r2, [pc, #88]	; (8004e08 <HAL_TIM_PWM_Start+0x178>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d009      	beq.n	8004dc6 <HAL_TIM_PWM_Start+0x136>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a18      	ldr	r2, [pc, #96]	; (8004e18 <HAL_TIM_PWM_Start+0x188>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d004      	beq.n	8004dc6 <HAL_TIM_PWM_Start+0x136>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a16      	ldr	r2, [pc, #88]	; (8004e1c <HAL_TIM_PWM_Start+0x18c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d111      	bne.n	8004dea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f003 0307 	and.w	r3, r3, #7
 8004dd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2b06      	cmp	r3, #6
 8004dd6:	d010      	beq.n	8004dfa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0201 	orr.w	r2, r2, #1
 8004de6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004de8:	e007      	b.n	8004dfa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f042 0201 	orr.w	r2, r2, #1
 8004df8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	40010000 	.word	0x40010000
 8004e08:	40010400 	.word	0x40010400
 8004e0c:	40000400 	.word	0x40000400
 8004e10:	40000800 	.word	0x40000800
 8004e14:	40000c00 	.word	0x40000c00
 8004e18:	40014000 	.word	0x40014000
 8004e1c:	40001800 	.word	0x40001800

08004e20 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e041      	b.n	8004eb6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d106      	bne.n	8004e4c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7fd f85e 	bl	8001f08 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	4610      	mov	r0, r2
 8004e60:	f000 fe0e 	bl	8005a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
	...

08004ec0 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d104      	bne.n	8004eda <HAL_TIM_IC_Start+0x1a>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	e013      	b.n	8004f02 <HAL_TIM_IC_Start+0x42>
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b04      	cmp	r3, #4
 8004ede:	d104      	bne.n	8004eea <HAL_TIM_IC_Start+0x2a>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	e00b      	b.n	8004f02 <HAL_TIM_IC_Start+0x42>
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b08      	cmp	r3, #8
 8004eee:	d104      	bne.n	8004efa <HAL_TIM_IC_Start+0x3a>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	e003      	b.n	8004f02 <HAL_TIM_IC_Start+0x42>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d104      	bne.n	8004f14 <HAL_TIM_IC_Start+0x54>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	e013      	b.n	8004f3c <HAL_TIM_IC_Start+0x7c>
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d104      	bne.n	8004f24 <HAL_TIM_IC_Start+0x64>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	e00b      	b.n	8004f3c <HAL_TIM_IC_Start+0x7c>
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	2b08      	cmp	r3, #8
 8004f28:	d104      	bne.n	8004f34 <HAL_TIM_IC_Start+0x74>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	e003      	b.n	8004f3c <HAL_TIM_IC_Start+0x7c>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f3e:	7bfb      	ldrb	r3, [r7, #15]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d102      	bne.n	8004f4a <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f44:	7bbb      	ldrb	r3, [r7, #14]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d001      	beq.n	8004f4e <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e081      	b.n	8005052 <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d104      	bne.n	8004f5e <HAL_TIM_IC_Start+0x9e>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f5c:	e013      	b.n	8004f86 <HAL_TIM_IC_Start+0xc6>
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d104      	bne.n	8004f6e <HAL_TIM_IC_Start+0xae>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f6c:	e00b      	b.n	8004f86 <HAL_TIM_IC_Start+0xc6>
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d104      	bne.n	8004f7e <HAL_TIM_IC_Start+0xbe>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f7c:	e003      	b.n	8004f86 <HAL_TIM_IC_Start+0xc6>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2202      	movs	r2, #2
 8004f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d104      	bne.n	8004f96 <HAL_TIM_IC_Start+0xd6>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f94:	e013      	b.n	8004fbe <HAL_TIM_IC_Start+0xfe>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b04      	cmp	r3, #4
 8004f9a:	d104      	bne.n	8004fa6 <HAL_TIM_IC_Start+0xe6>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fa4:	e00b      	b.n	8004fbe <HAL_TIM_IC_Start+0xfe>
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d104      	bne.n	8004fb6 <HAL_TIM_IC_Start+0xf6>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fb4:	e003      	b.n	8004fbe <HAL_TIM_IC_Start+0xfe>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2202      	movs	r2, #2
 8004fba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	6839      	ldr	r1, [r7, #0]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f001 fa00 	bl	80063cc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a22      	ldr	r2, [pc, #136]	; (800505c <HAL_TIM_IC_Start+0x19c>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d022      	beq.n	800501c <HAL_TIM_IC_Start+0x15c>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fde:	d01d      	beq.n	800501c <HAL_TIM_IC_Start+0x15c>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a1e      	ldr	r2, [pc, #120]	; (8005060 <HAL_TIM_IC_Start+0x1a0>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d018      	beq.n	800501c <HAL_TIM_IC_Start+0x15c>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a1d      	ldr	r2, [pc, #116]	; (8005064 <HAL_TIM_IC_Start+0x1a4>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d013      	beq.n	800501c <HAL_TIM_IC_Start+0x15c>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a1b      	ldr	r2, [pc, #108]	; (8005068 <HAL_TIM_IC_Start+0x1a8>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d00e      	beq.n	800501c <HAL_TIM_IC_Start+0x15c>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a1a      	ldr	r2, [pc, #104]	; (800506c <HAL_TIM_IC_Start+0x1ac>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d009      	beq.n	800501c <HAL_TIM_IC_Start+0x15c>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a18      	ldr	r2, [pc, #96]	; (8005070 <HAL_TIM_IC_Start+0x1b0>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d004      	beq.n	800501c <HAL_TIM_IC_Start+0x15c>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a17      	ldr	r2, [pc, #92]	; (8005074 <HAL_TIM_IC_Start+0x1b4>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d111      	bne.n	8005040 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f003 0307 	and.w	r3, r3, #7
 8005026:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2b06      	cmp	r3, #6
 800502c:	d010      	beq.n	8005050 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f042 0201 	orr.w	r2, r2, #1
 800503c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800503e:	e007      	b.n	8005050 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f042 0201 	orr.w	r2, r2, #1
 800504e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	40010000 	.word	0x40010000
 8005060:	40000400 	.word	0x40000400
 8005064:	40000800 	.word	0x40000800
 8005068:	40000c00 	.word	0x40000c00
 800506c:	40010400 	.word	0x40010400
 8005070:	40014000 	.word	0x40014000
 8005074:	40001800 	.word	0x40001800

08005078 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005082:	2300      	movs	r3, #0
 8005084:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d104      	bne.n	8005096 <HAL_TIM_IC_Start_IT+0x1e>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005092:	b2db      	uxtb	r3, r3
 8005094:	e013      	b.n	80050be <HAL_TIM_IC_Start_IT+0x46>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b04      	cmp	r3, #4
 800509a:	d104      	bne.n	80050a6 <HAL_TIM_IC_Start_IT+0x2e>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	e00b      	b.n	80050be <HAL_TIM_IC_Start_IT+0x46>
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	d104      	bne.n	80050b6 <HAL_TIM_IC_Start_IT+0x3e>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	e003      	b.n	80050be <HAL_TIM_IC_Start_IT+0x46>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d104      	bne.n	80050d0 <HAL_TIM_IC_Start_IT+0x58>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	e013      	b.n	80050f8 <HAL_TIM_IC_Start_IT+0x80>
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	2b04      	cmp	r3, #4
 80050d4:	d104      	bne.n	80050e0 <HAL_TIM_IC_Start_IT+0x68>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	e00b      	b.n	80050f8 <HAL_TIM_IC_Start_IT+0x80>
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	2b08      	cmp	r3, #8
 80050e4:	d104      	bne.n	80050f0 <HAL_TIM_IC_Start_IT+0x78>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	e003      	b.n	80050f8 <HAL_TIM_IC_Start_IT+0x80>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80050fa:	7bbb      	ldrb	r3, [r7, #14]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d102      	bne.n	8005106 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005100:	7b7b      	ldrb	r3, [r7, #13]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d001      	beq.n	800510a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e0cc      	b.n	80052a4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d104      	bne.n	800511a <HAL_TIM_IC_Start_IT+0xa2>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2202      	movs	r2, #2
 8005114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005118:	e013      	b.n	8005142 <HAL_TIM_IC_Start_IT+0xca>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b04      	cmp	r3, #4
 800511e:	d104      	bne.n	800512a <HAL_TIM_IC_Start_IT+0xb2>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005128:	e00b      	b.n	8005142 <HAL_TIM_IC_Start_IT+0xca>
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2b08      	cmp	r3, #8
 800512e:	d104      	bne.n	800513a <HAL_TIM_IC_Start_IT+0xc2>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2202      	movs	r2, #2
 8005134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005138:	e003      	b.n	8005142 <HAL_TIM_IC_Start_IT+0xca>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2202      	movs	r2, #2
 800513e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d104      	bne.n	8005152 <HAL_TIM_IC_Start_IT+0xda>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005150:	e013      	b.n	800517a <HAL_TIM_IC_Start_IT+0x102>
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b04      	cmp	r3, #4
 8005156:	d104      	bne.n	8005162 <HAL_TIM_IC_Start_IT+0xea>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2202      	movs	r2, #2
 800515c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005160:	e00b      	b.n	800517a <HAL_TIM_IC_Start_IT+0x102>
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2b08      	cmp	r3, #8
 8005166:	d104      	bne.n	8005172 <HAL_TIM_IC_Start_IT+0xfa>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2202      	movs	r2, #2
 800516c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005170:	e003      	b.n	800517a <HAL_TIM_IC_Start_IT+0x102>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2202      	movs	r2, #2
 8005176:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b0c      	cmp	r3, #12
 800517e:	d841      	bhi.n	8005204 <HAL_TIM_IC_Start_IT+0x18c>
 8005180:	a201      	add	r2, pc, #4	; (adr r2, 8005188 <HAL_TIM_IC_Start_IT+0x110>)
 8005182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005186:	bf00      	nop
 8005188:	080051bd 	.word	0x080051bd
 800518c:	08005205 	.word	0x08005205
 8005190:	08005205 	.word	0x08005205
 8005194:	08005205 	.word	0x08005205
 8005198:	080051cf 	.word	0x080051cf
 800519c:	08005205 	.word	0x08005205
 80051a0:	08005205 	.word	0x08005205
 80051a4:	08005205 	.word	0x08005205
 80051a8:	080051e1 	.word	0x080051e1
 80051ac:	08005205 	.word	0x08005205
 80051b0:	08005205 	.word	0x08005205
 80051b4:	08005205 	.word	0x08005205
 80051b8:	080051f3 	.word	0x080051f3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68da      	ldr	r2, [r3, #12]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0202 	orr.w	r2, r2, #2
 80051ca:	60da      	str	r2, [r3, #12]
      break;
 80051cc:	e01d      	b.n	800520a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68da      	ldr	r2, [r3, #12]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f042 0204 	orr.w	r2, r2, #4
 80051dc:	60da      	str	r2, [r3, #12]
      break;
 80051de:	e014      	b.n	800520a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68da      	ldr	r2, [r3, #12]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f042 0208 	orr.w	r2, r2, #8
 80051ee:	60da      	str	r2, [r3, #12]
      break;
 80051f0:	e00b      	b.n	800520a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68da      	ldr	r2, [r3, #12]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f042 0210 	orr.w	r2, r2, #16
 8005200:	60da      	str	r2, [r3, #12]
      break;
 8005202:	e002      	b.n	800520a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	73fb      	strb	r3, [r7, #15]
      break;
 8005208:	bf00      	nop
  }

  if (status == HAL_OK)
 800520a:	7bfb      	ldrb	r3, [r7, #15]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d148      	bne.n	80052a2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2201      	movs	r2, #1
 8005216:	6839      	ldr	r1, [r7, #0]
 8005218:	4618      	mov	r0, r3
 800521a:	f001 f8d7 	bl	80063cc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a22      	ldr	r2, [pc, #136]	; (80052ac <HAL_TIM_IC_Start_IT+0x234>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d022      	beq.n	800526e <HAL_TIM_IC_Start_IT+0x1f6>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005230:	d01d      	beq.n	800526e <HAL_TIM_IC_Start_IT+0x1f6>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a1e      	ldr	r2, [pc, #120]	; (80052b0 <HAL_TIM_IC_Start_IT+0x238>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d018      	beq.n	800526e <HAL_TIM_IC_Start_IT+0x1f6>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a1c      	ldr	r2, [pc, #112]	; (80052b4 <HAL_TIM_IC_Start_IT+0x23c>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d013      	beq.n	800526e <HAL_TIM_IC_Start_IT+0x1f6>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a1b      	ldr	r2, [pc, #108]	; (80052b8 <HAL_TIM_IC_Start_IT+0x240>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d00e      	beq.n	800526e <HAL_TIM_IC_Start_IT+0x1f6>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a19      	ldr	r2, [pc, #100]	; (80052bc <HAL_TIM_IC_Start_IT+0x244>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d009      	beq.n	800526e <HAL_TIM_IC_Start_IT+0x1f6>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a18      	ldr	r2, [pc, #96]	; (80052c0 <HAL_TIM_IC_Start_IT+0x248>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d004      	beq.n	800526e <HAL_TIM_IC_Start_IT+0x1f6>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a16      	ldr	r2, [pc, #88]	; (80052c4 <HAL_TIM_IC_Start_IT+0x24c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d111      	bne.n	8005292 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f003 0307 	and.w	r3, r3, #7
 8005278:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	2b06      	cmp	r3, #6
 800527e:	d010      	beq.n	80052a2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 0201 	orr.w	r2, r2, #1
 800528e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005290:	e007      	b.n	80052a2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f042 0201 	orr.w	r2, r2, #1
 80052a0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80052a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	40010000 	.word	0x40010000
 80052b0:	40000400 	.word	0x40000400
 80052b4:	40000800 	.word	0x40000800
 80052b8:	40000c00 	.word	0x40000c00
 80052bc:	40010400 	.word	0x40010400
 80052c0:	40014000 	.word	0x40014000
 80052c4:	40001800 	.word	0x40001800

080052c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d122      	bne.n	8005324 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d11b      	bne.n	8005324 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f06f 0202 	mvn.w	r2, #2
 80052f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	f003 0303 	and.w	r3, r3, #3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7fb fb3c 	bl	8000988 <HAL_TIM_IC_CaptureCallback>
 8005310:	e005      	b.n	800531e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 fb96 	bl	8005a44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 fb9d 	bl	8005a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	f003 0304 	and.w	r3, r3, #4
 800532e:	2b04      	cmp	r3, #4
 8005330:	d122      	bne.n	8005378 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f003 0304 	and.w	r3, r3, #4
 800533c:	2b04      	cmp	r3, #4
 800533e:	d11b      	bne.n	8005378 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f06f 0204 	mvn.w	r2, #4
 8005348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2202      	movs	r2, #2
 800534e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7fb fb12 	bl	8000988 <HAL_TIM_IC_CaptureCallback>
 8005364:	e005      	b.n	8005372 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 fb6c 	bl	8005a44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 fb73 	bl	8005a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	f003 0308 	and.w	r3, r3, #8
 8005382:	2b08      	cmp	r3, #8
 8005384:	d122      	bne.n	80053cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f003 0308 	and.w	r3, r3, #8
 8005390:	2b08      	cmp	r3, #8
 8005392:	d11b      	bne.n	80053cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f06f 0208 	mvn.w	r2, #8
 800539c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2204      	movs	r2, #4
 80053a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	f003 0303 	and.w	r3, r3, #3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d003      	beq.n	80053ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7fb fae8 	bl	8000988 <HAL_TIM_IC_CaptureCallback>
 80053b8:	e005      	b.n	80053c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 fb42 	bl	8005a44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 fb49 	bl	8005a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	f003 0310 	and.w	r3, r3, #16
 80053d6:	2b10      	cmp	r3, #16
 80053d8:	d122      	bne.n	8005420 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f003 0310 	and.w	r3, r3, #16
 80053e4:	2b10      	cmp	r3, #16
 80053e6:	d11b      	bne.n	8005420 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f06f 0210 	mvn.w	r2, #16
 80053f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2208      	movs	r2, #8
 80053f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	69db      	ldr	r3, [r3, #28]
 80053fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005402:	2b00      	cmp	r3, #0
 8005404:	d003      	beq.n	800540e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7fb fabe 	bl	8000988 <HAL_TIM_IC_CaptureCallback>
 800540c:	e005      	b.n	800541a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 fb18 	bl	8005a44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 fb1f 	bl	8005a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b01      	cmp	r3, #1
 800542c:	d10e      	bne.n	800544c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	2b01      	cmp	r3, #1
 800543a:	d107      	bne.n	800544c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f06f 0201 	mvn.w	r2, #1
 8005444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 faf2 	bl	8005a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005456:	2b80      	cmp	r3, #128	; 0x80
 8005458:	d10e      	bne.n	8005478 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005464:	2b80      	cmp	r3, #128	; 0x80
 8005466:	d107      	bne.n	8005478 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f001 f856 	bl	8006524 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005482:	2b40      	cmp	r3, #64	; 0x40
 8005484:	d10e      	bne.n	80054a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005490:	2b40      	cmp	r3, #64	; 0x40
 8005492:	d107      	bne.n	80054a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800549c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 fae4 	bl	8005a6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	f003 0320 	and.w	r3, r3, #32
 80054ae:	2b20      	cmp	r3, #32
 80054b0:	d10e      	bne.n	80054d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	f003 0320 	and.w	r3, r3, #32
 80054bc:	2b20      	cmp	r3, #32
 80054be:	d107      	bne.n	80054d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f06f 0220 	mvn.w	r2, #32
 80054c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f001 f820 	bl	8006510 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054d0:	bf00      	nop
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054e4:	2300      	movs	r3, #0
 80054e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d101      	bne.n	80054f6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80054f2:	2302      	movs	r3, #2
 80054f4:	e088      	b.n	8005608 <HAL_TIM_IC_ConfigChannel+0x130>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d11b      	bne.n	800553c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6818      	ldr	r0, [r3, #0]
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	6819      	ldr	r1, [r3, #0]
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f000 fd96 	bl	8006044 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	699a      	ldr	r2, [r3, #24]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f022 020c 	bic.w	r2, r2, #12
 8005526:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6999      	ldr	r1, [r3, #24]
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	689a      	ldr	r2, [r3, #8]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	430a      	orrs	r2, r1
 8005538:	619a      	str	r2, [r3, #24]
 800553a:	e060      	b.n	80055fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b04      	cmp	r3, #4
 8005540:	d11c      	bne.n	800557c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6818      	ldr	r0, [r3, #0]
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	6819      	ldr	r1, [r3, #0]
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f000 fe1a 	bl	800618a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	699a      	ldr	r2, [r3, #24]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005564:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6999      	ldr	r1, [r3, #24]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	021a      	lsls	r2, r3, #8
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	619a      	str	r2, [r3, #24]
 800557a:	e040      	b.n	80055fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b08      	cmp	r3, #8
 8005580:	d11b      	bne.n	80055ba <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6818      	ldr	r0, [r3, #0]
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	6819      	ldr	r1, [r3, #0]
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	f000 fe67 	bl	8006264 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	69da      	ldr	r2, [r3, #28]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 020c 	bic.w	r2, r2, #12
 80055a4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	69d9      	ldr	r1, [r3, #28]
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	689a      	ldr	r2, [r3, #8]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	61da      	str	r2, [r3, #28]
 80055b8:	e021      	b.n	80055fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b0c      	cmp	r3, #12
 80055be:	d11c      	bne.n	80055fa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6818      	ldr	r0, [r3, #0]
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	6819      	ldr	r1, [r3, #0]
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f000 fe84 	bl	80062dc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	69da      	ldr	r2, [r3, #28]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80055e2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	69d9      	ldr	r1, [r3, #28]
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	021a      	lsls	r2, r3, #8
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	430a      	orrs	r2, r1
 80055f6:	61da      	str	r2, [r3, #28]
 80055f8:	e001      	b.n	80055fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005606:	7dfb      	ldrb	r3, [r7, #23]
}
 8005608:	4618      	mov	r0, r3
 800560a:	3718      	adds	r7, #24
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800561c:	2300      	movs	r3, #0
 800561e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005626:	2b01      	cmp	r3, #1
 8005628:	d101      	bne.n	800562e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800562a:	2302      	movs	r3, #2
 800562c:	e0ae      	b.n	800578c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b0c      	cmp	r3, #12
 800563a:	f200 809f 	bhi.w	800577c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800563e:	a201      	add	r2, pc, #4	; (adr r2, 8005644 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005644:	08005679 	.word	0x08005679
 8005648:	0800577d 	.word	0x0800577d
 800564c:	0800577d 	.word	0x0800577d
 8005650:	0800577d 	.word	0x0800577d
 8005654:	080056b9 	.word	0x080056b9
 8005658:	0800577d 	.word	0x0800577d
 800565c:	0800577d 	.word	0x0800577d
 8005660:	0800577d 	.word	0x0800577d
 8005664:	080056fb 	.word	0x080056fb
 8005668:	0800577d 	.word	0x0800577d
 800566c:	0800577d 	.word	0x0800577d
 8005670:	0800577d 	.word	0x0800577d
 8005674:	0800573b 	.word	0x0800573b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68b9      	ldr	r1, [r7, #8]
 800567e:	4618      	mov	r0, r3
 8005680:	f000 fa9e 	bl	8005bc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699a      	ldr	r2, [r3, #24]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f042 0208 	orr.w	r2, r2, #8
 8005692:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	699a      	ldr	r2, [r3, #24]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f022 0204 	bic.w	r2, r2, #4
 80056a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6999      	ldr	r1, [r3, #24]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	691a      	ldr	r2, [r3, #16]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	619a      	str	r2, [r3, #24]
      break;
 80056b6:	e064      	b.n	8005782 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68b9      	ldr	r1, [r7, #8]
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 faee 	bl	8005ca0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	699a      	ldr	r2, [r3, #24]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	699a      	ldr	r2, [r3, #24]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6999      	ldr	r1, [r3, #24]
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	021a      	lsls	r2, r3, #8
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	430a      	orrs	r2, r1
 80056f6:	619a      	str	r2, [r3, #24]
      break;
 80056f8:	e043      	b.n	8005782 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68b9      	ldr	r1, [r7, #8]
 8005700:	4618      	mov	r0, r3
 8005702:	f000 fb43 	bl	8005d8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	69da      	ldr	r2, [r3, #28]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f042 0208 	orr.w	r2, r2, #8
 8005714:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69da      	ldr	r2, [r3, #28]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 0204 	bic.w	r2, r2, #4
 8005724:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	69d9      	ldr	r1, [r3, #28]
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	691a      	ldr	r2, [r3, #16]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	430a      	orrs	r2, r1
 8005736:	61da      	str	r2, [r3, #28]
      break;
 8005738:	e023      	b.n	8005782 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68b9      	ldr	r1, [r7, #8]
 8005740:	4618      	mov	r0, r3
 8005742:	f000 fb97 	bl	8005e74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	69da      	ldr	r2, [r3, #28]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005754:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	69da      	ldr	r2, [r3, #28]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005764:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	69d9      	ldr	r1, [r3, #28]
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	021a      	lsls	r2, r3, #8
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	430a      	orrs	r2, r1
 8005778:	61da      	str	r2, [r3, #28]
      break;
 800577a:	e002      	b.n	8005782 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	75fb      	strb	r3, [r7, #23]
      break;
 8005780:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800578a:	7dfb      	ldrb	r3, [r7, #23]
}
 800578c:	4618      	mov	r0, r3
 800578e:	3718      	adds	r7, #24
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800579e:	2300      	movs	r3, #0
 80057a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d101      	bne.n	80057b0 <HAL_TIM_ConfigClockSource+0x1c>
 80057ac:	2302      	movs	r3, #2
 80057ae:	e0b4      	b.n	800591a <HAL_TIM_ConfigClockSource+0x186>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2202      	movs	r2, #2
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057e8:	d03e      	beq.n	8005868 <HAL_TIM_ConfigClockSource+0xd4>
 80057ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ee:	f200 8087 	bhi.w	8005900 <HAL_TIM_ConfigClockSource+0x16c>
 80057f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057f6:	f000 8086 	beq.w	8005906 <HAL_TIM_ConfigClockSource+0x172>
 80057fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057fe:	d87f      	bhi.n	8005900 <HAL_TIM_ConfigClockSource+0x16c>
 8005800:	2b70      	cmp	r3, #112	; 0x70
 8005802:	d01a      	beq.n	800583a <HAL_TIM_ConfigClockSource+0xa6>
 8005804:	2b70      	cmp	r3, #112	; 0x70
 8005806:	d87b      	bhi.n	8005900 <HAL_TIM_ConfigClockSource+0x16c>
 8005808:	2b60      	cmp	r3, #96	; 0x60
 800580a:	d050      	beq.n	80058ae <HAL_TIM_ConfigClockSource+0x11a>
 800580c:	2b60      	cmp	r3, #96	; 0x60
 800580e:	d877      	bhi.n	8005900 <HAL_TIM_ConfigClockSource+0x16c>
 8005810:	2b50      	cmp	r3, #80	; 0x50
 8005812:	d03c      	beq.n	800588e <HAL_TIM_ConfigClockSource+0xfa>
 8005814:	2b50      	cmp	r3, #80	; 0x50
 8005816:	d873      	bhi.n	8005900 <HAL_TIM_ConfigClockSource+0x16c>
 8005818:	2b40      	cmp	r3, #64	; 0x40
 800581a:	d058      	beq.n	80058ce <HAL_TIM_ConfigClockSource+0x13a>
 800581c:	2b40      	cmp	r3, #64	; 0x40
 800581e:	d86f      	bhi.n	8005900 <HAL_TIM_ConfigClockSource+0x16c>
 8005820:	2b30      	cmp	r3, #48	; 0x30
 8005822:	d064      	beq.n	80058ee <HAL_TIM_ConfigClockSource+0x15a>
 8005824:	2b30      	cmp	r3, #48	; 0x30
 8005826:	d86b      	bhi.n	8005900 <HAL_TIM_ConfigClockSource+0x16c>
 8005828:	2b20      	cmp	r3, #32
 800582a:	d060      	beq.n	80058ee <HAL_TIM_ConfigClockSource+0x15a>
 800582c:	2b20      	cmp	r3, #32
 800582e:	d867      	bhi.n	8005900 <HAL_TIM_ConfigClockSource+0x16c>
 8005830:	2b00      	cmp	r3, #0
 8005832:	d05c      	beq.n	80058ee <HAL_TIM_ConfigClockSource+0x15a>
 8005834:	2b10      	cmp	r3, #16
 8005836:	d05a      	beq.n	80058ee <HAL_TIM_ConfigClockSource+0x15a>
 8005838:	e062      	b.n	8005900 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6818      	ldr	r0, [r3, #0]
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	6899      	ldr	r1, [r3, #8]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	f000 fd9f 	bl	800638c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800585c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	609a      	str	r2, [r3, #8]
      break;
 8005866:	e04f      	b.n	8005908 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6818      	ldr	r0, [r3, #0]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	6899      	ldr	r1, [r3, #8]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	f000 fd88 	bl	800638c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	689a      	ldr	r2, [r3, #8]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800588a:	609a      	str	r2, [r3, #8]
      break;
 800588c:	e03c      	b.n	8005908 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6818      	ldr	r0, [r3, #0]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	6859      	ldr	r1, [r3, #4]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	461a      	mov	r2, r3
 800589c:	f000 fc46 	bl	800612c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2150      	movs	r1, #80	; 0x50
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 fd55 	bl	8006356 <TIM_ITRx_SetConfig>
      break;
 80058ac:	e02c      	b.n	8005908 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6818      	ldr	r0, [r3, #0]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	6859      	ldr	r1, [r3, #4]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	461a      	mov	r2, r3
 80058bc:	f000 fca2 	bl	8006204 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2160      	movs	r1, #96	; 0x60
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 fd45 	bl	8006356 <TIM_ITRx_SetConfig>
      break;
 80058cc:	e01c      	b.n	8005908 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6818      	ldr	r0, [r3, #0]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	6859      	ldr	r1, [r3, #4]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	461a      	mov	r2, r3
 80058dc:	f000 fc26 	bl	800612c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2140      	movs	r1, #64	; 0x40
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 fd35 	bl	8006356 <TIM_ITRx_SetConfig>
      break;
 80058ec:	e00c      	b.n	8005908 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4619      	mov	r1, r3
 80058f8:	4610      	mov	r0, r2
 80058fa:	f000 fd2c 	bl	8006356 <TIM_ITRx_SetConfig>
      break;
 80058fe:	e003      	b.n	8005908 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	73fb      	strb	r3, [r7, #15]
      break;
 8005904:	e000      	b.n	8005908 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005906:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005918:	7bfb      	ldrb	r3, [r7, #15]
}
 800591a:	4618      	mov	r0, r3
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b082      	sub	sp, #8
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
 800592a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005932:	2b01      	cmp	r3, #1
 8005934:	d101      	bne.n	800593a <HAL_TIM_SlaveConfigSynchro+0x18>
 8005936:	2302      	movs	r3, #2
 8005938:	e031      	b.n	800599e <HAL_TIM_SlaveConfigSynchro+0x7c>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2202      	movs	r2, #2
 8005946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800594a:	6839      	ldr	r1, [r7, #0]
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 fae7 	bl	8005f20 <TIM_SlaveTimer_SetConfig>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d009      	beq.n	800596c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e018      	b.n	800599e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68da      	ldr	r2, [r3, #12]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800597a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68da      	ldr	r2, [r3, #12]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800598a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3708      	adds	r7, #8
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
	...

080059a8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80059b2:	2300      	movs	r3, #0
 80059b4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b0c      	cmp	r3, #12
 80059ba:	d831      	bhi.n	8005a20 <HAL_TIM_ReadCapturedValue+0x78>
 80059bc:	a201      	add	r2, pc, #4	; (adr r2, 80059c4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80059be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c2:	bf00      	nop
 80059c4:	080059f9 	.word	0x080059f9
 80059c8:	08005a21 	.word	0x08005a21
 80059cc:	08005a21 	.word	0x08005a21
 80059d0:	08005a21 	.word	0x08005a21
 80059d4:	08005a03 	.word	0x08005a03
 80059d8:	08005a21 	.word	0x08005a21
 80059dc:	08005a21 	.word	0x08005a21
 80059e0:	08005a21 	.word	0x08005a21
 80059e4:	08005a0d 	.word	0x08005a0d
 80059e8:	08005a21 	.word	0x08005a21
 80059ec:	08005a21 	.word	0x08005a21
 80059f0:	08005a21 	.word	0x08005a21
 80059f4:	08005a17 	.word	0x08005a17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059fe:	60fb      	str	r3, [r7, #12]

      break;
 8005a00:	e00f      	b.n	8005a22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a08:	60fb      	str	r3, [r7, #12]

      break;
 8005a0a:	e00a      	b.n	8005a22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a12:	60fb      	str	r3, [r7, #12]

      break;
 8005a14:	e005      	b.n	8005a22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1c:	60fb      	str	r3, [r7, #12]

      break;
 8005a1e:	e000      	b.n	8005a22 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005a20:	bf00      	nop
  }

  return tmpreg;
 8005a22:	68fb      	ldr	r3, [r7, #12]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3714      	adds	r7, #20
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a40      	ldr	r2, [pc, #256]	; (8005b94 <TIM_Base_SetConfig+0x114>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d013      	beq.n	8005ac0 <TIM_Base_SetConfig+0x40>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a9e:	d00f      	beq.n	8005ac0 <TIM_Base_SetConfig+0x40>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a3d      	ldr	r2, [pc, #244]	; (8005b98 <TIM_Base_SetConfig+0x118>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d00b      	beq.n	8005ac0 <TIM_Base_SetConfig+0x40>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a3c      	ldr	r2, [pc, #240]	; (8005b9c <TIM_Base_SetConfig+0x11c>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d007      	beq.n	8005ac0 <TIM_Base_SetConfig+0x40>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a3b      	ldr	r2, [pc, #236]	; (8005ba0 <TIM_Base_SetConfig+0x120>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d003      	beq.n	8005ac0 <TIM_Base_SetConfig+0x40>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a3a      	ldr	r2, [pc, #232]	; (8005ba4 <TIM_Base_SetConfig+0x124>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d108      	bne.n	8005ad2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a2f      	ldr	r2, [pc, #188]	; (8005b94 <TIM_Base_SetConfig+0x114>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d02b      	beq.n	8005b32 <TIM_Base_SetConfig+0xb2>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ae0:	d027      	beq.n	8005b32 <TIM_Base_SetConfig+0xb2>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a2c      	ldr	r2, [pc, #176]	; (8005b98 <TIM_Base_SetConfig+0x118>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d023      	beq.n	8005b32 <TIM_Base_SetConfig+0xb2>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a2b      	ldr	r2, [pc, #172]	; (8005b9c <TIM_Base_SetConfig+0x11c>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d01f      	beq.n	8005b32 <TIM_Base_SetConfig+0xb2>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a2a      	ldr	r2, [pc, #168]	; (8005ba0 <TIM_Base_SetConfig+0x120>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d01b      	beq.n	8005b32 <TIM_Base_SetConfig+0xb2>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a29      	ldr	r2, [pc, #164]	; (8005ba4 <TIM_Base_SetConfig+0x124>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d017      	beq.n	8005b32 <TIM_Base_SetConfig+0xb2>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a28      	ldr	r2, [pc, #160]	; (8005ba8 <TIM_Base_SetConfig+0x128>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d013      	beq.n	8005b32 <TIM_Base_SetConfig+0xb2>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a27      	ldr	r2, [pc, #156]	; (8005bac <TIM_Base_SetConfig+0x12c>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d00f      	beq.n	8005b32 <TIM_Base_SetConfig+0xb2>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a26      	ldr	r2, [pc, #152]	; (8005bb0 <TIM_Base_SetConfig+0x130>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d00b      	beq.n	8005b32 <TIM_Base_SetConfig+0xb2>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a25      	ldr	r2, [pc, #148]	; (8005bb4 <TIM_Base_SetConfig+0x134>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d007      	beq.n	8005b32 <TIM_Base_SetConfig+0xb2>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a24      	ldr	r2, [pc, #144]	; (8005bb8 <TIM_Base_SetConfig+0x138>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d003      	beq.n	8005b32 <TIM_Base_SetConfig+0xb2>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a23      	ldr	r2, [pc, #140]	; (8005bbc <TIM_Base_SetConfig+0x13c>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d108      	bne.n	8005b44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	689a      	ldr	r2, [r3, #8]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a0a      	ldr	r2, [pc, #40]	; (8005b94 <TIM_Base_SetConfig+0x114>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d003      	beq.n	8005b78 <TIM_Base_SetConfig+0xf8>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a0c      	ldr	r2, [pc, #48]	; (8005ba4 <TIM_Base_SetConfig+0x124>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d103      	bne.n	8005b80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	691a      	ldr	r2, [r3, #16]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	615a      	str	r2, [r3, #20]
}
 8005b86:	bf00      	nop
 8005b88:	3714      	adds	r7, #20
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	40010000 	.word	0x40010000
 8005b98:	40000400 	.word	0x40000400
 8005b9c:	40000800 	.word	0x40000800
 8005ba0:	40000c00 	.word	0x40000c00
 8005ba4:	40010400 	.word	0x40010400
 8005ba8:	40014000 	.word	0x40014000
 8005bac:	40014400 	.word	0x40014400
 8005bb0:	40014800 	.word	0x40014800
 8005bb4:	40001800 	.word	0x40001800
 8005bb8:	40001c00 	.word	0x40001c00
 8005bbc:	40002000 	.word	0x40002000

08005bc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b087      	sub	sp, #28
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	f023 0201 	bic.w	r2, r3, #1
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f023 0303 	bic.w	r3, r3, #3
 8005bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f023 0302 	bic.w	r3, r3, #2
 8005c08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a20      	ldr	r2, [pc, #128]	; (8005c98 <TIM_OC1_SetConfig+0xd8>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d003      	beq.n	8005c24 <TIM_OC1_SetConfig+0x64>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a1f      	ldr	r2, [pc, #124]	; (8005c9c <TIM_OC1_SetConfig+0xdc>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d10c      	bne.n	8005c3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f023 0308 	bic.w	r3, r3, #8
 8005c2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f023 0304 	bic.w	r3, r3, #4
 8005c3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a15      	ldr	r2, [pc, #84]	; (8005c98 <TIM_OC1_SetConfig+0xd8>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d003      	beq.n	8005c4e <TIM_OC1_SetConfig+0x8e>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a14      	ldr	r2, [pc, #80]	; (8005c9c <TIM_OC1_SetConfig+0xdc>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d111      	bne.n	8005c72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	685a      	ldr	r2, [r3, #4]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	621a      	str	r2, [r3, #32]
}
 8005c8c:	bf00      	nop
 8005c8e:	371c      	adds	r7, #28
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	40010000 	.word	0x40010000
 8005c9c:	40010400 	.word	0x40010400

08005ca0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b087      	sub	sp, #28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	f023 0210 	bic.w	r2, r3, #16
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	021b      	lsls	r3, r3, #8
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f023 0320 	bic.w	r3, r3, #32
 8005cea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	011b      	lsls	r3, r3, #4
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a22      	ldr	r2, [pc, #136]	; (8005d84 <TIM_OC2_SetConfig+0xe4>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d003      	beq.n	8005d08 <TIM_OC2_SetConfig+0x68>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a21      	ldr	r2, [pc, #132]	; (8005d88 <TIM_OC2_SetConfig+0xe8>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d10d      	bne.n	8005d24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	011b      	lsls	r3, r3, #4
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a17      	ldr	r2, [pc, #92]	; (8005d84 <TIM_OC2_SetConfig+0xe4>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d003      	beq.n	8005d34 <TIM_OC2_SetConfig+0x94>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a16      	ldr	r2, [pc, #88]	; (8005d88 <TIM_OC2_SetConfig+0xe8>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d113      	bne.n	8005d5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	621a      	str	r2, [r3, #32]
}
 8005d76:	bf00      	nop
 8005d78:	371c      	adds	r7, #28
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	40010000 	.word	0x40010000
 8005d88:	40010400 	.word	0x40010400

08005d8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f023 0303 	bic.w	r3, r3, #3
 8005dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005dd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	021b      	lsls	r3, r3, #8
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a21      	ldr	r2, [pc, #132]	; (8005e6c <TIM_OC3_SetConfig+0xe0>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d003      	beq.n	8005df2 <TIM_OC3_SetConfig+0x66>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a20      	ldr	r2, [pc, #128]	; (8005e70 <TIM_OC3_SetConfig+0xe4>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d10d      	bne.n	8005e0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005df8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	021b      	lsls	r3, r3, #8
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a16      	ldr	r2, [pc, #88]	; (8005e6c <TIM_OC3_SetConfig+0xe0>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d003      	beq.n	8005e1e <TIM_OC3_SetConfig+0x92>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a15      	ldr	r2, [pc, #84]	; (8005e70 <TIM_OC3_SetConfig+0xe4>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d113      	bne.n	8005e46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	011b      	lsls	r3, r3, #4
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	011b      	lsls	r3, r3, #4
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	621a      	str	r2, [r3, #32]
}
 8005e60:	bf00      	nop
 8005e62:	371c      	adds	r7, #28
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr
 8005e6c:	40010000 	.word	0x40010000
 8005e70:	40010400 	.word	0x40010400

08005e74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b087      	sub	sp, #28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	021b      	lsls	r3, r3, #8
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ebe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	031b      	lsls	r3, r3, #12
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a12      	ldr	r2, [pc, #72]	; (8005f18 <TIM_OC4_SetConfig+0xa4>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d003      	beq.n	8005edc <TIM_OC4_SetConfig+0x68>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a11      	ldr	r2, [pc, #68]	; (8005f1c <TIM_OC4_SetConfig+0xa8>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d109      	bne.n	8005ef0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ee2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	695b      	ldr	r3, [r3, #20]
 8005ee8:	019b      	lsls	r3, r3, #6
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	621a      	str	r2, [r3, #32]
}
 8005f0a:	bf00      	nop
 8005f0c:	371c      	adds	r7, #28
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	40010000 	.word	0x40010000
 8005f1c:	40010400 	.word	0x40010400

08005f20 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f3c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	f023 0307 	bic.w	r3, r3, #7
 8005f4e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	2b70      	cmp	r3, #112	; 0x70
 8005f68:	d01a      	beq.n	8005fa0 <TIM_SlaveTimer_SetConfig+0x80>
 8005f6a:	2b70      	cmp	r3, #112	; 0x70
 8005f6c:	d860      	bhi.n	8006030 <TIM_SlaveTimer_SetConfig+0x110>
 8005f6e:	2b60      	cmp	r3, #96	; 0x60
 8005f70:	d054      	beq.n	800601c <TIM_SlaveTimer_SetConfig+0xfc>
 8005f72:	2b60      	cmp	r3, #96	; 0x60
 8005f74:	d85c      	bhi.n	8006030 <TIM_SlaveTimer_SetConfig+0x110>
 8005f76:	2b50      	cmp	r3, #80	; 0x50
 8005f78:	d046      	beq.n	8006008 <TIM_SlaveTimer_SetConfig+0xe8>
 8005f7a:	2b50      	cmp	r3, #80	; 0x50
 8005f7c:	d858      	bhi.n	8006030 <TIM_SlaveTimer_SetConfig+0x110>
 8005f7e:	2b40      	cmp	r3, #64	; 0x40
 8005f80:	d019      	beq.n	8005fb6 <TIM_SlaveTimer_SetConfig+0x96>
 8005f82:	2b40      	cmp	r3, #64	; 0x40
 8005f84:	d854      	bhi.n	8006030 <TIM_SlaveTimer_SetConfig+0x110>
 8005f86:	2b30      	cmp	r3, #48	; 0x30
 8005f88:	d055      	beq.n	8006036 <TIM_SlaveTimer_SetConfig+0x116>
 8005f8a:	2b30      	cmp	r3, #48	; 0x30
 8005f8c:	d850      	bhi.n	8006030 <TIM_SlaveTimer_SetConfig+0x110>
 8005f8e:	2b20      	cmp	r3, #32
 8005f90:	d051      	beq.n	8006036 <TIM_SlaveTimer_SetConfig+0x116>
 8005f92:	2b20      	cmp	r3, #32
 8005f94:	d84c      	bhi.n	8006030 <TIM_SlaveTimer_SetConfig+0x110>
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d04d      	beq.n	8006036 <TIM_SlaveTimer_SetConfig+0x116>
 8005f9a:	2b10      	cmp	r3, #16
 8005f9c:	d04b      	beq.n	8006036 <TIM_SlaveTimer_SetConfig+0x116>
 8005f9e:	e047      	b.n	8006030 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6818      	ldr	r0, [r3, #0]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	68d9      	ldr	r1, [r3, #12]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	689a      	ldr	r2, [r3, #8]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	f000 f9ec 	bl	800638c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8005fb4:	e040      	b.n	8006038 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2b05      	cmp	r3, #5
 8005fbc:	d101      	bne.n	8005fc2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e03b      	b.n	800603a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6a1b      	ldr	r3, [r3, #32]
 8005fc8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	6a1a      	ldr	r2, [r3, #32]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f022 0201 	bic.w	r2, r2, #1
 8005fd8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fe8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	011b      	lsls	r3, r3, #4
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	621a      	str	r2, [r3, #32]
      break;
 8006006:	e017      	b.n	8006038 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6818      	ldr	r0, [r3, #0]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	6899      	ldr	r1, [r3, #8]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	461a      	mov	r2, r3
 8006016:	f000 f889 	bl	800612c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800601a:	e00d      	b.n	8006038 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6818      	ldr	r0, [r3, #0]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	6899      	ldr	r1, [r3, #8]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	461a      	mov	r2, r3
 800602a:	f000 f8eb 	bl	8006204 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800602e:	e003      	b.n	8006038 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	75fb      	strb	r3, [r7, #23]
      break;
 8006034:	e000      	b.n	8006038 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8006036:	bf00      	nop
  }

  return status;
 8006038:	7dfb      	ldrb	r3, [r7, #23]
}
 800603a:	4618      	mov	r0, r3
 800603c:	3718      	adds	r7, #24
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
	...

08006044 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006044:	b480      	push	{r7}
 8006046:	b087      	sub	sp, #28
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
 8006050:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	f023 0201 	bic.w	r2, r3, #1
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	4a28      	ldr	r2, [pc, #160]	; (8006110 <TIM_TI1_SetConfig+0xcc>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d01b      	beq.n	80060aa <TIM_TI1_SetConfig+0x66>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006078:	d017      	beq.n	80060aa <TIM_TI1_SetConfig+0x66>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	4a25      	ldr	r2, [pc, #148]	; (8006114 <TIM_TI1_SetConfig+0xd0>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d013      	beq.n	80060aa <TIM_TI1_SetConfig+0x66>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	4a24      	ldr	r2, [pc, #144]	; (8006118 <TIM_TI1_SetConfig+0xd4>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d00f      	beq.n	80060aa <TIM_TI1_SetConfig+0x66>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	4a23      	ldr	r2, [pc, #140]	; (800611c <TIM_TI1_SetConfig+0xd8>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d00b      	beq.n	80060aa <TIM_TI1_SetConfig+0x66>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	4a22      	ldr	r2, [pc, #136]	; (8006120 <TIM_TI1_SetConfig+0xdc>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d007      	beq.n	80060aa <TIM_TI1_SetConfig+0x66>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	4a21      	ldr	r2, [pc, #132]	; (8006124 <TIM_TI1_SetConfig+0xe0>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d003      	beq.n	80060aa <TIM_TI1_SetConfig+0x66>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	4a20      	ldr	r2, [pc, #128]	; (8006128 <TIM_TI1_SetConfig+0xe4>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d101      	bne.n	80060ae <TIM_TI1_SetConfig+0x6a>
 80060aa:	2301      	movs	r3, #1
 80060ac:	e000      	b.n	80060b0 <TIM_TI1_SetConfig+0x6c>
 80060ae:	2300      	movs	r3, #0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d008      	beq.n	80060c6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	f023 0303 	bic.w	r3, r3, #3
 80060ba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	617b      	str	r3, [r7, #20]
 80060c4:	e003      	b.n	80060ce <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f043 0301 	orr.w	r3, r3, #1
 80060cc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	011b      	lsls	r3, r3, #4
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	4313      	orrs	r3, r2
 80060e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	f023 030a 	bic.w	r3, r3, #10
 80060e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	f003 030a 	and.w	r3, r3, #10
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	621a      	str	r2, [r3, #32]
}
 8006102:	bf00      	nop
 8006104:	371c      	adds	r7, #28
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	40010000 	.word	0x40010000
 8006114:	40000400 	.word	0x40000400
 8006118:	40000800 	.word	0x40000800
 800611c:	40000c00 	.word	0x40000c00
 8006120:	40010400 	.word	0x40010400
 8006124:	40014000 	.word	0x40014000
 8006128:	40001800 	.word	0x40001800

0800612c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800612c:	b480      	push	{r7}
 800612e:	b087      	sub	sp, #28
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	f023 0201 	bic.w	r2, r3, #1
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	011b      	lsls	r3, r3, #4
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	4313      	orrs	r3, r2
 8006160:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f023 030a 	bic.w	r3, r3, #10
 8006168:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	4313      	orrs	r3, r2
 8006170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	621a      	str	r2, [r3, #32]
}
 800617e:	bf00      	nop
 8006180:	371c      	adds	r7, #28
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800618a:	b480      	push	{r7}
 800618c:	b087      	sub	sp, #28
 800618e:	af00      	add	r7, sp, #0
 8006190:	60f8      	str	r0, [r7, #12]
 8006192:	60b9      	str	r1, [r7, #8]
 8006194:	607a      	str	r2, [r7, #4]
 8006196:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	f023 0210 	bic.w	r2, r3, #16
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	699b      	ldr	r3, [r3, #24]
 80061a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	021b      	lsls	r3, r3, #8
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	4313      	orrs	r3, r2
 80061c0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	031b      	lsls	r3, r3, #12
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061dc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	011b      	lsls	r3, r3, #4
 80061e2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	621a      	str	r2, [r3, #32]
}
 80061f8:	bf00      	nop
 80061fa:	371c      	adds	r7, #28
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006204:	b480      	push	{r7}
 8006206:	b087      	sub	sp, #28
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	f023 0210 	bic.w	r2, r3, #16
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800622e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	031b      	lsls	r3, r3, #12
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	4313      	orrs	r3, r2
 8006238:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006240:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	011b      	lsls	r3, r3, #4
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	4313      	orrs	r3, r2
 800624a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	621a      	str	r2, [r3, #32]
}
 8006258:	bf00      	nop
 800625a:	371c      	adds	r7, #28
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006264:	b480      	push	{r7}
 8006266:	b087      	sub	sp, #28
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
 8006270:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	69db      	ldr	r3, [r3, #28]
 8006282:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6a1b      	ldr	r3, [r3, #32]
 8006288:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	f023 0303 	bic.w	r3, r3, #3
 8006290:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4313      	orrs	r3, r2
 8006298:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	011b      	lsls	r3, r3, #4
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80062b4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	021b      	lsls	r3, r3, #8
 80062ba:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	621a      	str	r2, [r3, #32]
}
 80062d0:	bf00      	nop
 80062d2:	371c      	adds	r7, #28
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062dc:	b480      	push	{r7}
 80062de:	b087      	sub	sp, #28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
 80062e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	69db      	ldr	r3, [r3, #28]
 80062fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6a1b      	ldr	r3, [r3, #32]
 8006300:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006308:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	021b      	lsls	r3, r3, #8
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	4313      	orrs	r3, r2
 8006312:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800631a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	031b      	lsls	r3, r3, #12
 8006320:	b29b      	uxth	r3, r3
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	4313      	orrs	r3, r2
 8006326:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800632e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	031b      	lsls	r3, r3, #12
 8006334:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	4313      	orrs	r3, r2
 800633c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	621a      	str	r2, [r3, #32]
}
 800634a:	bf00      	nop
 800634c:	371c      	adds	r7, #28
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006356:	b480      	push	{r7}
 8006358:	b085      	sub	sp, #20
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
 800635e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800636c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800636e:	683a      	ldr	r2, [r7, #0]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	4313      	orrs	r3, r2
 8006374:	f043 0307 	orr.w	r3, r3, #7
 8006378:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	609a      	str	r2, [r3, #8]
}
 8006380:	bf00      	nop
 8006382:	3714      	adds	r7, #20
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800638c:	b480      	push	{r7}
 800638e:	b087      	sub	sp, #28
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
 8006398:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	021a      	lsls	r2, r3, #8
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	431a      	orrs	r2, r3
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	609a      	str	r2, [r3, #8]
}
 80063c0:	bf00      	nop
 80063c2:	371c      	adds	r7, #28
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b087      	sub	sp, #28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f003 031f 	and.w	r3, r3, #31
 80063de:	2201      	movs	r2, #1
 80063e0:	fa02 f303 	lsl.w	r3, r2, r3
 80063e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6a1a      	ldr	r2, [r3, #32]
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	43db      	mvns	r3, r3
 80063ee:	401a      	ands	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6a1a      	ldr	r2, [r3, #32]
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	f003 031f 	and.w	r3, r3, #31
 80063fe:	6879      	ldr	r1, [r7, #4]
 8006400:	fa01 f303 	lsl.w	r3, r1, r3
 8006404:	431a      	orrs	r2, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	621a      	str	r2, [r3, #32]
}
 800640a:	bf00      	nop
 800640c:	371c      	adds	r7, #28
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
	...

08006418 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006428:	2b01      	cmp	r3, #1
 800642a:	d101      	bne.n	8006430 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800642c:	2302      	movs	r3, #2
 800642e:	e05a      	b.n	80064e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2202      	movs	r2, #2
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006456:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	4313      	orrs	r3, r2
 8006460:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a21      	ldr	r2, [pc, #132]	; (80064f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d022      	beq.n	80064ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800647c:	d01d      	beq.n	80064ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a1d      	ldr	r2, [pc, #116]	; (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d018      	beq.n	80064ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a1b      	ldr	r2, [pc, #108]	; (80064fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d013      	beq.n	80064ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a1a      	ldr	r2, [pc, #104]	; (8006500 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d00e      	beq.n	80064ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a18      	ldr	r2, [pc, #96]	; (8006504 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d009      	beq.n	80064ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a17      	ldr	r2, [pc, #92]	; (8006508 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d004      	beq.n	80064ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a15      	ldr	r2, [pc, #84]	; (800650c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d10c      	bne.n	80064d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3714      	adds	r7, #20
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	40010000 	.word	0x40010000
 80064f8:	40000400 	.word	0x40000400
 80064fc:	40000800 	.word	0x40000800
 8006500:	40000c00 	.word	0x40000c00
 8006504:	40010400 	.word	0x40010400
 8006508:	40014000 	.word	0x40014000
 800650c:	40001800 	.word	0x40001800

08006510 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006518:	bf00      	nop
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d101      	bne.n	800654a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e03f      	b.n	80065ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2b00      	cmp	r3, #0
 8006554:	d106      	bne.n	8006564 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f7fb ff06 	bl	8002370 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2224      	movs	r2, #36	; 0x24
 8006568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68da      	ldr	r2, [r3, #12]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800657a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 f829 	bl	80065d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	691a      	ldr	r2, [r3, #16]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006590:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	695a      	ldr	r2, [r3, #20]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68da      	ldr	r2, [r3, #12]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2220      	movs	r2, #32
 80065bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2220      	movs	r2, #32
 80065c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3708      	adds	r7, #8
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
	...

080065d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065d8:	b0c0      	sub	sp, #256	; 0x100
 80065da:	af00      	add	r7, sp, #0
 80065dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80065ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f0:	68d9      	ldr	r1, [r3, #12]
 80065f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	ea40 0301 	orr.w	r3, r0, r1
 80065fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80065fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006602:	689a      	ldr	r2, [r3, #8]
 8006604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	431a      	orrs	r2, r3
 800660c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	431a      	orrs	r2, r3
 8006614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006618:	69db      	ldr	r3, [r3, #28]
 800661a:	4313      	orrs	r3, r2
 800661c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800662c:	f021 010c 	bic.w	r1, r1, #12
 8006630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800663a:	430b      	orrs	r3, r1
 800663c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800663e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800664a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800664e:	6999      	ldr	r1, [r3, #24]
 8006650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	ea40 0301 	orr.w	r3, r0, r1
 800665a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800665c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	4b8f      	ldr	r3, [pc, #572]	; (80068a0 <UART_SetConfig+0x2cc>)
 8006664:	429a      	cmp	r2, r3
 8006666:	d005      	beq.n	8006674 <UART_SetConfig+0xa0>
 8006668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	4b8d      	ldr	r3, [pc, #564]	; (80068a4 <UART_SetConfig+0x2d0>)
 8006670:	429a      	cmp	r2, r3
 8006672:	d104      	bne.n	800667e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006674:	f7fc ff86 	bl	8003584 <HAL_RCC_GetPCLK2Freq>
 8006678:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800667c:	e003      	b.n	8006686 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800667e:	f7fc ff6d 	bl	800355c <HAL_RCC_GetPCLK1Freq>
 8006682:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800668a:	69db      	ldr	r3, [r3, #28]
 800668c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006690:	f040 810c 	bne.w	80068ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006694:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006698:	2200      	movs	r2, #0
 800669a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800669e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80066a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80066a6:	4622      	mov	r2, r4
 80066a8:	462b      	mov	r3, r5
 80066aa:	1891      	adds	r1, r2, r2
 80066ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80066ae:	415b      	adcs	r3, r3
 80066b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80066b6:	4621      	mov	r1, r4
 80066b8:	eb12 0801 	adds.w	r8, r2, r1
 80066bc:	4629      	mov	r1, r5
 80066be:	eb43 0901 	adc.w	r9, r3, r1
 80066c2:	f04f 0200 	mov.w	r2, #0
 80066c6:	f04f 0300 	mov.w	r3, #0
 80066ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066d6:	4690      	mov	r8, r2
 80066d8:	4699      	mov	r9, r3
 80066da:	4623      	mov	r3, r4
 80066dc:	eb18 0303 	adds.w	r3, r8, r3
 80066e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80066e4:	462b      	mov	r3, r5
 80066e6:	eb49 0303 	adc.w	r3, r9, r3
 80066ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80066ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80066fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006702:	460b      	mov	r3, r1
 8006704:	18db      	adds	r3, r3, r3
 8006706:	653b      	str	r3, [r7, #80]	; 0x50
 8006708:	4613      	mov	r3, r2
 800670a:	eb42 0303 	adc.w	r3, r2, r3
 800670e:	657b      	str	r3, [r7, #84]	; 0x54
 8006710:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006714:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006718:	f7f9 ffb8 	bl	800068c <__aeabi_uldivmod>
 800671c:	4602      	mov	r2, r0
 800671e:	460b      	mov	r3, r1
 8006720:	4b61      	ldr	r3, [pc, #388]	; (80068a8 <UART_SetConfig+0x2d4>)
 8006722:	fba3 2302 	umull	r2, r3, r3, r2
 8006726:	095b      	lsrs	r3, r3, #5
 8006728:	011c      	lsls	r4, r3, #4
 800672a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800672e:	2200      	movs	r2, #0
 8006730:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006734:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006738:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800673c:	4642      	mov	r2, r8
 800673e:	464b      	mov	r3, r9
 8006740:	1891      	adds	r1, r2, r2
 8006742:	64b9      	str	r1, [r7, #72]	; 0x48
 8006744:	415b      	adcs	r3, r3
 8006746:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006748:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800674c:	4641      	mov	r1, r8
 800674e:	eb12 0a01 	adds.w	sl, r2, r1
 8006752:	4649      	mov	r1, r9
 8006754:	eb43 0b01 	adc.w	fp, r3, r1
 8006758:	f04f 0200 	mov.w	r2, #0
 800675c:	f04f 0300 	mov.w	r3, #0
 8006760:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006764:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006768:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800676c:	4692      	mov	sl, r2
 800676e:	469b      	mov	fp, r3
 8006770:	4643      	mov	r3, r8
 8006772:	eb1a 0303 	adds.w	r3, sl, r3
 8006776:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800677a:	464b      	mov	r3, r9
 800677c:	eb4b 0303 	adc.w	r3, fp, r3
 8006780:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006790:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006794:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006798:	460b      	mov	r3, r1
 800679a:	18db      	adds	r3, r3, r3
 800679c:	643b      	str	r3, [r7, #64]	; 0x40
 800679e:	4613      	mov	r3, r2
 80067a0:	eb42 0303 	adc.w	r3, r2, r3
 80067a4:	647b      	str	r3, [r7, #68]	; 0x44
 80067a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80067aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80067ae:	f7f9 ff6d 	bl	800068c <__aeabi_uldivmod>
 80067b2:	4602      	mov	r2, r0
 80067b4:	460b      	mov	r3, r1
 80067b6:	4611      	mov	r1, r2
 80067b8:	4b3b      	ldr	r3, [pc, #236]	; (80068a8 <UART_SetConfig+0x2d4>)
 80067ba:	fba3 2301 	umull	r2, r3, r3, r1
 80067be:	095b      	lsrs	r3, r3, #5
 80067c0:	2264      	movs	r2, #100	; 0x64
 80067c2:	fb02 f303 	mul.w	r3, r2, r3
 80067c6:	1acb      	subs	r3, r1, r3
 80067c8:	00db      	lsls	r3, r3, #3
 80067ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80067ce:	4b36      	ldr	r3, [pc, #216]	; (80068a8 <UART_SetConfig+0x2d4>)
 80067d0:	fba3 2302 	umull	r2, r3, r3, r2
 80067d4:	095b      	lsrs	r3, r3, #5
 80067d6:	005b      	lsls	r3, r3, #1
 80067d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80067dc:	441c      	add	r4, r3
 80067de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067e2:	2200      	movs	r2, #0
 80067e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80067ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80067f0:	4642      	mov	r2, r8
 80067f2:	464b      	mov	r3, r9
 80067f4:	1891      	adds	r1, r2, r2
 80067f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80067f8:	415b      	adcs	r3, r3
 80067fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006800:	4641      	mov	r1, r8
 8006802:	1851      	adds	r1, r2, r1
 8006804:	6339      	str	r1, [r7, #48]	; 0x30
 8006806:	4649      	mov	r1, r9
 8006808:	414b      	adcs	r3, r1
 800680a:	637b      	str	r3, [r7, #52]	; 0x34
 800680c:	f04f 0200 	mov.w	r2, #0
 8006810:	f04f 0300 	mov.w	r3, #0
 8006814:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006818:	4659      	mov	r1, fp
 800681a:	00cb      	lsls	r3, r1, #3
 800681c:	4651      	mov	r1, sl
 800681e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006822:	4651      	mov	r1, sl
 8006824:	00ca      	lsls	r2, r1, #3
 8006826:	4610      	mov	r0, r2
 8006828:	4619      	mov	r1, r3
 800682a:	4603      	mov	r3, r0
 800682c:	4642      	mov	r2, r8
 800682e:	189b      	adds	r3, r3, r2
 8006830:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006834:	464b      	mov	r3, r9
 8006836:	460a      	mov	r2, r1
 8006838:	eb42 0303 	adc.w	r3, r2, r3
 800683c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800684c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006850:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006854:	460b      	mov	r3, r1
 8006856:	18db      	adds	r3, r3, r3
 8006858:	62bb      	str	r3, [r7, #40]	; 0x28
 800685a:	4613      	mov	r3, r2
 800685c:	eb42 0303 	adc.w	r3, r2, r3
 8006860:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006862:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006866:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800686a:	f7f9 ff0f 	bl	800068c <__aeabi_uldivmod>
 800686e:	4602      	mov	r2, r0
 8006870:	460b      	mov	r3, r1
 8006872:	4b0d      	ldr	r3, [pc, #52]	; (80068a8 <UART_SetConfig+0x2d4>)
 8006874:	fba3 1302 	umull	r1, r3, r3, r2
 8006878:	095b      	lsrs	r3, r3, #5
 800687a:	2164      	movs	r1, #100	; 0x64
 800687c:	fb01 f303 	mul.w	r3, r1, r3
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	00db      	lsls	r3, r3, #3
 8006884:	3332      	adds	r3, #50	; 0x32
 8006886:	4a08      	ldr	r2, [pc, #32]	; (80068a8 <UART_SetConfig+0x2d4>)
 8006888:	fba2 2303 	umull	r2, r3, r2, r3
 800688c:	095b      	lsrs	r3, r3, #5
 800688e:	f003 0207 	and.w	r2, r3, #7
 8006892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4422      	add	r2, r4
 800689a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800689c:	e106      	b.n	8006aac <UART_SetConfig+0x4d8>
 800689e:	bf00      	nop
 80068a0:	40011000 	.word	0x40011000
 80068a4:	40011400 	.word	0x40011400
 80068a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068b0:	2200      	movs	r2, #0
 80068b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80068b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80068ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80068be:	4642      	mov	r2, r8
 80068c0:	464b      	mov	r3, r9
 80068c2:	1891      	adds	r1, r2, r2
 80068c4:	6239      	str	r1, [r7, #32]
 80068c6:	415b      	adcs	r3, r3
 80068c8:	627b      	str	r3, [r7, #36]	; 0x24
 80068ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80068ce:	4641      	mov	r1, r8
 80068d0:	1854      	adds	r4, r2, r1
 80068d2:	4649      	mov	r1, r9
 80068d4:	eb43 0501 	adc.w	r5, r3, r1
 80068d8:	f04f 0200 	mov.w	r2, #0
 80068dc:	f04f 0300 	mov.w	r3, #0
 80068e0:	00eb      	lsls	r3, r5, #3
 80068e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068e6:	00e2      	lsls	r2, r4, #3
 80068e8:	4614      	mov	r4, r2
 80068ea:	461d      	mov	r5, r3
 80068ec:	4643      	mov	r3, r8
 80068ee:	18e3      	adds	r3, r4, r3
 80068f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80068f4:	464b      	mov	r3, r9
 80068f6:	eb45 0303 	adc.w	r3, r5, r3
 80068fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80068fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800690a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800690e:	f04f 0200 	mov.w	r2, #0
 8006912:	f04f 0300 	mov.w	r3, #0
 8006916:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800691a:	4629      	mov	r1, r5
 800691c:	008b      	lsls	r3, r1, #2
 800691e:	4621      	mov	r1, r4
 8006920:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006924:	4621      	mov	r1, r4
 8006926:	008a      	lsls	r2, r1, #2
 8006928:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800692c:	f7f9 feae 	bl	800068c <__aeabi_uldivmod>
 8006930:	4602      	mov	r2, r0
 8006932:	460b      	mov	r3, r1
 8006934:	4b60      	ldr	r3, [pc, #384]	; (8006ab8 <UART_SetConfig+0x4e4>)
 8006936:	fba3 2302 	umull	r2, r3, r3, r2
 800693a:	095b      	lsrs	r3, r3, #5
 800693c:	011c      	lsls	r4, r3, #4
 800693e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006942:	2200      	movs	r2, #0
 8006944:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006948:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800694c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006950:	4642      	mov	r2, r8
 8006952:	464b      	mov	r3, r9
 8006954:	1891      	adds	r1, r2, r2
 8006956:	61b9      	str	r1, [r7, #24]
 8006958:	415b      	adcs	r3, r3
 800695a:	61fb      	str	r3, [r7, #28]
 800695c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006960:	4641      	mov	r1, r8
 8006962:	1851      	adds	r1, r2, r1
 8006964:	6139      	str	r1, [r7, #16]
 8006966:	4649      	mov	r1, r9
 8006968:	414b      	adcs	r3, r1
 800696a:	617b      	str	r3, [r7, #20]
 800696c:	f04f 0200 	mov.w	r2, #0
 8006970:	f04f 0300 	mov.w	r3, #0
 8006974:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006978:	4659      	mov	r1, fp
 800697a:	00cb      	lsls	r3, r1, #3
 800697c:	4651      	mov	r1, sl
 800697e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006982:	4651      	mov	r1, sl
 8006984:	00ca      	lsls	r2, r1, #3
 8006986:	4610      	mov	r0, r2
 8006988:	4619      	mov	r1, r3
 800698a:	4603      	mov	r3, r0
 800698c:	4642      	mov	r2, r8
 800698e:	189b      	adds	r3, r3, r2
 8006990:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006994:	464b      	mov	r3, r9
 8006996:	460a      	mov	r2, r1
 8006998:	eb42 0303 	adc.w	r3, r2, r3
 800699c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80069a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80069aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80069ac:	f04f 0200 	mov.w	r2, #0
 80069b0:	f04f 0300 	mov.w	r3, #0
 80069b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80069b8:	4649      	mov	r1, r9
 80069ba:	008b      	lsls	r3, r1, #2
 80069bc:	4641      	mov	r1, r8
 80069be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069c2:	4641      	mov	r1, r8
 80069c4:	008a      	lsls	r2, r1, #2
 80069c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80069ca:	f7f9 fe5f 	bl	800068c <__aeabi_uldivmod>
 80069ce:	4602      	mov	r2, r0
 80069d0:	460b      	mov	r3, r1
 80069d2:	4611      	mov	r1, r2
 80069d4:	4b38      	ldr	r3, [pc, #224]	; (8006ab8 <UART_SetConfig+0x4e4>)
 80069d6:	fba3 2301 	umull	r2, r3, r3, r1
 80069da:	095b      	lsrs	r3, r3, #5
 80069dc:	2264      	movs	r2, #100	; 0x64
 80069de:	fb02 f303 	mul.w	r3, r2, r3
 80069e2:	1acb      	subs	r3, r1, r3
 80069e4:	011b      	lsls	r3, r3, #4
 80069e6:	3332      	adds	r3, #50	; 0x32
 80069e8:	4a33      	ldr	r2, [pc, #204]	; (8006ab8 <UART_SetConfig+0x4e4>)
 80069ea:	fba2 2303 	umull	r2, r3, r2, r3
 80069ee:	095b      	lsrs	r3, r3, #5
 80069f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069f4:	441c      	add	r4, r3
 80069f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069fa:	2200      	movs	r2, #0
 80069fc:	673b      	str	r3, [r7, #112]	; 0x70
 80069fe:	677a      	str	r2, [r7, #116]	; 0x74
 8006a00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006a04:	4642      	mov	r2, r8
 8006a06:	464b      	mov	r3, r9
 8006a08:	1891      	adds	r1, r2, r2
 8006a0a:	60b9      	str	r1, [r7, #8]
 8006a0c:	415b      	adcs	r3, r3
 8006a0e:	60fb      	str	r3, [r7, #12]
 8006a10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a14:	4641      	mov	r1, r8
 8006a16:	1851      	adds	r1, r2, r1
 8006a18:	6039      	str	r1, [r7, #0]
 8006a1a:	4649      	mov	r1, r9
 8006a1c:	414b      	adcs	r3, r1
 8006a1e:	607b      	str	r3, [r7, #4]
 8006a20:	f04f 0200 	mov.w	r2, #0
 8006a24:	f04f 0300 	mov.w	r3, #0
 8006a28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a2c:	4659      	mov	r1, fp
 8006a2e:	00cb      	lsls	r3, r1, #3
 8006a30:	4651      	mov	r1, sl
 8006a32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a36:	4651      	mov	r1, sl
 8006a38:	00ca      	lsls	r2, r1, #3
 8006a3a:	4610      	mov	r0, r2
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	4603      	mov	r3, r0
 8006a40:	4642      	mov	r2, r8
 8006a42:	189b      	adds	r3, r3, r2
 8006a44:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a46:	464b      	mov	r3, r9
 8006a48:	460a      	mov	r2, r1
 8006a4a:	eb42 0303 	adc.w	r3, r2, r3
 8006a4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	663b      	str	r3, [r7, #96]	; 0x60
 8006a5a:	667a      	str	r2, [r7, #100]	; 0x64
 8006a5c:	f04f 0200 	mov.w	r2, #0
 8006a60:	f04f 0300 	mov.w	r3, #0
 8006a64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006a68:	4649      	mov	r1, r9
 8006a6a:	008b      	lsls	r3, r1, #2
 8006a6c:	4641      	mov	r1, r8
 8006a6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a72:	4641      	mov	r1, r8
 8006a74:	008a      	lsls	r2, r1, #2
 8006a76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006a7a:	f7f9 fe07 	bl	800068c <__aeabi_uldivmod>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	460b      	mov	r3, r1
 8006a82:	4b0d      	ldr	r3, [pc, #52]	; (8006ab8 <UART_SetConfig+0x4e4>)
 8006a84:	fba3 1302 	umull	r1, r3, r3, r2
 8006a88:	095b      	lsrs	r3, r3, #5
 8006a8a:	2164      	movs	r1, #100	; 0x64
 8006a8c:	fb01 f303 	mul.w	r3, r1, r3
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	011b      	lsls	r3, r3, #4
 8006a94:	3332      	adds	r3, #50	; 0x32
 8006a96:	4a08      	ldr	r2, [pc, #32]	; (8006ab8 <UART_SetConfig+0x4e4>)
 8006a98:	fba2 2303 	umull	r2, r3, r2, r3
 8006a9c:	095b      	lsrs	r3, r3, #5
 8006a9e:	f003 020f 	and.w	r2, r3, #15
 8006aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4422      	add	r2, r4
 8006aaa:	609a      	str	r2, [r3, #8]
}
 8006aac:	bf00      	nop
 8006aae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ab8:	51eb851f 	.word	0x51eb851f

08006abc <memset>:
 8006abc:	4402      	add	r2, r0
 8006abe:	4603      	mov	r3, r0
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d100      	bne.n	8006ac6 <memset+0xa>
 8006ac4:	4770      	bx	lr
 8006ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8006aca:	e7f9      	b.n	8006ac0 <memset+0x4>

08006acc <__libc_init_array>:
 8006acc:	b570      	push	{r4, r5, r6, lr}
 8006ace:	4d0d      	ldr	r5, [pc, #52]	; (8006b04 <__libc_init_array+0x38>)
 8006ad0:	4c0d      	ldr	r4, [pc, #52]	; (8006b08 <__libc_init_array+0x3c>)
 8006ad2:	1b64      	subs	r4, r4, r5
 8006ad4:	10a4      	asrs	r4, r4, #2
 8006ad6:	2600      	movs	r6, #0
 8006ad8:	42a6      	cmp	r6, r4
 8006ada:	d109      	bne.n	8006af0 <__libc_init_array+0x24>
 8006adc:	4d0b      	ldr	r5, [pc, #44]	; (8006b0c <__libc_init_array+0x40>)
 8006ade:	4c0c      	ldr	r4, [pc, #48]	; (8006b10 <__libc_init_array+0x44>)
 8006ae0:	f000 f818 	bl	8006b14 <_init>
 8006ae4:	1b64      	subs	r4, r4, r5
 8006ae6:	10a4      	asrs	r4, r4, #2
 8006ae8:	2600      	movs	r6, #0
 8006aea:	42a6      	cmp	r6, r4
 8006aec:	d105      	bne.n	8006afa <__libc_init_array+0x2e>
 8006aee:	bd70      	pop	{r4, r5, r6, pc}
 8006af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006af4:	4798      	blx	r3
 8006af6:	3601      	adds	r6, #1
 8006af8:	e7ee      	b.n	8006ad8 <__libc_init_array+0xc>
 8006afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006afe:	4798      	blx	r3
 8006b00:	3601      	adds	r6, #1
 8006b02:	e7f2      	b.n	8006aea <__libc_init_array+0x1e>
 8006b04:	08006b4c 	.word	0x08006b4c
 8006b08:	08006b4c 	.word	0x08006b4c
 8006b0c:	08006b4c 	.word	0x08006b4c
 8006b10:	08006b50 	.word	0x08006b50

08006b14 <_init>:
 8006b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b16:	bf00      	nop
 8006b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b1a:	bc08      	pop	{r3}
 8006b1c:	469e      	mov	lr, r3
 8006b1e:	4770      	bx	lr

08006b20 <_fini>:
 8006b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b22:	bf00      	nop
 8006b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b26:	bc08      	pop	{r3}
 8006b28:	469e      	mov	lr, r3
 8006b2a:	4770      	bx	lr
