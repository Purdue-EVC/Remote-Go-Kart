
RCGoKart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab04  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  0800acd8  0800acd8  0001acd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b06c  0800b06c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b06c  0800b06c  0001b06c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b074  0800b074  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b074  0800b074  0001b074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b078  0800b078  0001b078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b07c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c0  200001e4  0800b260  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007a4  0800b260  000207a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000086  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017052  00000000  00000000  0002029a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030ae  00000000  00000000  000372ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001598  00000000  00000000  0003a3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000110a  00000000  00000000  0003b938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025eaf  00000000  00000000  0003ca42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ab02  00000000  00000000  000628f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9980  00000000  00000000  0007d3f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006cb0  00000000  00000000  00166d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0016da24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800acbc 	.word	0x0800acbc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	0800acbc 	.word	0x0800acbc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c3c:	f000 b970 	b.w	8000f20 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9e08      	ldr	r6, [sp, #32]
 8000c5e:	460d      	mov	r5, r1
 8000c60:	4604      	mov	r4, r0
 8000c62:	460f      	mov	r7, r1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d14a      	bne.n	8000cfe <__udivmoddi4+0xa6>
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	4694      	mov	ip, r2
 8000c6c:	d965      	bls.n	8000d3a <__udivmoddi4+0xe2>
 8000c6e:	fab2 f382 	clz	r3, r2
 8000c72:	b143      	cbz	r3, 8000c86 <__udivmoddi4+0x2e>
 8000c74:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c78:	f1c3 0220 	rsb	r2, r3, #32
 8000c7c:	409f      	lsls	r7, r3
 8000c7e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c82:	4317      	orrs	r7, r2
 8000c84:	409c      	lsls	r4, r3
 8000c86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c8a:	fa1f f58c 	uxth.w	r5, ip
 8000c8e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c92:	0c22      	lsrs	r2, r4, #16
 8000c94:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c98:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c9c:	fb01 f005 	mul.w	r0, r1, r5
 8000ca0:	4290      	cmp	r0, r2
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x62>
 8000ca4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cac:	f080 811c 	bcs.w	8000ee8 <__udivmoddi4+0x290>
 8000cb0:	4290      	cmp	r0, r2
 8000cb2:	f240 8119 	bls.w	8000ee8 <__udivmoddi4+0x290>
 8000cb6:	3902      	subs	r1, #2
 8000cb8:	4462      	add	r2, ip
 8000cba:	1a12      	subs	r2, r2, r0
 8000cbc:	b2a4      	uxth	r4, r4
 8000cbe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cc2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cc6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cca:	fb00 f505 	mul.w	r5, r0, r5
 8000cce:	42a5      	cmp	r5, r4
 8000cd0:	d90a      	bls.n	8000ce8 <__udivmoddi4+0x90>
 8000cd2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cda:	f080 8107 	bcs.w	8000eec <__udivmoddi4+0x294>
 8000cde:	42a5      	cmp	r5, r4
 8000ce0:	f240 8104 	bls.w	8000eec <__udivmoddi4+0x294>
 8000ce4:	4464      	add	r4, ip
 8000ce6:	3802      	subs	r0, #2
 8000ce8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cec:	1b64      	subs	r4, r4, r5
 8000cee:	2100      	movs	r1, #0
 8000cf0:	b11e      	cbz	r6, 8000cfa <__udivmoddi4+0xa2>
 8000cf2:	40dc      	lsrs	r4, r3
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0xbc>
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	f000 80ed 	beq.w	8000ee2 <__udivmoddi4+0x28a>
 8000d08:	2100      	movs	r1, #0
 8000d0a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d14:	fab3 f183 	clz	r1, r3
 8000d18:	2900      	cmp	r1, #0
 8000d1a:	d149      	bne.n	8000db0 <__udivmoddi4+0x158>
 8000d1c:	42ab      	cmp	r3, r5
 8000d1e:	d302      	bcc.n	8000d26 <__udivmoddi4+0xce>
 8000d20:	4282      	cmp	r2, r0
 8000d22:	f200 80f8 	bhi.w	8000f16 <__udivmoddi4+0x2be>
 8000d26:	1a84      	subs	r4, r0, r2
 8000d28:	eb65 0203 	sbc.w	r2, r5, r3
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	4617      	mov	r7, r2
 8000d30:	2e00      	cmp	r6, #0
 8000d32:	d0e2      	beq.n	8000cfa <__udivmoddi4+0xa2>
 8000d34:	e9c6 4700 	strd	r4, r7, [r6]
 8000d38:	e7df      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000d3a:	b902      	cbnz	r2, 8000d3e <__udivmoddi4+0xe6>
 8000d3c:	deff      	udf	#255	; 0xff
 8000d3e:	fab2 f382 	clz	r3, r2
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f040 8090 	bne.w	8000e68 <__udivmoddi4+0x210>
 8000d48:	1a8a      	subs	r2, r1, r2
 8000d4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4e:	fa1f fe8c 	uxth.w	lr, ip
 8000d52:	2101      	movs	r1, #1
 8000d54:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d58:	fb07 2015 	mls	r0, r7, r5, r2
 8000d5c:	0c22      	lsrs	r2, r4, #16
 8000d5e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d62:	fb0e f005 	mul.w	r0, lr, r5
 8000d66:	4290      	cmp	r0, r2
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x124>
 8000d6a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d6e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x122>
 8000d74:	4290      	cmp	r0, r2
 8000d76:	f200 80cb 	bhi.w	8000f10 <__udivmoddi4+0x2b8>
 8000d7a:	4645      	mov	r5, r8
 8000d7c:	1a12      	subs	r2, r2, r0
 8000d7e:	b2a4      	uxth	r4, r4
 8000d80:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d84:	fb07 2210 	mls	r2, r7, r0, r2
 8000d88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d8c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d90:	45a6      	cmp	lr, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x14e>
 8000d94:	eb1c 0404 	adds.w	r4, ip, r4
 8000d98:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x14c>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	f200 80bb 	bhi.w	8000f1a <__udivmoddi4+0x2c2>
 8000da4:	4610      	mov	r0, r2
 8000da6:	eba4 040e 	sub.w	r4, r4, lr
 8000daa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dae:	e79f      	b.n	8000cf0 <__udivmoddi4+0x98>
 8000db0:	f1c1 0720 	rsb	r7, r1, #32
 8000db4:	408b      	lsls	r3, r1
 8000db6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dba:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dbe:	fa05 f401 	lsl.w	r4, r5, r1
 8000dc2:	fa20 f307 	lsr.w	r3, r0, r7
 8000dc6:	40fd      	lsrs	r5, r7
 8000dc8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dcc:	4323      	orrs	r3, r4
 8000dce:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dd2:	fa1f fe8c 	uxth.w	lr, ip
 8000dd6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dda:	0c1c      	lsrs	r4, r3, #16
 8000ddc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000de0:	fb08 f50e 	mul.w	r5, r8, lr
 8000de4:	42a5      	cmp	r5, r4
 8000de6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dea:	fa00 f001 	lsl.w	r0, r0, r1
 8000dee:	d90b      	bls.n	8000e08 <__udivmoddi4+0x1b0>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000df8:	f080 8088 	bcs.w	8000f0c <__udivmoddi4+0x2b4>
 8000dfc:	42a5      	cmp	r5, r4
 8000dfe:	f240 8085 	bls.w	8000f0c <__udivmoddi4+0x2b4>
 8000e02:	f1a8 0802 	sub.w	r8, r8, #2
 8000e06:	4464      	add	r4, ip
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	b29d      	uxth	r5, r3
 8000e0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e10:	fb09 4413 	mls	r4, r9, r3, r4
 8000e14:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e18:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e1c:	45a6      	cmp	lr, r4
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x1da>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e28:	d26c      	bcs.n	8000f04 <__udivmoddi4+0x2ac>
 8000e2a:	45a6      	cmp	lr, r4
 8000e2c:	d96a      	bls.n	8000f04 <__udivmoddi4+0x2ac>
 8000e2e:	3b02      	subs	r3, #2
 8000e30:	4464      	add	r4, ip
 8000e32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e36:	fba3 9502 	umull	r9, r5, r3, r2
 8000e3a:	eba4 040e 	sub.w	r4, r4, lr
 8000e3e:	42ac      	cmp	r4, r5
 8000e40:	46c8      	mov	r8, r9
 8000e42:	46ae      	mov	lr, r5
 8000e44:	d356      	bcc.n	8000ef4 <__udivmoddi4+0x29c>
 8000e46:	d053      	beq.n	8000ef0 <__udivmoddi4+0x298>
 8000e48:	b156      	cbz	r6, 8000e60 <__udivmoddi4+0x208>
 8000e4a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e4e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e52:	fa04 f707 	lsl.w	r7, r4, r7
 8000e56:	40ca      	lsrs	r2, r1
 8000e58:	40cc      	lsrs	r4, r1
 8000e5a:	4317      	orrs	r7, r2
 8000e5c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e60:	4618      	mov	r0, r3
 8000e62:	2100      	movs	r1, #0
 8000e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e68:	f1c3 0120 	rsb	r1, r3, #32
 8000e6c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e70:	fa20 f201 	lsr.w	r2, r0, r1
 8000e74:	fa25 f101 	lsr.w	r1, r5, r1
 8000e78:	409d      	lsls	r5, r3
 8000e7a:	432a      	orrs	r2, r5
 8000e7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1510 	mls	r5, r7, r0, r1
 8000e8c:	0c11      	lsrs	r1, r2, #16
 8000e8e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e92:	fb00 f50e 	mul.w	r5, r0, lr
 8000e96:	428d      	cmp	r5, r1
 8000e98:	fa04 f403 	lsl.w	r4, r4, r3
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x258>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ea6:	d22f      	bcs.n	8000f08 <__udivmoddi4+0x2b0>
 8000ea8:	428d      	cmp	r5, r1
 8000eaa:	d92d      	bls.n	8000f08 <__udivmoddi4+0x2b0>
 8000eac:	3802      	subs	r0, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1b49      	subs	r1, r1, r5
 8000eb2:	b292      	uxth	r2, r2
 8000eb4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000eb8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ebc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ec0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ec4:	4291      	cmp	r1, r2
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x282>
 8000ec8:	eb1c 0202 	adds.w	r2, ip, r2
 8000ecc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ed0:	d216      	bcs.n	8000f00 <__udivmoddi4+0x2a8>
 8000ed2:	4291      	cmp	r1, r2
 8000ed4:	d914      	bls.n	8000f00 <__udivmoddi4+0x2a8>
 8000ed6:	3d02      	subs	r5, #2
 8000ed8:	4462      	add	r2, ip
 8000eda:	1a52      	subs	r2, r2, r1
 8000edc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ee0:	e738      	b.n	8000d54 <__udivmoddi4+0xfc>
 8000ee2:	4631      	mov	r1, r6
 8000ee4:	4630      	mov	r0, r6
 8000ee6:	e708      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000ee8:	4639      	mov	r1, r7
 8000eea:	e6e6      	b.n	8000cba <__udivmoddi4+0x62>
 8000eec:	4610      	mov	r0, r2
 8000eee:	e6fb      	b.n	8000ce8 <__udivmoddi4+0x90>
 8000ef0:	4548      	cmp	r0, r9
 8000ef2:	d2a9      	bcs.n	8000e48 <__udivmoddi4+0x1f0>
 8000ef4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000efc:	3b01      	subs	r3, #1
 8000efe:	e7a3      	b.n	8000e48 <__udivmoddi4+0x1f0>
 8000f00:	4645      	mov	r5, r8
 8000f02:	e7ea      	b.n	8000eda <__udivmoddi4+0x282>
 8000f04:	462b      	mov	r3, r5
 8000f06:	e794      	b.n	8000e32 <__udivmoddi4+0x1da>
 8000f08:	4640      	mov	r0, r8
 8000f0a:	e7d1      	b.n	8000eb0 <__udivmoddi4+0x258>
 8000f0c:	46d0      	mov	r8, sl
 8000f0e:	e77b      	b.n	8000e08 <__udivmoddi4+0x1b0>
 8000f10:	3d02      	subs	r5, #2
 8000f12:	4462      	add	r2, ip
 8000f14:	e732      	b.n	8000d7c <__udivmoddi4+0x124>
 8000f16:	4608      	mov	r0, r1
 8000f18:	e70a      	b.n	8000d30 <__udivmoddi4+0xd8>
 8000f1a:	4464      	add	r4, ip
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	e742      	b.n	8000da6 <__udivmoddi4+0x14e>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <HAL_TIM_IC_CaptureCallback>:

uint32_t ICValue = 0;
uint32_t Frequency = 0;
float Duty = 0;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // If the interrupt is triggered by channel 1
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	7f1b      	ldrb	r3, [r3, #28]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d124      	bne.n	8000f7e <HAL_TIM_IC_CaptureCallback+0x5a>
	{
		// Read the IC value
		ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000f34:	2100      	movs	r1, #0
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f006 f87a 	bl	8007030 <HAL_TIM_ReadCapturedValue>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4a12      	ldr	r2, [pc, #72]	; (8000f88 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000f40:	6013      	str	r3, [r2, #0]

		if (ICValue != 0)
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d019      	beq.n	8000f7e <HAL_TIM_IC_CaptureCallback+0x5a>
		{
			// calculate the Duty Cycle
			Duty = (HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) *100)/ICValue;
 8000f4a:	2104      	movs	r1, #4
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f006 f86f 	bl	8007030 <HAL_TIM_ReadCapturedValue>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2264      	movs	r2, #100	; 0x64
 8000f56:	fb03 f202 	mul.w	r2, r3, r2
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f62:	ee07 3a90 	vmov	s15, r3
 8000f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <HAL_TIM_IC_CaptureCallback+0x68>)
 8000f6c:	edc3 7a00 	vstr	s15, [r3]

			Frequency = 90000000/ICValue;
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a06      	ldr	r2, [pc, #24]	; (8000f90 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7a:	4a06      	ldr	r2, [pc, #24]	; (8000f94 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000f7c:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000600 	.word	0x20000600
 8000f8c:	20000608 	.word	0x20000608
 8000f90:	055d4a80 	.word	0x055d4a80
 8000f94:	20000604 	.word	0x20000604

08000f98 <steeringInput>:
const float drivingInputAbsoluteMax = 180000;
const float drivingInputAbsoluteMin = 80000;

uint16_t targetBrake = 4095;

float steeringInput(uint32_t rawSteeringInput){
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	if(rawSteeringInput > currentSteeringInputMax && rawSteeringInput < steeringInputAbsoluteMax){
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	ee07 3a90 	vmov	s15, r3
 8000fa6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000faa:	4b2d      	ldr	r3, [pc, #180]	; (8001060 <steeringInput+0xc8>)
 8000fac:	edd3 7a00 	vldr	s15, [r3]
 8000fb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb8:	dd13      	ble.n	8000fe2 <steeringInput+0x4a>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	ee07 3a90 	vmov	s15, r3
 8000fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fc4:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001064 <steeringInput+0xcc>
 8000fc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd0:	d507      	bpl.n	8000fe2 <steeringInput+0x4a>
		currentSteeringInputMax = rawSteeringInput;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	ee07 3a90 	vmov	s15, r3
 8000fd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fdc:	4b20      	ldr	r3, [pc, #128]	; (8001060 <steeringInput+0xc8>)
 8000fde:	edc3 7a00 	vstr	s15, [r3]
	}
	if(rawSteeringInput < currentSteeringInputMin && rawSteeringInput > steeringInputAbsoluteMin){
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	ee07 3a90 	vmov	s15, r3
 8000fe8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fec:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <steeringInput+0xd0>)
 8000fee:	edd3 7a00 	vldr	s15, [r3]
 8000ff2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffa:	d513      	bpl.n	8001024 <steeringInput+0x8c>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	ee07 3a90 	vmov	s15, r3
 8001002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001006:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800106c <steeringInput+0xd4>
 800100a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800100e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001012:	dd07      	ble.n	8001024 <steeringInput+0x8c>
		currentSteeringInputMin = rawSteeringInput;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	ee07 3a90 	vmov	s15, r3
 800101a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800101e:	4b12      	ldr	r3, [pc, #72]	; (8001068 <steeringInput+0xd0>)
 8001020:	edc3 7a00 	vstr	s15, [r3]
	}
	return (float)(rawSteeringInput-currentSteeringInputMin)/(currentSteeringInputMax-currentSteeringInputMin);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	ee07 3a90 	vmov	s15, r3
 800102a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <steeringInput+0xd0>)
 8001030:	edd3 7a00 	vldr	s15, [r3]
 8001034:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <steeringInput+0xc8>)
 800103a:	edd3 6a00 	vldr	s13, [r3]
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <steeringInput+0xd0>)
 8001040:	edd3 7a00 	vldr	s15, [r3]
 8001044:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001048:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800104c:	eef0 7a66 	vmov.f32	s15, s13
}
 8001050:	eeb0 0a67 	vmov.f32	s0, s15
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000000 	.word	0x20000000
 8001064:	482fc800 	.word	0x482fc800
 8001068:	20000004 	.word	0x20000004
 800106c:	479c4000 	.word	0x479c4000

08001070 <setSteeringMotor>:
float steeroutp = 0;

/**
 * Sets the brake motors power
 */
void setSteeringMotor(float power){
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	ed87 0a01 	vstr	s0, [r7, #4]
		steeroutp = power;
 800107a:	4a11      	ldr	r2, [pc, #68]	; (80010c0 <setSteeringMotor+0x50>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6013      	str	r3, [r2, #0]
		float out = (power)*180.0;//Converts the range 0 to 1, to 90 to 180 //Dont ask why its that range it just works
 8001080:	edd7 7a01 	vldr	s15, [r7, #4]
 8001084:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80010c4 <setSteeringMotor+0x54>
 8001088:	ee67 7a87 	vmul.f32	s15, s15, s14
 800108c:	edc7 7a03 	vstr	s15, [r7, #12]
		steerout = out;
 8001090:	4a0d      	ldr	r2, [pc, #52]	; (80010c8 <setSteeringMotor+0x58>)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	6013      	str	r3, [r2, #0]
		TIM10->CCR1 = out+45.0;
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f7ff fa76 	bl	8000588 <__aeabi_f2d>
 800109c:	f04f 0200 	mov.w	r2, #0
 80010a0:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <setSteeringMotor+0x5c>)
 80010a2:	f7ff f913 	bl	80002cc <__adddf3>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4c09      	ldr	r4, [pc, #36]	; (80010d0 <setSteeringMotor+0x60>)
 80010ac:	4610      	mov	r0, r2
 80010ae:	4619      	mov	r1, r3
 80010b0:	f7ff fd9a 	bl	8000be8 <__aeabi_d2uiz>
 80010b4:	4603      	mov	r3, r0
 80010b6:	6363      	str	r3, [r4, #52]	; 0x34
}
 80010b8:	bf00      	nop
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd90      	pop	{r4, r7, pc}
 80010c0:	20000610 	.word	0x20000610
 80010c4:	43340000 	.word	0x43340000
 80010c8:	2000060c 	.word	0x2000060c
 80010cc:	40468000 	.word	0x40468000
 80010d0:	40014400 	.word	0x40014400

080010d4 <setBrakes>:
short int bstate = 0;
void setBrakes(){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 80010d8:	482d      	ldr	r0, [pc, #180]	; (8001190 <setBrakes+0xbc>)
 80010da:	f001 ff83 	bl	8002fe4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 500);
 80010de:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80010e2:	482b      	ldr	r0, [pc, #172]	; (8001190 <setBrakes+0xbc>)
 80010e4:	f002 f883 	bl	80031ee <HAL_ADC_PollForConversion>
	brakePosition = HAL_ADC_GetValue(&hadc1);
 80010e8:	4829      	ldr	r0, [pc, #164]	; (8001190 <setBrakes+0xbc>)
 80010ea:	f002 fa1b 	bl	8003524 <HAL_ADC_GetValue>
 80010ee:	4603      	mov	r3, r0
 80010f0:	4a28      	ldr	r2, [pc, #160]	; (8001194 <setBrakes+0xc0>)
 80010f2:	6013      	str	r3, [r2, #0]
    HAL_ADC_Stop(&hadc1);
 80010f4:	4826      	ldr	r0, [pc, #152]	; (8001190 <setBrakes+0xbc>)
 80010f6:	f002 f847 	bl	8003188 <HAL_ADC_Stop>
	bstate = 0;
 80010fa:	4b27      	ldr	r3, [pc, #156]	; (8001198 <setBrakes+0xc4>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	801a      	strh	r2, [r3, #0]
	if(brakePosition>targetBrake){
 8001100:	4b26      	ldr	r3, [pc, #152]	; (800119c <setBrakes+0xc8>)
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	4b23      	ldr	r3, [pc, #140]	; (8001194 <setBrakes+0xc0>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	429a      	cmp	r2, r3
 800110c:	d20d      	bcs.n	800112a <setBrakes+0x56>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800110e:	2201      	movs	r2, #1
 8001110:	2104      	movs	r1, #4
 8001112:	4823      	ldr	r0, [pc, #140]	; (80011a0 <setBrakes+0xcc>)
 8001114:	f003 fabc 	bl	8004690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001118:	2200      	movs	r2, #0
 800111a:	2102      	movs	r1, #2
 800111c:	4820      	ldr	r0, [pc, #128]	; (80011a0 <setBrakes+0xcc>)
 800111e:	f003 fab7 	bl	8004690 <HAL_GPIO_WritePin>
		bstate = 0;
 8001122:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <setBrakes+0xc4>)
 8001124:	2200      	movs	r2, #0
 8001126:	801a      	strh	r2, [r3, #0]
//	GPIOA->OTYPER &= ~(1<<5);
//	GPIOA->OSPEEDR |= (1<<11);
//	GPIOA->PUPDR &= ~((1<<10) | (1<<11));
//	GPIOA->BSRR |= (1<<5);
	//GPIOA->BSRR |= (1<<21);  off
}
 8001128:	e02f      	b.n	800118a <setBrakes+0xb6>
	else if(brakePosition<targetBrake-100||(brakePosition<targetBrake&&targetBrake==4095)){
 800112a:	4b1c      	ldr	r3, [pc, #112]	; (800119c <setBrakes+0xc8>)
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	3b64      	subs	r3, #100	; 0x64
 8001130:	461a      	mov	r2, r3
 8001132:	4b18      	ldr	r3, [pc, #96]	; (8001194 <setBrakes+0xc0>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	429a      	cmp	r2, r3
 8001138:	d80c      	bhi.n	8001154 <setBrakes+0x80>
 800113a:	4b18      	ldr	r3, [pc, #96]	; (800119c <setBrakes+0xc8>)
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	4b14      	ldr	r3, [pc, #80]	; (8001194 <setBrakes+0xc0>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	429a      	cmp	r2, r3
 8001146:	d913      	bls.n	8001170 <setBrakes+0x9c>
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <setBrakes+0xc8>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001150:	4293      	cmp	r3, r2
 8001152:	d10d      	bne.n	8001170 <setBrakes+0x9c>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	2104      	movs	r1, #4
 8001158:	4811      	ldr	r0, [pc, #68]	; (80011a0 <setBrakes+0xcc>)
 800115a:	f003 fa99 	bl	8004690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800115e:	2201      	movs	r2, #1
 8001160:	2102      	movs	r1, #2
 8001162:	480f      	ldr	r0, [pc, #60]	; (80011a0 <setBrakes+0xcc>)
 8001164:	f003 fa94 	bl	8004690 <HAL_GPIO_WritePin>
		bstate = 1;
 8001168:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <setBrakes+0xc4>)
 800116a:	2201      	movs	r2, #1
 800116c:	801a      	strh	r2, [r3, #0]
}
 800116e:	e00c      	b.n	800118a <setBrakes+0xb6>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001170:	2200      	movs	r2, #0
 8001172:	2104      	movs	r1, #4
 8001174:	480a      	ldr	r0, [pc, #40]	; (80011a0 <setBrakes+0xcc>)
 8001176:	f003 fa8b 	bl	8004690 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	2102      	movs	r1, #2
 800117e:	4808      	ldr	r0, [pc, #32]	; (80011a0 <setBrakes+0xcc>)
 8001180:	f003 fa86 	bl	8004690 <HAL_GPIO_WritePin>
		bstate = 2;
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <setBrakes+0xc4>)
 8001186:	2202      	movs	r2, #2
 8001188:	801a      	strh	r2, [r3, #0]
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000200 	.word	0x20000200
 8001194:	200005fc 	.word	0x200005fc
 8001198:	20000614 	.word	0x20000614
 800119c:	20000008 	.word	0x20000008
 80011a0:	40020800 	.word	0x40020800
 80011a4:	00000000 	.word	0x00000000

080011a8 <setBrakeTarget>:

void setBrakeTarget(int request){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	if(request>7935){
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f5b3 5ff8 	cmp.w	r3, #7936	; 0x1f00
 80011b6:	db04      	blt.n	80011c2 <setBrakeTarget+0x1a>
		targetBrake = 4095;
 80011b8:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <setBrakeTarget+0x88>)
 80011ba:	f640 72ff 	movw	r2, #4095	; 0xfff
 80011be:	801a      	strh	r2, [r3, #0]
 80011c0:	e01e      	b.n	8001200 <setBrakeTarget+0x58>
	}
	else{
		targetBrake = ((request-5300)*.093)+3850;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f5a3 53a5 	sub.w	r3, r3, #5280	; 0x14a0
 80011c8:	3b14      	subs	r3, #20
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f9ca 	bl	8000564 <__aeabi_i2d>
 80011d0:	a313      	add	r3, pc, #76	; (adr r3, 8001220 <setBrakeTarget+0x78>)
 80011d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d6:	f7ff fa2f 	bl	8000638 <__aeabi_dmul>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	4610      	mov	r0, r2
 80011e0:	4619      	mov	r1, r3
 80011e2:	a311      	add	r3, pc, #68	; (adr r3, 8001228 <setBrakeTarget+0x80>)
 80011e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e8:	f7ff f870 	bl	80002cc <__adddf3>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4610      	mov	r0, r2
 80011f2:	4619      	mov	r1, r3
 80011f4:	f7ff fcf8 	bl	8000be8 <__aeabi_d2uiz>
 80011f8:	4603      	mov	r3, r0
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <setBrakeTarget+0x88>)
 80011fe:	801a      	strh	r2, [r3, #0]
	}
	if(targetBrake < 3850){
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <setBrakeTarget+0x88>)
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	f640 7209 	movw	r2, #3849	; 0xf09
 8001208:	4293      	cmp	r3, r2
 800120a:	d803      	bhi.n	8001214 <setBrakeTarget+0x6c>
		targetBrake  = 3850;
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <setBrakeTarget+0x88>)
 800120e:	f640 720a 	movw	r2, #3850	; 0xf0a
 8001212:	801a      	strh	r2, [r3, #0]
	}
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	f3af 8000 	nop.w
 8001220:	16872b02 	.word	0x16872b02
 8001224:	3fb7ced9 	.word	0x3fb7ced9
 8001228:	00000000 	.word	0x00000000
 800122c:	40ae1400 	.word	0x40ae1400
 8001230:	20000008 	.word	0x20000008

08001234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	hdac.State = HAL_DAC_STATE_RESET;
 800123a:	4b9f      	ldr	r3, [pc, #636]	; (80014b8 <main+0x284>)
 800123c:	2200      	movs	r2, #0
 800123e:	711a      	strb	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001240:	f001 fdf6 	bl	8002e30 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint16_t pwmBottomState = 5000;
 8001244:	f241 3388 	movw	r3, #5000	; 0x1388
 8001248:	80fb      	strh	r3, [r7, #6]
  uint16_t pwmLowState = 25000;
 800124a:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800124e:	80bb      	strh	r3, [r7, #4]
  uint16_t pwmHighState = 45000;
 8001250:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 8001254:	807b      	strh	r3, [r7, #2]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001256:	f000 f97b 	bl	8001550 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  RCC->AHB1ENR |= (1<<0);
 800125a:	4b98      	ldr	r3, [pc, #608]	; (80014bc <main+0x288>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a97      	ldr	r2, [pc, #604]	; (80014bc <main+0x288>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001266:	f001 f81d 	bl	80022a4 <MX_GPIO_Init>
  MX_DMA_Init();
 800126a:	f000 fffb 	bl	8002264 <MX_DMA_Init>
  MX_ADC1_Init();
 800126e:	f000 f9e5 	bl	800163c <MX_ADC1_Init>
  MX_TIM1_Init();
 8001272:	f000 faf1 	bl	8001858 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001276:	f000 fb8f 	bl	8001998 <MX_TIM2_Init>
  MX_TIM3_Init();
 800127a:	f000 fc29 	bl	8001ad0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800127e:	f000 fcc5 	bl	8001c0c <MX_TIM4_Init>
  MX_TIM5_Init();
 8001282:	f000 fd61 	bl	8001d48 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001286:	f000 fdfd 	bl	8001e84 <MX_TIM8_Init>
  MX_TIM10_Init();
 800128a:	f000 fe9b 	bl	8001fc4 <MX_TIM10_Init>
  MX_TIM11_Init();
 800128e:	f000 fee7 	bl	8002060 <MX_TIM11_Init>
  MX_TIM12_Init();
 8001292:	f000 ff33 	bl	80020fc <MX_TIM12_Init>
  MX_RTC_Init();
 8001296:	f000 fa7b 	bl	8001790 <MX_RTC_Init>
  MX_I2C2_Init();
 800129a:	f000 fa4b 	bl	8001734 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 800129e:	f000 ffb7 	bl	8002210 <MX_USART2_UART_Init>
  MX_DAC_Init();
 80012a2:	f000 fa1d 	bl	80016e0 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  //Starts HAL timing for input capture
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80012a6:	2100      	movs	r1, #0
 80012a8:	4885      	ldr	r0, [pc, #532]	; (80014c0 <main+0x28c>)
 80012aa:	f005 fa29 	bl	8006700 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 80012ae:	2104      	movs	r1, #4
 80012b0:	4883      	ldr	r0, [pc, #524]	; (80014c0 <main+0x28c>)
 80012b2:	f005 f949 	bl	8006548 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80012b6:	2100      	movs	r1, #0
 80012b8:	4882      	ldr	r0, [pc, #520]	; (80014c4 <main+0x290>)
 80012ba:	f005 fa21 	bl	8006700 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 80012be:	2104      	movs	r1, #4
 80012c0:	4880      	ldr	r0, [pc, #512]	; (80014c4 <main+0x290>)
 80012c2:	f005 f941 	bl	8006548 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80012c6:	2100      	movs	r1, #0
 80012c8:	487f      	ldr	r0, [pc, #508]	; (80014c8 <main+0x294>)
 80012ca:	f005 fa19 	bl	8006700 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 80012ce:	2104      	movs	r1, #4
 80012d0:	487d      	ldr	r0, [pc, #500]	; (80014c8 <main+0x294>)
 80012d2:	f005 f939 	bl	8006548 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80012d6:	2100      	movs	r1, #0
 80012d8:	487c      	ldr	r0, [pc, #496]	; (80014cc <main+0x298>)
 80012da:	f005 fa11 	bl	8006700 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2);
 80012de:	2104      	movs	r1, #4
 80012e0:	487a      	ldr	r0, [pc, #488]	; (80014cc <main+0x298>)
 80012e2:	f005 f931 	bl	8006548 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 80012e6:	2100      	movs	r1, #0
 80012e8:	4879      	ldr	r0, [pc, #484]	; (80014d0 <main+0x29c>)
 80012ea:	f005 fa09 	bl	8006700 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 80012ee:	2104      	movs	r1, #4
 80012f0:	4877      	ldr	r0, [pc, #476]	; (80014d0 <main+0x29c>)
 80012f2:	f005 f929 	bl	8006548 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_1);
 80012f6:	2100      	movs	r1, #0
 80012f8:	4876      	ldr	r0, [pc, #472]	; (80014d4 <main+0x2a0>)
 80012fa:	f005 fa01 	bl	8006700 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_2);
 80012fe:	2104      	movs	r1, #4
 8001300:	4874      	ldr	r0, [pc, #464]	; (80014d4 <main+0x2a0>)
 8001302:	f005 f921 	bl	8006548 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_1);
 8001306:	2100      	movs	r1, #0
 8001308:	4872      	ldr	r0, [pc, #456]	; (80014d4 <main+0x2a0>)
 800130a:	f005 f9f9 	bl	8006700 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_2);
 800130e:	2104      	movs	r1, #4
 8001310:	4870      	ldr	r0, [pc, #448]	; (80014d4 <main+0x2a0>)
 8001312:	f005 f919 	bl	8006548 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim12, TIM_CHANNEL_1);
 8001316:	2100      	movs	r1, #0
 8001318:	486f      	ldr	r0, [pc, #444]	; (80014d8 <main+0x2a4>)
 800131a:	f005 f9f1 	bl	8006700 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim12, TIM_CHANNEL_2);
 800131e:	2104      	movs	r1, #4
 8001320:	486d      	ldr	r0, [pc, #436]	; (80014d8 <main+0x2a4>)
 8001322:	f005 f911 	bl	8006548 <HAL_TIM_IC_Start>


  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001326:	2100      	movs	r1, #0
 8001328:	486c      	ldr	r0, [pc, #432]	; (80014dc <main+0x2a8>)
 800132a:	f004 ffeb 	bl	8006304 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800132e:	2100      	movs	r1, #0
 8001330:	486b      	ldr	r0, [pc, #428]	; (80014e0 <main+0x2ac>)
 8001332:	f004 ffe7 	bl	8006304 <HAL_TIM_PWM_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001336:	2100      	movs	r1, #0
 8001338:	485f      	ldr	r0, [pc, #380]	; (80014b8 <main+0x284>)
 800133a:	f002 fc8a 	bl	8003c52 <HAL_DAC_Start>

    /* USER CODE BEGIN 3 */
	  //E-STOP
	  //TIM4 Steering
//	  a=TIM8->CCR2;
	  tim1 = TIM1->CCR2;
 800133e:	4b69      	ldr	r3, [pc, #420]	; (80014e4 <main+0x2b0>)
 8001340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001342:	ee07 3a90 	vmov	s15, r3
 8001346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800134a:	4b67      	ldr	r3, [pc, #412]	; (80014e8 <main+0x2b4>)
 800134c:	edc3 7a00 	vstr	s15, [r3]
	  tim2 = TIM2->CCR2;
 8001350:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001356:	ee07 3a90 	vmov	s15, r3
 800135a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800135e:	4b63      	ldr	r3, [pc, #396]	; (80014ec <main+0x2b8>)
 8001360:	edc3 7a00 	vstr	s15, [r3]
	  tim3 = TIM3->CCR2;
 8001364:	4b62      	ldr	r3, [pc, #392]	; (80014f0 <main+0x2bc>)
 8001366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001368:	ee07 3a90 	vmov	s15, r3
 800136c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001370:	4b60      	ldr	r3, [pc, #384]	; (80014f4 <main+0x2c0>)
 8001372:	edc3 7a00 	vstr	s15, [r3]
	  tim4 = TIM4->CCR2;
 8001376:	4b60      	ldr	r3, [pc, #384]	; (80014f8 <main+0x2c4>)
 8001378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800137a:	ee07 3a90 	vmov	s15, r3
 800137e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001382:	4b5e      	ldr	r3, [pc, #376]	; (80014fc <main+0x2c8>)
 8001384:	edc3 7a00 	vstr	s15, [r3]
	  tim5 = TIM5->CCR2;
 8001388:	4b5d      	ldr	r3, [pc, #372]	; (8001500 <main+0x2cc>)
 800138a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800138c:	ee07 3a90 	vmov	s15, r3
 8001390:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001394:	4b5b      	ldr	r3, [pc, #364]	; (8001504 <main+0x2d0>)
 8001396:	edc3 7a00 	vstr	s15, [r3]
	  tim6 = TIM6->CCR2;
 800139a:	4b5b      	ldr	r3, [pc, #364]	; (8001508 <main+0x2d4>)
 800139c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800139e:	ee07 3a90 	vmov	s15, r3
 80013a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013a6:	4b59      	ldr	r3, [pc, #356]	; (800150c <main+0x2d8>)
 80013a8:	edc3 7a00 	vstr	s15, [r3]
	  tim7 = TIM7->CCR2;
 80013ac:	4b58      	ldr	r3, [pc, #352]	; (8001510 <main+0x2dc>)
 80013ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013b0:	ee07 3a90 	vmov	s15, r3
 80013b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013b8:	4b56      	ldr	r3, [pc, #344]	; (8001514 <main+0x2e0>)
 80013ba:	edc3 7a00 	vstr	s15, [r3]
	  tim8 = TIM8->CCR2;
 80013be:	4b56      	ldr	r3, [pc, #344]	; (8001518 <main+0x2e4>)
 80013c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013c2:	ee07 3a90 	vmov	s15, r3
 80013c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013ca:	4b54      	ldr	r3, [pc, #336]	; (800151c <main+0x2e8>)
 80013cc:	edc3 7a00 	vstr	s15, [r3]
	  tim9 = TIM9->CCR2;
 80013d0:	4b53      	ldr	r3, [pc, #332]	; (8001520 <main+0x2ec>)
 80013d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d4:	ee07 3a90 	vmov	s15, r3
 80013d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013dc:	4b51      	ldr	r3, [pc, #324]	; (8001524 <main+0x2f0>)
 80013de:	edc3 7a00 	vstr	s15, [r3]
	  tim10 = TIM10->CCR1;
 80013e2:	4b51      	ldr	r3, [pc, #324]	; (8001528 <main+0x2f4>)
 80013e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e6:	ee07 3a90 	vmov	s15, r3
 80013ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013ee:	4b4f      	ldr	r3, [pc, #316]	; (800152c <main+0x2f8>)
 80013f0:	edc3 7a00 	vstr	s15, [r3]
	  tim11 = TIM11->CCR1;
 80013f4:	4b4e      	ldr	r3, [pc, #312]	; (8001530 <main+0x2fc>)
 80013f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f8:	ee07 3a90 	vmov	s15, r3
 80013fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001400:	4b4c      	ldr	r3, [pc, #304]	; (8001534 <main+0x300>)
 8001402:	edc3 7a00 	vstr	s15, [r3]
	  tim12 = TIM12->CCR2;
 8001406:	4b4c      	ldr	r3, [pc, #304]	; (8001538 <main+0x304>)
 8001408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800140a:	ee07 3a90 	vmov	s15, r3
 800140e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001412:	4b4a      	ldr	r3, [pc, #296]	; (800153c <main+0x308>)
 8001414:	edc3 7a00 	vstr	s15, [r3]
	  if(TIM4->CCR2>pwmLowState){//Checking if E-Stop is switched to the high state, forces user on RC controller to switch the e-stop switch to start it
 8001418:	4b37      	ldr	r3, [pc, #220]	; (80014f8 <main+0x2c4>)
 800141a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800141c:	88bb      	ldrh	r3, [r7, #4]
 800141e:	429a      	cmp	r2, r3
 8001420:	d936      	bls.n	8001490 <main+0x25c>
//		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
		  //Inputs
		  steeringRequest = tim2;
 8001422:	4b32      	ldr	r3, [pc, #200]	; (80014ec <main+0x2b8>)
 8001424:	edd3 7a00 	vldr	s15, [r3]
 8001428:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800142c:	ee17 2a90 	vmov	r2, s15
 8001430:	4b43      	ldr	r3, [pc, #268]	; (8001540 <main+0x30c>)
 8001432:	601a      	str	r2, [r3, #0]
		  drivingRequest = TIM5->CCR2;
 8001434:	4b32      	ldr	r3, [pc, #200]	; (8001500 <main+0x2cc>)
 8001436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001438:	4a42      	ldr	r2, [pc, #264]	; (8001544 <main+0x310>)
 800143a:	6013      	str	r3, [r2, #0]
		  b = steeringInput(steeringRequest);
 800143c:	4b40      	ldr	r3, [pc, #256]	; (8001540 <main+0x30c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fda9 	bl	8000f98 <steeringInput>
 8001446:	eef0 7a40 	vmov.f32	s15, s0
 800144a:	4b3f      	ldr	r3, [pc, #252]	; (8001548 <main+0x314>)
 800144c:	edc3 7a00 	vstr	s15, [r3]
		  //State management
		  if(TIM1->CCR2<pwmBottomState){//Switch to RC mode, middle switch state
 8001450:	4b24      	ldr	r3, [pc, #144]	; (80014e4 <main+0x2b0>)
 8001452:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	429a      	cmp	r2, r3
 8001458:	d30b      	bcc.n	8001472 <main+0x23e>
			  //setSteeringMotor(getPIDPower(getEncoderAngle(), rawSteeringToAngle(b), (float)kHalDelay));

		  }
		  else if(TIM1->CCR2>pwmHighState){//Switch to auto mode, high switch state
 800145a:	4b22      	ldr	r3, [pc, #136]	; (80014e4 <main+0x2b0>)
 800145c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800145e:	887b      	ldrh	r3, [r7, #2]
 8001460:	429a      	cmp	r2, r3
 8001462:	d906      	bls.n	8001472 <main+0x23e>
//			  Manual RC Control
			  setSteeringMotor(b);
 8001464:	4b38      	ldr	r3, [pc, #224]	; (8001548 <main+0x314>)
 8001466:	edd3 7a00 	vldr	s15, [r3]
 800146a:	eeb0 0a67 	vmov.f32	s0, s15
 800146e:	f7ff fdff 	bl	8001070 <setSteeringMotor>
		  }
		  else{
			  //off state, low switch state
		  }

		  HAL_Delay(1);//For faster response decrease delay
 8001472:	2001      	movs	r0, #1
 8001474:	f001 fd4e 	bl	8002f14 <HAL_Delay>
		  setBrakeTarget(tim12);
 8001478:	4b30      	ldr	r3, [pc, #192]	; (800153c <main+0x308>)
 800147a:	edd3 7a00 	vldr	s15, [r3]
 800147e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001482:	ee17 0a90 	vmov	r0, s15
 8001486:	f7ff fe8f 	bl	80011a8 <setBrakeTarget>
		  setBrakes();
 800148a:	f7ff fe23 	bl	80010d4 <setBrakes>
 800148e:	e009      	b.n	80014a4 <main+0x270>
	  }
	  else{
//		  targetBrake = 4095;
		  //TODO: Debug Relay
//		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001490:	2200      	movs	r2, #0
 8001492:	2104      	movs	r1, #4
 8001494:	482d      	ldr	r0, [pc, #180]	; (800154c <main+0x318>)
 8001496:	f003 f8fb 	bl	8004690 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
 800149c:	2102      	movs	r1, #2
 800149e:	482b      	ldr	r0, [pc, #172]	; (800154c <main+0x318>)
 80014a0:	f003 f8f6 	bl	8004690 <HAL_GPIO_WritePin>
	  }
//	  setBrakes();

	  setBrakeTarget(tim12);
 80014a4:	4b25      	ldr	r3, [pc, #148]	; (800153c <main+0x308>)
 80014a6:	edd3 7a00 	vldr	s15, [r3]
 80014aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ae:	ee17 0a90 	vmov	r0, s15
 80014b2:	f7ff fe79 	bl	80011a8 <setBrakeTarget>
	  tim1 = TIM1->CCR2;
 80014b6:	e742      	b.n	800133e <main+0x10a>
 80014b8:	200002a8 	.word	0x200002a8
 80014bc:	40023800 	.word	0x40023800
 80014c0:	20000330 	.word	0x20000330
 80014c4:	20000378 	.word	0x20000378
 80014c8:	200003c0 	.word	0x200003c0
 80014cc:	20000408 	.word	0x20000408
 80014d0:	20000450 	.word	0x20000450
 80014d4:	20000498 	.word	0x20000498
 80014d8:	20000570 	.word	0x20000570
 80014dc:	200004e0 	.word	0x200004e0
 80014e0:	20000528 	.word	0x20000528
 80014e4:	40010000 	.word	0x40010000
 80014e8:	20000618 	.word	0x20000618
 80014ec:	2000061c 	.word	0x2000061c
 80014f0:	40000400 	.word	0x40000400
 80014f4:	20000620 	.word	0x20000620
 80014f8:	40000800 	.word	0x40000800
 80014fc:	20000624 	.word	0x20000624
 8001500:	40000c00 	.word	0x40000c00
 8001504:	20000628 	.word	0x20000628
 8001508:	40001000 	.word	0x40001000
 800150c:	2000062c 	.word	0x2000062c
 8001510:	40001400 	.word	0x40001400
 8001514:	20000630 	.word	0x20000630
 8001518:	40010400 	.word	0x40010400
 800151c:	20000634 	.word	0x20000634
 8001520:	40014000 	.word	0x40014000
 8001524:	20000638 	.word	0x20000638
 8001528:	40014400 	.word	0x40014400
 800152c:	2000063c 	.word	0x2000063c
 8001530:	40014800 	.word	0x40014800
 8001534:	20000640 	.word	0x20000640
 8001538:	40001800 	.word	0x40001800
 800153c:	20000644 	.word	0x20000644
 8001540:	2000000c 	.word	0x2000000c
 8001544:	2000064c 	.word	0x2000064c
 8001548:	20000648 	.word	0x20000648
 800154c:	40020800 	.word	0x40020800

08001550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b094      	sub	sp, #80	; 0x50
 8001554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001556:	f107 031c 	add.w	r3, r7, #28
 800155a:	2234      	movs	r2, #52	; 0x34
 800155c:	2100      	movs	r1, #0
 800155e:	4618      	mov	r0, r3
 8001560:	f007 fc18 	bl	8008d94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001564:	f107 0308 	add.w	r3, r7, #8
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001574:	2300      	movs	r3, #0
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	4b2e      	ldr	r3, [pc, #184]	; (8001634 <SystemClock_Config+0xe4>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	4a2d      	ldr	r2, [pc, #180]	; (8001634 <SystemClock_Config+0xe4>)
 800157e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001582:	6413      	str	r3, [r2, #64]	; 0x40
 8001584:	4b2b      	ldr	r3, [pc, #172]	; (8001634 <SystemClock_Config+0xe4>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001590:	2300      	movs	r3, #0
 8001592:	603b      	str	r3, [r7, #0]
 8001594:	4b28      	ldr	r3, [pc, #160]	; (8001638 <SystemClock_Config+0xe8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a27      	ldr	r2, [pc, #156]	; (8001638 <SystemClock_Config+0xe8>)
 800159a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	4b25      	ldr	r3, [pc, #148]	; (8001638 <SystemClock_Config+0xe8>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80015ac:	2309      	movs	r3, #9
 80015ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015b6:	2301      	movs	r3, #1
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80015ba:	2301      	movs	r3, #1
 80015bc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015be:	2302      	movs	r3, #2
 80015c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015c8:	2304      	movs	r3, #4
 80015ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80015cc:	23b4      	movs	r3, #180	; 0xb4
 80015ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015d0:	2302      	movs	r3, #2
 80015d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80015d4:	2302      	movs	r3, #2
 80015d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015d8:	2302      	movs	r3, #2
 80015da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015dc:	f107 031c 	add.w	r3, r7, #28
 80015e0:	4618      	mov	r0, r3
 80015e2:	f004 f877 	bl	80056d4 <HAL_RCC_OscConfig>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80015ec:	f000 fed8 	bl	80023a0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80015f0:	f003 f9ac 	bl	800494c <HAL_PWREx_EnableOverDrive>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <SystemClock_Config+0xae>
  {
    Error_Handler();
 80015fa:	f000 fed1 	bl	80023a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015fe:	230f      	movs	r3, #15
 8001600:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001602:	2302      	movs	r3, #2
 8001604:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800160a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800160e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001610:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001614:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001616:	f107 0308 	add.w	r3, r7, #8
 800161a:	2105      	movs	r1, #5
 800161c:	4618      	mov	r0, r3
 800161e:	f003 f9e5 	bl	80049ec <HAL_RCC_ClockConfig>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8001628:	f000 feba 	bl	80023a0 <Error_Handler>
  }
}
 800162c:	bf00      	nop
 800162e:	3750      	adds	r7, #80	; 0x50
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40023800 	.word	0x40023800
 8001638:	40007000 	.word	0x40007000

0800163c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001642:	463b      	mov	r3, r7
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800164e:	4b21      	ldr	r3, [pc, #132]	; (80016d4 <MX_ADC1_Init+0x98>)
 8001650:	4a21      	ldr	r2, [pc, #132]	; (80016d8 <MX_ADC1_Init+0x9c>)
 8001652:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001654:	4b1f      	ldr	r3, [pc, #124]	; (80016d4 <MX_ADC1_Init+0x98>)
 8001656:	2200      	movs	r2, #0
 8001658:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800165a:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <MX_ADC1_Init+0x98>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001660:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <MX_ADC1_Init+0x98>)
 8001662:	2201      	movs	r2, #1
 8001664:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001666:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <MX_ADC1_Init+0x98>)
 8001668:	2201      	movs	r2, #1
 800166a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800166c:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <MX_ADC1_Init+0x98>)
 800166e:	2200      	movs	r2, #0
 8001670:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001674:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <MX_ADC1_Init+0x98>)
 8001676:	2200      	movs	r2, #0
 8001678:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800167a:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <MX_ADC1_Init+0x98>)
 800167c:	4a17      	ldr	r2, [pc, #92]	; (80016dc <MX_ADC1_Init+0xa0>)
 800167e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001680:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <MX_ADC1_Init+0x98>)
 8001682:	2200      	movs	r2, #0
 8001684:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001686:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <MX_ADC1_Init+0x98>)
 8001688:	2201      	movs	r2, #1
 800168a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <MX_ADC1_Init+0x98>)
 800168e:	2201      	movs	r2, #1
 8001690:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <MX_ADC1_Init+0x98>)
 8001696:	2201      	movs	r2, #1
 8001698:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800169a:	480e      	ldr	r0, [pc, #56]	; (80016d4 <MX_ADC1_Init+0x98>)
 800169c:	f001 fc5e 	bl	8002f5c <HAL_ADC_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80016a6:	f000 fe7b 	bl	80023a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80016aa:	2307      	movs	r3, #7
 80016ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016ae:	2301      	movs	r3, #1
 80016b0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016b6:	463b      	mov	r3, r7
 80016b8:	4619      	mov	r1, r3
 80016ba:	4806      	ldr	r0, [pc, #24]	; (80016d4 <MX_ADC1_Init+0x98>)
 80016bc:	f001 ff5e 	bl	800357c <HAL_ADC_ConfigChannel>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80016c6:	f000 fe6b 	bl	80023a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000200 	.word	0x20000200
 80016d8:	40012000 	.word	0x40012000
 80016dc:	0f000001 	.word	0x0f000001

080016e0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80016e6:	463b      	mov	r3, r7
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80016ee:	4b0f      	ldr	r3, [pc, #60]	; (800172c <MX_DAC_Init+0x4c>)
 80016f0:	4a0f      	ldr	r2, [pc, #60]	; (8001730 <MX_DAC_Init+0x50>)
 80016f2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80016f4:	480d      	ldr	r0, [pc, #52]	; (800172c <MX_DAC_Init+0x4c>)
 80016f6:	f002 fa8a 	bl	8003c0e <HAL_DAC_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001700:	f000 fe4e 	bl	80023a0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001704:	2300      	movs	r3, #0
 8001706:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001708:	2300      	movs	r3, #0
 800170a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800170c:	463b      	mov	r3, r7
 800170e:	2200      	movs	r2, #0
 8001710:	4619      	mov	r1, r3
 8001712:	4806      	ldr	r0, [pc, #24]	; (800172c <MX_DAC_Init+0x4c>)
 8001714:	f002 faef 	bl	8003cf6 <HAL_DAC_ConfigChannel>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800171e:	f000 fe3f 	bl	80023a0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200002a8 	.word	0x200002a8
 8001730:	40007400 	.word	0x40007400

08001734 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <MX_I2C2_Init+0x50>)
 800173a:	4a13      	ldr	r2, [pc, #76]	; (8001788 <MX_I2C2_Init+0x54>)
 800173c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <MX_I2C2_Init+0x50>)
 8001740:	4a12      	ldr	r2, [pc, #72]	; (800178c <MX_I2C2_Init+0x58>)
 8001742:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <MX_I2C2_Init+0x50>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <MX_I2C2_Init+0x50>)
 800174c:	2200      	movs	r2, #0
 800174e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <MX_I2C2_Init+0x50>)
 8001752:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001756:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001758:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <MX_I2C2_Init+0x50>)
 800175a:	2200      	movs	r2, #0
 800175c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <MX_I2C2_Init+0x50>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001764:	4b07      	ldr	r3, [pc, #28]	; (8001784 <MX_I2C2_Init+0x50>)
 8001766:	2200      	movs	r2, #0
 8001768:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <MX_I2C2_Init+0x50>)
 800176c:	2200      	movs	r2, #0
 800176e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001770:	4804      	ldr	r0, [pc, #16]	; (8001784 <MX_I2C2_Init+0x50>)
 8001772:	f002 ffa7 	bl	80046c4 <HAL_I2C_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800177c:	f000 fe10 	bl	80023a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200002bc 	.word	0x200002bc
 8001788:	40005800 	.word	0x40005800
 800178c:	000186a0 	.word	0x000186a0

08001790 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80017a4:	2300      	movs	r3, #0
 80017a6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80017a8:	4b29      	ldr	r3, [pc, #164]	; (8001850 <MX_RTC_Init+0xc0>)
 80017aa:	4a2a      	ldr	r2, [pc, #168]	; (8001854 <MX_RTC_Init+0xc4>)
 80017ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80017ae:	4b28      	ldr	r3, [pc, #160]	; (8001850 <MX_RTC_Init+0xc0>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80017b4:	4b26      	ldr	r3, [pc, #152]	; (8001850 <MX_RTC_Init+0xc0>)
 80017b6:	227f      	movs	r2, #127	; 0x7f
 80017b8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80017ba:	4b25      	ldr	r3, [pc, #148]	; (8001850 <MX_RTC_Init+0xc0>)
 80017bc:	22ff      	movs	r2, #255	; 0xff
 80017be:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80017c0:	4b23      	ldr	r3, [pc, #140]	; (8001850 <MX_RTC_Init+0xc0>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80017c6:	4b22      	ldr	r3, [pc, #136]	; (8001850 <MX_RTC_Init+0xc0>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80017cc:	4b20      	ldr	r3, [pc, #128]	; (8001850 <MX_RTC_Init+0xc0>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80017d2:	481f      	ldr	r0, [pc, #124]	; (8001850 <MX_RTC_Init+0xc0>)
 80017d4:	f004 fa1c 	bl	8005c10 <HAL_RTC_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80017de:	f000 fddf 	bl	80023a0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	2201      	movs	r2, #1
 80017fa:	4619      	mov	r1, r3
 80017fc:	4814      	ldr	r0, [pc, #80]	; (8001850 <MX_RTC_Init+0xc0>)
 80017fe:	f004 fa7d 	bl	8005cfc <HAL_RTC_SetTime>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001808:	f000 fdca 	bl	80023a0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800180c:	2301      	movs	r3, #1
 800180e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001810:	2301      	movs	r3, #1
 8001812:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001814:	2301      	movs	r3, #1
 8001816:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001818:	2300      	movs	r3, #0
 800181a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800181c:	463b      	mov	r3, r7
 800181e:	2201      	movs	r2, #1
 8001820:	4619      	mov	r1, r3
 8001822:	480b      	ldr	r0, [pc, #44]	; (8001850 <MX_RTC_Init+0xc0>)
 8001824:	f004 fb04 	bl	8005e30 <HAL_RTC_SetDate>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800182e:	f000 fdb7 	bl	80023a0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001832:	2200      	movs	r2, #0
 8001834:	2100      	movs	r1, #0
 8001836:	4806      	ldr	r0, [pc, #24]	; (8001850 <MX_RTC_Init+0xc0>)
 8001838:	f004 fc1f 	bl	800607a <HAL_RTCEx_SetWakeUpTimer>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 8001842:	f000 fdad 	bl	80023a0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000310 	.word	0x20000310
 8001854:	40002800 	.word	0x40002800

08001858 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b090      	sub	sp, #64	; 0x40
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800185e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800186c:	f107 031c 	add.w	r3, r7, #28
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800187c:	f107 030c 	add.w	r3, r7, #12
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800188a:	1d3b      	adds	r3, r7, #4
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001892:	4b3f      	ldr	r3, [pc, #252]	; (8001990 <MX_TIM1_Init+0x138>)
 8001894:	4a3f      	ldr	r2, [pc, #252]	; (8001994 <MX_TIM1_Init+0x13c>)
 8001896:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001898:	4b3d      	ldr	r3, [pc, #244]	; (8001990 <MX_TIM1_Init+0x138>)
 800189a:	2200      	movs	r2, #0
 800189c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800189e:	4b3c      	ldr	r3, [pc, #240]	; (8001990 <MX_TIM1_Init+0x138>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80018a4:	4b3a      	ldr	r3, [pc, #232]	; (8001990 <MX_TIM1_Init+0x138>)
 80018a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ac:	4b38      	ldr	r3, [pc, #224]	; (8001990 <MX_TIM1_Init+0x138>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018b2:	4b37      	ldr	r3, [pc, #220]	; (8001990 <MX_TIM1_Init+0x138>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b8:	4b35      	ldr	r3, [pc, #212]	; (8001990 <MX_TIM1_Init+0x138>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018be:	4834      	ldr	r0, [pc, #208]	; (8001990 <MX_TIM1_Init+0x138>)
 80018c0:	f004 fc78 	bl	80061b4 <HAL_TIM_Base_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80018ca:	f000 fd69 	bl	80023a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018d8:	4619      	mov	r1, r3
 80018da:	482d      	ldr	r0, [pc, #180]	; (8001990 <MX_TIM1_Init+0x138>)
 80018dc:	f005 fa9e 	bl	8006e1c <HAL_TIM_ConfigClockSource>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80018e6:	f000 fd5b 	bl	80023a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80018ea:	4829      	ldr	r0, [pc, #164]	; (8001990 <MX_TIM1_Init+0x138>)
 80018ec:	f004 fdd2 	bl	8006494 <HAL_TIM_IC_Init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80018f6:	f000 fd53 	bl	80023a0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80018fa:	2304      	movs	r3, #4
 80018fc:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80018fe:	2350      	movs	r3, #80	; 0x50
 8001900:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001902:	2300      	movs	r3, #0
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001906:	2300      	movs	r3, #0
 8001908:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800190e:	f107 031c 	add.w	r3, r7, #28
 8001912:	4619      	mov	r1, r3
 8001914:	481e      	ldr	r0, [pc, #120]	; (8001990 <MX_TIM1_Init+0x138>)
 8001916:	f005 fb48 	bl	8006faa <HAL_TIM_SlaveConfigSynchro>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001920:	f000 fd3e 	bl	80023a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001928:	2301      	movs	r3, #1
 800192a:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001934:	f107 030c 	add.w	r3, r7, #12
 8001938:	2200      	movs	r2, #0
 800193a:	4619      	mov	r1, r3
 800193c:	4814      	ldr	r0, [pc, #80]	; (8001990 <MX_TIM1_Init+0x138>)
 800193e:	f005 f90f 	bl	8006b60 <HAL_TIM_IC_ConfigChannel>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001948:	f000 fd2a 	bl	80023a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800194c:	2302      	movs	r3, #2
 800194e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001950:	2302      	movs	r3, #2
 8001952:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001954:	f107 030c 	add.w	r3, r7, #12
 8001958:	2204      	movs	r2, #4
 800195a:	4619      	mov	r1, r3
 800195c:	480c      	ldr	r0, [pc, #48]	; (8001990 <MX_TIM1_Init+0x138>)
 800195e:	f005 f8ff 	bl	8006b60 <HAL_TIM_IC_ConfigChannel>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001968:	f000 fd1a 	bl	80023a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800196c:	2300      	movs	r3, #0
 800196e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001970:	2300      	movs	r3, #0
 8001972:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001974:	1d3b      	adds	r3, r7, #4
 8001976:	4619      	mov	r1, r3
 8001978:	4805      	ldr	r0, [pc, #20]	; (8001990 <MX_TIM1_Init+0x138>)
 800197a:	f006 f891 	bl	8007aa0 <HAL_TIMEx_MasterConfigSynchronization>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001984:	f000 fd0c 	bl	80023a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001988:	bf00      	nop
 800198a:	3740      	adds	r7, #64	; 0x40
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000330 	.word	0x20000330
 8001994:	40010000 	.word	0x40010000

08001998 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b090      	sub	sp, #64	; 0x40
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800199e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80019ac:	f107 031c 	add.w	r3, r7, #28
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80019bc:	f107 030c 	add.w	r3, r7, #12
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019d2:	4b3e      	ldr	r3, [pc, #248]	; (8001acc <MX_TIM2_Init+0x134>)
 80019d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019da:	4b3c      	ldr	r3, [pc, #240]	; (8001acc <MX_TIM2_Init+0x134>)
 80019dc:	2200      	movs	r2, #0
 80019de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e0:	4b3a      	ldr	r3, [pc, #232]	; (8001acc <MX_TIM2_Init+0x134>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80019e6:	4b39      	ldr	r3, [pc, #228]	; (8001acc <MX_TIM2_Init+0x134>)
 80019e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ee:	4b37      	ldr	r3, [pc, #220]	; (8001acc <MX_TIM2_Init+0x134>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f4:	4b35      	ldr	r3, [pc, #212]	; (8001acc <MX_TIM2_Init+0x134>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019fa:	4834      	ldr	r0, [pc, #208]	; (8001acc <MX_TIM2_Init+0x134>)
 80019fc:	f004 fbda 	bl	80061b4 <HAL_TIM_Base_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001a06:	f000 fccb 	bl	80023a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a0e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a14:	4619      	mov	r1, r3
 8001a16:	482d      	ldr	r0, [pc, #180]	; (8001acc <MX_TIM2_Init+0x134>)
 8001a18:	f005 fa00 	bl	8006e1c <HAL_TIM_ConfigClockSource>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001a22:	f000 fcbd 	bl	80023a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001a26:	4829      	ldr	r0, [pc, #164]	; (8001acc <MX_TIM2_Init+0x134>)
 8001a28:	f004 fd34 	bl	8006494 <HAL_TIM_IC_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001a32:	f000 fcb5 	bl	80023a0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001a36:	2304      	movs	r3, #4
 8001a38:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001a3a:	2350      	movs	r3, #80	; 0x50
 8001a3c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001a42:	2300      	movs	r3, #0
 8001a44:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001a4a:	f107 031c 	add.w	r3, r7, #28
 8001a4e:	4619      	mov	r1, r3
 8001a50:	481e      	ldr	r0, [pc, #120]	; (8001acc <MX_TIM2_Init+0x134>)
 8001a52:	f005 faaa 	bl	8006faa <HAL_TIM_SlaveConfigSynchro>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8001a5c:	f000 fca0 	bl	80023a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a64:	2301      	movs	r3, #1
 8001a66:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a70:	f107 030c 	add.w	r3, r7, #12
 8001a74:	2200      	movs	r2, #0
 8001a76:	4619      	mov	r1, r3
 8001a78:	4814      	ldr	r0, [pc, #80]	; (8001acc <MX_TIM2_Init+0x134>)
 8001a7a:	f005 f871 	bl	8006b60 <HAL_TIM_IC_ConfigChannel>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001a84:	f000 fc8c 	bl	80023a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001a90:	f107 030c 	add.w	r3, r7, #12
 8001a94:	2204      	movs	r2, #4
 8001a96:	4619      	mov	r1, r3
 8001a98:	480c      	ldr	r0, [pc, #48]	; (8001acc <MX_TIM2_Init+0x134>)
 8001a9a:	f005 f861 	bl	8006b60 <HAL_TIM_IC_ConfigChannel>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8001aa4:	f000 fc7c 	bl	80023a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ab0:	1d3b      	adds	r3, r7, #4
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4805      	ldr	r0, [pc, #20]	; (8001acc <MX_TIM2_Init+0x134>)
 8001ab6:	f005 fff3 	bl	8007aa0 <HAL_TIMEx_MasterConfigSynchronization>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 8001ac0:	f000 fc6e 	bl	80023a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ac4:	bf00      	nop
 8001ac6:	3740      	adds	r7, #64	; 0x40
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20000378 	.word	0x20000378

08001ad0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b090      	sub	sp, #64	; 0x40
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ad6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001ae4:	f107 031c 	add.w	r3, r7, #28
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001af4:	f107 030c 	add.w	r3, r7, #12
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b0a:	4b3e      	ldr	r3, [pc, #248]	; (8001c04 <MX_TIM3_Init+0x134>)
 8001b0c:	4a3e      	ldr	r2, [pc, #248]	; (8001c08 <MX_TIM3_Init+0x138>)
 8001b0e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b10:	4b3c      	ldr	r3, [pc, #240]	; (8001c04 <MX_TIM3_Init+0x134>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b16:	4b3b      	ldr	r3, [pc, #236]	; (8001c04 <MX_TIM3_Init+0x134>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b1c:	4b39      	ldr	r3, [pc, #228]	; (8001c04 <MX_TIM3_Init+0x134>)
 8001b1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b22:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b24:	4b37      	ldr	r3, [pc, #220]	; (8001c04 <MX_TIM3_Init+0x134>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b2a:	4b36      	ldr	r3, [pc, #216]	; (8001c04 <MX_TIM3_Init+0x134>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b30:	4834      	ldr	r0, [pc, #208]	; (8001c04 <MX_TIM3_Init+0x134>)
 8001b32:	f004 fb3f 	bl	80061b4 <HAL_TIM_Base_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001b3c:	f000 fc30 	bl	80023a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b44:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	482d      	ldr	r0, [pc, #180]	; (8001c04 <MX_TIM3_Init+0x134>)
 8001b4e:	f005 f965 	bl	8006e1c <HAL_TIM_ConfigClockSource>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001b58:	f000 fc22 	bl	80023a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001b5c:	4829      	ldr	r0, [pc, #164]	; (8001c04 <MX_TIM3_Init+0x134>)
 8001b5e:	f004 fc99 	bl	8006494 <HAL_TIM_IC_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001b68:	f000 fc1a 	bl	80023a0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001b70:	2350      	movs	r3, #80	; 0x50
 8001b72:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b74:	2300      	movs	r3, #0
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001b80:	f107 031c 	add.w	r3, r7, #28
 8001b84:	4619      	mov	r1, r3
 8001b86:	481f      	ldr	r0, [pc, #124]	; (8001c04 <MX_TIM3_Init+0x134>)
 8001b88:	f005 fa0f 	bl	8006faa <HAL_TIM_SlaveConfigSynchro>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8001b92:	f000 fc05 	bl	80023a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ba6:	f107 030c 	add.w	r3, r7, #12
 8001baa:	2200      	movs	r2, #0
 8001bac:	4619      	mov	r1, r3
 8001bae:	4815      	ldr	r0, [pc, #84]	; (8001c04 <MX_TIM3_Init+0x134>)
 8001bb0:	f004 ffd6 	bl	8006b60 <HAL_TIM_IC_ConfigChannel>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001bba:	f000 fbf1 	bl	80023a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001bc6:	f107 030c 	add.w	r3, r7, #12
 8001bca:	2204      	movs	r2, #4
 8001bcc:	4619      	mov	r1, r3
 8001bce:	480d      	ldr	r0, [pc, #52]	; (8001c04 <MX_TIM3_Init+0x134>)
 8001bd0:	f004 ffc6 	bl	8006b60 <HAL_TIM_IC_ConfigChannel>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 8001bda:	f000 fbe1 	bl	80023a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bde:	2300      	movs	r3, #0
 8001be0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	4619      	mov	r1, r3
 8001bea:	4806      	ldr	r0, [pc, #24]	; (8001c04 <MX_TIM3_Init+0x134>)
 8001bec:	f005 ff58 	bl	8007aa0 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM3_Init+0x12a>
  {
    Error_Handler();
 8001bf6:	f000 fbd3 	bl	80023a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bfa:	bf00      	nop
 8001bfc:	3740      	adds	r7, #64	; 0x40
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	200003c0 	.word	0x200003c0
 8001c08:	40000400 	.word	0x40000400

08001c0c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b090      	sub	sp, #64	; 0x40
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001c20:	f107 031c 	add.w	r3, r7, #28
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c3e:	1d3b      	adds	r3, r7, #4
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c46:	4b3e      	ldr	r3, [pc, #248]	; (8001d40 <MX_TIM4_Init+0x134>)
 8001c48:	4a3e      	ldr	r2, [pc, #248]	; (8001d44 <MX_TIM4_Init+0x138>)
 8001c4a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c4c:	4b3c      	ldr	r3, [pc, #240]	; (8001d40 <MX_TIM4_Init+0x134>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c52:	4b3b      	ldr	r3, [pc, #236]	; (8001d40 <MX_TIM4_Init+0x134>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c58:	4b39      	ldr	r3, [pc, #228]	; (8001d40 <MX_TIM4_Init+0x134>)
 8001c5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c5e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c60:	4b37      	ldr	r3, [pc, #220]	; (8001d40 <MX_TIM4_Init+0x134>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c66:	4b36      	ldr	r3, [pc, #216]	; (8001d40 <MX_TIM4_Init+0x134>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c6c:	4834      	ldr	r0, [pc, #208]	; (8001d40 <MX_TIM4_Init+0x134>)
 8001c6e:	f004 faa1 	bl	80061b4 <HAL_TIM_Base_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001c78:	f000 fb92 	bl	80023a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c80:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c86:	4619      	mov	r1, r3
 8001c88:	482d      	ldr	r0, [pc, #180]	; (8001d40 <MX_TIM4_Init+0x134>)
 8001c8a:	f005 f8c7 	bl	8006e1c <HAL_TIM_ConfigClockSource>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001c94:	f000 fb84 	bl	80023a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001c98:	4829      	ldr	r0, [pc, #164]	; (8001d40 <MX_TIM4_Init+0x134>)
 8001c9a:	f004 fbfb 	bl	8006494 <HAL_TIM_IC_Init>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001ca4:	f000 fb7c 	bl	80023a0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001ca8:	2304      	movs	r3, #4
 8001caa:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001cac:	2350      	movs	r3, #80	; 0x50
 8001cae:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001cbc:	f107 031c 	add.w	r3, r7, #28
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	481f      	ldr	r0, [pc, #124]	; (8001d40 <MX_TIM4_Init+0x134>)
 8001cc4:	f005 f971 	bl	8006faa <HAL_TIM_SlaveConfigSynchro>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 8001cce:	f000 fb67 	bl	80023a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ce2:	f107 030c 	add.w	r3, r7, #12
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4815      	ldr	r0, [pc, #84]	; (8001d40 <MX_TIM4_Init+0x134>)
 8001cec:	f004 ff38 	bl	8006b60 <HAL_TIM_IC_ConfigChannel>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8001cf6:	f000 fb53 	bl	80023a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001d02:	f107 030c 	add.w	r3, r7, #12
 8001d06:	2204      	movs	r2, #4
 8001d08:	4619      	mov	r1, r3
 8001d0a:	480d      	ldr	r0, [pc, #52]	; (8001d40 <MX_TIM4_Init+0x134>)
 8001d0c:	f004 ff28 	bl	8006b60 <HAL_TIM_IC_ConfigChannel>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_TIM4_Init+0x10e>
  {
    Error_Handler();
 8001d16:	f000 fb43 	bl	80023a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d22:	1d3b      	adds	r3, r7, #4
 8001d24:	4619      	mov	r1, r3
 8001d26:	4806      	ldr	r0, [pc, #24]	; (8001d40 <MX_TIM4_Init+0x134>)
 8001d28:	f005 feba 	bl	8007aa0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM4_Init+0x12a>
  {
    Error_Handler();
 8001d32:	f000 fb35 	bl	80023a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d36:	bf00      	nop
 8001d38:	3740      	adds	r7, #64	; 0x40
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000408 	.word	0x20000408
 8001d44:	40000800 	.word	0x40000800

08001d48 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b090      	sub	sp, #64	; 0x40
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001d5c:	f107 031c 	add.w	r3, r7, #28
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d6c:	f107 030c 	add.w	r3, r7, #12
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d7a:	1d3b      	adds	r3, r7, #4
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001d82:	4b3e      	ldr	r3, [pc, #248]	; (8001e7c <MX_TIM5_Init+0x134>)
 8001d84:	4a3e      	ldr	r2, [pc, #248]	; (8001e80 <MX_TIM5_Init+0x138>)
 8001d86:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001d88:	4b3c      	ldr	r3, [pc, #240]	; (8001e7c <MX_TIM5_Init+0x134>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d8e:	4b3b      	ldr	r3, [pc, #236]	; (8001e7c <MX_TIM5_Init+0x134>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001d94:	4b39      	ldr	r3, [pc, #228]	; (8001e7c <MX_TIM5_Init+0x134>)
 8001d96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d9a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d9c:	4b37      	ldr	r3, [pc, #220]	; (8001e7c <MX_TIM5_Init+0x134>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da2:	4b36      	ldr	r3, [pc, #216]	; (8001e7c <MX_TIM5_Init+0x134>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001da8:	4834      	ldr	r0, [pc, #208]	; (8001e7c <MX_TIM5_Init+0x134>)
 8001daa:	f004 fa03 	bl	80061b4 <HAL_TIM_Base_Init>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001db4:	f000 faf4 	bl	80023a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001db8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dbc:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001dbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	482d      	ldr	r0, [pc, #180]	; (8001e7c <MX_TIM5_Init+0x134>)
 8001dc6:	f005 f829 	bl	8006e1c <HAL_TIM_ConfigClockSource>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001dd0:	f000 fae6 	bl	80023a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001dd4:	4829      	ldr	r0, [pc, #164]	; (8001e7c <MX_TIM5_Init+0x134>)
 8001dd6:	f004 fb5d 	bl	8006494 <HAL_TIM_IC_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001de0:	f000 fade 	bl	80023a0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001de4:	2304      	movs	r3, #4
 8001de6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001de8:	2350      	movs	r3, #80	; 0x50
 8001dea:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001dec:	2300      	movs	r3, #0
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001df0:	2300      	movs	r3, #0
 8001df2:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8001df8:	f107 031c 	add.w	r3, r7, #28
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	481f      	ldr	r0, [pc, #124]	; (8001e7c <MX_TIM5_Init+0x134>)
 8001e00:	f005 f8d3 	bl	8006faa <HAL_TIM_SlaveConfigSynchro>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_TIM5_Init+0xc6>
  {
    Error_Handler();
 8001e0a:	f000 fac9 	bl	80023a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e12:	2301      	movs	r3, #1
 8001e14:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001e1e:	f107 030c 	add.w	r3, r7, #12
 8001e22:	2200      	movs	r2, #0
 8001e24:	4619      	mov	r1, r3
 8001e26:	4815      	ldr	r0, [pc, #84]	; (8001e7c <MX_TIM5_Init+0x134>)
 8001e28:	f004 fe9a 	bl	8006b60 <HAL_TIM_IC_ConfigChannel>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 8001e32:	f000 fab5 	bl	80023a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001e36:	2302      	movs	r3, #2
 8001e38:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001e3e:	f107 030c 	add.w	r3, r7, #12
 8001e42:	2204      	movs	r2, #4
 8001e44:	4619      	mov	r1, r3
 8001e46:	480d      	ldr	r0, [pc, #52]	; (8001e7c <MX_TIM5_Init+0x134>)
 8001e48:	f004 fe8a 	bl	8006b60 <HAL_TIM_IC_ConfigChannel>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_TIM5_Init+0x10e>
  {
    Error_Handler();
 8001e52:	f000 faa5 	bl	80023a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e56:	2300      	movs	r3, #0
 8001e58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e5e:	1d3b      	adds	r3, r7, #4
 8001e60:	4619      	mov	r1, r3
 8001e62:	4806      	ldr	r0, [pc, #24]	; (8001e7c <MX_TIM5_Init+0x134>)
 8001e64:	f005 fe1c 	bl	8007aa0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_TIM5_Init+0x12a>
  {
    Error_Handler();
 8001e6e:	f000 fa97 	bl	80023a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001e72:	bf00      	nop
 8001e74:	3740      	adds	r7, #64	; 0x40
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000450 	.word	0x20000450
 8001e80:	40000c00 	.word	0x40000c00

08001e84 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b090      	sub	sp, #64	; 0x40
 8001e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	605a      	str	r2, [r3, #4]
 8001e94:	609a      	str	r2, [r3, #8]
 8001e96:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001e98:	f107 031c 	add.w	r3, r7, #28
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ea8:	f107 030c 	add.w	r3, r7, #12
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb6:	1d3b      	adds	r3, r7, #4
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001ebe:	4b3f      	ldr	r3, [pc, #252]	; (8001fbc <MX_TIM8_Init+0x138>)
 8001ec0:	4a3f      	ldr	r2, [pc, #252]	; (8001fc0 <MX_TIM8_Init+0x13c>)
 8001ec2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001ec4:	4b3d      	ldr	r3, [pc, #244]	; (8001fbc <MX_TIM8_Init+0x138>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eca:	4b3c      	ldr	r3, [pc, #240]	; (8001fbc <MX_TIM8_Init+0x138>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001ed0:	4b3a      	ldr	r3, [pc, #232]	; (8001fbc <MX_TIM8_Init+0x138>)
 8001ed2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ed6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed8:	4b38      	ldr	r3, [pc, #224]	; (8001fbc <MX_TIM8_Init+0x138>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001ede:	4b37      	ldr	r3, [pc, #220]	; (8001fbc <MX_TIM8_Init+0x138>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee4:	4b35      	ldr	r3, [pc, #212]	; (8001fbc <MX_TIM8_Init+0x138>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001eea:	4834      	ldr	r0, [pc, #208]	; (8001fbc <MX_TIM8_Init+0x138>)
 8001eec:	f004 f962 	bl	80061b4 <HAL_TIM_Base_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001ef6:	f000 fa53 	bl	80023a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001efa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001efe:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001f00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f04:	4619      	mov	r1, r3
 8001f06:	482d      	ldr	r0, [pc, #180]	; (8001fbc <MX_TIM8_Init+0x138>)
 8001f08:	f004 ff88 	bl	8006e1c <HAL_TIM_ConfigClockSource>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8001f12:	f000 fa45 	bl	80023a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8001f16:	4829      	ldr	r0, [pc, #164]	; (8001fbc <MX_TIM8_Init+0x138>)
 8001f18:	f004 fabc 	bl	8006494 <HAL_TIM_IC_Init>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_TIM8_Init+0xa2>
  {
    Error_Handler();
 8001f22:	f000 fa3d 	bl	80023a0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001f26:	2304      	movs	r3, #4
 8001f28:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8001f2a:	2360      	movs	r3, #96	; 0x60
 8001f2c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001f32:	2300      	movs	r3, #0
 8001f34:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8001f3a:	f107 031c 	add.w	r3, r7, #28
 8001f3e:	4619      	mov	r1, r3
 8001f40:	481e      	ldr	r0, [pc, #120]	; (8001fbc <MX_TIM8_Init+0x138>)
 8001f42:	f005 f832 	bl	8006faa <HAL_TIM_SlaveConfigSynchro>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8001f4c:	f000 fa28 	bl	80023a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001f54:	2302      	movs	r3, #2
 8001f56:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001f60:	f107 030c 	add.w	r3, r7, #12
 8001f64:	2200      	movs	r2, #0
 8001f66:	4619      	mov	r1, r3
 8001f68:	4814      	ldr	r0, [pc, #80]	; (8001fbc <MX_TIM8_Init+0x138>)
 8001f6a:	f004 fdf9 	bl	8006b60 <HAL_TIM_IC_ConfigChannel>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8001f74:	f000 fa14 	bl	80023a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001f80:	f107 030c 	add.w	r3, r7, #12
 8001f84:	2204      	movs	r2, #4
 8001f86:	4619      	mov	r1, r3
 8001f88:	480c      	ldr	r0, [pc, #48]	; (8001fbc <MX_TIM8_Init+0x138>)
 8001f8a:	f004 fde9 	bl	8006b60 <HAL_TIM_IC_ConfigChannel>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM8_Init+0x114>
  {
    Error_Handler();
 8001f94:	f000 fa04 	bl	80023a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001fa0:	1d3b      	adds	r3, r7, #4
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4805      	ldr	r0, [pc, #20]	; (8001fbc <MX_TIM8_Init+0x138>)
 8001fa6:	f005 fd7b 	bl	8007aa0 <HAL_TIMEx_MasterConfigSynchronization>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8001fb0:	f000 f9f6 	bl	80023a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001fb4:	bf00      	nop
 8001fb6:	3740      	adds	r7, #64	; 0x40
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20000498 	.word	0x20000498
 8001fc0:	40010400 	.word	0x40010400

08001fc4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fca:	1d3b      	adds	r3, r7, #4
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
 8001fd8:	615a      	str	r2, [r3, #20]
 8001fda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001fdc:	4b1e      	ldr	r3, [pc, #120]	; (8002058 <MX_TIM10_Init+0x94>)
 8001fde:	4a1f      	ldr	r2, [pc, #124]	; (800205c <MX_TIM10_Init+0x98>)
 8001fe0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 999;
 8001fe2:	4b1d      	ldr	r3, [pc, #116]	; (8002058 <MX_TIM10_Init+0x94>)
 8001fe4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fe8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fea:	4b1b      	ldr	r3, [pc, #108]	; (8002058 <MX_TIM10_Init+0x94>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1800-1;
 8001ff0:	4b19      	ldr	r3, [pc, #100]	; (8002058 <MX_TIM10_Init+0x94>)
 8001ff2:	f240 7207 	movw	r2, #1799	; 0x707
 8001ff6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff8:	4b17      	ldr	r3, [pc, #92]	; (8002058 <MX_TIM10_Init+0x94>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ffe:	4b16      	ldr	r3, [pc, #88]	; (8002058 <MX_TIM10_Init+0x94>)
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002004:	4814      	ldr	r0, [pc, #80]	; (8002058 <MX_TIM10_Init+0x94>)
 8002006:	f004 f8d5 	bl	80061b4 <HAL_TIM_Base_Init>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 8002010:	f000 f9c6 	bl	80023a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002014:	4810      	ldr	r0, [pc, #64]	; (8002058 <MX_TIM10_Init+0x94>)
 8002016:	f004 f91c 	bl	8006252 <HAL_TIM_PWM_Init>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 8002020:	f000 f9be 	bl	80023a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002024:	2360      	movs	r3, #96	; 0x60
 8002026:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002028:	2300      	movs	r3, #0
 800202a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002034:	1d3b      	adds	r3, r7, #4
 8002036:	2200      	movs	r2, #0
 8002038:	4619      	mov	r1, r3
 800203a:	4807      	ldr	r0, [pc, #28]	; (8002058 <MX_TIM10_Init+0x94>)
 800203c:	f004 fe2c 	bl	8006c98 <HAL_TIM_PWM_ConfigChannel>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 8002046:	f000 f9ab 	bl	80023a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800204a:	4803      	ldr	r0, [pc, #12]	; (8002058 <MX_TIM10_Init+0x94>)
 800204c:	f000 fcf2 	bl	8002a34 <HAL_TIM_MspPostInit>

}
 8002050:	bf00      	nop
 8002052:	3720      	adds	r7, #32
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	200004e0 	.word	0x200004e0
 800205c:	40014400 	.word	0x40014400

08002060 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002066:	1d3b      	adds	r3, r7, #4
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
 8002074:	615a      	str	r2, [r3, #20]
 8002076:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002078:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <MX_TIM11_Init+0x94>)
 800207a:	4a1f      	ldr	r2, [pc, #124]	; (80020f8 <MX_TIM11_Init+0x98>)
 800207c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800207e:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <MX_TIM11_Init+0x94>)
 8002080:	2200      	movs	r2, #0
 8002082:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002084:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <MX_TIM11_Init+0x94>)
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1800-1;
 800208a:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <MX_TIM11_Init+0x94>)
 800208c:	f240 7207 	movw	r2, #1799	; 0x707
 8002090:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002092:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <MX_TIM11_Init+0x94>)
 8002094:	2200      	movs	r2, #0
 8002096:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002098:	4b16      	ldr	r3, [pc, #88]	; (80020f4 <MX_TIM11_Init+0x94>)
 800209a:	2200      	movs	r2, #0
 800209c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800209e:	4815      	ldr	r0, [pc, #84]	; (80020f4 <MX_TIM11_Init+0x94>)
 80020a0:	f004 f888 	bl	80061b4 <HAL_TIM_Base_Init>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80020aa:	f000 f979 	bl	80023a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80020ae:	4811      	ldr	r0, [pc, #68]	; (80020f4 <MX_TIM11_Init+0x94>)
 80020b0:	f004 f8cf 	bl	8006252 <HAL_TIM_PWM_Init>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80020ba:	f000 f971 	bl	80023a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020be:	2360      	movs	r3, #96	; 0x60
 80020c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020ce:	1d3b      	adds	r3, r7, #4
 80020d0:	2200      	movs	r2, #0
 80020d2:	4619      	mov	r1, r3
 80020d4:	4807      	ldr	r0, [pc, #28]	; (80020f4 <MX_TIM11_Init+0x94>)
 80020d6:	f004 fddf 	bl	8006c98 <HAL_TIM_PWM_ConfigChannel>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80020e0:	f000 f95e 	bl	80023a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80020e4:	4803      	ldr	r0, [pc, #12]	; (80020f4 <MX_TIM11_Init+0x94>)
 80020e6:	f000 fca5 	bl	8002a34 <HAL_TIM_MspPostInit>

}
 80020ea:	bf00      	nop
 80020ec:	3720      	adds	r7, #32
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000528 	.word	0x20000528
 80020f8:	40014800 	.word	0x40014800

080020fc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08e      	sub	sp, #56	; 0x38
 8002100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002102:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	605a      	str	r2, [r3, #4]
 800210c:	609a      	str	r2, [r3, #8]
 800210e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002110:	f107 0314 	add.w	r3, r7, #20
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002120:	1d3b      	adds	r3, r7, #4
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	605a      	str	r2, [r3, #4]
 8002128:	609a      	str	r2, [r3, #8]
 800212a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800212c:	4b36      	ldr	r3, [pc, #216]	; (8002208 <MX_TIM12_Init+0x10c>)
 800212e:	4a37      	ldr	r2, [pc, #220]	; (800220c <MX_TIM12_Init+0x110>)
 8002130:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 16;
 8002132:	4b35      	ldr	r3, [pc, #212]	; (8002208 <MX_TIM12_Init+0x10c>)
 8002134:	2210      	movs	r2, #16
 8002136:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002138:	4b33      	ldr	r3, [pc, #204]	; (8002208 <MX_TIM12_Init+0x10c>)
 800213a:	2200      	movs	r2, #0
 800213c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800213e:	4b32      	ldr	r3, [pc, #200]	; (8002208 <MX_TIM12_Init+0x10c>)
 8002140:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002144:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8002146:	4b30      	ldr	r3, [pc, #192]	; (8002208 <MX_TIM12_Init+0x10c>)
 8002148:	f44f 7280 	mov.w	r2, #256	; 0x100
 800214c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800214e:	4b2e      	ldr	r3, [pc, #184]	; (8002208 <MX_TIM12_Init+0x10c>)
 8002150:	2200      	movs	r2, #0
 8002152:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002154:	482c      	ldr	r0, [pc, #176]	; (8002208 <MX_TIM12_Init+0x10c>)
 8002156:	f004 f82d 	bl	80061b4 <HAL_TIM_Base_Init>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_TIM12_Init+0x68>
  {
    Error_Handler();
 8002160:	f000 f91e 	bl	80023a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002168:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800216a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800216e:	4619      	mov	r1, r3
 8002170:	4825      	ldr	r0, [pc, #148]	; (8002208 <MX_TIM12_Init+0x10c>)
 8002172:	f004 fe53 	bl	8006e1c <HAL_TIM_ConfigClockSource>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_TIM12_Init+0x84>
  {
    Error_Handler();
 800217c:	f000 f910 	bl	80023a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 8002180:	4821      	ldr	r0, [pc, #132]	; (8002208 <MX_TIM12_Init+0x10c>)
 8002182:	f004 f987 	bl	8006494 <HAL_TIM_IC_Init>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_TIM12_Init+0x94>
  {
    Error_Handler();
 800218c:	f000 f908 	bl	80023a0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002190:	2304      	movs	r3, #4
 8002192:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002194:	2350      	movs	r3, #80	; 0x50
 8002196:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002198:	2300      	movs	r3, #0
 800219a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800219c:	2300      	movs	r3, #0
 800219e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim12, &sSlaveConfig) != HAL_OK)
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	4619      	mov	r1, r3
 80021aa:	4817      	ldr	r0, [pc, #92]	; (8002208 <MX_TIM12_Init+0x10c>)
 80021ac:	f004 fefd 	bl	8006faa <HAL_TIM_SlaveConfigSynchro>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_TIM12_Init+0xbe>
  {
    Error_Handler();
 80021b6:	f000 f8f3 	bl	80023a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80021ba:	2300      	movs	r3, #0
 80021bc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80021be:	2301      	movs	r3, #1
 80021c0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80021ca:	1d3b      	adds	r3, r7, #4
 80021cc:	2200      	movs	r2, #0
 80021ce:	4619      	mov	r1, r3
 80021d0:	480d      	ldr	r0, [pc, #52]	; (8002208 <MX_TIM12_Init+0x10c>)
 80021d2:	f004 fcc5 	bl	8006b60 <HAL_TIM_IC_ConfigChannel>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_TIM12_Init+0xe4>
  {
    Error_Handler();
 80021dc:	f000 f8e0 	bl	80023a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80021e0:	2302      	movs	r3, #2
 80021e2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80021e4:	2302      	movs	r3, #2
 80021e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80021e8:	1d3b      	adds	r3, r7, #4
 80021ea:	2204      	movs	r2, #4
 80021ec:	4619      	mov	r1, r3
 80021ee:	4806      	ldr	r0, [pc, #24]	; (8002208 <MX_TIM12_Init+0x10c>)
 80021f0:	f004 fcb6 	bl	8006b60 <HAL_TIM_IC_ConfigChannel>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_TIM12_Init+0x102>
  {
    Error_Handler();
 80021fa:	f000 f8d1 	bl	80023a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80021fe:	bf00      	nop
 8002200:	3738      	adds	r7, #56	; 0x38
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000570 	.word	0x20000570
 800220c:	40001800 	.word	0x40001800

08002210 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002214:	4b11      	ldr	r3, [pc, #68]	; (800225c <MX_USART2_UART_Init+0x4c>)
 8002216:	4a12      	ldr	r2, [pc, #72]	; (8002260 <MX_USART2_UART_Init+0x50>)
 8002218:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800221a:	4b10      	ldr	r3, [pc, #64]	; (800225c <MX_USART2_UART_Init+0x4c>)
 800221c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002220:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002222:	4b0e      	ldr	r3, [pc, #56]	; (800225c <MX_USART2_UART_Init+0x4c>)
 8002224:	2200      	movs	r2, #0
 8002226:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002228:	4b0c      	ldr	r3, [pc, #48]	; (800225c <MX_USART2_UART_Init+0x4c>)
 800222a:	2200      	movs	r2, #0
 800222c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800222e:	4b0b      	ldr	r3, [pc, #44]	; (800225c <MX_USART2_UART_Init+0x4c>)
 8002230:	2200      	movs	r2, #0
 8002232:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002234:	4b09      	ldr	r3, [pc, #36]	; (800225c <MX_USART2_UART_Init+0x4c>)
 8002236:	220c      	movs	r2, #12
 8002238:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800223a:	4b08      	ldr	r3, [pc, #32]	; (800225c <MX_USART2_UART_Init+0x4c>)
 800223c:	2200      	movs	r2, #0
 800223e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002240:	4b06      	ldr	r3, [pc, #24]	; (800225c <MX_USART2_UART_Init+0x4c>)
 8002242:	2200      	movs	r2, #0
 8002244:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002246:	4805      	ldr	r0, [pc, #20]	; (800225c <MX_USART2_UART_Init+0x4c>)
 8002248:	f005 fcba 	bl	8007bc0 <HAL_UART_Init>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002252:	f000 f8a5 	bl	80023a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	200005b8 	.word	0x200005b8
 8002260:	40004400 	.word	0x40004400

08002264 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	607b      	str	r3, [r7, #4]
 800226e:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <MX_DMA_Init+0x3c>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	4a0b      	ldr	r2, [pc, #44]	; (80022a0 <MX_DMA_Init+0x3c>)
 8002274:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002278:	6313      	str	r3, [r2, #48]	; 0x30
 800227a:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <MX_DMA_Init+0x3c>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002282:	607b      	str	r3, [r7, #4]
 8002284:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002286:	2200      	movs	r2, #0
 8002288:	2100      	movs	r1, #0
 800228a:	2038      	movs	r0, #56	; 0x38
 800228c:	f001 fc89 	bl	8003ba2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002290:	2038      	movs	r0, #56	; 0x38
 8002292:	f001 fca2 	bl	8003bda <HAL_NVIC_EnableIRQ>

}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40023800 	.word	0x40023800

080022a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	; 0x28
 80022a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]
 80022b4:	609a      	str	r2, [r3, #8]
 80022b6:	60da      	str	r2, [r3, #12]
 80022b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	4b2d      	ldr	r3, [pc, #180]	; (8002374 <MX_GPIO_Init+0xd0>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a2c      	ldr	r2, [pc, #176]	; (8002374 <MX_GPIO_Init+0xd0>)
 80022c4:	f043 0304 	orr.w	r3, r3, #4
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b2a      	ldr	r3, [pc, #168]	; (8002374 <MX_GPIO_Init+0xd0>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	4b26      	ldr	r3, [pc, #152]	; (8002374 <MX_GPIO_Init+0xd0>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	4a25      	ldr	r2, [pc, #148]	; (8002374 <MX_GPIO_Init+0xd0>)
 80022e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022e4:	6313      	str	r3, [r2, #48]	; 0x30
 80022e6:	4b23      	ldr	r3, [pc, #140]	; (8002374 <MX_GPIO_Init+0xd0>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60bb      	str	r3, [r7, #8]
 80022f6:	4b1f      	ldr	r3, [pc, #124]	; (8002374 <MX_GPIO_Init+0xd0>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	4a1e      	ldr	r2, [pc, #120]	; (8002374 <MX_GPIO_Init+0xd0>)
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	6313      	str	r3, [r2, #48]	; 0x30
 8002302:	4b1c      	ldr	r3, [pc, #112]	; (8002374 <MX_GPIO_Init+0xd0>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	607b      	str	r3, [r7, #4]
 8002312:	4b18      	ldr	r3, [pc, #96]	; (8002374 <MX_GPIO_Init+0xd0>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a17      	ldr	r2, [pc, #92]	; (8002374 <MX_GPIO_Init+0xd0>)
 8002318:	f043 0302 	orr.w	r3, r3, #2
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b15      	ldr	r3, [pc, #84]	; (8002374 <MX_GPIO_Init+0xd0>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	607b      	str	r3, [r7, #4]
 8002328:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800232a:	2200      	movs	r2, #0
 800232c:	2107      	movs	r1, #7
 800232e:	4812      	ldr	r0, [pc, #72]	; (8002378 <MX_GPIO_Init+0xd4>)
 8002330:	f002 f9ae 	bl	8004690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002334:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800233a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800233e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	4619      	mov	r1, r3
 800234a:	480b      	ldr	r0, [pc, #44]	; (8002378 <MX_GPIO_Init+0xd4>)
 800234c:	f002 f80c 	bl	8004368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002350:	2307      	movs	r3, #7
 8002352:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002354:	2301      	movs	r3, #1
 8002356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800235c:	2303      	movs	r3, #3
 800235e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002360:	f107 0314 	add.w	r3, r7, #20
 8002364:	4619      	mov	r1, r3
 8002366:	4804      	ldr	r0, [pc, #16]	; (8002378 <MX_GPIO_Init+0xd4>)
 8002368:	f001 fffe 	bl	8004368 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800236c:	bf00      	nop
 800236e:	3728      	adds	r7, #40	; 0x28
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40023800 	.word	0x40023800
 8002378:	40020800 	.word	0x40020800

0800237c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002384:	1d39      	adds	r1, r7, #4
 8002386:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800238a:	2201      	movs	r2, #1
 800238c:	4803      	ldr	r0, [pc, #12]	; (800239c <__io_putchar+0x20>)
 800238e:	f005 fc64 	bl	8007c5a <HAL_UART_Transmit>

  return ch;
 8002392:	687b      	ldr	r3, [r7, #4]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	200005b8 	.word	0x200005b8

080023a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023a4:	b672      	cpsid	i
}
 80023a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023a8:	e7fe      	b.n	80023a8 <Error_Handler+0x8>
	...

080023ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	607b      	str	r3, [r7, #4]
 80023b6:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <HAL_MspInit+0x4c>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	4a0f      	ldr	r2, [pc, #60]	; (80023f8 <HAL_MspInit+0x4c>)
 80023bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023c0:	6453      	str	r3, [r2, #68]	; 0x44
 80023c2:	4b0d      	ldr	r3, [pc, #52]	; (80023f8 <HAL_MspInit+0x4c>)
 80023c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ca:	607b      	str	r3, [r7, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	603b      	str	r3, [r7, #0]
 80023d2:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <HAL_MspInit+0x4c>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	4a08      	ldr	r2, [pc, #32]	; (80023f8 <HAL_MspInit+0x4c>)
 80023d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023dc:	6413      	str	r3, [r2, #64]	; 0x40
 80023de:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <HAL_MspInit+0x4c>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e6:	603b      	str	r3, [r7, #0]
 80023e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80023ea:	2007      	movs	r0, #7
 80023ec:	f001 fbce 	bl	8003b8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023f0:	bf00      	nop
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40023800 	.word	0x40023800

080023fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08a      	sub	sp, #40	; 0x28
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002404:	f107 0314 	add.w	r3, r7, #20
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a33      	ldr	r2, [pc, #204]	; (80024e8 <HAL_ADC_MspInit+0xec>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d15f      	bne.n	80024de <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	613b      	str	r3, [r7, #16]
 8002422:	4b32      	ldr	r3, [pc, #200]	; (80024ec <HAL_ADC_MspInit+0xf0>)
 8002424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002426:	4a31      	ldr	r2, [pc, #196]	; (80024ec <HAL_ADC_MspInit+0xf0>)
 8002428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800242c:	6453      	str	r3, [r2, #68]	; 0x44
 800242e:	4b2f      	ldr	r3, [pc, #188]	; (80024ec <HAL_ADC_MspInit+0xf0>)
 8002430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002436:	613b      	str	r3, [r7, #16]
 8002438:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	4b2b      	ldr	r3, [pc, #172]	; (80024ec <HAL_ADC_MspInit+0xf0>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	4a2a      	ldr	r2, [pc, #168]	; (80024ec <HAL_ADC_MspInit+0xf0>)
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	6313      	str	r3, [r2, #48]	; 0x30
 800244a:	4b28      	ldr	r3, [pc, #160]	; (80024ec <HAL_ADC_MspInit+0xf0>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002456:	2380      	movs	r3, #128	; 0x80
 8002458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800245a:	2303      	movs	r3, #3
 800245c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2300      	movs	r3, #0
 8002460:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002462:	f107 0314 	add.w	r3, r7, #20
 8002466:	4619      	mov	r1, r3
 8002468:	4821      	ldr	r0, [pc, #132]	; (80024f0 <HAL_ADC_MspInit+0xf4>)
 800246a:	f001 ff7d 	bl	8004368 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800246e:	4b21      	ldr	r3, [pc, #132]	; (80024f4 <HAL_ADC_MspInit+0xf8>)
 8002470:	4a21      	ldr	r2, [pc, #132]	; (80024f8 <HAL_ADC_MspInit+0xfc>)
 8002472:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002474:	4b1f      	ldr	r3, [pc, #124]	; (80024f4 <HAL_ADC_MspInit+0xf8>)
 8002476:	2200      	movs	r2, #0
 8002478:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800247a:	4b1e      	ldr	r3, [pc, #120]	; (80024f4 <HAL_ADC_MspInit+0xf8>)
 800247c:	2200      	movs	r2, #0
 800247e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002480:	4b1c      	ldr	r3, [pc, #112]	; (80024f4 <HAL_ADC_MspInit+0xf8>)
 8002482:	2200      	movs	r2, #0
 8002484:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002486:	4b1b      	ldr	r3, [pc, #108]	; (80024f4 <HAL_ADC_MspInit+0xf8>)
 8002488:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800248c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800248e:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <HAL_ADC_MspInit+0xf8>)
 8002490:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002494:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002496:	4b17      	ldr	r3, [pc, #92]	; (80024f4 <HAL_ADC_MspInit+0xf8>)
 8002498:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800249c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800249e:	4b15      	ldr	r3, [pc, #84]	; (80024f4 <HAL_ADC_MspInit+0xf8>)
 80024a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024a4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80024a6:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <HAL_ADC_MspInit+0xf8>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024ac:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <HAL_ADC_MspInit+0xf8>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80024b2:	4810      	ldr	r0, [pc, #64]	; (80024f4 <HAL_ADC_MspInit+0xf8>)
 80024b4:	f001 fc6e 	bl	8003d94 <HAL_DMA_Init>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80024be:	f7ff ff6f 	bl	80023a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a0b      	ldr	r2, [pc, #44]	; (80024f4 <HAL_ADC_MspInit+0xf8>)
 80024c6:	639a      	str	r2, [r3, #56]	; 0x38
 80024c8:	4a0a      	ldr	r2, [pc, #40]	; (80024f4 <HAL_ADC_MspInit+0xf8>)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80024ce:	2200      	movs	r2, #0
 80024d0:	2100      	movs	r1, #0
 80024d2:	2012      	movs	r0, #18
 80024d4:	f001 fb65 	bl	8003ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80024d8:	2012      	movs	r0, #18
 80024da:	f001 fb7e 	bl	8003bda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80024de:	bf00      	nop
 80024e0:	3728      	adds	r7, #40	; 0x28
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40012000 	.word	0x40012000
 80024ec:	40023800 	.word	0x40023800
 80024f0:	40020000 	.word	0x40020000
 80024f4:	20000248 	.word	0x20000248
 80024f8:	40026410 	.word	0x40026410

080024fc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08a      	sub	sp, #40	; 0x28
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002504:	f107 0314 	add.w	r3, r7, #20
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]
 8002512:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a17      	ldr	r2, [pc, #92]	; (8002578 <HAL_DAC_MspInit+0x7c>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d127      	bne.n	800256e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	4b16      	ldr	r3, [pc, #88]	; (800257c <HAL_DAC_MspInit+0x80>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	4a15      	ldr	r2, [pc, #84]	; (800257c <HAL_DAC_MspInit+0x80>)
 8002528:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800252c:	6413      	str	r3, [r2, #64]	; 0x40
 800252e:	4b13      	ldr	r3, [pc, #76]	; (800257c <HAL_DAC_MspInit+0x80>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	4b0f      	ldr	r3, [pc, #60]	; (800257c <HAL_DAC_MspInit+0x80>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	4a0e      	ldr	r2, [pc, #56]	; (800257c <HAL_DAC_MspInit+0x80>)
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	6313      	str	r3, [r2, #48]	; 0x30
 800254a:	4b0c      	ldr	r3, [pc, #48]	; (800257c <HAL_DAC_MspInit+0x80>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002556:	2310      	movs	r3, #16
 8002558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800255a:	2303      	movs	r3, #3
 800255c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002562:	f107 0314 	add.w	r3, r7, #20
 8002566:	4619      	mov	r1, r3
 8002568:	4805      	ldr	r0, [pc, #20]	; (8002580 <HAL_DAC_MspInit+0x84>)
 800256a:	f001 fefd 	bl	8004368 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800256e:	bf00      	nop
 8002570:	3728      	adds	r7, #40	; 0x28
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40007400 	.word	0x40007400
 800257c:	40023800 	.word	0x40023800
 8002580:	40020000 	.word	0x40020000

08002584 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08a      	sub	sp, #40	; 0x28
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258c:	f107 0314 	add.w	r3, r7, #20
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	60da      	str	r2, [r3, #12]
 800259a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a29      	ldr	r2, [pc, #164]	; (8002648 <HAL_I2C_MspInit+0xc4>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d14b      	bne.n	800263e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	4b28      	ldr	r3, [pc, #160]	; (800264c <HAL_I2C_MspInit+0xc8>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	4a27      	ldr	r2, [pc, #156]	; (800264c <HAL_I2C_MspInit+0xc8>)
 80025b0:	f043 0302 	orr.w	r3, r3, #2
 80025b4:	6313      	str	r3, [r2, #48]	; 0x30
 80025b6:	4b25      	ldr	r3, [pc, #148]	; (800264c <HAL_I2C_MspInit+0xc8>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	4b21      	ldr	r3, [pc, #132]	; (800264c <HAL_I2C_MspInit+0xc8>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	4a20      	ldr	r2, [pc, #128]	; (800264c <HAL_I2C_MspInit+0xc8>)
 80025cc:	f043 0304 	orr.w	r3, r3, #4
 80025d0:	6313      	str	r3, [r2, #48]	; 0x30
 80025d2:	4b1e      	ldr	r3, [pc, #120]	; (800264c <HAL_I2C_MspInit+0xc8>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80025de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025e4:	2312      	movs	r3, #18
 80025e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ec:	2303      	movs	r3, #3
 80025ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80025f0:	2304      	movs	r3, #4
 80025f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f4:	f107 0314 	add.w	r3, r7, #20
 80025f8:	4619      	mov	r1, r3
 80025fa:	4815      	ldr	r0, [pc, #84]	; (8002650 <HAL_I2C_MspInit+0xcc>)
 80025fc:	f001 feb4 	bl	8004368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002606:	2312      	movs	r3, #18
 8002608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	2300      	movs	r3, #0
 800260c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800260e:	2303      	movs	r3, #3
 8002610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002612:	2304      	movs	r3, #4
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002616:	f107 0314 	add.w	r3, r7, #20
 800261a:	4619      	mov	r1, r3
 800261c:	480d      	ldr	r0, [pc, #52]	; (8002654 <HAL_I2C_MspInit+0xd0>)
 800261e:	f001 fea3 	bl	8004368 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	60bb      	str	r3, [r7, #8]
 8002626:	4b09      	ldr	r3, [pc, #36]	; (800264c <HAL_I2C_MspInit+0xc8>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	4a08      	ldr	r2, [pc, #32]	; (800264c <HAL_I2C_MspInit+0xc8>)
 800262c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002630:	6413      	str	r3, [r2, #64]	; 0x40
 8002632:	4b06      	ldr	r3, [pc, #24]	; (800264c <HAL_I2C_MspInit+0xc8>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800263a:	60bb      	str	r3, [r7, #8]
 800263c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800263e:	bf00      	nop
 8002640:	3728      	adds	r7, #40	; 0x28
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40005800 	.word	0x40005800
 800264c:	40023800 	.word	0x40023800
 8002650:	40020400 	.word	0x40020400
 8002654:	40020800 	.word	0x40020800

08002658 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b09a      	sub	sp, #104	; 0x68
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002660:	f107 030c 	add.w	r3, r7, #12
 8002664:	225c      	movs	r2, #92	; 0x5c
 8002666:	2100      	movs	r1, #0
 8002668:	4618      	mov	r0, r3
 800266a:	f006 fb93 	bl	8008d94 <memset>
  if(hrtc->Instance==RTC)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a0c      	ldr	r2, [pc, #48]	; (80026a4 <HAL_RTC_MspInit+0x4c>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d111      	bne.n	800269c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002678:	2320      	movs	r3, #32
 800267a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800267c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002680:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002682:	f107 030c 	add.w	r3, r7, #12
 8002686:	4618      	mov	r0, r3
 8002688:	f002 faca 	bl	8004c20 <HAL_RCCEx_PeriphCLKConfig>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002692:	f7ff fe85 	bl	80023a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002696:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <HAL_RTC_MspInit+0x50>)
 8002698:	2201      	movs	r2, #1
 800269a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800269c:	bf00      	nop
 800269e:	3768      	adds	r7, #104	; 0x68
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40002800 	.word	0x40002800
 80026a8:	42470e3c 	.word	0x42470e3c

080026ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b098      	sub	sp, #96	; 0x60
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	60da      	str	r2, [r3, #12]
 80026c2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a9d      	ldr	r2, [pc, #628]	; (8002940 <HAL_TIM_Base_MspInit+0x294>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d12d      	bne.n	800272a <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80026d2:	4b9c      	ldr	r3, [pc, #624]	; (8002944 <HAL_TIM_Base_MspInit+0x298>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	4a9b      	ldr	r2, [pc, #620]	; (8002944 <HAL_TIM_Base_MspInit+0x298>)
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	6453      	str	r3, [r2, #68]	; 0x44
 80026de:	4b99      	ldr	r3, [pc, #612]	; (8002944 <HAL_TIM_Base_MspInit+0x298>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80026e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	647b      	str	r3, [r7, #68]	; 0x44
 80026ee:	4b95      	ldr	r3, [pc, #596]	; (8002944 <HAL_TIM_Base_MspInit+0x298>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	4a94      	ldr	r2, [pc, #592]	; (8002944 <HAL_TIM_Base_MspInit+0x298>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6313      	str	r3, [r2, #48]	; 0x30
 80026fa:	4b92      	ldr	r3, [pc, #584]	; (8002944 <HAL_TIM_Base_MspInit+0x298>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	647b      	str	r3, [r7, #68]	; 0x44
 8002704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002706:	f44f 7380 	mov.w	r3, #256	; 0x100
 800270a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270c:	2302      	movs	r3, #2
 800270e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002710:	2300      	movs	r3, #0
 8002712:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002714:	2300      	movs	r3, #0
 8002716:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002718:	2301      	movs	r3, #1
 800271a:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002720:	4619      	mov	r1, r3
 8002722:	4889      	ldr	r0, [pc, #548]	; (8002948 <HAL_TIM_Base_MspInit+0x29c>)
 8002724:	f001 fe20 	bl	8004368 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002728:	e176      	b.n	8002a18 <HAL_TIM_Base_MspInit+0x36c>
  else if(htim_base->Instance==TIM2)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002732:	d134      	bne.n	800279e <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002734:	2300      	movs	r3, #0
 8002736:	643b      	str	r3, [r7, #64]	; 0x40
 8002738:	4b82      	ldr	r3, [pc, #520]	; (8002944 <HAL_TIM_Base_MspInit+0x298>)
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	4a81      	ldr	r2, [pc, #516]	; (8002944 <HAL_TIM_Base_MspInit+0x298>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	6413      	str	r3, [r2, #64]	; 0x40
 8002744:	4b7f      	ldr	r3, [pc, #508]	; (8002944 <HAL_TIM_Base_MspInit+0x298>)
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	643b      	str	r3, [r7, #64]	; 0x40
 800274e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002750:	2300      	movs	r3, #0
 8002752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002754:	4b7b      	ldr	r3, [pc, #492]	; (8002944 <HAL_TIM_Base_MspInit+0x298>)
 8002756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002758:	4a7a      	ldr	r2, [pc, #488]	; (8002944 <HAL_TIM_Base_MspInit+0x298>)
 800275a:	f043 0301 	orr.w	r3, r3, #1
 800275e:	6313      	str	r3, [r2, #48]	; 0x30
 8002760:	4b78      	ldr	r3, [pc, #480]	; (8002944 <HAL_TIM_Base_MspInit+0x298>)
 8002762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	63fb      	str	r3, [r7, #60]	; 0x3c
 800276a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800276c:	2320      	movs	r3, #32
 800276e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002770:	2302      	movs	r3, #2
 8002772:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002774:	2300      	movs	r3, #0
 8002776:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002778:	2300      	movs	r3, #0
 800277a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800277c:	2301      	movs	r3, #1
 800277e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002780:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002784:	4619      	mov	r1, r3
 8002786:	4870      	ldr	r0, [pc, #448]	; (8002948 <HAL_TIM_Base_MspInit+0x29c>)
 8002788:	f001 fdee 	bl	8004368 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800278c:	2200      	movs	r2, #0
 800278e:	2100      	movs	r1, #0
 8002790:	201c      	movs	r0, #28
 8002792:	f001 fa06 	bl	8003ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002796:	201c      	movs	r0, #28
 8002798:	f001 fa1f 	bl	8003bda <HAL_NVIC_EnableIRQ>
}
 800279c:	e13c      	b.n	8002a18 <HAL_TIM_Base_MspInit+0x36c>
  else if(htim_base->Instance==TIM3)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a6a      	ldr	r2, [pc, #424]	; (800294c <HAL_TIM_Base_MspInit+0x2a0>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d134      	bne.n	8002812 <HAL_TIM_Base_MspInit+0x166>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027a8:	2300      	movs	r3, #0
 80027aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80027ac:	4b65      	ldr	r3, [pc, #404]	; (8002944 <HAL_TIM_Base_MspInit+0x298>)
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	4a64      	ldr	r2, [pc, #400]	; (8002944 <HAL_TIM_Base_MspInit+0x298>)
 80027b2:	f043 0302 	orr.w	r3, r3, #2
 80027b6:	6413      	str	r3, [r2, #64]	; 0x40
 80027b8:	4b62      	ldr	r3, [pc, #392]	; (8002944 <HAL_TIM_Base_MspInit+0x298>)
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80027c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c4:	2300      	movs	r3, #0
 80027c6:	637b      	str	r3, [r7, #52]	; 0x34
 80027c8:	4b5e      	ldr	r3, [pc, #376]	; (8002944 <HAL_TIM_Base_MspInit+0x298>)
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	4a5d      	ldr	r2, [pc, #372]	; (8002944 <HAL_TIM_Base_MspInit+0x298>)
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	6313      	str	r3, [r2, #48]	; 0x30
 80027d4:	4b5b      	ldr	r3, [pc, #364]	; (8002944 <HAL_TIM_Base_MspInit+0x298>)
 80027d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	637b      	str	r3, [r7, #52]	; 0x34
 80027de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80027e0:	2340      	movs	r3, #64	; 0x40
 80027e2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e4:	2302      	movs	r3, #2
 80027e6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ec:	2300      	movs	r3, #0
 80027ee:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027f0:	2302      	movs	r3, #2
 80027f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027f8:	4619      	mov	r1, r3
 80027fa:	4853      	ldr	r0, [pc, #332]	; (8002948 <HAL_TIM_Base_MspInit+0x29c>)
 80027fc:	f001 fdb4 	bl	8004368 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002800:	2200      	movs	r2, #0
 8002802:	2100      	movs	r1, #0
 8002804:	201d      	movs	r0, #29
 8002806:	f001 f9cc 	bl	8003ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800280a:	201d      	movs	r0, #29
 800280c:	f001 f9e5 	bl	8003bda <HAL_NVIC_EnableIRQ>
}
 8002810:	e102      	b.n	8002a18 <HAL_TIM_Base_MspInit+0x36c>
  else if(htim_base->Instance==TIM4)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a4e      	ldr	r2, [pc, #312]	; (8002950 <HAL_TIM_Base_MspInit+0x2a4>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d12c      	bne.n	8002876 <HAL_TIM_Base_MspInit+0x1ca>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800281c:	2300      	movs	r3, #0
 800281e:	633b      	str	r3, [r7, #48]	; 0x30
 8002820:	4b48      	ldr	r3, [pc, #288]	; (8002944 <HAL_TIM_Base_MspInit+0x298>)
 8002822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002824:	4a47      	ldr	r2, [pc, #284]	; (8002944 <HAL_TIM_Base_MspInit+0x298>)
 8002826:	f043 0304 	orr.w	r3, r3, #4
 800282a:	6413      	str	r3, [r2, #64]	; 0x40
 800282c:	4b45      	ldr	r3, [pc, #276]	; (8002944 <HAL_TIM_Base_MspInit+0x298>)
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	633b      	str	r3, [r7, #48]	; 0x30
 8002836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002838:	2300      	movs	r3, #0
 800283a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800283c:	4b41      	ldr	r3, [pc, #260]	; (8002944 <HAL_TIM_Base_MspInit+0x298>)
 800283e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002840:	4a40      	ldr	r2, [pc, #256]	; (8002944 <HAL_TIM_Base_MspInit+0x298>)
 8002842:	f043 0302 	orr.w	r3, r3, #2
 8002846:	6313      	str	r3, [r2, #48]	; 0x30
 8002848:	4b3e      	ldr	r3, [pc, #248]	; (8002944 <HAL_TIM_Base_MspInit+0x298>)
 800284a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002854:	2340      	movs	r3, #64	; 0x40
 8002856:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002858:	2302      	movs	r3, #2
 800285a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285c:	2300      	movs	r3, #0
 800285e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002860:	2300      	movs	r3, #0
 8002862:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002864:	2302      	movs	r3, #2
 8002866:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002868:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800286c:	4619      	mov	r1, r3
 800286e:	4839      	ldr	r0, [pc, #228]	; (8002954 <HAL_TIM_Base_MspInit+0x2a8>)
 8002870:	f001 fd7a 	bl	8004368 <HAL_GPIO_Init>
}
 8002874:	e0d0      	b.n	8002a18 <HAL_TIM_Base_MspInit+0x36c>
  else if(htim_base->Instance==TIM5)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a37      	ldr	r2, [pc, #220]	; (8002958 <HAL_TIM_Base_MspInit+0x2ac>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d12c      	bne.n	80028da <HAL_TIM_Base_MspInit+0x22e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002880:	2300      	movs	r3, #0
 8002882:	62bb      	str	r3, [r7, #40]	; 0x28
 8002884:	4b2f      	ldr	r3, [pc, #188]	; (8002944 <HAL_TIM_Base_MspInit+0x298>)
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	4a2e      	ldr	r2, [pc, #184]	; (8002944 <HAL_TIM_Base_MspInit+0x298>)
 800288a:	f043 0308 	orr.w	r3, r3, #8
 800288e:	6413      	str	r3, [r2, #64]	; 0x40
 8002890:	4b2c      	ldr	r3, [pc, #176]	; (8002944 <HAL_TIM_Base_MspInit+0x298>)
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	f003 0308 	and.w	r3, r3, #8
 8002898:	62bb      	str	r3, [r7, #40]	; 0x28
 800289a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800289c:	2300      	movs	r3, #0
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
 80028a0:	4b28      	ldr	r3, [pc, #160]	; (8002944 <HAL_TIM_Base_MspInit+0x298>)
 80028a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a4:	4a27      	ldr	r2, [pc, #156]	; (8002944 <HAL_TIM_Base_MspInit+0x298>)
 80028a6:	f043 0301 	orr.w	r3, r3, #1
 80028aa:	6313      	str	r3, [r2, #48]	; 0x30
 80028ac:	4b25      	ldr	r3, [pc, #148]	; (8002944 <HAL_TIM_Base_MspInit+0x298>)
 80028ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80028b8:	2301      	movs	r3, #1
 80028ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028bc:	2302      	movs	r3, #2
 80028be:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c4:	2300      	movs	r3, #0
 80028c6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80028c8:	2302      	movs	r3, #2
 80028ca:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80028d0:	4619      	mov	r1, r3
 80028d2:	481d      	ldr	r0, [pc, #116]	; (8002948 <HAL_TIM_Base_MspInit+0x29c>)
 80028d4:	f001 fd48 	bl	8004368 <HAL_GPIO_Init>
}
 80028d8:	e09e      	b.n	8002a18 <HAL_TIM_Base_MspInit+0x36c>
  else if(htim_base->Instance==TIM8)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a1f      	ldr	r2, [pc, #124]	; (800295c <HAL_TIM_Base_MspInit+0x2b0>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d13f      	bne.n	8002964 <HAL_TIM_Base_MspInit+0x2b8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80028e4:	2300      	movs	r3, #0
 80028e6:	623b      	str	r3, [r7, #32]
 80028e8:	4b16      	ldr	r3, [pc, #88]	; (8002944 <HAL_TIM_Base_MspInit+0x298>)
 80028ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ec:	4a15      	ldr	r2, [pc, #84]	; (8002944 <HAL_TIM_Base_MspInit+0x298>)
 80028ee:	f043 0302 	orr.w	r3, r3, #2
 80028f2:	6453      	str	r3, [r2, #68]	; 0x44
 80028f4:	4b13      	ldr	r3, [pc, #76]	; (8002944 <HAL_TIM_Base_MspInit+0x298>)
 80028f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	623b      	str	r3, [r7, #32]
 80028fe:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002900:	2300      	movs	r3, #0
 8002902:	61fb      	str	r3, [r7, #28]
 8002904:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <HAL_TIM_Base_MspInit+0x298>)
 8002906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002908:	4a0e      	ldr	r2, [pc, #56]	; (8002944 <HAL_TIM_Base_MspInit+0x298>)
 800290a:	f043 0304 	orr.w	r3, r3, #4
 800290e:	6313      	str	r3, [r2, #48]	; 0x30
 8002910:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <HAL_TIM_Base_MspInit+0x298>)
 8002912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	61fb      	str	r3, [r7, #28]
 800291a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800291c:	2380      	movs	r3, #128	; 0x80
 800291e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002920:	2302      	movs	r3, #2
 8002922:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002924:	2300      	movs	r3, #0
 8002926:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002928:	2300      	movs	r3, #0
 800292a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800292c:	2303      	movs	r3, #3
 800292e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002930:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002934:	4619      	mov	r1, r3
 8002936:	480a      	ldr	r0, [pc, #40]	; (8002960 <HAL_TIM_Base_MspInit+0x2b4>)
 8002938:	f001 fd16 	bl	8004368 <HAL_GPIO_Init>
}
 800293c:	e06c      	b.n	8002a18 <HAL_TIM_Base_MspInit+0x36c>
 800293e:	bf00      	nop
 8002940:	40010000 	.word	0x40010000
 8002944:	40023800 	.word	0x40023800
 8002948:	40020000 	.word	0x40020000
 800294c:	40000400 	.word	0x40000400
 8002950:	40000800 	.word	0x40000800
 8002954:	40020400 	.word	0x40020400
 8002958:	40000c00 	.word	0x40000c00
 800295c:	40010400 	.word	0x40010400
 8002960:	40020800 	.word	0x40020800
  else if(htim_base->Instance==TIM10)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a2d      	ldr	r2, [pc, #180]	; (8002a20 <HAL_TIM_Base_MspInit+0x374>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d10e      	bne.n	800298c <HAL_TIM_Base_MspInit+0x2e0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	61bb      	str	r3, [r7, #24]
 8002972:	4b2c      	ldr	r3, [pc, #176]	; (8002a24 <HAL_TIM_Base_MspInit+0x378>)
 8002974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002976:	4a2b      	ldr	r2, [pc, #172]	; (8002a24 <HAL_TIM_Base_MspInit+0x378>)
 8002978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800297c:	6453      	str	r3, [r2, #68]	; 0x44
 800297e:	4b29      	ldr	r3, [pc, #164]	; (8002a24 <HAL_TIM_Base_MspInit+0x378>)
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002986:	61bb      	str	r3, [r7, #24]
 8002988:	69bb      	ldr	r3, [r7, #24]
}
 800298a:	e045      	b.n	8002a18 <HAL_TIM_Base_MspInit+0x36c>
  else if(htim_base->Instance==TIM11)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a25      	ldr	r2, [pc, #148]	; (8002a28 <HAL_TIM_Base_MspInit+0x37c>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d10e      	bne.n	80029b4 <HAL_TIM_Base_MspInit+0x308>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	617b      	str	r3, [r7, #20]
 800299a:	4b22      	ldr	r3, [pc, #136]	; (8002a24 <HAL_TIM_Base_MspInit+0x378>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299e:	4a21      	ldr	r2, [pc, #132]	; (8002a24 <HAL_TIM_Base_MspInit+0x378>)
 80029a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029a4:	6453      	str	r3, [r2, #68]	; 0x44
 80029a6:	4b1f      	ldr	r3, [pc, #124]	; (8002a24 <HAL_TIM_Base_MspInit+0x378>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	697b      	ldr	r3, [r7, #20]
}
 80029b2:	e031      	b.n	8002a18 <HAL_TIM_Base_MspInit+0x36c>
  else if(htim_base->Instance==TIM12)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a1c      	ldr	r2, [pc, #112]	; (8002a2c <HAL_TIM_Base_MspInit+0x380>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d12c      	bne.n	8002a18 <HAL_TIM_Base_MspInit+0x36c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	4b18      	ldr	r3, [pc, #96]	; (8002a24 <HAL_TIM_Base_MspInit+0x378>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	4a17      	ldr	r2, [pc, #92]	; (8002a24 <HAL_TIM_Base_MspInit+0x378>)
 80029c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029cc:	6413      	str	r3, [r2, #64]	; 0x40
 80029ce:	4b15      	ldr	r3, [pc, #84]	; (8002a24 <HAL_TIM_Base_MspInit+0x378>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <HAL_TIM_Base_MspInit+0x378>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	4a10      	ldr	r2, [pc, #64]	; (8002a24 <HAL_TIM_Base_MspInit+0x378>)
 80029e4:	f043 0302 	orr.w	r3, r3, #2
 80029e8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ea:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <HAL_TIM_Base_MspInit+0x378>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80029f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029fa:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fc:	2302      	movs	r3, #2
 80029fe:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a00:	2300      	movs	r3, #0
 8002a02:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a04:	2300      	movs	r3, #0
 8002a06:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002a08:	2309      	movs	r3, #9
 8002a0a:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a0c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a10:	4619      	mov	r1, r3
 8002a12:	4807      	ldr	r0, [pc, #28]	; (8002a30 <HAL_TIM_Base_MspInit+0x384>)
 8002a14:	f001 fca8 	bl	8004368 <HAL_GPIO_Init>
}
 8002a18:	bf00      	nop
 8002a1a:	3760      	adds	r7, #96	; 0x60
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40014400 	.word	0x40014400
 8002a24:	40023800 	.word	0x40023800
 8002a28:	40014800 	.word	0x40014800
 8002a2c:	40001800 	.word	0x40001800
 8002a30:	40020400 	.word	0x40020400

08002a34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08a      	sub	sp, #40	; 0x28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a3c:	f107 0314 	add.w	r3, r7, #20
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM10)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a25      	ldr	r2, [pc, #148]	; (8002ae8 <HAL_TIM_MspPostInit+0xb4>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d11f      	bne.n	8002a96 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	4b24      	ldr	r3, [pc, #144]	; (8002aec <HAL_TIM_MspPostInit+0xb8>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	4a23      	ldr	r2, [pc, #140]	; (8002aec <HAL_TIM_MspPostInit+0xb8>)
 8002a60:	f043 0302 	orr.w	r3, r3, #2
 8002a64:	6313      	str	r3, [r2, #48]	; 0x30
 8002a66:	4b21      	ldr	r3, [pc, #132]	; (8002aec <HAL_TIM_MspPostInit+0xb8>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	613b      	str	r3, [r7, #16]
 8002a70:	693b      	ldr	r3, [r7, #16]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a80:	2300      	movs	r3, #0
 8002a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002a84:	2303      	movs	r3, #3
 8002a86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a88:	f107 0314 	add.w	r3, r7, #20
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4818      	ldr	r0, [pc, #96]	; (8002af0 <HAL_TIM_MspPostInit+0xbc>)
 8002a90:	f001 fc6a 	bl	8004368 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8002a94:	e023      	b.n	8002ade <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM11)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a16      	ldr	r2, [pc, #88]	; (8002af4 <HAL_TIM_MspPostInit+0xc0>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d11e      	bne.n	8002ade <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	4b11      	ldr	r3, [pc, #68]	; (8002aec <HAL_TIM_MspPostInit+0xb8>)
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa8:	4a10      	ldr	r2, [pc, #64]	; (8002aec <HAL_TIM_MspPostInit+0xb8>)
 8002aaa:	f043 0302 	orr.w	r3, r3, #2
 8002aae:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab0:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <HAL_TIM_MspPostInit+0xb8>)
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002abc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aca:	2300      	movs	r3, #0
 8002acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ad2:	f107 0314 	add.w	r3, r7, #20
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4805      	ldr	r0, [pc, #20]	; (8002af0 <HAL_TIM_MspPostInit+0xbc>)
 8002ada:	f001 fc45 	bl	8004368 <HAL_GPIO_Init>
}
 8002ade:	bf00      	nop
 8002ae0:	3728      	adds	r7, #40	; 0x28
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40014400 	.word	0x40014400
 8002aec:	40023800 	.word	0x40023800
 8002af0:	40020400 	.word	0x40020400
 8002af4:	40014800 	.word	0x40014800

08002af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08a      	sub	sp, #40	; 0x28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b00:	f107 0314 	add.w	r3, r7, #20
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	605a      	str	r2, [r3, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
 8002b0c:	60da      	str	r2, [r3, #12]
 8002b0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a19      	ldr	r2, [pc, #100]	; (8002b7c <HAL_UART_MspInit+0x84>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d12b      	bne.n	8002b72 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	4b18      	ldr	r3, [pc, #96]	; (8002b80 <HAL_UART_MspInit+0x88>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	4a17      	ldr	r2, [pc, #92]	; (8002b80 <HAL_UART_MspInit+0x88>)
 8002b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b28:	6413      	str	r3, [r2, #64]	; 0x40
 8002b2a:	4b15      	ldr	r3, [pc, #84]	; (8002b80 <HAL_UART_MspInit+0x88>)
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b32:	613b      	str	r3, [r7, #16]
 8002b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	4b11      	ldr	r3, [pc, #68]	; (8002b80 <HAL_UART_MspInit+0x88>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	4a10      	ldr	r2, [pc, #64]	; (8002b80 <HAL_UART_MspInit+0x88>)
 8002b40:	f043 0301 	orr.w	r3, r3, #1
 8002b44:	6313      	str	r3, [r2, #48]	; 0x30
 8002b46:	4b0e      	ldr	r3, [pc, #56]	; (8002b80 <HAL_UART_MspInit+0x88>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b52:	230c      	movs	r3, #12
 8002b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b56:	2302      	movs	r3, #2
 8002b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b62:	2307      	movs	r3, #7
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b66:	f107 0314 	add.w	r3, r7, #20
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4805      	ldr	r0, [pc, #20]	; (8002b84 <HAL_UART_MspInit+0x8c>)
 8002b6e:	f001 fbfb 	bl	8004368 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b72:	bf00      	nop
 8002b74:	3728      	adds	r7, #40	; 0x28
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40004400 	.word	0x40004400
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40020000 	.word	0x40020000

08002b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b8c:	e7fe      	b.n	8002b8c <NMI_Handler+0x4>

08002b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b92:	e7fe      	b.n	8002b92 <HardFault_Handler+0x4>

08002b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b98:	e7fe      	b.n	8002b98 <MemManage_Handler+0x4>

08002b9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b9e:	e7fe      	b.n	8002b9e <BusFault_Handler+0x4>

08002ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ba4:	e7fe      	b.n	8002ba4 <UsageFault_Handler+0x4>

08002ba6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002baa:	bf00      	nop
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bc6:	bf00      	nop
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bd4:	f000 f97e 	bl	8002ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bd8:	bf00      	nop
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002be0:	4802      	ldr	r0, [pc, #8]	; (8002bec <ADC_IRQHandler+0x10>)
 8002be2:	f000 fb8f 	bl	8003304 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000200 	.word	0x20000200

08002bf0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002bf4:	4802      	ldr	r0, [pc, #8]	; (8002c00 <TIM2_IRQHandler+0x10>)
 8002bf6:	f003 feab 	bl	8006950 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002bfa:	bf00      	nop
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	20000378 	.word	0x20000378

08002c04 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c08:	4802      	ldr	r0, [pc, #8]	; (8002c14 <TIM3_IRQHandler+0x10>)
 8002c0a:	f003 fea1 	bl	8006950 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	200003c0 	.word	0x200003c0

08002c18 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c1c:	4802      	ldr	r0, [pc, #8]	; (8002c28 <DMA2_Stream0_IRQHandler+0x10>)
 8002c1e:	f001 f967 	bl	8003ef0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002c22:	bf00      	nop
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20000248 	.word	0x20000248

08002c2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return 1;
 8002c30:	2301      	movs	r3, #1
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <_kill>:

int _kill(int pid, int sig)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c46:	f006 f8b1 	bl	8008dac <__errno>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2216      	movs	r2, #22
 8002c4e:	601a      	str	r2, [r3, #0]
  return -1;
 8002c50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <_exit>:

void _exit (int status)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7ff ffe7 	bl	8002c3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c6e:	e7fe      	b.n	8002c6e <_exit+0x12>

08002c70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	e00a      	b.n	8002c98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c82:	f3af 8000 	nop.w
 8002c86:	4601      	mov	r1, r0
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	60ba      	str	r2, [r7, #8]
 8002c8e:	b2ca      	uxtb	r2, r1
 8002c90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	3301      	adds	r3, #1
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	dbf0      	blt.n	8002c82 <_read+0x12>
  }

  return len;
 8002ca0:	687b      	ldr	r3, [r7, #4]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b086      	sub	sp, #24
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	60f8      	str	r0, [r7, #12]
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	617b      	str	r3, [r7, #20]
 8002cba:	e009      	b.n	8002cd0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	1c5a      	adds	r2, r3, #1
 8002cc0:	60ba      	str	r2, [r7, #8]
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff fb59 	bl	800237c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	dbf1      	blt.n	8002cbc <_write+0x12>
  }
  return len;
 8002cd8:	687b      	ldr	r3, [r7, #4]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3718      	adds	r7, #24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <_close>:

int _close(int file)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002cea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
 8002d02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d0a:	605a      	str	r2, [r3, #4]
  return 0;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <_isatty>:

int _isatty(int file)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d22:	2301      	movs	r3, #1
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
	...

08002d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d54:	4a14      	ldr	r2, [pc, #80]	; (8002da8 <_sbrk+0x5c>)
 8002d56:	4b15      	ldr	r3, [pc, #84]	; (8002dac <_sbrk+0x60>)
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d60:	4b13      	ldr	r3, [pc, #76]	; (8002db0 <_sbrk+0x64>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d102      	bne.n	8002d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d68:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <_sbrk+0x64>)
 8002d6a:	4a12      	ldr	r2, [pc, #72]	; (8002db4 <_sbrk+0x68>)
 8002d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d6e:	4b10      	ldr	r3, [pc, #64]	; (8002db0 <_sbrk+0x64>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4413      	add	r3, r2
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d207      	bcs.n	8002d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d7c:	f006 f816 	bl	8008dac <__errno>
 8002d80:	4603      	mov	r3, r0
 8002d82:	220c      	movs	r2, #12
 8002d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d8a:	e009      	b.n	8002da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d8c:	4b08      	ldr	r3, [pc, #32]	; (8002db0 <_sbrk+0x64>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d92:	4b07      	ldr	r3, [pc, #28]	; (8002db0 <_sbrk+0x64>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4413      	add	r3, r2
 8002d9a:	4a05      	ldr	r2, [pc, #20]	; (8002db0 <_sbrk+0x64>)
 8002d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20020000 	.word	0x20020000
 8002dac:	00000400 	.word	0x00000400
 8002db0:	20000650 	.word	0x20000650
 8002db4:	200007a8 	.word	0x200007a8

08002db8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dbc:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <SystemInit+0x20>)
 8002dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc2:	4a05      	ldr	r2, [pc, #20]	; (8002dd8 <SystemInit+0x20>)
 8002dc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dcc:	bf00      	nop
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	e000ed00 	.word	0xe000ed00

08002ddc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ddc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002de0:	480d      	ldr	r0, [pc, #52]	; (8002e18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002de2:	490e      	ldr	r1, [pc, #56]	; (8002e1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002de4:	4a0e      	ldr	r2, [pc, #56]	; (8002e20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002de8:	e002      	b.n	8002df0 <LoopCopyDataInit>

08002dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dee:	3304      	adds	r3, #4

08002df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002df4:	d3f9      	bcc.n	8002dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002df6:	4a0b      	ldr	r2, [pc, #44]	; (8002e24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002df8:	4c0b      	ldr	r4, [pc, #44]	; (8002e28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dfc:	e001      	b.n	8002e02 <LoopFillZerobss>

08002dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e00:	3204      	adds	r2, #4

08002e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e04:	d3fb      	bcc.n	8002dfe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e06:	f7ff ffd7 	bl	8002db8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e0a:	f005 ffd5 	bl	8008db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e0e:	f7fe fa11 	bl	8001234 <main>
  bx  lr    
 8002e12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e1c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002e20:	0800b07c 	.word	0x0800b07c
  ldr r2, =_sbss
 8002e24:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002e28:	200007a4 	.word	0x200007a4

08002e2c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e2c:	e7fe      	b.n	8002e2c <CAN1_RX0_IRQHandler>
	...

08002e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e34:	4b0e      	ldr	r3, [pc, #56]	; (8002e70 <HAL_Init+0x40>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a0d      	ldr	r2, [pc, #52]	; (8002e70 <HAL_Init+0x40>)
 8002e3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e40:	4b0b      	ldr	r3, [pc, #44]	; (8002e70 <HAL_Init+0x40>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a0a      	ldr	r2, [pc, #40]	; (8002e70 <HAL_Init+0x40>)
 8002e46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e4c:	4b08      	ldr	r3, [pc, #32]	; (8002e70 <HAL_Init+0x40>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a07      	ldr	r2, [pc, #28]	; (8002e70 <HAL_Init+0x40>)
 8002e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e58:	2003      	movs	r0, #3
 8002e5a:	f000 fe97 	bl	8003b8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e5e:	2000      	movs	r0, #0
 8002e60:	f000 f808 	bl	8002e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e64:	f7ff faa2 	bl	80023ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40023c00 	.word	0x40023c00

08002e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e7c:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <HAL_InitTick+0x54>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <HAL_InitTick+0x58>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	4619      	mov	r1, r3
 8002e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 feaf 	bl	8003bf6 <HAL_SYSTICK_Config>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e00e      	b.n	8002ec0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b0f      	cmp	r3, #15
 8002ea6:	d80a      	bhi.n	8002ebe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002eb0:	f000 fe77 	bl	8003ba2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002eb4:	4a06      	ldr	r2, [pc, #24]	; (8002ed0 <HAL_InitTick+0x5c>)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	e000      	b.n	8002ec0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	20000010 	.word	0x20000010
 8002ecc:	20000018 	.word	0x20000018
 8002ed0:	20000014 	.word	0x20000014

08002ed4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ed8:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <HAL_IncTick+0x20>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	461a      	mov	r2, r3
 8002ede:	4b06      	ldr	r3, [pc, #24]	; (8002ef8 <HAL_IncTick+0x24>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	4a04      	ldr	r2, [pc, #16]	; (8002ef8 <HAL_IncTick+0x24>)
 8002ee6:	6013      	str	r3, [r2, #0]
}
 8002ee8:	bf00      	nop
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	20000018 	.word	0x20000018
 8002ef8:	20000654 	.word	0x20000654

08002efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  return uwTick;
 8002f00:	4b03      	ldr	r3, [pc, #12]	; (8002f10 <HAL_GetTick+0x14>)
 8002f02:	681b      	ldr	r3, [r3, #0]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	20000654 	.word	0x20000654

08002f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f1c:	f7ff ffee 	bl	8002efc <HAL_GetTick>
 8002f20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f2c:	d005      	beq.n	8002f3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f2e:	4b0a      	ldr	r3, [pc, #40]	; (8002f58 <HAL_Delay+0x44>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	461a      	mov	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4413      	add	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f3a:	bf00      	nop
 8002f3c:	f7ff ffde 	bl	8002efc <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d8f7      	bhi.n	8002f3c <HAL_Delay+0x28>
  {
  }
}
 8002f4c:	bf00      	nop
 8002f4e:	bf00      	nop
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20000018 	.word	0x20000018

08002f5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e033      	b.n	8002fda <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d109      	bne.n	8002f8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7ff fa3e 	bl	80023fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f003 0310 	and.w	r3, r3, #16
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d118      	bne.n	8002fcc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fa2:	f023 0302 	bic.w	r3, r3, #2
 8002fa6:	f043 0202 	orr.w	r2, r3, #2
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 fc16 	bl	80037e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	f023 0303 	bic.w	r3, r3, #3
 8002fc2:	f043 0201 	orr.w	r2, r3, #1
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	641a      	str	r2, [r3, #64]	; 0x40
 8002fca:	e001      	b.n	8002fd0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
	...

08002fe4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d101      	bne.n	8002ffe <HAL_ADC_Start+0x1a>
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	e0b2      	b.n	8003164 <HAL_ADC_Start+0x180>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b01      	cmp	r3, #1
 8003012:	d018      	beq.n	8003046 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0201 	orr.w	r2, r2, #1
 8003022:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003024:	4b52      	ldr	r3, [pc, #328]	; (8003170 <HAL_ADC_Start+0x18c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a52      	ldr	r2, [pc, #328]	; (8003174 <HAL_ADC_Start+0x190>)
 800302a:	fba2 2303 	umull	r2, r3, r2, r3
 800302e:	0c9a      	lsrs	r2, r3, #18
 8003030:	4613      	mov	r3, r2
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	4413      	add	r3, r2
 8003036:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003038:	e002      	b.n	8003040 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	3b01      	subs	r3, #1
 800303e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f9      	bne.n	800303a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b01      	cmp	r3, #1
 8003052:	d17a      	bne.n	800314a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800305c:	f023 0301 	bic.w	r3, r3, #1
 8003060:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003072:	2b00      	cmp	r3, #0
 8003074:	d007      	beq.n	8003086 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800307e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800308e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003092:	d106      	bne.n	80030a2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003098:	f023 0206 	bic.w	r2, r3, #6
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	645a      	str	r2, [r3, #68]	; 0x44
 80030a0:	e002      	b.n	80030a8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030b0:	4b31      	ldr	r3, [pc, #196]	; (8003178 <HAL_ADC_Start+0x194>)
 80030b2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80030bc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f003 031f 	and.w	r3, r3, #31
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d12a      	bne.n	8003120 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a2b      	ldr	r2, [pc, #172]	; (800317c <HAL_ADC_Start+0x198>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d015      	beq.n	8003100 <HAL_ADC_Start+0x11c>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a29      	ldr	r2, [pc, #164]	; (8003180 <HAL_ADC_Start+0x19c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d105      	bne.n	80030ea <HAL_ADC_Start+0x106>
 80030de:	4b26      	ldr	r3, [pc, #152]	; (8003178 <HAL_ADC_Start+0x194>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f003 031f 	and.w	r3, r3, #31
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00a      	beq.n	8003100 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a25      	ldr	r2, [pc, #148]	; (8003184 <HAL_ADC_Start+0x1a0>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d136      	bne.n	8003162 <HAL_ADC_Start+0x17e>
 80030f4:	4b20      	ldr	r3, [pc, #128]	; (8003178 <HAL_ADC_Start+0x194>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f003 0310 	and.w	r3, r3, #16
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d130      	bne.n	8003162 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d129      	bne.n	8003162 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800311c:	609a      	str	r2, [r3, #8]
 800311e:	e020      	b.n	8003162 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a15      	ldr	r2, [pc, #84]	; (800317c <HAL_ADC_Start+0x198>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d11b      	bne.n	8003162 <HAL_ADC_Start+0x17e>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d114      	bne.n	8003162 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003146:	609a      	str	r2, [r3, #8]
 8003148:	e00b      	b.n	8003162 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	f043 0210 	orr.w	r2, r3, #16
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315a:	f043 0201 	orr.w	r2, r3, #1
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3714      	adds	r7, #20
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	20000010 	.word	0x20000010
 8003174:	431bde83 	.word	0x431bde83
 8003178:	40012300 	.word	0x40012300
 800317c:	40012000 	.word	0x40012000
 8003180:	40012100 	.word	0x40012100
 8003184:	40012200 	.word	0x40012200

08003188 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003196:	2b01      	cmp	r3, #1
 8003198:	d101      	bne.n	800319e <HAL_ADC_Stop+0x16>
 800319a:	2302      	movs	r3, #2
 800319c:	e021      	b.n	80031e2 <HAL_ADC_Stop+0x5a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0201 	bic.w	r2, r2, #1
 80031b4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d109      	bne.n	80031d8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031cc:	f023 0301 	bic.w	r3, r3, #1
 80031d0:	f043 0201 	orr.w	r2, r3, #1
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b084      	sub	sp, #16
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800320a:	d113      	bne.n	8003234 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800321a:	d10b      	bne.n	8003234 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	f043 0220 	orr.w	r2, r3, #32
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e063      	b.n	80032fc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003234:	f7ff fe62 	bl	8002efc <HAL_GetTick>
 8003238:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800323a:	e021      	b.n	8003280 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003242:	d01d      	beq.n	8003280 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d007      	beq.n	800325a <HAL_ADC_PollForConversion+0x6c>
 800324a:	f7ff fe57 	bl	8002efc <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d212      	bcs.n	8003280 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b02      	cmp	r3, #2
 8003266:	d00b      	beq.n	8003280 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326c:	f043 0204 	orr.w	r2, r3, #4
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e03d      	b.n	80032fc <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b02      	cmp	r3, #2
 800328c:	d1d6      	bne.n	800323c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f06f 0212 	mvn.w	r2, #18
 8003296:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d123      	bne.n	80032fa <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d11f      	bne.n	80032fa <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d006      	beq.n	80032d6 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d111      	bne.n	80032fa <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d105      	bne.n	80032fa <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	f043 0201 	orr.w	r2, r3, #1
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]
 8003310:	2300      	movs	r3, #0
 8003312:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	f003 0320 	and.w	r3, r3, #32
 8003332:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d049      	beq.n	80033ce <HAL_ADC_IRQHandler+0xca>
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d046      	beq.n	80033ce <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003344:	f003 0310 	and.w	r3, r3, #16
 8003348:	2b00      	cmp	r3, #0
 800334a:	d105      	bne.n	8003358 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d12b      	bne.n	80033be <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800336a:	2b00      	cmp	r3, #0
 800336c:	d127      	bne.n	80033be <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003374:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003378:	2b00      	cmp	r3, #0
 800337a:	d006      	beq.n	800338a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003386:	2b00      	cmp	r3, #0
 8003388:	d119      	bne.n	80033be <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0220 	bic.w	r2, r2, #32
 8003398:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d105      	bne.n	80033be <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	f043 0201 	orr.w	r2, r3, #1
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f8bd 	bl	800353e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f06f 0212 	mvn.w	r2, #18
 80033cc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033dc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d057      	beq.n	8003494 <HAL_ADC_IRQHandler+0x190>
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d054      	beq.n	8003494 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	f003 0310 	and.w	r3, r3, #16
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d105      	bne.n	8003402 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d139      	bne.n	8003484 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003416:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800341a:	2b00      	cmp	r3, #0
 800341c:	d006      	beq.n	800342c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003428:	2b00      	cmp	r3, #0
 800342a:	d12b      	bne.n	8003484 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003436:	2b00      	cmp	r3, #0
 8003438:	d124      	bne.n	8003484 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003444:	2b00      	cmp	r3, #0
 8003446:	d11d      	bne.n	8003484 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800344c:	2b00      	cmp	r3, #0
 800344e:	d119      	bne.n	8003484 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800345e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003474:	2b00      	cmp	r3, #0
 8003476:	d105      	bne.n	8003484 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	f043 0201 	orr.w	r2, r3, #1
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 faa7 	bl	80039d8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f06f 020c 	mvn.w	r2, #12
 8003492:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a2:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d017      	beq.n	80034da <HAL_ADC_IRQHandler+0x1d6>
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d014      	beq.n	80034da <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d10d      	bne.n	80034da <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f841 	bl	8003552 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 0201 	mvn.w	r2, #1
 80034d8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f003 0320 	and.w	r3, r3, #32
 80034e0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034e8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d015      	beq.n	800351c <HAL_ADC_IRQHandler+0x218>
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d012      	beq.n	800351c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fa:	f043 0202 	orr.w	r2, r3, #2
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f06f 0220 	mvn.w	r2, #32
 800350a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f82a 	bl	8003566 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f06f 0220 	mvn.w	r2, #32
 800351a:	601a      	str	r2, [r3, #0]
  }
}
 800351c:	bf00      	nop
 800351e:	3718      	adds	r7, #24
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003532:	4618      	mov	r0, r3
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
	...

0800357c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003586:	2300      	movs	r3, #0
 8003588:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003590:	2b01      	cmp	r3, #1
 8003592:	d101      	bne.n	8003598 <HAL_ADC_ConfigChannel+0x1c>
 8003594:	2302      	movs	r3, #2
 8003596:	e113      	b.n	80037c0 <HAL_ADC_ConfigChannel+0x244>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2b09      	cmp	r3, #9
 80035a6:	d925      	bls.n	80035f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68d9      	ldr	r1, [r3, #12]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	461a      	mov	r2, r3
 80035b6:	4613      	mov	r3, r2
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	4413      	add	r3, r2
 80035bc:	3b1e      	subs	r3, #30
 80035be:	2207      	movs	r2, #7
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	43da      	mvns	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	400a      	ands	r2, r1
 80035cc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68d9      	ldr	r1, [r3, #12]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	b29b      	uxth	r3, r3
 80035de:	4618      	mov	r0, r3
 80035e0:	4603      	mov	r3, r0
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	4403      	add	r3, r0
 80035e6:	3b1e      	subs	r3, #30
 80035e8:	409a      	lsls	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	60da      	str	r2, [r3, #12]
 80035f2:	e022      	b.n	800363a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6919      	ldr	r1, [r3, #16]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	b29b      	uxth	r3, r3
 8003600:	461a      	mov	r2, r3
 8003602:	4613      	mov	r3, r2
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	4413      	add	r3, r2
 8003608:	2207      	movs	r2, #7
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43da      	mvns	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	400a      	ands	r2, r1
 8003616:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6919      	ldr	r1, [r3, #16]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	b29b      	uxth	r3, r3
 8003628:	4618      	mov	r0, r3
 800362a:	4603      	mov	r3, r0
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	4403      	add	r3, r0
 8003630:	409a      	lsls	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b06      	cmp	r3, #6
 8003640:	d824      	bhi.n	800368c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	4613      	mov	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	3b05      	subs	r3, #5
 8003654:	221f      	movs	r2, #31
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43da      	mvns	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	400a      	ands	r2, r1
 8003662:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	b29b      	uxth	r3, r3
 8003670:	4618      	mov	r0, r3
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	4613      	mov	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	3b05      	subs	r3, #5
 800367e:	fa00 f203 	lsl.w	r2, r0, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	635a      	str	r2, [r3, #52]	; 0x34
 800368a:	e04c      	b.n	8003726 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	2b0c      	cmp	r3, #12
 8003692:	d824      	bhi.n	80036de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	3b23      	subs	r3, #35	; 0x23
 80036a6:	221f      	movs	r2, #31
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	43da      	mvns	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	400a      	ands	r2, r1
 80036b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	4618      	mov	r0, r3
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	4613      	mov	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	3b23      	subs	r3, #35	; 0x23
 80036d0:	fa00 f203 	lsl.w	r2, r0, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	631a      	str	r2, [r3, #48]	; 0x30
 80036dc:	e023      	b.n	8003726 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	4613      	mov	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	3b41      	subs	r3, #65	; 0x41
 80036f0:	221f      	movs	r2, #31
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43da      	mvns	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	400a      	ands	r2, r1
 80036fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	b29b      	uxth	r3, r3
 800370c:	4618      	mov	r0, r3
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	4613      	mov	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	3b41      	subs	r3, #65	; 0x41
 800371a:	fa00 f203 	lsl.w	r2, r0, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003726:	4b29      	ldr	r3, [pc, #164]	; (80037cc <HAL_ADC_ConfigChannel+0x250>)
 8003728:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a28      	ldr	r2, [pc, #160]	; (80037d0 <HAL_ADC_ConfigChannel+0x254>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d10f      	bne.n	8003754 <HAL_ADC_ConfigChannel+0x1d8>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b12      	cmp	r3, #18
 800373a:	d10b      	bne.n	8003754 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a1d      	ldr	r2, [pc, #116]	; (80037d0 <HAL_ADC_ConfigChannel+0x254>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d12b      	bne.n	80037b6 <HAL_ADC_ConfigChannel+0x23a>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a1c      	ldr	r2, [pc, #112]	; (80037d4 <HAL_ADC_ConfigChannel+0x258>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d003      	beq.n	8003770 <HAL_ADC_ConfigChannel+0x1f4>
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2b11      	cmp	r3, #17
 800376e:	d122      	bne.n	80037b6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a11      	ldr	r2, [pc, #68]	; (80037d4 <HAL_ADC_ConfigChannel+0x258>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d111      	bne.n	80037b6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003792:	4b11      	ldr	r3, [pc, #68]	; (80037d8 <HAL_ADC_ConfigChannel+0x25c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a11      	ldr	r2, [pc, #68]	; (80037dc <HAL_ADC_ConfigChannel+0x260>)
 8003798:	fba2 2303 	umull	r2, r3, r2, r3
 800379c:	0c9a      	lsrs	r2, r3, #18
 800379e:	4613      	mov	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80037a8:	e002      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	3b01      	subs	r3, #1
 80037ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1f9      	bne.n	80037aa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3714      	adds	r7, #20
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	40012300 	.word	0x40012300
 80037d0:	40012000 	.word	0x40012000
 80037d4:	10000012 	.word	0x10000012
 80037d8:	20000010 	.word	0x20000010
 80037dc:	431bde83 	.word	0x431bde83

080037e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037e8:	4b79      	ldr	r3, [pc, #484]	; (80039d0 <ADC_Init+0x1f0>)
 80037ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	431a      	orrs	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003814:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6859      	ldr	r1, [r3, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	021a      	lsls	r2, r3, #8
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003838:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6859      	ldr	r1, [r3, #4]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800385a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6899      	ldr	r1, [r3, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003872:	4a58      	ldr	r2, [pc, #352]	; (80039d4 <ADC_Init+0x1f4>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d022      	beq.n	80038be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003886:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6899      	ldr	r1, [r3, #8]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80038a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6899      	ldr	r1, [r3, #8]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	430a      	orrs	r2, r1
 80038ba:	609a      	str	r2, [r3, #8]
 80038bc:	e00f      	b.n	80038de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80038dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0202 	bic.w	r2, r2, #2
 80038ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6899      	ldr	r1, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	7e1b      	ldrb	r3, [r3, #24]
 80038f8:	005a      	lsls	r2, r3, #1
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d01b      	beq.n	8003944 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800391a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800392a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6859      	ldr	r1, [r3, #4]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	3b01      	subs	r3, #1
 8003938:	035a      	lsls	r2, r3, #13
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	605a      	str	r2, [r3, #4]
 8003942:	e007      	b.n	8003954 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003952:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003962:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	3b01      	subs	r3, #1
 8003970:	051a      	lsls	r2, r3, #20
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003988:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	6899      	ldr	r1, [r3, #8]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003996:	025a      	lsls	r2, r3, #9
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6899      	ldr	r1, [r3, #8]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	029a      	lsls	r2, r3, #10
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	609a      	str	r2, [r3, #8]
}
 80039c4:	bf00      	nop
 80039c6:	3714      	adds	r7, #20
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	40012300 	.word	0x40012300
 80039d4:	0f000001 	.word	0x0f000001

080039d8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039fc:	4b0c      	ldr	r3, [pc, #48]	; (8003a30 <__NVIC_SetPriorityGrouping+0x44>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a08:	4013      	ands	r3, r2
 8003a0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a1e:	4a04      	ldr	r2, [pc, #16]	; (8003a30 <__NVIC_SetPriorityGrouping+0x44>)
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	60d3      	str	r3, [r2, #12]
}
 8003a24:	bf00      	nop
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	e000ed00 	.word	0xe000ed00

08003a34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a38:	4b04      	ldr	r3, [pc, #16]	; (8003a4c <__NVIC_GetPriorityGrouping+0x18>)
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	0a1b      	lsrs	r3, r3, #8
 8003a3e:	f003 0307 	and.w	r3, r3, #7
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	e000ed00 	.word	0xe000ed00

08003a50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	db0b      	blt.n	8003a7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a62:	79fb      	ldrb	r3, [r7, #7]
 8003a64:	f003 021f 	and.w	r2, r3, #31
 8003a68:	4907      	ldr	r1, [pc, #28]	; (8003a88 <__NVIC_EnableIRQ+0x38>)
 8003a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6e:	095b      	lsrs	r3, r3, #5
 8003a70:	2001      	movs	r0, #1
 8003a72:	fa00 f202 	lsl.w	r2, r0, r2
 8003a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	e000e100 	.word	0xe000e100

08003a8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	4603      	mov	r3, r0
 8003a94:	6039      	str	r1, [r7, #0]
 8003a96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	db0a      	blt.n	8003ab6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	490c      	ldr	r1, [pc, #48]	; (8003ad8 <__NVIC_SetPriority+0x4c>)
 8003aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aaa:	0112      	lsls	r2, r2, #4
 8003aac:	b2d2      	uxtb	r2, r2
 8003aae:	440b      	add	r3, r1
 8003ab0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ab4:	e00a      	b.n	8003acc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	4908      	ldr	r1, [pc, #32]	; (8003adc <__NVIC_SetPriority+0x50>)
 8003abc:	79fb      	ldrb	r3, [r7, #7]
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	3b04      	subs	r3, #4
 8003ac4:	0112      	lsls	r2, r2, #4
 8003ac6:	b2d2      	uxtb	r2, r2
 8003ac8:	440b      	add	r3, r1
 8003aca:	761a      	strb	r2, [r3, #24]
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	e000e100 	.word	0xe000e100
 8003adc:	e000ed00 	.word	0xe000ed00

08003ae0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b089      	sub	sp, #36	; 0x24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f1c3 0307 	rsb	r3, r3, #7
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	bf28      	it	cs
 8003afe:	2304      	movcs	r3, #4
 8003b00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	3304      	adds	r3, #4
 8003b06:	2b06      	cmp	r3, #6
 8003b08:	d902      	bls.n	8003b10 <NVIC_EncodePriority+0x30>
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	3b03      	subs	r3, #3
 8003b0e:	e000      	b.n	8003b12 <NVIC_EncodePriority+0x32>
 8003b10:	2300      	movs	r3, #0
 8003b12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	43da      	mvns	r2, r3
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	401a      	ands	r2, r3
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b32:	43d9      	mvns	r1, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b38:	4313      	orrs	r3, r2
         );
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3724      	adds	r7, #36	; 0x24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
	...

08003b48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3b01      	subs	r3, #1
 8003b54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b58:	d301      	bcc.n	8003b5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e00f      	b.n	8003b7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b5e:	4a0a      	ldr	r2, [pc, #40]	; (8003b88 <SysTick_Config+0x40>)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3b01      	subs	r3, #1
 8003b64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b66:	210f      	movs	r1, #15
 8003b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b6c:	f7ff ff8e 	bl	8003a8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b70:	4b05      	ldr	r3, [pc, #20]	; (8003b88 <SysTick_Config+0x40>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b76:	4b04      	ldr	r3, [pc, #16]	; (8003b88 <SysTick_Config+0x40>)
 8003b78:	2207      	movs	r2, #7
 8003b7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	e000e010 	.word	0xe000e010

08003b8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f7ff ff29 	bl	80039ec <__NVIC_SetPriorityGrouping>
}
 8003b9a:	bf00      	nop
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b086      	sub	sp, #24
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	4603      	mov	r3, r0
 8003baa:	60b9      	str	r1, [r7, #8]
 8003bac:	607a      	str	r2, [r7, #4]
 8003bae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bb4:	f7ff ff3e 	bl	8003a34 <__NVIC_GetPriorityGrouping>
 8003bb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	68b9      	ldr	r1, [r7, #8]
 8003bbe:	6978      	ldr	r0, [r7, #20]
 8003bc0:	f7ff ff8e 	bl	8003ae0 <NVIC_EncodePriority>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bca:	4611      	mov	r1, r2
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7ff ff5d 	bl	8003a8c <__NVIC_SetPriority>
}
 8003bd2:	bf00      	nop
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b082      	sub	sp, #8
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	4603      	mov	r3, r0
 8003be2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7ff ff31 	bl	8003a50 <__NVIC_EnableIRQ>
}
 8003bee:	bf00      	nop
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b082      	sub	sp, #8
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7ff ffa2 	bl	8003b48 <SysTick_Config>
 8003c04:	4603      	mov	r3, r0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b082      	sub	sp, #8
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e014      	b.n	8003c4a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	791b      	ldrb	r3, [r3, #4]
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d105      	bne.n	8003c36 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7fe fc63 	bl	80024fc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2202      	movs	r2, #2
 8003c3a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	795b      	ldrb	r3, [r3, #5]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d101      	bne.n	8003c68 <HAL_DAC_Start+0x16>
 8003c64:	2302      	movs	r3, #2
 8003c66:	e040      	b.n	8003cea <HAL_DAC_Start+0x98>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2202      	movs	r2, #2
 8003c72:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6819      	ldr	r1, [r3, #0]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	f003 0310 	and.w	r3, r3, #16
 8003c80:	2201      	movs	r2, #1
 8003c82:	409a      	lsls	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10f      	bne.n	8003cb2 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003c9c:	2b3c      	cmp	r3, #60	; 0x3c
 8003c9e:	d11d      	bne.n	8003cdc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0201 	orr.w	r2, r2, #1
 8003cae:	605a      	str	r2, [r3, #4]
 8003cb0:	e014      	b.n	8003cdc <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	f003 0310 	and.w	r3, r3, #16
 8003cc2:	213c      	movs	r1, #60	; 0x3c
 8003cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d107      	bne.n	8003cdc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0202 	orr.w	r2, r2, #2
 8003cda:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b087      	sub	sp, #28
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	60f8      	str	r0, [r7, #12]
 8003cfe:	60b9      	str	r1, [r7, #8]
 8003d00:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	795b      	ldrb	r3, [r3, #5]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d101      	bne.n	8003d0e <HAL_DAC_ConfigChannel+0x18>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	e03c      	b.n	8003d88 <HAL_DAC_ConfigChannel+0x92>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2201      	movs	r2, #1
 8003d12:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2202      	movs	r2, #2
 8003d18:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f003 0310 	and.w	r3, r3, #16
 8003d28:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	43db      	mvns	r3, r3
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	4013      	ands	r3, r2
 8003d36:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f003 0310 	and.w	r3, r3, #16
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6819      	ldr	r1, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f003 0310 	and.w	r3, r3, #16
 8003d6a:	22c0      	movs	r2, #192	; 0xc0
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	43da      	mvns	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	400a      	ands	r2, r1
 8003d78:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	371c      	adds	r7, #28
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003da0:	f7ff f8ac 	bl	8002efc <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e099      	b.n	8003ee4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0201 	bic.w	r2, r2, #1
 8003dce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dd0:	e00f      	b.n	8003df2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003dd2:	f7ff f893 	bl	8002efc <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b05      	cmp	r3, #5
 8003dde:	d908      	bls.n	8003df2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2220      	movs	r2, #32
 8003de4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2203      	movs	r2, #3
 8003dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e078      	b.n	8003ee4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1e8      	bne.n	8003dd2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	4b38      	ldr	r3, [pc, #224]	; (8003eec <HAL_DMA_Init+0x158>)
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	d107      	bne.n	8003e5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e54:	4313      	orrs	r3, r2
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f023 0307 	bic.w	r3, r3, #7
 8003e72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	d117      	bne.n	8003eb6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00e      	beq.n	8003eb6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 f9e9 	bl	8004270 <DMA_CheckFifoParam>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d008      	beq.n	8003eb6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2240      	movs	r2, #64	; 0x40
 8003ea8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e016      	b.n	8003ee4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f9a0 	bl	8004204 <DMA_CalcBaseAndBitshift>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ecc:	223f      	movs	r2, #63	; 0x3f
 8003ece:	409a      	lsls	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3718      	adds	r7, #24
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	f010803f 	.word	0xf010803f

08003ef0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003efc:	4b8e      	ldr	r3, [pc, #568]	; (8004138 <HAL_DMA_IRQHandler+0x248>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a8e      	ldr	r2, [pc, #568]	; (800413c <HAL_DMA_IRQHandler+0x24c>)
 8003f02:	fba2 2303 	umull	r2, r3, r2, r3
 8003f06:	0a9b      	lsrs	r3, r3, #10
 8003f08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1a:	2208      	movs	r2, #8
 8003f1c:	409a      	lsls	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4013      	ands	r3, r2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d01a      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d013      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 0204 	bic.w	r2, r2, #4
 8003f42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f48:	2208      	movs	r2, #8
 8003f4a:	409a      	lsls	r2, r3
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f54:	f043 0201 	orr.w	r2, r3, #1
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f60:	2201      	movs	r2, #1
 8003f62:	409a      	lsls	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4013      	ands	r3, r2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d012      	beq.n	8003f92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00b      	beq.n	8003f92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f7e:	2201      	movs	r2, #1
 8003f80:	409a      	lsls	r2, r3
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8a:	f043 0202 	orr.w	r2, r3, #2
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f96:	2204      	movs	r2, #4
 8003f98:	409a      	lsls	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d012      	beq.n	8003fc8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00b      	beq.n	8003fc8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb4:	2204      	movs	r2, #4
 8003fb6:	409a      	lsls	r2, r3
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc0:	f043 0204 	orr.w	r2, r3, #4
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fcc:	2210      	movs	r2, #16
 8003fce:	409a      	lsls	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d043      	beq.n	8004060 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0308 	and.w	r3, r3, #8
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d03c      	beq.n	8004060 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fea:	2210      	movs	r2, #16
 8003fec:	409a      	lsls	r2, r3
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d018      	beq.n	8004032 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d108      	bne.n	8004020 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	2b00      	cmp	r3, #0
 8004014:	d024      	beq.n	8004060 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	4798      	blx	r3
 800401e:	e01f      	b.n	8004060 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004024:	2b00      	cmp	r3, #0
 8004026:	d01b      	beq.n	8004060 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	4798      	blx	r3
 8004030:	e016      	b.n	8004060 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403c:	2b00      	cmp	r3, #0
 800403e:	d107      	bne.n	8004050 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0208 	bic.w	r2, r2, #8
 800404e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004054:	2b00      	cmp	r3, #0
 8004056:	d003      	beq.n	8004060 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004064:	2220      	movs	r2, #32
 8004066:	409a      	lsls	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4013      	ands	r3, r2
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 808f 	beq.w	8004190 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0310 	and.w	r3, r3, #16
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 8087 	beq.w	8004190 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004086:	2220      	movs	r2, #32
 8004088:	409a      	lsls	r2, r3
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b05      	cmp	r3, #5
 8004098:	d136      	bne.n	8004108 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0216 	bic.w	r2, r2, #22
 80040a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695a      	ldr	r2, [r3, #20]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d103      	bne.n	80040ca <HAL_DMA_IRQHandler+0x1da>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d007      	beq.n	80040da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0208 	bic.w	r2, r2, #8
 80040d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040de:	223f      	movs	r2, #63	; 0x3f
 80040e0:	409a      	lsls	r2, r3
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d07e      	beq.n	80041fc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	4798      	blx	r3
        }
        return;
 8004106:	e079      	b.n	80041fc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d01d      	beq.n	8004152 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10d      	bne.n	8004140 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004128:	2b00      	cmp	r3, #0
 800412a:	d031      	beq.n	8004190 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	4798      	blx	r3
 8004134:	e02c      	b.n	8004190 <HAL_DMA_IRQHandler+0x2a0>
 8004136:	bf00      	nop
 8004138:	20000010 	.word	0x20000010
 800413c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004144:	2b00      	cmp	r3, #0
 8004146:	d023      	beq.n	8004190 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	4798      	blx	r3
 8004150:	e01e      	b.n	8004190 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10f      	bne.n	8004180 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 0210 	bic.w	r2, r2, #16
 800416e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004184:	2b00      	cmp	r3, #0
 8004186:	d003      	beq.n	8004190 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004194:	2b00      	cmp	r3, #0
 8004196:	d032      	beq.n	80041fe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d022      	beq.n	80041ea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2205      	movs	r2, #5
 80041a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0201 	bic.w	r2, r2, #1
 80041ba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	3301      	adds	r3, #1
 80041c0:	60bb      	str	r3, [r7, #8]
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d307      	bcc.n	80041d8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f2      	bne.n	80041bc <HAL_DMA_IRQHandler+0x2cc>
 80041d6:	e000      	b.n	80041da <HAL_DMA_IRQHandler+0x2ea>
          break;
 80041d8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d005      	beq.n	80041fe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	4798      	blx	r3
 80041fa:	e000      	b.n	80041fe <HAL_DMA_IRQHandler+0x30e>
        return;
 80041fc:	bf00      	nop
    }
  }
}
 80041fe:	3718      	adds	r7, #24
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	b2db      	uxtb	r3, r3
 8004212:	3b10      	subs	r3, #16
 8004214:	4a14      	ldr	r2, [pc, #80]	; (8004268 <DMA_CalcBaseAndBitshift+0x64>)
 8004216:	fba2 2303 	umull	r2, r3, r2, r3
 800421a:	091b      	lsrs	r3, r3, #4
 800421c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800421e:	4a13      	ldr	r2, [pc, #76]	; (800426c <DMA_CalcBaseAndBitshift+0x68>)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4413      	add	r3, r2
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2b03      	cmp	r3, #3
 8004230:	d909      	bls.n	8004246 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800423a:	f023 0303 	bic.w	r3, r3, #3
 800423e:	1d1a      	adds	r2, r3, #4
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	659a      	str	r2, [r3, #88]	; 0x58
 8004244:	e007      	b.n	8004256 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800424e:	f023 0303 	bic.w	r3, r3, #3
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800425a:	4618      	mov	r0, r3
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	aaaaaaab 	.word	0xaaaaaaab
 800426c:	0800acf0 	.word	0x0800acf0

08004270 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004278:	2300      	movs	r3, #0
 800427a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004280:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d11f      	bne.n	80042ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	2b03      	cmp	r3, #3
 800428e:	d856      	bhi.n	800433e <DMA_CheckFifoParam+0xce>
 8004290:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <DMA_CheckFifoParam+0x28>)
 8004292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004296:	bf00      	nop
 8004298:	080042a9 	.word	0x080042a9
 800429c:	080042bb 	.word	0x080042bb
 80042a0:	080042a9 	.word	0x080042a9
 80042a4:	0800433f 	.word	0x0800433f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d046      	beq.n	8004342 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042b8:	e043      	b.n	8004342 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042c2:	d140      	bne.n	8004346 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042c8:	e03d      	b.n	8004346 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042d2:	d121      	bne.n	8004318 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2b03      	cmp	r3, #3
 80042d8:	d837      	bhi.n	800434a <DMA_CheckFifoParam+0xda>
 80042da:	a201      	add	r2, pc, #4	; (adr r2, 80042e0 <DMA_CheckFifoParam+0x70>)
 80042dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e0:	080042f1 	.word	0x080042f1
 80042e4:	080042f7 	.word	0x080042f7
 80042e8:	080042f1 	.word	0x080042f1
 80042ec:	08004309 	.word	0x08004309
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	73fb      	strb	r3, [r7, #15]
      break;
 80042f4:	e030      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d025      	beq.n	800434e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004306:	e022      	b.n	800434e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004310:	d11f      	bne.n	8004352 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004316:	e01c      	b.n	8004352 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2b02      	cmp	r3, #2
 800431c:	d903      	bls.n	8004326 <DMA_CheckFifoParam+0xb6>
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	2b03      	cmp	r3, #3
 8004322:	d003      	beq.n	800432c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004324:	e018      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	73fb      	strb	r3, [r7, #15]
      break;
 800432a:	e015      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004330:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00e      	beq.n	8004356 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	73fb      	strb	r3, [r7, #15]
      break;
 800433c:	e00b      	b.n	8004356 <DMA_CheckFifoParam+0xe6>
      break;
 800433e:	bf00      	nop
 8004340:	e00a      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
      break;
 8004342:	bf00      	nop
 8004344:	e008      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
      break;
 8004346:	bf00      	nop
 8004348:	e006      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
      break;
 800434a:	bf00      	nop
 800434c:	e004      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
      break;
 800434e:	bf00      	nop
 8004350:	e002      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
      break;   
 8004352:	bf00      	nop
 8004354:	e000      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
      break;
 8004356:	bf00      	nop
    }
  } 
  
  return status; 
 8004358:	7bfb      	ldrb	r3, [r7, #15]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop

08004368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004368:	b480      	push	{r7}
 800436a:	b089      	sub	sp, #36	; 0x24
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004372:	2300      	movs	r3, #0
 8004374:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004376:	2300      	movs	r3, #0
 8004378:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800437a:	2300      	movs	r3, #0
 800437c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800437e:	2300      	movs	r3, #0
 8004380:	61fb      	str	r3, [r7, #28]
 8004382:	e165      	b.n	8004650 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004384:	2201      	movs	r2, #1
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	4013      	ands	r3, r2
 8004396:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	429a      	cmp	r2, r3
 800439e:	f040 8154 	bne.w	800464a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d005      	beq.n	80043ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d130      	bne.n	800441c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	2203      	movs	r2, #3
 80043c6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ca:	43db      	mvns	r3, r3
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	4013      	ands	r3, r2
 80043d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043f0:	2201      	movs	r2, #1
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	fa02 f303 	lsl.w	r3, r2, r3
 80043f8:	43db      	mvns	r3, r3
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	4013      	ands	r3, r2
 80043fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	091b      	lsrs	r3, r3, #4
 8004406:	f003 0201 	and.w	r2, r3, #1
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	4313      	orrs	r3, r2
 8004414:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f003 0303 	and.w	r3, r3, #3
 8004424:	2b03      	cmp	r3, #3
 8004426:	d017      	beq.n	8004458 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	2203      	movs	r2, #3
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	43db      	mvns	r3, r3
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	4013      	ands	r3, r2
 800443e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	4313      	orrs	r3, r2
 8004450:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f003 0303 	and.w	r3, r3, #3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d123      	bne.n	80044ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	08da      	lsrs	r2, r3, #3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	3208      	adds	r2, #8
 800446c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004470:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	220f      	movs	r2, #15
 800447c:	fa02 f303 	lsl.w	r3, r2, r3
 8004480:	43db      	mvns	r3, r3
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	4013      	ands	r3, r2
 8004486:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	691a      	ldr	r2, [r3, #16]
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	4313      	orrs	r3, r2
 800449c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	08da      	lsrs	r2, r3, #3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3208      	adds	r2, #8
 80044a6:	69b9      	ldr	r1, [r7, #24]
 80044a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	2203      	movs	r2, #3
 80044b8:	fa02 f303 	lsl.w	r3, r2, r3
 80044bc:	43db      	mvns	r3, r3
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	4013      	ands	r3, r2
 80044c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f003 0203 	and.w	r2, r3, #3
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 80ae 	beq.w	800464a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ee:	2300      	movs	r3, #0
 80044f0:	60fb      	str	r3, [r7, #12]
 80044f2:	4b5d      	ldr	r3, [pc, #372]	; (8004668 <HAL_GPIO_Init+0x300>)
 80044f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f6:	4a5c      	ldr	r2, [pc, #368]	; (8004668 <HAL_GPIO_Init+0x300>)
 80044f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044fc:	6453      	str	r3, [r2, #68]	; 0x44
 80044fe:	4b5a      	ldr	r3, [pc, #360]	; (8004668 <HAL_GPIO_Init+0x300>)
 8004500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800450a:	4a58      	ldr	r2, [pc, #352]	; (800466c <HAL_GPIO_Init+0x304>)
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	089b      	lsrs	r3, r3, #2
 8004510:	3302      	adds	r3, #2
 8004512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004516:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	220f      	movs	r2, #15
 8004522:	fa02 f303 	lsl.w	r3, r2, r3
 8004526:	43db      	mvns	r3, r3
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	4013      	ands	r3, r2
 800452c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a4f      	ldr	r2, [pc, #316]	; (8004670 <HAL_GPIO_Init+0x308>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d025      	beq.n	8004582 <HAL_GPIO_Init+0x21a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a4e      	ldr	r2, [pc, #312]	; (8004674 <HAL_GPIO_Init+0x30c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d01f      	beq.n	800457e <HAL_GPIO_Init+0x216>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a4d      	ldr	r2, [pc, #308]	; (8004678 <HAL_GPIO_Init+0x310>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d019      	beq.n	800457a <HAL_GPIO_Init+0x212>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a4c      	ldr	r2, [pc, #304]	; (800467c <HAL_GPIO_Init+0x314>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d013      	beq.n	8004576 <HAL_GPIO_Init+0x20e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a4b      	ldr	r2, [pc, #300]	; (8004680 <HAL_GPIO_Init+0x318>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00d      	beq.n	8004572 <HAL_GPIO_Init+0x20a>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a4a      	ldr	r2, [pc, #296]	; (8004684 <HAL_GPIO_Init+0x31c>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d007      	beq.n	800456e <HAL_GPIO_Init+0x206>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a49      	ldr	r2, [pc, #292]	; (8004688 <HAL_GPIO_Init+0x320>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d101      	bne.n	800456a <HAL_GPIO_Init+0x202>
 8004566:	2306      	movs	r3, #6
 8004568:	e00c      	b.n	8004584 <HAL_GPIO_Init+0x21c>
 800456a:	2307      	movs	r3, #7
 800456c:	e00a      	b.n	8004584 <HAL_GPIO_Init+0x21c>
 800456e:	2305      	movs	r3, #5
 8004570:	e008      	b.n	8004584 <HAL_GPIO_Init+0x21c>
 8004572:	2304      	movs	r3, #4
 8004574:	e006      	b.n	8004584 <HAL_GPIO_Init+0x21c>
 8004576:	2303      	movs	r3, #3
 8004578:	e004      	b.n	8004584 <HAL_GPIO_Init+0x21c>
 800457a:	2302      	movs	r3, #2
 800457c:	e002      	b.n	8004584 <HAL_GPIO_Init+0x21c>
 800457e:	2301      	movs	r3, #1
 8004580:	e000      	b.n	8004584 <HAL_GPIO_Init+0x21c>
 8004582:	2300      	movs	r3, #0
 8004584:	69fa      	ldr	r2, [r7, #28]
 8004586:	f002 0203 	and.w	r2, r2, #3
 800458a:	0092      	lsls	r2, r2, #2
 800458c:	4093      	lsls	r3, r2
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	4313      	orrs	r3, r2
 8004592:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004594:	4935      	ldr	r1, [pc, #212]	; (800466c <HAL_GPIO_Init+0x304>)
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	089b      	lsrs	r3, r3, #2
 800459a:	3302      	adds	r3, #2
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045a2:	4b3a      	ldr	r3, [pc, #232]	; (800468c <HAL_GPIO_Init+0x324>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	43db      	mvns	r3, r3
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	4013      	ands	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045c6:	4a31      	ldr	r2, [pc, #196]	; (800468c <HAL_GPIO_Init+0x324>)
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045cc:	4b2f      	ldr	r3, [pc, #188]	; (800468c <HAL_GPIO_Init+0x324>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	43db      	mvns	r3, r3
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	4013      	ands	r3, r2
 80045da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d003      	beq.n	80045f0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045f0:	4a26      	ldr	r2, [pc, #152]	; (800468c <HAL_GPIO_Init+0x324>)
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045f6:	4b25      	ldr	r3, [pc, #148]	; (800468c <HAL_GPIO_Init+0x324>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	43db      	mvns	r3, r3
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	4013      	ands	r3, r2
 8004604:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004612:	69ba      	ldr	r2, [r7, #24]
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	4313      	orrs	r3, r2
 8004618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800461a:	4a1c      	ldr	r2, [pc, #112]	; (800468c <HAL_GPIO_Init+0x324>)
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004620:	4b1a      	ldr	r3, [pc, #104]	; (800468c <HAL_GPIO_Init+0x324>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	43db      	mvns	r3, r3
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	4013      	ands	r3, r2
 800462e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	4313      	orrs	r3, r2
 8004642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004644:	4a11      	ldr	r2, [pc, #68]	; (800468c <HAL_GPIO_Init+0x324>)
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	3301      	adds	r3, #1
 800464e:	61fb      	str	r3, [r7, #28]
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	2b0f      	cmp	r3, #15
 8004654:	f67f ae96 	bls.w	8004384 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004658:	bf00      	nop
 800465a:	bf00      	nop
 800465c:	3724      	adds	r7, #36	; 0x24
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	40023800 	.word	0x40023800
 800466c:	40013800 	.word	0x40013800
 8004670:	40020000 	.word	0x40020000
 8004674:	40020400 	.word	0x40020400
 8004678:	40020800 	.word	0x40020800
 800467c:	40020c00 	.word	0x40020c00
 8004680:	40021000 	.word	0x40021000
 8004684:	40021400 	.word	0x40021400
 8004688:	40021800 	.word	0x40021800
 800468c:	40013c00 	.word	0x40013c00

08004690 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	460b      	mov	r3, r1
 800469a:	807b      	strh	r3, [r7, #2]
 800469c:	4613      	mov	r3, r2
 800469e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046a0:	787b      	ldrb	r3, [r7, #1]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046a6:	887a      	ldrh	r2, [r7, #2]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046ac:	e003      	b.n	80046b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046ae:	887b      	ldrh	r3, [r7, #2]
 80046b0:	041a      	lsls	r2, r3, #16
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	619a      	str	r2, [r3, #24]
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
	...

080046c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e12b      	b.n	800492e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d106      	bne.n	80046f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7fd ff4a 	bl	8002584 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2224      	movs	r2, #36	; 0x24
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0201 	bic.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004716:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004726:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004728:	f000 fa52 	bl	8004bd0 <HAL_RCC_GetPCLK1Freq>
 800472c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	4a81      	ldr	r2, [pc, #516]	; (8004938 <HAL_I2C_Init+0x274>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d807      	bhi.n	8004748 <HAL_I2C_Init+0x84>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4a80      	ldr	r2, [pc, #512]	; (800493c <HAL_I2C_Init+0x278>)
 800473c:	4293      	cmp	r3, r2
 800473e:	bf94      	ite	ls
 8004740:	2301      	movls	r3, #1
 8004742:	2300      	movhi	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	e006      	b.n	8004756 <HAL_I2C_Init+0x92>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4a7d      	ldr	r2, [pc, #500]	; (8004940 <HAL_I2C_Init+0x27c>)
 800474c:	4293      	cmp	r3, r2
 800474e:	bf94      	ite	ls
 8004750:	2301      	movls	r3, #1
 8004752:	2300      	movhi	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e0e7      	b.n	800492e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	4a78      	ldr	r2, [pc, #480]	; (8004944 <HAL_I2C_Init+0x280>)
 8004762:	fba2 2303 	umull	r2, r3, r2, r3
 8004766:	0c9b      	lsrs	r3, r3, #18
 8004768:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	430a      	orrs	r2, r1
 800477c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	4a6a      	ldr	r2, [pc, #424]	; (8004938 <HAL_I2C_Init+0x274>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d802      	bhi.n	8004798 <HAL_I2C_Init+0xd4>
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	3301      	adds	r3, #1
 8004796:	e009      	b.n	80047ac <HAL_I2C_Init+0xe8>
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800479e:	fb02 f303 	mul.w	r3, r2, r3
 80047a2:	4a69      	ldr	r2, [pc, #420]	; (8004948 <HAL_I2C_Init+0x284>)
 80047a4:	fba2 2303 	umull	r2, r3, r2, r3
 80047a8:	099b      	lsrs	r3, r3, #6
 80047aa:	3301      	adds	r3, #1
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6812      	ldr	r2, [r2, #0]
 80047b0:	430b      	orrs	r3, r1
 80047b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80047be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	495c      	ldr	r1, [pc, #368]	; (8004938 <HAL_I2C_Init+0x274>)
 80047c8:	428b      	cmp	r3, r1
 80047ca:	d819      	bhi.n	8004800 <HAL_I2C_Init+0x13c>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	1e59      	subs	r1, r3, #1
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80047da:	1c59      	adds	r1, r3, #1
 80047dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80047e0:	400b      	ands	r3, r1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <HAL_I2C_Init+0x138>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	1e59      	subs	r1, r3, #1
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80047f4:	3301      	adds	r3, #1
 80047f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047fa:	e051      	b.n	80048a0 <HAL_I2C_Init+0x1dc>
 80047fc:	2304      	movs	r3, #4
 80047fe:	e04f      	b.n	80048a0 <HAL_I2C_Init+0x1dc>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d111      	bne.n	800482c <HAL_I2C_Init+0x168>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	1e58      	subs	r0, r3, #1
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6859      	ldr	r1, [r3, #4]
 8004810:	460b      	mov	r3, r1
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	440b      	add	r3, r1
 8004816:	fbb0 f3f3 	udiv	r3, r0, r3
 800481a:	3301      	adds	r3, #1
 800481c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004820:	2b00      	cmp	r3, #0
 8004822:	bf0c      	ite	eq
 8004824:	2301      	moveq	r3, #1
 8004826:	2300      	movne	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	e012      	b.n	8004852 <HAL_I2C_Init+0x18e>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	1e58      	subs	r0, r3, #1
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6859      	ldr	r1, [r3, #4]
 8004834:	460b      	mov	r3, r1
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	440b      	add	r3, r1
 800483a:	0099      	lsls	r1, r3, #2
 800483c:	440b      	add	r3, r1
 800483e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004842:	3301      	adds	r3, #1
 8004844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004848:	2b00      	cmp	r3, #0
 800484a:	bf0c      	ite	eq
 800484c:	2301      	moveq	r3, #1
 800484e:	2300      	movne	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <HAL_I2C_Init+0x196>
 8004856:	2301      	movs	r3, #1
 8004858:	e022      	b.n	80048a0 <HAL_I2C_Init+0x1dc>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10e      	bne.n	8004880 <HAL_I2C_Init+0x1bc>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	1e58      	subs	r0, r3, #1
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6859      	ldr	r1, [r3, #4]
 800486a:	460b      	mov	r3, r1
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	440b      	add	r3, r1
 8004870:	fbb0 f3f3 	udiv	r3, r0, r3
 8004874:	3301      	adds	r3, #1
 8004876:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800487a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800487e:	e00f      	b.n	80048a0 <HAL_I2C_Init+0x1dc>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	1e58      	subs	r0, r3, #1
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6859      	ldr	r1, [r3, #4]
 8004888:	460b      	mov	r3, r1
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	440b      	add	r3, r1
 800488e:	0099      	lsls	r1, r3, #2
 8004890:	440b      	add	r3, r1
 8004892:	fbb0 f3f3 	udiv	r3, r0, r3
 8004896:	3301      	adds	r3, #1
 8004898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800489c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048a0:	6879      	ldr	r1, [r7, #4]
 80048a2:	6809      	ldr	r1, [r1, #0]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	69da      	ldr	r2, [r3, #28]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80048ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	6911      	ldr	r1, [r2, #16]
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	68d2      	ldr	r2, [r2, #12]
 80048da:	4311      	orrs	r1, r2
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6812      	ldr	r2, [r2, #0]
 80048e0:	430b      	orrs	r3, r1
 80048e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	695a      	ldr	r2, [r3, #20]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 0201 	orr.w	r2, r2, #1
 800490e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2220      	movs	r2, #32
 800491a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	000186a0 	.word	0x000186a0
 800493c:	001e847f 	.word	0x001e847f
 8004940:	003d08ff 	.word	0x003d08ff
 8004944:	431bde83 	.word	0x431bde83
 8004948:	10624dd3 	.word	0x10624dd3

0800494c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004952:	2300      	movs	r3, #0
 8004954:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004956:	2300      	movs	r3, #0
 8004958:	603b      	str	r3, [r7, #0]
 800495a:	4b20      	ldr	r3, [pc, #128]	; (80049dc <HAL_PWREx_EnableOverDrive+0x90>)
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	4a1f      	ldr	r2, [pc, #124]	; (80049dc <HAL_PWREx_EnableOverDrive+0x90>)
 8004960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004964:	6413      	str	r3, [r2, #64]	; 0x40
 8004966:	4b1d      	ldr	r3, [pc, #116]	; (80049dc <HAL_PWREx_EnableOverDrive+0x90>)
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496e:	603b      	str	r3, [r7, #0]
 8004970:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004972:	4b1b      	ldr	r3, [pc, #108]	; (80049e0 <HAL_PWREx_EnableOverDrive+0x94>)
 8004974:	2201      	movs	r2, #1
 8004976:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004978:	f7fe fac0 	bl	8002efc <HAL_GetTick>
 800497c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800497e:	e009      	b.n	8004994 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004980:	f7fe fabc 	bl	8002efc <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800498e:	d901      	bls.n	8004994 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e01f      	b.n	80049d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004994:	4b13      	ldr	r3, [pc, #76]	; (80049e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800499c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a0:	d1ee      	bne.n	8004980 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80049a2:	4b11      	ldr	r3, [pc, #68]	; (80049e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80049a4:	2201      	movs	r2, #1
 80049a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049a8:	f7fe faa8 	bl	8002efc <HAL_GetTick>
 80049ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80049ae:	e009      	b.n	80049c4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80049b0:	f7fe faa4 	bl	8002efc <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049be:	d901      	bls.n	80049c4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e007      	b.n	80049d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80049c4:	4b07      	ldr	r3, [pc, #28]	; (80049e4 <HAL_PWREx_EnableOverDrive+0x98>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049d0:	d1ee      	bne.n	80049b0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	40023800 	.word	0x40023800
 80049e0:	420e0040 	.word	0x420e0040
 80049e4:	40007000 	.word	0x40007000
 80049e8:	420e0044 	.word	0x420e0044

080049ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d101      	bne.n	8004a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e0cc      	b.n	8004b9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a00:	4b68      	ldr	r3, [pc, #416]	; (8004ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 030f 	and.w	r3, r3, #15
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d90c      	bls.n	8004a28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a0e:	4b65      	ldr	r3, [pc, #404]	; (8004ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	b2d2      	uxtb	r2, r2
 8004a14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a16:	4b63      	ldr	r3, [pc, #396]	; (8004ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 030f 	and.w	r3, r3, #15
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d001      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e0b8      	b.n	8004b9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d020      	beq.n	8004a76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d005      	beq.n	8004a4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a40:	4b59      	ldr	r3, [pc, #356]	; (8004ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	4a58      	ldr	r2, [pc, #352]	; (8004ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0308 	and.w	r3, r3, #8
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d005      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a58:	4b53      	ldr	r3, [pc, #332]	; (8004ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	4a52      	ldr	r2, [pc, #328]	; (8004ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a64:	4b50      	ldr	r3, [pc, #320]	; (8004ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	494d      	ldr	r1, [pc, #308]	; (8004ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d044      	beq.n	8004b0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d107      	bne.n	8004a9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a8a:	4b47      	ldr	r3, [pc, #284]	; (8004ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d119      	bne.n	8004aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e07f      	b.n	8004b9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d003      	beq.n	8004aaa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aa6:	2b03      	cmp	r3, #3
 8004aa8:	d107      	bne.n	8004aba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aaa:	4b3f      	ldr	r3, [pc, #252]	; (8004ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d109      	bne.n	8004aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e06f      	b.n	8004b9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aba:	4b3b      	ldr	r3, [pc, #236]	; (8004ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e067      	b.n	8004b9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aca:	4b37      	ldr	r3, [pc, #220]	; (8004ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f023 0203 	bic.w	r2, r3, #3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	4934      	ldr	r1, [pc, #208]	; (8004ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004adc:	f7fe fa0e 	bl	8002efc <HAL_GetTick>
 8004ae0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ae2:	e00a      	b.n	8004afa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ae4:	f7fe fa0a 	bl	8002efc <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e04f      	b.n	8004b9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afa:	4b2b      	ldr	r3, [pc, #172]	; (8004ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f003 020c 	and.w	r2, r3, #12
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d1eb      	bne.n	8004ae4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b0c:	4b25      	ldr	r3, [pc, #148]	; (8004ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 030f 	and.w	r3, r3, #15
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d20c      	bcs.n	8004b34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b1a:	4b22      	ldr	r3, [pc, #136]	; (8004ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	b2d2      	uxtb	r2, r2
 8004b20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b22:	4b20      	ldr	r3, [pc, #128]	; (8004ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 030f 	and.w	r3, r3, #15
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d001      	beq.n	8004b34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e032      	b.n	8004b9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d008      	beq.n	8004b52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b40:	4b19      	ldr	r3, [pc, #100]	; (8004ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	4916      	ldr	r1, [pc, #88]	; (8004ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0308 	and.w	r3, r3, #8
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d009      	beq.n	8004b72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b5e:	4b12      	ldr	r3, [pc, #72]	; (8004ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	490e      	ldr	r1, [pc, #56]	; (8004ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b72:	f000 fb7f 	bl	8005274 <HAL_RCC_GetSysClockFreq>
 8004b76:	4602      	mov	r2, r0
 8004b78:	4b0b      	ldr	r3, [pc, #44]	; (8004ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	091b      	lsrs	r3, r3, #4
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	490a      	ldr	r1, [pc, #40]	; (8004bac <HAL_RCC_ClockConfig+0x1c0>)
 8004b84:	5ccb      	ldrb	r3, [r1, r3]
 8004b86:	fa22 f303 	lsr.w	r3, r2, r3
 8004b8a:	4a09      	ldr	r2, [pc, #36]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b8e:	4b09      	ldr	r3, [pc, #36]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fe f96e 	bl	8002e74 <HAL_InitTick>

  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	40023c00 	.word	0x40023c00
 8004ba8:	40023800 	.word	0x40023800
 8004bac:	0800acd8 	.word	0x0800acd8
 8004bb0:	20000010 	.word	0x20000010
 8004bb4:	20000014 	.word	0x20000014

08004bb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bbc:	4b03      	ldr	r3, [pc, #12]	; (8004bcc <HAL_RCC_GetHCLKFreq+0x14>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	20000010 	.word	0x20000010

08004bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bd4:	f7ff fff0 	bl	8004bb8 <HAL_RCC_GetHCLKFreq>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	4b05      	ldr	r3, [pc, #20]	; (8004bf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	0a9b      	lsrs	r3, r3, #10
 8004be0:	f003 0307 	and.w	r3, r3, #7
 8004be4:	4903      	ldr	r1, [pc, #12]	; (8004bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004be6:	5ccb      	ldrb	r3, [r1, r3]
 8004be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	0800ace8 	.word	0x0800ace8

08004bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bfc:	f7ff ffdc 	bl	8004bb8 <HAL_RCC_GetHCLKFreq>
 8004c00:	4602      	mov	r2, r0
 8004c02:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	0b5b      	lsrs	r3, r3, #13
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	4903      	ldr	r1, [pc, #12]	; (8004c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c0e:	5ccb      	ldrb	r3, [r1, r3]
 8004c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	0800ace8 	.word	0x0800ace8

08004c20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b08c      	sub	sp, #48	; 0x30
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004c34:	2300      	movs	r3, #0
 8004c36:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d010      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004c58:	4b6f      	ldr	r3, [pc, #444]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c5e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c66:	496c      	ldr	r1, [pc, #432]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004c76:	2301      	movs	r3, #1
 8004c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d010      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004c86:	4b64      	ldr	r3, [pc, #400]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c8c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c94:	4960      	ldr	r1, [pc, #384]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d101      	bne.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d017      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cb4:	4b58      	ldr	r3, [pc, #352]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc2:	4955      	ldr	r1, [pc, #340]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cd2:	d101      	bne.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0308 	and.w	r3, r3, #8
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d017      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004cf0:	4b49      	ldr	r3, [pc, #292]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cf6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfe:	4946      	ldr	r1, [pc, #280]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d0e:	d101      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004d10:	2301      	movs	r3, #1
 8004d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0320 	and.w	r3, r3, #32
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 808a 	beq.w	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60bb      	str	r3, [r7, #8]
 8004d32:	4b39      	ldr	r3, [pc, #228]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	4a38      	ldr	r2, [pc, #224]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d3e:	4b36      	ldr	r3, [pc, #216]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d46:	60bb      	str	r3, [r7, #8]
 8004d48:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d4a:	4b34      	ldr	r3, [pc, #208]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a33      	ldr	r2, [pc, #204]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d54:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d56:	f7fe f8d1 	bl	8002efc <HAL_GetTick>
 8004d5a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d5c:	e008      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d5e:	f7fe f8cd 	bl	8002efc <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e278      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d70:	4b2a      	ldr	r3, [pc, #168]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d0f0      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d7c:	4b26      	ldr	r3, [pc, #152]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d84:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d02f      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d94:	6a3a      	ldr	r2, [r7, #32]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d028      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d9a:	4b1f      	ldr	r3, [pc, #124]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004da2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004da4:	4b1e      	ldr	r3, [pc, #120]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004da6:	2201      	movs	r2, #1
 8004da8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004daa:	4b1d      	ldr	r3, [pc, #116]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004db0:	4a19      	ldr	r2, [pc, #100]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004db2:	6a3b      	ldr	r3, [r7, #32]
 8004db4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004db6:	4b18      	ldr	r3, [pc, #96]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d114      	bne.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004dc2:	f7fe f89b 	bl	8002efc <HAL_GetTick>
 8004dc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dc8:	e00a      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dca:	f7fe f897 	bl	8002efc <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d901      	bls.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e240      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de0:	4b0d      	ldr	r3, [pc, #52]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d0ee      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004df4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004df8:	d114      	bne.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004dfa:	4b07      	ldr	r3, [pc, #28]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e0e:	4902      	ldr	r1, [pc, #8]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	608b      	str	r3, [r1, #8]
 8004e14:	e00c      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004e16:	bf00      	nop
 8004e18:	40023800 	.word	0x40023800
 8004e1c:	40007000 	.word	0x40007000
 8004e20:	42470e40 	.word	0x42470e40
 8004e24:	4b4a      	ldr	r3, [pc, #296]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	4a49      	ldr	r2, [pc, #292]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e2a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e2e:	6093      	str	r3, [r2, #8]
 8004e30:	4b47      	ldr	r3, [pc, #284]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e3c:	4944      	ldr	r1, [pc, #272]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0310 	and.w	r3, r3, #16
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d004      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004e54:	4b3f      	ldr	r3, [pc, #252]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004e56:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00a      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004e64:	4b3a      	ldr	r3, [pc, #232]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e72:	4937      	ldr	r1, [pc, #220]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e86:	4b32      	ldr	r3, [pc, #200]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e8c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e94:	492e      	ldr	r1, [pc, #184]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d011      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004ea8:	4b29      	ldr	r3, [pc, #164]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eae:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb6:	4926      	ldr	r1, [pc, #152]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ec6:	d101      	bne.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004ed8:	4b1d      	ldr	r3, [pc, #116]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ede:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee6:	491a      	ldr	r1, [pc, #104]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d011      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8004efa:	4b15      	ldr	r3, [pc, #84]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004efc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f00:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f08:	4911      	ldr	r1, [pc, #68]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f18:	d101      	bne.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d005      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f2c:	f040 80ff 	bne.w	800512e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f30:	4b09      	ldr	r3, [pc, #36]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f36:	f7fd ffe1 	bl	8002efc <HAL_GetTick>
 8004f3a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f3c:	e00e      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f3e:	f7fd ffdd 	bl	8002efc <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d907      	bls.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e188      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004f50:	40023800 	.word	0x40023800
 8004f54:	424711e0 	.word	0x424711e0
 8004f58:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f5c:	4b7e      	ldr	r3, [pc, #504]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1ea      	bne.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d003      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d009      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d028      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d124      	bne.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004f90:	4b71      	ldr	r3, [pc, #452]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f96:	0c1b      	lsrs	r3, r3, #16
 8004f98:	f003 0303 	and.w	r3, r3, #3
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	005b      	lsls	r3, r3, #1
 8004fa0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004fa2:	4b6d      	ldr	r3, [pc, #436]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fa8:	0e1b      	lsrs	r3, r3, #24
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	019b      	lsls	r3, r3, #6
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	085b      	lsrs	r3, r3, #1
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	041b      	lsls	r3, r3, #16
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	061b      	lsls	r3, r3, #24
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	071b      	lsls	r3, r3, #28
 8004fd2:	4961      	ldr	r1, [pc, #388]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0304 	and.w	r3, r3, #4
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d004      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fee:	d00a      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d035      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005000:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005004:	d130      	bne.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005006:	4b54      	ldr	r3, [pc, #336]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800500c:	0c1b      	lsrs	r3, r3, #16
 800500e:	f003 0303 	and.w	r3, r3, #3
 8005012:	3301      	adds	r3, #1
 8005014:	005b      	lsls	r3, r3, #1
 8005016:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005018:	4b4f      	ldr	r3, [pc, #316]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800501a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800501e:	0f1b      	lsrs	r3, r3, #28
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	019b      	lsls	r3, r3, #6
 8005030:	431a      	orrs	r2, r3
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	085b      	lsrs	r3, r3, #1
 8005036:	3b01      	subs	r3, #1
 8005038:	041b      	lsls	r3, r3, #16
 800503a:	431a      	orrs	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	061b      	lsls	r3, r3, #24
 8005042:	431a      	orrs	r2, r3
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	071b      	lsls	r3, r3, #28
 8005048:	4943      	ldr	r1, [pc, #268]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800504a:	4313      	orrs	r3, r2
 800504c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005050:	4b41      	ldr	r3, [pc, #260]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005052:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005056:	f023 021f 	bic.w	r2, r3, #31
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505e:	3b01      	subs	r3, #1
 8005060:	493d      	ldr	r1, [pc, #244]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005062:	4313      	orrs	r3, r2
 8005064:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005070:	2b00      	cmp	r3, #0
 8005072:	d029      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005078:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800507c:	d124      	bne.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800507e:	4b36      	ldr	r3, [pc, #216]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005084:	0c1b      	lsrs	r3, r3, #16
 8005086:	f003 0303 	and.w	r3, r3, #3
 800508a:	3301      	adds	r3, #1
 800508c:	005b      	lsls	r3, r3, #1
 800508e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005090:	4b31      	ldr	r3, [pc, #196]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005096:	0f1b      	lsrs	r3, r3, #28
 8005098:	f003 0307 	and.w	r3, r3, #7
 800509c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	019b      	lsls	r3, r3, #6
 80050a8:	431a      	orrs	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	085b      	lsrs	r3, r3, #1
 80050b0:	3b01      	subs	r3, #1
 80050b2:	041b      	lsls	r3, r3, #16
 80050b4:	431a      	orrs	r2, r3
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	061b      	lsls	r3, r3, #24
 80050ba:	431a      	orrs	r2, r3
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	071b      	lsls	r3, r3, #28
 80050c0:	4925      	ldr	r1, [pc, #148]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d016      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	019b      	lsls	r3, r3, #6
 80050de:	431a      	orrs	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	085b      	lsrs	r3, r3, #1
 80050e6:	3b01      	subs	r3, #1
 80050e8:	041b      	lsls	r3, r3, #16
 80050ea:	431a      	orrs	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	061b      	lsls	r3, r3, #24
 80050f2:	431a      	orrs	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	695b      	ldr	r3, [r3, #20]
 80050f8:	071b      	lsls	r3, r3, #28
 80050fa:	4917      	ldr	r1, [pc, #92]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005102:	4b16      	ldr	r3, [pc, #88]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005104:	2201      	movs	r2, #1
 8005106:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005108:	f7fd fef8 	bl	8002efc <HAL_GetTick>
 800510c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800510e:	e008      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005110:	f7fd fef4 	bl	8002efc <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b02      	cmp	r3, #2
 800511c:	d901      	bls.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e09f      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005122:	4b0d      	ldr	r3, [pc, #52]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d0f0      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800512e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005130:	2b01      	cmp	r3, #1
 8005132:	f040 8095 	bne.w	8005260 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005136:	4b0a      	ldr	r3, [pc, #40]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005138:	2200      	movs	r2, #0
 800513a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800513c:	f7fd fede 	bl	8002efc <HAL_GetTick>
 8005140:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005142:	e00f      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005144:	f7fd feda 	bl	8002efc <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b02      	cmp	r3, #2
 8005150:	d908      	bls.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e085      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005156:	bf00      	nop
 8005158:	40023800 	.word	0x40023800
 800515c:	42470068 	.word	0x42470068
 8005160:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005164:	4b41      	ldr	r3, [pc, #260]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800516c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005170:	d0e8      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0304 	and.w	r3, r3, #4
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005182:	2b00      	cmp	r3, #0
 8005184:	d009      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800518e:	2b00      	cmp	r3, #0
 8005190:	d02b      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005196:	2b00      	cmp	r3, #0
 8005198:	d127      	bne.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800519a:	4b34      	ldr	r3, [pc, #208]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800519c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a0:	0c1b      	lsrs	r3, r3, #16
 80051a2:	f003 0303 	and.w	r3, r3, #3
 80051a6:	3301      	adds	r3, #1
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	699a      	ldr	r2, [r3, #24]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	69db      	ldr	r3, [r3, #28]
 80051b4:	019b      	lsls	r3, r3, #6
 80051b6:	431a      	orrs	r2, r3
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	085b      	lsrs	r3, r3, #1
 80051bc:	3b01      	subs	r3, #1
 80051be:	041b      	lsls	r3, r3, #16
 80051c0:	431a      	orrs	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	061b      	lsls	r3, r3, #24
 80051c8:	4928      	ldr	r1, [pc, #160]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80051d0:	4b26      	ldr	r3, [pc, #152]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80051d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051d6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051de:	3b01      	subs	r3, #1
 80051e0:	021b      	lsls	r3, r3, #8
 80051e2:	4922      	ldr	r1, [pc, #136]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d01d      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051fe:	d118      	bne.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005200:	4b1a      	ldr	r3, [pc, #104]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005206:	0e1b      	lsrs	r3, r3, #24
 8005208:	f003 030f 	and.w	r3, r3, #15
 800520c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699a      	ldr	r2, [r3, #24]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	019b      	lsls	r3, r3, #6
 8005218:	431a      	orrs	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	085b      	lsrs	r3, r3, #1
 8005220:	3b01      	subs	r3, #1
 8005222:	041b      	lsls	r3, r3, #16
 8005224:	431a      	orrs	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	061b      	lsls	r3, r3, #24
 800522a:	4910      	ldr	r1, [pc, #64]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800522c:	4313      	orrs	r3, r2
 800522e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005232:	4b0f      	ldr	r3, [pc, #60]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8005234:	2201      	movs	r2, #1
 8005236:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005238:	f7fd fe60 	bl	8002efc <HAL_GetTick>
 800523c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800523e:	e008      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005240:	f7fd fe5c 	bl	8002efc <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b02      	cmp	r3, #2
 800524c:	d901      	bls.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e007      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005252:	4b06      	ldr	r3, [pc, #24]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800525a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800525e:	d1ef      	bne.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3730      	adds	r7, #48	; 0x30
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	40023800 	.word	0x40023800
 8005270:	42470070 	.word	0x42470070

08005274 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005278:	b0ae      	sub	sp, #184	; 0xb8
 800527a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800527c:	2300      	movs	r3, #0
 800527e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8005282:	2300      	movs	r3, #0
 8005284:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005288:	2300      	movs	r3, #0
 800528a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800528e:	2300      	movs	r3, #0
 8005290:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8005294:	2300      	movs	r3, #0
 8005296:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800529a:	4bcb      	ldr	r3, [pc, #812]	; (80055c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 030c 	and.w	r3, r3, #12
 80052a2:	2b0c      	cmp	r3, #12
 80052a4:	f200 8206 	bhi.w	80056b4 <HAL_RCC_GetSysClockFreq+0x440>
 80052a8:	a201      	add	r2, pc, #4	; (adr r2, 80052b0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80052aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ae:	bf00      	nop
 80052b0:	080052e5 	.word	0x080052e5
 80052b4:	080056b5 	.word	0x080056b5
 80052b8:	080056b5 	.word	0x080056b5
 80052bc:	080056b5 	.word	0x080056b5
 80052c0:	080052ed 	.word	0x080052ed
 80052c4:	080056b5 	.word	0x080056b5
 80052c8:	080056b5 	.word	0x080056b5
 80052cc:	080056b5 	.word	0x080056b5
 80052d0:	080052f5 	.word	0x080052f5
 80052d4:	080056b5 	.word	0x080056b5
 80052d8:	080056b5 	.word	0x080056b5
 80052dc:	080056b5 	.word	0x080056b5
 80052e0:	080054e5 	.word	0x080054e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052e4:	4bb9      	ldr	r3, [pc, #740]	; (80055cc <HAL_RCC_GetSysClockFreq+0x358>)
 80052e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80052ea:	e1e7      	b.n	80056bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052ec:	4bb8      	ldr	r3, [pc, #736]	; (80055d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80052ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80052f2:	e1e3      	b.n	80056bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052f4:	4bb4      	ldr	r3, [pc, #720]	; (80055c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005300:	4bb1      	ldr	r3, [pc, #708]	; (80055c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d071      	beq.n	80053f0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800530c:	4bae      	ldr	r3, [pc, #696]	; (80055c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	099b      	lsrs	r3, r3, #6
 8005312:	2200      	movs	r2, #0
 8005314:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005318:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800531c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005324:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005328:	2300      	movs	r3, #0
 800532a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800532e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005332:	4622      	mov	r2, r4
 8005334:	462b      	mov	r3, r5
 8005336:	f04f 0000 	mov.w	r0, #0
 800533a:	f04f 0100 	mov.w	r1, #0
 800533e:	0159      	lsls	r1, r3, #5
 8005340:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005344:	0150      	lsls	r0, r2, #5
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
 800534a:	4621      	mov	r1, r4
 800534c:	1a51      	subs	r1, r2, r1
 800534e:	6439      	str	r1, [r7, #64]	; 0x40
 8005350:	4629      	mov	r1, r5
 8005352:	eb63 0301 	sbc.w	r3, r3, r1
 8005356:	647b      	str	r3, [r7, #68]	; 0x44
 8005358:	f04f 0200 	mov.w	r2, #0
 800535c:	f04f 0300 	mov.w	r3, #0
 8005360:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005364:	4649      	mov	r1, r9
 8005366:	018b      	lsls	r3, r1, #6
 8005368:	4641      	mov	r1, r8
 800536a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800536e:	4641      	mov	r1, r8
 8005370:	018a      	lsls	r2, r1, #6
 8005372:	4641      	mov	r1, r8
 8005374:	1a51      	subs	r1, r2, r1
 8005376:	63b9      	str	r1, [r7, #56]	; 0x38
 8005378:	4649      	mov	r1, r9
 800537a:	eb63 0301 	sbc.w	r3, r3, r1
 800537e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005380:	f04f 0200 	mov.w	r2, #0
 8005384:	f04f 0300 	mov.w	r3, #0
 8005388:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800538c:	4649      	mov	r1, r9
 800538e:	00cb      	lsls	r3, r1, #3
 8005390:	4641      	mov	r1, r8
 8005392:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005396:	4641      	mov	r1, r8
 8005398:	00ca      	lsls	r2, r1, #3
 800539a:	4610      	mov	r0, r2
 800539c:	4619      	mov	r1, r3
 800539e:	4603      	mov	r3, r0
 80053a0:	4622      	mov	r2, r4
 80053a2:	189b      	adds	r3, r3, r2
 80053a4:	633b      	str	r3, [r7, #48]	; 0x30
 80053a6:	462b      	mov	r3, r5
 80053a8:	460a      	mov	r2, r1
 80053aa:	eb42 0303 	adc.w	r3, r2, r3
 80053ae:	637b      	str	r3, [r7, #52]	; 0x34
 80053b0:	f04f 0200 	mov.w	r2, #0
 80053b4:	f04f 0300 	mov.w	r3, #0
 80053b8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80053bc:	4629      	mov	r1, r5
 80053be:	024b      	lsls	r3, r1, #9
 80053c0:	4621      	mov	r1, r4
 80053c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80053c6:	4621      	mov	r1, r4
 80053c8:	024a      	lsls	r2, r1, #9
 80053ca:	4610      	mov	r0, r2
 80053cc:	4619      	mov	r1, r3
 80053ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053d2:	2200      	movs	r2, #0
 80053d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80053d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80053dc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80053e0:	f7fb fc22 	bl	8000c28 <__aeabi_uldivmod>
 80053e4:	4602      	mov	r2, r0
 80053e6:	460b      	mov	r3, r1
 80053e8:	4613      	mov	r3, r2
 80053ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053ee:	e067      	b.n	80054c0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053f0:	4b75      	ldr	r3, [pc, #468]	; (80055c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	099b      	lsrs	r3, r3, #6
 80053f6:	2200      	movs	r2, #0
 80053f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053fc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005400:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005408:	67bb      	str	r3, [r7, #120]	; 0x78
 800540a:	2300      	movs	r3, #0
 800540c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800540e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8005412:	4622      	mov	r2, r4
 8005414:	462b      	mov	r3, r5
 8005416:	f04f 0000 	mov.w	r0, #0
 800541a:	f04f 0100 	mov.w	r1, #0
 800541e:	0159      	lsls	r1, r3, #5
 8005420:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005424:	0150      	lsls	r0, r2, #5
 8005426:	4602      	mov	r2, r0
 8005428:	460b      	mov	r3, r1
 800542a:	4621      	mov	r1, r4
 800542c:	1a51      	subs	r1, r2, r1
 800542e:	62b9      	str	r1, [r7, #40]	; 0x28
 8005430:	4629      	mov	r1, r5
 8005432:	eb63 0301 	sbc.w	r3, r3, r1
 8005436:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005438:	f04f 0200 	mov.w	r2, #0
 800543c:	f04f 0300 	mov.w	r3, #0
 8005440:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005444:	4649      	mov	r1, r9
 8005446:	018b      	lsls	r3, r1, #6
 8005448:	4641      	mov	r1, r8
 800544a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800544e:	4641      	mov	r1, r8
 8005450:	018a      	lsls	r2, r1, #6
 8005452:	4641      	mov	r1, r8
 8005454:	ebb2 0a01 	subs.w	sl, r2, r1
 8005458:	4649      	mov	r1, r9
 800545a:	eb63 0b01 	sbc.w	fp, r3, r1
 800545e:	f04f 0200 	mov.w	r2, #0
 8005462:	f04f 0300 	mov.w	r3, #0
 8005466:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800546a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800546e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005472:	4692      	mov	sl, r2
 8005474:	469b      	mov	fp, r3
 8005476:	4623      	mov	r3, r4
 8005478:	eb1a 0303 	adds.w	r3, sl, r3
 800547c:	623b      	str	r3, [r7, #32]
 800547e:	462b      	mov	r3, r5
 8005480:	eb4b 0303 	adc.w	r3, fp, r3
 8005484:	627b      	str	r3, [r7, #36]	; 0x24
 8005486:	f04f 0200 	mov.w	r2, #0
 800548a:	f04f 0300 	mov.w	r3, #0
 800548e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005492:	4629      	mov	r1, r5
 8005494:	028b      	lsls	r3, r1, #10
 8005496:	4621      	mov	r1, r4
 8005498:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800549c:	4621      	mov	r1, r4
 800549e:	028a      	lsls	r2, r1, #10
 80054a0:	4610      	mov	r0, r2
 80054a2:	4619      	mov	r1, r3
 80054a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054a8:	2200      	movs	r2, #0
 80054aa:	673b      	str	r3, [r7, #112]	; 0x70
 80054ac:	677a      	str	r2, [r7, #116]	; 0x74
 80054ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80054b2:	f7fb fbb9 	bl	8000c28 <__aeabi_uldivmod>
 80054b6:	4602      	mov	r2, r0
 80054b8:	460b      	mov	r3, r1
 80054ba:	4613      	mov	r3, r2
 80054bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054c0:	4b41      	ldr	r3, [pc, #260]	; (80055c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	0c1b      	lsrs	r3, r3, #16
 80054c6:	f003 0303 	and.w	r3, r3, #3
 80054ca:	3301      	adds	r3, #1
 80054cc:	005b      	lsls	r3, r3, #1
 80054ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80054d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80054d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80054da:	fbb2 f3f3 	udiv	r3, r2, r3
 80054de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80054e2:	e0eb      	b.n	80056bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054e4:	4b38      	ldr	r3, [pc, #224]	; (80055c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054f0:	4b35      	ldr	r3, [pc, #212]	; (80055c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d06b      	beq.n	80055d4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054fc:	4b32      	ldr	r3, [pc, #200]	; (80055c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	099b      	lsrs	r3, r3, #6
 8005502:	2200      	movs	r2, #0
 8005504:	66bb      	str	r3, [r7, #104]	; 0x68
 8005506:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005508:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800550a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800550e:	663b      	str	r3, [r7, #96]	; 0x60
 8005510:	2300      	movs	r3, #0
 8005512:	667b      	str	r3, [r7, #100]	; 0x64
 8005514:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005518:	4622      	mov	r2, r4
 800551a:	462b      	mov	r3, r5
 800551c:	f04f 0000 	mov.w	r0, #0
 8005520:	f04f 0100 	mov.w	r1, #0
 8005524:	0159      	lsls	r1, r3, #5
 8005526:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800552a:	0150      	lsls	r0, r2, #5
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	4621      	mov	r1, r4
 8005532:	1a51      	subs	r1, r2, r1
 8005534:	61b9      	str	r1, [r7, #24]
 8005536:	4629      	mov	r1, r5
 8005538:	eb63 0301 	sbc.w	r3, r3, r1
 800553c:	61fb      	str	r3, [r7, #28]
 800553e:	f04f 0200 	mov.w	r2, #0
 8005542:	f04f 0300 	mov.w	r3, #0
 8005546:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800554a:	4659      	mov	r1, fp
 800554c:	018b      	lsls	r3, r1, #6
 800554e:	4651      	mov	r1, sl
 8005550:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005554:	4651      	mov	r1, sl
 8005556:	018a      	lsls	r2, r1, #6
 8005558:	4651      	mov	r1, sl
 800555a:	ebb2 0801 	subs.w	r8, r2, r1
 800555e:	4659      	mov	r1, fp
 8005560:	eb63 0901 	sbc.w	r9, r3, r1
 8005564:	f04f 0200 	mov.w	r2, #0
 8005568:	f04f 0300 	mov.w	r3, #0
 800556c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005570:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005574:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005578:	4690      	mov	r8, r2
 800557a:	4699      	mov	r9, r3
 800557c:	4623      	mov	r3, r4
 800557e:	eb18 0303 	adds.w	r3, r8, r3
 8005582:	613b      	str	r3, [r7, #16]
 8005584:	462b      	mov	r3, r5
 8005586:	eb49 0303 	adc.w	r3, r9, r3
 800558a:	617b      	str	r3, [r7, #20]
 800558c:	f04f 0200 	mov.w	r2, #0
 8005590:	f04f 0300 	mov.w	r3, #0
 8005594:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005598:	4629      	mov	r1, r5
 800559a:	024b      	lsls	r3, r1, #9
 800559c:	4621      	mov	r1, r4
 800559e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80055a2:	4621      	mov	r1, r4
 80055a4:	024a      	lsls	r2, r1, #9
 80055a6:	4610      	mov	r0, r2
 80055a8:	4619      	mov	r1, r3
 80055aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055ae:	2200      	movs	r2, #0
 80055b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80055b2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80055b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80055b8:	f7fb fb36 	bl	8000c28 <__aeabi_uldivmod>
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	4613      	mov	r3, r2
 80055c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055c6:	e065      	b.n	8005694 <HAL_RCC_GetSysClockFreq+0x420>
 80055c8:	40023800 	.word	0x40023800
 80055cc:	00f42400 	.word	0x00f42400
 80055d0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055d4:	4b3d      	ldr	r3, [pc, #244]	; (80056cc <HAL_RCC_GetSysClockFreq+0x458>)
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	099b      	lsrs	r3, r3, #6
 80055da:	2200      	movs	r2, #0
 80055dc:	4618      	mov	r0, r3
 80055de:	4611      	mov	r1, r2
 80055e0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80055e4:	653b      	str	r3, [r7, #80]	; 0x50
 80055e6:	2300      	movs	r3, #0
 80055e8:	657b      	str	r3, [r7, #84]	; 0x54
 80055ea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80055ee:	4642      	mov	r2, r8
 80055f0:	464b      	mov	r3, r9
 80055f2:	f04f 0000 	mov.w	r0, #0
 80055f6:	f04f 0100 	mov.w	r1, #0
 80055fa:	0159      	lsls	r1, r3, #5
 80055fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005600:	0150      	lsls	r0, r2, #5
 8005602:	4602      	mov	r2, r0
 8005604:	460b      	mov	r3, r1
 8005606:	4641      	mov	r1, r8
 8005608:	1a51      	subs	r1, r2, r1
 800560a:	60b9      	str	r1, [r7, #8]
 800560c:	4649      	mov	r1, r9
 800560e:	eb63 0301 	sbc.w	r3, r3, r1
 8005612:	60fb      	str	r3, [r7, #12]
 8005614:	f04f 0200 	mov.w	r2, #0
 8005618:	f04f 0300 	mov.w	r3, #0
 800561c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005620:	4659      	mov	r1, fp
 8005622:	018b      	lsls	r3, r1, #6
 8005624:	4651      	mov	r1, sl
 8005626:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800562a:	4651      	mov	r1, sl
 800562c:	018a      	lsls	r2, r1, #6
 800562e:	4651      	mov	r1, sl
 8005630:	1a54      	subs	r4, r2, r1
 8005632:	4659      	mov	r1, fp
 8005634:	eb63 0501 	sbc.w	r5, r3, r1
 8005638:	f04f 0200 	mov.w	r2, #0
 800563c:	f04f 0300 	mov.w	r3, #0
 8005640:	00eb      	lsls	r3, r5, #3
 8005642:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005646:	00e2      	lsls	r2, r4, #3
 8005648:	4614      	mov	r4, r2
 800564a:	461d      	mov	r5, r3
 800564c:	4643      	mov	r3, r8
 800564e:	18e3      	adds	r3, r4, r3
 8005650:	603b      	str	r3, [r7, #0]
 8005652:	464b      	mov	r3, r9
 8005654:	eb45 0303 	adc.w	r3, r5, r3
 8005658:	607b      	str	r3, [r7, #4]
 800565a:	f04f 0200 	mov.w	r2, #0
 800565e:	f04f 0300 	mov.w	r3, #0
 8005662:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005666:	4629      	mov	r1, r5
 8005668:	028b      	lsls	r3, r1, #10
 800566a:	4621      	mov	r1, r4
 800566c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005670:	4621      	mov	r1, r4
 8005672:	028a      	lsls	r2, r1, #10
 8005674:	4610      	mov	r0, r2
 8005676:	4619      	mov	r1, r3
 8005678:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800567c:	2200      	movs	r2, #0
 800567e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005680:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005682:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005686:	f7fb facf 	bl	8000c28 <__aeabi_uldivmod>
 800568a:	4602      	mov	r2, r0
 800568c:	460b      	mov	r3, r1
 800568e:	4613      	mov	r3, r2
 8005690:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005694:	4b0d      	ldr	r3, [pc, #52]	; (80056cc <HAL_RCC_GetSysClockFreq+0x458>)
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	0f1b      	lsrs	r3, r3, #28
 800569a:	f003 0307 	and.w	r3, r3, #7
 800569e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80056a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80056a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80056aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80056b2:	e003      	b.n	80056bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056b4:	4b06      	ldr	r3, [pc, #24]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80056b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80056ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	37b8      	adds	r7, #184	; 0xb8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056ca:	bf00      	nop
 80056cc:	40023800 	.word	0x40023800
 80056d0:	00f42400 	.word	0x00f42400

080056d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e28d      	b.n	8005c02 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f000 8083 	beq.w	80057fa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80056f4:	4b94      	ldr	r3, [pc, #592]	; (8005948 <HAL_RCC_OscConfig+0x274>)
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f003 030c 	and.w	r3, r3, #12
 80056fc:	2b04      	cmp	r3, #4
 80056fe:	d019      	beq.n	8005734 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005700:	4b91      	ldr	r3, [pc, #580]	; (8005948 <HAL_RCC_OscConfig+0x274>)
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005708:	2b08      	cmp	r3, #8
 800570a:	d106      	bne.n	800571a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800570c:	4b8e      	ldr	r3, [pc, #568]	; (8005948 <HAL_RCC_OscConfig+0x274>)
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005714:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005718:	d00c      	beq.n	8005734 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800571a:	4b8b      	ldr	r3, [pc, #556]	; (8005948 <HAL_RCC_OscConfig+0x274>)
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005722:	2b0c      	cmp	r3, #12
 8005724:	d112      	bne.n	800574c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005726:	4b88      	ldr	r3, [pc, #544]	; (8005948 <HAL_RCC_OscConfig+0x274>)
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800572e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005732:	d10b      	bne.n	800574c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005734:	4b84      	ldr	r3, [pc, #528]	; (8005948 <HAL_RCC_OscConfig+0x274>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d05b      	beq.n	80057f8 <HAL_RCC_OscConfig+0x124>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d157      	bne.n	80057f8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e25a      	b.n	8005c02 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005754:	d106      	bne.n	8005764 <HAL_RCC_OscConfig+0x90>
 8005756:	4b7c      	ldr	r3, [pc, #496]	; (8005948 <HAL_RCC_OscConfig+0x274>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a7b      	ldr	r2, [pc, #492]	; (8005948 <HAL_RCC_OscConfig+0x274>)
 800575c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005760:	6013      	str	r3, [r2, #0]
 8005762:	e01d      	b.n	80057a0 <HAL_RCC_OscConfig+0xcc>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800576c:	d10c      	bne.n	8005788 <HAL_RCC_OscConfig+0xb4>
 800576e:	4b76      	ldr	r3, [pc, #472]	; (8005948 <HAL_RCC_OscConfig+0x274>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a75      	ldr	r2, [pc, #468]	; (8005948 <HAL_RCC_OscConfig+0x274>)
 8005774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005778:	6013      	str	r3, [r2, #0]
 800577a:	4b73      	ldr	r3, [pc, #460]	; (8005948 <HAL_RCC_OscConfig+0x274>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a72      	ldr	r2, [pc, #456]	; (8005948 <HAL_RCC_OscConfig+0x274>)
 8005780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005784:	6013      	str	r3, [r2, #0]
 8005786:	e00b      	b.n	80057a0 <HAL_RCC_OscConfig+0xcc>
 8005788:	4b6f      	ldr	r3, [pc, #444]	; (8005948 <HAL_RCC_OscConfig+0x274>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a6e      	ldr	r2, [pc, #440]	; (8005948 <HAL_RCC_OscConfig+0x274>)
 800578e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005792:	6013      	str	r3, [r2, #0]
 8005794:	4b6c      	ldr	r3, [pc, #432]	; (8005948 <HAL_RCC_OscConfig+0x274>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a6b      	ldr	r2, [pc, #428]	; (8005948 <HAL_RCC_OscConfig+0x274>)
 800579a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800579e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d013      	beq.n	80057d0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a8:	f7fd fba8 	bl	8002efc <HAL_GetTick>
 80057ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ae:	e008      	b.n	80057c2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057b0:	f7fd fba4 	bl	8002efc <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b64      	cmp	r3, #100	; 0x64
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e21f      	b.n	8005c02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057c2:	4b61      	ldr	r3, [pc, #388]	; (8005948 <HAL_RCC_OscConfig+0x274>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d0f0      	beq.n	80057b0 <HAL_RCC_OscConfig+0xdc>
 80057ce:	e014      	b.n	80057fa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d0:	f7fd fb94 	bl	8002efc <HAL_GetTick>
 80057d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057d6:	e008      	b.n	80057ea <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057d8:	f7fd fb90 	bl	8002efc <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	2b64      	cmp	r3, #100	; 0x64
 80057e4:	d901      	bls.n	80057ea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e20b      	b.n	8005c02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057ea:	4b57      	ldr	r3, [pc, #348]	; (8005948 <HAL_RCC_OscConfig+0x274>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1f0      	bne.n	80057d8 <HAL_RCC_OscConfig+0x104>
 80057f6:	e000      	b.n	80057fa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d06f      	beq.n	80058e6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005806:	4b50      	ldr	r3, [pc, #320]	; (8005948 <HAL_RCC_OscConfig+0x274>)
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f003 030c 	and.w	r3, r3, #12
 800580e:	2b00      	cmp	r3, #0
 8005810:	d017      	beq.n	8005842 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005812:	4b4d      	ldr	r3, [pc, #308]	; (8005948 <HAL_RCC_OscConfig+0x274>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800581a:	2b08      	cmp	r3, #8
 800581c:	d105      	bne.n	800582a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800581e:	4b4a      	ldr	r3, [pc, #296]	; (8005948 <HAL_RCC_OscConfig+0x274>)
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00b      	beq.n	8005842 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800582a:	4b47      	ldr	r3, [pc, #284]	; (8005948 <HAL_RCC_OscConfig+0x274>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005832:	2b0c      	cmp	r3, #12
 8005834:	d11c      	bne.n	8005870 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005836:	4b44      	ldr	r3, [pc, #272]	; (8005948 <HAL_RCC_OscConfig+0x274>)
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d116      	bne.n	8005870 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005842:	4b41      	ldr	r3, [pc, #260]	; (8005948 <HAL_RCC_OscConfig+0x274>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d005      	beq.n	800585a <HAL_RCC_OscConfig+0x186>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d001      	beq.n	800585a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e1d3      	b.n	8005c02 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800585a:	4b3b      	ldr	r3, [pc, #236]	; (8005948 <HAL_RCC_OscConfig+0x274>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	4937      	ldr	r1, [pc, #220]	; (8005948 <HAL_RCC_OscConfig+0x274>)
 800586a:	4313      	orrs	r3, r2
 800586c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800586e:	e03a      	b.n	80058e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d020      	beq.n	80058ba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005878:	4b34      	ldr	r3, [pc, #208]	; (800594c <HAL_RCC_OscConfig+0x278>)
 800587a:	2201      	movs	r2, #1
 800587c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800587e:	f7fd fb3d 	bl	8002efc <HAL_GetTick>
 8005882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005884:	e008      	b.n	8005898 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005886:	f7fd fb39 	bl	8002efc <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	2b02      	cmp	r3, #2
 8005892:	d901      	bls.n	8005898 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e1b4      	b.n	8005c02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005898:	4b2b      	ldr	r3, [pc, #172]	; (8005948 <HAL_RCC_OscConfig+0x274>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d0f0      	beq.n	8005886 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058a4:	4b28      	ldr	r3, [pc, #160]	; (8005948 <HAL_RCC_OscConfig+0x274>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	00db      	lsls	r3, r3, #3
 80058b2:	4925      	ldr	r1, [pc, #148]	; (8005948 <HAL_RCC_OscConfig+0x274>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	600b      	str	r3, [r1, #0]
 80058b8:	e015      	b.n	80058e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058ba:	4b24      	ldr	r3, [pc, #144]	; (800594c <HAL_RCC_OscConfig+0x278>)
 80058bc:	2200      	movs	r2, #0
 80058be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c0:	f7fd fb1c 	bl	8002efc <HAL_GetTick>
 80058c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058c6:	e008      	b.n	80058da <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058c8:	f7fd fb18 	bl	8002efc <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d901      	bls.n	80058da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e193      	b.n	8005c02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058da:	4b1b      	ldr	r3, [pc, #108]	; (8005948 <HAL_RCC_OscConfig+0x274>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1f0      	bne.n	80058c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0308 	and.w	r3, r3, #8
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d036      	beq.n	8005960 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d016      	beq.n	8005928 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058fa:	4b15      	ldr	r3, [pc, #84]	; (8005950 <HAL_RCC_OscConfig+0x27c>)
 80058fc:	2201      	movs	r2, #1
 80058fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005900:	f7fd fafc 	bl	8002efc <HAL_GetTick>
 8005904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005906:	e008      	b.n	800591a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005908:	f7fd faf8 	bl	8002efc <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b02      	cmp	r3, #2
 8005914:	d901      	bls.n	800591a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e173      	b.n	8005c02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800591a:	4b0b      	ldr	r3, [pc, #44]	; (8005948 <HAL_RCC_OscConfig+0x274>)
 800591c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0f0      	beq.n	8005908 <HAL_RCC_OscConfig+0x234>
 8005926:	e01b      	b.n	8005960 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005928:	4b09      	ldr	r3, [pc, #36]	; (8005950 <HAL_RCC_OscConfig+0x27c>)
 800592a:	2200      	movs	r2, #0
 800592c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800592e:	f7fd fae5 	bl	8002efc <HAL_GetTick>
 8005932:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005934:	e00e      	b.n	8005954 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005936:	f7fd fae1 	bl	8002efc <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	2b02      	cmp	r3, #2
 8005942:	d907      	bls.n	8005954 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e15c      	b.n	8005c02 <HAL_RCC_OscConfig+0x52e>
 8005948:	40023800 	.word	0x40023800
 800594c:	42470000 	.word	0x42470000
 8005950:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005954:	4b8a      	ldr	r3, [pc, #552]	; (8005b80 <HAL_RCC_OscConfig+0x4ac>)
 8005956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1ea      	bne.n	8005936 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0304 	and.w	r3, r3, #4
 8005968:	2b00      	cmp	r3, #0
 800596a:	f000 8097 	beq.w	8005a9c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800596e:	2300      	movs	r3, #0
 8005970:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005972:	4b83      	ldr	r3, [pc, #524]	; (8005b80 <HAL_RCC_OscConfig+0x4ac>)
 8005974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10f      	bne.n	800599e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800597e:	2300      	movs	r3, #0
 8005980:	60bb      	str	r3, [r7, #8]
 8005982:	4b7f      	ldr	r3, [pc, #508]	; (8005b80 <HAL_RCC_OscConfig+0x4ac>)
 8005984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005986:	4a7e      	ldr	r2, [pc, #504]	; (8005b80 <HAL_RCC_OscConfig+0x4ac>)
 8005988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800598c:	6413      	str	r3, [r2, #64]	; 0x40
 800598e:	4b7c      	ldr	r3, [pc, #496]	; (8005b80 <HAL_RCC_OscConfig+0x4ac>)
 8005990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005996:	60bb      	str	r3, [r7, #8]
 8005998:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800599a:	2301      	movs	r3, #1
 800599c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800599e:	4b79      	ldr	r3, [pc, #484]	; (8005b84 <HAL_RCC_OscConfig+0x4b0>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d118      	bne.n	80059dc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059aa:	4b76      	ldr	r3, [pc, #472]	; (8005b84 <HAL_RCC_OscConfig+0x4b0>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a75      	ldr	r2, [pc, #468]	; (8005b84 <HAL_RCC_OscConfig+0x4b0>)
 80059b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059b6:	f7fd faa1 	bl	8002efc <HAL_GetTick>
 80059ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059bc:	e008      	b.n	80059d0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059be:	f7fd fa9d 	bl	8002efc <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d901      	bls.n	80059d0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e118      	b.n	8005c02 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059d0:	4b6c      	ldr	r3, [pc, #432]	; (8005b84 <HAL_RCC_OscConfig+0x4b0>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d0f0      	beq.n	80059be <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d106      	bne.n	80059f2 <HAL_RCC_OscConfig+0x31e>
 80059e4:	4b66      	ldr	r3, [pc, #408]	; (8005b80 <HAL_RCC_OscConfig+0x4ac>)
 80059e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e8:	4a65      	ldr	r2, [pc, #404]	; (8005b80 <HAL_RCC_OscConfig+0x4ac>)
 80059ea:	f043 0301 	orr.w	r3, r3, #1
 80059ee:	6713      	str	r3, [r2, #112]	; 0x70
 80059f0:	e01c      	b.n	8005a2c <HAL_RCC_OscConfig+0x358>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	2b05      	cmp	r3, #5
 80059f8:	d10c      	bne.n	8005a14 <HAL_RCC_OscConfig+0x340>
 80059fa:	4b61      	ldr	r3, [pc, #388]	; (8005b80 <HAL_RCC_OscConfig+0x4ac>)
 80059fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059fe:	4a60      	ldr	r2, [pc, #384]	; (8005b80 <HAL_RCC_OscConfig+0x4ac>)
 8005a00:	f043 0304 	orr.w	r3, r3, #4
 8005a04:	6713      	str	r3, [r2, #112]	; 0x70
 8005a06:	4b5e      	ldr	r3, [pc, #376]	; (8005b80 <HAL_RCC_OscConfig+0x4ac>)
 8005a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a0a:	4a5d      	ldr	r2, [pc, #372]	; (8005b80 <HAL_RCC_OscConfig+0x4ac>)
 8005a0c:	f043 0301 	orr.w	r3, r3, #1
 8005a10:	6713      	str	r3, [r2, #112]	; 0x70
 8005a12:	e00b      	b.n	8005a2c <HAL_RCC_OscConfig+0x358>
 8005a14:	4b5a      	ldr	r3, [pc, #360]	; (8005b80 <HAL_RCC_OscConfig+0x4ac>)
 8005a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a18:	4a59      	ldr	r2, [pc, #356]	; (8005b80 <HAL_RCC_OscConfig+0x4ac>)
 8005a1a:	f023 0301 	bic.w	r3, r3, #1
 8005a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a20:	4b57      	ldr	r3, [pc, #348]	; (8005b80 <HAL_RCC_OscConfig+0x4ac>)
 8005a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a24:	4a56      	ldr	r2, [pc, #344]	; (8005b80 <HAL_RCC_OscConfig+0x4ac>)
 8005a26:	f023 0304 	bic.w	r3, r3, #4
 8005a2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d015      	beq.n	8005a60 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a34:	f7fd fa62 	bl	8002efc <HAL_GetTick>
 8005a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a3a:	e00a      	b.n	8005a52 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a3c:	f7fd fa5e 	bl	8002efc <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e0d7      	b.n	8005c02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a52:	4b4b      	ldr	r3, [pc, #300]	; (8005b80 <HAL_RCC_OscConfig+0x4ac>)
 8005a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d0ee      	beq.n	8005a3c <HAL_RCC_OscConfig+0x368>
 8005a5e:	e014      	b.n	8005a8a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a60:	f7fd fa4c 	bl	8002efc <HAL_GetTick>
 8005a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a66:	e00a      	b.n	8005a7e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a68:	f7fd fa48 	bl	8002efc <HAL_GetTick>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d901      	bls.n	8005a7e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e0c1      	b.n	8005c02 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a7e:	4b40      	ldr	r3, [pc, #256]	; (8005b80 <HAL_RCC_OscConfig+0x4ac>)
 8005a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1ee      	bne.n	8005a68 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a8a:	7dfb      	ldrb	r3, [r7, #23]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d105      	bne.n	8005a9c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a90:	4b3b      	ldr	r3, [pc, #236]	; (8005b80 <HAL_RCC_OscConfig+0x4ac>)
 8005a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a94:	4a3a      	ldr	r2, [pc, #232]	; (8005b80 <HAL_RCC_OscConfig+0x4ac>)
 8005a96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f000 80ad 	beq.w	8005c00 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005aa6:	4b36      	ldr	r3, [pc, #216]	; (8005b80 <HAL_RCC_OscConfig+0x4ac>)
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f003 030c 	and.w	r3, r3, #12
 8005aae:	2b08      	cmp	r3, #8
 8005ab0:	d060      	beq.n	8005b74 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d145      	bne.n	8005b46 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aba:	4b33      	ldr	r3, [pc, #204]	; (8005b88 <HAL_RCC_OscConfig+0x4b4>)
 8005abc:	2200      	movs	r2, #0
 8005abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac0:	f7fd fa1c 	bl	8002efc <HAL_GetTick>
 8005ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ac6:	e008      	b.n	8005ada <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ac8:	f7fd fa18 	bl	8002efc <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d901      	bls.n	8005ada <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e093      	b.n	8005c02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ada:	4b29      	ldr	r3, [pc, #164]	; (8005b80 <HAL_RCC_OscConfig+0x4ac>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1f0      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	69da      	ldr	r2, [r3, #28]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	431a      	orrs	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	019b      	lsls	r3, r3, #6
 8005af6:	431a      	orrs	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afc:	085b      	lsrs	r3, r3, #1
 8005afe:	3b01      	subs	r3, #1
 8005b00:	041b      	lsls	r3, r3, #16
 8005b02:	431a      	orrs	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b08:	061b      	lsls	r3, r3, #24
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b10:	071b      	lsls	r3, r3, #28
 8005b12:	491b      	ldr	r1, [pc, #108]	; (8005b80 <HAL_RCC_OscConfig+0x4ac>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b18:	4b1b      	ldr	r3, [pc, #108]	; (8005b88 <HAL_RCC_OscConfig+0x4b4>)
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b1e:	f7fd f9ed 	bl	8002efc <HAL_GetTick>
 8005b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b24:	e008      	b.n	8005b38 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b26:	f7fd f9e9 	bl	8002efc <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d901      	bls.n	8005b38 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e064      	b.n	8005c02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b38:	4b11      	ldr	r3, [pc, #68]	; (8005b80 <HAL_RCC_OscConfig+0x4ac>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d0f0      	beq.n	8005b26 <HAL_RCC_OscConfig+0x452>
 8005b44:	e05c      	b.n	8005c00 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b46:	4b10      	ldr	r3, [pc, #64]	; (8005b88 <HAL_RCC_OscConfig+0x4b4>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b4c:	f7fd f9d6 	bl	8002efc <HAL_GetTick>
 8005b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b52:	e008      	b.n	8005b66 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b54:	f7fd f9d2 	bl	8002efc <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d901      	bls.n	8005b66 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e04d      	b.n	8005c02 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b66:	4b06      	ldr	r3, [pc, #24]	; (8005b80 <HAL_RCC_OscConfig+0x4ac>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1f0      	bne.n	8005b54 <HAL_RCC_OscConfig+0x480>
 8005b72:	e045      	b.n	8005c00 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d107      	bne.n	8005b8c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e040      	b.n	8005c02 <HAL_RCC_OscConfig+0x52e>
 8005b80:	40023800 	.word	0x40023800
 8005b84:	40007000 	.word	0x40007000
 8005b88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b8c:	4b1f      	ldr	r3, [pc, #124]	; (8005c0c <HAL_RCC_OscConfig+0x538>)
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d030      	beq.n	8005bfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d129      	bne.n	8005bfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d122      	bne.n	8005bfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005bc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d119      	bne.n	8005bfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd2:	085b      	lsrs	r3, r3, #1
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d10f      	bne.n	8005bfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d107      	bne.n	8005bfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d001      	beq.n	8005c00 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e000      	b.n	8005c02 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3718      	adds	r7, #24
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	40023800 	.word	0x40023800

08005c10 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d101      	bne.n	8005c26 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e066      	b.n	8005cf4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	7f5b      	ldrb	r3, [r3, #29]
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d105      	bne.n	8005c3c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f7fc fd0e 	bl	8002658 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	22ca      	movs	r2, #202	; 0xca
 8005c48:	625a      	str	r2, [r3, #36]	; 0x24
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2253      	movs	r2, #83	; 0x53
 8005c50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f998 	bl	8005f88 <RTC_EnterInitMode>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d12c      	bne.n	8005cbc <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	6812      	ldr	r2, [r2, #0]
 8005c6c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c74:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6899      	ldr	r1, [r3, #8]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685a      	ldr	r2, [r3, #4]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	431a      	orrs	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	430a      	orrs	r2, r1
 8005c92:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	68d2      	ldr	r2, [r2, #12]
 8005c9c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	6919      	ldr	r1, [r3, #16]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	041a      	lsls	r2, r3, #16
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f99f 	bl	8005ff6 <RTC_ExitInitMode>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005cbc:	7bfb      	ldrb	r3, [r7, #15]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d113      	bne.n	8005cea <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005cd0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	699a      	ldr	r2, [r3, #24]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	22ff      	movs	r2, #255	; 0xff
 8005cf0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005cfc:	b590      	push	{r4, r7, lr}
 8005cfe:	b087      	sub	sp, #28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	7f1b      	ldrb	r3, [r3, #28]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d101      	bne.n	8005d18 <HAL_RTC_SetTime+0x1c>
 8005d14:	2302      	movs	r3, #2
 8005d16:	e087      	b.n	8005e28 <HAL_RTC_SetTime+0x12c>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2202      	movs	r2, #2
 8005d22:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d126      	bne.n	8005d78 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d102      	bne.n	8005d3e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f000 f97c 	bl	8006040 <RTC_ByteToBcd2>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	785b      	ldrb	r3, [r3, #1]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f000 f975 	bl	8006040 <RTC_ByteToBcd2>
 8005d56:	4603      	mov	r3, r0
 8005d58:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005d5a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	789b      	ldrb	r3, [r3, #2]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f000 f96d 	bl	8006040 <RTC_ByteToBcd2>
 8005d66:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005d68:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	78db      	ldrb	r3, [r3, #3]
 8005d70:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005d72:	4313      	orrs	r3, r2
 8005d74:	617b      	str	r3, [r7, #20]
 8005d76:	e018      	b.n	8005daa <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d102      	bne.n	8005d8c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	785b      	ldrb	r3, [r3, #1]
 8005d96:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005d98:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005d9e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	78db      	ldrb	r3, [r3, #3]
 8005da4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005da6:	4313      	orrs	r3, r2
 8005da8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	22ca      	movs	r2, #202	; 0xca
 8005db0:	625a      	str	r2, [r3, #36]	; 0x24
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2253      	movs	r2, #83	; 0x53
 8005db8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f000 f8e4 	bl	8005f88 <RTC_EnterInitMode>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005dc4:	7cfb      	ldrb	r3, [r7, #19]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d120      	bne.n	8005e0c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005dd4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005dd8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689a      	ldr	r2, [r3, #8]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005de8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6899      	ldr	r1, [r3, #8]
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	68da      	ldr	r2, [r3, #12]
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f000 f8f7 	bl	8005ff6 <RTC_ExitInitMode>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005e0c:	7cfb      	ldrb	r3, [r7, #19]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d102      	bne.n	8005e18 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2201      	movs	r2, #1
 8005e16:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	22ff      	movs	r2, #255	; 0xff
 8005e1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	771a      	strb	r2, [r3, #28]

  return status;
 8005e26:	7cfb      	ldrb	r3, [r7, #19]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	371c      	adds	r7, #28
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd90      	pop	{r4, r7, pc}

08005e30 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005e30:	b590      	push	{r4, r7, lr}
 8005e32:	b087      	sub	sp, #28
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	7f1b      	ldrb	r3, [r3, #28]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d101      	bne.n	8005e4c <HAL_RTC_SetDate+0x1c>
 8005e48:	2302      	movs	r3, #2
 8005e4a:	e071      	b.n	8005f30 <HAL_RTC_SetDate+0x100>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2202      	movs	r2, #2
 8005e56:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10e      	bne.n	8005e7c <HAL_RTC_SetDate+0x4c>
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	785b      	ldrb	r3, [r3, #1]
 8005e62:	f003 0310 	and.w	r3, r3, #16
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d008      	beq.n	8005e7c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	785b      	ldrb	r3, [r3, #1]
 8005e6e:	f023 0310 	bic.w	r3, r3, #16
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	330a      	adds	r3, #10
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d11c      	bne.n	8005ebc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	78db      	ldrb	r3, [r3, #3]
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 f8da 	bl	8006040 <RTC_ByteToBcd2>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	785b      	ldrb	r3, [r3, #1]
 8005e94:	4618      	mov	r0, r3
 8005e96:	f000 f8d3 	bl	8006040 <RTC_ByteToBcd2>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005e9e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	789b      	ldrb	r3, [r3, #2]
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f000 f8cb 	bl	8006040 <RTC_ByteToBcd2>
 8005eaa:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005eac:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	617b      	str	r3, [r7, #20]
 8005eba:	e00e      	b.n	8005eda <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	78db      	ldrb	r3, [r3, #3]
 8005ec0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	785b      	ldrb	r3, [r3, #1]
 8005ec6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005ec8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005ece:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	22ca      	movs	r2, #202	; 0xca
 8005ee0:	625a      	str	r2, [r3, #36]	; 0x24
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2253      	movs	r2, #83	; 0x53
 8005ee8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f000 f84c 	bl	8005f88 <RTC_EnterInitMode>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005ef4:	7cfb      	ldrb	r3, [r7, #19]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10c      	bne.n	8005f14 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005f04:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005f08:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f000 f873 	bl	8005ff6 <RTC_ExitInitMode>
 8005f10:	4603      	mov	r3, r0
 8005f12:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005f14:	7cfb      	ldrb	r3, [r7, #19]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d102      	bne.n	8005f20 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	22ff      	movs	r2, #255	; 0xff
 8005f26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	771a      	strb	r2, [r3, #28]

  return status;
 8005f2e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	371c      	adds	r7, #28
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd90      	pop	{r4, r7, pc}

08005f38 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f40:	2300      	movs	r3, #0
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68da      	ldr	r2, [r3, #12]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f52:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f54:	f7fc ffd2 	bl	8002efc <HAL_GetTick>
 8005f58:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005f5a:	e009      	b.n	8005f70 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f5c:	f7fc ffce 	bl	8002efc <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f6a:	d901      	bls.n	8005f70 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e007      	b.n	8005f80 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	f003 0320 	and.w	r3, r3, #32
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d0ee      	beq.n	8005f5c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f90:	2300      	movs	r3, #0
 8005f92:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005f94:	2300      	movs	r3, #0
 8005f96:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d122      	bne.n	8005fec <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68da      	ldr	r2, [r3, #12]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005fb4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005fb6:	f7fc ffa1 	bl	8002efc <HAL_GetTick>
 8005fba:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005fbc:	e00c      	b.n	8005fd8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005fbe:	f7fc ff9d 	bl	8002efc <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fcc:	d904      	bls.n	8005fd8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2204      	movs	r2, #4
 8005fd2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d102      	bne.n	8005fec <RTC_EnterInitMode+0x64>
 8005fe6:	7bfb      	ldrb	r3, [r7, #15]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d1e8      	bne.n	8005fbe <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b084      	sub	sp, #16
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ffe:	2300      	movs	r3, #0
 8006000:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68da      	ldr	r2, [r3, #12]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006010:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f003 0320 	and.w	r3, r3, #32
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10a      	bne.n	8006036 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f7ff ff89 	bl	8005f38 <HAL_RTC_WaitForSynchro>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d004      	beq.n	8006036 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2204      	movs	r2, #4
 8006030:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006036:	7bfb      	ldrb	r3, [r7, #15]
}
 8006038:	4618      	mov	r0, r3
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	4603      	mov	r3, r0
 8006048:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800604a:	2300      	movs	r3, #0
 800604c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800604e:	e005      	b.n	800605c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006050:	7bfb      	ldrb	r3, [r7, #15]
 8006052:	3301      	adds	r3, #1
 8006054:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006056:	79fb      	ldrb	r3, [r7, #7]
 8006058:	3b0a      	subs	r3, #10
 800605a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800605c:	79fb      	ldrb	r3, [r7, #7]
 800605e:	2b09      	cmp	r3, #9
 8006060:	d8f6      	bhi.n	8006050 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006062:	7bfb      	ldrb	r3, [r7, #15]
 8006064:	011b      	lsls	r3, r3, #4
 8006066:	b2da      	uxtb	r2, r3
 8006068:	79fb      	ldrb	r3, [r7, #7]
 800606a:	4313      	orrs	r3, r2
 800606c:	b2db      	uxtb	r3, r3
}
 800606e:	4618      	mov	r0, r3
 8006070:	3714      	adds	r7, #20
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b086      	sub	sp, #24
 800607e:	af00      	add	r7, sp, #0
 8006080:	60f8      	str	r0, [r7, #12]
 8006082:	60b9      	str	r1, [r7, #8]
 8006084:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8006086:	2300      	movs	r3, #0
 8006088:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	7f1b      	ldrb	r3, [r3, #28]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d101      	bne.n	8006096 <HAL_RTCEx_SetWakeUpTimer+0x1c>
 8006092:	2302      	movs	r3, #2
 8006094:	e08a      	b.n	80061ac <HAL_RTCEx_SetWakeUpTimer+0x132>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2201      	movs	r2, #1
 800609a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2202      	movs	r2, #2
 80060a0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	22ca      	movs	r2, #202	; 0xca
 80060a8:	625a      	str	r2, [r3, #36]	; 0x24
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2253      	movs	r2, #83	; 0x53
 80060b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d01e      	beq.n	80060fe <HAL_RTCEx_SetWakeUpTimer+0x84>
  {
    tickstart = HAL_GetTick();
 80060c0:	f7fc ff1c 	bl	8002efc <HAL_GetTick>
 80060c4:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 80060c6:	e013      	b.n	80060f0 <HAL_RTCEx_SetWakeUpTimer+0x76>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80060c8:	f7fc ff18 	bl	8002efc <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060d6:	d90b      	bls.n	80060f0 <HAL_RTCEx_SetWakeUpTimer+0x76>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	22ff      	movs	r2, #255	; 0xff
 80060de:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2203      	movs	r2, #3
 80060e4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e05d      	b.n	80061ac <HAL_RTCEx_SetWakeUpTimer+0x132>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	f003 0304 	and.w	r3, r3, #4
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1e4      	bne.n	80060c8 <HAL_RTCEx_SetWakeUpTimer+0x4e>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	689a      	ldr	r2, [r3, #8]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800610c:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	b2da      	uxtb	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800611e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006120:	f7fc feec 	bl	8002efc <HAL_GetTick>
 8006124:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006126:	e013      	b.n	8006150 <HAL_RTCEx_SetWakeUpTimer+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006128:	f7fc fee8 	bl	8002efc <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006136:	d90b      	bls.n	8006150 <HAL_RTCEx_SetWakeUpTimer+0xd6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	22ff      	movs	r2, #255	; 0xff
 800613e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2203      	movs	r2, #3
 8006144:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e02d      	b.n	80061ac <HAL_RTCEx_SetWakeUpTimer+0x132>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	f003 0304 	and.w	r3, r3, #4
 800615a:	2b00      	cmp	r3, #0
 800615c:	d0e4      	beq.n	8006128 <HAL_RTCEx_SetWakeUpTimer+0xae>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	689a      	ldr	r2, [r3, #8]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f022 0207 	bic.w	r2, r2, #7
 800616c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6899      	ldr	r1, [r3, #8]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	430a      	orrs	r2, r1
 800617c:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	689a      	ldr	r2, [r3, #8]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006194:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	22ff      	movs	r2, #255	; 0xff
 800619c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2201      	movs	r2, #1
 80061a2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2200      	movs	r2, #0
 80061a8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3718      	adds	r7, #24
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e041      	b.n	800624a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d106      	bne.n	80061e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7fc fa66 	bl	80026ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2202      	movs	r2, #2
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	3304      	adds	r3, #4
 80061f0:	4619      	mov	r1, r3
 80061f2:	4610      	mov	r0, r2
 80061f4:	f000 ff88 	bl	8007108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b082      	sub	sp, #8
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d101      	bne.n	8006264 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e041      	b.n	80062e8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b00      	cmp	r3, #0
 800626e:	d106      	bne.n	800627e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 f839 	bl	80062f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2202      	movs	r2, #2
 8006282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	3304      	adds	r3, #4
 800628e:	4619      	mov	r1, r3
 8006290:	4610      	mov	r0, r2
 8006292:	f000 ff39 	bl	8007108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2201      	movs	r2, #1
 80062d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3708      	adds	r7, #8
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d109      	bne.n	8006328 <HAL_TIM_PWM_Start+0x24>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b01      	cmp	r3, #1
 800631e:	bf14      	ite	ne
 8006320:	2301      	movne	r3, #1
 8006322:	2300      	moveq	r3, #0
 8006324:	b2db      	uxtb	r3, r3
 8006326:	e022      	b.n	800636e <HAL_TIM_PWM_Start+0x6a>
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	2b04      	cmp	r3, #4
 800632c:	d109      	bne.n	8006342 <HAL_TIM_PWM_Start+0x3e>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b01      	cmp	r3, #1
 8006338:	bf14      	ite	ne
 800633a:	2301      	movne	r3, #1
 800633c:	2300      	moveq	r3, #0
 800633e:	b2db      	uxtb	r3, r3
 8006340:	e015      	b.n	800636e <HAL_TIM_PWM_Start+0x6a>
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	2b08      	cmp	r3, #8
 8006346:	d109      	bne.n	800635c <HAL_TIM_PWM_Start+0x58>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800634e:	b2db      	uxtb	r3, r3
 8006350:	2b01      	cmp	r3, #1
 8006352:	bf14      	ite	ne
 8006354:	2301      	movne	r3, #1
 8006356:	2300      	moveq	r3, #0
 8006358:	b2db      	uxtb	r3, r3
 800635a:	e008      	b.n	800636e <HAL_TIM_PWM_Start+0x6a>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006362:	b2db      	uxtb	r3, r3
 8006364:	2b01      	cmp	r3, #1
 8006366:	bf14      	ite	ne
 8006368:	2301      	movne	r3, #1
 800636a:	2300      	moveq	r3, #0
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e07c      	b.n	8006470 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d104      	bne.n	8006386 <HAL_TIM_PWM_Start+0x82>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2202      	movs	r2, #2
 8006380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006384:	e013      	b.n	80063ae <HAL_TIM_PWM_Start+0xaa>
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	2b04      	cmp	r3, #4
 800638a:	d104      	bne.n	8006396 <HAL_TIM_PWM_Start+0x92>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2202      	movs	r2, #2
 8006390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006394:	e00b      	b.n	80063ae <HAL_TIM_PWM_Start+0xaa>
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	2b08      	cmp	r3, #8
 800639a:	d104      	bne.n	80063a6 <HAL_TIM_PWM_Start+0xa2>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2202      	movs	r2, #2
 80063a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063a4:	e003      	b.n	80063ae <HAL_TIM_PWM_Start+0xaa>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2202      	movs	r2, #2
 80063aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2201      	movs	r2, #1
 80063b4:	6839      	ldr	r1, [r7, #0]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f001 fb4c 	bl	8007a54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a2d      	ldr	r2, [pc, #180]	; (8006478 <HAL_TIM_PWM_Start+0x174>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d004      	beq.n	80063d0 <HAL_TIM_PWM_Start+0xcc>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a2c      	ldr	r2, [pc, #176]	; (800647c <HAL_TIM_PWM_Start+0x178>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d101      	bne.n	80063d4 <HAL_TIM_PWM_Start+0xd0>
 80063d0:	2301      	movs	r3, #1
 80063d2:	e000      	b.n	80063d6 <HAL_TIM_PWM_Start+0xd2>
 80063d4:	2300      	movs	r3, #0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d007      	beq.n	80063ea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a22      	ldr	r2, [pc, #136]	; (8006478 <HAL_TIM_PWM_Start+0x174>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d022      	beq.n	800643a <HAL_TIM_PWM_Start+0x136>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063fc:	d01d      	beq.n	800643a <HAL_TIM_PWM_Start+0x136>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a1f      	ldr	r2, [pc, #124]	; (8006480 <HAL_TIM_PWM_Start+0x17c>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d018      	beq.n	800643a <HAL_TIM_PWM_Start+0x136>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a1d      	ldr	r2, [pc, #116]	; (8006484 <HAL_TIM_PWM_Start+0x180>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d013      	beq.n	800643a <HAL_TIM_PWM_Start+0x136>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a1c      	ldr	r2, [pc, #112]	; (8006488 <HAL_TIM_PWM_Start+0x184>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d00e      	beq.n	800643a <HAL_TIM_PWM_Start+0x136>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a16      	ldr	r2, [pc, #88]	; (800647c <HAL_TIM_PWM_Start+0x178>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d009      	beq.n	800643a <HAL_TIM_PWM_Start+0x136>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a18      	ldr	r2, [pc, #96]	; (800648c <HAL_TIM_PWM_Start+0x188>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d004      	beq.n	800643a <HAL_TIM_PWM_Start+0x136>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a16      	ldr	r2, [pc, #88]	; (8006490 <HAL_TIM_PWM_Start+0x18c>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d111      	bne.n	800645e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f003 0307 	and.w	r3, r3, #7
 8006444:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2b06      	cmp	r3, #6
 800644a:	d010      	beq.n	800646e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f042 0201 	orr.w	r2, r2, #1
 800645a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800645c:	e007      	b.n	800646e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f042 0201 	orr.w	r2, r2, #1
 800646c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	40010000 	.word	0x40010000
 800647c:	40010400 	.word	0x40010400
 8006480:	40000400 	.word	0x40000400
 8006484:	40000800 	.word	0x40000800
 8006488:	40000c00 	.word	0x40000c00
 800648c:	40014000 	.word	0x40014000
 8006490:	40001800 	.word	0x40001800

08006494 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d101      	bne.n	80064a6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e041      	b.n	800652a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d106      	bne.n	80064c0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f839 	bl	8006532 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2202      	movs	r2, #2
 80064c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	3304      	adds	r3, #4
 80064d0:	4619      	mov	r1, r3
 80064d2:	4610      	mov	r0, r2
 80064d4:	f000 fe18 	bl	8007108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006532:	b480      	push	{r7}
 8006534:	b083      	sub	sp, #12
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800653a:	bf00      	nop
 800653c:	370c      	adds	r7, #12
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
	...

08006548 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d104      	bne.n	8006562 <HAL_TIM_IC_Start+0x1a>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800655e:	b2db      	uxtb	r3, r3
 8006560:	e013      	b.n	800658a <HAL_TIM_IC_Start+0x42>
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2b04      	cmp	r3, #4
 8006566:	d104      	bne.n	8006572 <HAL_TIM_IC_Start+0x2a>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800656e:	b2db      	uxtb	r3, r3
 8006570:	e00b      	b.n	800658a <HAL_TIM_IC_Start+0x42>
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2b08      	cmp	r3, #8
 8006576:	d104      	bne.n	8006582 <HAL_TIM_IC_Start+0x3a>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800657e:	b2db      	uxtb	r3, r3
 8006580:	e003      	b.n	800658a <HAL_TIM_IC_Start+0x42>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006588:	b2db      	uxtb	r3, r3
 800658a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d104      	bne.n	800659c <HAL_TIM_IC_Start+0x54>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006598:	b2db      	uxtb	r3, r3
 800659a:	e013      	b.n	80065c4 <HAL_TIM_IC_Start+0x7c>
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	2b04      	cmp	r3, #4
 80065a0:	d104      	bne.n	80065ac <HAL_TIM_IC_Start+0x64>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	e00b      	b.n	80065c4 <HAL_TIM_IC_Start+0x7c>
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	2b08      	cmp	r3, #8
 80065b0:	d104      	bne.n	80065bc <HAL_TIM_IC_Start+0x74>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	e003      	b.n	80065c4 <HAL_TIM_IC_Start+0x7c>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80065c6:	7bfb      	ldrb	r3, [r7, #15]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d102      	bne.n	80065d2 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80065cc:	7bbb      	ldrb	r3, [r7, #14]
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d001      	beq.n	80065d6 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e081      	b.n	80066da <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d104      	bne.n	80065e6 <HAL_TIM_IC_Start+0x9e>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2202      	movs	r2, #2
 80065e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065e4:	e013      	b.n	800660e <HAL_TIM_IC_Start+0xc6>
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	2b04      	cmp	r3, #4
 80065ea:	d104      	bne.n	80065f6 <HAL_TIM_IC_Start+0xae>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2202      	movs	r2, #2
 80065f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065f4:	e00b      	b.n	800660e <HAL_TIM_IC_Start+0xc6>
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	2b08      	cmp	r3, #8
 80065fa:	d104      	bne.n	8006606 <HAL_TIM_IC_Start+0xbe>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2202      	movs	r2, #2
 8006600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006604:	e003      	b.n	800660e <HAL_TIM_IC_Start+0xc6>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2202      	movs	r2, #2
 800660a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d104      	bne.n	800661e <HAL_TIM_IC_Start+0xd6>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2202      	movs	r2, #2
 8006618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800661c:	e013      	b.n	8006646 <HAL_TIM_IC_Start+0xfe>
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	2b04      	cmp	r3, #4
 8006622:	d104      	bne.n	800662e <HAL_TIM_IC_Start+0xe6>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2202      	movs	r2, #2
 8006628:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800662c:	e00b      	b.n	8006646 <HAL_TIM_IC_Start+0xfe>
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	2b08      	cmp	r3, #8
 8006632:	d104      	bne.n	800663e <HAL_TIM_IC_Start+0xf6>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2202      	movs	r2, #2
 8006638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800663c:	e003      	b.n	8006646 <HAL_TIM_IC_Start+0xfe>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2202      	movs	r2, #2
 8006642:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2201      	movs	r2, #1
 800664c:	6839      	ldr	r1, [r7, #0]
 800664e:	4618      	mov	r0, r3
 8006650:	f001 fa00 	bl	8007a54 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a22      	ldr	r2, [pc, #136]	; (80066e4 <HAL_TIM_IC_Start+0x19c>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d022      	beq.n	80066a4 <HAL_TIM_IC_Start+0x15c>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006666:	d01d      	beq.n	80066a4 <HAL_TIM_IC_Start+0x15c>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a1e      	ldr	r2, [pc, #120]	; (80066e8 <HAL_TIM_IC_Start+0x1a0>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d018      	beq.n	80066a4 <HAL_TIM_IC_Start+0x15c>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a1d      	ldr	r2, [pc, #116]	; (80066ec <HAL_TIM_IC_Start+0x1a4>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d013      	beq.n	80066a4 <HAL_TIM_IC_Start+0x15c>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a1b      	ldr	r2, [pc, #108]	; (80066f0 <HAL_TIM_IC_Start+0x1a8>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d00e      	beq.n	80066a4 <HAL_TIM_IC_Start+0x15c>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a1a      	ldr	r2, [pc, #104]	; (80066f4 <HAL_TIM_IC_Start+0x1ac>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d009      	beq.n	80066a4 <HAL_TIM_IC_Start+0x15c>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a18      	ldr	r2, [pc, #96]	; (80066f8 <HAL_TIM_IC_Start+0x1b0>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d004      	beq.n	80066a4 <HAL_TIM_IC_Start+0x15c>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a17      	ldr	r2, [pc, #92]	; (80066fc <HAL_TIM_IC_Start+0x1b4>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d111      	bne.n	80066c8 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f003 0307 	and.w	r3, r3, #7
 80066ae:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	2b06      	cmp	r3, #6
 80066b4:	d010      	beq.n	80066d8 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f042 0201 	orr.w	r2, r2, #1
 80066c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066c6:	e007      	b.n	80066d8 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f042 0201 	orr.w	r2, r2, #1
 80066d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	40010000 	.word	0x40010000
 80066e8:	40000400 	.word	0x40000400
 80066ec:	40000800 	.word	0x40000800
 80066f0:	40000c00 	.word	0x40000c00
 80066f4:	40010400 	.word	0x40010400
 80066f8:	40014000 	.word	0x40014000
 80066fc:	40001800 	.word	0x40001800

08006700 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800670a:	2300      	movs	r3, #0
 800670c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d104      	bne.n	800671e <HAL_TIM_IC_Start_IT+0x1e>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800671a:	b2db      	uxtb	r3, r3
 800671c:	e013      	b.n	8006746 <HAL_TIM_IC_Start_IT+0x46>
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2b04      	cmp	r3, #4
 8006722:	d104      	bne.n	800672e <HAL_TIM_IC_Start_IT+0x2e>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800672a:	b2db      	uxtb	r3, r3
 800672c:	e00b      	b.n	8006746 <HAL_TIM_IC_Start_IT+0x46>
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b08      	cmp	r3, #8
 8006732:	d104      	bne.n	800673e <HAL_TIM_IC_Start_IT+0x3e>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800673a:	b2db      	uxtb	r3, r3
 800673c:	e003      	b.n	8006746 <HAL_TIM_IC_Start_IT+0x46>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006744:	b2db      	uxtb	r3, r3
 8006746:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d104      	bne.n	8006758 <HAL_TIM_IC_Start_IT+0x58>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006754:	b2db      	uxtb	r3, r3
 8006756:	e013      	b.n	8006780 <HAL_TIM_IC_Start_IT+0x80>
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	2b04      	cmp	r3, #4
 800675c:	d104      	bne.n	8006768 <HAL_TIM_IC_Start_IT+0x68>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006764:	b2db      	uxtb	r3, r3
 8006766:	e00b      	b.n	8006780 <HAL_TIM_IC_Start_IT+0x80>
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	2b08      	cmp	r3, #8
 800676c:	d104      	bne.n	8006778 <HAL_TIM_IC_Start_IT+0x78>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006774:	b2db      	uxtb	r3, r3
 8006776:	e003      	b.n	8006780 <HAL_TIM_IC_Start_IT+0x80>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800677e:	b2db      	uxtb	r3, r3
 8006780:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006782:	7bbb      	ldrb	r3, [r7, #14]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d102      	bne.n	800678e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006788:	7b7b      	ldrb	r3, [r7, #13]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d001      	beq.n	8006792 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e0cc      	b.n	800692c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d104      	bne.n	80067a2 <HAL_TIM_IC_Start_IT+0xa2>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2202      	movs	r2, #2
 800679c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067a0:	e013      	b.n	80067ca <HAL_TIM_IC_Start_IT+0xca>
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	2b04      	cmp	r3, #4
 80067a6:	d104      	bne.n	80067b2 <HAL_TIM_IC_Start_IT+0xb2>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2202      	movs	r2, #2
 80067ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067b0:	e00b      	b.n	80067ca <HAL_TIM_IC_Start_IT+0xca>
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	2b08      	cmp	r3, #8
 80067b6:	d104      	bne.n	80067c2 <HAL_TIM_IC_Start_IT+0xc2>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2202      	movs	r2, #2
 80067bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067c0:	e003      	b.n	80067ca <HAL_TIM_IC_Start_IT+0xca>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2202      	movs	r2, #2
 80067c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d104      	bne.n	80067da <HAL_TIM_IC_Start_IT+0xda>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2202      	movs	r2, #2
 80067d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067d8:	e013      	b.n	8006802 <HAL_TIM_IC_Start_IT+0x102>
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	2b04      	cmp	r3, #4
 80067de:	d104      	bne.n	80067ea <HAL_TIM_IC_Start_IT+0xea>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2202      	movs	r2, #2
 80067e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067e8:	e00b      	b.n	8006802 <HAL_TIM_IC_Start_IT+0x102>
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2b08      	cmp	r3, #8
 80067ee:	d104      	bne.n	80067fa <HAL_TIM_IC_Start_IT+0xfa>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2202      	movs	r2, #2
 80067f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067f8:	e003      	b.n	8006802 <HAL_TIM_IC_Start_IT+0x102>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2202      	movs	r2, #2
 80067fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	2b0c      	cmp	r3, #12
 8006806:	d841      	bhi.n	800688c <HAL_TIM_IC_Start_IT+0x18c>
 8006808:	a201      	add	r2, pc, #4	; (adr r2, 8006810 <HAL_TIM_IC_Start_IT+0x110>)
 800680a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680e:	bf00      	nop
 8006810:	08006845 	.word	0x08006845
 8006814:	0800688d 	.word	0x0800688d
 8006818:	0800688d 	.word	0x0800688d
 800681c:	0800688d 	.word	0x0800688d
 8006820:	08006857 	.word	0x08006857
 8006824:	0800688d 	.word	0x0800688d
 8006828:	0800688d 	.word	0x0800688d
 800682c:	0800688d 	.word	0x0800688d
 8006830:	08006869 	.word	0x08006869
 8006834:	0800688d 	.word	0x0800688d
 8006838:	0800688d 	.word	0x0800688d
 800683c:	0800688d 	.word	0x0800688d
 8006840:	0800687b 	.word	0x0800687b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68da      	ldr	r2, [r3, #12]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f042 0202 	orr.w	r2, r2, #2
 8006852:	60da      	str	r2, [r3, #12]
      break;
 8006854:	e01d      	b.n	8006892 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68da      	ldr	r2, [r3, #12]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f042 0204 	orr.w	r2, r2, #4
 8006864:	60da      	str	r2, [r3, #12]
      break;
 8006866:	e014      	b.n	8006892 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68da      	ldr	r2, [r3, #12]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f042 0208 	orr.w	r2, r2, #8
 8006876:	60da      	str	r2, [r3, #12]
      break;
 8006878:	e00b      	b.n	8006892 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68da      	ldr	r2, [r3, #12]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f042 0210 	orr.w	r2, r2, #16
 8006888:	60da      	str	r2, [r3, #12]
      break;
 800688a:	e002      	b.n	8006892 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	73fb      	strb	r3, [r7, #15]
      break;
 8006890:	bf00      	nop
  }

  if (status == HAL_OK)
 8006892:	7bfb      	ldrb	r3, [r7, #15]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d148      	bne.n	800692a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2201      	movs	r2, #1
 800689e:	6839      	ldr	r1, [r7, #0]
 80068a0:	4618      	mov	r0, r3
 80068a2:	f001 f8d7 	bl	8007a54 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a22      	ldr	r2, [pc, #136]	; (8006934 <HAL_TIM_IC_Start_IT+0x234>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d022      	beq.n	80068f6 <HAL_TIM_IC_Start_IT+0x1f6>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068b8:	d01d      	beq.n	80068f6 <HAL_TIM_IC_Start_IT+0x1f6>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a1e      	ldr	r2, [pc, #120]	; (8006938 <HAL_TIM_IC_Start_IT+0x238>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d018      	beq.n	80068f6 <HAL_TIM_IC_Start_IT+0x1f6>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a1c      	ldr	r2, [pc, #112]	; (800693c <HAL_TIM_IC_Start_IT+0x23c>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d013      	beq.n	80068f6 <HAL_TIM_IC_Start_IT+0x1f6>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a1b      	ldr	r2, [pc, #108]	; (8006940 <HAL_TIM_IC_Start_IT+0x240>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d00e      	beq.n	80068f6 <HAL_TIM_IC_Start_IT+0x1f6>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a19      	ldr	r2, [pc, #100]	; (8006944 <HAL_TIM_IC_Start_IT+0x244>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d009      	beq.n	80068f6 <HAL_TIM_IC_Start_IT+0x1f6>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a18      	ldr	r2, [pc, #96]	; (8006948 <HAL_TIM_IC_Start_IT+0x248>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d004      	beq.n	80068f6 <HAL_TIM_IC_Start_IT+0x1f6>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a16      	ldr	r2, [pc, #88]	; (800694c <HAL_TIM_IC_Start_IT+0x24c>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d111      	bne.n	800691a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	f003 0307 	and.w	r3, r3, #7
 8006900:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	2b06      	cmp	r3, #6
 8006906:	d010      	beq.n	800692a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f042 0201 	orr.w	r2, r2, #1
 8006916:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006918:	e007      	b.n	800692a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f042 0201 	orr.w	r2, r2, #1
 8006928:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800692a:	7bfb      	ldrb	r3, [r7, #15]
}
 800692c:	4618      	mov	r0, r3
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	40010000 	.word	0x40010000
 8006938:	40000400 	.word	0x40000400
 800693c:	40000800 	.word	0x40000800
 8006940:	40000c00 	.word	0x40000c00
 8006944:	40010400 	.word	0x40010400
 8006948:	40014000 	.word	0x40014000
 800694c:	40001800 	.word	0x40001800

08006950 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	f003 0302 	and.w	r3, r3, #2
 8006962:	2b02      	cmp	r3, #2
 8006964:	d122      	bne.n	80069ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	f003 0302 	and.w	r3, r3, #2
 8006970:	2b02      	cmp	r3, #2
 8006972:	d11b      	bne.n	80069ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f06f 0202 	mvn.w	r2, #2
 800697c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	f003 0303 	and.w	r3, r3, #3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f7fa fac6 	bl	8000f24 <HAL_TIM_IC_CaptureCallback>
 8006998:	e005      	b.n	80069a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 fb96 	bl	80070cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 fb9d 	bl	80070e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	f003 0304 	and.w	r3, r3, #4
 80069b6:	2b04      	cmp	r3, #4
 80069b8:	d122      	bne.n	8006a00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	f003 0304 	and.w	r3, r3, #4
 80069c4:	2b04      	cmp	r3, #4
 80069c6:	d11b      	bne.n	8006a00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f06f 0204 	mvn.w	r2, #4
 80069d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2202      	movs	r2, #2
 80069d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d003      	beq.n	80069ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f7fa fa9c 	bl	8000f24 <HAL_TIM_IC_CaptureCallback>
 80069ec:	e005      	b.n	80069fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fb6c 	bl	80070cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 fb73 	bl	80070e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	f003 0308 	and.w	r3, r3, #8
 8006a0a:	2b08      	cmp	r3, #8
 8006a0c:	d122      	bne.n	8006a54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	f003 0308 	and.w	r3, r3, #8
 8006a18:	2b08      	cmp	r3, #8
 8006a1a:	d11b      	bne.n	8006a54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f06f 0208 	mvn.w	r2, #8
 8006a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2204      	movs	r2, #4
 8006a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	69db      	ldr	r3, [r3, #28]
 8006a32:	f003 0303 	and.w	r3, r3, #3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d003      	beq.n	8006a42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f7fa fa72 	bl	8000f24 <HAL_TIM_IC_CaptureCallback>
 8006a40:	e005      	b.n	8006a4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fb42 	bl	80070cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fb49 	bl	80070e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	f003 0310 	and.w	r3, r3, #16
 8006a5e:	2b10      	cmp	r3, #16
 8006a60:	d122      	bne.n	8006aa8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	f003 0310 	and.w	r3, r3, #16
 8006a6c:	2b10      	cmp	r3, #16
 8006a6e:	d11b      	bne.n	8006aa8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f06f 0210 	mvn.w	r2, #16
 8006a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2208      	movs	r2, #8
 8006a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	69db      	ldr	r3, [r3, #28]
 8006a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d003      	beq.n	8006a96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f7fa fa48 	bl	8000f24 <HAL_TIM_IC_CaptureCallback>
 8006a94:	e005      	b.n	8006aa2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fb18 	bl	80070cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 fb1f 	bl	80070e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	f003 0301 	and.w	r3, r3, #1
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d10e      	bne.n	8006ad4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	f003 0301 	and.w	r3, r3, #1
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d107      	bne.n	8006ad4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f06f 0201 	mvn.w	r2, #1
 8006acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 faf2 	bl	80070b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ade:	2b80      	cmp	r3, #128	; 0x80
 8006ae0:	d10e      	bne.n	8006b00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aec:	2b80      	cmp	r3, #128	; 0x80
 8006aee:	d107      	bne.n	8006b00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f001 f856 	bl	8007bac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b0a:	2b40      	cmp	r3, #64	; 0x40
 8006b0c:	d10e      	bne.n	8006b2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b18:	2b40      	cmp	r3, #64	; 0x40
 8006b1a:	d107      	bne.n	8006b2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 fae4 	bl	80070f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	f003 0320 	and.w	r3, r3, #32
 8006b36:	2b20      	cmp	r3, #32
 8006b38:	d10e      	bne.n	8006b58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	f003 0320 	and.w	r3, r3, #32
 8006b44:	2b20      	cmp	r3, #32
 8006b46:	d107      	bne.n	8006b58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f06f 0220 	mvn.w	r2, #32
 8006b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f001 f820 	bl	8007b98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b58:	bf00      	nop
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d101      	bne.n	8006b7e <HAL_TIM_IC_ConfigChannel+0x1e>
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	e088      	b.n	8006c90 <HAL_TIM_IC_ConfigChannel+0x130>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d11b      	bne.n	8006bc4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6818      	ldr	r0, [r3, #0]
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	6819      	ldr	r1, [r3, #0]
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	685a      	ldr	r2, [r3, #4]
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	f000 fd96 	bl	80076cc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	699a      	ldr	r2, [r3, #24]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f022 020c 	bic.w	r2, r2, #12
 8006bae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6999      	ldr	r1, [r3, #24]
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	689a      	ldr	r2, [r3, #8]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	430a      	orrs	r2, r1
 8006bc0:	619a      	str	r2, [r3, #24]
 8006bc2:	e060      	b.n	8006c86 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2b04      	cmp	r3, #4
 8006bc8:	d11c      	bne.n	8006c04 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6818      	ldr	r0, [r3, #0]
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	6819      	ldr	r1, [r3, #0]
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	685a      	ldr	r2, [r3, #4]
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	f000 fe1a 	bl	8007812 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	699a      	ldr	r2, [r3, #24]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006bec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	6999      	ldr	r1, [r3, #24]
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	021a      	lsls	r2, r3, #8
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	619a      	str	r2, [r3, #24]
 8006c02:	e040      	b.n	8006c86 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b08      	cmp	r3, #8
 8006c08:	d11b      	bne.n	8006c42 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6818      	ldr	r0, [r3, #0]
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	6819      	ldr	r1, [r3, #0]
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	685a      	ldr	r2, [r3, #4]
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	f000 fe67 	bl	80078ec <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	69da      	ldr	r2, [r3, #28]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f022 020c 	bic.w	r2, r2, #12
 8006c2c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	69d9      	ldr	r1, [r3, #28]
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	689a      	ldr	r2, [r3, #8]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	430a      	orrs	r2, r1
 8006c3e:	61da      	str	r2, [r3, #28]
 8006c40:	e021      	b.n	8006c86 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b0c      	cmp	r3, #12
 8006c46:	d11c      	bne.n	8006c82 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6818      	ldr	r0, [r3, #0]
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	6819      	ldr	r1, [r3, #0]
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	685a      	ldr	r2, [r3, #4]
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f000 fe84 	bl	8007964 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	69da      	ldr	r2, [r3, #28]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006c6a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	69d9      	ldr	r1, [r3, #28]
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	021a      	lsls	r2, r3, #8
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	430a      	orrs	r2, r1
 8006c7e:	61da      	str	r2, [r3, #28]
 8006c80:	e001      	b.n	8006c86 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3718      	adds	r7, #24
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b086      	sub	sp, #24
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d101      	bne.n	8006cb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	e0ae      	b.n	8006e14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2b0c      	cmp	r3, #12
 8006cc2:	f200 809f 	bhi.w	8006e04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006cc6:	a201      	add	r2, pc, #4	; (adr r2, 8006ccc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ccc:	08006d01 	.word	0x08006d01
 8006cd0:	08006e05 	.word	0x08006e05
 8006cd4:	08006e05 	.word	0x08006e05
 8006cd8:	08006e05 	.word	0x08006e05
 8006cdc:	08006d41 	.word	0x08006d41
 8006ce0:	08006e05 	.word	0x08006e05
 8006ce4:	08006e05 	.word	0x08006e05
 8006ce8:	08006e05 	.word	0x08006e05
 8006cec:	08006d83 	.word	0x08006d83
 8006cf0:	08006e05 	.word	0x08006e05
 8006cf4:	08006e05 	.word	0x08006e05
 8006cf8:	08006e05 	.word	0x08006e05
 8006cfc:	08006dc3 	.word	0x08006dc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68b9      	ldr	r1, [r7, #8]
 8006d06:	4618      	mov	r0, r3
 8006d08:	f000 fa9e 	bl	8007248 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	699a      	ldr	r2, [r3, #24]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f042 0208 	orr.w	r2, r2, #8
 8006d1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	699a      	ldr	r2, [r3, #24]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f022 0204 	bic.w	r2, r2, #4
 8006d2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6999      	ldr	r1, [r3, #24]
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	691a      	ldr	r2, [r3, #16]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	619a      	str	r2, [r3, #24]
      break;
 8006d3e:	e064      	b.n	8006e0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68b9      	ldr	r1, [r7, #8]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f000 faee 	bl	8007328 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	699a      	ldr	r2, [r3, #24]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	699a      	ldr	r2, [r3, #24]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6999      	ldr	r1, [r3, #24]
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	021a      	lsls	r2, r3, #8
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	430a      	orrs	r2, r1
 8006d7e:	619a      	str	r2, [r3, #24]
      break;
 8006d80:	e043      	b.n	8006e0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68b9      	ldr	r1, [r7, #8]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f000 fb43 	bl	8007414 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	69da      	ldr	r2, [r3, #28]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f042 0208 	orr.w	r2, r2, #8
 8006d9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	69da      	ldr	r2, [r3, #28]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f022 0204 	bic.w	r2, r2, #4
 8006dac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	69d9      	ldr	r1, [r3, #28]
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	691a      	ldr	r2, [r3, #16]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	61da      	str	r2, [r3, #28]
      break;
 8006dc0:	e023      	b.n	8006e0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68b9      	ldr	r1, [r7, #8]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f000 fb97 	bl	80074fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	69da      	ldr	r2, [r3, #28]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ddc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	69da      	ldr	r2, [r3, #28]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	69d9      	ldr	r1, [r3, #28]
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	021a      	lsls	r2, r3, #8
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	430a      	orrs	r2, r1
 8006e00:	61da      	str	r2, [r3, #28]
      break;
 8006e02:	e002      	b.n	8006e0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	75fb      	strb	r3, [r7, #23]
      break;
 8006e08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3718      	adds	r7, #24
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e26:	2300      	movs	r3, #0
 8006e28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d101      	bne.n	8006e38 <HAL_TIM_ConfigClockSource+0x1c>
 8006e34:	2302      	movs	r3, #2
 8006e36:	e0b4      	b.n	8006fa2 <HAL_TIM_ConfigClockSource+0x186>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2202      	movs	r2, #2
 8006e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e70:	d03e      	beq.n	8006ef0 <HAL_TIM_ConfigClockSource+0xd4>
 8006e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e76:	f200 8087 	bhi.w	8006f88 <HAL_TIM_ConfigClockSource+0x16c>
 8006e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e7e:	f000 8086 	beq.w	8006f8e <HAL_TIM_ConfigClockSource+0x172>
 8006e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e86:	d87f      	bhi.n	8006f88 <HAL_TIM_ConfigClockSource+0x16c>
 8006e88:	2b70      	cmp	r3, #112	; 0x70
 8006e8a:	d01a      	beq.n	8006ec2 <HAL_TIM_ConfigClockSource+0xa6>
 8006e8c:	2b70      	cmp	r3, #112	; 0x70
 8006e8e:	d87b      	bhi.n	8006f88 <HAL_TIM_ConfigClockSource+0x16c>
 8006e90:	2b60      	cmp	r3, #96	; 0x60
 8006e92:	d050      	beq.n	8006f36 <HAL_TIM_ConfigClockSource+0x11a>
 8006e94:	2b60      	cmp	r3, #96	; 0x60
 8006e96:	d877      	bhi.n	8006f88 <HAL_TIM_ConfigClockSource+0x16c>
 8006e98:	2b50      	cmp	r3, #80	; 0x50
 8006e9a:	d03c      	beq.n	8006f16 <HAL_TIM_ConfigClockSource+0xfa>
 8006e9c:	2b50      	cmp	r3, #80	; 0x50
 8006e9e:	d873      	bhi.n	8006f88 <HAL_TIM_ConfigClockSource+0x16c>
 8006ea0:	2b40      	cmp	r3, #64	; 0x40
 8006ea2:	d058      	beq.n	8006f56 <HAL_TIM_ConfigClockSource+0x13a>
 8006ea4:	2b40      	cmp	r3, #64	; 0x40
 8006ea6:	d86f      	bhi.n	8006f88 <HAL_TIM_ConfigClockSource+0x16c>
 8006ea8:	2b30      	cmp	r3, #48	; 0x30
 8006eaa:	d064      	beq.n	8006f76 <HAL_TIM_ConfigClockSource+0x15a>
 8006eac:	2b30      	cmp	r3, #48	; 0x30
 8006eae:	d86b      	bhi.n	8006f88 <HAL_TIM_ConfigClockSource+0x16c>
 8006eb0:	2b20      	cmp	r3, #32
 8006eb2:	d060      	beq.n	8006f76 <HAL_TIM_ConfigClockSource+0x15a>
 8006eb4:	2b20      	cmp	r3, #32
 8006eb6:	d867      	bhi.n	8006f88 <HAL_TIM_ConfigClockSource+0x16c>
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d05c      	beq.n	8006f76 <HAL_TIM_ConfigClockSource+0x15a>
 8006ebc:	2b10      	cmp	r3, #16
 8006ebe:	d05a      	beq.n	8006f76 <HAL_TIM_ConfigClockSource+0x15a>
 8006ec0:	e062      	b.n	8006f88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6818      	ldr	r0, [r3, #0]
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	6899      	ldr	r1, [r3, #8]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	685a      	ldr	r2, [r3, #4]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	f000 fd9f 	bl	8007a14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ee4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	609a      	str	r2, [r3, #8]
      break;
 8006eee:	e04f      	b.n	8006f90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6818      	ldr	r0, [r3, #0]
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	6899      	ldr	r1, [r3, #8]
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	685a      	ldr	r2, [r3, #4]
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f000 fd88 	bl	8007a14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	689a      	ldr	r2, [r3, #8]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f12:	609a      	str	r2, [r3, #8]
      break;
 8006f14:	e03c      	b.n	8006f90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6818      	ldr	r0, [r3, #0]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	6859      	ldr	r1, [r3, #4]
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	461a      	mov	r2, r3
 8006f24:	f000 fc46 	bl	80077b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2150      	movs	r1, #80	; 0x50
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f000 fd55 	bl	80079de <TIM_ITRx_SetConfig>
      break;
 8006f34:	e02c      	b.n	8006f90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6818      	ldr	r0, [r3, #0]
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	6859      	ldr	r1, [r3, #4]
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	461a      	mov	r2, r3
 8006f44:	f000 fca2 	bl	800788c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2160      	movs	r1, #96	; 0x60
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f000 fd45 	bl	80079de <TIM_ITRx_SetConfig>
      break;
 8006f54:	e01c      	b.n	8006f90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6818      	ldr	r0, [r3, #0]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	6859      	ldr	r1, [r3, #4]
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	461a      	mov	r2, r3
 8006f64:	f000 fc26 	bl	80077b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2140      	movs	r1, #64	; 0x40
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f000 fd35 	bl	80079de <TIM_ITRx_SetConfig>
      break;
 8006f74:	e00c      	b.n	8006f90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4619      	mov	r1, r3
 8006f80:	4610      	mov	r0, r2
 8006f82:	f000 fd2c 	bl	80079de <TIM_ITRx_SetConfig>
      break;
 8006f86:	e003      	b.n	8006f90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f8c:	e000      	b.n	8006f90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006f8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b082      	sub	sp, #8
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
 8006fb2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d101      	bne.n	8006fc2 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006fbe:	2302      	movs	r3, #2
 8006fc0:	e031      	b.n	8007026 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2202      	movs	r2, #2
 8006fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006fd2:	6839      	ldr	r1, [r7, #0]
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 fae7 	bl	80075a8 <TIM_SlaveTimer_SetConfig>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d009      	beq.n	8006ff4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e018      	b.n	8007026 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68da      	ldr	r2, [r3, #12]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007002:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68da      	ldr	r2, [r3, #12]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007012:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3708      	adds	r7, #8
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
	...

08007030 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800703a:	2300      	movs	r3, #0
 800703c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	2b0c      	cmp	r3, #12
 8007042:	d831      	bhi.n	80070a8 <HAL_TIM_ReadCapturedValue+0x78>
 8007044:	a201      	add	r2, pc, #4	; (adr r2, 800704c <HAL_TIM_ReadCapturedValue+0x1c>)
 8007046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704a:	bf00      	nop
 800704c:	08007081 	.word	0x08007081
 8007050:	080070a9 	.word	0x080070a9
 8007054:	080070a9 	.word	0x080070a9
 8007058:	080070a9 	.word	0x080070a9
 800705c:	0800708b 	.word	0x0800708b
 8007060:	080070a9 	.word	0x080070a9
 8007064:	080070a9 	.word	0x080070a9
 8007068:	080070a9 	.word	0x080070a9
 800706c:	08007095 	.word	0x08007095
 8007070:	080070a9 	.word	0x080070a9
 8007074:	080070a9 	.word	0x080070a9
 8007078:	080070a9 	.word	0x080070a9
 800707c:	0800709f 	.word	0x0800709f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007086:	60fb      	str	r3, [r7, #12]

      break;
 8007088:	e00f      	b.n	80070aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007090:	60fb      	str	r3, [r7, #12]

      break;
 8007092:	e00a      	b.n	80070aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800709a:	60fb      	str	r3, [r7, #12]

      break;
 800709c:	e005      	b.n	80070aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a4:	60fb      	str	r3, [r7, #12]

      break;
 80070a6:	e000      	b.n	80070aa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80070a8:	bf00      	nop
  }

  return tmpreg;
 80070aa:	68fb      	ldr	r3, [r7, #12]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3714      	adds	r7, #20
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80070c0:	bf00      	nop
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070fc:	bf00      	nop
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007108:	b480      	push	{r7}
 800710a:	b085      	sub	sp, #20
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a40      	ldr	r2, [pc, #256]	; (800721c <TIM_Base_SetConfig+0x114>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d013      	beq.n	8007148 <TIM_Base_SetConfig+0x40>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007126:	d00f      	beq.n	8007148 <TIM_Base_SetConfig+0x40>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a3d      	ldr	r2, [pc, #244]	; (8007220 <TIM_Base_SetConfig+0x118>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d00b      	beq.n	8007148 <TIM_Base_SetConfig+0x40>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a3c      	ldr	r2, [pc, #240]	; (8007224 <TIM_Base_SetConfig+0x11c>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d007      	beq.n	8007148 <TIM_Base_SetConfig+0x40>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a3b      	ldr	r2, [pc, #236]	; (8007228 <TIM_Base_SetConfig+0x120>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d003      	beq.n	8007148 <TIM_Base_SetConfig+0x40>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a3a      	ldr	r2, [pc, #232]	; (800722c <TIM_Base_SetConfig+0x124>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d108      	bne.n	800715a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800714e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	4313      	orrs	r3, r2
 8007158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a2f      	ldr	r2, [pc, #188]	; (800721c <TIM_Base_SetConfig+0x114>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d02b      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007168:	d027      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a2c      	ldr	r2, [pc, #176]	; (8007220 <TIM_Base_SetConfig+0x118>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d023      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a2b      	ldr	r2, [pc, #172]	; (8007224 <TIM_Base_SetConfig+0x11c>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d01f      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a2a      	ldr	r2, [pc, #168]	; (8007228 <TIM_Base_SetConfig+0x120>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d01b      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a29      	ldr	r2, [pc, #164]	; (800722c <TIM_Base_SetConfig+0x124>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d017      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a28      	ldr	r2, [pc, #160]	; (8007230 <TIM_Base_SetConfig+0x128>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d013      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a27      	ldr	r2, [pc, #156]	; (8007234 <TIM_Base_SetConfig+0x12c>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d00f      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a26      	ldr	r2, [pc, #152]	; (8007238 <TIM_Base_SetConfig+0x130>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d00b      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a25      	ldr	r2, [pc, #148]	; (800723c <TIM_Base_SetConfig+0x134>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d007      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a24      	ldr	r2, [pc, #144]	; (8007240 <TIM_Base_SetConfig+0x138>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d003      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a23      	ldr	r2, [pc, #140]	; (8007244 <TIM_Base_SetConfig+0x13c>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d108      	bne.n	80071cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	689a      	ldr	r2, [r3, #8]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a0a      	ldr	r2, [pc, #40]	; (800721c <TIM_Base_SetConfig+0x114>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d003      	beq.n	8007200 <TIM_Base_SetConfig+0xf8>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a0c      	ldr	r2, [pc, #48]	; (800722c <TIM_Base_SetConfig+0x124>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d103      	bne.n	8007208 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	691a      	ldr	r2, [r3, #16]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	615a      	str	r2, [r3, #20]
}
 800720e:	bf00      	nop
 8007210:	3714      	adds	r7, #20
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	40010000 	.word	0x40010000
 8007220:	40000400 	.word	0x40000400
 8007224:	40000800 	.word	0x40000800
 8007228:	40000c00 	.word	0x40000c00
 800722c:	40010400 	.word	0x40010400
 8007230:	40014000 	.word	0x40014000
 8007234:	40014400 	.word	0x40014400
 8007238:	40014800 	.word	0x40014800
 800723c:	40001800 	.word	0x40001800
 8007240:	40001c00 	.word	0x40001c00
 8007244:	40002000 	.word	0x40002000

08007248 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007248:	b480      	push	{r7}
 800724a:	b087      	sub	sp, #28
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	f023 0201 	bic.w	r2, r3, #1
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f023 0303 	bic.w	r3, r3, #3
 800727e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	4313      	orrs	r3, r2
 8007288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	f023 0302 	bic.w	r3, r3, #2
 8007290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	4313      	orrs	r3, r2
 800729a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a20      	ldr	r2, [pc, #128]	; (8007320 <TIM_OC1_SetConfig+0xd8>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d003      	beq.n	80072ac <TIM_OC1_SetConfig+0x64>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a1f      	ldr	r2, [pc, #124]	; (8007324 <TIM_OC1_SetConfig+0xdc>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d10c      	bne.n	80072c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	f023 0308 	bic.w	r3, r3, #8
 80072b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	697a      	ldr	r2, [r7, #20]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	f023 0304 	bic.w	r3, r3, #4
 80072c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a15      	ldr	r2, [pc, #84]	; (8007320 <TIM_OC1_SetConfig+0xd8>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d003      	beq.n	80072d6 <TIM_OC1_SetConfig+0x8e>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a14      	ldr	r2, [pc, #80]	; (8007324 <TIM_OC1_SetConfig+0xdc>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d111      	bne.n	80072fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	693a      	ldr	r2, [r7, #16]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	699b      	ldr	r3, [r3, #24]
 80072f4:	693a      	ldr	r2, [r7, #16]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	693a      	ldr	r2, [r7, #16]
 80072fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	685a      	ldr	r2, [r3, #4]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	621a      	str	r2, [r3, #32]
}
 8007314:	bf00      	nop
 8007316:	371c      	adds	r7, #28
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr
 8007320:	40010000 	.word	0x40010000
 8007324:	40010400 	.word	0x40010400

08007328 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007328:	b480      	push	{r7}
 800732a:	b087      	sub	sp, #28
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a1b      	ldr	r3, [r3, #32]
 8007336:	f023 0210 	bic.w	r2, r3, #16
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800735e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	021b      	lsls	r3, r3, #8
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	4313      	orrs	r3, r2
 800736a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	f023 0320 	bic.w	r3, r3, #32
 8007372:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	011b      	lsls	r3, r3, #4
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	4313      	orrs	r3, r2
 800737e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a22      	ldr	r2, [pc, #136]	; (800740c <TIM_OC2_SetConfig+0xe4>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d003      	beq.n	8007390 <TIM_OC2_SetConfig+0x68>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a21      	ldr	r2, [pc, #132]	; (8007410 <TIM_OC2_SetConfig+0xe8>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d10d      	bne.n	80073ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007396:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	011b      	lsls	r3, r3, #4
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a17      	ldr	r2, [pc, #92]	; (800740c <TIM_OC2_SetConfig+0xe4>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d003      	beq.n	80073bc <TIM_OC2_SetConfig+0x94>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a16      	ldr	r2, [pc, #88]	; (8007410 <TIM_OC2_SetConfig+0xe8>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d113      	bne.n	80073e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	695b      	ldr	r3, [r3, #20]
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	693a      	ldr	r2, [r7, #16]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	693a      	ldr	r2, [r7, #16]
 80073e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	685a      	ldr	r2, [r3, #4]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	697a      	ldr	r2, [r7, #20]
 80073fc:	621a      	str	r2, [r3, #32]
}
 80073fe:	bf00      	nop
 8007400:	371c      	adds	r7, #28
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	40010000 	.word	0x40010000
 8007410:	40010400 	.word	0x40010400

08007414 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007414:	b480      	push	{r7}
 8007416:	b087      	sub	sp, #28
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a1b      	ldr	r3, [r3, #32]
 8007422:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	69db      	ldr	r3, [r3, #28]
 800743a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f023 0303 	bic.w	r3, r3, #3
 800744a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	4313      	orrs	r3, r2
 8007454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800745c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	021b      	lsls	r3, r3, #8
 8007464:	697a      	ldr	r2, [r7, #20]
 8007466:	4313      	orrs	r3, r2
 8007468:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a21      	ldr	r2, [pc, #132]	; (80074f4 <TIM_OC3_SetConfig+0xe0>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d003      	beq.n	800747a <TIM_OC3_SetConfig+0x66>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a20      	ldr	r2, [pc, #128]	; (80074f8 <TIM_OC3_SetConfig+0xe4>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d10d      	bne.n	8007496 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007480:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	021b      	lsls	r3, r3, #8
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	4313      	orrs	r3, r2
 800748c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a16      	ldr	r2, [pc, #88]	; (80074f4 <TIM_OC3_SetConfig+0xe0>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d003      	beq.n	80074a6 <TIM_OC3_SetConfig+0x92>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a15      	ldr	r2, [pc, #84]	; (80074f8 <TIM_OC3_SetConfig+0xe4>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d113      	bne.n	80074ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	695b      	ldr	r3, [r3, #20]
 80074ba:	011b      	lsls	r3, r3, #4
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	4313      	orrs	r3, r2
 80074c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	011b      	lsls	r3, r3, #4
 80074c8:	693a      	ldr	r2, [r7, #16]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	685a      	ldr	r2, [r3, #4]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	697a      	ldr	r2, [r7, #20]
 80074e6:	621a      	str	r2, [r3, #32]
}
 80074e8:	bf00      	nop
 80074ea:	371c      	adds	r7, #28
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr
 80074f4:	40010000 	.word	0x40010000
 80074f8:	40010400 	.word	0x40010400

080074fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b087      	sub	sp, #28
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a1b      	ldr	r3, [r3, #32]
 800750a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a1b      	ldr	r3, [r3, #32]
 8007516:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	69db      	ldr	r3, [r3, #28]
 8007522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800752a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	021b      	lsls	r3, r3, #8
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	4313      	orrs	r3, r2
 800753e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007546:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	031b      	lsls	r3, r3, #12
 800754e:	693a      	ldr	r2, [r7, #16]
 8007550:	4313      	orrs	r3, r2
 8007552:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a12      	ldr	r2, [pc, #72]	; (80075a0 <TIM_OC4_SetConfig+0xa4>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d003      	beq.n	8007564 <TIM_OC4_SetConfig+0x68>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a11      	ldr	r2, [pc, #68]	; (80075a4 <TIM_OC4_SetConfig+0xa8>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d109      	bne.n	8007578 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800756a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	695b      	ldr	r3, [r3, #20]
 8007570:	019b      	lsls	r3, r3, #6
 8007572:	697a      	ldr	r2, [r7, #20]
 8007574:	4313      	orrs	r3, r2
 8007576:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	697a      	ldr	r2, [r7, #20]
 800757c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	685a      	ldr	r2, [r3, #4]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	693a      	ldr	r2, [r7, #16]
 8007590:	621a      	str	r2, [r3, #32]
}
 8007592:	bf00      	nop
 8007594:	371c      	adds	r7, #28
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	40010000 	.word	0x40010000
 80075a4:	40010400 	.word	0x40010400

080075a8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b086      	sub	sp, #24
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075b2:	2300      	movs	r3, #0
 80075b4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075c4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	f023 0307 	bic.w	r3, r3, #7
 80075d6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	693a      	ldr	r2, [r7, #16]
 80075de:	4313      	orrs	r3, r2
 80075e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	2b70      	cmp	r3, #112	; 0x70
 80075f0:	d01a      	beq.n	8007628 <TIM_SlaveTimer_SetConfig+0x80>
 80075f2:	2b70      	cmp	r3, #112	; 0x70
 80075f4:	d860      	bhi.n	80076b8 <TIM_SlaveTimer_SetConfig+0x110>
 80075f6:	2b60      	cmp	r3, #96	; 0x60
 80075f8:	d054      	beq.n	80076a4 <TIM_SlaveTimer_SetConfig+0xfc>
 80075fa:	2b60      	cmp	r3, #96	; 0x60
 80075fc:	d85c      	bhi.n	80076b8 <TIM_SlaveTimer_SetConfig+0x110>
 80075fe:	2b50      	cmp	r3, #80	; 0x50
 8007600:	d046      	beq.n	8007690 <TIM_SlaveTimer_SetConfig+0xe8>
 8007602:	2b50      	cmp	r3, #80	; 0x50
 8007604:	d858      	bhi.n	80076b8 <TIM_SlaveTimer_SetConfig+0x110>
 8007606:	2b40      	cmp	r3, #64	; 0x40
 8007608:	d019      	beq.n	800763e <TIM_SlaveTimer_SetConfig+0x96>
 800760a:	2b40      	cmp	r3, #64	; 0x40
 800760c:	d854      	bhi.n	80076b8 <TIM_SlaveTimer_SetConfig+0x110>
 800760e:	2b30      	cmp	r3, #48	; 0x30
 8007610:	d055      	beq.n	80076be <TIM_SlaveTimer_SetConfig+0x116>
 8007612:	2b30      	cmp	r3, #48	; 0x30
 8007614:	d850      	bhi.n	80076b8 <TIM_SlaveTimer_SetConfig+0x110>
 8007616:	2b20      	cmp	r3, #32
 8007618:	d051      	beq.n	80076be <TIM_SlaveTimer_SetConfig+0x116>
 800761a:	2b20      	cmp	r3, #32
 800761c:	d84c      	bhi.n	80076b8 <TIM_SlaveTimer_SetConfig+0x110>
 800761e:	2b00      	cmp	r3, #0
 8007620:	d04d      	beq.n	80076be <TIM_SlaveTimer_SetConfig+0x116>
 8007622:	2b10      	cmp	r3, #16
 8007624:	d04b      	beq.n	80076be <TIM_SlaveTimer_SetConfig+0x116>
 8007626:	e047      	b.n	80076b8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6818      	ldr	r0, [r3, #0]
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	68d9      	ldr	r1, [r3, #12]
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	689a      	ldr	r2, [r3, #8]
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	f000 f9ec 	bl	8007a14 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800763c:	e040      	b.n	80076c0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2b05      	cmp	r3, #5
 8007644:	d101      	bne.n	800764a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e03b      	b.n	80076c2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	6a1b      	ldr	r3, [r3, #32]
 8007650:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	6a1a      	ldr	r2, [r3, #32]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f022 0201 	bic.w	r2, r2, #1
 8007660:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007670:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	011b      	lsls	r3, r3, #4
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	4313      	orrs	r3, r2
 800767c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	621a      	str	r2, [r3, #32]
      break;
 800768e:	e017      	b.n	80076c0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6818      	ldr	r0, [r3, #0]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	6899      	ldr	r1, [r3, #8]
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	461a      	mov	r2, r3
 800769e:	f000 f889 	bl	80077b4 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80076a2:	e00d      	b.n	80076c0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6818      	ldr	r0, [r3, #0]
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	6899      	ldr	r1, [r3, #8]
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	461a      	mov	r2, r3
 80076b2:	f000 f8eb 	bl	800788c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80076b6:	e003      	b.n	80076c0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	75fb      	strb	r3, [r7, #23]
      break;
 80076bc:	e000      	b.n	80076c0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80076be:	bf00      	nop
  }

  return status;
 80076c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3718      	adds	r7, #24
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
	...

080076cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b087      	sub	sp, #28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	607a      	str	r2, [r7, #4]
 80076d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6a1b      	ldr	r3, [r3, #32]
 80076de:	f023 0201 	bic.w	r2, r3, #1
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6a1b      	ldr	r3, [r3, #32]
 80076f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	4a28      	ldr	r2, [pc, #160]	; (8007798 <TIM_TI1_SetConfig+0xcc>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d01b      	beq.n	8007732 <TIM_TI1_SetConfig+0x66>
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007700:	d017      	beq.n	8007732 <TIM_TI1_SetConfig+0x66>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	4a25      	ldr	r2, [pc, #148]	; (800779c <TIM_TI1_SetConfig+0xd0>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d013      	beq.n	8007732 <TIM_TI1_SetConfig+0x66>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	4a24      	ldr	r2, [pc, #144]	; (80077a0 <TIM_TI1_SetConfig+0xd4>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d00f      	beq.n	8007732 <TIM_TI1_SetConfig+0x66>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	4a23      	ldr	r2, [pc, #140]	; (80077a4 <TIM_TI1_SetConfig+0xd8>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d00b      	beq.n	8007732 <TIM_TI1_SetConfig+0x66>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	4a22      	ldr	r2, [pc, #136]	; (80077a8 <TIM_TI1_SetConfig+0xdc>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d007      	beq.n	8007732 <TIM_TI1_SetConfig+0x66>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	4a21      	ldr	r2, [pc, #132]	; (80077ac <TIM_TI1_SetConfig+0xe0>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d003      	beq.n	8007732 <TIM_TI1_SetConfig+0x66>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	4a20      	ldr	r2, [pc, #128]	; (80077b0 <TIM_TI1_SetConfig+0xe4>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d101      	bne.n	8007736 <TIM_TI1_SetConfig+0x6a>
 8007732:	2301      	movs	r3, #1
 8007734:	e000      	b.n	8007738 <TIM_TI1_SetConfig+0x6c>
 8007736:	2300      	movs	r3, #0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d008      	beq.n	800774e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	f023 0303 	bic.w	r3, r3, #3
 8007742:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007744:	697a      	ldr	r2, [r7, #20]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4313      	orrs	r3, r2
 800774a:	617b      	str	r3, [r7, #20]
 800774c:	e003      	b.n	8007756 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	f043 0301 	orr.w	r3, r3, #1
 8007754:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800775c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	011b      	lsls	r3, r3, #4
 8007762:	b2db      	uxtb	r3, r3
 8007764:	697a      	ldr	r2, [r7, #20]
 8007766:	4313      	orrs	r3, r2
 8007768:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	f023 030a 	bic.w	r3, r3, #10
 8007770:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	f003 030a 	and.w	r3, r3, #10
 8007778:	693a      	ldr	r2, [r7, #16]
 800777a:	4313      	orrs	r3, r2
 800777c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	621a      	str	r2, [r3, #32]
}
 800778a:	bf00      	nop
 800778c:	371c      	adds	r7, #28
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	40010000 	.word	0x40010000
 800779c:	40000400 	.word	0x40000400
 80077a0:	40000800 	.word	0x40000800
 80077a4:	40000c00 	.word	0x40000c00
 80077a8:	40010400 	.word	0x40010400
 80077ac:	40014000 	.word	0x40014000
 80077b0:	40001800 	.word	0x40001800

080077b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b087      	sub	sp, #28
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6a1b      	ldr	r3, [r3, #32]
 80077c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	6a1b      	ldr	r3, [r3, #32]
 80077ca:	f023 0201 	bic.w	r2, r3, #1
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	699b      	ldr	r3, [r3, #24]
 80077d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	011b      	lsls	r3, r3, #4
 80077e4:	693a      	ldr	r2, [r7, #16]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	f023 030a 	bic.w	r3, r3, #10
 80077f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80077f2:	697a      	ldr	r2, [r7, #20]
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	693a      	ldr	r2, [r7, #16]
 80077fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	697a      	ldr	r2, [r7, #20]
 8007804:	621a      	str	r2, [r3, #32]
}
 8007806:	bf00      	nop
 8007808:	371c      	adds	r7, #28
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr

08007812 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007812:	b480      	push	{r7}
 8007814:	b087      	sub	sp, #28
 8007816:	af00      	add	r7, sp, #0
 8007818:	60f8      	str	r0, [r7, #12]
 800781a:	60b9      	str	r1, [r7, #8]
 800781c:	607a      	str	r2, [r7, #4]
 800781e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6a1b      	ldr	r3, [r3, #32]
 8007824:	f023 0210 	bic.w	r2, r3, #16
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6a1b      	ldr	r3, [r3, #32]
 8007836:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800783e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	021b      	lsls	r3, r3, #8
 8007844:	697a      	ldr	r2, [r7, #20]
 8007846:	4313      	orrs	r3, r2
 8007848:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007850:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	031b      	lsls	r3, r3, #12
 8007856:	b29b      	uxth	r3, r3
 8007858:	697a      	ldr	r2, [r7, #20]
 800785a:	4313      	orrs	r3, r2
 800785c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007864:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	011b      	lsls	r3, r3, #4
 800786a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800786e:	693a      	ldr	r2, [r7, #16]
 8007870:	4313      	orrs	r3, r2
 8007872:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	697a      	ldr	r2, [r7, #20]
 8007878:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	693a      	ldr	r2, [r7, #16]
 800787e:	621a      	str	r2, [r3, #32]
}
 8007880:	bf00      	nop
 8007882:	371c      	adds	r7, #28
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800788c:	b480      	push	{r7}
 800788e:	b087      	sub	sp, #28
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6a1b      	ldr	r3, [r3, #32]
 800789c:	f023 0210 	bic.w	r2, r3, #16
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6a1b      	ldr	r3, [r3, #32]
 80078ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	031b      	lsls	r3, r3, #12
 80078bc:	697a      	ldr	r2, [r7, #20]
 80078be:	4313      	orrs	r3, r2
 80078c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80078c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	011b      	lsls	r3, r3, #4
 80078ce:	693a      	ldr	r2, [r7, #16]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	621a      	str	r2, [r3, #32]
}
 80078e0:	bf00      	nop
 80078e2:	371c      	adds	r7, #28
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b087      	sub	sp, #28
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	607a      	str	r2, [r7, #4]
 80078f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6a1b      	ldr	r3, [r3, #32]
 80078fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	69db      	ldr	r3, [r3, #28]
 800790a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6a1b      	ldr	r3, [r3, #32]
 8007910:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	f023 0303 	bic.w	r3, r3, #3
 8007918:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800791a:	697a      	ldr	r2, [r7, #20]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4313      	orrs	r3, r2
 8007920:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007928:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	011b      	lsls	r3, r3, #4
 800792e:	b2db      	uxtb	r3, r3
 8007930:	697a      	ldr	r2, [r7, #20]
 8007932:	4313      	orrs	r3, r2
 8007934:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800793c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	021b      	lsls	r3, r3, #8
 8007942:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007946:	693a      	ldr	r2, [r7, #16]
 8007948:	4313      	orrs	r3, r2
 800794a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	693a      	ldr	r2, [r7, #16]
 8007956:	621a      	str	r2, [r3, #32]
}
 8007958:	bf00      	nop
 800795a:	371c      	adds	r7, #28
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007964:	b480      	push	{r7}
 8007966:	b087      	sub	sp, #28
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	607a      	str	r2, [r7, #4]
 8007970:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6a1b      	ldr	r3, [r3, #32]
 8007976:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	69db      	ldr	r3, [r3, #28]
 8007982:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6a1b      	ldr	r3, [r3, #32]
 8007988:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007990:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	021b      	lsls	r3, r3, #8
 8007996:	697a      	ldr	r2, [r7, #20]
 8007998:	4313      	orrs	r3, r2
 800799a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079a2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	031b      	lsls	r3, r3, #12
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	697a      	ldr	r2, [r7, #20]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80079b6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	031b      	lsls	r3, r3, #12
 80079bc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	697a      	ldr	r2, [r7, #20]
 80079ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	621a      	str	r2, [r3, #32]
}
 80079d2:	bf00      	nop
 80079d4:	371c      	adds	r7, #28
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079de:	b480      	push	{r7}
 80079e0:	b085      	sub	sp, #20
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
 80079e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079f6:	683a      	ldr	r2, [r7, #0]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	f043 0307 	orr.w	r3, r3, #7
 8007a00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	609a      	str	r2, [r3, #8]
}
 8007a08:	bf00      	nop
 8007a0a:	3714      	adds	r7, #20
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b087      	sub	sp, #28
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	607a      	str	r2, [r7, #4]
 8007a20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	021a      	lsls	r2, r3, #8
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	431a      	orrs	r2, r3
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	697a      	ldr	r2, [r7, #20]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	609a      	str	r2, [r3, #8]
}
 8007a48:	bf00      	nop
 8007a4a:	371c      	adds	r7, #28
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b087      	sub	sp, #28
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	f003 031f 	and.w	r3, r3, #31
 8007a66:	2201      	movs	r2, #1
 8007a68:	fa02 f303 	lsl.w	r3, r2, r3
 8007a6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6a1a      	ldr	r2, [r3, #32]
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	43db      	mvns	r3, r3
 8007a76:	401a      	ands	r2, r3
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6a1a      	ldr	r2, [r3, #32]
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	f003 031f 	and.w	r3, r3, #31
 8007a86:	6879      	ldr	r1, [r7, #4]
 8007a88:	fa01 f303 	lsl.w	r3, r1, r3
 8007a8c:	431a      	orrs	r2, r3
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	621a      	str	r2, [r3, #32]
}
 8007a92:	bf00      	nop
 8007a94:	371c      	adds	r7, #28
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr
	...

08007aa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b085      	sub	sp, #20
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d101      	bne.n	8007ab8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ab4:	2302      	movs	r3, #2
 8007ab6:	e05a      	b.n	8007b6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2202      	movs	r2, #2
 8007ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ade:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a21      	ldr	r2, [pc, #132]	; (8007b7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d022      	beq.n	8007b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b04:	d01d      	beq.n	8007b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a1d      	ldr	r2, [pc, #116]	; (8007b80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d018      	beq.n	8007b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a1b      	ldr	r2, [pc, #108]	; (8007b84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d013      	beq.n	8007b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a1a      	ldr	r2, [pc, #104]	; (8007b88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d00e      	beq.n	8007b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a18      	ldr	r2, [pc, #96]	; (8007b8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d009      	beq.n	8007b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a17      	ldr	r2, [pc, #92]	; (8007b90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d004      	beq.n	8007b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a15      	ldr	r2, [pc, #84]	; (8007b94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d10c      	bne.n	8007b5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68ba      	ldr	r2, [r7, #8]
 8007b5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3714      	adds	r7, #20
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	40010000 	.word	0x40010000
 8007b80:	40000400 	.word	0x40000400
 8007b84:	40000800 	.word	0x40000800
 8007b88:	40000c00 	.word	0x40000c00
 8007b8c:	40010400 	.word	0x40010400
 8007b90:	40014000 	.word	0x40014000
 8007b94:	40001800 	.word	0x40001800

08007b98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ba0:	bf00      	nop
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bb4:	bf00      	nop
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d101      	bne.n	8007bd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e03f      	b.n	8007c52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d106      	bne.n	8007bec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f7fa ff86 	bl	8002af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2224      	movs	r2, #36	; 0x24
 8007bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68da      	ldr	r2, [r3, #12]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 f929 	bl	8007e5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	691a      	ldr	r2, [r3, #16]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	695a      	ldr	r2, [r3, #20]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68da      	ldr	r2, [r3, #12]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2220      	movs	r2, #32
 8007c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2220      	movs	r2, #32
 8007c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3708      	adds	r7, #8
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b08a      	sub	sp, #40	; 0x28
 8007c5e:	af02      	add	r7, sp, #8
 8007c60:	60f8      	str	r0, [r7, #12]
 8007c62:	60b9      	str	r1, [r7, #8]
 8007c64:	603b      	str	r3, [r7, #0]
 8007c66:	4613      	mov	r3, r2
 8007c68:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	2b20      	cmp	r3, #32
 8007c78:	d17c      	bne.n	8007d74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d002      	beq.n	8007c86 <HAL_UART_Transmit+0x2c>
 8007c80:	88fb      	ldrh	r3, [r7, #6]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d101      	bne.n	8007c8a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e075      	b.n	8007d76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d101      	bne.n	8007c98 <HAL_UART_Transmit+0x3e>
 8007c94:	2302      	movs	r3, #2
 8007c96:	e06e      	b.n	8007d76 <HAL_UART_Transmit+0x11c>
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2221      	movs	r2, #33	; 0x21
 8007caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007cae:	f7fb f925 	bl	8002efc <HAL_GetTick>
 8007cb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	88fa      	ldrh	r2, [r7, #6]
 8007cb8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	88fa      	ldrh	r2, [r7, #6]
 8007cbe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cc8:	d108      	bne.n	8007cdc <HAL_UART_Transmit+0x82>
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d104      	bne.n	8007cdc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	61bb      	str	r3, [r7, #24]
 8007cda:	e003      	b.n	8007ce4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007cec:	e02a      	b.n	8007d44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	9300      	str	r3, [sp, #0]
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	2180      	movs	r1, #128	; 0x80
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f000 f840 	bl	8007d7e <UART_WaitOnFlagUntilTimeout>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d001      	beq.n	8007d08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007d04:	2303      	movs	r3, #3
 8007d06:	e036      	b.n	8007d76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d10b      	bne.n	8007d26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	881b      	ldrh	r3, [r3, #0]
 8007d12:	461a      	mov	r2, r3
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007d1e:	69bb      	ldr	r3, [r7, #24]
 8007d20:	3302      	adds	r3, #2
 8007d22:	61bb      	str	r3, [r7, #24]
 8007d24:	e007      	b.n	8007d36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	781a      	ldrb	r2, [r3, #0]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	3301      	adds	r3, #1
 8007d34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	b29a      	uxth	r2, r3
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d1cf      	bne.n	8007cee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	2200      	movs	r2, #0
 8007d56:	2140      	movs	r1, #64	; 0x40
 8007d58:	68f8      	ldr	r0, [r7, #12]
 8007d5a:	f000 f810 	bl	8007d7e <UART_WaitOnFlagUntilTimeout>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d001      	beq.n	8007d68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007d64:	2303      	movs	r3, #3
 8007d66:	e006      	b.n	8007d76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2220      	movs	r2, #32
 8007d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007d70:	2300      	movs	r3, #0
 8007d72:	e000      	b.n	8007d76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007d74:	2302      	movs	r3, #2
  }
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3720      	adds	r7, #32
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b090      	sub	sp, #64	; 0x40
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	60f8      	str	r0, [r7, #12]
 8007d86:	60b9      	str	r1, [r7, #8]
 8007d88:	603b      	str	r3, [r7, #0]
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d8e:	e050      	b.n	8007e32 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d96:	d04c      	beq.n	8007e32 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d007      	beq.n	8007dae <UART_WaitOnFlagUntilTimeout+0x30>
 8007d9e:	f7fb f8ad 	bl	8002efc <HAL_GetTick>
 8007da2:	4602      	mov	r2, r0
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	1ad3      	subs	r3, r2, r3
 8007da8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d241      	bcs.n	8007e32 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	330c      	adds	r3, #12
 8007db4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db8:	e853 3f00 	ldrex	r3, [r3]
 8007dbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	330c      	adds	r3, #12
 8007dcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007dce:	637a      	str	r2, [r7, #52]	; 0x34
 8007dd0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007dd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007dd6:	e841 2300 	strex	r3, r2, [r1]
 8007dda:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d1e5      	bne.n	8007dae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	3314      	adds	r3, #20
 8007de8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	e853 3f00 	ldrex	r3, [r3]
 8007df0:	613b      	str	r3, [r7, #16]
   return(result);
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	f023 0301 	bic.w	r3, r3, #1
 8007df8:	63bb      	str	r3, [r7, #56]	; 0x38
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	3314      	adds	r3, #20
 8007e00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e02:	623a      	str	r2, [r7, #32]
 8007e04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e06:	69f9      	ldr	r1, [r7, #28]
 8007e08:	6a3a      	ldr	r2, [r7, #32]
 8007e0a:	e841 2300 	strex	r3, r2, [r1]
 8007e0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1e5      	bne.n	8007de2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2220      	movs	r2, #32
 8007e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2220      	movs	r2, #32
 8007e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	e00f      	b.n	8007e52 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	68ba      	ldr	r2, [r7, #8]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	bf0c      	ite	eq
 8007e42:	2301      	moveq	r3, #1
 8007e44:	2300      	movne	r3, #0
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	461a      	mov	r2, r3
 8007e4a:	79fb      	ldrb	r3, [r7, #7]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d09f      	beq.n	8007d90 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3740      	adds	r7, #64	; 0x40
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
	...

08007e5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e60:	b0c0      	sub	sp, #256	; 0x100
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e78:	68d9      	ldr	r1, [r3, #12]
 8007e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	ea40 0301 	orr.w	r3, r0, r1
 8007e84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e8a:	689a      	ldr	r2, [r3, #8]
 8007e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	431a      	orrs	r2, r3
 8007e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e98:	695b      	ldr	r3, [r3, #20]
 8007e9a:	431a      	orrs	r2, r3
 8007e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ea0:	69db      	ldr	r3, [r3, #28]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007eb4:	f021 010c 	bic.w	r1, r1, #12
 8007eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ec2:	430b      	orrs	r3, r1
 8007ec4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	695b      	ldr	r3, [r3, #20]
 8007ece:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ed6:	6999      	ldr	r1, [r3, #24]
 8007ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	ea40 0301 	orr.w	r3, r0, r1
 8007ee2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	4b8f      	ldr	r3, [pc, #572]	; (8008128 <UART_SetConfig+0x2cc>)
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d005      	beq.n	8007efc <UART_SetConfig+0xa0>
 8007ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	4b8d      	ldr	r3, [pc, #564]	; (800812c <UART_SetConfig+0x2d0>)
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d104      	bne.n	8007f06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007efc:	f7fc fe7c 	bl	8004bf8 <HAL_RCC_GetPCLK2Freq>
 8007f00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007f04:	e003      	b.n	8007f0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f06:	f7fc fe63 	bl	8004bd0 <HAL_RCC_GetPCLK1Freq>
 8007f0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f12:	69db      	ldr	r3, [r3, #28]
 8007f14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f18:	f040 810c 	bne.w	8008134 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f20:	2200      	movs	r2, #0
 8007f22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007f26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007f2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007f2e:	4622      	mov	r2, r4
 8007f30:	462b      	mov	r3, r5
 8007f32:	1891      	adds	r1, r2, r2
 8007f34:	65b9      	str	r1, [r7, #88]	; 0x58
 8007f36:	415b      	adcs	r3, r3
 8007f38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007f3e:	4621      	mov	r1, r4
 8007f40:	eb12 0801 	adds.w	r8, r2, r1
 8007f44:	4629      	mov	r1, r5
 8007f46:	eb43 0901 	adc.w	r9, r3, r1
 8007f4a:	f04f 0200 	mov.w	r2, #0
 8007f4e:	f04f 0300 	mov.w	r3, #0
 8007f52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f5e:	4690      	mov	r8, r2
 8007f60:	4699      	mov	r9, r3
 8007f62:	4623      	mov	r3, r4
 8007f64:	eb18 0303 	adds.w	r3, r8, r3
 8007f68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f6c:	462b      	mov	r3, r5
 8007f6e:	eb49 0303 	adc.w	r3, r9, r3
 8007f72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007f82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007f86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	18db      	adds	r3, r3, r3
 8007f8e:	653b      	str	r3, [r7, #80]	; 0x50
 8007f90:	4613      	mov	r3, r2
 8007f92:	eb42 0303 	adc.w	r3, r2, r3
 8007f96:	657b      	str	r3, [r7, #84]	; 0x54
 8007f98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007f9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007fa0:	f7f8 fe42 	bl	8000c28 <__aeabi_uldivmod>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	4b61      	ldr	r3, [pc, #388]	; (8008130 <UART_SetConfig+0x2d4>)
 8007faa:	fba3 2302 	umull	r2, r3, r3, r2
 8007fae:	095b      	lsrs	r3, r3, #5
 8007fb0:	011c      	lsls	r4, r3, #4
 8007fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007fbc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007fc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007fc4:	4642      	mov	r2, r8
 8007fc6:	464b      	mov	r3, r9
 8007fc8:	1891      	adds	r1, r2, r2
 8007fca:	64b9      	str	r1, [r7, #72]	; 0x48
 8007fcc:	415b      	adcs	r3, r3
 8007fce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007fd4:	4641      	mov	r1, r8
 8007fd6:	eb12 0a01 	adds.w	sl, r2, r1
 8007fda:	4649      	mov	r1, r9
 8007fdc:	eb43 0b01 	adc.w	fp, r3, r1
 8007fe0:	f04f 0200 	mov.w	r2, #0
 8007fe4:	f04f 0300 	mov.w	r3, #0
 8007fe8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007fec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ff0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ff4:	4692      	mov	sl, r2
 8007ff6:	469b      	mov	fp, r3
 8007ff8:	4643      	mov	r3, r8
 8007ffa:	eb1a 0303 	adds.w	r3, sl, r3
 8007ffe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008002:	464b      	mov	r3, r9
 8008004:	eb4b 0303 	adc.w	r3, fp, r3
 8008008:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800800c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008018:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800801c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008020:	460b      	mov	r3, r1
 8008022:	18db      	adds	r3, r3, r3
 8008024:	643b      	str	r3, [r7, #64]	; 0x40
 8008026:	4613      	mov	r3, r2
 8008028:	eb42 0303 	adc.w	r3, r2, r3
 800802c:	647b      	str	r3, [r7, #68]	; 0x44
 800802e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008032:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008036:	f7f8 fdf7 	bl	8000c28 <__aeabi_uldivmod>
 800803a:	4602      	mov	r2, r0
 800803c:	460b      	mov	r3, r1
 800803e:	4611      	mov	r1, r2
 8008040:	4b3b      	ldr	r3, [pc, #236]	; (8008130 <UART_SetConfig+0x2d4>)
 8008042:	fba3 2301 	umull	r2, r3, r3, r1
 8008046:	095b      	lsrs	r3, r3, #5
 8008048:	2264      	movs	r2, #100	; 0x64
 800804a:	fb02 f303 	mul.w	r3, r2, r3
 800804e:	1acb      	subs	r3, r1, r3
 8008050:	00db      	lsls	r3, r3, #3
 8008052:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008056:	4b36      	ldr	r3, [pc, #216]	; (8008130 <UART_SetConfig+0x2d4>)
 8008058:	fba3 2302 	umull	r2, r3, r3, r2
 800805c:	095b      	lsrs	r3, r3, #5
 800805e:	005b      	lsls	r3, r3, #1
 8008060:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008064:	441c      	add	r4, r3
 8008066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800806a:	2200      	movs	r2, #0
 800806c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008070:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008074:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008078:	4642      	mov	r2, r8
 800807a:	464b      	mov	r3, r9
 800807c:	1891      	adds	r1, r2, r2
 800807e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008080:	415b      	adcs	r3, r3
 8008082:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008084:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008088:	4641      	mov	r1, r8
 800808a:	1851      	adds	r1, r2, r1
 800808c:	6339      	str	r1, [r7, #48]	; 0x30
 800808e:	4649      	mov	r1, r9
 8008090:	414b      	adcs	r3, r1
 8008092:	637b      	str	r3, [r7, #52]	; 0x34
 8008094:	f04f 0200 	mov.w	r2, #0
 8008098:	f04f 0300 	mov.w	r3, #0
 800809c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80080a0:	4659      	mov	r1, fp
 80080a2:	00cb      	lsls	r3, r1, #3
 80080a4:	4651      	mov	r1, sl
 80080a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080aa:	4651      	mov	r1, sl
 80080ac:	00ca      	lsls	r2, r1, #3
 80080ae:	4610      	mov	r0, r2
 80080b0:	4619      	mov	r1, r3
 80080b2:	4603      	mov	r3, r0
 80080b4:	4642      	mov	r2, r8
 80080b6:	189b      	adds	r3, r3, r2
 80080b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80080bc:	464b      	mov	r3, r9
 80080be:	460a      	mov	r2, r1
 80080c0:	eb42 0303 	adc.w	r3, r2, r3
 80080c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80080c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80080d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80080d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80080dc:	460b      	mov	r3, r1
 80080de:	18db      	adds	r3, r3, r3
 80080e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80080e2:	4613      	mov	r3, r2
 80080e4:	eb42 0303 	adc.w	r3, r2, r3
 80080e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80080ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80080f2:	f7f8 fd99 	bl	8000c28 <__aeabi_uldivmod>
 80080f6:	4602      	mov	r2, r0
 80080f8:	460b      	mov	r3, r1
 80080fa:	4b0d      	ldr	r3, [pc, #52]	; (8008130 <UART_SetConfig+0x2d4>)
 80080fc:	fba3 1302 	umull	r1, r3, r3, r2
 8008100:	095b      	lsrs	r3, r3, #5
 8008102:	2164      	movs	r1, #100	; 0x64
 8008104:	fb01 f303 	mul.w	r3, r1, r3
 8008108:	1ad3      	subs	r3, r2, r3
 800810a:	00db      	lsls	r3, r3, #3
 800810c:	3332      	adds	r3, #50	; 0x32
 800810e:	4a08      	ldr	r2, [pc, #32]	; (8008130 <UART_SetConfig+0x2d4>)
 8008110:	fba2 2303 	umull	r2, r3, r2, r3
 8008114:	095b      	lsrs	r3, r3, #5
 8008116:	f003 0207 	and.w	r2, r3, #7
 800811a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4422      	add	r2, r4
 8008122:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008124:	e106      	b.n	8008334 <UART_SetConfig+0x4d8>
 8008126:	bf00      	nop
 8008128:	40011000 	.word	0x40011000
 800812c:	40011400 	.word	0x40011400
 8008130:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008134:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008138:	2200      	movs	r2, #0
 800813a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800813e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008142:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008146:	4642      	mov	r2, r8
 8008148:	464b      	mov	r3, r9
 800814a:	1891      	adds	r1, r2, r2
 800814c:	6239      	str	r1, [r7, #32]
 800814e:	415b      	adcs	r3, r3
 8008150:	627b      	str	r3, [r7, #36]	; 0x24
 8008152:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008156:	4641      	mov	r1, r8
 8008158:	1854      	adds	r4, r2, r1
 800815a:	4649      	mov	r1, r9
 800815c:	eb43 0501 	adc.w	r5, r3, r1
 8008160:	f04f 0200 	mov.w	r2, #0
 8008164:	f04f 0300 	mov.w	r3, #0
 8008168:	00eb      	lsls	r3, r5, #3
 800816a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800816e:	00e2      	lsls	r2, r4, #3
 8008170:	4614      	mov	r4, r2
 8008172:	461d      	mov	r5, r3
 8008174:	4643      	mov	r3, r8
 8008176:	18e3      	adds	r3, r4, r3
 8008178:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800817c:	464b      	mov	r3, r9
 800817e:	eb45 0303 	adc.w	r3, r5, r3
 8008182:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008192:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008196:	f04f 0200 	mov.w	r2, #0
 800819a:	f04f 0300 	mov.w	r3, #0
 800819e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80081a2:	4629      	mov	r1, r5
 80081a4:	008b      	lsls	r3, r1, #2
 80081a6:	4621      	mov	r1, r4
 80081a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081ac:	4621      	mov	r1, r4
 80081ae:	008a      	lsls	r2, r1, #2
 80081b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80081b4:	f7f8 fd38 	bl	8000c28 <__aeabi_uldivmod>
 80081b8:	4602      	mov	r2, r0
 80081ba:	460b      	mov	r3, r1
 80081bc:	4b60      	ldr	r3, [pc, #384]	; (8008340 <UART_SetConfig+0x4e4>)
 80081be:	fba3 2302 	umull	r2, r3, r3, r2
 80081c2:	095b      	lsrs	r3, r3, #5
 80081c4:	011c      	lsls	r4, r3, #4
 80081c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081ca:	2200      	movs	r2, #0
 80081cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80081d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80081d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80081d8:	4642      	mov	r2, r8
 80081da:	464b      	mov	r3, r9
 80081dc:	1891      	adds	r1, r2, r2
 80081de:	61b9      	str	r1, [r7, #24]
 80081e0:	415b      	adcs	r3, r3
 80081e2:	61fb      	str	r3, [r7, #28]
 80081e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80081e8:	4641      	mov	r1, r8
 80081ea:	1851      	adds	r1, r2, r1
 80081ec:	6139      	str	r1, [r7, #16]
 80081ee:	4649      	mov	r1, r9
 80081f0:	414b      	adcs	r3, r1
 80081f2:	617b      	str	r3, [r7, #20]
 80081f4:	f04f 0200 	mov.w	r2, #0
 80081f8:	f04f 0300 	mov.w	r3, #0
 80081fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008200:	4659      	mov	r1, fp
 8008202:	00cb      	lsls	r3, r1, #3
 8008204:	4651      	mov	r1, sl
 8008206:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800820a:	4651      	mov	r1, sl
 800820c:	00ca      	lsls	r2, r1, #3
 800820e:	4610      	mov	r0, r2
 8008210:	4619      	mov	r1, r3
 8008212:	4603      	mov	r3, r0
 8008214:	4642      	mov	r2, r8
 8008216:	189b      	adds	r3, r3, r2
 8008218:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800821c:	464b      	mov	r3, r9
 800821e:	460a      	mov	r2, r1
 8008220:	eb42 0303 	adc.w	r3, r2, r3
 8008224:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	67bb      	str	r3, [r7, #120]	; 0x78
 8008232:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008234:	f04f 0200 	mov.w	r2, #0
 8008238:	f04f 0300 	mov.w	r3, #0
 800823c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008240:	4649      	mov	r1, r9
 8008242:	008b      	lsls	r3, r1, #2
 8008244:	4641      	mov	r1, r8
 8008246:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800824a:	4641      	mov	r1, r8
 800824c:	008a      	lsls	r2, r1, #2
 800824e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008252:	f7f8 fce9 	bl	8000c28 <__aeabi_uldivmod>
 8008256:	4602      	mov	r2, r0
 8008258:	460b      	mov	r3, r1
 800825a:	4611      	mov	r1, r2
 800825c:	4b38      	ldr	r3, [pc, #224]	; (8008340 <UART_SetConfig+0x4e4>)
 800825e:	fba3 2301 	umull	r2, r3, r3, r1
 8008262:	095b      	lsrs	r3, r3, #5
 8008264:	2264      	movs	r2, #100	; 0x64
 8008266:	fb02 f303 	mul.w	r3, r2, r3
 800826a:	1acb      	subs	r3, r1, r3
 800826c:	011b      	lsls	r3, r3, #4
 800826e:	3332      	adds	r3, #50	; 0x32
 8008270:	4a33      	ldr	r2, [pc, #204]	; (8008340 <UART_SetConfig+0x4e4>)
 8008272:	fba2 2303 	umull	r2, r3, r2, r3
 8008276:	095b      	lsrs	r3, r3, #5
 8008278:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800827c:	441c      	add	r4, r3
 800827e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008282:	2200      	movs	r2, #0
 8008284:	673b      	str	r3, [r7, #112]	; 0x70
 8008286:	677a      	str	r2, [r7, #116]	; 0x74
 8008288:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800828c:	4642      	mov	r2, r8
 800828e:	464b      	mov	r3, r9
 8008290:	1891      	adds	r1, r2, r2
 8008292:	60b9      	str	r1, [r7, #8]
 8008294:	415b      	adcs	r3, r3
 8008296:	60fb      	str	r3, [r7, #12]
 8008298:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800829c:	4641      	mov	r1, r8
 800829e:	1851      	adds	r1, r2, r1
 80082a0:	6039      	str	r1, [r7, #0]
 80082a2:	4649      	mov	r1, r9
 80082a4:	414b      	adcs	r3, r1
 80082a6:	607b      	str	r3, [r7, #4]
 80082a8:	f04f 0200 	mov.w	r2, #0
 80082ac:	f04f 0300 	mov.w	r3, #0
 80082b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80082b4:	4659      	mov	r1, fp
 80082b6:	00cb      	lsls	r3, r1, #3
 80082b8:	4651      	mov	r1, sl
 80082ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082be:	4651      	mov	r1, sl
 80082c0:	00ca      	lsls	r2, r1, #3
 80082c2:	4610      	mov	r0, r2
 80082c4:	4619      	mov	r1, r3
 80082c6:	4603      	mov	r3, r0
 80082c8:	4642      	mov	r2, r8
 80082ca:	189b      	adds	r3, r3, r2
 80082cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80082ce:	464b      	mov	r3, r9
 80082d0:	460a      	mov	r2, r1
 80082d2:	eb42 0303 	adc.w	r3, r2, r3
 80082d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	663b      	str	r3, [r7, #96]	; 0x60
 80082e2:	667a      	str	r2, [r7, #100]	; 0x64
 80082e4:	f04f 0200 	mov.w	r2, #0
 80082e8:	f04f 0300 	mov.w	r3, #0
 80082ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80082f0:	4649      	mov	r1, r9
 80082f2:	008b      	lsls	r3, r1, #2
 80082f4:	4641      	mov	r1, r8
 80082f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082fa:	4641      	mov	r1, r8
 80082fc:	008a      	lsls	r2, r1, #2
 80082fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008302:	f7f8 fc91 	bl	8000c28 <__aeabi_uldivmod>
 8008306:	4602      	mov	r2, r0
 8008308:	460b      	mov	r3, r1
 800830a:	4b0d      	ldr	r3, [pc, #52]	; (8008340 <UART_SetConfig+0x4e4>)
 800830c:	fba3 1302 	umull	r1, r3, r3, r2
 8008310:	095b      	lsrs	r3, r3, #5
 8008312:	2164      	movs	r1, #100	; 0x64
 8008314:	fb01 f303 	mul.w	r3, r1, r3
 8008318:	1ad3      	subs	r3, r2, r3
 800831a:	011b      	lsls	r3, r3, #4
 800831c:	3332      	adds	r3, #50	; 0x32
 800831e:	4a08      	ldr	r2, [pc, #32]	; (8008340 <UART_SetConfig+0x4e4>)
 8008320:	fba2 2303 	umull	r2, r3, r2, r3
 8008324:	095b      	lsrs	r3, r3, #5
 8008326:	f003 020f 	and.w	r2, r3, #15
 800832a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4422      	add	r2, r4
 8008332:	609a      	str	r2, [r3, #8]
}
 8008334:	bf00      	nop
 8008336:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800833a:	46bd      	mov	sp, r7
 800833c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008340:	51eb851f 	.word	0x51eb851f

08008344 <__cvt>:
 8008344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008348:	ec55 4b10 	vmov	r4, r5, d0
 800834c:	2d00      	cmp	r5, #0
 800834e:	460e      	mov	r6, r1
 8008350:	4619      	mov	r1, r3
 8008352:	462b      	mov	r3, r5
 8008354:	bfbb      	ittet	lt
 8008356:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800835a:	461d      	movlt	r5, r3
 800835c:	2300      	movge	r3, #0
 800835e:	232d      	movlt	r3, #45	; 0x2d
 8008360:	700b      	strb	r3, [r1, #0]
 8008362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008364:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008368:	4691      	mov	r9, r2
 800836a:	f023 0820 	bic.w	r8, r3, #32
 800836e:	bfbc      	itt	lt
 8008370:	4622      	movlt	r2, r4
 8008372:	4614      	movlt	r4, r2
 8008374:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008378:	d005      	beq.n	8008386 <__cvt+0x42>
 800837a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800837e:	d100      	bne.n	8008382 <__cvt+0x3e>
 8008380:	3601      	adds	r6, #1
 8008382:	2102      	movs	r1, #2
 8008384:	e000      	b.n	8008388 <__cvt+0x44>
 8008386:	2103      	movs	r1, #3
 8008388:	ab03      	add	r3, sp, #12
 800838a:	9301      	str	r3, [sp, #4]
 800838c:	ab02      	add	r3, sp, #8
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	ec45 4b10 	vmov	d0, r4, r5
 8008394:	4653      	mov	r3, sl
 8008396:	4632      	mov	r2, r6
 8008398:	f000 fdbe 	bl	8008f18 <_dtoa_r>
 800839c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80083a0:	4607      	mov	r7, r0
 80083a2:	d102      	bne.n	80083aa <__cvt+0x66>
 80083a4:	f019 0f01 	tst.w	r9, #1
 80083a8:	d022      	beq.n	80083f0 <__cvt+0xac>
 80083aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80083ae:	eb07 0906 	add.w	r9, r7, r6
 80083b2:	d110      	bne.n	80083d6 <__cvt+0x92>
 80083b4:	783b      	ldrb	r3, [r7, #0]
 80083b6:	2b30      	cmp	r3, #48	; 0x30
 80083b8:	d10a      	bne.n	80083d0 <__cvt+0x8c>
 80083ba:	2200      	movs	r2, #0
 80083bc:	2300      	movs	r3, #0
 80083be:	4620      	mov	r0, r4
 80083c0:	4629      	mov	r1, r5
 80083c2:	f7f8 fba1 	bl	8000b08 <__aeabi_dcmpeq>
 80083c6:	b918      	cbnz	r0, 80083d0 <__cvt+0x8c>
 80083c8:	f1c6 0601 	rsb	r6, r6, #1
 80083cc:	f8ca 6000 	str.w	r6, [sl]
 80083d0:	f8da 3000 	ldr.w	r3, [sl]
 80083d4:	4499      	add	r9, r3
 80083d6:	2200      	movs	r2, #0
 80083d8:	2300      	movs	r3, #0
 80083da:	4620      	mov	r0, r4
 80083dc:	4629      	mov	r1, r5
 80083de:	f7f8 fb93 	bl	8000b08 <__aeabi_dcmpeq>
 80083e2:	b108      	cbz	r0, 80083e8 <__cvt+0xa4>
 80083e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80083e8:	2230      	movs	r2, #48	; 0x30
 80083ea:	9b03      	ldr	r3, [sp, #12]
 80083ec:	454b      	cmp	r3, r9
 80083ee:	d307      	bcc.n	8008400 <__cvt+0xbc>
 80083f0:	9b03      	ldr	r3, [sp, #12]
 80083f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083f4:	1bdb      	subs	r3, r3, r7
 80083f6:	4638      	mov	r0, r7
 80083f8:	6013      	str	r3, [r2, #0]
 80083fa:	b004      	add	sp, #16
 80083fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008400:	1c59      	adds	r1, r3, #1
 8008402:	9103      	str	r1, [sp, #12]
 8008404:	701a      	strb	r2, [r3, #0]
 8008406:	e7f0      	b.n	80083ea <__cvt+0xa6>

08008408 <__exponent>:
 8008408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800840a:	4603      	mov	r3, r0
 800840c:	2900      	cmp	r1, #0
 800840e:	bfb8      	it	lt
 8008410:	4249      	neglt	r1, r1
 8008412:	f803 2b02 	strb.w	r2, [r3], #2
 8008416:	bfb4      	ite	lt
 8008418:	222d      	movlt	r2, #45	; 0x2d
 800841a:	222b      	movge	r2, #43	; 0x2b
 800841c:	2909      	cmp	r1, #9
 800841e:	7042      	strb	r2, [r0, #1]
 8008420:	dd2a      	ble.n	8008478 <__exponent+0x70>
 8008422:	f10d 0207 	add.w	r2, sp, #7
 8008426:	4617      	mov	r7, r2
 8008428:	260a      	movs	r6, #10
 800842a:	4694      	mov	ip, r2
 800842c:	fb91 f5f6 	sdiv	r5, r1, r6
 8008430:	fb06 1415 	mls	r4, r6, r5, r1
 8008434:	3430      	adds	r4, #48	; 0x30
 8008436:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800843a:	460c      	mov	r4, r1
 800843c:	2c63      	cmp	r4, #99	; 0x63
 800843e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8008442:	4629      	mov	r1, r5
 8008444:	dcf1      	bgt.n	800842a <__exponent+0x22>
 8008446:	3130      	adds	r1, #48	; 0x30
 8008448:	f1ac 0402 	sub.w	r4, ip, #2
 800844c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008450:	1c41      	adds	r1, r0, #1
 8008452:	4622      	mov	r2, r4
 8008454:	42ba      	cmp	r2, r7
 8008456:	d30a      	bcc.n	800846e <__exponent+0x66>
 8008458:	f10d 0209 	add.w	r2, sp, #9
 800845c:	eba2 020c 	sub.w	r2, r2, ip
 8008460:	42bc      	cmp	r4, r7
 8008462:	bf88      	it	hi
 8008464:	2200      	movhi	r2, #0
 8008466:	4413      	add	r3, r2
 8008468:	1a18      	subs	r0, r3, r0
 800846a:	b003      	add	sp, #12
 800846c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800846e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008472:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008476:	e7ed      	b.n	8008454 <__exponent+0x4c>
 8008478:	2330      	movs	r3, #48	; 0x30
 800847a:	3130      	adds	r1, #48	; 0x30
 800847c:	7083      	strb	r3, [r0, #2]
 800847e:	70c1      	strb	r1, [r0, #3]
 8008480:	1d03      	adds	r3, r0, #4
 8008482:	e7f1      	b.n	8008468 <__exponent+0x60>

08008484 <_printf_float>:
 8008484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008488:	ed2d 8b02 	vpush	{d8}
 800848c:	b08d      	sub	sp, #52	; 0x34
 800848e:	460c      	mov	r4, r1
 8008490:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008494:	4616      	mov	r6, r2
 8008496:	461f      	mov	r7, r3
 8008498:	4605      	mov	r5, r0
 800849a:	f000 fc83 	bl	8008da4 <_localeconv_r>
 800849e:	f8d0 a000 	ldr.w	sl, [r0]
 80084a2:	4650      	mov	r0, sl
 80084a4:	f7f7 ff04 	bl	80002b0 <strlen>
 80084a8:	2300      	movs	r3, #0
 80084aa:	930a      	str	r3, [sp, #40]	; 0x28
 80084ac:	6823      	ldr	r3, [r4, #0]
 80084ae:	9305      	str	r3, [sp, #20]
 80084b0:	f8d8 3000 	ldr.w	r3, [r8]
 80084b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80084b8:	3307      	adds	r3, #7
 80084ba:	f023 0307 	bic.w	r3, r3, #7
 80084be:	f103 0208 	add.w	r2, r3, #8
 80084c2:	f8c8 2000 	str.w	r2, [r8]
 80084c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80084ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80084ce:	9307      	str	r3, [sp, #28]
 80084d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80084d4:	ee08 0a10 	vmov	s16, r0
 80084d8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80084dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084e0:	4b9e      	ldr	r3, [pc, #632]	; (800875c <_printf_float+0x2d8>)
 80084e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084e6:	f7f8 fb41 	bl	8000b6c <__aeabi_dcmpun>
 80084ea:	bb88      	cbnz	r0, 8008550 <_printf_float+0xcc>
 80084ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084f0:	4b9a      	ldr	r3, [pc, #616]	; (800875c <_printf_float+0x2d8>)
 80084f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084f6:	f7f8 fb1b 	bl	8000b30 <__aeabi_dcmple>
 80084fa:	bb48      	cbnz	r0, 8008550 <_printf_float+0xcc>
 80084fc:	2200      	movs	r2, #0
 80084fe:	2300      	movs	r3, #0
 8008500:	4640      	mov	r0, r8
 8008502:	4649      	mov	r1, r9
 8008504:	f7f8 fb0a 	bl	8000b1c <__aeabi_dcmplt>
 8008508:	b110      	cbz	r0, 8008510 <_printf_float+0x8c>
 800850a:	232d      	movs	r3, #45	; 0x2d
 800850c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008510:	4a93      	ldr	r2, [pc, #588]	; (8008760 <_printf_float+0x2dc>)
 8008512:	4b94      	ldr	r3, [pc, #592]	; (8008764 <_printf_float+0x2e0>)
 8008514:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008518:	bf94      	ite	ls
 800851a:	4690      	movls	r8, r2
 800851c:	4698      	movhi	r8, r3
 800851e:	2303      	movs	r3, #3
 8008520:	6123      	str	r3, [r4, #16]
 8008522:	9b05      	ldr	r3, [sp, #20]
 8008524:	f023 0304 	bic.w	r3, r3, #4
 8008528:	6023      	str	r3, [r4, #0]
 800852a:	f04f 0900 	mov.w	r9, #0
 800852e:	9700      	str	r7, [sp, #0]
 8008530:	4633      	mov	r3, r6
 8008532:	aa0b      	add	r2, sp, #44	; 0x2c
 8008534:	4621      	mov	r1, r4
 8008536:	4628      	mov	r0, r5
 8008538:	f000 f9da 	bl	80088f0 <_printf_common>
 800853c:	3001      	adds	r0, #1
 800853e:	f040 8090 	bne.w	8008662 <_printf_float+0x1de>
 8008542:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008546:	b00d      	add	sp, #52	; 0x34
 8008548:	ecbd 8b02 	vpop	{d8}
 800854c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008550:	4642      	mov	r2, r8
 8008552:	464b      	mov	r3, r9
 8008554:	4640      	mov	r0, r8
 8008556:	4649      	mov	r1, r9
 8008558:	f7f8 fb08 	bl	8000b6c <__aeabi_dcmpun>
 800855c:	b140      	cbz	r0, 8008570 <_printf_float+0xec>
 800855e:	464b      	mov	r3, r9
 8008560:	2b00      	cmp	r3, #0
 8008562:	bfbc      	itt	lt
 8008564:	232d      	movlt	r3, #45	; 0x2d
 8008566:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800856a:	4a7f      	ldr	r2, [pc, #508]	; (8008768 <_printf_float+0x2e4>)
 800856c:	4b7f      	ldr	r3, [pc, #508]	; (800876c <_printf_float+0x2e8>)
 800856e:	e7d1      	b.n	8008514 <_printf_float+0x90>
 8008570:	6863      	ldr	r3, [r4, #4]
 8008572:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008576:	9206      	str	r2, [sp, #24]
 8008578:	1c5a      	adds	r2, r3, #1
 800857a:	d13f      	bne.n	80085fc <_printf_float+0x178>
 800857c:	2306      	movs	r3, #6
 800857e:	6063      	str	r3, [r4, #4]
 8008580:	9b05      	ldr	r3, [sp, #20]
 8008582:	6861      	ldr	r1, [r4, #4]
 8008584:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008588:	2300      	movs	r3, #0
 800858a:	9303      	str	r3, [sp, #12]
 800858c:	ab0a      	add	r3, sp, #40	; 0x28
 800858e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008592:	ab09      	add	r3, sp, #36	; 0x24
 8008594:	ec49 8b10 	vmov	d0, r8, r9
 8008598:	9300      	str	r3, [sp, #0]
 800859a:	6022      	str	r2, [r4, #0]
 800859c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80085a0:	4628      	mov	r0, r5
 80085a2:	f7ff fecf 	bl	8008344 <__cvt>
 80085a6:	9b06      	ldr	r3, [sp, #24]
 80085a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085aa:	2b47      	cmp	r3, #71	; 0x47
 80085ac:	4680      	mov	r8, r0
 80085ae:	d108      	bne.n	80085c2 <_printf_float+0x13e>
 80085b0:	1cc8      	adds	r0, r1, #3
 80085b2:	db02      	blt.n	80085ba <_printf_float+0x136>
 80085b4:	6863      	ldr	r3, [r4, #4]
 80085b6:	4299      	cmp	r1, r3
 80085b8:	dd41      	ble.n	800863e <_printf_float+0x1ba>
 80085ba:	f1ab 0302 	sub.w	r3, fp, #2
 80085be:	fa5f fb83 	uxtb.w	fp, r3
 80085c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80085c6:	d820      	bhi.n	800860a <_printf_float+0x186>
 80085c8:	3901      	subs	r1, #1
 80085ca:	465a      	mov	r2, fp
 80085cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80085d0:	9109      	str	r1, [sp, #36]	; 0x24
 80085d2:	f7ff ff19 	bl	8008408 <__exponent>
 80085d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085d8:	1813      	adds	r3, r2, r0
 80085da:	2a01      	cmp	r2, #1
 80085dc:	4681      	mov	r9, r0
 80085de:	6123      	str	r3, [r4, #16]
 80085e0:	dc02      	bgt.n	80085e8 <_printf_float+0x164>
 80085e2:	6822      	ldr	r2, [r4, #0]
 80085e4:	07d2      	lsls	r2, r2, #31
 80085e6:	d501      	bpl.n	80085ec <_printf_float+0x168>
 80085e8:	3301      	adds	r3, #1
 80085ea:	6123      	str	r3, [r4, #16]
 80085ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d09c      	beq.n	800852e <_printf_float+0xaa>
 80085f4:	232d      	movs	r3, #45	; 0x2d
 80085f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085fa:	e798      	b.n	800852e <_printf_float+0xaa>
 80085fc:	9a06      	ldr	r2, [sp, #24]
 80085fe:	2a47      	cmp	r2, #71	; 0x47
 8008600:	d1be      	bne.n	8008580 <_printf_float+0xfc>
 8008602:	2b00      	cmp	r3, #0
 8008604:	d1bc      	bne.n	8008580 <_printf_float+0xfc>
 8008606:	2301      	movs	r3, #1
 8008608:	e7b9      	b.n	800857e <_printf_float+0xfa>
 800860a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800860e:	d118      	bne.n	8008642 <_printf_float+0x1be>
 8008610:	2900      	cmp	r1, #0
 8008612:	6863      	ldr	r3, [r4, #4]
 8008614:	dd0b      	ble.n	800862e <_printf_float+0x1aa>
 8008616:	6121      	str	r1, [r4, #16]
 8008618:	b913      	cbnz	r3, 8008620 <_printf_float+0x19c>
 800861a:	6822      	ldr	r2, [r4, #0]
 800861c:	07d0      	lsls	r0, r2, #31
 800861e:	d502      	bpl.n	8008626 <_printf_float+0x1a2>
 8008620:	3301      	adds	r3, #1
 8008622:	440b      	add	r3, r1
 8008624:	6123      	str	r3, [r4, #16]
 8008626:	65a1      	str	r1, [r4, #88]	; 0x58
 8008628:	f04f 0900 	mov.w	r9, #0
 800862c:	e7de      	b.n	80085ec <_printf_float+0x168>
 800862e:	b913      	cbnz	r3, 8008636 <_printf_float+0x1b2>
 8008630:	6822      	ldr	r2, [r4, #0]
 8008632:	07d2      	lsls	r2, r2, #31
 8008634:	d501      	bpl.n	800863a <_printf_float+0x1b6>
 8008636:	3302      	adds	r3, #2
 8008638:	e7f4      	b.n	8008624 <_printf_float+0x1a0>
 800863a:	2301      	movs	r3, #1
 800863c:	e7f2      	b.n	8008624 <_printf_float+0x1a0>
 800863e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008644:	4299      	cmp	r1, r3
 8008646:	db05      	blt.n	8008654 <_printf_float+0x1d0>
 8008648:	6823      	ldr	r3, [r4, #0]
 800864a:	6121      	str	r1, [r4, #16]
 800864c:	07d8      	lsls	r0, r3, #31
 800864e:	d5ea      	bpl.n	8008626 <_printf_float+0x1a2>
 8008650:	1c4b      	adds	r3, r1, #1
 8008652:	e7e7      	b.n	8008624 <_printf_float+0x1a0>
 8008654:	2900      	cmp	r1, #0
 8008656:	bfd4      	ite	le
 8008658:	f1c1 0202 	rsble	r2, r1, #2
 800865c:	2201      	movgt	r2, #1
 800865e:	4413      	add	r3, r2
 8008660:	e7e0      	b.n	8008624 <_printf_float+0x1a0>
 8008662:	6823      	ldr	r3, [r4, #0]
 8008664:	055a      	lsls	r2, r3, #21
 8008666:	d407      	bmi.n	8008678 <_printf_float+0x1f4>
 8008668:	6923      	ldr	r3, [r4, #16]
 800866a:	4642      	mov	r2, r8
 800866c:	4631      	mov	r1, r6
 800866e:	4628      	mov	r0, r5
 8008670:	47b8      	blx	r7
 8008672:	3001      	adds	r0, #1
 8008674:	d12c      	bne.n	80086d0 <_printf_float+0x24c>
 8008676:	e764      	b.n	8008542 <_printf_float+0xbe>
 8008678:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800867c:	f240 80e0 	bls.w	8008840 <_printf_float+0x3bc>
 8008680:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008684:	2200      	movs	r2, #0
 8008686:	2300      	movs	r3, #0
 8008688:	f7f8 fa3e 	bl	8000b08 <__aeabi_dcmpeq>
 800868c:	2800      	cmp	r0, #0
 800868e:	d034      	beq.n	80086fa <_printf_float+0x276>
 8008690:	4a37      	ldr	r2, [pc, #220]	; (8008770 <_printf_float+0x2ec>)
 8008692:	2301      	movs	r3, #1
 8008694:	4631      	mov	r1, r6
 8008696:	4628      	mov	r0, r5
 8008698:	47b8      	blx	r7
 800869a:	3001      	adds	r0, #1
 800869c:	f43f af51 	beq.w	8008542 <_printf_float+0xbe>
 80086a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086a4:	429a      	cmp	r2, r3
 80086a6:	db02      	blt.n	80086ae <_printf_float+0x22a>
 80086a8:	6823      	ldr	r3, [r4, #0]
 80086aa:	07d8      	lsls	r0, r3, #31
 80086ac:	d510      	bpl.n	80086d0 <_printf_float+0x24c>
 80086ae:	ee18 3a10 	vmov	r3, s16
 80086b2:	4652      	mov	r2, sl
 80086b4:	4631      	mov	r1, r6
 80086b6:	4628      	mov	r0, r5
 80086b8:	47b8      	blx	r7
 80086ba:	3001      	adds	r0, #1
 80086bc:	f43f af41 	beq.w	8008542 <_printf_float+0xbe>
 80086c0:	f04f 0800 	mov.w	r8, #0
 80086c4:	f104 091a 	add.w	r9, r4, #26
 80086c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086ca:	3b01      	subs	r3, #1
 80086cc:	4543      	cmp	r3, r8
 80086ce:	dc09      	bgt.n	80086e4 <_printf_float+0x260>
 80086d0:	6823      	ldr	r3, [r4, #0]
 80086d2:	079b      	lsls	r3, r3, #30
 80086d4:	f100 8107 	bmi.w	80088e6 <_printf_float+0x462>
 80086d8:	68e0      	ldr	r0, [r4, #12]
 80086da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086dc:	4298      	cmp	r0, r3
 80086de:	bfb8      	it	lt
 80086e0:	4618      	movlt	r0, r3
 80086e2:	e730      	b.n	8008546 <_printf_float+0xc2>
 80086e4:	2301      	movs	r3, #1
 80086e6:	464a      	mov	r2, r9
 80086e8:	4631      	mov	r1, r6
 80086ea:	4628      	mov	r0, r5
 80086ec:	47b8      	blx	r7
 80086ee:	3001      	adds	r0, #1
 80086f0:	f43f af27 	beq.w	8008542 <_printf_float+0xbe>
 80086f4:	f108 0801 	add.w	r8, r8, #1
 80086f8:	e7e6      	b.n	80086c8 <_printf_float+0x244>
 80086fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	dc39      	bgt.n	8008774 <_printf_float+0x2f0>
 8008700:	4a1b      	ldr	r2, [pc, #108]	; (8008770 <_printf_float+0x2ec>)
 8008702:	2301      	movs	r3, #1
 8008704:	4631      	mov	r1, r6
 8008706:	4628      	mov	r0, r5
 8008708:	47b8      	blx	r7
 800870a:	3001      	adds	r0, #1
 800870c:	f43f af19 	beq.w	8008542 <_printf_float+0xbe>
 8008710:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008714:	4313      	orrs	r3, r2
 8008716:	d102      	bne.n	800871e <_printf_float+0x29a>
 8008718:	6823      	ldr	r3, [r4, #0]
 800871a:	07d9      	lsls	r1, r3, #31
 800871c:	d5d8      	bpl.n	80086d0 <_printf_float+0x24c>
 800871e:	ee18 3a10 	vmov	r3, s16
 8008722:	4652      	mov	r2, sl
 8008724:	4631      	mov	r1, r6
 8008726:	4628      	mov	r0, r5
 8008728:	47b8      	blx	r7
 800872a:	3001      	adds	r0, #1
 800872c:	f43f af09 	beq.w	8008542 <_printf_float+0xbe>
 8008730:	f04f 0900 	mov.w	r9, #0
 8008734:	f104 0a1a 	add.w	sl, r4, #26
 8008738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800873a:	425b      	negs	r3, r3
 800873c:	454b      	cmp	r3, r9
 800873e:	dc01      	bgt.n	8008744 <_printf_float+0x2c0>
 8008740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008742:	e792      	b.n	800866a <_printf_float+0x1e6>
 8008744:	2301      	movs	r3, #1
 8008746:	4652      	mov	r2, sl
 8008748:	4631      	mov	r1, r6
 800874a:	4628      	mov	r0, r5
 800874c:	47b8      	blx	r7
 800874e:	3001      	adds	r0, #1
 8008750:	f43f aef7 	beq.w	8008542 <_printf_float+0xbe>
 8008754:	f109 0901 	add.w	r9, r9, #1
 8008758:	e7ee      	b.n	8008738 <_printf_float+0x2b4>
 800875a:	bf00      	nop
 800875c:	7fefffff 	.word	0x7fefffff
 8008760:	0800acf8 	.word	0x0800acf8
 8008764:	0800acfc 	.word	0x0800acfc
 8008768:	0800ad00 	.word	0x0800ad00
 800876c:	0800ad04 	.word	0x0800ad04
 8008770:	0800ad08 	.word	0x0800ad08
 8008774:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008776:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008778:	429a      	cmp	r2, r3
 800877a:	bfa8      	it	ge
 800877c:	461a      	movge	r2, r3
 800877e:	2a00      	cmp	r2, #0
 8008780:	4691      	mov	r9, r2
 8008782:	dc37      	bgt.n	80087f4 <_printf_float+0x370>
 8008784:	f04f 0b00 	mov.w	fp, #0
 8008788:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800878c:	f104 021a 	add.w	r2, r4, #26
 8008790:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008792:	9305      	str	r3, [sp, #20]
 8008794:	eba3 0309 	sub.w	r3, r3, r9
 8008798:	455b      	cmp	r3, fp
 800879a:	dc33      	bgt.n	8008804 <_printf_float+0x380>
 800879c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087a0:	429a      	cmp	r2, r3
 80087a2:	db3b      	blt.n	800881c <_printf_float+0x398>
 80087a4:	6823      	ldr	r3, [r4, #0]
 80087a6:	07da      	lsls	r2, r3, #31
 80087a8:	d438      	bmi.n	800881c <_printf_float+0x398>
 80087aa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80087ae:	eba2 0903 	sub.w	r9, r2, r3
 80087b2:	9b05      	ldr	r3, [sp, #20]
 80087b4:	1ad2      	subs	r2, r2, r3
 80087b6:	4591      	cmp	r9, r2
 80087b8:	bfa8      	it	ge
 80087ba:	4691      	movge	r9, r2
 80087bc:	f1b9 0f00 	cmp.w	r9, #0
 80087c0:	dc35      	bgt.n	800882e <_printf_float+0x3aa>
 80087c2:	f04f 0800 	mov.w	r8, #0
 80087c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80087ca:	f104 0a1a 	add.w	sl, r4, #26
 80087ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087d2:	1a9b      	subs	r3, r3, r2
 80087d4:	eba3 0309 	sub.w	r3, r3, r9
 80087d8:	4543      	cmp	r3, r8
 80087da:	f77f af79 	ble.w	80086d0 <_printf_float+0x24c>
 80087de:	2301      	movs	r3, #1
 80087e0:	4652      	mov	r2, sl
 80087e2:	4631      	mov	r1, r6
 80087e4:	4628      	mov	r0, r5
 80087e6:	47b8      	blx	r7
 80087e8:	3001      	adds	r0, #1
 80087ea:	f43f aeaa 	beq.w	8008542 <_printf_float+0xbe>
 80087ee:	f108 0801 	add.w	r8, r8, #1
 80087f2:	e7ec      	b.n	80087ce <_printf_float+0x34a>
 80087f4:	4613      	mov	r3, r2
 80087f6:	4631      	mov	r1, r6
 80087f8:	4642      	mov	r2, r8
 80087fa:	4628      	mov	r0, r5
 80087fc:	47b8      	blx	r7
 80087fe:	3001      	adds	r0, #1
 8008800:	d1c0      	bne.n	8008784 <_printf_float+0x300>
 8008802:	e69e      	b.n	8008542 <_printf_float+0xbe>
 8008804:	2301      	movs	r3, #1
 8008806:	4631      	mov	r1, r6
 8008808:	4628      	mov	r0, r5
 800880a:	9205      	str	r2, [sp, #20]
 800880c:	47b8      	blx	r7
 800880e:	3001      	adds	r0, #1
 8008810:	f43f ae97 	beq.w	8008542 <_printf_float+0xbe>
 8008814:	9a05      	ldr	r2, [sp, #20]
 8008816:	f10b 0b01 	add.w	fp, fp, #1
 800881a:	e7b9      	b.n	8008790 <_printf_float+0x30c>
 800881c:	ee18 3a10 	vmov	r3, s16
 8008820:	4652      	mov	r2, sl
 8008822:	4631      	mov	r1, r6
 8008824:	4628      	mov	r0, r5
 8008826:	47b8      	blx	r7
 8008828:	3001      	adds	r0, #1
 800882a:	d1be      	bne.n	80087aa <_printf_float+0x326>
 800882c:	e689      	b.n	8008542 <_printf_float+0xbe>
 800882e:	9a05      	ldr	r2, [sp, #20]
 8008830:	464b      	mov	r3, r9
 8008832:	4442      	add	r2, r8
 8008834:	4631      	mov	r1, r6
 8008836:	4628      	mov	r0, r5
 8008838:	47b8      	blx	r7
 800883a:	3001      	adds	r0, #1
 800883c:	d1c1      	bne.n	80087c2 <_printf_float+0x33e>
 800883e:	e680      	b.n	8008542 <_printf_float+0xbe>
 8008840:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008842:	2a01      	cmp	r2, #1
 8008844:	dc01      	bgt.n	800884a <_printf_float+0x3c6>
 8008846:	07db      	lsls	r3, r3, #31
 8008848:	d53a      	bpl.n	80088c0 <_printf_float+0x43c>
 800884a:	2301      	movs	r3, #1
 800884c:	4642      	mov	r2, r8
 800884e:	4631      	mov	r1, r6
 8008850:	4628      	mov	r0, r5
 8008852:	47b8      	blx	r7
 8008854:	3001      	adds	r0, #1
 8008856:	f43f ae74 	beq.w	8008542 <_printf_float+0xbe>
 800885a:	ee18 3a10 	vmov	r3, s16
 800885e:	4652      	mov	r2, sl
 8008860:	4631      	mov	r1, r6
 8008862:	4628      	mov	r0, r5
 8008864:	47b8      	blx	r7
 8008866:	3001      	adds	r0, #1
 8008868:	f43f ae6b 	beq.w	8008542 <_printf_float+0xbe>
 800886c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008870:	2200      	movs	r2, #0
 8008872:	2300      	movs	r3, #0
 8008874:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008878:	f7f8 f946 	bl	8000b08 <__aeabi_dcmpeq>
 800887c:	b9d8      	cbnz	r0, 80088b6 <_printf_float+0x432>
 800887e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008882:	f108 0201 	add.w	r2, r8, #1
 8008886:	4631      	mov	r1, r6
 8008888:	4628      	mov	r0, r5
 800888a:	47b8      	blx	r7
 800888c:	3001      	adds	r0, #1
 800888e:	d10e      	bne.n	80088ae <_printf_float+0x42a>
 8008890:	e657      	b.n	8008542 <_printf_float+0xbe>
 8008892:	2301      	movs	r3, #1
 8008894:	4652      	mov	r2, sl
 8008896:	4631      	mov	r1, r6
 8008898:	4628      	mov	r0, r5
 800889a:	47b8      	blx	r7
 800889c:	3001      	adds	r0, #1
 800889e:	f43f ae50 	beq.w	8008542 <_printf_float+0xbe>
 80088a2:	f108 0801 	add.w	r8, r8, #1
 80088a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088a8:	3b01      	subs	r3, #1
 80088aa:	4543      	cmp	r3, r8
 80088ac:	dcf1      	bgt.n	8008892 <_printf_float+0x40e>
 80088ae:	464b      	mov	r3, r9
 80088b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80088b4:	e6da      	b.n	800866c <_printf_float+0x1e8>
 80088b6:	f04f 0800 	mov.w	r8, #0
 80088ba:	f104 0a1a 	add.w	sl, r4, #26
 80088be:	e7f2      	b.n	80088a6 <_printf_float+0x422>
 80088c0:	2301      	movs	r3, #1
 80088c2:	4642      	mov	r2, r8
 80088c4:	e7df      	b.n	8008886 <_printf_float+0x402>
 80088c6:	2301      	movs	r3, #1
 80088c8:	464a      	mov	r2, r9
 80088ca:	4631      	mov	r1, r6
 80088cc:	4628      	mov	r0, r5
 80088ce:	47b8      	blx	r7
 80088d0:	3001      	adds	r0, #1
 80088d2:	f43f ae36 	beq.w	8008542 <_printf_float+0xbe>
 80088d6:	f108 0801 	add.w	r8, r8, #1
 80088da:	68e3      	ldr	r3, [r4, #12]
 80088dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80088de:	1a5b      	subs	r3, r3, r1
 80088e0:	4543      	cmp	r3, r8
 80088e2:	dcf0      	bgt.n	80088c6 <_printf_float+0x442>
 80088e4:	e6f8      	b.n	80086d8 <_printf_float+0x254>
 80088e6:	f04f 0800 	mov.w	r8, #0
 80088ea:	f104 0919 	add.w	r9, r4, #25
 80088ee:	e7f4      	b.n	80088da <_printf_float+0x456>

080088f0 <_printf_common>:
 80088f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088f4:	4616      	mov	r6, r2
 80088f6:	4699      	mov	r9, r3
 80088f8:	688a      	ldr	r2, [r1, #8]
 80088fa:	690b      	ldr	r3, [r1, #16]
 80088fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008900:	4293      	cmp	r3, r2
 8008902:	bfb8      	it	lt
 8008904:	4613      	movlt	r3, r2
 8008906:	6033      	str	r3, [r6, #0]
 8008908:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800890c:	4607      	mov	r7, r0
 800890e:	460c      	mov	r4, r1
 8008910:	b10a      	cbz	r2, 8008916 <_printf_common+0x26>
 8008912:	3301      	adds	r3, #1
 8008914:	6033      	str	r3, [r6, #0]
 8008916:	6823      	ldr	r3, [r4, #0]
 8008918:	0699      	lsls	r1, r3, #26
 800891a:	bf42      	ittt	mi
 800891c:	6833      	ldrmi	r3, [r6, #0]
 800891e:	3302      	addmi	r3, #2
 8008920:	6033      	strmi	r3, [r6, #0]
 8008922:	6825      	ldr	r5, [r4, #0]
 8008924:	f015 0506 	ands.w	r5, r5, #6
 8008928:	d106      	bne.n	8008938 <_printf_common+0x48>
 800892a:	f104 0a19 	add.w	sl, r4, #25
 800892e:	68e3      	ldr	r3, [r4, #12]
 8008930:	6832      	ldr	r2, [r6, #0]
 8008932:	1a9b      	subs	r3, r3, r2
 8008934:	42ab      	cmp	r3, r5
 8008936:	dc26      	bgt.n	8008986 <_printf_common+0x96>
 8008938:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800893c:	1e13      	subs	r3, r2, #0
 800893e:	6822      	ldr	r2, [r4, #0]
 8008940:	bf18      	it	ne
 8008942:	2301      	movne	r3, #1
 8008944:	0692      	lsls	r2, r2, #26
 8008946:	d42b      	bmi.n	80089a0 <_printf_common+0xb0>
 8008948:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800894c:	4649      	mov	r1, r9
 800894e:	4638      	mov	r0, r7
 8008950:	47c0      	blx	r8
 8008952:	3001      	adds	r0, #1
 8008954:	d01e      	beq.n	8008994 <_printf_common+0xa4>
 8008956:	6823      	ldr	r3, [r4, #0]
 8008958:	6922      	ldr	r2, [r4, #16]
 800895a:	f003 0306 	and.w	r3, r3, #6
 800895e:	2b04      	cmp	r3, #4
 8008960:	bf02      	ittt	eq
 8008962:	68e5      	ldreq	r5, [r4, #12]
 8008964:	6833      	ldreq	r3, [r6, #0]
 8008966:	1aed      	subeq	r5, r5, r3
 8008968:	68a3      	ldr	r3, [r4, #8]
 800896a:	bf0c      	ite	eq
 800896c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008970:	2500      	movne	r5, #0
 8008972:	4293      	cmp	r3, r2
 8008974:	bfc4      	itt	gt
 8008976:	1a9b      	subgt	r3, r3, r2
 8008978:	18ed      	addgt	r5, r5, r3
 800897a:	2600      	movs	r6, #0
 800897c:	341a      	adds	r4, #26
 800897e:	42b5      	cmp	r5, r6
 8008980:	d11a      	bne.n	80089b8 <_printf_common+0xc8>
 8008982:	2000      	movs	r0, #0
 8008984:	e008      	b.n	8008998 <_printf_common+0xa8>
 8008986:	2301      	movs	r3, #1
 8008988:	4652      	mov	r2, sl
 800898a:	4649      	mov	r1, r9
 800898c:	4638      	mov	r0, r7
 800898e:	47c0      	blx	r8
 8008990:	3001      	adds	r0, #1
 8008992:	d103      	bne.n	800899c <_printf_common+0xac>
 8008994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800899c:	3501      	adds	r5, #1
 800899e:	e7c6      	b.n	800892e <_printf_common+0x3e>
 80089a0:	18e1      	adds	r1, r4, r3
 80089a2:	1c5a      	adds	r2, r3, #1
 80089a4:	2030      	movs	r0, #48	; 0x30
 80089a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80089aa:	4422      	add	r2, r4
 80089ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80089b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80089b4:	3302      	adds	r3, #2
 80089b6:	e7c7      	b.n	8008948 <_printf_common+0x58>
 80089b8:	2301      	movs	r3, #1
 80089ba:	4622      	mov	r2, r4
 80089bc:	4649      	mov	r1, r9
 80089be:	4638      	mov	r0, r7
 80089c0:	47c0      	blx	r8
 80089c2:	3001      	adds	r0, #1
 80089c4:	d0e6      	beq.n	8008994 <_printf_common+0xa4>
 80089c6:	3601      	adds	r6, #1
 80089c8:	e7d9      	b.n	800897e <_printf_common+0x8e>
	...

080089cc <_printf_i>:
 80089cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089d0:	7e0f      	ldrb	r7, [r1, #24]
 80089d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80089d4:	2f78      	cmp	r7, #120	; 0x78
 80089d6:	4691      	mov	r9, r2
 80089d8:	4680      	mov	r8, r0
 80089da:	460c      	mov	r4, r1
 80089dc:	469a      	mov	sl, r3
 80089de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80089e2:	d807      	bhi.n	80089f4 <_printf_i+0x28>
 80089e4:	2f62      	cmp	r7, #98	; 0x62
 80089e6:	d80a      	bhi.n	80089fe <_printf_i+0x32>
 80089e8:	2f00      	cmp	r7, #0
 80089ea:	f000 80d4 	beq.w	8008b96 <_printf_i+0x1ca>
 80089ee:	2f58      	cmp	r7, #88	; 0x58
 80089f0:	f000 80c0 	beq.w	8008b74 <_printf_i+0x1a8>
 80089f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80089fc:	e03a      	b.n	8008a74 <_printf_i+0xa8>
 80089fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a02:	2b15      	cmp	r3, #21
 8008a04:	d8f6      	bhi.n	80089f4 <_printf_i+0x28>
 8008a06:	a101      	add	r1, pc, #4	; (adr r1, 8008a0c <_printf_i+0x40>)
 8008a08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a0c:	08008a65 	.word	0x08008a65
 8008a10:	08008a79 	.word	0x08008a79
 8008a14:	080089f5 	.word	0x080089f5
 8008a18:	080089f5 	.word	0x080089f5
 8008a1c:	080089f5 	.word	0x080089f5
 8008a20:	080089f5 	.word	0x080089f5
 8008a24:	08008a79 	.word	0x08008a79
 8008a28:	080089f5 	.word	0x080089f5
 8008a2c:	080089f5 	.word	0x080089f5
 8008a30:	080089f5 	.word	0x080089f5
 8008a34:	080089f5 	.word	0x080089f5
 8008a38:	08008b7d 	.word	0x08008b7d
 8008a3c:	08008aa5 	.word	0x08008aa5
 8008a40:	08008b37 	.word	0x08008b37
 8008a44:	080089f5 	.word	0x080089f5
 8008a48:	080089f5 	.word	0x080089f5
 8008a4c:	08008b9f 	.word	0x08008b9f
 8008a50:	080089f5 	.word	0x080089f5
 8008a54:	08008aa5 	.word	0x08008aa5
 8008a58:	080089f5 	.word	0x080089f5
 8008a5c:	080089f5 	.word	0x080089f5
 8008a60:	08008b3f 	.word	0x08008b3f
 8008a64:	682b      	ldr	r3, [r5, #0]
 8008a66:	1d1a      	adds	r2, r3, #4
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	602a      	str	r2, [r5, #0]
 8008a6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a74:	2301      	movs	r3, #1
 8008a76:	e09f      	b.n	8008bb8 <_printf_i+0x1ec>
 8008a78:	6820      	ldr	r0, [r4, #0]
 8008a7a:	682b      	ldr	r3, [r5, #0]
 8008a7c:	0607      	lsls	r7, r0, #24
 8008a7e:	f103 0104 	add.w	r1, r3, #4
 8008a82:	6029      	str	r1, [r5, #0]
 8008a84:	d501      	bpl.n	8008a8a <_printf_i+0xbe>
 8008a86:	681e      	ldr	r6, [r3, #0]
 8008a88:	e003      	b.n	8008a92 <_printf_i+0xc6>
 8008a8a:	0646      	lsls	r6, r0, #25
 8008a8c:	d5fb      	bpl.n	8008a86 <_printf_i+0xba>
 8008a8e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008a92:	2e00      	cmp	r6, #0
 8008a94:	da03      	bge.n	8008a9e <_printf_i+0xd2>
 8008a96:	232d      	movs	r3, #45	; 0x2d
 8008a98:	4276      	negs	r6, r6
 8008a9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a9e:	485a      	ldr	r0, [pc, #360]	; (8008c08 <_printf_i+0x23c>)
 8008aa0:	230a      	movs	r3, #10
 8008aa2:	e012      	b.n	8008aca <_printf_i+0xfe>
 8008aa4:	682b      	ldr	r3, [r5, #0]
 8008aa6:	6820      	ldr	r0, [r4, #0]
 8008aa8:	1d19      	adds	r1, r3, #4
 8008aaa:	6029      	str	r1, [r5, #0]
 8008aac:	0605      	lsls	r5, r0, #24
 8008aae:	d501      	bpl.n	8008ab4 <_printf_i+0xe8>
 8008ab0:	681e      	ldr	r6, [r3, #0]
 8008ab2:	e002      	b.n	8008aba <_printf_i+0xee>
 8008ab4:	0641      	lsls	r1, r0, #25
 8008ab6:	d5fb      	bpl.n	8008ab0 <_printf_i+0xe4>
 8008ab8:	881e      	ldrh	r6, [r3, #0]
 8008aba:	4853      	ldr	r0, [pc, #332]	; (8008c08 <_printf_i+0x23c>)
 8008abc:	2f6f      	cmp	r7, #111	; 0x6f
 8008abe:	bf0c      	ite	eq
 8008ac0:	2308      	moveq	r3, #8
 8008ac2:	230a      	movne	r3, #10
 8008ac4:	2100      	movs	r1, #0
 8008ac6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008aca:	6865      	ldr	r5, [r4, #4]
 8008acc:	60a5      	str	r5, [r4, #8]
 8008ace:	2d00      	cmp	r5, #0
 8008ad0:	bfa2      	ittt	ge
 8008ad2:	6821      	ldrge	r1, [r4, #0]
 8008ad4:	f021 0104 	bicge.w	r1, r1, #4
 8008ad8:	6021      	strge	r1, [r4, #0]
 8008ada:	b90e      	cbnz	r6, 8008ae0 <_printf_i+0x114>
 8008adc:	2d00      	cmp	r5, #0
 8008ade:	d04b      	beq.n	8008b78 <_printf_i+0x1ac>
 8008ae0:	4615      	mov	r5, r2
 8008ae2:	fbb6 f1f3 	udiv	r1, r6, r3
 8008ae6:	fb03 6711 	mls	r7, r3, r1, r6
 8008aea:	5dc7      	ldrb	r7, [r0, r7]
 8008aec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008af0:	4637      	mov	r7, r6
 8008af2:	42bb      	cmp	r3, r7
 8008af4:	460e      	mov	r6, r1
 8008af6:	d9f4      	bls.n	8008ae2 <_printf_i+0x116>
 8008af8:	2b08      	cmp	r3, #8
 8008afa:	d10b      	bne.n	8008b14 <_printf_i+0x148>
 8008afc:	6823      	ldr	r3, [r4, #0]
 8008afe:	07de      	lsls	r6, r3, #31
 8008b00:	d508      	bpl.n	8008b14 <_printf_i+0x148>
 8008b02:	6923      	ldr	r3, [r4, #16]
 8008b04:	6861      	ldr	r1, [r4, #4]
 8008b06:	4299      	cmp	r1, r3
 8008b08:	bfde      	ittt	le
 8008b0a:	2330      	movle	r3, #48	; 0x30
 8008b0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b10:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008b14:	1b52      	subs	r2, r2, r5
 8008b16:	6122      	str	r2, [r4, #16]
 8008b18:	f8cd a000 	str.w	sl, [sp]
 8008b1c:	464b      	mov	r3, r9
 8008b1e:	aa03      	add	r2, sp, #12
 8008b20:	4621      	mov	r1, r4
 8008b22:	4640      	mov	r0, r8
 8008b24:	f7ff fee4 	bl	80088f0 <_printf_common>
 8008b28:	3001      	adds	r0, #1
 8008b2a:	d14a      	bne.n	8008bc2 <_printf_i+0x1f6>
 8008b2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b30:	b004      	add	sp, #16
 8008b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b36:	6823      	ldr	r3, [r4, #0]
 8008b38:	f043 0320 	orr.w	r3, r3, #32
 8008b3c:	6023      	str	r3, [r4, #0]
 8008b3e:	4833      	ldr	r0, [pc, #204]	; (8008c0c <_printf_i+0x240>)
 8008b40:	2778      	movs	r7, #120	; 0x78
 8008b42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008b46:	6823      	ldr	r3, [r4, #0]
 8008b48:	6829      	ldr	r1, [r5, #0]
 8008b4a:	061f      	lsls	r7, r3, #24
 8008b4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008b50:	d402      	bmi.n	8008b58 <_printf_i+0x18c>
 8008b52:	065f      	lsls	r7, r3, #25
 8008b54:	bf48      	it	mi
 8008b56:	b2b6      	uxthmi	r6, r6
 8008b58:	07df      	lsls	r7, r3, #31
 8008b5a:	bf48      	it	mi
 8008b5c:	f043 0320 	orrmi.w	r3, r3, #32
 8008b60:	6029      	str	r1, [r5, #0]
 8008b62:	bf48      	it	mi
 8008b64:	6023      	strmi	r3, [r4, #0]
 8008b66:	b91e      	cbnz	r6, 8008b70 <_printf_i+0x1a4>
 8008b68:	6823      	ldr	r3, [r4, #0]
 8008b6a:	f023 0320 	bic.w	r3, r3, #32
 8008b6e:	6023      	str	r3, [r4, #0]
 8008b70:	2310      	movs	r3, #16
 8008b72:	e7a7      	b.n	8008ac4 <_printf_i+0xf8>
 8008b74:	4824      	ldr	r0, [pc, #144]	; (8008c08 <_printf_i+0x23c>)
 8008b76:	e7e4      	b.n	8008b42 <_printf_i+0x176>
 8008b78:	4615      	mov	r5, r2
 8008b7a:	e7bd      	b.n	8008af8 <_printf_i+0x12c>
 8008b7c:	682b      	ldr	r3, [r5, #0]
 8008b7e:	6826      	ldr	r6, [r4, #0]
 8008b80:	6961      	ldr	r1, [r4, #20]
 8008b82:	1d18      	adds	r0, r3, #4
 8008b84:	6028      	str	r0, [r5, #0]
 8008b86:	0635      	lsls	r5, r6, #24
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	d501      	bpl.n	8008b90 <_printf_i+0x1c4>
 8008b8c:	6019      	str	r1, [r3, #0]
 8008b8e:	e002      	b.n	8008b96 <_printf_i+0x1ca>
 8008b90:	0670      	lsls	r0, r6, #25
 8008b92:	d5fb      	bpl.n	8008b8c <_printf_i+0x1c0>
 8008b94:	8019      	strh	r1, [r3, #0]
 8008b96:	2300      	movs	r3, #0
 8008b98:	6123      	str	r3, [r4, #16]
 8008b9a:	4615      	mov	r5, r2
 8008b9c:	e7bc      	b.n	8008b18 <_printf_i+0x14c>
 8008b9e:	682b      	ldr	r3, [r5, #0]
 8008ba0:	1d1a      	adds	r2, r3, #4
 8008ba2:	602a      	str	r2, [r5, #0]
 8008ba4:	681d      	ldr	r5, [r3, #0]
 8008ba6:	6862      	ldr	r2, [r4, #4]
 8008ba8:	2100      	movs	r1, #0
 8008baa:	4628      	mov	r0, r5
 8008bac:	f7f7 fb30 	bl	8000210 <memchr>
 8008bb0:	b108      	cbz	r0, 8008bb6 <_printf_i+0x1ea>
 8008bb2:	1b40      	subs	r0, r0, r5
 8008bb4:	6060      	str	r0, [r4, #4]
 8008bb6:	6863      	ldr	r3, [r4, #4]
 8008bb8:	6123      	str	r3, [r4, #16]
 8008bba:	2300      	movs	r3, #0
 8008bbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bc0:	e7aa      	b.n	8008b18 <_printf_i+0x14c>
 8008bc2:	6923      	ldr	r3, [r4, #16]
 8008bc4:	462a      	mov	r2, r5
 8008bc6:	4649      	mov	r1, r9
 8008bc8:	4640      	mov	r0, r8
 8008bca:	47d0      	blx	sl
 8008bcc:	3001      	adds	r0, #1
 8008bce:	d0ad      	beq.n	8008b2c <_printf_i+0x160>
 8008bd0:	6823      	ldr	r3, [r4, #0]
 8008bd2:	079b      	lsls	r3, r3, #30
 8008bd4:	d413      	bmi.n	8008bfe <_printf_i+0x232>
 8008bd6:	68e0      	ldr	r0, [r4, #12]
 8008bd8:	9b03      	ldr	r3, [sp, #12]
 8008bda:	4298      	cmp	r0, r3
 8008bdc:	bfb8      	it	lt
 8008bde:	4618      	movlt	r0, r3
 8008be0:	e7a6      	b.n	8008b30 <_printf_i+0x164>
 8008be2:	2301      	movs	r3, #1
 8008be4:	4632      	mov	r2, r6
 8008be6:	4649      	mov	r1, r9
 8008be8:	4640      	mov	r0, r8
 8008bea:	47d0      	blx	sl
 8008bec:	3001      	adds	r0, #1
 8008bee:	d09d      	beq.n	8008b2c <_printf_i+0x160>
 8008bf0:	3501      	adds	r5, #1
 8008bf2:	68e3      	ldr	r3, [r4, #12]
 8008bf4:	9903      	ldr	r1, [sp, #12]
 8008bf6:	1a5b      	subs	r3, r3, r1
 8008bf8:	42ab      	cmp	r3, r5
 8008bfa:	dcf2      	bgt.n	8008be2 <_printf_i+0x216>
 8008bfc:	e7eb      	b.n	8008bd6 <_printf_i+0x20a>
 8008bfe:	2500      	movs	r5, #0
 8008c00:	f104 0619 	add.w	r6, r4, #25
 8008c04:	e7f5      	b.n	8008bf2 <_printf_i+0x226>
 8008c06:	bf00      	nop
 8008c08:	0800ad0a 	.word	0x0800ad0a
 8008c0c:	0800ad1b 	.word	0x0800ad1b

08008c10 <std>:
 8008c10:	2300      	movs	r3, #0
 8008c12:	b510      	push	{r4, lr}
 8008c14:	4604      	mov	r4, r0
 8008c16:	e9c0 3300 	strd	r3, r3, [r0]
 8008c1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c1e:	6083      	str	r3, [r0, #8]
 8008c20:	8181      	strh	r1, [r0, #12]
 8008c22:	6643      	str	r3, [r0, #100]	; 0x64
 8008c24:	81c2      	strh	r2, [r0, #14]
 8008c26:	6183      	str	r3, [r0, #24]
 8008c28:	4619      	mov	r1, r3
 8008c2a:	2208      	movs	r2, #8
 8008c2c:	305c      	adds	r0, #92	; 0x5c
 8008c2e:	f000 f8b1 	bl	8008d94 <memset>
 8008c32:	4b0d      	ldr	r3, [pc, #52]	; (8008c68 <std+0x58>)
 8008c34:	6263      	str	r3, [r4, #36]	; 0x24
 8008c36:	4b0d      	ldr	r3, [pc, #52]	; (8008c6c <std+0x5c>)
 8008c38:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c3a:	4b0d      	ldr	r3, [pc, #52]	; (8008c70 <std+0x60>)
 8008c3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c3e:	4b0d      	ldr	r3, [pc, #52]	; (8008c74 <std+0x64>)
 8008c40:	6323      	str	r3, [r4, #48]	; 0x30
 8008c42:	4b0d      	ldr	r3, [pc, #52]	; (8008c78 <std+0x68>)
 8008c44:	6224      	str	r4, [r4, #32]
 8008c46:	429c      	cmp	r4, r3
 8008c48:	d006      	beq.n	8008c58 <std+0x48>
 8008c4a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008c4e:	4294      	cmp	r4, r2
 8008c50:	d002      	beq.n	8008c58 <std+0x48>
 8008c52:	33d0      	adds	r3, #208	; 0xd0
 8008c54:	429c      	cmp	r4, r3
 8008c56:	d105      	bne.n	8008c64 <std+0x54>
 8008c58:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c60:	f000 b8ce 	b.w	8008e00 <__retarget_lock_init_recursive>
 8008c64:	bd10      	pop	{r4, pc}
 8008c66:	bf00      	nop
 8008c68:	0800a4b9 	.word	0x0800a4b9
 8008c6c:	0800a4db 	.word	0x0800a4db
 8008c70:	0800a513 	.word	0x0800a513
 8008c74:	0800a537 	.word	0x0800a537
 8008c78:	20000658 	.word	0x20000658

08008c7c <stdio_exit_handler>:
 8008c7c:	4a02      	ldr	r2, [pc, #8]	; (8008c88 <stdio_exit_handler+0xc>)
 8008c7e:	4903      	ldr	r1, [pc, #12]	; (8008c8c <stdio_exit_handler+0x10>)
 8008c80:	4803      	ldr	r0, [pc, #12]	; (8008c90 <stdio_exit_handler+0x14>)
 8008c82:	f000 b869 	b.w	8008d58 <_fwalk_sglue>
 8008c86:	bf00      	nop
 8008c88:	2000001c 	.word	0x2000001c
 8008c8c:	08009d59 	.word	0x08009d59
 8008c90:	20000028 	.word	0x20000028

08008c94 <cleanup_stdio>:
 8008c94:	6841      	ldr	r1, [r0, #4]
 8008c96:	4b0c      	ldr	r3, [pc, #48]	; (8008cc8 <cleanup_stdio+0x34>)
 8008c98:	4299      	cmp	r1, r3
 8008c9a:	b510      	push	{r4, lr}
 8008c9c:	4604      	mov	r4, r0
 8008c9e:	d001      	beq.n	8008ca4 <cleanup_stdio+0x10>
 8008ca0:	f001 f85a 	bl	8009d58 <_fflush_r>
 8008ca4:	68a1      	ldr	r1, [r4, #8]
 8008ca6:	4b09      	ldr	r3, [pc, #36]	; (8008ccc <cleanup_stdio+0x38>)
 8008ca8:	4299      	cmp	r1, r3
 8008caa:	d002      	beq.n	8008cb2 <cleanup_stdio+0x1e>
 8008cac:	4620      	mov	r0, r4
 8008cae:	f001 f853 	bl	8009d58 <_fflush_r>
 8008cb2:	68e1      	ldr	r1, [r4, #12]
 8008cb4:	4b06      	ldr	r3, [pc, #24]	; (8008cd0 <cleanup_stdio+0x3c>)
 8008cb6:	4299      	cmp	r1, r3
 8008cb8:	d004      	beq.n	8008cc4 <cleanup_stdio+0x30>
 8008cba:	4620      	mov	r0, r4
 8008cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cc0:	f001 b84a 	b.w	8009d58 <_fflush_r>
 8008cc4:	bd10      	pop	{r4, pc}
 8008cc6:	bf00      	nop
 8008cc8:	20000658 	.word	0x20000658
 8008ccc:	200006c0 	.word	0x200006c0
 8008cd0:	20000728 	.word	0x20000728

08008cd4 <global_stdio_init.part.0>:
 8008cd4:	b510      	push	{r4, lr}
 8008cd6:	4b0b      	ldr	r3, [pc, #44]	; (8008d04 <global_stdio_init.part.0+0x30>)
 8008cd8:	4c0b      	ldr	r4, [pc, #44]	; (8008d08 <global_stdio_init.part.0+0x34>)
 8008cda:	4a0c      	ldr	r2, [pc, #48]	; (8008d0c <global_stdio_init.part.0+0x38>)
 8008cdc:	601a      	str	r2, [r3, #0]
 8008cde:	4620      	mov	r0, r4
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	2104      	movs	r1, #4
 8008ce4:	f7ff ff94 	bl	8008c10 <std>
 8008ce8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008cec:	2201      	movs	r2, #1
 8008cee:	2109      	movs	r1, #9
 8008cf0:	f7ff ff8e 	bl	8008c10 <std>
 8008cf4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008cf8:	2202      	movs	r2, #2
 8008cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cfe:	2112      	movs	r1, #18
 8008d00:	f7ff bf86 	b.w	8008c10 <std>
 8008d04:	20000790 	.word	0x20000790
 8008d08:	20000658 	.word	0x20000658
 8008d0c:	08008c7d 	.word	0x08008c7d

08008d10 <__sfp_lock_acquire>:
 8008d10:	4801      	ldr	r0, [pc, #4]	; (8008d18 <__sfp_lock_acquire+0x8>)
 8008d12:	f000 b876 	b.w	8008e02 <__retarget_lock_acquire_recursive>
 8008d16:	bf00      	nop
 8008d18:	20000795 	.word	0x20000795

08008d1c <__sfp_lock_release>:
 8008d1c:	4801      	ldr	r0, [pc, #4]	; (8008d24 <__sfp_lock_release+0x8>)
 8008d1e:	f000 b871 	b.w	8008e04 <__retarget_lock_release_recursive>
 8008d22:	bf00      	nop
 8008d24:	20000795 	.word	0x20000795

08008d28 <__sinit>:
 8008d28:	b510      	push	{r4, lr}
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	f7ff fff0 	bl	8008d10 <__sfp_lock_acquire>
 8008d30:	6a23      	ldr	r3, [r4, #32]
 8008d32:	b11b      	cbz	r3, 8008d3c <__sinit+0x14>
 8008d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d38:	f7ff bff0 	b.w	8008d1c <__sfp_lock_release>
 8008d3c:	4b04      	ldr	r3, [pc, #16]	; (8008d50 <__sinit+0x28>)
 8008d3e:	6223      	str	r3, [r4, #32]
 8008d40:	4b04      	ldr	r3, [pc, #16]	; (8008d54 <__sinit+0x2c>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d1f5      	bne.n	8008d34 <__sinit+0xc>
 8008d48:	f7ff ffc4 	bl	8008cd4 <global_stdio_init.part.0>
 8008d4c:	e7f2      	b.n	8008d34 <__sinit+0xc>
 8008d4e:	bf00      	nop
 8008d50:	08008c95 	.word	0x08008c95
 8008d54:	20000790 	.word	0x20000790

08008d58 <_fwalk_sglue>:
 8008d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d5c:	4607      	mov	r7, r0
 8008d5e:	4688      	mov	r8, r1
 8008d60:	4614      	mov	r4, r2
 8008d62:	2600      	movs	r6, #0
 8008d64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d68:	f1b9 0901 	subs.w	r9, r9, #1
 8008d6c:	d505      	bpl.n	8008d7a <_fwalk_sglue+0x22>
 8008d6e:	6824      	ldr	r4, [r4, #0]
 8008d70:	2c00      	cmp	r4, #0
 8008d72:	d1f7      	bne.n	8008d64 <_fwalk_sglue+0xc>
 8008d74:	4630      	mov	r0, r6
 8008d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d7a:	89ab      	ldrh	r3, [r5, #12]
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d907      	bls.n	8008d90 <_fwalk_sglue+0x38>
 8008d80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d84:	3301      	adds	r3, #1
 8008d86:	d003      	beq.n	8008d90 <_fwalk_sglue+0x38>
 8008d88:	4629      	mov	r1, r5
 8008d8a:	4638      	mov	r0, r7
 8008d8c:	47c0      	blx	r8
 8008d8e:	4306      	orrs	r6, r0
 8008d90:	3568      	adds	r5, #104	; 0x68
 8008d92:	e7e9      	b.n	8008d68 <_fwalk_sglue+0x10>

08008d94 <memset>:
 8008d94:	4402      	add	r2, r0
 8008d96:	4603      	mov	r3, r0
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d100      	bne.n	8008d9e <memset+0xa>
 8008d9c:	4770      	bx	lr
 8008d9e:	f803 1b01 	strb.w	r1, [r3], #1
 8008da2:	e7f9      	b.n	8008d98 <memset+0x4>

08008da4 <_localeconv_r>:
 8008da4:	4800      	ldr	r0, [pc, #0]	; (8008da8 <_localeconv_r+0x4>)
 8008da6:	4770      	bx	lr
 8008da8:	20000168 	.word	0x20000168

08008dac <__errno>:
 8008dac:	4b01      	ldr	r3, [pc, #4]	; (8008db4 <__errno+0x8>)
 8008dae:	6818      	ldr	r0, [r3, #0]
 8008db0:	4770      	bx	lr
 8008db2:	bf00      	nop
 8008db4:	20000074 	.word	0x20000074

08008db8 <__libc_init_array>:
 8008db8:	b570      	push	{r4, r5, r6, lr}
 8008dba:	4d0d      	ldr	r5, [pc, #52]	; (8008df0 <__libc_init_array+0x38>)
 8008dbc:	4c0d      	ldr	r4, [pc, #52]	; (8008df4 <__libc_init_array+0x3c>)
 8008dbe:	1b64      	subs	r4, r4, r5
 8008dc0:	10a4      	asrs	r4, r4, #2
 8008dc2:	2600      	movs	r6, #0
 8008dc4:	42a6      	cmp	r6, r4
 8008dc6:	d109      	bne.n	8008ddc <__libc_init_array+0x24>
 8008dc8:	4d0b      	ldr	r5, [pc, #44]	; (8008df8 <__libc_init_array+0x40>)
 8008dca:	4c0c      	ldr	r4, [pc, #48]	; (8008dfc <__libc_init_array+0x44>)
 8008dcc:	f001 ff76 	bl	800acbc <_init>
 8008dd0:	1b64      	subs	r4, r4, r5
 8008dd2:	10a4      	asrs	r4, r4, #2
 8008dd4:	2600      	movs	r6, #0
 8008dd6:	42a6      	cmp	r6, r4
 8008dd8:	d105      	bne.n	8008de6 <__libc_init_array+0x2e>
 8008dda:	bd70      	pop	{r4, r5, r6, pc}
 8008ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008de0:	4798      	blx	r3
 8008de2:	3601      	adds	r6, #1
 8008de4:	e7ee      	b.n	8008dc4 <__libc_init_array+0xc>
 8008de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dea:	4798      	blx	r3
 8008dec:	3601      	adds	r6, #1
 8008dee:	e7f2      	b.n	8008dd6 <__libc_init_array+0x1e>
 8008df0:	0800b074 	.word	0x0800b074
 8008df4:	0800b074 	.word	0x0800b074
 8008df8:	0800b074 	.word	0x0800b074
 8008dfc:	0800b078 	.word	0x0800b078

08008e00 <__retarget_lock_init_recursive>:
 8008e00:	4770      	bx	lr

08008e02 <__retarget_lock_acquire_recursive>:
 8008e02:	4770      	bx	lr

08008e04 <__retarget_lock_release_recursive>:
 8008e04:	4770      	bx	lr

08008e06 <quorem>:
 8008e06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e0a:	6903      	ldr	r3, [r0, #16]
 8008e0c:	690c      	ldr	r4, [r1, #16]
 8008e0e:	42a3      	cmp	r3, r4
 8008e10:	4607      	mov	r7, r0
 8008e12:	db7e      	blt.n	8008f12 <quorem+0x10c>
 8008e14:	3c01      	subs	r4, #1
 8008e16:	f101 0814 	add.w	r8, r1, #20
 8008e1a:	f100 0514 	add.w	r5, r0, #20
 8008e1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e22:	9301      	str	r3, [sp, #4]
 8008e24:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008e28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008e34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008e38:	fbb2 f6f3 	udiv	r6, r2, r3
 8008e3c:	d331      	bcc.n	8008ea2 <quorem+0x9c>
 8008e3e:	f04f 0e00 	mov.w	lr, #0
 8008e42:	4640      	mov	r0, r8
 8008e44:	46ac      	mov	ip, r5
 8008e46:	46f2      	mov	sl, lr
 8008e48:	f850 2b04 	ldr.w	r2, [r0], #4
 8008e4c:	b293      	uxth	r3, r2
 8008e4e:	fb06 e303 	mla	r3, r6, r3, lr
 8008e52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008e56:	0c1a      	lsrs	r2, r3, #16
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	ebaa 0303 	sub.w	r3, sl, r3
 8008e5e:	f8dc a000 	ldr.w	sl, [ip]
 8008e62:	fa13 f38a 	uxtah	r3, r3, sl
 8008e66:	fb06 220e 	mla	r2, r6, lr, r2
 8008e6a:	9300      	str	r3, [sp, #0]
 8008e6c:	9b00      	ldr	r3, [sp, #0]
 8008e6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008e72:	b292      	uxth	r2, r2
 8008e74:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008e78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e7c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008e80:	4581      	cmp	r9, r0
 8008e82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e86:	f84c 3b04 	str.w	r3, [ip], #4
 8008e8a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008e8e:	d2db      	bcs.n	8008e48 <quorem+0x42>
 8008e90:	f855 300b 	ldr.w	r3, [r5, fp]
 8008e94:	b92b      	cbnz	r3, 8008ea2 <quorem+0x9c>
 8008e96:	9b01      	ldr	r3, [sp, #4]
 8008e98:	3b04      	subs	r3, #4
 8008e9a:	429d      	cmp	r5, r3
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	d32c      	bcc.n	8008efa <quorem+0xf4>
 8008ea0:	613c      	str	r4, [r7, #16]
 8008ea2:	4638      	mov	r0, r7
 8008ea4:	f001 fa08 	bl	800a2b8 <__mcmp>
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	db22      	blt.n	8008ef2 <quorem+0xec>
 8008eac:	3601      	adds	r6, #1
 8008eae:	4629      	mov	r1, r5
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	f858 2b04 	ldr.w	r2, [r8], #4
 8008eb6:	f8d1 c000 	ldr.w	ip, [r1]
 8008eba:	b293      	uxth	r3, r2
 8008ebc:	1ac3      	subs	r3, r0, r3
 8008ebe:	0c12      	lsrs	r2, r2, #16
 8008ec0:	fa13 f38c 	uxtah	r3, r3, ip
 8008ec4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008ec8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ed2:	45c1      	cmp	r9, r8
 8008ed4:	f841 3b04 	str.w	r3, [r1], #4
 8008ed8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008edc:	d2e9      	bcs.n	8008eb2 <quorem+0xac>
 8008ede:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ee2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ee6:	b922      	cbnz	r2, 8008ef2 <quorem+0xec>
 8008ee8:	3b04      	subs	r3, #4
 8008eea:	429d      	cmp	r5, r3
 8008eec:	461a      	mov	r2, r3
 8008eee:	d30a      	bcc.n	8008f06 <quorem+0x100>
 8008ef0:	613c      	str	r4, [r7, #16]
 8008ef2:	4630      	mov	r0, r6
 8008ef4:	b003      	add	sp, #12
 8008ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008efa:	6812      	ldr	r2, [r2, #0]
 8008efc:	3b04      	subs	r3, #4
 8008efe:	2a00      	cmp	r2, #0
 8008f00:	d1ce      	bne.n	8008ea0 <quorem+0x9a>
 8008f02:	3c01      	subs	r4, #1
 8008f04:	e7c9      	b.n	8008e9a <quorem+0x94>
 8008f06:	6812      	ldr	r2, [r2, #0]
 8008f08:	3b04      	subs	r3, #4
 8008f0a:	2a00      	cmp	r2, #0
 8008f0c:	d1f0      	bne.n	8008ef0 <quorem+0xea>
 8008f0e:	3c01      	subs	r4, #1
 8008f10:	e7eb      	b.n	8008eea <quorem+0xe4>
 8008f12:	2000      	movs	r0, #0
 8008f14:	e7ee      	b.n	8008ef4 <quorem+0xee>
	...

08008f18 <_dtoa_r>:
 8008f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f1c:	ed2d 8b04 	vpush	{d8-d9}
 8008f20:	69c5      	ldr	r5, [r0, #28]
 8008f22:	b093      	sub	sp, #76	; 0x4c
 8008f24:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008f28:	ec57 6b10 	vmov	r6, r7, d0
 8008f2c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008f30:	9107      	str	r1, [sp, #28]
 8008f32:	4604      	mov	r4, r0
 8008f34:	920a      	str	r2, [sp, #40]	; 0x28
 8008f36:	930d      	str	r3, [sp, #52]	; 0x34
 8008f38:	b975      	cbnz	r5, 8008f58 <_dtoa_r+0x40>
 8008f3a:	2010      	movs	r0, #16
 8008f3c:	f000 fdde 	bl	8009afc <malloc>
 8008f40:	4602      	mov	r2, r0
 8008f42:	61e0      	str	r0, [r4, #28]
 8008f44:	b920      	cbnz	r0, 8008f50 <_dtoa_r+0x38>
 8008f46:	4bae      	ldr	r3, [pc, #696]	; (8009200 <_dtoa_r+0x2e8>)
 8008f48:	21ef      	movs	r1, #239	; 0xef
 8008f4a:	48ae      	ldr	r0, [pc, #696]	; (8009204 <_dtoa_r+0x2ec>)
 8008f4c:	f001 fb5c 	bl	800a608 <__assert_func>
 8008f50:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008f54:	6005      	str	r5, [r0, #0]
 8008f56:	60c5      	str	r5, [r0, #12]
 8008f58:	69e3      	ldr	r3, [r4, #28]
 8008f5a:	6819      	ldr	r1, [r3, #0]
 8008f5c:	b151      	cbz	r1, 8008f74 <_dtoa_r+0x5c>
 8008f5e:	685a      	ldr	r2, [r3, #4]
 8008f60:	604a      	str	r2, [r1, #4]
 8008f62:	2301      	movs	r3, #1
 8008f64:	4093      	lsls	r3, r2
 8008f66:	608b      	str	r3, [r1, #8]
 8008f68:	4620      	mov	r0, r4
 8008f6a:	f000 ff69 	bl	8009e40 <_Bfree>
 8008f6e:	69e3      	ldr	r3, [r4, #28]
 8008f70:	2200      	movs	r2, #0
 8008f72:	601a      	str	r2, [r3, #0]
 8008f74:	1e3b      	subs	r3, r7, #0
 8008f76:	bfbb      	ittet	lt
 8008f78:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008f7c:	9303      	strlt	r3, [sp, #12]
 8008f7e:	2300      	movge	r3, #0
 8008f80:	2201      	movlt	r2, #1
 8008f82:	bfac      	ite	ge
 8008f84:	f8c8 3000 	strge.w	r3, [r8]
 8008f88:	f8c8 2000 	strlt.w	r2, [r8]
 8008f8c:	4b9e      	ldr	r3, [pc, #632]	; (8009208 <_dtoa_r+0x2f0>)
 8008f8e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008f92:	ea33 0308 	bics.w	r3, r3, r8
 8008f96:	d11b      	bne.n	8008fd0 <_dtoa_r+0xb8>
 8008f98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f9a:	f242 730f 	movw	r3, #9999	; 0x270f
 8008f9e:	6013      	str	r3, [r2, #0]
 8008fa0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008fa4:	4333      	orrs	r3, r6
 8008fa6:	f000 8593 	beq.w	8009ad0 <_dtoa_r+0xbb8>
 8008faa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fac:	b963      	cbnz	r3, 8008fc8 <_dtoa_r+0xb0>
 8008fae:	4b97      	ldr	r3, [pc, #604]	; (800920c <_dtoa_r+0x2f4>)
 8008fb0:	e027      	b.n	8009002 <_dtoa_r+0xea>
 8008fb2:	4b97      	ldr	r3, [pc, #604]	; (8009210 <_dtoa_r+0x2f8>)
 8008fb4:	9300      	str	r3, [sp, #0]
 8008fb6:	3308      	adds	r3, #8
 8008fb8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008fba:	6013      	str	r3, [r2, #0]
 8008fbc:	9800      	ldr	r0, [sp, #0]
 8008fbe:	b013      	add	sp, #76	; 0x4c
 8008fc0:	ecbd 8b04 	vpop	{d8-d9}
 8008fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fc8:	4b90      	ldr	r3, [pc, #576]	; (800920c <_dtoa_r+0x2f4>)
 8008fca:	9300      	str	r3, [sp, #0]
 8008fcc:	3303      	adds	r3, #3
 8008fce:	e7f3      	b.n	8008fb8 <_dtoa_r+0xa0>
 8008fd0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	ec51 0b17 	vmov	r0, r1, d7
 8008fda:	eeb0 8a47 	vmov.f32	s16, s14
 8008fde:	eef0 8a67 	vmov.f32	s17, s15
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	f7f7 fd90 	bl	8000b08 <__aeabi_dcmpeq>
 8008fe8:	4681      	mov	r9, r0
 8008fea:	b160      	cbz	r0, 8009006 <_dtoa_r+0xee>
 8008fec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008fee:	2301      	movs	r3, #1
 8008ff0:	6013      	str	r3, [r2, #0]
 8008ff2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	f000 8568 	beq.w	8009aca <_dtoa_r+0xbb2>
 8008ffa:	4b86      	ldr	r3, [pc, #536]	; (8009214 <_dtoa_r+0x2fc>)
 8008ffc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ffe:	6013      	str	r3, [r2, #0]
 8009000:	3b01      	subs	r3, #1
 8009002:	9300      	str	r3, [sp, #0]
 8009004:	e7da      	b.n	8008fbc <_dtoa_r+0xa4>
 8009006:	aa10      	add	r2, sp, #64	; 0x40
 8009008:	a911      	add	r1, sp, #68	; 0x44
 800900a:	4620      	mov	r0, r4
 800900c:	eeb0 0a48 	vmov.f32	s0, s16
 8009010:	eef0 0a68 	vmov.f32	s1, s17
 8009014:	f001 f9f6 	bl	800a404 <__d2b>
 8009018:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800901c:	4682      	mov	sl, r0
 800901e:	2d00      	cmp	r5, #0
 8009020:	d07f      	beq.n	8009122 <_dtoa_r+0x20a>
 8009022:	ee18 3a90 	vmov	r3, s17
 8009026:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800902a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800902e:	ec51 0b18 	vmov	r0, r1, d8
 8009032:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009036:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800903a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800903e:	4619      	mov	r1, r3
 8009040:	2200      	movs	r2, #0
 8009042:	4b75      	ldr	r3, [pc, #468]	; (8009218 <_dtoa_r+0x300>)
 8009044:	f7f7 f940 	bl	80002c8 <__aeabi_dsub>
 8009048:	a367      	add	r3, pc, #412	; (adr r3, 80091e8 <_dtoa_r+0x2d0>)
 800904a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904e:	f7f7 faf3 	bl	8000638 <__aeabi_dmul>
 8009052:	a367      	add	r3, pc, #412	; (adr r3, 80091f0 <_dtoa_r+0x2d8>)
 8009054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009058:	f7f7 f938 	bl	80002cc <__adddf3>
 800905c:	4606      	mov	r6, r0
 800905e:	4628      	mov	r0, r5
 8009060:	460f      	mov	r7, r1
 8009062:	f7f7 fa7f 	bl	8000564 <__aeabi_i2d>
 8009066:	a364      	add	r3, pc, #400	; (adr r3, 80091f8 <_dtoa_r+0x2e0>)
 8009068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906c:	f7f7 fae4 	bl	8000638 <__aeabi_dmul>
 8009070:	4602      	mov	r2, r0
 8009072:	460b      	mov	r3, r1
 8009074:	4630      	mov	r0, r6
 8009076:	4639      	mov	r1, r7
 8009078:	f7f7 f928 	bl	80002cc <__adddf3>
 800907c:	4606      	mov	r6, r0
 800907e:	460f      	mov	r7, r1
 8009080:	f7f7 fd8a 	bl	8000b98 <__aeabi_d2iz>
 8009084:	2200      	movs	r2, #0
 8009086:	4683      	mov	fp, r0
 8009088:	2300      	movs	r3, #0
 800908a:	4630      	mov	r0, r6
 800908c:	4639      	mov	r1, r7
 800908e:	f7f7 fd45 	bl	8000b1c <__aeabi_dcmplt>
 8009092:	b148      	cbz	r0, 80090a8 <_dtoa_r+0x190>
 8009094:	4658      	mov	r0, fp
 8009096:	f7f7 fa65 	bl	8000564 <__aeabi_i2d>
 800909a:	4632      	mov	r2, r6
 800909c:	463b      	mov	r3, r7
 800909e:	f7f7 fd33 	bl	8000b08 <__aeabi_dcmpeq>
 80090a2:	b908      	cbnz	r0, 80090a8 <_dtoa_r+0x190>
 80090a4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80090a8:	f1bb 0f16 	cmp.w	fp, #22
 80090ac:	d857      	bhi.n	800915e <_dtoa_r+0x246>
 80090ae:	4b5b      	ldr	r3, [pc, #364]	; (800921c <_dtoa_r+0x304>)
 80090b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80090b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b8:	ec51 0b18 	vmov	r0, r1, d8
 80090bc:	f7f7 fd2e 	bl	8000b1c <__aeabi_dcmplt>
 80090c0:	2800      	cmp	r0, #0
 80090c2:	d04e      	beq.n	8009162 <_dtoa_r+0x24a>
 80090c4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80090c8:	2300      	movs	r3, #0
 80090ca:	930c      	str	r3, [sp, #48]	; 0x30
 80090cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80090ce:	1b5b      	subs	r3, r3, r5
 80090d0:	1e5a      	subs	r2, r3, #1
 80090d2:	bf45      	ittet	mi
 80090d4:	f1c3 0301 	rsbmi	r3, r3, #1
 80090d8:	9305      	strmi	r3, [sp, #20]
 80090da:	2300      	movpl	r3, #0
 80090dc:	2300      	movmi	r3, #0
 80090de:	9206      	str	r2, [sp, #24]
 80090e0:	bf54      	ite	pl
 80090e2:	9305      	strpl	r3, [sp, #20]
 80090e4:	9306      	strmi	r3, [sp, #24]
 80090e6:	f1bb 0f00 	cmp.w	fp, #0
 80090ea:	db3c      	blt.n	8009166 <_dtoa_r+0x24e>
 80090ec:	9b06      	ldr	r3, [sp, #24]
 80090ee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80090f2:	445b      	add	r3, fp
 80090f4:	9306      	str	r3, [sp, #24]
 80090f6:	2300      	movs	r3, #0
 80090f8:	9308      	str	r3, [sp, #32]
 80090fa:	9b07      	ldr	r3, [sp, #28]
 80090fc:	2b09      	cmp	r3, #9
 80090fe:	d868      	bhi.n	80091d2 <_dtoa_r+0x2ba>
 8009100:	2b05      	cmp	r3, #5
 8009102:	bfc4      	itt	gt
 8009104:	3b04      	subgt	r3, #4
 8009106:	9307      	strgt	r3, [sp, #28]
 8009108:	9b07      	ldr	r3, [sp, #28]
 800910a:	f1a3 0302 	sub.w	r3, r3, #2
 800910e:	bfcc      	ite	gt
 8009110:	2500      	movgt	r5, #0
 8009112:	2501      	movle	r5, #1
 8009114:	2b03      	cmp	r3, #3
 8009116:	f200 8085 	bhi.w	8009224 <_dtoa_r+0x30c>
 800911a:	e8df f003 	tbb	[pc, r3]
 800911e:	3b2e      	.short	0x3b2e
 8009120:	5839      	.short	0x5839
 8009122:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009126:	441d      	add	r5, r3
 8009128:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800912c:	2b20      	cmp	r3, #32
 800912e:	bfc1      	itttt	gt
 8009130:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009134:	fa08 f803 	lslgt.w	r8, r8, r3
 8009138:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800913c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009140:	bfd6      	itet	le
 8009142:	f1c3 0320 	rsble	r3, r3, #32
 8009146:	ea48 0003 	orrgt.w	r0, r8, r3
 800914a:	fa06 f003 	lslle.w	r0, r6, r3
 800914e:	f7f7 f9f9 	bl	8000544 <__aeabi_ui2d>
 8009152:	2201      	movs	r2, #1
 8009154:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009158:	3d01      	subs	r5, #1
 800915a:	920e      	str	r2, [sp, #56]	; 0x38
 800915c:	e76f      	b.n	800903e <_dtoa_r+0x126>
 800915e:	2301      	movs	r3, #1
 8009160:	e7b3      	b.n	80090ca <_dtoa_r+0x1b2>
 8009162:	900c      	str	r0, [sp, #48]	; 0x30
 8009164:	e7b2      	b.n	80090cc <_dtoa_r+0x1b4>
 8009166:	9b05      	ldr	r3, [sp, #20]
 8009168:	eba3 030b 	sub.w	r3, r3, fp
 800916c:	9305      	str	r3, [sp, #20]
 800916e:	f1cb 0300 	rsb	r3, fp, #0
 8009172:	9308      	str	r3, [sp, #32]
 8009174:	2300      	movs	r3, #0
 8009176:	930b      	str	r3, [sp, #44]	; 0x2c
 8009178:	e7bf      	b.n	80090fa <_dtoa_r+0x1e2>
 800917a:	2300      	movs	r3, #0
 800917c:	9309      	str	r3, [sp, #36]	; 0x24
 800917e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009180:	2b00      	cmp	r3, #0
 8009182:	dc52      	bgt.n	800922a <_dtoa_r+0x312>
 8009184:	2301      	movs	r3, #1
 8009186:	9301      	str	r3, [sp, #4]
 8009188:	9304      	str	r3, [sp, #16]
 800918a:	461a      	mov	r2, r3
 800918c:	920a      	str	r2, [sp, #40]	; 0x28
 800918e:	e00b      	b.n	80091a8 <_dtoa_r+0x290>
 8009190:	2301      	movs	r3, #1
 8009192:	e7f3      	b.n	800917c <_dtoa_r+0x264>
 8009194:	2300      	movs	r3, #0
 8009196:	9309      	str	r3, [sp, #36]	; 0x24
 8009198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800919a:	445b      	add	r3, fp
 800919c:	9301      	str	r3, [sp, #4]
 800919e:	3301      	adds	r3, #1
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	9304      	str	r3, [sp, #16]
 80091a4:	bfb8      	it	lt
 80091a6:	2301      	movlt	r3, #1
 80091a8:	69e0      	ldr	r0, [r4, #28]
 80091aa:	2100      	movs	r1, #0
 80091ac:	2204      	movs	r2, #4
 80091ae:	f102 0614 	add.w	r6, r2, #20
 80091b2:	429e      	cmp	r6, r3
 80091b4:	d93d      	bls.n	8009232 <_dtoa_r+0x31a>
 80091b6:	6041      	str	r1, [r0, #4]
 80091b8:	4620      	mov	r0, r4
 80091ba:	f000 fe01 	bl	8009dc0 <_Balloc>
 80091be:	9000      	str	r0, [sp, #0]
 80091c0:	2800      	cmp	r0, #0
 80091c2:	d139      	bne.n	8009238 <_dtoa_r+0x320>
 80091c4:	4b16      	ldr	r3, [pc, #88]	; (8009220 <_dtoa_r+0x308>)
 80091c6:	4602      	mov	r2, r0
 80091c8:	f240 11af 	movw	r1, #431	; 0x1af
 80091cc:	e6bd      	b.n	8008f4a <_dtoa_r+0x32>
 80091ce:	2301      	movs	r3, #1
 80091d0:	e7e1      	b.n	8009196 <_dtoa_r+0x27e>
 80091d2:	2501      	movs	r5, #1
 80091d4:	2300      	movs	r3, #0
 80091d6:	9307      	str	r3, [sp, #28]
 80091d8:	9509      	str	r5, [sp, #36]	; 0x24
 80091da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091de:	9301      	str	r3, [sp, #4]
 80091e0:	9304      	str	r3, [sp, #16]
 80091e2:	2200      	movs	r2, #0
 80091e4:	2312      	movs	r3, #18
 80091e6:	e7d1      	b.n	800918c <_dtoa_r+0x274>
 80091e8:	636f4361 	.word	0x636f4361
 80091ec:	3fd287a7 	.word	0x3fd287a7
 80091f0:	8b60c8b3 	.word	0x8b60c8b3
 80091f4:	3fc68a28 	.word	0x3fc68a28
 80091f8:	509f79fb 	.word	0x509f79fb
 80091fc:	3fd34413 	.word	0x3fd34413
 8009200:	0800ad39 	.word	0x0800ad39
 8009204:	0800ad50 	.word	0x0800ad50
 8009208:	7ff00000 	.word	0x7ff00000
 800920c:	0800ad35 	.word	0x0800ad35
 8009210:	0800ad2c 	.word	0x0800ad2c
 8009214:	0800ad09 	.word	0x0800ad09
 8009218:	3ff80000 	.word	0x3ff80000
 800921c:	0800ae40 	.word	0x0800ae40
 8009220:	0800ada8 	.word	0x0800ada8
 8009224:	2301      	movs	r3, #1
 8009226:	9309      	str	r3, [sp, #36]	; 0x24
 8009228:	e7d7      	b.n	80091da <_dtoa_r+0x2c2>
 800922a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800922c:	9301      	str	r3, [sp, #4]
 800922e:	9304      	str	r3, [sp, #16]
 8009230:	e7ba      	b.n	80091a8 <_dtoa_r+0x290>
 8009232:	3101      	adds	r1, #1
 8009234:	0052      	lsls	r2, r2, #1
 8009236:	e7ba      	b.n	80091ae <_dtoa_r+0x296>
 8009238:	69e3      	ldr	r3, [r4, #28]
 800923a:	9a00      	ldr	r2, [sp, #0]
 800923c:	601a      	str	r2, [r3, #0]
 800923e:	9b04      	ldr	r3, [sp, #16]
 8009240:	2b0e      	cmp	r3, #14
 8009242:	f200 80a8 	bhi.w	8009396 <_dtoa_r+0x47e>
 8009246:	2d00      	cmp	r5, #0
 8009248:	f000 80a5 	beq.w	8009396 <_dtoa_r+0x47e>
 800924c:	f1bb 0f00 	cmp.w	fp, #0
 8009250:	dd38      	ble.n	80092c4 <_dtoa_r+0x3ac>
 8009252:	4bc0      	ldr	r3, [pc, #768]	; (8009554 <_dtoa_r+0x63c>)
 8009254:	f00b 020f 	and.w	r2, fp, #15
 8009258:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800925c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009260:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009264:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009268:	d019      	beq.n	800929e <_dtoa_r+0x386>
 800926a:	4bbb      	ldr	r3, [pc, #748]	; (8009558 <_dtoa_r+0x640>)
 800926c:	ec51 0b18 	vmov	r0, r1, d8
 8009270:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009274:	f7f7 fb0a 	bl	800088c <__aeabi_ddiv>
 8009278:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800927c:	f008 080f 	and.w	r8, r8, #15
 8009280:	2503      	movs	r5, #3
 8009282:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009558 <_dtoa_r+0x640>
 8009286:	f1b8 0f00 	cmp.w	r8, #0
 800928a:	d10a      	bne.n	80092a2 <_dtoa_r+0x38a>
 800928c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009290:	4632      	mov	r2, r6
 8009292:	463b      	mov	r3, r7
 8009294:	f7f7 fafa 	bl	800088c <__aeabi_ddiv>
 8009298:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800929c:	e02b      	b.n	80092f6 <_dtoa_r+0x3de>
 800929e:	2502      	movs	r5, #2
 80092a0:	e7ef      	b.n	8009282 <_dtoa_r+0x36a>
 80092a2:	f018 0f01 	tst.w	r8, #1
 80092a6:	d008      	beq.n	80092ba <_dtoa_r+0x3a2>
 80092a8:	4630      	mov	r0, r6
 80092aa:	4639      	mov	r1, r7
 80092ac:	e9d9 2300 	ldrd	r2, r3, [r9]
 80092b0:	f7f7 f9c2 	bl	8000638 <__aeabi_dmul>
 80092b4:	3501      	adds	r5, #1
 80092b6:	4606      	mov	r6, r0
 80092b8:	460f      	mov	r7, r1
 80092ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80092be:	f109 0908 	add.w	r9, r9, #8
 80092c2:	e7e0      	b.n	8009286 <_dtoa_r+0x36e>
 80092c4:	f000 809f 	beq.w	8009406 <_dtoa_r+0x4ee>
 80092c8:	f1cb 0600 	rsb	r6, fp, #0
 80092cc:	4ba1      	ldr	r3, [pc, #644]	; (8009554 <_dtoa_r+0x63c>)
 80092ce:	4fa2      	ldr	r7, [pc, #648]	; (8009558 <_dtoa_r+0x640>)
 80092d0:	f006 020f 	and.w	r2, r6, #15
 80092d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092dc:	ec51 0b18 	vmov	r0, r1, d8
 80092e0:	f7f7 f9aa 	bl	8000638 <__aeabi_dmul>
 80092e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092e8:	1136      	asrs	r6, r6, #4
 80092ea:	2300      	movs	r3, #0
 80092ec:	2502      	movs	r5, #2
 80092ee:	2e00      	cmp	r6, #0
 80092f0:	d17e      	bne.n	80093f0 <_dtoa_r+0x4d8>
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1d0      	bne.n	8009298 <_dtoa_r+0x380>
 80092f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092f8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	f000 8084 	beq.w	800940a <_dtoa_r+0x4f2>
 8009302:	4b96      	ldr	r3, [pc, #600]	; (800955c <_dtoa_r+0x644>)
 8009304:	2200      	movs	r2, #0
 8009306:	4640      	mov	r0, r8
 8009308:	4649      	mov	r1, r9
 800930a:	f7f7 fc07 	bl	8000b1c <__aeabi_dcmplt>
 800930e:	2800      	cmp	r0, #0
 8009310:	d07b      	beq.n	800940a <_dtoa_r+0x4f2>
 8009312:	9b04      	ldr	r3, [sp, #16]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d078      	beq.n	800940a <_dtoa_r+0x4f2>
 8009318:	9b01      	ldr	r3, [sp, #4]
 800931a:	2b00      	cmp	r3, #0
 800931c:	dd39      	ble.n	8009392 <_dtoa_r+0x47a>
 800931e:	4b90      	ldr	r3, [pc, #576]	; (8009560 <_dtoa_r+0x648>)
 8009320:	2200      	movs	r2, #0
 8009322:	4640      	mov	r0, r8
 8009324:	4649      	mov	r1, r9
 8009326:	f7f7 f987 	bl	8000638 <__aeabi_dmul>
 800932a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800932e:	9e01      	ldr	r6, [sp, #4]
 8009330:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8009334:	3501      	adds	r5, #1
 8009336:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800933a:	4628      	mov	r0, r5
 800933c:	f7f7 f912 	bl	8000564 <__aeabi_i2d>
 8009340:	4642      	mov	r2, r8
 8009342:	464b      	mov	r3, r9
 8009344:	f7f7 f978 	bl	8000638 <__aeabi_dmul>
 8009348:	4b86      	ldr	r3, [pc, #536]	; (8009564 <_dtoa_r+0x64c>)
 800934a:	2200      	movs	r2, #0
 800934c:	f7f6 ffbe 	bl	80002cc <__adddf3>
 8009350:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009354:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009358:	9303      	str	r3, [sp, #12]
 800935a:	2e00      	cmp	r6, #0
 800935c:	d158      	bne.n	8009410 <_dtoa_r+0x4f8>
 800935e:	4b82      	ldr	r3, [pc, #520]	; (8009568 <_dtoa_r+0x650>)
 8009360:	2200      	movs	r2, #0
 8009362:	4640      	mov	r0, r8
 8009364:	4649      	mov	r1, r9
 8009366:	f7f6 ffaf 	bl	80002c8 <__aeabi_dsub>
 800936a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800936e:	4680      	mov	r8, r0
 8009370:	4689      	mov	r9, r1
 8009372:	f7f7 fbf1 	bl	8000b58 <__aeabi_dcmpgt>
 8009376:	2800      	cmp	r0, #0
 8009378:	f040 8296 	bne.w	80098a8 <_dtoa_r+0x990>
 800937c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009380:	4640      	mov	r0, r8
 8009382:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009386:	4649      	mov	r1, r9
 8009388:	f7f7 fbc8 	bl	8000b1c <__aeabi_dcmplt>
 800938c:	2800      	cmp	r0, #0
 800938e:	f040 8289 	bne.w	80098a4 <_dtoa_r+0x98c>
 8009392:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009396:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009398:	2b00      	cmp	r3, #0
 800939a:	f2c0 814e 	blt.w	800963a <_dtoa_r+0x722>
 800939e:	f1bb 0f0e 	cmp.w	fp, #14
 80093a2:	f300 814a 	bgt.w	800963a <_dtoa_r+0x722>
 80093a6:	4b6b      	ldr	r3, [pc, #428]	; (8009554 <_dtoa_r+0x63c>)
 80093a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80093ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80093b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	f280 80dc 	bge.w	8009570 <_dtoa_r+0x658>
 80093b8:	9b04      	ldr	r3, [sp, #16]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	f300 80d8 	bgt.w	8009570 <_dtoa_r+0x658>
 80093c0:	f040 826f 	bne.w	80098a2 <_dtoa_r+0x98a>
 80093c4:	4b68      	ldr	r3, [pc, #416]	; (8009568 <_dtoa_r+0x650>)
 80093c6:	2200      	movs	r2, #0
 80093c8:	4640      	mov	r0, r8
 80093ca:	4649      	mov	r1, r9
 80093cc:	f7f7 f934 	bl	8000638 <__aeabi_dmul>
 80093d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093d4:	f7f7 fbb6 	bl	8000b44 <__aeabi_dcmpge>
 80093d8:	9e04      	ldr	r6, [sp, #16]
 80093da:	4637      	mov	r7, r6
 80093dc:	2800      	cmp	r0, #0
 80093de:	f040 8245 	bne.w	800986c <_dtoa_r+0x954>
 80093e2:	9d00      	ldr	r5, [sp, #0]
 80093e4:	2331      	movs	r3, #49	; 0x31
 80093e6:	f805 3b01 	strb.w	r3, [r5], #1
 80093ea:	f10b 0b01 	add.w	fp, fp, #1
 80093ee:	e241      	b.n	8009874 <_dtoa_r+0x95c>
 80093f0:	07f2      	lsls	r2, r6, #31
 80093f2:	d505      	bpl.n	8009400 <_dtoa_r+0x4e8>
 80093f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093f8:	f7f7 f91e 	bl	8000638 <__aeabi_dmul>
 80093fc:	3501      	adds	r5, #1
 80093fe:	2301      	movs	r3, #1
 8009400:	1076      	asrs	r6, r6, #1
 8009402:	3708      	adds	r7, #8
 8009404:	e773      	b.n	80092ee <_dtoa_r+0x3d6>
 8009406:	2502      	movs	r5, #2
 8009408:	e775      	b.n	80092f6 <_dtoa_r+0x3de>
 800940a:	9e04      	ldr	r6, [sp, #16]
 800940c:	465f      	mov	r7, fp
 800940e:	e792      	b.n	8009336 <_dtoa_r+0x41e>
 8009410:	9900      	ldr	r1, [sp, #0]
 8009412:	4b50      	ldr	r3, [pc, #320]	; (8009554 <_dtoa_r+0x63c>)
 8009414:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009418:	4431      	add	r1, r6
 800941a:	9102      	str	r1, [sp, #8]
 800941c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800941e:	eeb0 9a47 	vmov.f32	s18, s14
 8009422:	eef0 9a67 	vmov.f32	s19, s15
 8009426:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800942a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800942e:	2900      	cmp	r1, #0
 8009430:	d044      	beq.n	80094bc <_dtoa_r+0x5a4>
 8009432:	494e      	ldr	r1, [pc, #312]	; (800956c <_dtoa_r+0x654>)
 8009434:	2000      	movs	r0, #0
 8009436:	f7f7 fa29 	bl	800088c <__aeabi_ddiv>
 800943a:	ec53 2b19 	vmov	r2, r3, d9
 800943e:	f7f6 ff43 	bl	80002c8 <__aeabi_dsub>
 8009442:	9d00      	ldr	r5, [sp, #0]
 8009444:	ec41 0b19 	vmov	d9, r0, r1
 8009448:	4649      	mov	r1, r9
 800944a:	4640      	mov	r0, r8
 800944c:	f7f7 fba4 	bl	8000b98 <__aeabi_d2iz>
 8009450:	4606      	mov	r6, r0
 8009452:	f7f7 f887 	bl	8000564 <__aeabi_i2d>
 8009456:	4602      	mov	r2, r0
 8009458:	460b      	mov	r3, r1
 800945a:	4640      	mov	r0, r8
 800945c:	4649      	mov	r1, r9
 800945e:	f7f6 ff33 	bl	80002c8 <__aeabi_dsub>
 8009462:	3630      	adds	r6, #48	; 0x30
 8009464:	f805 6b01 	strb.w	r6, [r5], #1
 8009468:	ec53 2b19 	vmov	r2, r3, d9
 800946c:	4680      	mov	r8, r0
 800946e:	4689      	mov	r9, r1
 8009470:	f7f7 fb54 	bl	8000b1c <__aeabi_dcmplt>
 8009474:	2800      	cmp	r0, #0
 8009476:	d164      	bne.n	8009542 <_dtoa_r+0x62a>
 8009478:	4642      	mov	r2, r8
 800947a:	464b      	mov	r3, r9
 800947c:	4937      	ldr	r1, [pc, #220]	; (800955c <_dtoa_r+0x644>)
 800947e:	2000      	movs	r0, #0
 8009480:	f7f6 ff22 	bl	80002c8 <__aeabi_dsub>
 8009484:	ec53 2b19 	vmov	r2, r3, d9
 8009488:	f7f7 fb48 	bl	8000b1c <__aeabi_dcmplt>
 800948c:	2800      	cmp	r0, #0
 800948e:	f040 80b6 	bne.w	80095fe <_dtoa_r+0x6e6>
 8009492:	9b02      	ldr	r3, [sp, #8]
 8009494:	429d      	cmp	r5, r3
 8009496:	f43f af7c 	beq.w	8009392 <_dtoa_r+0x47a>
 800949a:	4b31      	ldr	r3, [pc, #196]	; (8009560 <_dtoa_r+0x648>)
 800949c:	ec51 0b19 	vmov	r0, r1, d9
 80094a0:	2200      	movs	r2, #0
 80094a2:	f7f7 f8c9 	bl	8000638 <__aeabi_dmul>
 80094a6:	4b2e      	ldr	r3, [pc, #184]	; (8009560 <_dtoa_r+0x648>)
 80094a8:	ec41 0b19 	vmov	d9, r0, r1
 80094ac:	2200      	movs	r2, #0
 80094ae:	4640      	mov	r0, r8
 80094b0:	4649      	mov	r1, r9
 80094b2:	f7f7 f8c1 	bl	8000638 <__aeabi_dmul>
 80094b6:	4680      	mov	r8, r0
 80094b8:	4689      	mov	r9, r1
 80094ba:	e7c5      	b.n	8009448 <_dtoa_r+0x530>
 80094bc:	ec51 0b17 	vmov	r0, r1, d7
 80094c0:	f7f7 f8ba 	bl	8000638 <__aeabi_dmul>
 80094c4:	9b02      	ldr	r3, [sp, #8]
 80094c6:	9d00      	ldr	r5, [sp, #0]
 80094c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80094ca:	ec41 0b19 	vmov	d9, r0, r1
 80094ce:	4649      	mov	r1, r9
 80094d0:	4640      	mov	r0, r8
 80094d2:	f7f7 fb61 	bl	8000b98 <__aeabi_d2iz>
 80094d6:	4606      	mov	r6, r0
 80094d8:	f7f7 f844 	bl	8000564 <__aeabi_i2d>
 80094dc:	3630      	adds	r6, #48	; 0x30
 80094de:	4602      	mov	r2, r0
 80094e0:	460b      	mov	r3, r1
 80094e2:	4640      	mov	r0, r8
 80094e4:	4649      	mov	r1, r9
 80094e6:	f7f6 feef 	bl	80002c8 <__aeabi_dsub>
 80094ea:	f805 6b01 	strb.w	r6, [r5], #1
 80094ee:	9b02      	ldr	r3, [sp, #8]
 80094f0:	429d      	cmp	r5, r3
 80094f2:	4680      	mov	r8, r0
 80094f4:	4689      	mov	r9, r1
 80094f6:	f04f 0200 	mov.w	r2, #0
 80094fa:	d124      	bne.n	8009546 <_dtoa_r+0x62e>
 80094fc:	4b1b      	ldr	r3, [pc, #108]	; (800956c <_dtoa_r+0x654>)
 80094fe:	ec51 0b19 	vmov	r0, r1, d9
 8009502:	f7f6 fee3 	bl	80002cc <__adddf3>
 8009506:	4602      	mov	r2, r0
 8009508:	460b      	mov	r3, r1
 800950a:	4640      	mov	r0, r8
 800950c:	4649      	mov	r1, r9
 800950e:	f7f7 fb23 	bl	8000b58 <__aeabi_dcmpgt>
 8009512:	2800      	cmp	r0, #0
 8009514:	d173      	bne.n	80095fe <_dtoa_r+0x6e6>
 8009516:	ec53 2b19 	vmov	r2, r3, d9
 800951a:	4914      	ldr	r1, [pc, #80]	; (800956c <_dtoa_r+0x654>)
 800951c:	2000      	movs	r0, #0
 800951e:	f7f6 fed3 	bl	80002c8 <__aeabi_dsub>
 8009522:	4602      	mov	r2, r0
 8009524:	460b      	mov	r3, r1
 8009526:	4640      	mov	r0, r8
 8009528:	4649      	mov	r1, r9
 800952a:	f7f7 faf7 	bl	8000b1c <__aeabi_dcmplt>
 800952e:	2800      	cmp	r0, #0
 8009530:	f43f af2f 	beq.w	8009392 <_dtoa_r+0x47a>
 8009534:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009536:	1e6b      	subs	r3, r5, #1
 8009538:	930f      	str	r3, [sp, #60]	; 0x3c
 800953a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800953e:	2b30      	cmp	r3, #48	; 0x30
 8009540:	d0f8      	beq.n	8009534 <_dtoa_r+0x61c>
 8009542:	46bb      	mov	fp, r7
 8009544:	e04a      	b.n	80095dc <_dtoa_r+0x6c4>
 8009546:	4b06      	ldr	r3, [pc, #24]	; (8009560 <_dtoa_r+0x648>)
 8009548:	f7f7 f876 	bl	8000638 <__aeabi_dmul>
 800954c:	4680      	mov	r8, r0
 800954e:	4689      	mov	r9, r1
 8009550:	e7bd      	b.n	80094ce <_dtoa_r+0x5b6>
 8009552:	bf00      	nop
 8009554:	0800ae40 	.word	0x0800ae40
 8009558:	0800ae18 	.word	0x0800ae18
 800955c:	3ff00000 	.word	0x3ff00000
 8009560:	40240000 	.word	0x40240000
 8009564:	401c0000 	.word	0x401c0000
 8009568:	40140000 	.word	0x40140000
 800956c:	3fe00000 	.word	0x3fe00000
 8009570:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009574:	9d00      	ldr	r5, [sp, #0]
 8009576:	4642      	mov	r2, r8
 8009578:	464b      	mov	r3, r9
 800957a:	4630      	mov	r0, r6
 800957c:	4639      	mov	r1, r7
 800957e:	f7f7 f985 	bl	800088c <__aeabi_ddiv>
 8009582:	f7f7 fb09 	bl	8000b98 <__aeabi_d2iz>
 8009586:	9001      	str	r0, [sp, #4]
 8009588:	f7f6 ffec 	bl	8000564 <__aeabi_i2d>
 800958c:	4642      	mov	r2, r8
 800958e:	464b      	mov	r3, r9
 8009590:	f7f7 f852 	bl	8000638 <__aeabi_dmul>
 8009594:	4602      	mov	r2, r0
 8009596:	460b      	mov	r3, r1
 8009598:	4630      	mov	r0, r6
 800959a:	4639      	mov	r1, r7
 800959c:	f7f6 fe94 	bl	80002c8 <__aeabi_dsub>
 80095a0:	9e01      	ldr	r6, [sp, #4]
 80095a2:	9f04      	ldr	r7, [sp, #16]
 80095a4:	3630      	adds	r6, #48	; 0x30
 80095a6:	f805 6b01 	strb.w	r6, [r5], #1
 80095aa:	9e00      	ldr	r6, [sp, #0]
 80095ac:	1bae      	subs	r6, r5, r6
 80095ae:	42b7      	cmp	r7, r6
 80095b0:	4602      	mov	r2, r0
 80095b2:	460b      	mov	r3, r1
 80095b4:	d134      	bne.n	8009620 <_dtoa_r+0x708>
 80095b6:	f7f6 fe89 	bl	80002cc <__adddf3>
 80095ba:	4642      	mov	r2, r8
 80095bc:	464b      	mov	r3, r9
 80095be:	4606      	mov	r6, r0
 80095c0:	460f      	mov	r7, r1
 80095c2:	f7f7 fac9 	bl	8000b58 <__aeabi_dcmpgt>
 80095c6:	b9c8      	cbnz	r0, 80095fc <_dtoa_r+0x6e4>
 80095c8:	4642      	mov	r2, r8
 80095ca:	464b      	mov	r3, r9
 80095cc:	4630      	mov	r0, r6
 80095ce:	4639      	mov	r1, r7
 80095d0:	f7f7 fa9a 	bl	8000b08 <__aeabi_dcmpeq>
 80095d4:	b110      	cbz	r0, 80095dc <_dtoa_r+0x6c4>
 80095d6:	9b01      	ldr	r3, [sp, #4]
 80095d8:	07db      	lsls	r3, r3, #31
 80095da:	d40f      	bmi.n	80095fc <_dtoa_r+0x6e4>
 80095dc:	4651      	mov	r1, sl
 80095de:	4620      	mov	r0, r4
 80095e0:	f000 fc2e 	bl	8009e40 <_Bfree>
 80095e4:	2300      	movs	r3, #0
 80095e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095e8:	702b      	strb	r3, [r5, #0]
 80095ea:	f10b 0301 	add.w	r3, fp, #1
 80095ee:	6013      	str	r3, [r2, #0]
 80095f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	f43f ace2 	beq.w	8008fbc <_dtoa_r+0xa4>
 80095f8:	601d      	str	r5, [r3, #0]
 80095fa:	e4df      	b.n	8008fbc <_dtoa_r+0xa4>
 80095fc:	465f      	mov	r7, fp
 80095fe:	462b      	mov	r3, r5
 8009600:	461d      	mov	r5, r3
 8009602:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009606:	2a39      	cmp	r2, #57	; 0x39
 8009608:	d106      	bne.n	8009618 <_dtoa_r+0x700>
 800960a:	9a00      	ldr	r2, [sp, #0]
 800960c:	429a      	cmp	r2, r3
 800960e:	d1f7      	bne.n	8009600 <_dtoa_r+0x6e8>
 8009610:	9900      	ldr	r1, [sp, #0]
 8009612:	2230      	movs	r2, #48	; 0x30
 8009614:	3701      	adds	r7, #1
 8009616:	700a      	strb	r2, [r1, #0]
 8009618:	781a      	ldrb	r2, [r3, #0]
 800961a:	3201      	adds	r2, #1
 800961c:	701a      	strb	r2, [r3, #0]
 800961e:	e790      	b.n	8009542 <_dtoa_r+0x62a>
 8009620:	4ba3      	ldr	r3, [pc, #652]	; (80098b0 <_dtoa_r+0x998>)
 8009622:	2200      	movs	r2, #0
 8009624:	f7f7 f808 	bl	8000638 <__aeabi_dmul>
 8009628:	2200      	movs	r2, #0
 800962a:	2300      	movs	r3, #0
 800962c:	4606      	mov	r6, r0
 800962e:	460f      	mov	r7, r1
 8009630:	f7f7 fa6a 	bl	8000b08 <__aeabi_dcmpeq>
 8009634:	2800      	cmp	r0, #0
 8009636:	d09e      	beq.n	8009576 <_dtoa_r+0x65e>
 8009638:	e7d0      	b.n	80095dc <_dtoa_r+0x6c4>
 800963a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800963c:	2a00      	cmp	r2, #0
 800963e:	f000 80ca 	beq.w	80097d6 <_dtoa_r+0x8be>
 8009642:	9a07      	ldr	r2, [sp, #28]
 8009644:	2a01      	cmp	r2, #1
 8009646:	f300 80ad 	bgt.w	80097a4 <_dtoa_r+0x88c>
 800964a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800964c:	2a00      	cmp	r2, #0
 800964e:	f000 80a5 	beq.w	800979c <_dtoa_r+0x884>
 8009652:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009656:	9e08      	ldr	r6, [sp, #32]
 8009658:	9d05      	ldr	r5, [sp, #20]
 800965a:	9a05      	ldr	r2, [sp, #20]
 800965c:	441a      	add	r2, r3
 800965e:	9205      	str	r2, [sp, #20]
 8009660:	9a06      	ldr	r2, [sp, #24]
 8009662:	2101      	movs	r1, #1
 8009664:	441a      	add	r2, r3
 8009666:	4620      	mov	r0, r4
 8009668:	9206      	str	r2, [sp, #24]
 800966a:	f000 fc9f 	bl	8009fac <__i2b>
 800966e:	4607      	mov	r7, r0
 8009670:	b165      	cbz	r5, 800968c <_dtoa_r+0x774>
 8009672:	9b06      	ldr	r3, [sp, #24]
 8009674:	2b00      	cmp	r3, #0
 8009676:	dd09      	ble.n	800968c <_dtoa_r+0x774>
 8009678:	42ab      	cmp	r3, r5
 800967a:	9a05      	ldr	r2, [sp, #20]
 800967c:	bfa8      	it	ge
 800967e:	462b      	movge	r3, r5
 8009680:	1ad2      	subs	r2, r2, r3
 8009682:	9205      	str	r2, [sp, #20]
 8009684:	9a06      	ldr	r2, [sp, #24]
 8009686:	1aed      	subs	r5, r5, r3
 8009688:	1ad3      	subs	r3, r2, r3
 800968a:	9306      	str	r3, [sp, #24]
 800968c:	9b08      	ldr	r3, [sp, #32]
 800968e:	b1f3      	cbz	r3, 80096ce <_dtoa_r+0x7b6>
 8009690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009692:	2b00      	cmp	r3, #0
 8009694:	f000 80a3 	beq.w	80097de <_dtoa_r+0x8c6>
 8009698:	2e00      	cmp	r6, #0
 800969a:	dd10      	ble.n	80096be <_dtoa_r+0x7a6>
 800969c:	4639      	mov	r1, r7
 800969e:	4632      	mov	r2, r6
 80096a0:	4620      	mov	r0, r4
 80096a2:	f000 fd43 	bl	800a12c <__pow5mult>
 80096a6:	4652      	mov	r2, sl
 80096a8:	4601      	mov	r1, r0
 80096aa:	4607      	mov	r7, r0
 80096ac:	4620      	mov	r0, r4
 80096ae:	f000 fc93 	bl	8009fd8 <__multiply>
 80096b2:	4651      	mov	r1, sl
 80096b4:	4680      	mov	r8, r0
 80096b6:	4620      	mov	r0, r4
 80096b8:	f000 fbc2 	bl	8009e40 <_Bfree>
 80096bc:	46c2      	mov	sl, r8
 80096be:	9b08      	ldr	r3, [sp, #32]
 80096c0:	1b9a      	subs	r2, r3, r6
 80096c2:	d004      	beq.n	80096ce <_dtoa_r+0x7b6>
 80096c4:	4651      	mov	r1, sl
 80096c6:	4620      	mov	r0, r4
 80096c8:	f000 fd30 	bl	800a12c <__pow5mult>
 80096cc:	4682      	mov	sl, r0
 80096ce:	2101      	movs	r1, #1
 80096d0:	4620      	mov	r0, r4
 80096d2:	f000 fc6b 	bl	8009fac <__i2b>
 80096d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096d8:	2b00      	cmp	r3, #0
 80096da:	4606      	mov	r6, r0
 80096dc:	f340 8081 	ble.w	80097e2 <_dtoa_r+0x8ca>
 80096e0:	461a      	mov	r2, r3
 80096e2:	4601      	mov	r1, r0
 80096e4:	4620      	mov	r0, r4
 80096e6:	f000 fd21 	bl	800a12c <__pow5mult>
 80096ea:	9b07      	ldr	r3, [sp, #28]
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	4606      	mov	r6, r0
 80096f0:	dd7a      	ble.n	80097e8 <_dtoa_r+0x8d0>
 80096f2:	f04f 0800 	mov.w	r8, #0
 80096f6:	6933      	ldr	r3, [r6, #16]
 80096f8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80096fc:	6918      	ldr	r0, [r3, #16]
 80096fe:	f000 fc07 	bl	8009f10 <__hi0bits>
 8009702:	f1c0 0020 	rsb	r0, r0, #32
 8009706:	9b06      	ldr	r3, [sp, #24]
 8009708:	4418      	add	r0, r3
 800970a:	f010 001f 	ands.w	r0, r0, #31
 800970e:	f000 8094 	beq.w	800983a <_dtoa_r+0x922>
 8009712:	f1c0 0320 	rsb	r3, r0, #32
 8009716:	2b04      	cmp	r3, #4
 8009718:	f340 8085 	ble.w	8009826 <_dtoa_r+0x90e>
 800971c:	9b05      	ldr	r3, [sp, #20]
 800971e:	f1c0 001c 	rsb	r0, r0, #28
 8009722:	4403      	add	r3, r0
 8009724:	9305      	str	r3, [sp, #20]
 8009726:	9b06      	ldr	r3, [sp, #24]
 8009728:	4403      	add	r3, r0
 800972a:	4405      	add	r5, r0
 800972c:	9306      	str	r3, [sp, #24]
 800972e:	9b05      	ldr	r3, [sp, #20]
 8009730:	2b00      	cmp	r3, #0
 8009732:	dd05      	ble.n	8009740 <_dtoa_r+0x828>
 8009734:	4651      	mov	r1, sl
 8009736:	461a      	mov	r2, r3
 8009738:	4620      	mov	r0, r4
 800973a:	f000 fd51 	bl	800a1e0 <__lshift>
 800973e:	4682      	mov	sl, r0
 8009740:	9b06      	ldr	r3, [sp, #24]
 8009742:	2b00      	cmp	r3, #0
 8009744:	dd05      	ble.n	8009752 <_dtoa_r+0x83a>
 8009746:	4631      	mov	r1, r6
 8009748:	461a      	mov	r2, r3
 800974a:	4620      	mov	r0, r4
 800974c:	f000 fd48 	bl	800a1e0 <__lshift>
 8009750:	4606      	mov	r6, r0
 8009752:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009754:	2b00      	cmp	r3, #0
 8009756:	d072      	beq.n	800983e <_dtoa_r+0x926>
 8009758:	4631      	mov	r1, r6
 800975a:	4650      	mov	r0, sl
 800975c:	f000 fdac 	bl	800a2b8 <__mcmp>
 8009760:	2800      	cmp	r0, #0
 8009762:	da6c      	bge.n	800983e <_dtoa_r+0x926>
 8009764:	2300      	movs	r3, #0
 8009766:	4651      	mov	r1, sl
 8009768:	220a      	movs	r2, #10
 800976a:	4620      	mov	r0, r4
 800976c:	f000 fb8a 	bl	8009e84 <__multadd>
 8009770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009772:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009776:	4682      	mov	sl, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	f000 81b0 	beq.w	8009ade <_dtoa_r+0xbc6>
 800977e:	2300      	movs	r3, #0
 8009780:	4639      	mov	r1, r7
 8009782:	220a      	movs	r2, #10
 8009784:	4620      	mov	r0, r4
 8009786:	f000 fb7d 	bl	8009e84 <__multadd>
 800978a:	9b01      	ldr	r3, [sp, #4]
 800978c:	2b00      	cmp	r3, #0
 800978e:	4607      	mov	r7, r0
 8009790:	f300 8096 	bgt.w	80098c0 <_dtoa_r+0x9a8>
 8009794:	9b07      	ldr	r3, [sp, #28]
 8009796:	2b02      	cmp	r3, #2
 8009798:	dc59      	bgt.n	800984e <_dtoa_r+0x936>
 800979a:	e091      	b.n	80098c0 <_dtoa_r+0x9a8>
 800979c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800979e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80097a2:	e758      	b.n	8009656 <_dtoa_r+0x73e>
 80097a4:	9b04      	ldr	r3, [sp, #16]
 80097a6:	1e5e      	subs	r6, r3, #1
 80097a8:	9b08      	ldr	r3, [sp, #32]
 80097aa:	42b3      	cmp	r3, r6
 80097ac:	bfbf      	itttt	lt
 80097ae:	9b08      	ldrlt	r3, [sp, #32]
 80097b0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80097b2:	9608      	strlt	r6, [sp, #32]
 80097b4:	1af3      	sublt	r3, r6, r3
 80097b6:	bfb4      	ite	lt
 80097b8:	18d2      	addlt	r2, r2, r3
 80097ba:	1b9e      	subge	r6, r3, r6
 80097bc:	9b04      	ldr	r3, [sp, #16]
 80097be:	bfbc      	itt	lt
 80097c0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80097c2:	2600      	movlt	r6, #0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	bfb7      	itett	lt
 80097c8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80097cc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80097d0:	1a9d      	sublt	r5, r3, r2
 80097d2:	2300      	movlt	r3, #0
 80097d4:	e741      	b.n	800965a <_dtoa_r+0x742>
 80097d6:	9e08      	ldr	r6, [sp, #32]
 80097d8:	9d05      	ldr	r5, [sp, #20]
 80097da:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80097dc:	e748      	b.n	8009670 <_dtoa_r+0x758>
 80097de:	9a08      	ldr	r2, [sp, #32]
 80097e0:	e770      	b.n	80096c4 <_dtoa_r+0x7ac>
 80097e2:	9b07      	ldr	r3, [sp, #28]
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	dc19      	bgt.n	800981c <_dtoa_r+0x904>
 80097e8:	9b02      	ldr	r3, [sp, #8]
 80097ea:	b9bb      	cbnz	r3, 800981c <_dtoa_r+0x904>
 80097ec:	9b03      	ldr	r3, [sp, #12]
 80097ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097f2:	b99b      	cbnz	r3, 800981c <_dtoa_r+0x904>
 80097f4:	9b03      	ldr	r3, [sp, #12]
 80097f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80097fa:	0d1b      	lsrs	r3, r3, #20
 80097fc:	051b      	lsls	r3, r3, #20
 80097fe:	b183      	cbz	r3, 8009822 <_dtoa_r+0x90a>
 8009800:	9b05      	ldr	r3, [sp, #20]
 8009802:	3301      	adds	r3, #1
 8009804:	9305      	str	r3, [sp, #20]
 8009806:	9b06      	ldr	r3, [sp, #24]
 8009808:	3301      	adds	r3, #1
 800980a:	9306      	str	r3, [sp, #24]
 800980c:	f04f 0801 	mov.w	r8, #1
 8009810:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009812:	2b00      	cmp	r3, #0
 8009814:	f47f af6f 	bne.w	80096f6 <_dtoa_r+0x7de>
 8009818:	2001      	movs	r0, #1
 800981a:	e774      	b.n	8009706 <_dtoa_r+0x7ee>
 800981c:	f04f 0800 	mov.w	r8, #0
 8009820:	e7f6      	b.n	8009810 <_dtoa_r+0x8f8>
 8009822:	4698      	mov	r8, r3
 8009824:	e7f4      	b.n	8009810 <_dtoa_r+0x8f8>
 8009826:	d082      	beq.n	800972e <_dtoa_r+0x816>
 8009828:	9a05      	ldr	r2, [sp, #20]
 800982a:	331c      	adds	r3, #28
 800982c:	441a      	add	r2, r3
 800982e:	9205      	str	r2, [sp, #20]
 8009830:	9a06      	ldr	r2, [sp, #24]
 8009832:	441a      	add	r2, r3
 8009834:	441d      	add	r5, r3
 8009836:	9206      	str	r2, [sp, #24]
 8009838:	e779      	b.n	800972e <_dtoa_r+0x816>
 800983a:	4603      	mov	r3, r0
 800983c:	e7f4      	b.n	8009828 <_dtoa_r+0x910>
 800983e:	9b04      	ldr	r3, [sp, #16]
 8009840:	2b00      	cmp	r3, #0
 8009842:	dc37      	bgt.n	80098b4 <_dtoa_r+0x99c>
 8009844:	9b07      	ldr	r3, [sp, #28]
 8009846:	2b02      	cmp	r3, #2
 8009848:	dd34      	ble.n	80098b4 <_dtoa_r+0x99c>
 800984a:	9b04      	ldr	r3, [sp, #16]
 800984c:	9301      	str	r3, [sp, #4]
 800984e:	9b01      	ldr	r3, [sp, #4]
 8009850:	b963      	cbnz	r3, 800986c <_dtoa_r+0x954>
 8009852:	4631      	mov	r1, r6
 8009854:	2205      	movs	r2, #5
 8009856:	4620      	mov	r0, r4
 8009858:	f000 fb14 	bl	8009e84 <__multadd>
 800985c:	4601      	mov	r1, r0
 800985e:	4606      	mov	r6, r0
 8009860:	4650      	mov	r0, sl
 8009862:	f000 fd29 	bl	800a2b8 <__mcmp>
 8009866:	2800      	cmp	r0, #0
 8009868:	f73f adbb 	bgt.w	80093e2 <_dtoa_r+0x4ca>
 800986c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800986e:	9d00      	ldr	r5, [sp, #0]
 8009870:	ea6f 0b03 	mvn.w	fp, r3
 8009874:	f04f 0800 	mov.w	r8, #0
 8009878:	4631      	mov	r1, r6
 800987a:	4620      	mov	r0, r4
 800987c:	f000 fae0 	bl	8009e40 <_Bfree>
 8009880:	2f00      	cmp	r7, #0
 8009882:	f43f aeab 	beq.w	80095dc <_dtoa_r+0x6c4>
 8009886:	f1b8 0f00 	cmp.w	r8, #0
 800988a:	d005      	beq.n	8009898 <_dtoa_r+0x980>
 800988c:	45b8      	cmp	r8, r7
 800988e:	d003      	beq.n	8009898 <_dtoa_r+0x980>
 8009890:	4641      	mov	r1, r8
 8009892:	4620      	mov	r0, r4
 8009894:	f000 fad4 	bl	8009e40 <_Bfree>
 8009898:	4639      	mov	r1, r7
 800989a:	4620      	mov	r0, r4
 800989c:	f000 fad0 	bl	8009e40 <_Bfree>
 80098a0:	e69c      	b.n	80095dc <_dtoa_r+0x6c4>
 80098a2:	2600      	movs	r6, #0
 80098a4:	4637      	mov	r7, r6
 80098a6:	e7e1      	b.n	800986c <_dtoa_r+0x954>
 80098a8:	46bb      	mov	fp, r7
 80098aa:	4637      	mov	r7, r6
 80098ac:	e599      	b.n	80093e2 <_dtoa_r+0x4ca>
 80098ae:	bf00      	nop
 80098b0:	40240000 	.word	0x40240000
 80098b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	f000 80c8 	beq.w	8009a4c <_dtoa_r+0xb34>
 80098bc:	9b04      	ldr	r3, [sp, #16]
 80098be:	9301      	str	r3, [sp, #4]
 80098c0:	2d00      	cmp	r5, #0
 80098c2:	dd05      	ble.n	80098d0 <_dtoa_r+0x9b8>
 80098c4:	4639      	mov	r1, r7
 80098c6:	462a      	mov	r2, r5
 80098c8:	4620      	mov	r0, r4
 80098ca:	f000 fc89 	bl	800a1e0 <__lshift>
 80098ce:	4607      	mov	r7, r0
 80098d0:	f1b8 0f00 	cmp.w	r8, #0
 80098d4:	d05b      	beq.n	800998e <_dtoa_r+0xa76>
 80098d6:	6879      	ldr	r1, [r7, #4]
 80098d8:	4620      	mov	r0, r4
 80098da:	f000 fa71 	bl	8009dc0 <_Balloc>
 80098de:	4605      	mov	r5, r0
 80098e0:	b928      	cbnz	r0, 80098ee <_dtoa_r+0x9d6>
 80098e2:	4b83      	ldr	r3, [pc, #524]	; (8009af0 <_dtoa_r+0xbd8>)
 80098e4:	4602      	mov	r2, r0
 80098e6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80098ea:	f7ff bb2e 	b.w	8008f4a <_dtoa_r+0x32>
 80098ee:	693a      	ldr	r2, [r7, #16]
 80098f0:	3202      	adds	r2, #2
 80098f2:	0092      	lsls	r2, r2, #2
 80098f4:	f107 010c 	add.w	r1, r7, #12
 80098f8:	300c      	adds	r0, #12
 80098fa:	f000 fe77 	bl	800a5ec <memcpy>
 80098fe:	2201      	movs	r2, #1
 8009900:	4629      	mov	r1, r5
 8009902:	4620      	mov	r0, r4
 8009904:	f000 fc6c 	bl	800a1e0 <__lshift>
 8009908:	9b00      	ldr	r3, [sp, #0]
 800990a:	3301      	adds	r3, #1
 800990c:	9304      	str	r3, [sp, #16]
 800990e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009912:	4413      	add	r3, r2
 8009914:	9308      	str	r3, [sp, #32]
 8009916:	9b02      	ldr	r3, [sp, #8]
 8009918:	f003 0301 	and.w	r3, r3, #1
 800991c:	46b8      	mov	r8, r7
 800991e:	9306      	str	r3, [sp, #24]
 8009920:	4607      	mov	r7, r0
 8009922:	9b04      	ldr	r3, [sp, #16]
 8009924:	4631      	mov	r1, r6
 8009926:	3b01      	subs	r3, #1
 8009928:	4650      	mov	r0, sl
 800992a:	9301      	str	r3, [sp, #4]
 800992c:	f7ff fa6b 	bl	8008e06 <quorem>
 8009930:	4641      	mov	r1, r8
 8009932:	9002      	str	r0, [sp, #8]
 8009934:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009938:	4650      	mov	r0, sl
 800993a:	f000 fcbd 	bl	800a2b8 <__mcmp>
 800993e:	463a      	mov	r2, r7
 8009940:	9005      	str	r0, [sp, #20]
 8009942:	4631      	mov	r1, r6
 8009944:	4620      	mov	r0, r4
 8009946:	f000 fcd3 	bl	800a2f0 <__mdiff>
 800994a:	68c2      	ldr	r2, [r0, #12]
 800994c:	4605      	mov	r5, r0
 800994e:	bb02      	cbnz	r2, 8009992 <_dtoa_r+0xa7a>
 8009950:	4601      	mov	r1, r0
 8009952:	4650      	mov	r0, sl
 8009954:	f000 fcb0 	bl	800a2b8 <__mcmp>
 8009958:	4602      	mov	r2, r0
 800995a:	4629      	mov	r1, r5
 800995c:	4620      	mov	r0, r4
 800995e:	9209      	str	r2, [sp, #36]	; 0x24
 8009960:	f000 fa6e 	bl	8009e40 <_Bfree>
 8009964:	9b07      	ldr	r3, [sp, #28]
 8009966:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009968:	9d04      	ldr	r5, [sp, #16]
 800996a:	ea43 0102 	orr.w	r1, r3, r2
 800996e:	9b06      	ldr	r3, [sp, #24]
 8009970:	4319      	orrs	r1, r3
 8009972:	d110      	bne.n	8009996 <_dtoa_r+0xa7e>
 8009974:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009978:	d029      	beq.n	80099ce <_dtoa_r+0xab6>
 800997a:	9b05      	ldr	r3, [sp, #20]
 800997c:	2b00      	cmp	r3, #0
 800997e:	dd02      	ble.n	8009986 <_dtoa_r+0xa6e>
 8009980:	9b02      	ldr	r3, [sp, #8]
 8009982:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009986:	9b01      	ldr	r3, [sp, #4]
 8009988:	f883 9000 	strb.w	r9, [r3]
 800998c:	e774      	b.n	8009878 <_dtoa_r+0x960>
 800998e:	4638      	mov	r0, r7
 8009990:	e7ba      	b.n	8009908 <_dtoa_r+0x9f0>
 8009992:	2201      	movs	r2, #1
 8009994:	e7e1      	b.n	800995a <_dtoa_r+0xa42>
 8009996:	9b05      	ldr	r3, [sp, #20]
 8009998:	2b00      	cmp	r3, #0
 800999a:	db04      	blt.n	80099a6 <_dtoa_r+0xa8e>
 800999c:	9907      	ldr	r1, [sp, #28]
 800999e:	430b      	orrs	r3, r1
 80099a0:	9906      	ldr	r1, [sp, #24]
 80099a2:	430b      	orrs	r3, r1
 80099a4:	d120      	bne.n	80099e8 <_dtoa_r+0xad0>
 80099a6:	2a00      	cmp	r2, #0
 80099a8:	dded      	ble.n	8009986 <_dtoa_r+0xa6e>
 80099aa:	4651      	mov	r1, sl
 80099ac:	2201      	movs	r2, #1
 80099ae:	4620      	mov	r0, r4
 80099b0:	f000 fc16 	bl	800a1e0 <__lshift>
 80099b4:	4631      	mov	r1, r6
 80099b6:	4682      	mov	sl, r0
 80099b8:	f000 fc7e 	bl	800a2b8 <__mcmp>
 80099bc:	2800      	cmp	r0, #0
 80099be:	dc03      	bgt.n	80099c8 <_dtoa_r+0xab0>
 80099c0:	d1e1      	bne.n	8009986 <_dtoa_r+0xa6e>
 80099c2:	f019 0f01 	tst.w	r9, #1
 80099c6:	d0de      	beq.n	8009986 <_dtoa_r+0xa6e>
 80099c8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80099cc:	d1d8      	bne.n	8009980 <_dtoa_r+0xa68>
 80099ce:	9a01      	ldr	r2, [sp, #4]
 80099d0:	2339      	movs	r3, #57	; 0x39
 80099d2:	7013      	strb	r3, [r2, #0]
 80099d4:	462b      	mov	r3, r5
 80099d6:	461d      	mov	r5, r3
 80099d8:	3b01      	subs	r3, #1
 80099da:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80099de:	2a39      	cmp	r2, #57	; 0x39
 80099e0:	d06c      	beq.n	8009abc <_dtoa_r+0xba4>
 80099e2:	3201      	adds	r2, #1
 80099e4:	701a      	strb	r2, [r3, #0]
 80099e6:	e747      	b.n	8009878 <_dtoa_r+0x960>
 80099e8:	2a00      	cmp	r2, #0
 80099ea:	dd07      	ble.n	80099fc <_dtoa_r+0xae4>
 80099ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80099f0:	d0ed      	beq.n	80099ce <_dtoa_r+0xab6>
 80099f2:	9a01      	ldr	r2, [sp, #4]
 80099f4:	f109 0301 	add.w	r3, r9, #1
 80099f8:	7013      	strb	r3, [r2, #0]
 80099fa:	e73d      	b.n	8009878 <_dtoa_r+0x960>
 80099fc:	9b04      	ldr	r3, [sp, #16]
 80099fe:	9a08      	ldr	r2, [sp, #32]
 8009a00:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d043      	beq.n	8009a90 <_dtoa_r+0xb78>
 8009a08:	4651      	mov	r1, sl
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	220a      	movs	r2, #10
 8009a0e:	4620      	mov	r0, r4
 8009a10:	f000 fa38 	bl	8009e84 <__multadd>
 8009a14:	45b8      	cmp	r8, r7
 8009a16:	4682      	mov	sl, r0
 8009a18:	f04f 0300 	mov.w	r3, #0
 8009a1c:	f04f 020a 	mov.w	r2, #10
 8009a20:	4641      	mov	r1, r8
 8009a22:	4620      	mov	r0, r4
 8009a24:	d107      	bne.n	8009a36 <_dtoa_r+0xb1e>
 8009a26:	f000 fa2d 	bl	8009e84 <__multadd>
 8009a2a:	4680      	mov	r8, r0
 8009a2c:	4607      	mov	r7, r0
 8009a2e:	9b04      	ldr	r3, [sp, #16]
 8009a30:	3301      	adds	r3, #1
 8009a32:	9304      	str	r3, [sp, #16]
 8009a34:	e775      	b.n	8009922 <_dtoa_r+0xa0a>
 8009a36:	f000 fa25 	bl	8009e84 <__multadd>
 8009a3a:	4639      	mov	r1, r7
 8009a3c:	4680      	mov	r8, r0
 8009a3e:	2300      	movs	r3, #0
 8009a40:	220a      	movs	r2, #10
 8009a42:	4620      	mov	r0, r4
 8009a44:	f000 fa1e 	bl	8009e84 <__multadd>
 8009a48:	4607      	mov	r7, r0
 8009a4a:	e7f0      	b.n	8009a2e <_dtoa_r+0xb16>
 8009a4c:	9b04      	ldr	r3, [sp, #16]
 8009a4e:	9301      	str	r3, [sp, #4]
 8009a50:	9d00      	ldr	r5, [sp, #0]
 8009a52:	4631      	mov	r1, r6
 8009a54:	4650      	mov	r0, sl
 8009a56:	f7ff f9d6 	bl	8008e06 <quorem>
 8009a5a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009a5e:	9b00      	ldr	r3, [sp, #0]
 8009a60:	f805 9b01 	strb.w	r9, [r5], #1
 8009a64:	1aea      	subs	r2, r5, r3
 8009a66:	9b01      	ldr	r3, [sp, #4]
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	dd07      	ble.n	8009a7c <_dtoa_r+0xb64>
 8009a6c:	4651      	mov	r1, sl
 8009a6e:	2300      	movs	r3, #0
 8009a70:	220a      	movs	r2, #10
 8009a72:	4620      	mov	r0, r4
 8009a74:	f000 fa06 	bl	8009e84 <__multadd>
 8009a78:	4682      	mov	sl, r0
 8009a7a:	e7ea      	b.n	8009a52 <_dtoa_r+0xb3a>
 8009a7c:	9b01      	ldr	r3, [sp, #4]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	bfc8      	it	gt
 8009a82:	461d      	movgt	r5, r3
 8009a84:	9b00      	ldr	r3, [sp, #0]
 8009a86:	bfd8      	it	le
 8009a88:	2501      	movle	r5, #1
 8009a8a:	441d      	add	r5, r3
 8009a8c:	f04f 0800 	mov.w	r8, #0
 8009a90:	4651      	mov	r1, sl
 8009a92:	2201      	movs	r2, #1
 8009a94:	4620      	mov	r0, r4
 8009a96:	f000 fba3 	bl	800a1e0 <__lshift>
 8009a9a:	4631      	mov	r1, r6
 8009a9c:	4682      	mov	sl, r0
 8009a9e:	f000 fc0b 	bl	800a2b8 <__mcmp>
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	dc96      	bgt.n	80099d4 <_dtoa_r+0xabc>
 8009aa6:	d102      	bne.n	8009aae <_dtoa_r+0xb96>
 8009aa8:	f019 0f01 	tst.w	r9, #1
 8009aac:	d192      	bne.n	80099d4 <_dtoa_r+0xabc>
 8009aae:	462b      	mov	r3, r5
 8009ab0:	461d      	mov	r5, r3
 8009ab2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ab6:	2a30      	cmp	r2, #48	; 0x30
 8009ab8:	d0fa      	beq.n	8009ab0 <_dtoa_r+0xb98>
 8009aba:	e6dd      	b.n	8009878 <_dtoa_r+0x960>
 8009abc:	9a00      	ldr	r2, [sp, #0]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d189      	bne.n	80099d6 <_dtoa_r+0xabe>
 8009ac2:	f10b 0b01 	add.w	fp, fp, #1
 8009ac6:	2331      	movs	r3, #49	; 0x31
 8009ac8:	e796      	b.n	80099f8 <_dtoa_r+0xae0>
 8009aca:	4b0a      	ldr	r3, [pc, #40]	; (8009af4 <_dtoa_r+0xbdc>)
 8009acc:	f7ff ba99 	b.w	8009002 <_dtoa_r+0xea>
 8009ad0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	f47f aa6d 	bne.w	8008fb2 <_dtoa_r+0x9a>
 8009ad8:	4b07      	ldr	r3, [pc, #28]	; (8009af8 <_dtoa_r+0xbe0>)
 8009ada:	f7ff ba92 	b.w	8009002 <_dtoa_r+0xea>
 8009ade:	9b01      	ldr	r3, [sp, #4]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	dcb5      	bgt.n	8009a50 <_dtoa_r+0xb38>
 8009ae4:	9b07      	ldr	r3, [sp, #28]
 8009ae6:	2b02      	cmp	r3, #2
 8009ae8:	f73f aeb1 	bgt.w	800984e <_dtoa_r+0x936>
 8009aec:	e7b0      	b.n	8009a50 <_dtoa_r+0xb38>
 8009aee:	bf00      	nop
 8009af0:	0800ada8 	.word	0x0800ada8
 8009af4:	0800ad08 	.word	0x0800ad08
 8009af8:	0800ad2c 	.word	0x0800ad2c

08009afc <malloc>:
 8009afc:	4b02      	ldr	r3, [pc, #8]	; (8009b08 <malloc+0xc>)
 8009afe:	4601      	mov	r1, r0
 8009b00:	6818      	ldr	r0, [r3, #0]
 8009b02:	f000 b823 	b.w	8009b4c <_malloc_r>
 8009b06:	bf00      	nop
 8009b08:	20000074 	.word	0x20000074

08009b0c <sbrk_aligned>:
 8009b0c:	b570      	push	{r4, r5, r6, lr}
 8009b0e:	4e0e      	ldr	r6, [pc, #56]	; (8009b48 <sbrk_aligned+0x3c>)
 8009b10:	460c      	mov	r4, r1
 8009b12:	6831      	ldr	r1, [r6, #0]
 8009b14:	4605      	mov	r5, r0
 8009b16:	b911      	cbnz	r1, 8009b1e <sbrk_aligned+0x12>
 8009b18:	f000 fd46 	bl	800a5a8 <_sbrk_r>
 8009b1c:	6030      	str	r0, [r6, #0]
 8009b1e:	4621      	mov	r1, r4
 8009b20:	4628      	mov	r0, r5
 8009b22:	f000 fd41 	bl	800a5a8 <_sbrk_r>
 8009b26:	1c43      	adds	r3, r0, #1
 8009b28:	d00a      	beq.n	8009b40 <sbrk_aligned+0x34>
 8009b2a:	1cc4      	adds	r4, r0, #3
 8009b2c:	f024 0403 	bic.w	r4, r4, #3
 8009b30:	42a0      	cmp	r0, r4
 8009b32:	d007      	beq.n	8009b44 <sbrk_aligned+0x38>
 8009b34:	1a21      	subs	r1, r4, r0
 8009b36:	4628      	mov	r0, r5
 8009b38:	f000 fd36 	bl	800a5a8 <_sbrk_r>
 8009b3c:	3001      	adds	r0, #1
 8009b3e:	d101      	bne.n	8009b44 <sbrk_aligned+0x38>
 8009b40:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009b44:	4620      	mov	r0, r4
 8009b46:	bd70      	pop	{r4, r5, r6, pc}
 8009b48:	2000079c 	.word	0x2000079c

08009b4c <_malloc_r>:
 8009b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b50:	1ccd      	adds	r5, r1, #3
 8009b52:	f025 0503 	bic.w	r5, r5, #3
 8009b56:	3508      	adds	r5, #8
 8009b58:	2d0c      	cmp	r5, #12
 8009b5a:	bf38      	it	cc
 8009b5c:	250c      	movcc	r5, #12
 8009b5e:	2d00      	cmp	r5, #0
 8009b60:	4607      	mov	r7, r0
 8009b62:	db01      	blt.n	8009b68 <_malloc_r+0x1c>
 8009b64:	42a9      	cmp	r1, r5
 8009b66:	d905      	bls.n	8009b74 <_malloc_r+0x28>
 8009b68:	230c      	movs	r3, #12
 8009b6a:	603b      	str	r3, [r7, #0]
 8009b6c:	2600      	movs	r6, #0
 8009b6e:	4630      	mov	r0, r6
 8009b70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b74:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009c48 <_malloc_r+0xfc>
 8009b78:	f000 f916 	bl	8009da8 <__malloc_lock>
 8009b7c:	f8d8 3000 	ldr.w	r3, [r8]
 8009b80:	461c      	mov	r4, r3
 8009b82:	bb5c      	cbnz	r4, 8009bdc <_malloc_r+0x90>
 8009b84:	4629      	mov	r1, r5
 8009b86:	4638      	mov	r0, r7
 8009b88:	f7ff ffc0 	bl	8009b0c <sbrk_aligned>
 8009b8c:	1c43      	adds	r3, r0, #1
 8009b8e:	4604      	mov	r4, r0
 8009b90:	d155      	bne.n	8009c3e <_malloc_r+0xf2>
 8009b92:	f8d8 4000 	ldr.w	r4, [r8]
 8009b96:	4626      	mov	r6, r4
 8009b98:	2e00      	cmp	r6, #0
 8009b9a:	d145      	bne.n	8009c28 <_malloc_r+0xdc>
 8009b9c:	2c00      	cmp	r4, #0
 8009b9e:	d048      	beq.n	8009c32 <_malloc_r+0xe6>
 8009ba0:	6823      	ldr	r3, [r4, #0]
 8009ba2:	4631      	mov	r1, r6
 8009ba4:	4638      	mov	r0, r7
 8009ba6:	eb04 0903 	add.w	r9, r4, r3
 8009baa:	f000 fcfd 	bl	800a5a8 <_sbrk_r>
 8009bae:	4581      	cmp	r9, r0
 8009bb0:	d13f      	bne.n	8009c32 <_malloc_r+0xe6>
 8009bb2:	6821      	ldr	r1, [r4, #0]
 8009bb4:	1a6d      	subs	r5, r5, r1
 8009bb6:	4629      	mov	r1, r5
 8009bb8:	4638      	mov	r0, r7
 8009bba:	f7ff ffa7 	bl	8009b0c <sbrk_aligned>
 8009bbe:	3001      	adds	r0, #1
 8009bc0:	d037      	beq.n	8009c32 <_malloc_r+0xe6>
 8009bc2:	6823      	ldr	r3, [r4, #0]
 8009bc4:	442b      	add	r3, r5
 8009bc6:	6023      	str	r3, [r4, #0]
 8009bc8:	f8d8 3000 	ldr.w	r3, [r8]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d038      	beq.n	8009c42 <_malloc_r+0xf6>
 8009bd0:	685a      	ldr	r2, [r3, #4]
 8009bd2:	42a2      	cmp	r2, r4
 8009bd4:	d12b      	bne.n	8009c2e <_malloc_r+0xe2>
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	605a      	str	r2, [r3, #4]
 8009bda:	e00f      	b.n	8009bfc <_malloc_r+0xb0>
 8009bdc:	6822      	ldr	r2, [r4, #0]
 8009bde:	1b52      	subs	r2, r2, r5
 8009be0:	d41f      	bmi.n	8009c22 <_malloc_r+0xd6>
 8009be2:	2a0b      	cmp	r2, #11
 8009be4:	d917      	bls.n	8009c16 <_malloc_r+0xca>
 8009be6:	1961      	adds	r1, r4, r5
 8009be8:	42a3      	cmp	r3, r4
 8009bea:	6025      	str	r5, [r4, #0]
 8009bec:	bf18      	it	ne
 8009bee:	6059      	strne	r1, [r3, #4]
 8009bf0:	6863      	ldr	r3, [r4, #4]
 8009bf2:	bf08      	it	eq
 8009bf4:	f8c8 1000 	streq.w	r1, [r8]
 8009bf8:	5162      	str	r2, [r4, r5]
 8009bfa:	604b      	str	r3, [r1, #4]
 8009bfc:	4638      	mov	r0, r7
 8009bfe:	f104 060b 	add.w	r6, r4, #11
 8009c02:	f000 f8d7 	bl	8009db4 <__malloc_unlock>
 8009c06:	f026 0607 	bic.w	r6, r6, #7
 8009c0a:	1d23      	adds	r3, r4, #4
 8009c0c:	1af2      	subs	r2, r6, r3
 8009c0e:	d0ae      	beq.n	8009b6e <_malloc_r+0x22>
 8009c10:	1b9b      	subs	r3, r3, r6
 8009c12:	50a3      	str	r3, [r4, r2]
 8009c14:	e7ab      	b.n	8009b6e <_malloc_r+0x22>
 8009c16:	42a3      	cmp	r3, r4
 8009c18:	6862      	ldr	r2, [r4, #4]
 8009c1a:	d1dd      	bne.n	8009bd8 <_malloc_r+0x8c>
 8009c1c:	f8c8 2000 	str.w	r2, [r8]
 8009c20:	e7ec      	b.n	8009bfc <_malloc_r+0xb0>
 8009c22:	4623      	mov	r3, r4
 8009c24:	6864      	ldr	r4, [r4, #4]
 8009c26:	e7ac      	b.n	8009b82 <_malloc_r+0x36>
 8009c28:	4634      	mov	r4, r6
 8009c2a:	6876      	ldr	r6, [r6, #4]
 8009c2c:	e7b4      	b.n	8009b98 <_malloc_r+0x4c>
 8009c2e:	4613      	mov	r3, r2
 8009c30:	e7cc      	b.n	8009bcc <_malloc_r+0x80>
 8009c32:	230c      	movs	r3, #12
 8009c34:	603b      	str	r3, [r7, #0]
 8009c36:	4638      	mov	r0, r7
 8009c38:	f000 f8bc 	bl	8009db4 <__malloc_unlock>
 8009c3c:	e797      	b.n	8009b6e <_malloc_r+0x22>
 8009c3e:	6025      	str	r5, [r4, #0]
 8009c40:	e7dc      	b.n	8009bfc <_malloc_r+0xb0>
 8009c42:	605b      	str	r3, [r3, #4]
 8009c44:	deff      	udf	#255	; 0xff
 8009c46:	bf00      	nop
 8009c48:	20000798 	.word	0x20000798

08009c4c <__sflush_r>:
 8009c4c:	898a      	ldrh	r2, [r1, #12]
 8009c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c52:	4605      	mov	r5, r0
 8009c54:	0710      	lsls	r0, r2, #28
 8009c56:	460c      	mov	r4, r1
 8009c58:	d458      	bmi.n	8009d0c <__sflush_r+0xc0>
 8009c5a:	684b      	ldr	r3, [r1, #4]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	dc05      	bgt.n	8009c6c <__sflush_r+0x20>
 8009c60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	dc02      	bgt.n	8009c6c <__sflush_r+0x20>
 8009c66:	2000      	movs	r0, #0
 8009c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c6e:	2e00      	cmp	r6, #0
 8009c70:	d0f9      	beq.n	8009c66 <__sflush_r+0x1a>
 8009c72:	2300      	movs	r3, #0
 8009c74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c78:	682f      	ldr	r7, [r5, #0]
 8009c7a:	6a21      	ldr	r1, [r4, #32]
 8009c7c:	602b      	str	r3, [r5, #0]
 8009c7e:	d032      	beq.n	8009ce6 <__sflush_r+0x9a>
 8009c80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c82:	89a3      	ldrh	r3, [r4, #12]
 8009c84:	075a      	lsls	r2, r3, #29
 8009c86:	d505      	bpl.n	8009c94 <__sflush_r+0x48>
 8009c88:	6863      	ldr	r3, [r4, #4]
 8009c8a:	1ac0      	subs	r0, r0, r3
 8009c8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c8e:	b10b      	cbz	r3, 8009c94 <__sflush_r+0x48>
 8009c90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c92:	1ac0      	subs	r0, r0, r3
 8009c94:	2300      	movs	r3, #0
 8009c96:	4602      	mov	r2, r0
 8009c98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c9a:	6a21      	ldr	r1, [r4, #32]
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	47b0      	blx	r6
 8009ca0:	1c43      	adds	r3, r0, #1
 8009ca2:	89a3      	ldrh	r3, [r4, #12]
 8009ca4:	d106      	bne.n	8009cb4 <__sflush_r+0x68>
 8009ca6:	6829      	ldr	r1, [r5, #0]
 8009ca8:	291d      	cmp	r1, #29
 8009caa:	d82b      	bhi.n	8009d04 <__sflush_r+0xb8>
 8009cac:	4a29      	ldr	r2, [pc, #164]	; (8009d54 <__sflush_r+0x108>)
 8009cae:	410a      	asrs	r2, r1
 8009cb0:	07d6      	lsls	r6, r2, #31
 8009cb2:	d427      	bmi.n	8009d04 <__sflush_r+0xb8>
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	6062      	str	r2, [r4, #4]
 8009cb8:	04d9      	lsls	r1, r3, #19
 8009cba:	6922      	ldr	r2, [r4, #16]
 8009cbc:	6022      	str	r2, [r4, #0]
 8009cbe:	d504      	bpl.n	8009cca <__sflush_r+0x7e>
 8009cc0:	1c42      	adds	r2, r0, #1
 8009cc2:	d101      	bne.n	8009cc8 <__sflush_r+0x7c>
 8009cc4:	682b      	ldr	r3, [r5, #0]
 8009cc6:	b903      	cbnz	r3, 8009cca <__sflush_r+0x7e>
 8009cc8:	6560      	str	r0, [r4, #84]	; 0x54
 8009cca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ccc:	602f      	str	r7, [r5, #0]
 8009cce:	2900      	cmp	r1, #0
 8009cd0:	d0c9      	beq.n	8009c66 <__sflush_r+0x1a>
 8009cd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cd6:	4299      	cmp	r1, r3
 8009cd8:	d002      	beq.n	8009ce0 <__sflush_r+0x94>
 8009cda:	4628      	mov	r0, r5
 8009cdc:	f000 fcc8 	bl	800a670 <_free_r>
 8009ce0:	2000      	movs	r0, #0
 8009ce2:	6360      	str	r0, [r4, #52]	; 0x34
 8009ce4:	e7c0      	b.n	8009c68 <__sflush_r+0x1c>
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	4628      	mov	r0, r5
 8009cea:	47b0      	blx	r6
 8009cec:	1c41      	adds	r1, r0, #1
 8009cee:	d1c8      	bne.n	8009c82 <__sflush_r+0x36>
 8009cf0:	682b      	ldr	r3, [r5, #0]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d0c5      	beq.n	8009c82 <__sflush_r+0x36>
 8009cf6:	2b1d      	cmp	r3, #29
 8009cf8:	d001      	beq.n	8009cfe <__sflush_r+0xb2>
 8009cfa:	2b16      	cmp	r3, #22
 8009cfc:	d101      	bne.n	8009d02 <__sflush_r+0xb6>
 8009cfe:	602f      	str	r7, [r5, #0]
 8009d00:	e7b1      	b.n	8009c66 <__sflush_r+0x1a>
 8009d02:	89a3      	ldrh	r3, [r4, #12]
 8009d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d08:	81a3      	strh	r3, [r4, #12]
 8009d0a:	e7ad      	b.n	8009c68 <__sflush_r+0x1c>
 8009d0c:	690f      	ldr	r7, [r1, #16]
 8009d0e:	2f00      	cmp	r7, #0
 8009d10:	d0a9      	beq.n	8009c66 <__sflush_r+0x1a>
 8009d12:	0793      	lsls	r3, r2, #30
 8009d14:	680e      	ldr	r6, [r1, #0]
 8009d16:	bf08      	it	eq
 8009d18:	694b      	ldreq	r3, [r1, #20]
 8009d1a:	600f      	str	r7, [r1, #0]
 8009d1c:	bf18      	it	ne
 8009d1e:	2300      	movne	r3, #0
 8009d20:	eba6 0807 	sub.w	r8, r6, r7
 8009d24:	608b      	str	r3, [r1, #8]
 8009d26:	f1b8 0f00 	cmp.w	r8, #0
 8009d2a:	dd9c      	ble.n	8009c66 <__sflush_r+0x1a>
 8009d2c:	6a21      	ldr	r1, [r4, #32]
 8009d2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d30:	4643      	mov	r3, r8
 8009d32:	463a      	mov	r2, r7
 8009d34:	4628      	mov	r0, r5
 8009d36:	47b0      	blx	r6
 8009d38:	2800      	cmp	r0, #0
 8009d3a:	dc06      	bgt.n	8009d4a <__sflush_r+0xfe>
 8009d3c:	89a3      	ldrh	r3, [r4, #12]
 8009d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d42:	81a3      	strh	r3, [r4, #12]
 8009d44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d48:	e78e      	b.n	8009c68 <__sflush_r+0x1c>
 8009d4a:	4407      	add	r7, r0
 8009d4c:	eba8 0800 	sub.w	r8, r8, r0
 8009d50:	e7e9      	b.n	8009d26 <__sflush_r+0xda>
 8009d52:	bf00      	nop
 8009d54:	dfbffffe 	.word	0xdfbffffe

08009d58 <_fflush_r>:
 8009d58:	b538      	push	{r3, r4, r5, lr}
 8009d5a:	690b      	ldr	r3, [r1, #16]
 8009d5c:	4605      	mov	r5, r0
 8009d5e:	460c      	mov	r4, r1
 8009d60:	b913      	cbnz	r3, 8009d68 <_fflush_r+0x10>
 8009d62:	2500      	movs	r5, #0
 8009d64:	4628      	mov	r0, r5
 8009d66:	bd38      	pop	{r3, r4, r5, pc}
 8009d68:	b118      	cbz	r0, 8009d72 <_fflush_r+0x1a>
 8009d6a:	6a03      	ldr	r3, [r0, #32]
 8009d6c:	b90b      	cbnz	r3, 8009d72 <_fflush_r+0x1a>
 8009d6e:	f7fe ffdb 	bl	8008d28 <__sinit>
 8009d72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d0f3      	beq.n	8009d62 <_fflush_r+0xa>
 8009d7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009d7c:	07d0      	lsls	r0, r2, #31
 8009d7e:	d404      	bmi.n	8009d8a <_fflush_r+0x32>
 8009d80:	0599      	lsls	r1, r3, #22
 8009d82:	d402      	bmi.n	8009d8a <_fflush_r+0x32>
 8009d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d86:	f7ff f83c 	bl	8008e02 <__retarget_lock_acquire_recursive>
 8009d8a:	4628      	mov	r0, r5
 8009d8c:	4621      	mov	r1, r4
 8009d8e:	f7ff ff5d 	bl	8009c4c <__sflush_r>
 8009d92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d94:	07da      	lsls	r2, r3, #31
 8009d96:	4605      	mov	r5, r0
 8009d98:	d4e4      	bmi.n	8009d64 <_fflush_r+0xc>
 8009d9a:	89a3      	ldrh	r3, [r4, #12]
 8009d9c:	059b      	lsls	r3, r3, #22
 8009d9e:	d4e1      	bmi.n	8009d64 <_fflush_r+0xc>
 8009da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009da2:	f7ff f82f 	bl	8008e04 <__retarget_lock_release_recursive>
 8009da6:	e7dd      	b.n	8009d64 <_fflush_r+0xc>

08009da8 <__malloc_lock>:
 8009da8:	4801      	ldr	r0, [pc, #4]	; (8009db0 <__malloc_lock+0x8>)
 8009daa:	f7ff b82a 	b.w	8008e02 <__retarget_lock_acquire_recursive>
 8009dae:	bf00      	nop
 8009db0:	20000794 	.word	0x20000794

08009db4 <__malloc_unlock>:
 8009db4:	4801      	ldr	r0, [pc, #4]	; (8009dbc <__malloc_unlock+0x8>)
 8009db6:	f7ff b825 	b.w	8008e04 <__retarget_lock_release_recursive>
 8009dba:	bf00      	nop
 8009dbc:	20000794 	.word	0x20000794

08009dc0 <_Balloc>:
 8009dc0:	b570      	push	{r4, r5, r6, lr}
 8009dc2:	69c6      	ldr	r6, [r0, #28]
 8009dc4:	4604      	mov	r4, r0
 8009dc6:	460d      	mov	r5, r1
 8009dc8:	b976      	cbnz	r6, 8009de8 <_Balloc+0x28>
 8009dca:	2010      	movs	r0, #16
 8009dcc:	f7ff fe96 	bl	8009afc <malloc>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	61e0      	str	r0, [r4, #28]
 8009dd4:	b920      	cbnz	r0, 8009de0 <_Balloc+0x20>
 8009dd6:	4b18      	ldr	r3, [pc, #96]	; (8009e38 <_Balloc+0x78>)
 8009dd8:	4818      	ldr	r0, [pc, #96]	; (8009e3c <_Balloc+0x7c>)
 8009dda:	216b      	movs	r1, #107	; 0x6b
 8009ddc:	f000 fc14 	bl	800a608 <__assert_func>
 8009de0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009de4:	6006      	str	r6, [r0, #0]
 8009de6:	60c6      	str	r6, [r0, #12]
 8009de8:	69e6      	ldr	r6, [r4, #28]
 8009dea:	68f3      	ldr	r3, [r6, #12]
 8009dec:	b183      	cbz	r3, 8009e10 <_Balloc+0x50>
 8009dee:	69e3      	ldr	r3, [r4, #28]
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009df6:	b9b8      	cbnz	r0, 8009e28 <_Balloc+0x68>
 8009df8:	2101      	movs	r1, #1
 8009dfa:	fa01 f605 	lsl.w	r6, r1, r5
 8009dfe:	1d72      	adds	r2, r6, #5
 8009e00:	0092      	lsls	r2, r2, #2
 8009e02:	4620      	mov	r0, r4
 8009e04:	f000 fc1e 	bl	800a644 <_calloc_r>
 8009e08:	b160      	cbz	r0, 8009e24 <_Balloc+0x64>
 8009e0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009e0e:	e00e      	b.n	8009e2e <_Balloc+0x6e>
 8009e10:	2221      	movs	r2, #33	; 0x21
 8009e12:	2104      	movs	r1, #4
 8009e14:	4620      	mov	r0, r4
 8009e16:	f000 fc15 	bl	800a644 <_calloc_r>
 8009e1a:	69e3      	ldr	r3, [r4, #28]
 8009e1c:	60f0      	str	r0, [r6, #12]
 8009e1e:	68db      	ldr	r3, [r3, #12]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d1e4      	bne.n	8009dee <_Balloc+0x2e>
 8009e24:	2000      	movs	r0, #0
 8009e26:	bd70      	pop	{r4, r5, r6, pc}
 8009e28:	6802      	ldr	r2, [r0, #0]
 8009e2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009e2e:	2300      	movs	r3, #0
 8009e30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009e34:	e7f7      	b.n	8009e26 <_Balloc+0x66>
 8009e36:	bf00      	nop
 8009e38:	0800ad39 	.word	0x0800ad39
 8009e3c:	0800adb9 	.word	0x0800adb9

08009e40 <_Bfree>:
 8009e40:	b570      	push	{r4, r5, r6, lr}
 8009e42:	69c6      	ldr	r6, [r0, #28]
 8009e44:	4605      	mov	r5, r0
 8009e46:	460c      	mov	r4, r1
 8009e48:	b976      	cbnz	r6, 8009e68 <_Bfree+0x28>
 8009e4a:	2010      	movs	r0, #16
 8009e4c:	f7ff fe56 	bl	8009afc <malloc>
 8009e50:	4602      	mov	r2, r0
 8009e52:	61e8      	str	r0, [r5, #28]
 8009e54:	b920      	cbnz	r0, 8009e60 <_Bfree+0x20>
 8009e56:	4b09      	ldr	r3, [pc, #36]	; (8009e7c <_Bfree+0x3c>)
 8009e58:	4809      	ldr	r0, [pc, #36]	; (8009e80 <_Bfree+0x40>)
 8009e5a:	218f      	movs	r1, #143	; 0x8f
 8009e5c:	f000 fbd4 	bl	800a608 <__assert_func>
 8009e60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e64:	6006      	str	r6, [r0, #0]
 8009e66:	60c6      	str	r6, [r0, #12]
 8009e68:	b13c      	cbz	r4, 8009e7a <_Bfree+0x3a>
 8009e6a:	69eb      	ldr	r3, [r5, #28]
 8009e6c:	6862      	ldr	r2, [r4, #4]
 8009e6e:	68db      	ldr	r3, [r3, #12]
 8009e70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e74:	6021      	str	r1, [r4, #0]
 8009e76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009e7a:	bd70      	pop	{r4, r5, r6, pc}
 8009e7c:	0800ad39 	.word	0x0800ad39
 8009e80:	0800adb9 	.word	0x0800adb9

08009e84 <__multadd>:
 8009e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e88:	690d      	ldr	r5, [r1, #16]
 8009e8a:	4607      	mov	r7, r0
 8009e8c:	460c      	mov	r4, r1
 8009e8e:	461e      	mov	r6, r3
 8009e90:	f101 0c14 	add.w	ip, r1, #20
 8009e94:	2000      	movs	r0, #0
 8009e96:	f8dc 3000 	ldr.w	r3, [ip]
 8009e9a:	b299      	uxth	r1, r3
 8009e9c:	fb02 6101 	mla	r1, r2, r1, r6
 8009ea0:	0c1e      	lsrs	r6, r3, #16
 8009ea2:	0c0b      	lsrs	r3, r1, #16
 8009ea4:	fb02 3306 	mla	r3, r2, r6, r3
 8009ea8:	b289      	uxth	r1, r1
 8009eaa:	3001      	adds	r0, #1
 8009eac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009eb0:	4285      	cmp	r5, r0
 8009eb2:	f84c 1b04 	str.w	r1, [ip], #4
 8009eb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009eba:	dcec      	bgt.n	8009e96 <__multadd+0x12>
 8009ebc:	b30e      	cbz	r6, 8009f02 <__multadd+0x7e>
 8009ebe:	68a3      	ldr	r3, [r4, #8]
 8009ec0:	42ab      	cmp	r3, r5
 8009ec2:	dc19      	bgt.n	8009ef8 <__multadd+0x74>
 8009ec4:	6861      	ldr	r1, [r4, #4]
 8009ec6:	4638      	mov	r0, r7
 8009ec8:	3101      	adds	r1, #1
 8009eca:	f7ff ff79 	bl	8009dc0 <_Balloc>
 8009ece:	4680      	mov	r8, r0
 8009ed0:	b928      	cbnz	r0, 8009ede <__multadd+0x5a>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	4b0c      	ldr	r3, [pc, #48]	; (8009f08 <__multadd+0x84>)
 8009ed6:	480d      	ldr	r0, [pc, #52]	; (8009f0c <__multadd+0x88>)
 8009ed8:	21ba      	movs	r1, #186	; 0xba
 8009eda:	f000 fb95 	bl	800a608 <__assert_func>
 8009ede:	6922      	ldr	r2, [r4, #16]
 8009ee0:	3202      	adds	r2, #2
 8009ee2:	f104 010c 	add.w	r1, r4, #12
 8009ee6:	0092      	lsls	r2, r2, #2
 8009ee8:	300c      	adds	r0, #12
 8009eea:	f000 fb7f 	bl	800a5ec <memcpy>
 8009eee:	4621      	mov	r1, r4
 8009ef0:	4638      	mov	r0, r7
 8009ef2:	f7ff ffa5 	bl	8009e40 <_Bfree>
 8009ef6:	4644      	mov	r4, r8
 8009ef8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009efc:	3501      	adds	r5, #1
 8009efe:	615e      	str	r6, [r3, #20]
 8009f00:	6125      	str	r5, [r4, #16]
 8009f02:	4620      	mov	r0, r4
 8009f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f08:	0800ada8 	.word	0x0800ada8
 8009f0c:	0800adb9 	.word	0x0800adb9

08009f10 <__hi0bits>:
 8009f10:	0c03      	lsrs	r3, r0, #16
 8009f12:	041b      	lsls	r3, r3, #16
 8009f14:	b9d3      	cbnz	r3, 8009f4c <__hi0bits+0x3c>
 8009f16:	0400      	lsls	r0, r0, #16
 8009f18:	2310      	movs	r3, #16
 8009f1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009f1e:	bf04      	itt	eq
 8009f20:	0200      	lsleq	r0, r0, #8
 8009f22:	3308      	addeq	r3, #8
 8009f24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009f28:	bf04      	itt	eq
 8009f2a:	0100      	lsleq	r0, r0, #4
 8009f2c:	3304      	addeq	r3, #4
 8009f2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009f32:	bf04      	itt	eq
 8009f34:	0080      	lsleq	r0, r0, #2
 8009f36:	3302      	addeq	r3, #2
 8009f38:	2800      	cmp	r0, #0
 8009f3a:	db05      	blt.n	8009f48 <__hi0bits+0x38>
 8009f3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009f40:	f103 0301 	add.w	r3, r3, #1
 8009f44:	bf08      	it	eq
 8009f46:	2320      	moveq	r3, #32
 8009f48:	4618      	mov	r0, r3
 8009f4a:	4770      	bx	lr
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	e7e4      	b.n	8009f1a <__hi0bits+0xa>

08009f50 <__lo0bits>:
 8009f50:	6803      	ldr	r3, [r0, #0]
 8009f52:	f013 0207 	ands.w	r2, r3, #7
 8009f56:	d00c      	beq.n	8009f72 <__lo0bits+0x22>
 8009f58:	07d9      	lsls	r1, r3, #31
 8009f5a:	d422      	bmi.n	8009fa2 <__lo0bits+0x52>
 8009f5c:	079a      	lsls	r2, r3, #30
 8009f5e:	bf49      	itett	mi
 8009f60:	085b      	lsrmi	r3, r3, #1
 8009f62:	089b      	lsrpl	r3, r3, #2
 8009f64:	6003      	strmi	r3, [r0, #0]
 8009f66:	2201      	movmi	r2, #1
 8009f68:	bf5c      	itt	pl
 8009f6a:	6003      	strpl	r3, [r0, #0]
 8009f6c:	2202      	movpl	r2, #2
 8009f6e:	4610      	mov	r0, r2
 8009f70:	4770      	bx	lr
 8009f72:	b299      	uxth	r1, r3
 8009f74:	b909      	cbnz	r1, 8009f7a <__lo0bits+0x2a>
 8009f76:	0c1b      	lsrs	r3, r3, #16
 8009f78:	2210      	movs	r2, #16
 8009f7a:	b2d9      	uxtb	r1, r3
 8009f7c:	b909      	cbnz	r1, 8009f82 <__lo0bits+0x32>
 8009f7e:	3208      	adds	r2, #8
 8009f80:	0a1b      	lsrs	r3, r3, #8
 8009f82:	0719      	lsls	r1, r3, #28
 8009f84:	bf04      	itt	eq
 8009f86:	091b      	lsreq	r3, r3, #4
 8009f88:	3204      	addeq	r2, #4
 8009f8a:	0799      	lsls	r1, r3, #30
 8009f8c:	bf04      	itt	eq
 8009f8e:	089b      	lsreq	r3, r3, #2
 8009f90:	3202      	addeq	r2, #2
 8009f92:	07d9      	lsls	r1, r3, #31
 8009f94:	d403      	bmi.n	8009f9e <__lo0bits+0x4e>
 8009f96:	085b      	lsrs	r3, r3, #1
 8009f98:	f102 0201 	add.w	r2, r2, #1
 8009f9c:	d003      	beq.n	8009fa6 <__lo0bits+0x56>
 8009f9e:	6003      	str	r3, [r0, #0]
 8009fa0:	e7e5      	b.n	8009f6e <__lo0bits+0x1e>
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	e7e3      	b.n	8009f6e <__lo0bits+0x1e>
 8009fa6:	2220      	movs	r2, #32
 8009fa8:	e7e1      	b.n	8009f6e <__lo0bits+0x1e>
	...

08009fac <__i2b>:
 8009fac:	b510      	push	{r4, lr}
 8009fae:	460c      	mov	r4, r1
 8009fb0:	2101      	movs	r1, #1
 8009fb2:	f7ff ff05 	bl	8009dc0 <_Balloc>
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	b928      	cbnz	r0, 8009fc6 <__i2b+0x1a>
 8009fba:	4b05      	ldr	r3, [pc, #20]	; (8009fd0 <__i2b+0x24>)
 8009fbc:	4805      	ldr	r0, [pc, #20]	; (8009fd4 <__i2b+0x28>)
 8009fbe:	f240 1145 	movw	r1, #325	; 0x145
 8009fc2:	f000 fb21 	bl	800a608 <__assert_func>
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	6144      	str	r4, [r0, #20]
 8009fca:	6103      	str	r3, [r0, #16]
 8009fcc:	bd10      	pop	{r4, pc}
 8009fce:	bf00      	nop
 8009fd0:	0800ada8 	.word	0x0800ada8
 8009fd4:	0800adb9 	.word	0x0800adb9

08009fd8 <__multiply>:
 8009fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fdc:	4691      	mov	r9, r2
 8009fde:	690a      	ldr	r2, [r1, #16]
 8009fe0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	bfb8      	it	lt
 8009fe8:	460b      	movlt	r3, r1
 8009fea:	460c      	mov	r4, r1
 8009fec:	bfbc      	itt	lt
 8009fee:	464c      	movlt	r4, r9
 8009ff0:	4699      	movlt	r9, r3
 8009ff2:	6927      	ldr	r7, [r4, #16]
 8009ff4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009ff8:	68a3      	ldr	r3, [r4, #8]
 8009ffa:	6861      	ldr	r1, [r4, #4]
 8009ffc:	eb07 060a 	add.w	r6, r7, sl
 800a000:	42b3      	cmp	r3, r6
 800a002:	b085      	sub	sp, #20
 800a004:	bfb8      	it	lt
 800a006:	3101      	addlt	r1, #1
 800a008:	f7ff feda 	bl	8009dc0 <_Balloc>
 800a00c:	b930      	cbnz	r0, 800a01c <__multiply+0x44>
 800a00e:	4602      	mov	r2, r0
 800a010:	4b44      	ldr	r3, [pc, #272]	; (800a124 <__multiply+0x14c>)
 800a012:	4845      	ldr	r0, [pc, #276]	; (800a128 <__multiply+0x150>)
 800a014:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a018:	f000 faf6 	bl	800a608 <__assert_func>
 800a01c:	f100 0514 	add.w	r5, r0, #20
 800a020:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a024:	462b      	mov	r3, r5
 800a026:	2200      	movs	r2, #0
 800a028:	4543      	cmp	r3, r8
 800a02a:	d321      	bcc.n	800a070 <__multiply+0x98>
 800a02c:	f104 0314 	add.w	r3, r4, #20
 800a030:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a034:	f109 0314 	add.w	r3, r9, #20
 800a038:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a03c:	9202      	str	r2, [sp, #8]
 800a03e:	1b3a      	subs	r2, r7, r4
 800a040:	3a15      	subs	r2, #21
 800a042:	f022 0203 	bic.w	r2, r2, #3
 800a046:	3204      	adds	r2, #4
 800a048:	f104 0115 	add.w	r1, r4, #21
 800a04c:	428f      	cmp	r7, r1
 800a04e:	bf38      	it	cc
 800a050:	2204      	movcc	r2, #4
 800a052:	9201      	str	r2, [sp, #4]
 800a054:	9a02      	ldr	r2, [sp, #8]
 800a056:	9303      	str	r3, [sp, #12]
 800a058:	429a      	cmp	r2, r3
 800a05a:	d80c      	bhi.n	800a076 <__multiply+0x9e>
 800a05c:	2e00      	cmp	r6, #0
 800a05e:	dd03      	ble.n	800a068 <__multiply+0x90>
 800a060:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a064:	2b00      	cmp	r3, #0
 800a066:	d05b      	beq.n	800a120 <__multiply+0x148>
 800a068:	6106      	str	r6, [r0, #16]
 800a06a:	b005      	add	sp, #20
 800a06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a070:	f843 2b04 	str.w	r2, [r3], #4
 800a074:	e7d8      	b.n	800a028 <__multiply+0x50>
 800a076:	f8b3 a000 	ldrh.w	sl, [r3]
 800a07a:	f1ba 0f00 	cmp.w	sl, #0
 800a07e:	d024      	beq.n	800a0ca <__multiply+0xf2>
 800a080:	f104 0e14 	add.w	lr, r4, #20
 800a084:	46a9      	mov	r9, r5
 800a086:	f04f 0c00 	mov.w	ip, #0
 800a08a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a08e:	f8d9 1000 	ldr.w	r1, [r9]
 800a092:	fa1f fb82 	uxth.w	fp, r2
 800a096:	b289      	uxth	r1, r1
 800a098:	fb0a 110b 	mla	r1, sl, fp, r1
 800a09c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a0a0:	f8d9 2000 	ldr.w	r2, [r9]
 800a0a4:	4461      	add	r1, ip
 800a0a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a0aa:	fb0a c20b 	mla	r2, sl, fp, ip
 800a0ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a0b2:	b289      	uxth	r1, r1
 800a0b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a0b8:	4577      	cmp	r7, lr
 800a0ba:	f849 1b04 	str.w	r1, [r9], #4
 800a0be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a0c2:	d8e2      	bhi.n	800a08a <__multiply+0xb2>
 800a0c4:	9a01      	ldr	r2, [sp, #4]
 800a0c6:	f845 c002 	str.w	ip, [r5, r2]
 800a0ca:	9a03      	ldr	r2, [sp, #12]
 800a0cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a0d0:	3304      	adds	r3, #4
 800a0d2:	f1b9 0f00 	cmp.w	r9, #0
 800a0d6:	d021      	beq.n	800a11c <__multiply+0x144>
 800a0d8:	6829      	ldr	r1, [r5, #0]
 800a0da:	f104 0c14 	add.w	ip, r4, #20
 800a0de:	46ae      	mov	lr, r5
 800a0e0:	f04f 0a00 	mov.w	sl, #0
 800a0e4:	f8bc b000 	ldrh.w	fp, [ip]
 800a0e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a0ec:	fb09 220b 	mla	r2, r9, fp, r2
 800a0f0:	4452      	add	r2, sl
 800a0f2:	b289      	uxth	r1, r1
 800a0f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a0f8:	f84e 1b04 	str.w	r1, [lr], #4
 800a0fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a100:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a104:	f8be 1000 	ldrh.w	r1, [lr]
 800a108:	fb09 110a 	mla	r1, r9, sl, r1
 800a10c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a110:	4567      	cmp	r7, ip
 800a112:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a116:	d8e5      	bhi.n	800a0e4 <__multiply+0x10c>
 800a118:	9a01      	ldr	r2, [sp, #4]
 800a11a:	50a9      	str	r1, [r5, r2]
 800a11c:	3504      	adds	r5, #4
 800a11e:	e799      	b.n	800a054 <__multiply+0x7c>
 800a120:	3e01      	subs	r6, #1
 800a122:	e79b      	b.n	800a05c <__multiply+0x84>
 800a124:	0800ada8 	.word	0x0800ada8
 800a128:	0800adb9 	.word	0x0800adb9

0800a12c <__pow5mult>:
 800a12c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a130:	4615      	mov	r5, r2
 800a132:	f012 0203 	ands.w	r2, r2, #3
 800a136:	4606      	mov	r6, r0
 800a138:	460f      	mov	r7, r1
 800a13a:	d007      	beq.n	800a14c <__pow5mult+0x20>
 800a13c:	4c25      	ldr	r4, [pc, #148]	; (800a1d4 <__pow5mult+0xa8>)
 800a13e:	3a01      	subs	r2, #1
 800a140:	2300      	movs	r3, #0
 800a142:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a146:	f7ff fe9d 	bl	8009e84 <__multadd>
 800a14a:	4607      	mov	r7, r0
 800a14c:	10ad      	asrs	r5, r5, #2
 800a14e:	d03d      	beq.n	800a1cc <__pow5mult+0xa0>
 800a150:	69f4      	ldr	r4, [r6, #28]
 800a152:	b97c      	cbnz	r4, 800a174 <__pow5mult+0x48>
 800a154:	2010      	movs	r0, #16
 800a156:	f7ff fcd1 	bl	8009afc <malloc>
 800a15a:	4602      	mov	r2, r0
 800a15c:	61f0      	str	r0, [r6, #28]
 800a15e:	b928      	cbnz	r0, 800a16c <__pow5mult+0x40>
 800a160:	4b1d      	ldr	r3, [pc, #116]	; (800a1d8 <__pow5mult+0xac>)
 800a162:	481e      	ldr	r0, [pc, #120]	; (800a1dc <__pow5mult+0xb0>)
 800a164:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a168:	f000 fa4e 	bl	800a608 <__assert_func>
 800a16c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a170:	6004      	str	r4, [r0, #0]
 800a172:	60c4      	str	r4, [r0, #12]
 800a174:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a178:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a17c:	b94c      	cbnz	r4, 800a192 <__pow5mult+0x66>
 800a17e:	f240 2171 	movw	r1, #625	; 0x271
 800a182:	4630      	mov	r0, r6
 800a184:	f7ff ff12 	bl	8009fac <__i2b>
 800a188:	2300      	movs	r3, #0
 800a18a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a18e:	4604      	mov	r4, r0
 800a190:	6003      	str	r3, [r0, #0]
 800a192:	f04f 0900 	mov.w	r9, #0
 800a196:	07eb      	lsls	r3, r5, #31
 800a198:	d50a      	bpl.n	800a1b0 <__pow5mult+0x84>
 800a19a:	4639      	mov	r1, r7
 800a19c:	4622      	mov	r2, r4
 800a19e:	4630      	mov	r0, r6
 800a1a0:	f7ff ff1a 	bl	8009fd8 <__multiply>
 800a1a4:	4639      	mov	r1, r7
 800a1a6:	4680      	mov	r8, r0
 800a1a8:	4630      	mov	r0, r6
 800a1aa:	f7ff fe49 	bl	8009e40 <_Bfree>
 800a1ae:	4647      	mov	r7, r8
 800a1b0:	106d      	asrs	r5, r5, #1
 800a1b2:	d00b      	beq.n	800a1cc <__pow5mult+0xa0>
 800a1b4:	6820      	ldr	r0, [r4, #0]
 800a1b6:	b938      	cbnz	r0, 800a1c8 <__pow5mult+0x9c>
 800a1b8:	4622      	mov	r2, r4
 800a1ba:	4621      	mov	r1, r4
 800a1bc:	4630      	mov	r0, r6
 800a1be:	f7ff ff0b 	bl	8009fd8 <__multiply>
 800a1c2:	6020      	str	r0, [r4, #0]
 800a1c4:	f8c0 9000 	str.w	r9, [r0]
 800a1c8:	4604      	mov	r4, r0
 800a1ca:	e7e4      	b.n	800a196 <__pow5mult+0x6a>
 800a1cc:	4638      	mov	r0, r7
 800a1ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1d2:	bf00      	nop
 800a1d4:	0800af08 	.word	0x0800af08
 800a1d8:	0800ad39 	.word	0x0800ad39
 800a1dc:	0800adb9 	.word	0x0800adb9

0800a1e0 <__lshift>:
 800a1e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1e4:	460c      	mov	r4, r1
 800a1e6:	6849      	ldr	r1, [r1, #4]
 800a1e8:	6923      	ldr	r3, [r4, #16]
 800a1ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a1ee:	68a3      	ldr	r3, [r4, #8]
 800a1f0:	4607      	mov	r7, r0
 800a1f2:	4691      	mov	r9, r2
 800a1f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a1f8:	f108 0601 	add.w	r6, r8, #1
 800a1fc:	42b3      	cmp	r3, r6
 800a1fe:	db0b      	blt.n	800a218 <__lshift+0x38>
 800a200:	4638      	mov	r0, r7
 800a202:	f7ff fddd 	bl	8009dc0 <_Balloc>
 800a206:	4605      	mov	r5, r0
 800a208:	b948      	cbnz	r0, 800a21e <__lshift+0x3e>
 800a20a:	4602      	mov	r2, r0
 800a20c:	4b28      	ldr	r3, [pc, #160]	; (800a2b0 <__lshift+0xd0>)
 800a20e:	4829      	ldr	r0, [pc, #164]	; (800a2b4 <__lshift+0xd4>)
 800a210:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a214:	f000 f9f8 	bl	800a608 <__assert_func>
 800a218:	3101      	adds	r1, #1
 800a21a:	005b      	lsls	r3, r3, #1
 800a21c:	e7ee      	b.n	800a1fc <__lshift+0x1c>
 800a21e:	2300      	movs	r3, #0
 800a220:	f100 0114 	add.w	r1, r0, #20
 800a224:	f100 0210 	add.w	r2, r0, #16
 800a228:	4618      	mov	r0, r3
 800a22a:	4553      	cmp	r3, sl
 800a22c:	db33      	blt.n	800a296 <__lshift+0xb6>
 800a22e:	6920      	ldr	r0, [r4, #16]
 800a230:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a234:	f104 0314 	add.w	r3, r4, #20
 800a238:	f019 091f 	ands.w	r9, r9, #31
 800a23c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a240:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a244:	d02b      	beq.n	800a29e <__lshift+0xbe>
 800a246:	f1c9 0e20 	rsb	lr, r9, #32
 800a24a:	468a      	mov	sl, r1
 800a24c:	2200      	movs	r2, #0
 800a24e:	6818      	ldr	r0, [r3, #0]
 800a250:	fa00 f009 	lsl.w	r0, r0, r9
 800a254:	4310      	orrs	r0, r2
 800a256:	f84a 0b04 	str.w	r0, [sl], #4
 800a25a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a25e:	459c      	cmp	ip, r3
 800a260:	fa22 f20e 	lsr.w	r2, r2, lr
 800a264:	d8f3      	bhi.n	800a24e <__lshift+0x6e>
 800a266:	ebac 0304 	sub.w	r3, ip, r4
 800a26a:	3b15      	subs	r3, #21
 800a26c:	f023 0303 	bic.w	r3, r3, #3
 800a270:	3304      	adds	r3, #4
 800a272:	f104 0015 	add.w	r0, r4, #21
 800a276:	4584      	cmp	ip, r0
 800a278:	bf38      	it	cc
 800a27a:	2304      	movcc	r3, #4
 800a27c:	50ca      	str	r2, [r1, r3]
 800a27e:	b10a      	cbz	r2, 800a284 <__lshift+0xa4>
 800a280:	f108 0602 	add.w	r6, r8, #2
 800a284:	3e01      	subs	r6, #1
 800a286:	4638      	mov	r0, r7
 800a288:	612e      	str	r6, [r5, #16]
 800a28a:	4621      	mov	r1, r4
 800a28c:	f7ff fdd8 	bl	8009e40 <_Bfree>
 800a290:	4628      	mov	r0, r5
 800a292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a296:	f842 0f04 	str.w	r0, [r2, #4]!
 800a29a:	3301      	adds	r3, #1
 800a29c:	e7c5      	b.n	800a22a <__lshift+0x4a>
 800a29e:	3904      	subs	r1, #4
 800a2a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a2a8:	459c      	cmp	ip, r3
 800a2aa:	d8f9      	bhi.n	800a2a0 <__lshift+0xc0>
 800a2ac:	e7ea      	b.n	800a284 <__lshift+0xa4>
 800a2ae:	bf00      	nop
 800a2b0:	0800ada8 	.word	0x0800ada8
 800a2b4:	0800adb9 	.word	0x0800adb9

0800a2b8 <__mcmp>:
 800a2b8:	b530      	push	{r4, r5, lr}
 800a2ba:	6902      	ldr	r2, [r0, #16]
 800a2bc:	690c      	ldr	r4, [r1, #16]
 800a2be:	1b12      	subs	r2, r2, r4
 800a2c0:	d10e      	bne.n	800a2e0 <__mcmp+0x28>
 800a2c2:	f100 0314 	add.w	r3, r0, #20
 800a2c6:	3114      	adds	r1, #20
 800a2c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a2cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a2d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a2d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a2d8:	42a5      	cmp	r5, r4
 800a2da:	d003      	beq.n	800a2e4 <__mcmp+0x2c>
 800a2dc:	d305      	bcc.n	800a2ea <__mcmp+0x32>
 800a2de:	2201      	movs	r2, #1
 800a2e0:	4610      	mov	r0, r2
 800a2e2:	bd30      	pop	{r4, r5, pc}
 800a2e4:	4283      	cmp	r3, r0
 800a2e6:	d3f3      	bcc.n	800a2d0 <__mcmp+0x18>
 800a2e8:	e7fa      	b.n	800a2e0 <__mcmp+0x28>
 800a2ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a2ee:	e7f7      	b.n	800a2e0 <__mcmp+0x28>

0800a2f0 <__mdiff>:
 800a2f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2f4:	460c      	mov	r4, r1
 800a2f6:	4606      	mov	r6, r0
 800a2f8:	4611      	mov	r1, r2
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	4690      	mov	r8, r2
 800a2fe:	f7ff ffdb 	bl	800a2b8 <__mcmp>
 800a302:	1e05      	subs	r5, r0, #0
 800a304:	d110      	bne.n	800a328 <__mdiff+0x38>
 800a306:	4629      	mov	r1, r5
 800a308:	4630      	mov	r0, r6
 800a30a:	f7ff fd59 	bl	8009dc0 <_Balloc>
 800a30e:	b930      	cbnz	r0, 800a31e <__mdiff+0x2e>
 800a310:	4b3a      	ldr	r3, [pc, #232]	; (800a3fc <__mdiff+0x10c>)
 800a312:	4602      	mov	r2, r0
 800a314:	f240 2137 	movw	r1, #567	; 0x237
 800a318:	4839      	ldr	r0, [pc, #228]	; (800a400 <__mdiff+0x110>)
 800a31a:	f000 f975 	bl	800a608 <__assert_func>
 800a31e:	2301      	movs	r3, #1
 800a320:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a324:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a328:	bfa4      	itt	ge
 800a32a:	4643      	movge	r3, r8
 800a32c:	46a0      	movge	r8, r4
 800a32e:	4630      	mov	r0, r6
 800a330:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a334:	bfa6      	itte	ge
 800a336:	461c      	movge	r4, r3
 800a338:	2500      	movge	r5, #0
 800a33a:	2501      	movlt	r5, #1
 800a33c:	f7ff fd40 	bl	8009dc0 <_Balloc>
 800a340:	b920      	cbnz	r0, 800a34c <__mdiff+0x5c>
 800a342:	4b2e      	ldr	r3, [pc, #184]	; (800a3fc <__mdiff+0x10c>)
 800a344:	4602      	mov	r2, r0
 800a346:	f240 2145 	movw	r1, #581	; 0x245
 800a34a:	e7e5      	b.n	800a318 <__mdiff+0x28>
 800a34c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a350:	6926      	ldr	r6, [r4, #16]
 800a352:	60c5      	str	r5, [r0, #12]
 800a354:	f104 0914 	add.w	r9, r4, #20
 800a358:	f108 0514 	add.w	r5, r8, #20
 800a35c:	f100 0e14 	add.w	lr, r0, #20
 800a360:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a364:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a368:	f108 0210 	add.w	r2, r8, #16
 800a36c:	46f2      	mov	sl, lr
 800a36e:	2100      	movs	r1, #0
 800a370:	f859 3b04 	ldr.w	r3, [r9], #4
 800a374:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a378:	fa11 f88b 	uxtah	r8, r1, fp
 800a37c:	b299      	uxth	r1, r3
 800a37e:	0c1b      	lsrs	r3, r3, #16
 800a380:	eba8 0801 	sub.w	r8, r8, r1
 800a384:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a388:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a38c:	fa1f f888 	uxth.w	r8, r8
 800a390:	1419      	asrs	r1, r3, #16
 800a392:	454e      	cmp	r6, r9
 800a394:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a398:	f84a 3b04 	str.w	r3, [sl], #4
 800a39c:	d8e8      	bhi.n	800a370 <__mdiff+0x80>
 800a39e:	1b33      	subs	r3, r6, r4
 800a3a0:	3b15      	subs	r3, #21
 800a3a2:	f023 0303 	bic.w	r3, r3, #3
 800a3a6:	3304      	adds	r3, #4
 800a3a8:	3415      	adds	r4, #21
 800a3aa:	42a6      	cmp	r6, r4
 800a3ac:	bf38      	it	cc
 800a3ae:	2304      	movcc	r3, #4
 800a3b0:	441d      	add	r5, r3
 800a3b2:	4473      	add	r3, lr
 800a3b4:	469e      	mov	lr, r3
 800a3b6:	462e      	mov	r6, r5
 800a3b8:	4566      	cmp	r6, ip
 800a3ba:	d30e      	bcc.n	800a3da <__mdiff+0xea>
 800a3bc:	f10c 0203 	add.w	r2, ip, #3
 800a3c0:	1b52      	subs	r2, r2, r5
 800a3c2:	f022 0203 	bic.w	r2, r2, #3
 800a3c6:	3d03      	subs	r5, #3
 800a3c8:	45ac      	cmp	ip, r5
 800a3ca:	bf38      	it	cc
 800a3cc:	2200      	movcc	r2, #0
 800a3ce:	4413      	add	r3, r2
 800a3d0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a3d4:	b17a      	cbz	r2, 800a3f6 <__mdiff+0x106>
 800a3d6:	6107      	str	r7, [r0, #16]
 800a3d8:	e7a4      	b.n	800a324 <__mdiff+0x34>
 800a3da:	f856 8b04 	ldr.w	r8, [r6], #4
 800a3de:	fa11 f288 	uxtah	r2, r1, r8
 800a3e2:	1414      	asrs	r4, r2, #16
 800a3e4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a3e8:	b292      	uxth	r2, r2
 800a3ea:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a3ee:	f84e 2b04 	str.w	r2, [lr], #4
 800a3f2:	1421      	asrs	r1, r4, #16
 800a3f4:	e7e0      	b.n	800a3b8 <__mdiff+0xc8>
 800a3f6:	3f01      	subs	r7, #1
 800a3f8:	e7ea      	b.n	800a3d0 <__mdiff+0xe0>
 800a3fa:	bf00      	nop
 800a3fc:	0800ada8 	.word	0x0800ada8
 800a400:	0800adb9 	.word	0x0800adb9

0800a404 <__d2b>:
 800a404:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a408:	460f      	mov	r7, r1
 800a40a:	2101      	movs	r1, #1
 800a40c:	ec59 8b10 	vmov	r8, r9, d0
 800a410:	4616      	mov	r6, r2
 800a412:	f7ff fcd5 	bl	8009dc0 <_Balloc>
 800a416:	4604      	mov	r4, r0
 800a418:	b930      	cbnz	r0, 800a428 <__d2b+0x24>
 800a41a:	4602      	mov	r2, r0
 800a41c:	4b24      	ldr	r3, [pc, #144]	; (800a4b0 <__d2b+0xac>)
 800a41e:	4825      	ldr	r0, [pc, #148]	; (800a4b4 <__d2b+0xb0>)
 800a420:	f240 310f 	movw	r1, #783	; 0x30f
 800a424:	f000 f8f0 	bl	800a608 <__assert_func>
 800a428:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a42c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a430:	bb2d      	cbnz	r5, 800a47e <__d2b+0x7a>
 800a432:	9301      	str	r3, [sp, #4]
 800a434:	f1b8 0300 	subs.w	r3, r8, #0
 800a438:	d026      	beq.n	800a488 <__d2b+0x84>
 800a43a:	4668      	mov	r0, sp
 800a43c:	9300      	str	r3, [sp, #0]
 800a43e:	f7ff fd87 	bl	8009f50 <__lo0bits>
 800a442:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a446:	b1e8      	cbz	r0, 800a484 <__d2b+0x80>
 800a448:	f1c0 0320 	rsb	r3, r0, #32
 800a44c:	fa02 f303 	lsl.w	r3, r2, r3
 800a450:	430b      	orrs	r3, r1
 800a452:	40c2      	lsrs	r2, r0
 800a454:	6163      	str	r3, [r4, #20]
 800a456:	9201      	str	r2, [sp, #4]
 800a458:	9b01      	ldr	r3, [sp, #4]
 800a45a:	61a3      	str	r3, [r4, #24]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	bf14      	ite	ne
 800a460:	2202      	movne	r2, #2
 800a462:	2201      	moveq	r2, #1
 800a464:	6122      	str	r2, [r4, #16]
 800a466:	b1bd      	cbz	r5, 800a498 <__d2b+0x94>
 800a468:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a46c:	4405      	add	r5, r0
 800a46e:	603d      	str	r5, [r7, #0]
 800a470:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a474:	6030      	str	r0, [r6, #0]
 800a476:	4620      	mov	r0, r4
 800a478:	b003      	add	sp, #12
 800a47a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a47e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a482:	e7d6      	b.n	800a432 <__d2b+0x2e>
 800a484:	6161      	str	r1, [r4, #20]
 800a486:	e7e7      	b.n	800a458 <__d2b+0x54>
 800a488:	a801      	add	r0, sp, #4
 800a48a:	f7ff fd61 	bl	8009f50 <__lo0bits>
 800a48e:	9b01      	ldr	r3, [sp, #4]
 800a490:	6163      	str	r3, [r4, #20]
 800a492:	3020      	adds	r0, #32
 800a494:	2201      	movs	r2, #1
 800a496:	e7e5      	b.n	800a464 <__d2b+0x60>
 800a498:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a49c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a4a0:	6038      	str	r0, [r7, #0]
 800a4a2:	6918      	ldr	r0, [r3, #16]
 800a4a4:	f7ff fd34 	bl	8009f10 <__hi0bits>
 800a4a8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a4ac:	e7e2      	b.n	800a474 <__d2b+0x70>
 800a4ae:	bf00      	nop
 800a4b0:	0800ada8 	.word	0x0800ada8
 800a4b4:	0800adb9 	.word	0x0800adb9

0800a4b8 <__sread>:
 800a4b8:	b510      	push	{r4, lr}
 800a4ba:	460c      	mov	r4, r1
 800a4bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4c0:	f000 f860 	bl	800a584 <_read_r>
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	bfab      	itete	ge
 800a4c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a4ca:	89a3      	ldrhlt	r3, [r4, #12]
 800a4cc:	181b      	addge	r3, r3, r0
 800a4ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a4d2:	bfac      	ite	ge
 800a4d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a4d6:	81a3      	strhlt	r3, [r4, #12]
 800a4d8:	bd10      	pop	{r4, pc}

0800a4da <__swrite>:
 800a4da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4de:	461f      	mov	r7, r3
 800a4e0:	898b      	ldrh	r3, [r1, #12]
 800a4e2:	05db      	lsls	r3, r3, #23
 800a4e4:	4605      	mov	r5, r0
 800a4e6:	460c      	mov	r4, r1
 800a4e8:	4616      	mov	r6, r2
 800a4ea:	d505      	bpl.n	800a4f8 <__swrite+0x1e>
 800a4ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4f0:	2302      	movs	r3, #2
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f000 f834 	bl	800a560 <_lseek_r>
 800a4f8:	89a3      	ldrh	r3, [r4, #12]
 800a4fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a502:	81a3      	strh	r3, [r4, #12]
 800a504:	4632      	mov	r2, r6
 800a506:	463b      	mov	r3, r7
 800a508:	4628      	mov	r0, r5
 800a50a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a50e:	f000 b85b 	b.w	800a5c8 <_write_r>

0800a512 <__sseek>:
 800a512:	b510      	push	{r4, lr}
 800a514:	460c      	mov	r4, r1
 800a516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a51a:	f000 f821 	bl	800a560 <_lseek_r>
 800a51e:	1c43      	adds	r3, r0, #1
 800a520:	89a3      	ldrh	r3, [r4, #12]
 800a522:	bf15      	itete	ne
 800a524:	6560      	strne	r0, [r4, #84]	; 0x54
 800a526:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a52a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a52e:	81a3      	strheq	r3, [r4, #12]
 800a530:	bf18      	it	ne
 800a532:	81a3      	strhne	r3, [r4, #12]
 800a534:	bd10      	pop	{r4, pc}

0800a536 <__sclose>:
 800a536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a53a:	f000 b801 	b.w	800a540 <_close_r>
	...

0800a540 <_close_r>:
 800a540:	b538      	push	{r3, r4, r5, lr}
 800a542:	4d06      	ldr	r5, [pc, #24]	; (800a55c <_close_r+0x1c>)
 800a544:	2300      	movs	r3, #0
 800a546:	4604      	mov	r4, r0
 800a548:	4608      	mov	r0, r1
 800a54a:	602b      	str	r3, [r5, #0]
 800a54c:	f7f8 fbc9 	bl	8002ce2 <_close>
 800a550:	1c43      	adds	r3, r0, #1
 800a552:	d102      	bne.n	800a55a <_close_r+0x1a>
 800a554:	682b      	ldr	r3, [r5, #0]
 800a556:	b103      	cbz	r3, 800a55a <_close_r+0x1a>
 800a558:	6023      	str	r3, [r4, #0]
 800a55a:	bd38      	pop	{r3, r4, r5, pc}
 800a55c:	200007a0 	.word	0x200007a0

0800a560 <_lseek_r>:
 800a560:	b538      	push	{r3, r4, r5, lr}
 800a562:	4d07      	ldr	r5, [pc, #28]	; (800a580 <_lseek_r+0x20>)
 800a564:	4604      	mov	r4, r0
 800a566:	4608      	mov	r0, r1
 800a568:	4611      	mov	r1, r2
 800a56a:	2200      	movs	r2, #0
 800a56c:	602a      	str	r2, [r5, #0]
 800a56e:	461a      	mov	r2, r3
 800a570:	f7f8 fbde 	bl	8002d30 <_lseek>
 800a574:	1c43      	adds	r3, r0, #1
 800a576:	d102      	bne.n	800a57e <_lseek_r+0x1e>
 800a578:	682b      	ldr	r3, [r5, #0]
 800a57a:	b103      	cbz	r3, 800a57e <_lseek_r+0x1e>
 800a57c:	6023      	str	r3, [r4, #0]
 800a57e:	bd38      	pop	{r3, r4, r5, pc}
 800a580:	200007a0 	.word	0x200007a0

0800a584 <_read_r>:
 800a584:	b538      	push	{r3, r4, r5, lr}
 800a586:	4d07      	ldr	r5, [pc, #28]	; (800a5a4 <_read_r+0x20>)
 800a588:	4604      	mov	r4, r0
 800a58a:	4608      	mov	r0, r1
 800a58c:	4611      	mov	r1, r2
 800a58e:	2200      	movs	r2, #0
 800a590:	602a      	str	r2, [r5, #0]
 800a592:	461a      	mov	r2, r3
 800a594:	f7f8 fb6c 	bl	8002c70 <_read>
 800a598:	1c43      	adds	r3, r0, #1
 800a59a:	d102      	bne.n	800a5a2 <_read_r+0x1e>
 800a59c:	682b      	ldr	r3, [r5, #0]
 800a59e:	b103      	cbz	r3, 800a5a2 <_read_r+0x1e>
 800a5a0:	6023      	str	r3, [r4, #0]
 800a5a2:	bd38      	pop	{r3, r4, r5, pc}
 800a5a4:	200007a0 	.word	0x200007a0

0800a5a8 <_sbrk_r>:
 800a5a8:	b538      	push	{r3, r4, r5, lr}
 800a5aa:	4d06      	ldr	r5, [pc, #24]	; (800a5c4 <_sbrk_r+0x1c>)
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	4604      	mov	r4, r0
 800a5b0:	4608      	mov	r0, r1
 800a5b2:	602b      	str	r3, [r5, #0]
 800a5b4:	f7f8 fbca 	bl	8002d4c <_sbrk>
 800a5b8:	1c43      	adds	r3, r0, #1
 800a5ba:	d102      	bne.n	800a5c2 <_sbrk_r+0x1a>
 800a5bc:	682b      	ldr	r3, [r5, #0]
 800a5be:	b103      	cbz	r3, 800a5c2 <_sbrk_r+0x1a>
 800a5c0:	6023      	str	r3, [r4, #0]
 800a5c2:	bd38      	pop	{r3, r4, r5, pc}
 800a5c4:	200007a0 	.word	0x200007a0

0800a5c8 <_write_r>:
 800a5c8:	b538      	push	{r3, r4, r5, lr}
 800a5ca:	4d07      	ldr	r5, [pc, #28]	; (800a5e8 <_write_r+0x20>)
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	4608      	mov	r0, r1
 800a5d0:	4611      	mov	r1, r2
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	602a      	str	r2, [r5, #0]
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	f7f8 fb67 	bl	8002caa <_write>
 800a5dc:	1c43      	adds	r3, r0, #1
 800a5de:	d102      	bne.n	800a5e6 <_write_r+0x1e>
 800a5e0:	682b      	ldr	r3, [r5, #0]
 800a5e2:	b103      	cbz	r3, 800a5e6 <_write_r+0x1e>
 800a5e4:	6023      	str	r3, [r4, #0]
 800a5e6:	bd38      	pop	{r3, r4, r5, pc}
 800a5e8:	200007a0 	.word	0x200007a0

0800a5ec <memcpy>:
 800a5ec:	440a      	add	r2, r1
 800a5ee:	4291      	cmp	r1, r2
 800a5f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a5f4:	d100      	bne.n	800a5f8 <memcpy+0xc>
 800a5f6:	4770      	bx	lr
 800a5f8:	b510      	push	{r4, lr}
 800a5fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a602:	4291      	cmp	r1, r2
 800a604:	d1f9      	bne.n	800a5fa <memcpy+0xe>
 800a606:	bd10      	pop	{r4, pc}

0800a608 <__assert_func>:
 800a608:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a60a:	4614      	mov	r4, r2
 800a60c:	461a      	mov	r2, r3
 800a60e:	4b09      	ldr	r3, [pc, #36]	; (800a634 <__assert_func+0x2c>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4605      	mov	r5, r0
 800a614:	68d8      	ldr	r0, [r3, #12]
 800a616:	b14c      	cbz	r4, 800a62c <__assert_func+0x24>
 800a618:	4b07      	ldr	r3, [pc, #28]	; (800a638 <__assert_func+0x30>)
 800a61a:	9100      	str	r1, [sp, #0]
 800a61c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a620:	4906      	ldr	r1, [pc, #24]	; (800a63c <__assert_func+0x34>)
 800a622:	462b      	mov	r3, r5
 800a624:	f000 f882 	bl	800a72c <fiprintf>
 800a628:	f000 f89f 	bl	800a76a <abort>
 800a62c:	4b04      	ldr	r3, [pc, #16]	; (800a640 <__assert_func+0x38>)
 800a62e:	461c      	mov	r4, r3
 800a630:	e7f3      	b.n	800a61a <__assert_func+0x12>
 800a632:	bf00      	nop
 800a634:	20000074 	.word	0x20000074
 800a638:	0800b01f 	.word	0x0800b01f
 800a63c:	0800b02c 	.word	0x0800b02c
 800a640:	0800b05a 	.word	0x0800b05a

0800a644 <_calloc_r>:
 800a644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a646:	fba1 2402 	umull	r2, r4, r1, r2
 800a64a:	b94c      	cbnz	r4, 800a660 <_calloc_r+0x1c>
 800a64c:	4611      	mov	r1, r2
 800a64e:	9201      	str	r2, [sp, #4]
 800a650:	f7ff fa7c 	bl	8009b4c <_malloc_r>
 800a654:	9a01      	ldr	r2, [sp, #4]
 800a656:	4605      	mov	r5, r0
 800a658:	b930      	cbnz	r0, 800a668 <_calloc_r+0x24>
 800a65a:	4628      	mov	r0, r5
 800a65c:	b003      	add	sp, #12
 800a65e:	bd30      	pop	{r4, r5, pc}
 800a660:	220c      	movs	r2, #12
 800a662:	6002      	str	r2, [r0, #0]
 800a664:	2500      	movs	r5, #0
 800a666:	e7f8      	b.n	800a65a <_calloc_r+0x16>
 800a668:	4621      	mov	r1, r4
 800a66a:	f7fe fb93 	bl	8008d94 <memset>
 800a66e:	e7f4      	b.n	800a65a <_calloc_r+0x16>

0800a670 <_free_r>:
 800a670:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a672:	2900      	cmp	r1, #0
 800a674:	d044      	beq.n	800a700 <_free_r+0x90>
 800a676:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a67a:	9001      	str	r0, [sp, #4]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	f1a1 0404 	sub.w	r4, r1, #4
 800a682:	bfb8      	it	lt
 800a684:	18e4      	addlt	r4, r4, r3
 800a686:	f7ff fb8f 	bl	8009da8 <__malloc_lock>
 800a68a:	4a1e      	ldr	r2, [pc, #120]	; (800a704 <_free_r+0x94>)
 800a68c:	9801      	ldr	r0, [sp, #4]
 800a68e:	6813      	ldr	r3, [r2, #0]
 800a690:	b933      	cbnz	r3, 800a6a0 <_free_r+0x30>
 800a692:	6063      	str	r3, [r4, #4]
 800a694:	6014      	str	r4, [r2, #0]
 800a696:	b003      	add	sp, #12
 800a698:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a69c:	f7ff bb8a 	b.w	8009db4 <__malloc_unlock>
 800a6a0:	42a3      	cmp	r3, r4
 800a6a2:	d908      	bls.n	800a6b6 <_free_r+0x46>
 800a6a4:	6825      	ldr	r5, [r4, #0]
 800a6a6:	1961      	adds	r1, r4, r5
 800a6a8:	428b      	cmp	r3, r1
 800a6aa:	bf01      	itttt	eq
 800a6ac:	6819      	ldreq	r1, [r3, #0]
 800a6ae:	685b      	ldreq	r3, [r3, #4]
 800a6b0:	1949      	addeq	r1, r1, r5
 800a6b2:	6021      	streq	r1, [r4, #0]
 800a6b4:	e7ed      	b.n	800a692 <_free_r+0x22>
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	b10b      	cbz	r3, 800a6c0 <_free_r+0x50>
 800a6bc:	42a3      	cmp	r3, r4
 800a6be:	d9fa      	bls.n	800a6b6 <_free_r+0x46>
 800a6c0:	6811      	ldr	r1, [r2, #0]
 800a6c2:	1855      	adds	r5, r2, r1
 800a6c4:	42a5      	cmp	r5, r4
 800a6c6:	d10b      	bne.n	800a6e0 <_free_r+0x70>
 800a6c8:	6824      	ldr	r4, [r4, #0]
 800a6ca:	4421      	add	r1, r4
 800a6cc:	1854      	adds	r4, r2, r1
 800a6ce:	42a3      	cmp	r3, r4
 800a6d0:	6011      	str	r1, [r2, #0]
 800a6d2:	d1e0      	bne.n	800a696 <_free_r+0x26>
 800a6d4:	681c      	ldr	r4, [r3, #0]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	6053      	str	r3, [r2, #4]
 800a6da:	440c      	add	r4, r1
 800a6dc:	6014      	str	r4, [r2, #0]
 800a6de:	e7da      	b.n	800a696 <_free_r+0x26>
 800a6e0:	d902      	bls.n	800a6e8 <_free_r+0x78>
 800a6e2:	230c      	movs	r3, #12
 800a6e4:	6003      	str	r3, [r0, #0]
 800a6e6:	e7d6      	b.n	800a696 <_free_r+0x26>
 800a6e8:	6825      	ldr	r5, [r4, #0]
 800a6ea:	1961      	adds	r1, r4, r5
 800a6ec:	428b      	cmp	r3, r1
 800a6ee:	bf04      	itt	eq
 800a6f0:	6819      	ldreq	r1, [r3, #0]
 800a6f2:	685b      	ldreq	r3, [r3, #4]
 800a6f4:	6063      	str	r3, [r4, #4]
 800a6f6:	bf04      	itt	eq
 800a6f8:	1949      	addeq	r1, r1, r5
 800a6fa:	6021      	streq	r1, [r4, #0]
 800a6fc:	6054      	str	r4, [r2, #4]
 800a6fe:	e7ca      	b.n	800a696 <_free_r+0x26>
 800a700:	b003      	add	sp, #12
 800a702:	bd30      	pop	{r4, r5, pc}
 800a704:	20000798 	.word	0x20000798

0800a708 <__ascii_mbtowc>:
 800a708:	b082      	sub	sp, #8
 800a70a:	b901      	cbnz	r1, 800a70e <__ascii_mbtowc+0x6>
 800a70c:	a901      	add	r1, sp, #4
 800a70e:	b142      	cbz	r2, 800a722 <__ascii_mbtowc+0x1a>
 800a710:	b14b      	cbz	r3, 800a726 <__ascii_mbtowc+0x1e>
 800a712:	7813      	ldrb	r3, [r2, #0]
 800a714:	600b      	str	r3, [r1, #0]
 800a716:	7812      	ldrb	r2, [r2, #0]
 800a718:	1e10      	subs	r0, r2, #0
 800a71a:	bf18      	it	ne
 800a71c:	2001      	movne	r0, #1
 800a71e:	b002      	add	sp, #8
 800a720:	4770      	bx	lr
 800a722:	4610      	mov	r0, r2
 800a724:	e7fb      	b.n	800a71e <__ascii_mbtowc+0x16>
 800a726:	f06f 0001 	mvn.w	r0, #1
 800a72a:	e7f8      	b.n	800a71e <__ascii_mbtowc+0x16>

0800a72c <fiprintf>:
 800a72c:	b40e      	push	{r1, r2, r3}
 800a72e:	b503      	push	{r0, r1, lr}
 800a730:	4601      	mov	r1, r0
 800a732:	ab03      	add	r3, sp, #12
 800a734:	4805      	ldr	r0, [pc, #20]	; (800a74c <fiprintf+0x20>)
 800a736:	f853 2b04 	ldr.w	r2, [r3], #4
 800a73a:	6800      	ldr	r0, [r0, #0]
 800a73c:	9301      	str	r3, [sp, #4]
 800a73e:	f000 f845 	bl	800a7cc <_vfiprintf_r>
 800a742:	b002      	add	sp, #8
 800a744:	f85d eb04 	ldr.w	lr, [sp], #4
 800a748:	b003      	add	sp, #12
 800a74a:	4770      	bx	lr
 800a74c:	20000074 	.word	0x20000074

0800a750 <__ascii_wctomb>:
 800a750:	b149      	cbz	r1, 800a766 <__ascii_wctomb+0x16>
 800a752:	2aff      	cmp	r2, #255	; 0xff
 800a754:	bf85      	ittet	hi
 800a756:	238a      	movhi	r3, #138	; 0x8a
 800a758:	6003      	strhi	r3, [r0, #0]
 800a75a:	700a      	strbls	r2, [r1, #0]
 800a75c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a760:	bf98      	it	ls
 800a762:	2001      	movls	r0, #1
 800a764:	4770      	bx	lr
 800a766:	4608      	mov	r0, r1
 800a768:	4770      	bx	lr

0800a76a <abort>:
 800a76a:	b508      	push	{r3, lr}
 800a76c:	2006      	movs	r0, #6
 800a76e:	f000 fa89 	bl	800ac84 <raise>
 800a772:	2001      	movs	r0, #1
 800a774:	f7f8 fa72 	bl	8002c5c <_exit>

0800a778 <__sfputc_r>:
 800a778:	6893      	ldr	r3, [r2, #8]
 800a77a:	3b01      	subs	r3, #1
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	b410      	push	{r4}
 800a780:	6093      	str	r3, [r2, #8]
 800a782:	da08      	bge.n	800a796 <__sfputc_r+0x1e>
 800a784:	6994      	ldr	r4, [r2, #24]
 800a786:	42a3      	cmp	r3, r4
 800a788:	db01      	blt.n	800a78e <__sfputc_r+0x16>
 800a78a:	290a      	cmp	r1, #10
 800a78c:	d103      	bne.n	800a796 <__sfputc_r+0x1e>
 800a78e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a792:	f000 b935 	b.w	800aa00 <__swbuf_r>
 800a796:	6813      	ldr	r3, [r2, #0]
 800a798:	1c58      	adds	r0, r3, #1
 800a79a:	6010      	str	r0, [r2, #0]
 800a79c:	7019      	strb	r1, [r3, #0]
 800a79e:	4608      	mov	r0, r1
 800a7a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7a4:	4770      	bx	lr

0800a7a6 <__sfputs_r>:
 800a7a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7a8:	4606      	mov	r6, r0
 800a7aa:	460f      	mov	r7, r1
 800a7ac:	4614      	mov	r4, r2
 800a7ae:	18d5      	adds	r5, r2, r3
 800a7b0:	42ac      	cmp	r4, r5
 800a7b2:	d101      	bne.n	800a7b8 <__sfputs_r+0x12>
 800a7b4:	2000      	movs	r0, #0
 800a7b6:	e007      	b.n	800a7c8 <__sfputs_r+0x22>
 800a7b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7bc:	463a      	mov	r2, r7
 800a7be:	4630      	mov	r0, r6
 800a7c0:	f7ff ffda 	bl	800a778 <__sfputc_r>
 800a7c4:	1c43      	adds	r3, r0, #1
 800a7c6:	d1f3      	bne.n	800a7b0 <__sfputs_r+0xa>
 800a7c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a7cc <_vfiprintf_r>:
 800a7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d0:	460d      	mov	r5, r1
 800a7d2:	b09d      	sub	sp, #116	; 0x74
 800a7d4:	4614      	mov	r4, r2
 800a7d6:	4698      	mov	r8, r3
 800a7d8:	4606      	mov	r6, r0
 800a7da:	b118      	cbz	r0, 800a7e4 <_vfiprintf_r+0x18>
 800a7dc:	6a03      	ldr	r3, [r0, #32]
 800a7de:	b90b      	cbnz	r3, 800a7e4 <_vfiprintf_r+0x18>
 800a7e0:	f7fe faa2 	bl	8008d28 <__sinit>
 800a7e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7e6:	07d9      	lsls	r1, r3, #31
 800a7e8:	d405      	bmi.n	800a7f6 <_vfiprintf_r+0x2a>
 800a7ea:	89ab      	ldrh	r3, [r5, #12]
 800a7ec:	059a      	lsls	r2, r3, #22
 800a7ee:	d402      	bmi.n	800a7f6 <_vfiprintf_r+0x2a>
 800a7f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7f2:	f7fe fb06 	bl	8008e02 <__retarget_lock_acquire_recursive>
 800a7f6:	89ab      	ldrh	r3, [r5, #12]
 800a7f8:	071b      	lsls	r3, r3, #28
 800a7fa:	d501      	bpl.n	800a800 <_vfiprintf_r+0x34>
 800a7fc:	692b      	ldr	r3, [r5, #16]
 800a7fe:	b99b      	cbnz	r3, 800a828 <_vfiprintf_r+0x5c>
 800a800:	4629      	mov	r1, r5
 800a802:	4630      	mov	r0, r6
 800a804:	f000 f93a 	bl	800aa7c <__swsetup_r>
 800a808:	b170      	cbz	r0, 800a828 <_vfiprintf_r+0x5c>
 800a80a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a80c:	07dc      	lsls	r4, r3, #31
 800a80e:	d504      	bpl.n	800a81a <_vfiprintf_r+0x4e>
 800a810:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a814:	b01d      	add	sp, #116	; 0x74
 800a816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a81a:	89ab      	ldrh	r3, [r5, #12]
 800a81c:	0598      	lsls	r0, r3, #22
 800a81e:	d4f7      	bmi.n	800a810 <_vfiprintf_r+0x44>
 800a820:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a822:	f7fe faef 	bl	8008e04 <__retarget_lock_release_recursive>
 800a826:	e7f3      	b.n	800a810 <_vfiprintf_r+0x44>
 800a828:	2300      	movs	r3, #0
 800a82a:	9309      	str	r3, [sp, #36]	; 0x24
 800a82c:	2320      	movs	r3, #32
 800a82e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a832:	f8cd 800c 	str.w	r8, [sp, #12]
 800a836:	2330      	movs	r3, #48	; 0x30
 800a838:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a9ec <_vfiprintf_r+0x220>
 800a83c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a840:	f04f 0901 	mov.w	r9, #1
 800a844:	4623      	mov	r3, r4
 800a846:	469a      	mov	sl, r3
 800a848:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a84c:	b10a      	cbz	r2, 800a852 <_vfiprintf_r+0x86>
 800a84e:	2a25      	cmp	r2, #37	; 0x25
 800a850:	d1f9      	bne.n	800a846 <_vfiprintf_r+0x7a>
 800a852:	ebba 0b04 	subs.w	fp, sl, r4
 800a856:	d00b      	beq.n	800a870 <_vfiprintf_r+0xa4>
 800a858:	465b      	mov	r3, fp
 800a85a:	4622      	mov	r2, r4
 800a85c:	4629      	mov	r1, r5
 800a85e:	4630      	mov	r0, r6
 800a860:	f7ff ffa1 	bl	800a7a6 <__sfputs_r>
 800a864:	3001      	adds	r0, #1
 800a866:	f000 80a9 	beq.w	800a9bc <_vfiprintf_r+0x1f0>
 800a86a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a86c:	445a      	add	r2, fp
 800a86e:	9209      	str	r2, [sp, #36]	; 0x24
 800a870:	f89a 3000 	ldrb.w	r3, [sl]
 800a874:	2b00      	cmp	r3, #0
 800a876:	f000 80a1 	beq.w	800a9bc <_vfiprintf_r+0x1f0>
 800a87a:	2300      	movs	r3, #0
 800a87c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a880:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a884:	f10a 0a01 	add.w	sl, sl, #1
 800a888:	9304      	str	r3, [sp, #16]
 800a88a:	9307      	str	r3, [sp, #28]
 800a88c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a890:	931a      	str	r3, [sp, #104]	; 0x68
 800a892:	4654      	mov	r4, sl
 800a894:	2205      	movs	r2, #5
 800a896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a89a:	4854      	ldr	r0, [pc, #336]	; (800a9ec <_vfiprintf_r+0x220>)
 800a89c:	f7f5 fcb8 	bl	8000210 <memchr>
 800a8a0:	9a04      	ldr	r2, [sp, #16]
 800a8a2:	b9d8      	cbnz	r0, 800a8dc <_vfiprintf_r+0x110>
 800a8a4:	06d1      	lsls	r1, r2, #27
 800a8a6:	bf44      	itt	mi
 800a8a8:	2320      	movmi	r3, #32
 800a8aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8ae:	0713      	lsls	r3, r2, #28
 800a8b0:	bf44      	itt	mi
 800a8b2:	232b      	movmi	r3, #43	; 0x2b
 800a8b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8b8:	f89a 3000 	ldrb.w	r3, [sl]
 800a8bc:	2b2a      	cmp	r3, #42	; 0x2a
 800a8be:	d015      	beq.n	800a8ec <_vfiprintf_r+0x120>
 800a8c0:	9a07      	ldr	r2, [sp, #28]
 800a8c2:	4654      	mov	r4, sl
 800a8c4:	2000      	movs	r0, #0
 800a8c6:	f04f 0c0a 	mov.w	ip, #10
 800a8ca:	4621      	mov	r1, r4
 800a8cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8d0:	3b30      	subs	r3, #48	; 0x30
 800a8d2:	2b09      	cmp	r3, #9
 800a8d4:	d94d      	bls.n	800a972 <_vfiprintf_r+0x1a6>
 800a8d6:	b1b0      	cbz	r0, 800a906 <_vfiprintf_r+0x13a>
 800a8d8:	9207      	str	r2, [sp, #28]
 800a8da:	e014      	b.n	800a906 <_vfiprintf_r+0x13a>
 800a8dc:	eba0 0308 	sub.w	r3, r0, r8
 800a8e0:	fa09 f303 	lsl.w	r3, r9, r3
 800a8e4:	4313      	orrs	r3, r2
 800a8e6:	9304      	str	r3, [sp, #16]
 800a8e8:	46a2      	mov	sl, r4
 800a8ea:	e7d2      	b.n	800a892 <_vfiprintf_r+0xc6>
 800a8ec:	9b03      	ldr	r3, [sp, #12]
 800a8ee:	1d19      	adds	r1, r3, #4
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	9103      	str	r1, [sp, #12]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	bfbb      	ittet	lt
 800a8f8:	425b      	neglt	r3, r3
 800a8fa:	f042 0202 	orrlt.w	r2, r2, #2
 800a8fe:	9307      	strge	r3, [sp, #28]
 800a900:	9307      	strlt	r3, [sp, #28]
 800a902:	bfb8      	it	lt
 800a904:	9204      	strlt	r2, [sp, #16]
 800a906:	7823      	ldrb	r3, [r4, #0]
 800a908:	2b2e      	cmp	r3, #46	; 0x2e
 800a90a:	d10c      	bne.n	800a926 <_vfiprintf_r+0x15a>
 800a90c:	7863      	ldrb	r3, [r4, #1]
 800a90e:	2b2a      	cmp	r3, #42	; 0x2a
 800a910:	d134      	bne.n	800a97c <_vfiprintf_r+0x1b0>
 800a912:	9b03      	ldr	r3, [sp, #12]
 800a914:	1d1a      	adds	r2, r3, #4
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	9203      	str	r2, [sp, #12]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	bfb8      	it	lt
 800a91e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a922:	3402      	adds	r4, #2
 800a924:	9305      	str	r3, [sp, #20]
 800a926:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a9fc <_vfiprintf_r+0x230>
 800a92a:	7821      	ldrb	r1, [r4, #0]
 800a92c:	2203      	movs	r2, #3
 800a92e:	4650      	mov	r0, sl
 800a930:	f7f5 fc6e 	bl	8000210 <memchr>
 800a934:	b138      	cbz	r0, 800a946 <_vfiprintf_r+0x17a>
 800a936:	9b04      	ldr	r3, [sp, #16]
 800a938:	eba0 000a 	sub.w	r0, r0, sl
 800a93c:	2240      	movs	r2, #64	; 0x40
 800a93e:	4082      	lsls	r2, r0
 800a940:	4313      	orrs	r3, r2
 800a942:	3401      	adds	r4, #1
 800a944:	9304      	str	r3, [sp, #16]
 800a946:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a94a:	4829      	ldr	r0, [pc, #164]	; (800a9f0 <_vfiprintf_r+0x224>)
 800a94c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a950:	2206      	movs	r2, #6
 800a952:	f7f5 fc5d 	bl	8000210 <memchr>
 800a956:	2800      	cmp	r0, #0
 800a958:	d03f      	beq.n	800a9da <_vfiprintf_r+0x20e>
 800a95a:	4b26      	ldr	r3, [pc, #152]	; (800a9f4 <_vfiprintf_r+0x228>)
 800a95c:	bb1b      	cbnz	r3, 800a9a6 <_vfiprintf_r+0x1da>
 800a95e:	9b03      	ldr	r3, [sp, #12]
 800a960:	3307      	adds	r3, #7
 800a962:	f023 0307 	bic.w	r3, r3, #7
 800a966:	3308      	adds	r3, #8
 800a968:	9303      	str	r3, [sp, #12]
 800a96a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a96c:	443b      	add	r3, r7
 800a96e:	9309      	str	r3, [sp, #36]	; 0x24
 800a970:	e768      	b.n	800a844 <_vfiprintf_r+0x78>
 800a972:	fb0c 3202 	mla	r2, ip, r2, r3
 800a976:	460c      	mov	r4, r1
 800a978:	2001      	movs	r0, #1
 800a97a:	e7a6      	b.n	800a8ca <_vfiprintf_r+0xfe>
 800a97c:	2300      	movs	r3, #0
 800a97e:	3401      	adds	r4, #1
 800a980:	9305      	str	r3, [sp, #20]
 800a982:	4619      	mov	r1, r3
 800a984:	f04f 0c0a 	mov.w	ip, #10
 800a988:	4620      	mov	r0, r4
 800a98a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a98e:	3a30      	subs	r2, #48	; 0x30
 800a990:	2a09      	cmp	r2, #9
 800a992:	d903      	bls.n	800a99c <_vfiprintf_r+0x1d0>
 800a994:	2b00      	cmp	r3, #0
 800a996:	d0c6      	beq.n	800a926 <_vfiprintf_r+0x15a>
 800a998:	9105      	str	r1, [sp, #20]
 800a99a:	e7c4      	b.n	800a926 <_vfiprintf_r+0x15a>
 800a99c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9a0:	4604      	mov	r4, r0
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e7f0      	b.n	800a988 <_vfiprintf_r+0x1bc>
 800a9a6:	ab03      	add	r3, sp, #12
 800a9a8:	9300      	str	r3, [sp, #0]
 800a9aa:	462a      	mov	r2, r5
 800a9ac:	4b12      	ldr	r3, [pc, #72]	; (800a9f8 <_vfiprintf_r+0x22c>)
 800a9ae:	a904      	add	r1, sp, #16
 800a9b0:	4630      	mov	r0, r6
 800a9b2:	f7fd fd67 	bl	8008484 <_printf_float>
 800a9b6:	4607      	mov	r7, r0
 800a9b8:	1c78      	adds	r0, r7, #1
 800a9ba:	d1d6      	bne.n	800a96a <_vfiprintf_r+0x19e>
 800a9bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9be:	07d9      	lsls	r1, r3, #31
 800a9c0:	d405      	bmi.n	800a9ce <_vfiprintf_r+0x202>
 800a9c2:	89ab      	ldrh	r3, [r5, #12]
 800a9c4:	059a      	lsls	r2, r3, #22
 800a9c6:	d402      	bmi.n	800a9ce <_vfiprintf_r+0x202>
 800a9c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9ca:	f7fe fa1b 	bl	8008e04 <__retarget_lock_release_recursive>
 800a9ce:	89ab      	ldrh	r3, [r5, #12]
 800a9d0:	065b      	lsls	r3, r3, #25
 800a9d2:	f53f af1d 	bmi.w	800a810 <_vfiprintf_r+0x44>
 800a9d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9d8:	e71c      	b.n	800a814 <_vfiprintf_r+0x48>
 800a9da:	ab03      	add	r3, sp, #12
 800a9dc:	9300      	str	r3, [sp, #0]
 800a9de:	462a      	mov	r2, r5
 800a9e0:	4b05      	ldr	r3, [pc, #20]	; (800a9f8 <_vfiprintf_r+0x22c>)
 800a9e2:	a904      	add	r1, sp, #16
 800a9e4:	4630      	mov	r0, r6
 800a9e6:	f7fd fff1 	bl	80089cc <_printf_i>
 800a9ea:	e7e4      	b.n	800a9b6 <_vfiprintf_r+0x1ea>
 800a9ec:	0800b05b 	.word	0x0800b05b
 800a9f0:	0800b065 	.word	0x0800b065
 800a9f4:	08008485 	.word	0x08008485
 800a9f8:	0800a7a7 	.word	0x0800a7a7
 800a9fc:	0800b061 	.word	0x0800b061

0800aa00 <__swbuf_r>:
 800aa00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa02:	460e      	mov	r6, r1
 800aa04:	4614      	mov	r4, r2
 800aa06:	4605      	mov	r5, r0
 800aa08:	b118      	cbz	r0, 800aa12 <__swbuf_r+0x12>
 800aa0a:	6a03      	ldr	r3, [r0, #32]
 800aa0c:	b90b      	cbnz	r3, 800aa12 <__swbuf_r+0x12>
 800aa0e:	f7fe f98b 	bl	8008d28 <__sinit>
 800aa12:	69a3      	ldr	r3, [r4, #24]
 800aa14:	60a3      	str	r3, [r4, #8]
 800aa16:	89a3      	ldrh	r3, [r4, #12]
 800aa18:	071a      	lsls	r2, r3, #28
 800aa1a:	d525      	bpl.n	800aa68 <__swbuf_r+0x68>
 800aa1c:	6923      	ldr	r3, [r4, #16]
 800aa1e:	b31b      	cbz	r3, 800aa68 <__swbuf_r+0x68>
 800aa20:	6823      	ldr	r3, [r4, #0]
 800aa22:	6922      	ldr	r2, [r4, #16]
 800aa24:	1a98      	subs	r0, r3, r2
 800aa26:	6963      	ldr	r3, [r4, #20]
 800aa28:	b2f6      	uxtb	r6, r6
 800aa2a:	4283      	cmp	r3, r0
 800aa2c:	4637      	mov	r7, r6
 800aa2e:	dc04      	bgt.n	800aa3a <__swbuf_r+0x3a>
 800aa30:	4621      	mov	r1, r4
 800aa32:	4628      	mov	r0, r5
 800aa34:	f7ff f990 	bl	8009d58 <_fflush_r>
 800aa38:	b9e0      	cbnz	r0, 800aa74 <__swbuf_r+0x74>
 800aa3a:	68a3      	ldr	r3, [r4, #8]
 800aa3c:	3b01      	subs	r3, #1
 800aa3e:	60a3      	str	r3, [r4, #8]
 800aa40:	6823      	ldr	r3, [r4, #0]
 800aa42:	1c5a      	adds	r2, r3, #1
 800aa44:	6022      	str	r2, [r4, #0]
 800aa46:	701e      	strb	r6, [r3, #0]
 800aa48:	6962      	ldr	r2, [r4, #20]
 800aa4a:	1c43      	adds	r3, r0, #1
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d004      	beq.n	800aa5a <__swbuf_r+0x5a>
 800aa50:	89a3      	ldrh	r3, [r4, #12]
 800aa52:	07db      	lsls	r3, r3, #31
 800aa54:	d506      	bpl.n	800aa64 <__swbuf_r+0x64>
 800aa56:	2e0a      	cmp	r6, #10
 800aa58:	d104      	bne.n	800aa64 <__swbuf_r+0x64>
 800aa5a:	4621      	mov	r1, r4
 800aa5c:	4628      	mov	r0, r5
 800aa5e:	f7ff f97b 	bl	8009d58 <_fflush_r>
 800aa62:	b938      	cbnz	r0, 800aa74 <__swbuf_r+0x74>
 800aa64:	4638      	mov	r0, r7
 800aa66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa68:	4621      	mov	r1, r4
 800aa6a:	4628      	mov	r0, r5
 800aa6c:	f000 f806 	bl	800aa7c <__swsetup_r>
 800aa70:	2800      	cmp	r0, #0
 800aa72:	d0d5      	beq.n	800aa20 <__swbuf_r+0x20>
 800aa74:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800aa78:	e7f4      	b.n	800aa64 <__swbuf_r+0x64>
	...

0800aa7c <__swsetup_r>:
 800aa7c:	b538      	push	{r3, r4, r5, lr}
 800aa7e:	4b2a      	ldr	r3, [pc, #168]	; (800ab28 <__swsetup_r+0xac>)
 800aa80:	4605      	mov	r5, r0
 800aa82:	6818      	ldr	r0, [r3, #0]
 800aa84:	460c      	mov	r4, r1
 800aa86:	b118      	cbz	r0, 800aa90 <__swsetup_r+0x14>
 800aa88:	6a03      	ldr	r3, [r0, #32]
 800aa8a:	b90b      	cbnz	r3, 800aa90 <__swsetup_r+0x14>
 800aa8c:	f7fe f94c 	bl	8008d28 <__sinit>
 800aa90:	89a3      	ldrh	r3, [r4, #12]
 800aa92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa96:	0718      	lsls	r0, r3, #28
 800aa98:	d422      	bmi.n	800aae0 <__swsetup_r+0x64>
 800aa9a:	06d9      	lsls	r1, r3, #27
 800aa9c:	d407      	bmi.n	800aaae <__swsetup_r+0x32>
 800aa9e:	2309      	movs	r3, #9
 800aaa0:	602b      	str	r3, [r5, #0]
 800aaa2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aaa6:	81a3      	strh	r3, [r4, #12]
 800aaa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aaac:	e034      	b.n	800ab18 <__swsetup_r+0x9c>
 800aaae:	0758      	lsls	r0, r3, #29
 800aab0:	d512      	bpl.n	800aad8 <__swsetup_r+0x5c>
 800aab2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aab4:	b141      	cbz	r1, 800aac8 <__swsetup_r+0x4c>
 800aab6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aaba:	4299      	cmp	r1, r3
 800aabc:	d002      	beq.n	800aac4 <__swsetup_r+0x48>
 800aabe:	4628      	mov	r0, r5
 800aac0:	f7ff fdd6 	bl	800a670 <_free_r>
 800aac4:	2300      	movs	r3, #0
 800aac6:	6363      	str	r3, [r4, #52]	; 0x34
 800aac8:	89a3      	ldrh	r3, [r4, #12]
 800aaca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aace:	81a3      	strh	r3, [r4, #12]
 800aad0:	2300      	movs	r3, #0
 800aad2:	6063      	str	r3, [r4, #4]
 800aad4:	6923      	ldr	r3, [r4, #16]
 800aad6:	6023      	str	r3, [r4, #0]
 800aad8:	89a3      	ldrh	r3, [r4, #12]
 800aada:	f043 0308 	orr.w	r3, r3, #8
 800aade:	81a3      	strh	r3, [r4, #12]
 800aae0:	6923      	ldr	r3, [r4, #16]
 800aae2:	b94b      	cbnz	r3, 800aaf8 <__swsetup_r+0x7c>
 800aae4:	89a3      	ldrh	r3, [r4, #12]
 800aae6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aaea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aaee:	d003      	beq.n	800aaf8 <__swsetup_r+0x7c>
 800aaf0:	4621      	mov	r1, r4
 800aaf2:	4628      	mov	r0, r5
 800aaf4:	f000 f840 	bl	800ab78 <__smakebuf_r>
 800aaf8:	89a0      	ldrh	r0, [r4, #12]
 800aafa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aafe:	f010 0301 	ands.w	r3, r0, #1
 800ab02:	d00a      	beq.n	800ab1a <__swsetup_r+0x9e>
 800ab04:	2300      	movs	r3, #0
 800ab06:	60a3      	str	r3, [r4, #8]
 800ab08:	6963      	ldr	r3, [r4, #20]
 800ab0a:	425b      	negs	r3, r3
 800ab0c:	61a3      	str	r3, [r4, #24]
 800ab0e:	6923      	ldr	r3, [r4, #16]
 800ab10:	b943      	cbnz	r3, 800ab24 <__swsetup_r+0xa8>
 800ab12:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ab16:	d1c4      	bne.n	800aaa2 <__swsetup_r+0x26>
 800ab18:	bd38      	pop	{r3, r4, r5, pc}
 800ab1a:	0781      	lsls	r1, r0, #30
 800ab1c:	bf58      	it	pl
 800ab1e:	6963      	ldrpl	r3, [r4, #20]
 800ab20:	60a3      	str	r3, [r4, #8]
 800ab22:	e7f4      	b.n	800ab0e <__swsetup_r+0x92>
 800ab24:	2000      	movs	r0, #0
 800ab26:	e7f7      	b.n	800ab18 <__swsetup_r+0x9c>
 800ab28:	20000074 	.word	0x20000074

0800ab2c <__swhatbuf_r>:
 800ab2c:	b570      	push	{r4, r5, r6, lr}
 800ab2e:	460c      	mov	r4, r1
 800ab30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab34:	2900      	cmp	r1, #0
 800ab36:	b096      	sub	sp, #88	; 0x58
 800ab38:	4615      	mov	r5, r2
 800ab3a:	461e      	mov	r6, r3
 800ab3c:	da0d      	bge.n	800ab5a <__swhatbuf_r+0x2e>
 800ab3e:	89a3      	ldrh	r3, [r4, #12]
 800ab40:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ab44:	f04f 0100 	mov.w	r1, #0
 800ab48:	bf0c      	ite	eq
 800ab4a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ab4e:	2340      	movne	r3, #64	; 0x40
 800ab50:	2000      	movs	r0, #0
 800ab52:	6031      	str	r1, [r6, #0]
 800ab54:	602b      	str	r3, [r5, #0]
 800ab56:	b016      	add	sp, #88	; 0x58
 800ab58:	bd70      	pop	{r4, r5, r6, pc}
 800ab5a:	466a      	mov	r2, sp
 800ab5c:	f000 f848 	bl	800abf0 <_fstat_r>
 800ab60:	2800      	cmp	r0, #0
 800ab62:	dbec      	blt.n	800ab3e <__swhatbuf_r+0x12>
 800ab64:	9901      	ldr	r1, [sp, #4]
 800ab66:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ab6a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ab6e:	4259      	negs	r1, r3
 800ab70:	4159      	adcs	r1, r3
 800ab72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab76:	e7eb      	b.n	800ab50 <__swhatbuf_r+0x24>

0800ab78 <__smakebuf_r>:
 800ab78:	898b      	ldrh	r3, [r1, #12]
 800ab7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab7c:	079d      	lsls	r5, r3, #30
 800ab7e:	4606      	mov	r6, r0
 800ab80:	460c      	mov	r4, r1
 800ab82:	d507      	bpl.n	800ab94 <__smakebuf_r+0x1c>
 800ab84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab88:	6023      	str	r3, [r4, #0]
 800ab8a:	6123      	str	r3, [r4, #16]
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	6163      	str	r3, [r4, #20]
 800ab90:	b002      	add	sp, #8
 800ab92:	bd70      	pop	{r4, r5, r6, pc}
 800ab94:	ab01      	add	r3, sp, #4
 800ab96:	466a      	mov	r2, sp
 800ab98:	f7ff ffc8 	bl	800ab2c <__swhatbuf_r>
 800ab9c:	9900      	ldr	r1, [sp, #0]
 800ab9e:	4605      	mov	r5, r0
 800aba0:	4630      	mov	r0, r6
 800aba2:	f7fe ffd3 	bl	8009b4c <_malloc_r>
 800aba6:	b948      	cbnz	r0, 800abbc <__smakebuf_r+0x44>
 800aba8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abac:	059a      	lsls	r2, r3, #22
 800abae:	d4ef      	bmi.n	800ab90 <__smakebuf_r+0x18>
 800abb0:	f023 0303 	bic.w	r3, r3, #3
 800abb4:	f043 0302 	orr.w	r3, r3, #2
 800abb8:	81a3      	strh	r3, [r4, #12]
 800abba:	e7e3      	b.n	800ab84 <__smakebuf_r+0xc>
 800abbc:	89a3      	ldrh	r3, [r4, #12]
 800abbe:	6020      	str	r0, [r4, #0]
 800abc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abc4:	81a3      	strh	r3, [r4, #12]
 800abc6:	9b00      	ldr	r3, [sp, #0]
 800abc8:	6163      	str	r3, [r4, #20]
 800abca:	9b01      	ldr	r3, [sp, #4]
 800abcc:	6120      	str	r0, [r4, #16]
 800abce:	b15b      	cbz	r3, 800abe8 <__smakebuf_r+0x70>
 800abd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abd4:	4630      	mov	r0, r6
 800abd6:	f000 f81d 	bl	800ac14 <_isatty_r>
 800abda:	b128      	cbz	r0, 800abe8 <__smakebuf_r+0x70>
 800abdc:	89a3      	ldrh	r3, [r4, #12]
 800abde:	f023 0303 	bic.w	r3, r3, #3
 800abe2:	f043 0301 	orr.w	r3, r3, #1
 800abe6:	81a3      	strh	r3, [r4, #12]
 800abe8:	89a3      	ldrh	r3, [r4, #12]
 800abea:	431d      	orrs	r5, r3
 800abec:	81a5      	strh	r5, [r4, #12]
 800abee:	e7cf      	b.n	800ab90 <__smakebuf_r+0x18>

0800abf0 <_fstat_r>:
 800abf0:	b538      	push	{r3, r4, r5, lr}
 800abf2:	4d07      	ldr	r5, [pc, #28]	; (800ac10 <_fstat_r+0x20>)
 800abf4:	2300      	movs	r3, #0
 800abf6:	4604      	mov	r4, r0
 800abf8:	4608      	mov	r0, r1
 800abfa:	4611      	mov	r1, r2
 800abfc:	602b      	str	r3, [r5, #0]
 800abfe:	f7f8 f87c 	bl	8002cfa <_fstat>
 800ac02:	1c43      	adds	r3, r0, #1
 800ac04:	d102      	bne.n	800ac0c <_fstat_r+0x1c>
 800ac06:	682b      	ldr	r3, [r5, #0]
 800ac08:	b103      	cbz	r3, 800ac0c <_fstat_r+0x1c>
 800ac0a:	6023      	str	r3, [r4, #0]
 800ac0c:	bd38      	pop	{r3, r4, r5, pc}
 800ac0e:	bf00      	nop
 800ac10:	200007a0 	.word	0x200007a0

0800ac14 <_isatty_r>:
 800ac14:	b538      	push	{r3, r4, r5, lr}
 800ac16:	4d06      	ldr	r5, [pc, #24]	; (800ac30 <_isatty_r+0x1c>)
 800ac18:	2300      	movs	r3, #0
 800ac1a:	4604      	mov	r4, r0
 800ac1c:	4608      	mov	r0, r1
 800ac1e:	602b      	str	r3, [r5, #0]
 800ac20:	f7f8 f87b 	bl	8002d1a <_isatty>
 800ac24:	1c43      	adds	r3, r0, #1
 800ac26:	d102      	bne.n	800ac2e <_isatty_r+0x1a>
 800ac28:	682b      	ldr	r3, [r5, #0]
 800ac2a:	b103      	cbz	r3, 800ac2e <_isatty_r+0x1a>
 800ac2c:	6023      	str	r3, [r4, #0]
 800ac2e:	bd38      	pop	{r3, r4, r5, pc}
 800ac30:	200007a0 	.word	0x200007a0

0800ac34 <_raise_r>:
 800ac34:	291f      	cmp	r1, #31
 800ac36:	b538      	push	{r3, r4, r5, lr}
 800ac38:	4604      	mov	r4, r0
 800ac3a:	460d      	mov	r5, r1
 800ac3c:	d904      	bls.n	800ac48 <_raise_r+0x14>
 800ac3e:	2316      	movs	r3, #22
 800ac40:	6003      	str	r3, [r0, #0]
 800ac42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac46:	bd38      	pop	{r3, r4, r5, pc}
 800ac48:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ac4a:	b112      	cbz	r2, 800ac52 <_raise_r+0x1e>
 800ac4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac50:	b94b      	cbnz	r3, 800ac66 <_raise_r+0x32>
 800ac52:	4620      	mov	r0, r4
 800ac54:	f000 f830 	bl	800acb8 <_getpid_r>
 800ac58:	462a      	mov	r2, r5
 800ac5a:	4601      	mov	r1, r0
 800ac5c:	4620      	mov	r0, r4
 800ac5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac62:	f000 b817 	b.w	800ac94 <_kill_r>
 800ac66:	2b01      	cmp	r3, #1
 800ac68:	d00a      	beq.n	800ac80 <_raise_r+0x4c>
 800ac6a:	1c59      	adds	r1, r3, #1
 800ac6c:	d103      	bne.n	800ac76 <_raise_r+0x42>
 800ac6e:	2316      	movs	r3, #22
 800ac70:	6003      	str	r3, [r0, #0]
 800ac72:	2001      	movs	r0, #1
 800ac74:	e7e7      	b.n	800ac46 <_raise_r+0x12>
 800ac76:	2400      	movs	r4, #0
 800ac78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac7c:	4628      	mov	r0, r5
 800ac7e:	4798      	blx	r3
 800ac80:	2000      	movs	r0, #0
 800ac82:	e7e0      	b.n	800ac46 <_raise_r+0x12>

0800ac84 <raise>:
 800ac84:	4b02      	ldr	r3, [pc, #8]	; (800ac90 <raise+0xc>)
 800ac86:	4601      	mov	r1, r0
 800ac88:	6818      	ldr	r0, [r3, #0]
 800ac8a:	f7ff bfd3 	b.w	800ac34 <_raise_r>
 800ac8e:	bf00      	nop
 800ac90:	20000074 	.word	0x20000074

0800ac94 <_kill_r>:
 800ac94:	b538      	push	{r3, r4, r5, lr}
 800ac96:	4d07      	ldr	r5, [pc, #28]	; (800acb4 <_kill_r+0x20>)
 800ac98:	2300      	movs	r3, #0
 800ac9a:	4604      	mov	r4, r0
 800ac9c:	4608      	mov	r0, r1
 800ac9e:	4611      	mov	r1, r2
 800aca0:	602b      	str	r3, [r5, #0]
 800aca2:	f7f7 ffcb 	bl	8002c3c <_kill>
 800aca6:	1c43      	adds	r3, r0, #1
 800aca8:	d102      	bne.n	800acb0 <_kill_r+0x1c>
 800acaa:	682b      	ldr	r3, [r5, #0]
 800acac:	b103      	cbz	r3, 800acb0 <_kill_r+0x1c>
 800acae:	6023      	str	r3, [r4, #0]
 800acb0:	bd38      	pop	{r3, r4, r5, pc}
 800acb2:	bf00      	nop
 800acb4:	200007a0 	.word	0x200007a0

0800acb8 <_getpid_r>:
 800acb8:	f7f7 bfb8 	b.w	8002c2c <_getpid>

0800acbc <_init>:
 800acbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acbe:	bf00      	nop
 800acc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acc2:	bc08      	pop	{r3}
 800acc4:	469e      	mov	lr, r3
 800acc6:	4770      	bx	lr

0800acc8 <_fini>:
 800acc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acca:	bf00      	nop
 800accc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acce:	bc08      	pop	{r3}
 800acd0:	469e      	mov	lr, r3
 800acd2:	4770      	bx	lr
