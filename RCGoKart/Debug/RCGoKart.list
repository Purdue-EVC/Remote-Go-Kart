
RCGoKart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a198  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  0800a368  0800a368  0001a368  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6f4  0800a6f4  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6f4  0800a6f4  0001a6f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6fc  0800a6fc  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6fc  0800a6fc  0001a6fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a700  0800a700  0001a700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800a704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000540  20000200  0800a904  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000740  0800a904  00020740  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .comment      00000086  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 13 .debug_info   000155a7  00000000  00000000  000202b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bc6  00000000  00000000  0003585d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001478  00000000  00000000  00038428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001029  00000000  00000000  000398a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025a31  00000000  00000000  0003a8c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018ac0  00000000  00000000  000602fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e93c2  00000000  00000000  00078dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006898  00000000  00000000  0016217c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00168a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a350 	.word	0x0800a350

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	0800a350 	.word	0x0800a350

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <HAL_TIM_IC_CaptureCallback>:

uint32_t ICValue = 0;
uint32_t Frequency = 0;
float Duty = 0;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // If the interrupt is triggered by channel 1
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	7f1b      	ldrb	r3, [r3, #28]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d124      	bne.n	8000fde <HAL_TIM_IC_CaptureCallback+0x5a>
	{
		// Read the IC value
		ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000f94:	2100      	movs	r1, #0
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f005 fb82 	bl	80066a0 <HAL_TIM_ReadCapturedValue>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000fa0:	6013      	str	r3, [r2, #0]

		if (ICValue != 0)
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d019      	beq.n	8000fde <HAL_TIM_IC_CaptureCallback+0x5a>
		{
			// calculate the Duty Cycle
			Duty = (HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) *100)/ICValue;
 8000faa:	2104      	movs	r1, #4
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f005 fb77 	bl	80066a0 <HAL_TIM_ReadCapturedValue>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2264      	movs	r2, #100	; 0x64
 8000fb6:	fb03 f202 	mul.w	r2, r3, r2
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc2:	ee07 3a90 	vmov	s15, r3
 8000fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <HAL_TIM_IC_CaptureCallback+0x68>)
 8000fcc:	edc3 7a00 	vstr	s15, [r3]

			Frequency = 90000000/ICValue;
 8000fd0:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a06      	ldr	r2, [pc, #24]	; (8000ff0 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fda:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000fdc:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200005cc 	.word	0x200005cc
 8000fec:	200005d4 	.word	0x200005d4
 8000ff0:	055d4a80 	.word	0x055d4a80
 8000ff4:	200005d0 	.word	0x200005d0

08000ff8 <steeringInput>:
const float steeringInputAbsoluteMax = 180000;
const float steeringInputAbsoluteMin = 80000;
const float drivingInputAbsoluteMax = 180000;
const float drivingInputAbsoluteMin = 80000;

float steeringInput(uint32_t rawSteeringInput){
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	if(rawSteeringInput > currentSteeringInputMax && rawSteeringInput < steeringInputAbsoluteMax){
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	ee07 3a90 	vmov	s15, r3
 8001006:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800100a:	4b2d      	ldr	r3, [pc, #180]	; (80010c0 <steeringInput+0xc8>)
 800100c:	edd3 7a00 	vldr	s15, [r3]
 8001010:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001018:	dd13      	ble.n	8001042 <steeringInput+0x4a>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	ee07 3a90 	vmov	s15, r3
 8001020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001024:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80010c4 <steeringInput+0xcc>
 8001028:	eef4 7ac7 	vcmpe.f32	s15, s14
 800102c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001030:	d507      	bpl.n	8001042 <steeringInput+0x4a>
		currentSteeringInputMax = rawSteeringInput;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	ee07 3a90 	vmov	s15, r3
 8001038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800103c:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <steeringInput+0xc8>)
 800103e:	edc3 7a00 	vstr	s15, [r3]
	}
	if(rawSteeringInput < currentSteeringInputMin && rawSteeringInput > steeringInputAbsoluteMin){
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	ee07 3a90 	vmov	s15, r3
 8001048:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800104c:	4b1e      	ldr	r3, [pc, #120]	; (80010c8 <steeringInput+0xd0>)
 800104e:	edd3 7a00 	vldr	s15, [r3]
 8001052:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800105a:	d513      	bpl.n	8001084 <steeringInput+0x8c>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	ee07 3a90 	vmov	s15, r3
 8001062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001066:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80010cc <steeringInput+0xd4>
 800106a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800106e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001072:	dd07      	ble.n	8001084 <steeringInput+0x8c>
		currentSteeringInputMin = rawSteeringInput;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	ee07 3a90 	vmov	s15, r3
 800107a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800107e:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <steeringInput+0xd0>)
 8001080:	edc3 7a00 	vstr	s15, [r3]
	}
	return (float)(rawSteeringInput-currentSteeringInputMin)/(currentSteeringInputMax-currentSteeringInputMin);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	ee07 3a90 	vmov	s15, r3
 800108a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <steeringInput+0xd0>)
 8001090:	edd3 7a00 	vldr	s15, [r3]
 8001094:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <steeringInput+0xc8>)
 800109a:	edd3 6a00 	vldr	s13, [r3]
 800109e:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <steeringInput+0xd0>)
 80010a0:	edd3 7a00 	vldr	s15, [r3]
 80010a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80010a8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010ac:	eef0 7a66 	vmov.f32	s15, s13
}
 80010b0:	eeb0 0a67 	vmov.f32	s0, s15
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000014 	.word	0x20000014
 80010c4:	482fc800 	.word	0x482fc800
 80010c8:	20000018 	.word	0x20000018
 80010cc:	479c4000 	.word	0x479c4000

080010d0 <drivingInput>:

float drivingInput(uint32_t rawDrivingInput){
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	if(rawDrivingInput > currentDrivingInputMax && rawDrivingInput < drivingInputAbsoluteMax){
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	ee07 3a90 	vmov	s15, r3
 80010de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010e2:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <drivingInput+0xc8>)
 80010e4:	edd3 7a00 	vldr	s15, [r3]
 80010e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f0:	dd13      	ble.n	800111a <drivingInput+0x4a>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	ee07 3a90 	vmov	s15, r3
 80010f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010fc:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800119c <drivingInput+0xcc>
 8001100:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001108:	d507      	bpl.n	800111a <drivingInput+0x4a>
		currentDrivingInputMax = rawDrivingInput;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	ee07 3a90 	vmov	s15, r3
 8001110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001114:	4b20      	ldr	r3, [pc, #128]	; (8001198 <drivingInput+0xc8>)
 8001116:	edc3 7a00 	vstr	s15, [r3]
	}
	if(rawDrivingInput < currentDrivingInputMin && rawDrivingInput > drivingInputAbsoluteMin){
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	ee07 3a90 	vmov	s15, r3
 8001120:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001124:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <drivingInput+0xd0>)
 8001126:	edd3 7a00 	vldr	s15, [r3]
 800112a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800112e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001132:	d513      	bpl.n	800115c <drivingInput+0x8c>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	ee07 3a90 	vmov	s15, r3
 800113a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800113e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80011a4 <drivingInput+0xd4>
 8001142:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114a:	dd07      	ble.n	800115c <drivingInput+0x8c>
		currentDrivingInputMin = rawDrivingInput;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	ee07 3a90 	vmov	s15, r3
 8001152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001156:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <drivingInput+0xd0>)
 8001158:	edc3 7a00 	vstr	s15, [r3]
	}
	return (float)(rawDrivingInput-currentDrivingInputMin)/(currentDrivingInputMax-currentDrivingInputMin);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	ee07 3a90 	vmov	s15, r3
 8001162:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <drivingInput+0xd0>)
 8001168:	edd3 7a00 	vldr	s15, [r3]
 800116c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <drivingInput+0xc8>)
 8001172:	edd3 6a00 	vldr	s13, [r3]
 8001176:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <drivingInput+0xd0>)
 8001178:	edd3 7a00 	vldr	s15, [r3]
 800117c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001180:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001184:	eef0 7a66 	vmov.f32	s15, s13
}
 8001188:	eeb0 0a67 	vmov.f32	s0, s15
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	2000001c 	.word	0x2000001c
 800119c:	482fc800 	.word	0x482fc800
 80011a0:	20000020 	.word	0x20000020
 80011a4:	479c4000 	.word	0x479c4000

080011a8 <getPIDPower>:
////	}
//}


//TODO: Yet to be tested:
float getPIDPower(float currentPosition, float requestPosition, float cycleTime){//New version:
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80011b2:	edc7 0a02 	vstr	s1, [r7, #8]
 80011b6:	ed87 1a01 	vstr	s2, [r7, #4]
	if(currentPosition<110){
 80011ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80011be:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8001340 <getPIDPower+0x198>
 80011c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ca:	d507      	bpl.n	80011dc <getPIDPower+0x34>
		currentPosition = currentPosition+360;
 80011cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80011d0:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8001344 <getPIDPower+0x19c>
 80011d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011d8:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	error = requestPosition-currentPosition;
 80011dc:	ed97 7a02 	vldr	s14, [r7, #8]
 80011e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80011e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e8:	4b57      	ldr	r3, [pc, #348]	; (8001348 <getPIDPower+0x1a0>)
 80011ea:	edc3 7a00 	vstr	s15, [r3]
	if((error>minError||-minError>error)||(pastError>minError||-minError>pastError)){
 80011ee:	4b56      	ldr	r3, [pc, #344]	; (8001348 <getPIDPower+0x1a0>)
 80011f0:	ed93 7a00 	vldr	s14, [r3]
 80011f4:	4b55      	ldr	r3, [pc, #340]	; (800134c <getPIDPower+0x1a4>)
 80011f6:	edd3 7a00 	vldr	s15, [r3]
 80011fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001202:	dc24      	bgt.n	800124e <getPIDPower+0xa6>
 8001204:	4b51      	ldr	r3, [pc, #324]	; (800134c <getPIDPower+0x1a4>)
 8001206:	edd3 7a00 	vldr	s15, [r3]
 800120a:	eeb1 7a67 	vneg.f32	s14, s15
 800120e:	4b4e      	ldr	r3, [pc, #312]	; (8001348 <getPIDPower+0x1a0>)
 8001210:	edd3 7a00 	vldr	s15, [r3]
 8001214:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121c:	dc17      	bgt.n	800124e <getPIDPower+0xa6>
 800121e:	4b4c      	ldr	r3, [pc, #304]	; (8001350 <getPIDPower+0x1a8>)
 8001220:	ed93 7a00 	vldr	s14, [r3]
 8001224:	4b49      	ldr	r3, [pc, #292]	; (800134c <getPIDPower+0x1a4>)
 8001226:	edd3 7a00 	vldr	s15, [r3]
 800122a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800122e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001232:	dc0c      	bgt.n	800124e <getPIDPower+0xa6>
 8001234:	4b45      	ldr	r3, [pc, #276]	; (800134c <getPIDPower+0x1a4>)
 8001236:	edd3 7a00 	vldr	s15, [r3]
 800123a:	eeb1 7a67 	vneg.f32	s14, s15
 800123e:	4b44      	ldr	r3, [pc, #272]	; (8001350 <getPIDPower+0x1a8>)
 8001240:	edd3 7a00 	vldr	s15, [r3]
 8001244:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124c:	dd6a      	ble.n	8001324 <getPIDPower+0x17c>
		integral = integral + (error * cycleTime);
 800124e:	4b3e      	ldr	r3, [pc, #248]	; (8001348 <getPIDPower+0x1a0>)
 8001250:	ed93 7a00 	vldr	s14, [r3]
 8001254:	edd7 7a01 	vldr	s15, [r7, #4]
 8001258:	ee27 7a27 	vmul.f32	s14, s14, s15
 800125c:	4b3d      	ldr	r3, [pc, #244]	; (8001354 <getPIDPower+0x1ac>)
 800125e:	edd3 7a00 	vldr	s15, [r3]
 8001262:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001266:	4b3b      	ldr	r3, [pc, #236]	; (8001354 <getPIDPower+0x1ac>)
 8001268:	edc3 7a00 	vstr	s15, [r3]
		derivative = (error-pastError)/cycleTime;
 800126c:	4b36      	ldr	r3, [pc, #216]	; (8001348 <getPIDPower+0x1a0>)
 800126e:	ed93 7a00 	vldr	s14, [r3]
 8001272:	4b37      	ldr	r3, [pc, #220]	; (8001350 <getPIDPower+0x1a8>)
 8001274:	edd3 7a00 	vldr	s15, [r3]
 8001278:	ee77 6a67 	vsub.f32	s13, s14, s15
 800127c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001280:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001284:	4b34      	ldr	r3, [pc, #208]	; (8001358 <getPIDPower+0x1b0>)
 8001286:	edc3 7a00 	vstr	s15, [r3]
		pastError = error;
 800128a:	4b2f      	ldr	r3, [pc, #188]	; (8001348 <getPIDPower+0x1a0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a30      	ldr	r2, [pc, #192]	; (8001350 <getPIDPower+0x1a8>)
 8001290:	6013      	str	r3, [r2, #0]
		pos = kP*error+kI*integral+kD*derivative+kOffset;
 8001292:	4b32      	ldr	r3, [pc, #200]	; (800135c <getPIDPower+0x1b4>)
 8001294:	ed93 7a00 	vldr	s14, [r3]
 8001298:	4b2b      	ldr	r3, [pc, #172]	; (8001348 <getPIDPower+0x1a0>)
 800129a:	edd3 7a00 	vldr	s15, [r3]
 800129e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012a2:	4b2f      	ldr	r3, [pc, #188]	; (8001360 <getPIDPower+0x1b8>)
 80012a4:	edd3 6a00 	vldr	s13, [r3]
 80012a8:	4b2a      	ldr	r3, [pc, #168]	; (8001354 <getPIDPower+0x1ac>)
 80012aa:	edd3 7a00 	vldr	s15, [r3]
 80012ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012b6:	4b2b      	ldr	r3, [pc, #172]	; (8001364 <getPIDPower+0x1bc>)
 80012b8:	edd3 6a00 	vldr	s13, [r3]
 80012bc:	4b26      	ldr	r3, [pc, #152]	; (8001358 <getPIDPower+0x1b0>)
 80012be:	edd3 7a00 	vldr	s15, [r3]
 80012c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ca:	ee17 0a90 	vmov	r0, s15
 80012ce:	f7ff f95b 	bl	8000588 <__aeabi_f2d>
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	4b24      	ldr	r3, [pc, #144]	; (8001368 <getPIDPower+0x1c0>)
 80012d8:	f7fe fff8 	bl	80002cc <__adddf3>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	4610      	mov	r0, r2
 80012e2:	4619      	mov	r1, r3
 80012e4:	f7ff fc80 	bl	8000be8 <__aeabi_d2f>
 80012e8:	4603      	mov	r3, r0
 80012ea:	4a20      	ldr	r2, [pc, #128]	; (800136c <getPIDPower+0x1c4>)
 80012ec:	6013      	str	r3, [r2, #0]
		if(pos>1){
 80012ee:	4b1f      	ldr	r3, [pc, #124]	; (800136c <getPIDPower+0x1c4>)
 80012f0:	edd3 7a00 	vldr	s15, [r3]
 80012f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001300:	dd02      	ble.n	8001308 <getPIDPower+0x160>
			return 1;
 8001302:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001306:	e013      	b.n	8001330 <getPIDPower+0x188>
		}
		else if(pos<0){
 8001308:	4b18      	ldr	r3, [pc, #96]	; (800136c <getPIDPower+0x1c4>)
 800130a:	edd3 7a00 	vldr	s15, [r3]
 800130e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001316:	d502      	bpl.n	800131e <getPIDPower+0x176>
			return 0;
 8001318:	f04f 0300 	mov.w	r3, #0
 800131c:	e008      	b.n	8001330 <getPIDPower+0x188>
		}
		else{
			return pos;
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <getPIDPower+0x1c4>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	e005      	b.n	8001330 <getPIDPower+0x188>
		}
	}
	else{
		integral = 0;
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <getPIDPower+0x1ac>)
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
		return .5;
 800132c:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
	}
}
 8001330:	ee07 3a90 	vmov	s15, r3
 8001334:	eeb0 0a67 	vmov.f32	s0, s15
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	42dc0000 	.word	0x42dc0000
 8001344:	43b40000 	.word	0x43b40000
 8001348:	200005b8 	.word	0x200005b8
 800134c:	20000010 	.word	0x20000010
 8001350:	200005c8 	.word	0x200005c8
 8001354:	200005c0 	.word	0x200005c0
 8001358:	200005bc 	.word	0x200005bc
 800135c:	20000004 	.word	0x20000004
 8001360:	20000008 	.word	0x20000008
 8001364:	2000000c 	.word	0x2000000c
 8001368:	3fe00000 	.word	0x3fe00000
 800136c:	200005c4 	.word	0x200005c4

08001370 <getEncoderAngle>:

float getEncoderAngle(){
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
	return (((int)(36000*((TIM3->CCR2-kSteeringEncoderMin)/(kSteeringEncoderRange)))+18000)%36000)/100;
 8001374:	4b19      	ldr	r3, [pc, #100]	; (80013dc <getEncoderAngle+0x6c>)
 8001376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001378:	ee07 3a90 	vmov	s15, r3
 800137c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001380:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80013e0 <getEncoderAngle+0x70>
 8001384:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001388:	eddf 6a16 	vldr	s13, [pc, #88]	; 80013e4 <getEncoderAngle+0x74>
 800138c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001390:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80013e8 <getEncoderAngle+0x78>
 8001394:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001398:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800139c:	ee17 3a90 	vmov	r3, s15
 80013a0:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 80013a4:	3350      	adds	r3, #80	; 0x50
 80013a6:	4a11      	ldr	r2, [pc, #68]	; (80013ec <getEncoderAngle+0x7c>)
 80013a8:	fb82 1203 	smull	r1, r2, r2, r3
 80013ac:	1391      	asrs	r1, r2, #14
 80013ae:	17da      	asrs	r2, r3, #31
 80013b0:	1a8a      	subs	r2, r1, r2
 80013b2:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 80013b6:	fb01 f202 	mul.w	r2, r1, r2
 80013ba:	1a9a      	subs	r2, r3, r2
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <getEncoderAngle+0x80>)
 80013be:	fb83 1302 	smull	r1, r3, r3, r2
 80013c2:	1159      	asrs	r1, r3, #5
 80013c4:	17d3      	asrs	r3, r2, #31
 80013c6:	1acb      	subs	r3, r1, r3
 80013c8:	ee07 3a90 	vmov	s15, r3
 80013cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80013d0:	eeb0 0a67 	vmov.f32	s0, s15
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	40000400 	.word	0x40000400
 80013e0:	465ac000 	.word	0x465ac000
 80013e4:	477a0000 	.word	0x477a0000
 80013e8:	470ca000 	.word	0x470ca000
 80013ec:	7482296b 	.word	0x7482296b
 80013f0:	51eb851f 	.word	0x51eb851f

080013f4 <rawSteeringToAngle>:

float rawSteeringToAngle(float steerInput){
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	ed87 0a01 	vstr	s0, [r7, #4]
	return (steerInput*EncoderRange)+minEncoderAngle;
 80013fe:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8001428 <rawSteeringToAngle+0x34>
 8001402:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001406:	edd7 7a01 	vldr	s15, [r7, #4]
 800140a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800140e:	eddf 7a07 	vldr	s15, [pc, #28]	; 800142c <rawSteeringToAngle+0x38>
 8001412:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001416:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800141a:	eeb0 0a67 	vmov.f32	s0, s15
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	000000b4 	.word	0x000000b4
 800142c:	000000a7 	.word	0x000000a7

08001430 <setSteeringMotor>:

/**
 * Sets the steering motors power
 * @power value from -1.0 to 1.0
 */
void setSteeringMotor(float power){//+-1.0
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	ed87 0a01 	vstr	s0, [r7, #4]
	if(power<.25){
 800143a:	edd7 7a01 	vldr	s15, [r7, #4]
 800143e:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8001442:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800144a:	d512      	bpl.n	8001472 <setSteeringMotor+0x42>
		setBreaks(power/.25);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff f89b 	bl	8000588 <__aeabi_f2d>
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	4b25      	ldr	r3, [pc, #148]	; (80014ec <setSteeringMotor+0xbc>)
 8001458:	f7ff fa18 	bl	800088c <__aeabi_ddiv>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	ec43 2b17 	vmov	d7, r2, r3
 8001464:	eeb0 0a47 	vmov.f32	s0, s14
 8001468:	eef0 0a67 	vmov.f32	s1, s15
 800146c:	f000 f86e 	bl	800154c <setBreaks>
	}
	else{
		short int out = (((((power-.25)/.75))+1)/2)*180;//Converts the range 0 to 1, to 90 to 180 //Dont ask why its that range it just works
		TIM10->CCR1 = out;
	}
}
 8001470:	e038      	b.n	80014e4 <setSteeringMotor+0xb4>
		short int out = (((((power-.25)/.75))+1)/2)*180;//Converts the range 0 to 1, to 90 to 180 //Dont ask why its that range it just works
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff f888 	bl	8000588 <__aeabi_f2d>
 8001478:	f04f 0200 	mov.w	r2, #0
 800147c:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <setSteeringMotor+0xbc>)
 800147e:	f7fe ff23 	bl	80002c8 <__aeabi_dsub>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4610      	mov	r0, r2
 8001488:	4619      	mov	r1, r3
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <setSteeringMotor+0xc0>)
 8001490:	f7ff f9fc 	bl	800088c <__aeabi_ddiv>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4610      	mov	r0, r2
 800149a:	4619      	mov	r1, r3
 800149c:	f04f 0200 	mov.w	r2, #0
 80014a0:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <setSteeringMotor+0xc4>)
 80014a2:	f7fe ff13 	bl	80002cc <__adddf3>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4610      	mov	r0, r2
 80014ac:	4619      	mov	r1, r3
 80014ae:	f04f 0200 	mov.w	r2, #0
 80014b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014b6:	f7ff f9e9 	bl	800088c <__aeabi_ddiv>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	f04f 0200 	mov.w	r2, #0
 80014c6:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <setSteeringMotor+0xc8>)
 80014c8:	f7ff f8b6 	bl	8000638 <__aeabi_dmul>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f7ff fb60 	bl	8000b98 <__aeabi_d2iz>
 80014d8:	4603      	mov	r3, r0
 80014da:	81fb      	strh	r3, [r7, #14]
		TIM10->CCR1 = out;
 80014dc:	4a07      	ldr	r2, [pc, #28]	; (80014fc <setSteeringMotor+0xcc>)
 80014de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014e2:	6353      	str	r3, [r2, #52]	; 0x34
}
 80014e4:	bf00      	nop
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	3fd00000 	.word	0x3fd00000
 80014f0:	3fe80000 	.word	0x3fe80000
 80014f4:	3ff00000 	.word	0x3ff00000
 80014f8:	40668000 	.word	0x40668000
 80014fc:	40014400 	.word	0x40014400

08001500 <setDrivingMotor>:

/**
 * Sets the driving motors power
 * @power value from 0 to 1.0
 */
void setDrivingMotor(float power){//0 to 1.0
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	ed87 0a01 	vstr	s0, [r7, #4]
	short int out = (power)*kDrivingMotorMax;//Converts the range 0 to 1, to 0v to 3.3v which is 0 to 4096(kDrivingMotorMax)
 800150a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8001540 <setDrivingMotor+0x40>
 800150e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001512:	edd7 7a01 	vldr	s15, [r7, #4]
 8001516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800151a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800151e:	ee17 3a90 	vmov	r3, s15
 8001522:	81fb      	strh	r3, [r7, #14]
	o = out;
 8001524:	4a07      	ldr	r2, [pc, #28]	; (8001544 <setDrivingMotor+0x44>)
 8001526:	89fb      	ldrh	r3, [r7, #14]
 8001528:	8013      	strh	r3, [r2, #0]
	 HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1,
 800152a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800152e:	2200      	movs	r2, #0
 8001530:	2100      	movs	r1, #0
 8001532:	4805      	ldr	r0, [pc, #20]	; (8001548 <setDrivingMotor+0x48>)
 8001534:	f002 f9e5 	bl	8003902 <HAL_DAC_SetValue>
	 DAC_ALIGN_12B_R, out);
}
 8001538:	bf00      	nop
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	00001000 	.word	0x00001000
 8001544:	200005d8 	.word	0x200005d8
 8001548:	20000264 	.word	0x20000264

0800154c <setBreaks>:


void setBreaks(float power){
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	ed87 0a01 	vstr	s0, [r7, #4]
//	if(){
//
//	}
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	ed2d 8b02 	vpush	{d8}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	hdac.State = HAL_DAC_STATE_RESET;
 800156e:	4b99      	ldr	r3, [pc, #612]	; (80017d4 <main+0x270>)
 8001570:	2200      	movs	r2, #0
 8001572:	711a      	strb	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001574:	f001 fd38 	bl	8002fe8 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint16_t pwmBottomState = 5000;
 8001578:	f241 3388 	movw	r3, #5000	; 0x1388
 800157c:	80fb      	strh	r3, [r7, #6]
  uint16_t pwmLowState = 25000;
 800157e:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8001582:	80bb      	strh	r3, [r7, #4]
  uint16_t pwmHighState = 45000;
 8001584:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 8001588:	807b      	strh	r3, [r7, #2]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800158a:	f000 f959 	bl	8001840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800158e:	f000 ffa7 	bl	80024e0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001592:	f000 f9cb 	bl	800192c <MX_ADC1_Init>
  MX_TIM1_Init();
 8001596:	f000 fad7 	bl	8001b48 <MX_TIM1_Init>
  MX_TIM2_Init();
 800159a:	f000 fb59 	bl	8001c50 <MX_TIM2_Init>
  MX_TIM3_Init();
 800159e:	f000 fbd7 	bl	8001d50 <MX_TIM3_Init>
  MX_TIM4_Init();
 80015a2:	f000 fc73 	bl	8001e8c <MX_TIM4_Init>
  MX_TIM5_Init();
 80015a6:	f000 fd0f 	bl	8001fc8 <MX_TIM5_Init>
  MX_TIM8_Init();
 80015aa:	f000 fdab 	bl	8002104 <MX_TIM8_Init>
  MX_TIM10_Init();
 80015ae:	f000 fe49 	bl	8002244 <MX_TIM10_Init>
  MX_TIM11_Init();
 80015b2:	f000 fe95 	bl	80022e0 <MX_TIM11_Init>
  MX_TIM12_Init();
 80015b6:	f000 fee1 	bl	800237c <MX_TIM12_Init>
  MX_RTC_Init();
 80015ba:	f000 fa61 	bl	8001a80 <MX_RTC_Init>
  MX_I2C2_Init();
 80015be:	f000 fa31 	bl	8001a24 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 80015c2:	f000 ff63 	bl	800248c <MX_USART2_UART_Init>
  MX_DAC_Init();
 80015c6:	f000 fa03 	bl	80019d0 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  //Starts HAL timing for input capture
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80015ca:	2100      	movs	r1, #0
 80015cc:	4882      	ldr	r0, [pc, #520]	; (80017d8 <main+0x274>)
 80015ce:	f004 fbcf 	bl	8005d70 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 80015d2:	2104      	movs	r1, #4
 80015d4:	4880      	ldr	r0, [pc, #512]	; (80017d8 <main+0x274>)
 80015d6:	f004 faef 	bl	8005bb8 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80015da:	2100      	movs	r1, #0
 80015dc:	487f      	ldr	r0, [pc, #508]	; (80017dc <main+0x278>)
 80015de:	f004 fbc7 	bl	8005d70 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 80015e2:	2104      	movs	r1, #4
 80015e4:	487d      	ldr	r0, [pc, #500]	; (80017dc <main+0x278>)
 80015e6:	f004 fae7 	bl	8005bb8 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80015ea:	2100      	movs	r1, #0
 80015ec:	487c      	ldr	r0, [pc, #496]	; (80017e0 <main+0x27c>)
 80015ee:	f004 fbbf 	bl	8005d70 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 80015f2:	2104      	movs	r1, #4
 80015f4:	487a      	ldr	r0, [pc, #488]	; (80017e0 <main+0x27c>)
 80015f6:	f004 fadf 	bl	8005bb8 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80015fa:	2100      	movs	r1, #0
 80015fc:	4879      	ldr	r0, [pc, #484]	; (80017e4 <main+0x280>)
 80015fe:	f004 fbb7 	bl	8005d70 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2);
 8001602:	2104      	movs	r1, #4
 8001604:	4877      	ldr	r0, [pc, #476]	; (80017e4 <main+0x280>)
 8001606:	f004 fad7 	bl	8005bb8 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 800160a:	2100      	movs	r1, #0
 800160c:	4876      	ldr	r0, [pc, #472]	; (80017e8 <main+0x284>)
 800160e:	f004 fbaf 	bl	8005d70 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 8001612:	2104      	movs	r1, #4
 8001614:	4874      	ldr	r0, [pc, #464]	; (80017e8 <main+0x284>)
 8001616:	f004 facf 	bl	8005bb8 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_1);
 800161a:	2100      	movs	r1, #0
 800161c:	4873      	ldr	r0, [pc, #460]	; (80017ec <main+0x288>)
 800161e:	f004 fba7 	bl	8005d70 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_2);
 8001622:	2104      	movs	r1, #4
 8001624:	4871      	ldr	r0, [pc, #452]	; (80017ec <main+0x288>)
 8001626:	f004 fac7 	bl	8005bb8 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_1);
 800162a:	2100      	movs	r1, #0
 800162c:	486f      	ldr	r0, [pc, #444]	; (80017ec <main+0x288>)
 800162e:	f004 fb9f 	bl	8005d70 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_2);
 8001632:	2104      	movs	r1, #4
 8001634:	486d      	ldr	r0, [pc, #436]	; (80017ec <main+0x288>)
 8001636:	f004 fabf 	bl	8005bb8 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim12, TIM_CHANNEL_1);
 800163a:	2100      	movs	r1, #0
 800163c:	486c      	ldr	r0, [pc, #432]	; (80017f0 <main+0x28c>)
 800163e:	f004 fb97 	bl	8005d70 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim12, TIM_CHANNEL_2);
 8001642:	2104      	movs	r1, #4
 8001644:	486a      	ldr	r0, [pc, #424]	; (80017f0 <main+0x28c>)
 8001646:	f004 fab7 	bl	8005bb8 <HAL_TIM_IC_Start>

  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 800164a:	2100      	movs	r1, #0
 800164c:	4869      	ldr	r0, [pc, #420]	; (80017f4 <main+0x290>)
 800164e:	f004 f99b 	bl	8005988 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8001652:	2100      	movs	r1, #0
 8001654:	4868      	ldr	r0, [pc, #416]	; (80017f8 <main+0x294>)
 8001656:	f004 f997 	bl	8005988 <HAL_TIM_PWM_Start>
  TIM10->CCR1 = 135; //Sets the PWM output of tim1 channel 1 to 450
 800165a:	4b68      	ldr	r3, [pc, #416]	; (80017fc <main+0x298>)
 800165c:	2287      	movs	r2, #135	; 0x87
 800165e:	635a      	str	r2, [r3, #52]	; 0x34
  TIM11->CCR1 = 0; //Sets the PWM output of tim1 channel 1 to 450
 8001660:	4b67      	ldr	r3, [pc, #412]	; (8001800 <main+0x29c>)
 8001662:	2200      	movs	r2, #0
 8001664:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001666:	2100      	movs	r1, #0
 8001668:	485a      	ldr	r0, [pc, #360]	; (80017d4 <main+0x270>)
 800166a:	f002 f8f8 	bl	800385e <HAL_DAC_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //E-STOP
	  if(TIM4->CCR2>pwmLowState){//Checking if E-Stop is switched to the high state, forces user on RC controller to switch the e-stop switch to start it
 800166e:	4b65      	ldr	r3, [pc, #404]	; (8001804 <main+0x2a0>)
 8001670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001672:	88bb      	ldrh	r3, [r7, #4]
 8001674:	429a      	cmp	r2, r3
 8001676:	f240 8097 	bls.w	80017a8 <main+0x244>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800167a:	2200      	movs	r2, #0
 800167c:	2101      	movs	r1, #1
 800167e:	4862      	ldr	r0, [pc, #392]	; (8001808 <main+0x2a4>)
 8001680:	f002 fb48 	bl	8003d14 <HAL_GPIO_WritePin>
		  //Inputs
		  steeringRequest = TIM2->CCR2;
 8001684:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800168a:	4a60      	ldr	r2, [pc, #384]	; (800180c <main+0x2a8>)
 800168c:	6013      	str	r3, [r2, #0]
		  drivingRequest = TIM5->CCR2;
 800168e:	4b60      	ldr	r3, [pc, #384]	; (8001810 <main+0x2ac>)
 8001690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001692:	4a60      	ldr	r2, [pc, #384]	; (8001814 <main+0x2b0>)
 8001694:	6013      	str	r3, [r2, #0]
		  a = getEncoderAngle();
 8001696:	f7ff fe6b 	bl	8001370 <getEncoderAngle>
 800169a:	eef0 7a40 	vmov.f32	s15, s0
 800169e:	4b5e      	ldr	r3, [pc, #376]	; (8001818 <main+0x2b4>)
 80016a0:	edc3 7a00 	vstr	s15, [r3]
		  b = steeringInput(steeringRequest);
 80016a4:	4b59      	ldr	r3, [pc, #356]	; (800180c <main+0x2a8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fca5 	bl	8000ff8 <steeringInput>
 80016ae:	eef0 7a40 	vmov.f32	s15, s0
 80016b2:	4b5a      	ldr	r3, [pc, #360]	; (800181c <main+0x2b8>)
 80016b4:	edc3 7a00 	vstr	s15, [r3]
		  //State management
		  if(TIM1->CCR2<pwmBottomState){//Switch to RC mode, middle switch state
 80016b8:	4b59      	ldr	r3, [pc, #356]	; (8001820 <main+0x2bc>)
 80016ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016bc:	88fb      	ldrh	r3, [r7, #6]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d246      	bcs.n	8001750 <main+0x1ec>
			  setSteeringMotor(getPIDPower(getEncoderAngle(), rawSteeringToAngle(steeringInput(steeringRequest)), (float)kHalDelay));
 80016c2:	f7ff fe55 	bl	8001370 <getEncoderAngle>
 80016c6:	eeb0 8a40 	vmov.f32	s16, s0
 80016ca:	4b50      	ldr	r3, [pc, #320]	; (800180c <main+0x2a8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fc92 	bl	8000ff8 <steeringInput>
 80016d4:	eef0 7a40 	vmov.f32	s15, s0
 80016d8:	eeb0 0a67 	vmov.f32	s0, s15
 80016dc:	f7ff fe8a 	bl	80013f4 <rawSteeringToAngle>
 80016e0:	eeb0 7a40 	vmov.f32	s14, s0
 80016e4:	4b4f      	ldr	r3, [pc, #316]	; (8001824 <main+0x2c0>)
 80016e6:	edd3 7a00 	vldr	s15, [r3]
 80016ea:	eeb0 1a67 	vmov.f32	s2, s15
 80016ee:	eef0 0a47 	vmov.f32	s1, s14
 80016f2:	eeb0 0a48 	vmov.f32	s0, s16
 80016f6:	f7ff fd57 	bl	80011a8 <getPIDPower>
 80016fa:	eef0 7a40 	vmov.f32	s15, s0
 80016fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001702:	f7ff fe95 	bl	8001430 <setSteeringMotor>
			  setDrivingMotor(drivingInput(drivingRequest));
 8001706:	4b43      	ldr	r3, [pc, #268]	; (8001814 <main+0x2b0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fce0 	bl	80010d0 <drivingInput>
 8001710:	eef0 7a40 	vmov.f32	s15, s0
 8001714:	eeb0 0a67 	vmov.f32	s0, s15
 8001718:	f7ff fef2 	bl	8001500 <setDrivingMotor>
			  if(cycle>cycleCount){
 800171c:	4b42      	ldr	r3, [pc, #264]	; (8001828 <main+0x2c4>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b42      	ldr	r3, [pc, #264]	; (800182c <main+0x2c8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	dd0d      	ble.n	8001744 <main+0x1e0>
				  printf("%f\n",error);
 8001728:	4b41      	ldr	r3, [pc, #260]	; (8001830 <main+0x2cc>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe ff2b 	bl	8000588 <__aeabi_f2d>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	483f      	ldr	r0, [pc, #252]	; (8001834 <main+0x2d0>)
 8001738:	f006 fe64 	bl	8008404 <iprintf>
				  cycle = 1;
 800173c:	4b3a      	ldr	r3, [pc, #232]	; (8001828 <main+0x2c4>)
 800173e:	2201      	movs	r2, #1
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	e02d      	b.n	80017a0 <main+0x23c>
			  }
			  else{
				  cycle++;
 8001744:	4b38      	ldr	r3, [pc, #224]	; (8001828 <main+0x2c4>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	3301      	adds	r3, #1
 800174a:	4a37      	ldr	r2, [pc, #220]	; (8001828 <main+0x2c4>)
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	e027      	b.n	80017a0 <main+0x23c>
			  }

		  }
		  else if(TIM1->CCR2>pwmHighState){//Switch to auto mode, high switch state
 8001750:	4b33      	ldr	r3, [pc, #204]	; (8001820 <main+0x2bc>)
 8001752:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001754:	887b      	ldrh	r3, [r7, #2]
 8001756:	429a      	cmp	r2, r3
 8001758:	d916      	bls.n	8001788 <main+0x224>
//			  Manual RC Control
			  setSteeringMotor(steeringInput(steeringRequest));
 800175a:	4b2c      	ldr	r3, [pc, #176]	; (800180c <main+0x2a8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fc4a 	bl	8000ff8 <steeringInput>
 8001764:	eef0 7a40 	vmov.f32	s15, s0
 8001768:	eeb0 0a67 	vmov.f32	s0, s15
 800176c:	f7ff fe60 	bl	8001430 <setSteeringMotor>
			  setDrivingMotor(drivingInput(drivingRequest));
 8001770:	4b28      	ldr	r3, [pc, #160]	; (8001814 <main+0x2b0>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fcab 	bl	80010d0 <drivingInput>
 800177a:	eef0 7a40 	vmov.f32	s15, s0
 800177e:	eeb0 0a67 	vmov.f32	s0, s15
 8001782:	f7ff febd 	bl	8001500 <setDrivingMotor>
 8001786:	e00b      	b.n	80017a0 <main+0x23c>
			  //TODO: Auto Code
//			  setSteeringMotor(0.5);
		  }
		  else{
			  //off state, low switch state
			  setSteeringMotor(kOffset);
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <main+0x2d4>)
 800178e:	4610      	mov	r0, r2
 8001790:	4619      	mov	r1, r3
 8001792:	f7ff fa29 	bl	8000be8 <__aeabi_d2f>
 8001796:	4603      	mov	r3, r0
 8001798:	ee00 3a10 	vmov	s0, r3
 800179c:	f7ff fe48 	bl	8001430 <setSteeringMotor>
//			  TIM10->CCR2 = pwmOutMax/2;//Sets steering motor power to 0
		  }

		  HAL_Delay(1);//For faster response decrease delay
 80017a0:	2001      	movs	r0, #1
 80017a2:	f001 fc93 	bl	80030cc <HAL_Delay>
 80017a6:	e762      	b.n	800166e <main+0x10a>
	  }
	  else{
		  setDrivingMotor(0);
 80017a8:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800183c <main+0x2d8>
 80017ac:	f7ff fea8 	bl	8001500 <setDrivingMotor>
		  setSteeringMotor(kOffset);
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	4b20      	ldr	r3, [pc, #128]	; (8001838 <main+0x2d4>)
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
 80017ba:	f7ff fa15 	bl	8000be8 <__aeabi_d2f>
 80017be:	4603      	mov	r3, r0
 80017c0:	ee00 3a10 	vmov	s0, r3
 80017c4:	f7ff fe34 	bl	8001430 <setSteeringMotor>

		  //TODO: Add Relay to loop and activate the relay on remote e-stop to trigger the e-stop on the kart
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80017c8:	2201      	movs	r2, #1
 80017ca:	2101      	movs	r1, #1
 80017cc:	480e      	ldr	r0, [pc, #56]	; (8001808 <main+0x2a4>)
 80017ce:	f002 faa1 	bl	8003d14 <HAL_GPIO_WritePin>
	  if(TIM4->CCR2>pwmLowState){//Checking if E-Stop is switched to the high state, forces user on RC controller to switch the e-stop switch to start it
 80017d2:	e74c      	b.n	800166e <main+0x10a>
 80017d4:	20000264 	.word	0x20000264
 80017d8:	200002ec 	.word	0x200002ec
 80017dc:	20000334 	.word	0x20000334
 80017e0:	2000037c 	.word	0x2000037c
 80017e4:	200003c4 	.word	0x200003c4
 80017e8:	2000040c 	.word	0x2000040c
 80017ec:	20000454 	.word	0x20000454
 80017f0:	2000052c 	.word	0x2000052c
 80017f4:	2000049c 	.word	0x2000049c
 80017f8:	200004e4 	.word	0x200004e4
 80017fc:	40014400 	.word	0x40014400
 8001800:	40014800 	.word	0x40014800
 8001804:	40000800 	.word	0x40000800
 8001808:	40020800 	.word	0x40020800
 800180c:	20000028 	.word	0x20000028
 8001810:	40000c00 	.word	0x40000c00
 8001814:	200005e8 	.word	0x200005e8
 8001818:	200005dc 	.word	0x200005dc
 800181c:	200005e0 	.word	0x200005e0
 8001820:	40010000 	.word	0x40010000
 8001824:	20000000 	.word	0x20000000
 8001828:	200005e4 	.word	0x200005e4
 800182c:	20000024 	.word	0x20000024
 8001830:	200005b8 	.word	0x200005b8
 8001834:	0800a368 	.word	0x0800a368
 8001838:	3fe00000 	.word	0x3fe00000
 800183c:	00000000 	.word	0x00000000

08001840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b094      	sub	sp, #80	; 0x50
 8001844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001846:	f107 031c 	add.w	r3, r7, #28
 800184a:	2234      	movs	r2, #52	; 0x34
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f006 fdea 	bl	8008428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001854:	f107 0308 	add.w	r3, r7, #8
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001864:	2300      	movs	r3, #0
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	4b2e      	ldr	r3, [pc, #184]	; (8001924 <SystemClock_Config+0xe4>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	4a2d      	ldr	r2, [pc, #180]	; (8001924 <SystemClock_Config+0xe4>)
 800186e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001872:	6413      	str	r3, [r2, #64]	; 0x40
 8001874:	4b2b      	ldr	r3, [pc, #172]	; (8001924 <SystemClock_Config+0xe4>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001880:	2300      	movs	r3, #0
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	4b28      	ldr	r3, [pc, #160]	; (8001928 <SystemClock_Config+0xe8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a27      	ldr	r2, [pc, #156]	; (8001928 <SystemClock_Config+0xe8>)
 800188a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	4b25      	ldr	r3, [pc, #148]	; (8001928 <SystemClock_Config+0xe8>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001898:	603b      	str	r3, [r7, #0]
 800189a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800189c:	2309      	movs	r3, #9
 800189e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80018a6:	2301      	movs	r3, #1
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80018aa:	2301      	movs	r3, #1
 80018ac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ae:	2302      	movs	r3, #2
 80018b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018b8:	2304      	movs	r3, #4
 80018ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80018bc:	23b4      	movs	r3, #180	; 0xb4
 80018be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018c0:	2302      	movs	r3, #2
 80018c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80018c4:	2302      	movs	r3, #2
 80018c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80018c8:	2302      	movs	r3, #2
 80018ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018cc:	f107 031c 	add.w	r3, r7, #28
 80018d0:	4618      	mov	r0, r3
 80018d2:	f003 fa41 	bl	8004d58 <HAL_RCC_OscConfig>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80018dc:	f000 fe7e 	bl	80025dc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80018e0:	f002 fb76 	bl	8003fd0 <HAL_PWREx_EnableOverDrive>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <SystemClock_Config+0xae>
  {
    Error_Handler();
 80018ea:	f000 fe77 	bl	80025dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ee:	230f      	movs	r3, #15
 80018f0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018f2:	2302      	movs	r3, #2
 80018f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001900:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001904:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001906:	f107 0308 	add.w	r3, r7, #8
 800190a:	2105      	movs	r1, #5
 800190c:	4618      	mov	r0, r3
 800190e:	f002 fbaf 	bl	8004070 <HAL_RCC_ClockConfig>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8001918:	f000 fe60 	bl	80025dc <Error_Handler>
  }
}
 800191c:	bf00      	nop
 800191e:	3750      	adds	r7, #80	; 0x50
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40023800 	.word	0x40023800
 8001928:	40007000 	.word	0x40007000

0800192c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001932:	463b      	mov	r3, r7
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800193e:	4b21      	ldr	r3, [pc, #132]	; (80019c4 <MX_ADC1_Init+0x98>)
 8001940:	4a21      	ldr	r2, [pc, #132]	; (80019c8 <MX_ADC1_Init+0x9c>)
 8001942:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001944:	4b1f      	ldr	r3, [pc, #124]	; (80019c4 <MX_ADC1_Init+0x98>)
 8001946:	2200      	movs	r2, #0
 8001948:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800194a:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <MX_ADC1_Init+0x98>)
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001950:	4b1c      	ldr	r3, [pc, #112]	; (80019c4 <MX_ADC1_Init+0x98>)
 8001952:	2200      	movs	r2, #0
 8001954:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001956:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <MX_ADC1_Init+0x98>)
 8001958:	2200      	movs	r2, #0
 800195a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800195c:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <MX_ADC1_Init+0x98>)
 800195e:	2200      	movs	r2, #0
 8001960:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001964:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <MX_ADC1_Init+0x98>)
 8001966:	2200      	movs	r2, #0
 8001968:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800196a:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <MX_ADC1_Init+0x98>)
 800196c:	4a17      	ldr	r2, [pc, #92]	; (80019cc <MX_ADC1_Init+0xa0>)
 800196e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001970:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <MX_ADC1_Init+0x98>)
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001976:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <MX_ADC1_Init+0x98>)
 8001978:	2201      	movs	r2, #1
 800197a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <MX_ADC1_Init+0x98>)
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001984:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <MX_ADC1_Init+0x98>)
 8001986:	2201      	movs	r2, #1
 8001988:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800198a:	480e      	ldr	r0, [pc, #56]	; (80019c4 <MX_ADC1_Init+0x98>)
 800198c:	f001 fbc2 	bl	8003114 <HAL_ADC_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001996:	f000 fe21 	bl	80025dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800199a:	2307      	movs	r3, #7
 800199c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800199e:	2301      	movs	r3, #1
 80019a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019a6:	463b      	mov	r3, r7
 80019a8:	4619      	mov	r1, r3
 80019aa:	4806      	ldr	r0, [pc, #24]	; (80019c4 <MX_ADC1_Init+0x98>)
 80019ac:	f001 fbf6 	bl	800319c <HAL_ADC_ConfigChannel>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80019b6:	f000 fe11 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	2000021c 	.word	0x2000021c
 80019c8:	40012000 	.word	0x40012000
 80019cc:	0f000001 	.word	0x0f000001

080019d0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80019d6:	463b      	mov	r3, r7
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80019de:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <MX_DAC_Init+0x4c>)
 80019e0:	4a0f      	ldr	r2, [pc, #60]	; (8001a20 <MX_DAC_Init+0x50>)
 80019e2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80019e4:	480d      	ldr	r0, [pc, #52]	; (8001a1c <MX_DAC_Init+0x4c>)
 80019e6:	f001 ff18 	bl	800381a <HAL_DAC_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80019f0:	f000 fdf4 	bl	80025dc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80019fc:	463b      	mov	r3, r7
 80019fe:	2200      	movs	r2, #0
 8001a00:	4619      	mov	r1, r3
 8001a02:	4806      	ldr	r0, [pc, #24]	; (8001a1c <MX_DAC_Init+0x4c>)
 8001a04:	f001 ffa2 	bl	800394c <HAL_DAC_ConfigChannel>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001a0e:	f000 fde5 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000264 	.word	0x20000264
 8001a20:	40007400 	.word	0x40007400

08001a24 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <MX_I2C2_Init+0x50>)
 8001a2a:	4a13      	ldr	r2, [pc, #76]	; (8001a78 <MX_I2C2_Init+0x54>)
 8001a2c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001a2e:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <MX_I2C2_Init+0x50>)
 8001a30:	4a12      	ldr	r2, [pc, #72]	; (8001a7c <MX_I2C2_Init+0x58>)
 8001a32:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <MX_I2C2_Init+0x50>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <MX_I2C2_Init+0x50>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <MX_I2C2_Init+0x50>)
 8001a42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a46:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a48:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <MX_I2C2_Init+0x50>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <MX_I2C2_Init+0x50>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a54:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <MX_I2C2_Init+0x50>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a5a:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <MX_I2C2_Init+0x50>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a60:	4804      	ldr	r0, [pc, #16]	; (8001a74 <MX_I2C2_Init+0x50>)
 8001a62:	f002 f971 	bl	8003d48 <HAL_I2C_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001a6c:	f000 fdb6 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000278 	.word	0x20000278
 8001a78:	40005800 	.word	0x40005800
 8001a7c:	000186a0 	.word	0x000186a0

08001a80 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001a94:	2300      	movs	r3, #0
 8001a96:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a98:	4b29      	ldr	r3, [pc, #164]	; (8001b40 <MX_RTC_Init+0xc0>)
 8001a9a:	4a2a      	ldr	r2, [pc, #168]	; (8001b44 <MX_RTC_Init+0xc4>)
 8001a9c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a9e:	4b28      	ldr	r3, [pc, #160]	; (8001b40 <MX_RTC_Init+0xc0>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001aa4:	4b26      	ldr	r3, [pc, #152]	; (8001b40 <MX_RTC_Init+0xc0>)
 8001aa6:	227f      	movs	r2, #127	; 0x7f
 8001aa8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001aaa:	4b25      	ldr	r3, [pc, #148]	; (8001b40 <MX_RTC_Init+0xc0>)
 8001aac:	22ff      	movs	r2, #255	; 0xff
 8001aae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ab0:	4b23      	ldr	r3, [pc, #140]	; (8001b40 <MX_RTC_Init+0xc0>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ab6:	4b22      	ldr	r3, [pc, #136]	; (8001b40 <MX_RTC_Init+0xc0>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001abc:	4b20      	ldr	r3, [pc, #128]	; (8001b40 <MX_RTC_Init+0xc0>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ac2:	481f      	ldr	r0, [pc, #124]	; (8001b40 <MX_RTC_Init+0xc0>)
 8001ac4:	f003 fbe6 	bl	8005294 <HAL_RTC_Init>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001ace:	f000 fd85 	bl	80025dc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001ae6:	1d3b      	adds	r3, r7, #4
 8001ae8:	2201      	movs	r2, #1
 8001aea:	4619      	mov	r1, r3
 8001aec:	4814      	ldr	r0, [pc, #80]	; (8001b40 <MX_RTC_Init+0xc0>)
 8001aee:	f003 fc47 	bl	8005380 <HAL_RTC_SetTime>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001af8:	f000 fd70 	bl	80025dc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001afc:	2301      	movs	r3, #1
 8001afe:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001b00:	2301      	movs	r3, #1
 8001b02:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001b04:	2301      	movs	r3, #1
 8001b06:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001b0c:	463b      	mov	r3, r7
 8001b0e:	2201      	movs	r2, #1
 8001b10:	4619      	mov	r1, r3
 8001b12:	480b      	ldr	r0, [pc, #44]	; (8001b40 <MX_RTC_Init+0xc0>)
 8001b14:	f003 fcce 	bl	80054b4 <HAL_RTC_SetDate>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001b1e:	f000 fd5d 	bl	80025dc <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001b22:	2200      	movs	r2, #0
 8001b24:	2100      	movs	r1, #0
 8001b26:	4806      	ldr	r0, [pc, #24]	; (8001b40 <MX_RTC_Init+0xc0>)
 8001b28:	f003 fde9 	bl	80056fe <HAL_RTCEx_SetWakeUpTimer>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 8001b32:	f000 fd53 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b36:	bf00      	nop
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200002cc 	.word	0x200002cc
 8001b44:	40002800 	.word	0x40002800

08001b48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08c      	sub	sp, #48	; 0x30
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001b4e:	f107 031c 	add.w	r3, r7, #28
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	609a      	str	r2, [r3, #8]
 8001b5a:	60da      	str	r2, [r3, #12]
 8001b5c:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b5e:	f107 030c 	add.w	r3, r7, #12
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	605a      	str	r2, [r3, #4]
 8001b68:	609a      	str	r2, [r3, #8]
 8001b6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b74:	4b34      	ldr	r3, [pc, #208]	; (8001c48 <MX_TIM1_Init+0x100>)
 8001b76:	4a35      	ldr	r2, [pc, #212]	; (8001c4c <MX_TIM1_Init+0x104>)
 8001b78:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b7a:	4b33      	ldr	r3, [pc, #204]	; (8001c48 <MX_TIM1_Init+0x100>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b80:	4b31      	ldr	r3, [pc, #196]	; (8001c48 <MX_TIM1_Init+0x100>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b86:	4b30      	ldr	r3, [pc, #192]	; (8001c48 <MX_TIM1_Init+0x100>)
 8001b88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b8c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b8e:	4b2e      	ldr	r3, [pc, #184]	; (8001c48 <MX_TIM1_Init+0x100>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b94:	4b2c      	ldr	r3, [pc, #176]	; (8001c48 <MX_TIM1_Init+0x100>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9a:	4b2b      	ldr	r3, [pc, #172]	; (8001c48 <MX_TIM1_Init+0x100>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001ba0:	4829      	ldr	r0, [pc, #164]	; (8001c48 <MX_TIM1_Init+0x100>)
 8001ba2:	f003 ffb9 	bl	8005b18 <HAL_TIM_IC_Init>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001bac:	f000 fd16 	bl	80025dc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001bb0:	2304      	movs	r3, #4
 8001bb2:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001bb4:	2350      	movs	r3, #80	; 0x50
 8001bb6:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001bc4:	f107 031c 	add.w	r3, r7, #28
 8001bc8:	4619      	mov	r1, r3
 8001bca:	481f      	ldr	r0, [pc, #124]	; (8001c48 <MX_TIM1_Init+0x100>)
 8001bcc:	f004 fd25 	bl	800661a <HAL_TIM_SlaveConfigSynchro>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001bd6:	f000 fd01 	bl	80025dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001bde:	2301      	movs	r3, #1
 8001be0:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001bea:	f107 030c 	add.w	r3, r7, #12
 8001bee:	2200      	movs	r2, #0
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4815      	ldr	r0, [pc, #84]	; (8001c48 <MX_TIM1_Init+0x100>)
 8001bf4:	f004 faec 	bl	80061d0 <HAL_TIM_IC_ConfigChannel>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8001bfe:	f000 fced 	bl	80025dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001c02:	2302      	movs	r3, #2
 8001c04:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001c06:	2302      	movs	r3, #2
 8001c08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c0a:	f107 030c 	add.w	r3, r7, #12
 8001c0e:	2204      	movs	r2, #4
 8001c10:	4619      	mov	r1, r3
 8001c12:	480d      	ldr	r0, [pc, #52]	; (8001c48 <MX_TIM1_Init+0x100>)
 8001c14:	f004 fadc 	bl	80061d0 <HAL_TIM_IC_ConfigChannel>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8001c1e:	f000 fcdd 	bl	80025dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c22:	2300      	movs	r3, #0
 8001c24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c26:	2300      	movs	r3, #0
 8001c28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4806      	ldr	r0, [pc, #24]	; (8001c48 <MX_TIM1_Init+0x100>)
 8001c30:	f005 fa6e 	bl	8007110 <HAL_TIMEx_MasterConfigSynchronization>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001c3a:	f000 fccf 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c3e:	bf00      	nop
 8001c40:	3730      	adds	r7, #48	; 0x30
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200002ec 	.word	0x200002ec
 8001c4c:	40010000 	.word	0x40010000

08001c50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08c      	sub	sp, #48	; 0x30
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001c56:	f107 031c 	add.w	r3, r7, #28
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	605a      	str	r2, [r3, #4]
 8001c60:	609a      	str	r2, [r3, #8]
 8001c62:	60da      	str	r2, [r3, #12]
 8001c64:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c66:	f107 030c 	add.w	r3, r7, #12
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c7c:	4b33      	ldr	r3, [pc, #204]	; (8001d4c <MX_TIM2_Init+0xfc>)
 8001c7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c84:	4b31      	ldr	r3, [pc, #196]	; (8001d4c <MX_TIM2_Init+0xfc>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c8a:	4b30      	ldr	r3, [pc, #192]	; (8001d4c <MX_TIM2_Init+0xfc>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001c90:	4b2e      	ldr	r3, [pc, #184]	; (8001d4c <MX_TIM2_Init+0xfc>)
 8001c92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c98:	4b2c      	ldr	r3, [pc, #176]	; (8001d4c <MX_TIM2_Init+0xfc>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c9e:	4b2b      	ldr	r3, [pc, #172]	; (8001d4c <MX_TIM2_Init+0xfc>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001ca4:	4829      	ldr	r0, [pc, #164]	; (8001d4c <MX_TIM2_Init+0xfc>)
 8001ca6:	f003 ff37 	bl	8005b18 <HAL_TIM_IC_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001cb0:	f000 fc94 	bl	80025dc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001cb4:	2304      	movs	r3, #4
 8001cb6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001cb8:	2350      	movs	r3, #80	; 0x50
 8001cba:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001cc8:	f107 031c 	add.w	r3, r7, #28
 8001ccc:	4619      	mov	r1, r3
 8001cce:	481f      	ldr	r0, [pc, #124]	; (8001d4c <MX_TIM2_Init+0xfc>)
 8001cd0:	f004 fca3 	bl	800661a <HAL_TIM_SlaveConfigSynchro>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001cda:	f000 fc7f 	bl	80025dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001cee:	f107 030c 	add.w	r3, r7, #12
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4815      	ldr	r0, [pc, #84]	; (8001d4c <MX_TIM2_Init+0xfc>)
 8001cf8:	f004 fa6a 	bl	80061d0 <HAL_TIM_IC_ConfigChannel>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001d02:	f000 fc6b 	bl	80025dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001d06:	2302      	movs	r3, #2
 8001d08:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001d0e:	f107 030c 	add.w	r3, r7, #12
 8001d12:	2204      	movs	r2, #4
 8001d14:	4619      	mov	r1, r3
 8001d16:	480d      	ldr	r0, [pc, #52]	; (8001d4c <MX_TIM2_Init+0xfc>)
 8001d18:	f004 fa5a 	bl	80061d0 <HAL_TIM_IC_ConfigChannel>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001d22:	f000 fc5b 	bl	80025dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d26:	2300      	movs	r3, #0
 8001d28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	4619      	mov	r1, r3
 8001d32:	4806      	ldr	r0, [pc, #24]	; (8001d4c <MX_TIM2_Init+0xfc>)
 8001d34:	f005 f9ec 	bl	8007110 <HAL_TIMEx_MasterConfigSynchronization>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8001d3e:	f000 fc4d 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d42:	bf00      	nop
 8001d44:	3730      	adds	r7, #48	; 0x30
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000334 	.word	0x20000334

08001d50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b090      	sub	sp, #64	; 0x40
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	609a      	str	r2, [r3, #8]
 8001d62:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001d64:	f107 031c 	add.w	r3, r7, #28
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d74:	f107 030c 	add.w	r3, r7, #12
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d82:	1d3b      	adds	r3, r7, #4
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d8a:	4b3e      	ldr	r3, [pc, #248]	; (8001e84 <MX_TIM3_Init+0x134>)
 8001d8c:	4a3e      	ldr	r2, [pc, #248]	; (8001e88 <MX_TIM3_Init+0x138>)
 8001d8e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d90:	4b3c      	ldr	r3, [pc, #240]	; (8001e84 <MX_TIM3_Init+0x134>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d96:	4b3b      	ldr	r3, [pc, #236]	; (8001e84 <MX_TIM3_Init+0x134>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d9c:	4b39      	ldr	r3, [pc, #228]	; (8001e84 <MX_TIM3_Init+0x134>)
 8001d9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001da2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da4:	4b37      	ldr	r3, [pc, #220]	; (8001e84 <MX_TIM3_Init+0x134>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001daa:	4b36      	ldr	r3, [pc, #216]	; (8001e84 <MX_TIM3_Init+0x134>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001db0:	4834      	ldr	r0, [pc, #208]	; (8001e84 <MX_TIM3_Init+0x134>)
 8001db2:	f003 fd41 	bl	8005838 <HAL_TIM_Base_Init>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001dbc:	f000 fc0e 	bl	80025dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001dc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dca:	4619      	mov	r1, r3
 8001dcc:	482d      	ldr	r0, [pc, #180]	; (8001e84 <MX_TIM3_Init+0x134>)
 8001dce:	f004 fb5d 	bl	800648c <HAL_TIM_ConfigClockSource>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001dd8:	f000 fc00 	bl	80025dc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001ddc:	4829      	ldr	r0, [pc, #164]	; (8001e84 <MX_TIM3_Init+0x134>)
 8001dde:	f003 fe9b 	bl	8005b18 <HAL_TIM_IC_Init>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001de8:	f000 fbf8 	bl	80025dc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001dec:	2304      	movs	r3, #4
 8001dee:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001df0:	2350      	movs	r3, #80	; 0x50
 8001df2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001df4:	2300      	movs	r3, #0
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001e00:	f107 031c 	add.w	r3, r7, #28
 8001e04:	4619      	mov	r1, r3
 8001e06:	481f      	ldr	r0, [pc, #124]	; (8001e84 <MX_TIM3_Init+0x134>)
 8001e08:	f004 fc07 	bl	800661a <HAL_TIM_SlaveConfigSynchro>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8001e12:	f000 fbe3 	bl	80025dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001e26:	f107 030c 	add.w	r3, r7, #12
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4815      	ldr	r0, [pc, #84]	; (8001e84 <MX_TIM3_Init+0x134>)
 8001e30:	f004 f9ce 	bl	80061d0 <HAL_TIM_IC_ConfigChannel>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001e3a:	f000 fbcf 	bl	80025dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001e42:	2302      	movs	r3, #2
 8001e44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001e46:	f107 030c 	add.w	r3, r7, #12
 8001e4a:	2204      	movs	r2, #4
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	480d      	ldr	r0, [pc, #52]	; (8001e84 <MX_TIM3_Init+0x134>)
 8001e50:	f004 f9be 	bl	80061d0 <HAL_TIM_IC_ConfigChannel>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 8001e5a:	f000 fbbf 	bl	80025dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e66:	1d3b      	adds	r3, r7, #4
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4806      	ldr	r0, [pc, #24]	; (8001e84 <MX_TIM3_Init+0x134>)
 8001e6c:	f005 f950 	bl	8007110 <HAL_TIMEx_MasterConfigSynchronization>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_TIM3_Init+0x12a>
  {
    Error_Handler();
 8001e76:	f000 fbb1 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e7a:	bf00      	nop
 8001e7c:	3740      	adds	r7, #64	; 0x40
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	2000037c 	.word	0x2000037c
 8001e88:	40000400 	.word	0x40000400

08001e8c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b090      	sub	sp, #64	; 0x40
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	605a      	str	r2, [r3, #4]
 8001e9c:	609a      	str	r2, [r3, #8]
 8001e9e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001ea0:	f107 031c 	add.w	r3, r7, #28
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001eb0:	f107 030c 	add.w	r3, r7, #12
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ec6:	4b3e      	ldr	r3, [pc, #248]	; (8001fc0 <MX_TIM4_Init+0x134>)
 8001ec8:	4a3e      	ldr	r2, [pc, #248]	; (8001fc4 <MX_TIM4_Init+0x138>)
 8001eca:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001ecc:	4b3c      	ldr	r3, [pc, #240]	; (8001fc0 <MX_TIM4_Init+0x134>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed2:	4b3b      	ldr	r3, [pc, #236]	; (8001fc0 <MX_TIM4_Init+0x134>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001ed8:	4b39      	ldr	r3, [pc, #228]	; (8001fc0 <MX_TIM4_Init+0x134>)
 8001eda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ede:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee0:	4b37      	ldr	r3, [pc, #220]	; (8001fc0 <MX_TIM4_Init+0x134>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee6:	4b36      	ldr	r3, [pc, #216]	; (8001fc0 <MX_TIM4_Init+0x134>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001eec:	4834      	ldr	r0, [pc, #208]	; (8001fc0 <MX_TIM4_Init+0x134>)
 8001eee:	f003 fca3 	bl	8005838 <HAL_TIM_Base_Init>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001ef8:	f000 fb70 	bl	80025dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001efc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f00:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f06:	4619      	mov	r1, r3
 8001f08:	482d      	ldr	r0, [pc, #180]	; (8001fc0 <MX_TIM4_Init+0x134>)
 8001f0a:	f004 fabf 	bl	800648c <HAL_TIM_ConfigClockSource>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001f14:	f000 fb62 	bl	80025dc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001f18:	4829      	ldr	r0, [pc, #164]	; (8001fc0 <MX_TIM4_Init+0x134>)
 8001f1a:	f003 fdfd 	bl	8005b18 <HAL_TIM_IC_Init>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001f24:	f000 fb5a 	bl	80025dc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001f28:	2304      	movs	r3, #4
 8001f2a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001f2c:	2350      	movs	r3, #80	; 0x50
 8001f2e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f30:	2300      	movs	r3, #0
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001f34:	2300      	movs	r3, #0
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001f3c:	f107 031c 	add.w	r3, r7, #28
 8001f40:	4619      	mov	r1, r3
 8001f42:	481f      	ldr	r0, [pc, #124]	; (8001fc0 <MX_TIM4_Init+0x134>)
 8001f44:	f004 fb69 	bl	800661a <HAL_TIM_SlaveConfigSynchro>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 8001f4e:	f000 fb45 	bl	80025dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f56:	2301      	movs	r3, #1
 8001f58:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001f62:	f107 030c 	add.w	r3, r7, #12
 8001f66:	2200      	movs	r2, #0
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4815      	ldr	r0, [pc, #84]	; (8001fc0 <MX_TIM4_Init+0x134>)
 8001f6c:	f004 f930 	bl	80061d0 <HAL_TIM_IC_ConfigChannel>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8001f76:	f000 fb31 	bl	80025dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001f82:	f107 030c 	add.w	r3, r7, #12
 8001f86:	2204      	movs	r2, #4
 8001f88:	4619      	mov	r1, r3
 8001f8a:	480d      	ldr	r0, [pc, #52]	; (8001fc0 <MX_TIM4_Init+0x134>)
 8001f8c:	f004 f920 	bl	80061d0 <HAL_TIM_IC_ConfigChannel>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_TIM4_Init+0x10e>
  {
    Error_Handler();
 8001f96:	f000 fb21 	bl	80025dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001fa2:	1d3b      	adds	r3, r7, #4
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4806      	ldr	r0, [pc, #24]	; (8001fc0 <MX_TIM4_Init+0x134>)
 8001fa8:	f005 f8b2 	bl	8007110 <HAL_TIMEx_MasterConfigSynchronization>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_TIM4_Init+0x12a>
  {
    Error_Handler();
 8001fb2:	f000 fb13 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001fb6:	bf00      	nop
 8001fb8:	3740      	adds	r7, #64	; 0x40
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	200003c4 	.word	0x200003c4
 8001fc4:	40000800 	.word	0x40000800

08001fc8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b090      	sub	sp, #64	; 0x40
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	605a      	str	r2, [r3, #4]
 8001fd8:	609a      	str	r2, [r3, #8]
 8001fda:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001fdc:	f107 031c 	add.w	r3, r7, #28
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
 8001fea:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001fec:	f107 030c 	add.w	r3, r7, #12
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ffa:	1d3b      	adds	r3, r7, #4
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002002:	4b3e      	ldr	r3, [pc, #248]	; (80020fc <MX_TIM5_Init+0x134>)
 8002004:	4a3e      	ldr	r2, [pc, #248]	; (8002100 <MX_TIM5_Init+0x138>)
 8002006:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002008:	4b3c      	ldr	r3, [pc, #240]	; (80020fc <MX_TIM5_Init+0x134>)
 800200a:	2200      	movs	r2, #0
 800200c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800200e:	4b3b      	ldr	r3, [pc, #236]	; (80020fc <MX_TIM5_Init+0x134>)
 8002010:	2200      	movs	r2, #0
 8002012:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002014:	4b39      	ldr	r3, [pc, #228]	; (80020fc <MX_TIM5_Init+0x134>)
 8002016:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800201a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800201c:	4b37      	ldr	r3, [pc, #220]	; (80020fc <MX_TIM5_Init+0x134>)
 800201e:	2200      	movs	r2, #0
 8002020:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002022:	4b36      	ldr	r3, [pc, #216]	; (80020fc <MX_TIM5_Init+0x134>)
 8002024:	2200      	movs	r2, #0
 8002026:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002028:	4834      	ldr	r0, [pc, #208]	; (80020fc <MX_TIM5_Init+0x134>)
 800202a:	f003 fc05 	bl	8005838 <HAL_TIM_Base_Init>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002034:	f000 fad2 	bl	80025dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800203c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800203e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002042:	4619      	mov	r1, r3
 8002044:	482d      	ldr	r0, [pc, #180]	; (80020fc <MX_TIM5_Init+0x134>)
 8002046:	f004 fa21 	bl	800648c <HAL_TIM_ConfigClockSource>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002050:	f000 fac4 	bl	80025dc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8002054:	4829      	ldr	r0, [pc, #164]	; (80020fc <MX_TIM5_Init+0x134>)
 8002056:	f003 fd5f 	bl	8005b18 <HAL_TIM_IC_Init>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002060:	f000 fabc 	bl	80025dc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002064:	2304      	movs	r3, #4
 8002066:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002068:	2350      	movs	r3, #80	; 0x50
 800206a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800206c:	2300      	movs	r3, #0
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002070:	2300      	movs	r3, #0
 8002072:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8002078:	f107 031c 	add.w	r3, r7, #28
 800207c:	4619      	mov	r1, r3
 800207e:	481f      	ldr	r0, [pc, #124]	; (80020fc <MX_TIM5_Init+0x134>)
 8002080:	f004 facb 	bl	800661a <HAL_TIM_SlaveConfigSynchro>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_TIM5_Init+0xc6>
  {
    Error_Handler();
 800208a:	f000 faa7 	bl	80025dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002092:	2301      	movs	r3, #1
 8002094:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800209e:	f107 030c 	add.w	r3, r7, #12
 80020a2:	2200      	movs	r2, #0
 80020a4:	4619      	mov	r1, r3
 80020a6:	4815      	ldr	r0, [pc, #84]	; (80020fc <MX_TIM5_Init+0x134>)
 80020a8:	f004 f892 	bl	80061d0 <HAL_TIM_IC_ConfigChannel>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 80020b2:	f000 fa93 	bl	80025dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80020b6:	2302      	movs	r3, #2
 80020b8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80020ba:	2302      	movs	r3, #2
 80020bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80020be:	f107 030c 	add.w	r3, r7, #12
 80020c2:	2204      	movs	r2, #4
 80020c4:	4619      	mov	r1, r3
 80020c6:	480d      	ldr	r0, [pc, #52]	; (80020fc <MX_TIM5_Init+0x134>)
 80020c8:	f004 f882 	bl	80061d0 <HAL_TIM_IC_ConfigChannel>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM5_Init+0x10e>
  {
    Error_Handler();
 80020d2:	f000 fa83 	bl	80025dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d6:	2300      	movs	r3, #0
 80020d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020da:	2300      	movs	r3, #0
 80020dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80020de:	1d3b      	adds	r3, r7, #4
 80020e0:	4619      	mov	r1, r3
 80020e2:	4806      	ldr	r0, [pc, #24]	; (80020fc <MX_TIM5_Init+0x134>)
 80020e4:	f005 f814 	bl	8007110 <HAL_TIMEx_MasterConfigSynchronization>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_TIM5_Init+0x12a>
  {
    Error_Handler();
 80020ee:	f000 fa75 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80020f2:	bf00      	nop
 80020f4:	3740      	adds	r7, #64	; 0x40
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	2000040c 	.word	0x2000040c
 8002100:	40000c00 	.word	0x40000c00

08002104 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b090      	sub	sp, #64	; 0x40
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800210a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	605a      	str	r2, [r3, #4]
 8002114:	609a      	str	r2, [r3, #8]
 8002116:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002118:	f107 031c 	add.w	r3, r7, #28
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002128:	f107 030c 	add.w	r3, r7, #12
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002136:	1d3b      	adds	r3, r7, #4
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800213e:	4b3f      	ldr	r3, [pc, #252]	; (800223c <MX_TIM8_Init+0x138>)
 8002140:	4a3f      	ldr	r2, [pc, #252]	; (8002240 <MX_TIM8_Init+0x13c>)
 8002142:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002144:	4b3d      	ldr	r3, [pc, #244]	; (800223c <MX_TIM8_Init+0x138>)
 8002146:	2200      	movs	r2, #0
 8002148:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800214a:	4b3c      	ldr	r3, [pc, #240]	; (800223c <MX_TIM8_Init+0x138>)
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002150:	4b3a      	ldr	r3, [pc, #232]	; (800223c <MX_TIM8_Init+0x138>)
 8002152:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002156:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002158:	4b38      	ldr	r3, [pc, #224]	; (800223c <MX_TIM8_Init+0x138>)
 800215a:	2200      	movs	r2, #0
 800215c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800215e:	4b37      	ldr	r3, [pc, #220]	; (800223c <MX_TIM8_Init+0x138>)
 8002160:	2200      	movs	r2, #0
 8002162:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002164:	4b35      	ldr	r3, [pc, #212]	; (800223c <MX_TIM8_Init+0x138>)
 8002166:	2200      	movs	r2, #0
 8002168:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800216a:	4834      	ldr	r0, [pc, #208]	; (800223c <MX_TIM8_Init+0x138>)
 800216c:	f003 fb64 	bl	8005838 <HAL_TIM_Base_Init>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8002176:	f000 fa31 	bl	80025dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800217a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800217e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002180:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002184:	4619      	mov	r1, r3
 8002186:	482d      	ldr	r0, [pc, #180]	; (800223c <MX_TIM8_Init+0x138>)
 8002188:	f004 f980 	bl	800648c <HAL_TIM_ConfigClockSource>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8002192:	f000 fa23 	bl	80025dc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8002196:	4829      	ldr	r0, [pc, #164]	; (800223c <MX_TIM8_Init+0x138>)
 8002198:	f003 fcbe 	bl	8005b18 <HAL_TIM_IC_Init>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_TIM8_Init+0xa2>
  {
    Error_Handler();
 80021a2:	f000 fa1b 	bl	80025dc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80021a6:	2304      	movs	r3, #4
 80021a8:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80021aa:	2360      	movs	r3, #96	; 0x60
 80021ac:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80021ae:	2302      	movs	r3, #2
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80021b2:	2300      	movs	r3, #0
 80021b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 80021ba:	f107 031c 	add.w	r3, r7, #28
 80021be:	4619      	mov	r1, r3
 80021c0:	481e      	ldr	r0, [pc, #120]	; (800223c <MX_TIM8_Init+0x138>)
 80021c2:	f004 fa2a 	bl	800661a <HAL_TIM_SlaveConfigSynchro>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 80021cc:	f000 fa06 	bl	80025dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80021d4:	2302      	movs	r3, #2
 80021d6:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80021dc:	2300      	movs	r3, #0
 80021de:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80021e0:	f107 030c 	add.w	r3, r7, #12
 80021e4:	2200      	movs	r2, #0
 80021e6:	4619      	mov	r1, r3
 80021e8:	4814      	ldr	r0, [pc, #80]	; (800223c <MX_TIM8_Init+0x138>)
 80021ea:	f003 fff1 	bl	80061d0 <HAL_TIM_IC_ConfigChannel>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 80021f4:	f000 f9f2 	bl	80025dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80021f8:	2302      	movs	r3, #2
 80021fa:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80021fc:	2301      	movs	r3, #1
 80021fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002200:	f107 030c 	add.w	r3, r7, #12
 8002204:	2204      	movs	r2, #4
 8002206:	4619      	mov	r1, r3
 8002208:	480c      	ldr	r0, [pc, #48]	; (800223c <MX_TIM8_Init+0x138>)
 800220a:	f003 ffe1 	bl	80061d0 <HAL_TIM_IC_ConfigChannel>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_TIM8_Init+0x114>
  {
    Error_Handler();
 8002214:	f000 f9e2 	bl	80025dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002218:	2300      	movs	r3, #0
 800221a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800221c:	2300      	movs	r3, #0
 800221e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002220:	1d3b      	adds	r3, r7, #4
 8002222:	4619      	mov	r1, r3
 8002224:	4805      	ldr	r0, [pc, #20]	; (800223c <MX_TIM8_Init+0x138>)
 8002226:	f004 ff73 	bl	8007110 <HAL_TIMEx_MasterConfigSynchronization>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8002230:	f000 f9d4 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002234:	bf00      	nop
 8002236:	3740      	adds	r7, #64	; 0x40
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000454 	.word	0x20000454
 8002240:	40010400 	.word	0x40010400

08002244 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800224a:	1d3b      	adds	r3, r7, #4
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	60da      	str	r2, [r3, #12]
 8002256:	611a      	str	r2, [r3, #16]
 8002258:	615a      	str	r2, [r3, #20]
 800225a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800225c:	4b1e      	ldr	r3, [pc, #120]	; (80022d8 <MX_TIM10_Init+0x94>)
 800225e:	4a1f      	ldr	r2, [pc, #124]	; (80022dc <MX_TIM10_Init+0x98>)
 8002260:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 999;
 8002262:	4b1d      	ldr	r3, [pc, #116]	; (80022d8 <MX_TIM10_Init+0x94>)
 8002264:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002268:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800226a:	4b1b      	ldr	r3, [pc, #108]	; (80022d8 <MX_TIM10_Init+0x94>)
 800226c:	2200      	movs	r2, #0
 800226e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1800-1;
 8002270:	4b19      	ldr	r3, [pc, #100]	; (80022d8 <MX_TIM10_Init+0x94>)
 8002272:	f240 7207 	movw	r2, #1799	; 0x707
 8002276:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002278:	4b17      	ldr	r3, [pc, #92]	; (80022d8 <MX_TIM10_Init+0x94>)
 800227a:	2200      	movs	r2, #0
 800227c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800227e:	4b16      	ldr	r3, [pc, #88]	; (80022d8 <MX_TIM10_Init+0x94>)
 8002280:	2200      	movs	r2, #0
 8002282:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002284:	4814      	ldr	r0, [pc, #80]	; (80022d8 <MX_TIM10_Init+0x94>)
 8002286:	f003 fad7 	bl	8005838 <HAL_TIM_Base_Init>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 8002290:	f000 f9a4 	bl	80025dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002294:	4810      	ldr	r0, [pc, #64]	; (80022d8 <MX_TIM10_Init+0x94>)
 8002296:	f003 fb1e 	bl	80058d6 <HAL_TIM_PWM_Init>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 80022a0:	f000 f99c 	bl	80025dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022a4:	2360      	movs	r3, #96	; 0x60
 80022a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022ac:	2300      	movs	r3, #0
 80022ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022b4:	1d3b      	adds	r3, r7, #4
 80022b6:	2200      	movs	r2, #0
 80022b8:	4619      	mov	r1, r3
 80022ba:	4807      	ldr	r0, [pc, #28]	; (80022d8 <MX_TIM10_Init+0x94>)
 80022bc:	f004 f824 	bl	8006308 <HAL_TIM_PWM_ConfigChannel>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 80022c6:	f000 f989 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80022ca:	4803      	ldr	r0, [pc, #12]	; (80022d8 <MX_TIM10_Init+0x94>)
 80022cc:	f000 fca2 	bl	8002c14 <HAL_TIM_MspPostInit>

}
 80022d0:	bf00      	nop
 80022d2:	3720      	adds	r7, #32
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	2000049c 	.word	0x2000049c
 80022dc:	40014400 	.word	0x40014400

080022e0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80022e6:	1d3b      	adds	r3, r7, #4
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]
 80022f2:	611a      	str	r2, [r3, #16]
 80022f4:	615a      	str	r2, [r3, #20]
 80022f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80022f8:	4b1e      	ldr	r3, [pc, #120]	; (8002374 <MX_TIM11_Init+0x94>)
 80022fa:	4a1f      	ldr	r2, [pc, #124]	; (8002378 <MX_TIM11_Init+0x98>)
 80022fc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80022fe:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <MX_TIM11_Init+0x94>)
 8002300:	2200      	movs	r2, #0
 8002302:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002304:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <MX_TIM11_Init+0x94>)
 8002306:	2200      	movs	r2, #0
 8002308:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1800-1;
 800230a:	4b1a      	ldr	r3, [pc, #104]	; (8002374 <MX_TIM11_Init+0x94>)
 800230c:	f240 7207 	movw	r2, #1799	; 0x707
 8002310:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002312:	4b18      	ldr	r3, [pc, #96]	; (8002374 <MX_TIM11_Init+0x94>)
 8002314:	2200      	movs	r2, #0
 8002316:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002318:	4b16      	ldr	r3, [pc, #88]	; (8002374 <MX_TIM11_Init+0x94>)
 800231a:	2200      	movs	r2, #0
 800231c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800231e:	4815      	ldr	r0, [pc, #84]	; (8002374 <MX_TIM11_Init+0x94>)
 8002320:	f003 fa8a 	bl	8005838 <HAL_TIM_Base_Init>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800232a:	f000 f957 	bl	80025dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800232e:	4811      	ldr	r0, [pc, #68]	; (8002374 <MX_TIM11_Init+0x94>)
 8002330:	f003 fad1 	bl	80058d6 <HAL_TIM_PWM_Init>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800233a:	f000 f94f 	bl	80025dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800233e:	2360      	movs	r3, #96	; 0x60
 8002340:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800234e:	1d3b      	adds	r3, r7, #4
 8002350:	2200      	movs	r2, #0
 8002352:	4619      	mov	r1, r3
 8002354:	4807      	ldr	r0, [pc, #28]	; (8002374 <MX_TIM11_Init+0x94>)
 8002356:	f003 ffd7 	bl	8006308 <HAL_TIM_PWM_ConfigChannel>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8002360:	f000 f93c 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8002364:	4803      	ldr	r0, [pc, #12]	; (8002374 <MX_TIM11_Init+0x94>)
 8002366:	f000 fc55 	bl	8002c14 <HAL_TIM_MspPostInit>

}
 800236a:	bf00      	nop
 800236c:	3720      	adds	r7, #32
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	200004e4 	.word	0x200004e4
 8002378:	40014800 	.word	0x40014800

0800237c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08e      	sub	sp, #56	; 0x38
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002382:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	605a      	str	r2, [r3, #4]
 800238c:	609a      	str	r2, [r3, #8]
 800238e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80023a0:	1d3b      	adds	r3, r7, #4
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	605a      	str	r2, [r3, #4]
 80023a8:	609a      	str	r2, [r3, #8]
 80023aa:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80023ac:	4b35      	ldr	r3, [pc, #212]	; (8002484 <MX_TIM12_Init+0x108>)
 80023ae:	4a36      	ldr	r2, [pc, #216]	; (8002488 <MX_TIM12_Init+0x10c>)
 80023b0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80023b2:	4b34      	ldr	r3, [pc, #208]	; (8002484 <MX_TIM12_Init+0x108>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b8:	4b32      	ldr	r3, [pc, #200]	; (8002484 <MX_TIM12_Init+0x108>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80023be:	4b31      	ldr	r3, [pc, #196]	; (8002484 <MX_TIM12_Init+0x108>)
 80023c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023c4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c6:	4b2f      	ldr	r3, [pc, #188]	; (8002484 <MX_TIM12_Init+0x108>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023cc:	4b2d      	ldr	r3, [pc, #180]	; (8002484 <MX_TIM12_Init+0x108>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80023d2:	482c      	ldr	r0, [pc, #176]	; (8002484 <MX_TIM12_Init+0x108>)
 80023d4:	f003 fa30 	bl	8005838 <HAL_TIM_Base_Init>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <MX_TIM12_Init+0x66>
  {
    Error_Handler();
 80023de:	f000 f8fd 	bl	80025dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80023e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023ec:	4619      	mov	r1, r3
 80023ee:	4825      	ldr	r0, [pc, #148]	; (8002484 <MX_TIM12_Init+0x108>)
 80023f0:	f004 f84c 	bl	800648c <HAL_TIM_ConfigClockSource>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_TIM12_Init+0x82>
  {
    Error_Handler();
 80023fa:	f000 f8ef 	bl	80025dc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 80023fe:	4821      	ldr	r0, [pc, #132]	; (8002484 <MX_TIM12_Init+0x108>)
 8002400:	f003 fb8a 	bl	8005b18 <HAL_TIM_IC_Init>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_TIM12_Init+0x92>
  {
    Error_Handler();
 800240a:	f000 f8e7 	bl	80025dc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800240e:	2304      	movs	r3, #4
 8002410:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002412:	2350      	movs	r3, #80	; 0x50
 8002414:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800241a:	2300      	movs	r3, #0
 800241c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim12, &sSlaveConfig) != HAL_OK)
 8002422:	f107 0314 	add.w	r3, r7, #20
 8002426:	4619      	mov	r1, r3
 8002428:	4816      	ldr	r0, [pc, #88]	; (8002484 <MX_TIM12_Init+0x108>)
 800242a:	f004 f8f6 	bl	800661a <HAL_TIM_SlaveConfigSynchro>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_TIM12_Init+0xbc>
  {
    Error_Handler();
 8002434:	f000 f8d2 	bl	80025dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002438:	2300      	movs	r3, #0
 800243a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800243c:	2301      	movs	r3, #1
 800243e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002440:	2300      	movs	r3, #0
 8002442:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002448:	1d3b      	adds	r3, r7, #4
 800244a:	2200      	movs	r2, #0
 800244c:	4619      	mov	r1, r3
 800244e:	480d      	ldr	r0, [pc, #52]	; (8002484 <MX_TIM12_Init+0x108>)
 8002450:	f003 febe 	bl	80061d0 <HAL_TIM_IC_ConfigChannel>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_TIM12_Init+0xe2>
  {
    Error_Handler();
 800245a:	f000 f8bf 	bl	80025dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800245e:	2302      	movs	r3, #2
 8002460:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002462:	2302      	movs	r3, #2
 8002464:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002466:	1d3b      	adds	r3, r7, #4
 8002468:	2204      	movs	r2, #4
 800246a:	4619      	mov	r1, r3
 800246c:	4805      	ldr	r0, [pc, #20]	; (8002484 <MX_TIM12_Init+0x108>)
 800246e:	f003 feaf 	bl	80061d0 <HAL_TIM_IC_ConfigChannel>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_TIM12_Init+0x100>
  {
    Error_Handler();
 8002478:	f000 f8b0 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 800247c:	bf00      	nop
 800247e:	3738      	adds	r7, #56	; 0x38
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	2000052c 	.word	0x2000052c
 8002488:	40001800 	.word	0x40001800

0800248c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002490:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <MX_USART2_UART_Init+0x4c>)
 8002492:	4a12      	ldr	r2, [pc, #72]	; (80024dc <MX_USART2_UART_Init+0x50>)
 8002494:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002496:	4b10      	ldr	r3, [pc, #64]	; (80024d8 <MX_USART2_UART_Init+0x4c>)
 8002498:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800249c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800249e:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <MX_USART2_UART_Init+0x4c>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <MX_USART2_UART_Init+0x4c>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024aa:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <MX_USART2_UART_Init+0x4c>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024b0:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <MX_USART2_UART_Init+0x4c>)
 80024b2:	220c      	movs	r2, #12
 80024b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024b6:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <MX_USART2_UART_Init+0x4c>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024bc:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <MX_USART2_UART_Init+0x4c>)
 80024be:	2200      	movs	r2, #0
 80024c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024c2:	4805      	ldr	r0, [pc, #20]	; (80024d8 <MX_USART2_UART_Init+0x4c>)
 80024c4:	f004 feb4 	bl	8007230 <HAL_UART_Init>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80024ce:	f000 f885 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20000574 	.word	0x20000574
 80024dc:	40004400 	.word	0x40004400

080024e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08a      	sub	sp, #40	; 0x28
 80024e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e6:	f107 0314 	add.w	r3, r7, #20
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	605a      	str	r2, [r3, #4]
 80024f0:	609a      	str	r2, [r3, #8]
 80024f2:	60da      	str	r2, [r3, #12]
 80024f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	4b2d      	ldr	r3, [pc, #180]	; (80025b0 <MX_GPIO_Init+0xd0>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	4a2c      	ldr	r2, [pc, #176]	; (80025b0 <MX_GPIO_Init+0xd0>)
 8002500:	f043 0304 	orr.w	r3, r3, #4
 8002504:	6313      	str	r3, [r2, #48]	; 0x30
 8002506:	4b2a      	ldr	r3, [pc, #168]	; (80025b0 <MX_GPIO_Init+0xd0>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	f003 0304 	and.w	r3, r3, #4
 800250e:	613b      	str	r3, [r7, #16]
 8002510:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	60fb      	str	r3, [r7, #12]
 8002516:	4b26      	ldr	r3, [pc, #152]	; (80025b0 <MX_GPIO_Init+0xd0>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	4a25      	ldr	r2, [pc, #148]	; (80025b0 <MX_GPIO_Init+0xd0>)
 800251c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002520:	6313      	str	r3, [r2, #48]	; 0x30
 8002522:	4b23      	ldr	r3, [pc, #140]	; (80025b0 <MX_GPIO_Init+0xd0>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	60bb      	str	r3, [r7, #8]
 8002532:	4b1f      	ldr	r3, [pc, #124]	; (80025b0 <MX_GPIO_Init+0xd0>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	4a1e      	ldr	r2, [pc, #120]	; (80025b0 <MX_GPIO_Init+0xd0>)
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	6313      	str	r3, [r2, #48]	; 0x30
 800253e:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <MX_GPIO_Init+0xd0>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	60bb      	str	r3, [r7, #8]
 8002548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	607b      	str	r3, [r7, #4]
 800254e:	4b18      	ldr	r3, [pc, #96]	; (80025b0 <MX_GPIO_Init+0xd0>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	4a17      	ldr	r2, [pc, #92]	; (80025b0 <MX_GPIO_Init+0xd0>)
 8002554:	f043 0302 	orr.w	r3, r3, #2
 8002558:	6313      	str	r3, [r2, #48]	; 0x30
 800255a:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <MX_GPIO_Init+0xd0>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	607b      	str	r3, [r7, #4]
 8002564:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8002566:	2200      	movs	r2, #0
 8002568:	2107      	movs	r1, #7
 800256a:	4812      	ldr	r0, [pc, #72]	; (80025b4 <MX_GPIO_Init+0xd4>)
 800256c:	f001 fbd2 	bl	8003d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002570:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002576:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800257a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257c:	2300      	movs	r3, #0
 800257e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002580:	f107 0314 	add.w	r3, r7, #20
 8002584:	4619      	mov	r1, r3
 8002586:	480b      	ldr	r0, [pc, #44]	; (80025b4 <MX_GPIO_Init+0xd4>)
 8002588:	f001 fa30 	bl	80039ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800258c:	2307      	movs	r3, #7
 800258e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002590:	2301      	movs	r3, #1
 8002592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	2300      	movs	r3, #0
 8002596:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002598:	2303      	movs	r3, #3
 800259a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800259c:	f107 0314 	add.w	r3, r7, #20
 80025a0:	4619      	mov	r1, r3
 80025a2:	4804      	ldr	r0, [pc, #16]	; (80025b4 <MX_GPIO_Init+0xd4>)
 80025a4:	f001 fa22 	bl	80039ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80025a8:	bf00      	nop
 80025aa:	3728      	adds	r7, #40	; 0x28
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40020800 	.word	0x40020800

080025b8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80025c0:	1d39      	adds	r1, r7, #4
 80025c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025c6:	2201      	movs	r2, #1
 80025c8:	4803      	ldr	r0, [pc, #12]	; (80025d8 <__io_putchar+0x20>)
 80025ca:	f004 fe7e 	bl	80072ca <HAL_UART_Transmit>

  return ch;
 80025ce:	687b      	ldr	r3, [r7, #4]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20000574 	.word	0x20000574

080025dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025e0:	b672      	cpsid	i
}
 80025e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025e4:	e7fe      	b.n	80025e4 <Error_Handler+0x8>
	...

080025e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	607b      	str	r3, [r7, #4]
 80025f2:	4b10      	ldr	r3, [pc, #64]	; (8002634 <HAL_MspInit+0x4c>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	4a0f      	ldr	r2, [pc, #60]	; (8002634 <HAL_MspInit+0x4c>)
 80025f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025fc:	6453      	str	r3, [r2, #68]	; 0x44
 80025fe:	4b0d      	ldr	r3, [pc, #52]	; (8002634 <HAL_MspInit+0x4c>)
 8002600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002606:	607b      	str	r3, [r7, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	603b      	str	r3, [r7, #0]
 800260e:	4b09      	ldr	r3, [pc, #36]	; (8002634 <HAL_MspInit+0x4c>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	4a08      	ldr	r2, [pc, #32]	; (8002634 <HAL_MspInit+0x4c>)
 8002614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002618:	6413      	str	r3, [r2, #64]	; 0x40
 800261a:	4b06      	ldr	r3, [pc, #24]	; (8002634 <HAL_MspInit+0x4c>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002626:	2007      	movs	r0, #7
 8002628:	f001 f8b6 	bl	8003798 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800262c:	bf00      	nop
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40023800 	.word	0x40023800

08002638 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b08a      	sub	sp, #40	; 0x28
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002640:	f107 0314 	add.w	r3, r7, #20
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	60da      	str	r2, [r3, #12]
 800264e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a17      	ldr	r2, [pc, #92]	; (80026b4 <HAL_ADC_MspInit+0x7c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d127      	bne.n	80026aa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	613b      	str	r3, [r7, #16]
 800265e:	4b16      	ldr	r3, [pc, #88]	; (80026b8 <HAL_ADC_MspInit+0x80>)
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	4a15      	ldr	r2, [pc, #84]	; (80026b8 <HAL_ADC_MspInit+0x80>)
 8002664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002668:	6453      	str	r3, [r2, #68]	; 0x44
 800266a:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <HAL_ADC_MspInit+0x80>)
 800266c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002672:	613b      	str	r3, [r7, #16]
 8002674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <HAL_ADC_MspInit+0x80>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	4a0e      	ldr	r2, [pc, #56]	; (80026b8 <HAL_ADC_MspInit+0x80>)
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	6313      	str	r3, [r2, #48]	; 0x30
 8002686:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <HAL_ADC_MspInit+0x80>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002692:	2380      	movs	r3, #128	; 0x80
 8002694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002696:	2303      	movs	r3, #3
 8002698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269e:	f107 0314 	add.w	r3, r7, #20
 80026a2:	4619      	mov	r1, r3
 80026a4:	4805      	ldr	r0, [pc, #20]	; (80026bc <HAL_ADC_MspInit+0x84>)
 80026a6:	f001 f9a1 	bl	80039ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80026aa:	bf00      	nop
 80026ac:	3728      	adds	r7, #40	; 0x28
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40012000 	.word	0x40012000
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40020000 	.word	0x40020000

080026c0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08a      	sub	sp, #40	; 0x28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c8:	f107 0314 	add.w	r3, r7, #20
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	60da      	str	r2, [r3, #12]
 80026d6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a17      	ldr	r2, [pc, #92]	; (800273c <HAL_DAC_MspInit+0x7c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d127      	bne.n	8002732 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	4b16      	ldr	r3, [pc, #88]	; (8002740 <HAL_DAC_MspInit+0x80>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	4a15      	ldr	r2, [pc, #84]	; (8002740 <HAL_DAC_MspInit+0x80>)
 80026ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80026f0:	6413      	str	r3, [r2, #64]	; 0x40
 80026f2:	4b13      	ldr	r3, [pc, #76]	; (8002740 <HAL_DAC_MspInit+0x80>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026fa:	613b      	str	r3, [r7, #16]
 80026fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	4b0f      	ldr	r3, [pc, #60]	; (8002740 <HAL_DAC_MspInit+0x80>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	4a0e      	ldr	r2, [pc, #56]	; (8002740 <HAL_DAC_MspInit+0x80>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	6313      	str	r3, [r2, #48]	; 0x30
 800270e:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <HAL_DAC_MspInit+0x80>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800271a:	2310      	movs	r3, #16
 800271c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800271e:	2303      	movs	r3, #3
 8002720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002726:	f107 0314 	add.w	r3, r7, #20
 800272a:	4619      	mov	r1, r3
 800272c:	4805      	ldr	r0, [pc, #20]	; (8002744 <HAL_DAC_MspInit+0x84>)
 800272e:	f001 f95d 	bl	80039ec <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002732:	bf00      	nop
 8002734:	3728      	adds	r7, #40	; 0x28
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40007400 	.word	0x40007400
 8002740:	40023800 	.word	0x40023800
 8002744:	40020000 	.word	0x40020000

08002748 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08a      	sub	sp, #40	; 0x28
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a29      	ldr	r2, [pc, #164]	; (800280c <HAL_I2C_MspInit+0xc4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d14b      	bne.n	8002802 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	613b      	str	r3, [r7, #16]
 800276e:	4b28      	ldr	r3, [pc, #160]	; (8002810 <HAL_I2C_MspInit+0xc8>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	4a27      	ldr	r2, [pc, #156]	; (8002810 <HAL_I2C_MspInit+0xc8>)
 8002774:	f043 0302 	orr.w	r3, r3, #2
 8002778:	6313      	str	r3, [r2, #48]	; 0x30
 800277a:	4b25      	ldr	r3, [pc, #148]	; (8002810 <HAL_I2C_MspInit+0xc8>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	4b21      	ldr	r3, [pc, #132]	; (8002810 <HAL_I2C_MspInit+0xc8>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	4a20      	ldr	r2, [pc, #128]	; (8002810 <HAL_I2C_MspInit+0xc8>)
 8002790:	f043 0304 	orr.w	r3, r3, #4
 8002794:	6313      	str	r3, [r2, #48]	; 0x30
 8002796:	4b1e      	ldr	r3, [pc, #120]	; (8002810 <HAL_I2C_MspInit+0xc8>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027a8:	2312      	movs	r3, #18
 80027aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b0:	2303      	movs	r3, #3
 80027b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80027b4:	2304      	movs	r3, #4
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b8:	f107 0314 	add.w	r3, r7, #20
 80027bc:	4619      	mov	r1, r3
 80027be:	4815      	ldr	r0, [pc, #84]	; (8002814 <HAL_I2C_MspInit+0xcc>)
 80027c0:	f001 f914 	bl	80039ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80027c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027ca:	2312      	movs	r3, #18
 80027cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d2:	2303      	movs	r3, #3
 80027d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80027d6:	2304      	movs	r3, #4
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027da:	f107 0314 	add.w	r3, r7, #20
 80027de:	4619      	mov	r1, r3
 80027e0:	480d      	ldr	r0, [pc, #52]	; (8002818 <HAL_I2C_MspInit+0xd0>)
 80027e2:	f001 f903 	bl	80039ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	4b09      	ldr	r3, [pc, #36]	; (8002810 <HAL_I2C_MspInit+0xc8>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	4a08      	ldr	r2, [pc, #32]	; (8002810 <HAL_I2C_MspInit+0xc8>)
 80027f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027f4:	6413      	str	r3, [r2, #64]	; 0x40
 80027f6:	4b06      	ldr	r3, [pc, #24]	; (8002810 <HAL_I2C_MspInit+0xc8>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002802:	bf00      	nop
 8002804:	3728      	adds	r7, #40	; 0x28
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40005800 	.word	0x40005800
 8002810:	40023800 	.word	0x40023800
 8002814:	40020400 	.word	0x40020400
 8002818:	40020800 	.word	0x40020800

0800281c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b09a      	sub	sp, #104	; 0x68
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002824:	f107 030c 	add.w	r3, r7, #12
 8002828:	225c      	movs	r2, #92	; 0x5c
 800282a:	2100      	movs	r1, #0
 800282c:	4618      	mov	r0, r3
 800282e:	f005 fdfb 	bl	8008428 <memset>
  if(hrtc->Instance==RTC)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a0c      	ldr	r2, [pc, #48]	; (8002868 <HAL_RTC_MspInit+0x4c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d111      	bne.n	8002860 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800283c:	2320      	movs	r3, #32
 800283e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002840:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002844:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002846:	f107 030c 	add.w	r3, r7, #12
 800284a:	4618      	mov	r0, r3
 800284c:	f001 fd2a 	bl	80042a4 <HAL_RCCEx_PeriphCLKConfig>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002856:	f7ff fec1 	bl	80025dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800285a:	4b04      	ldr	r3, [pc, #16]	; (800286c <HAL_RTC_MspInit+0x50>)
 800285c:	2201      	movs	r2, #1
 800285e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002860:	bf00      	nop
 8002862:	3768      	adds	r7, #104	; 0x68
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40002800 	.word	0x40002800
 800286c:	42470e3c 	.word	0x42470e3c

08002870 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08c      	sub	sp, #48	; 0x30
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002878:	f107 031c 	add.w	r3, r7, #28
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	60da      	str	r2, [r3, #12]
 8002886:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a36      	ldr	r2, [pc, #216]	; (8002968 <HAL_TIM_IC_MspInit+0xf8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d12d      	bne.n	80028ee <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	61bb      	str	r3, [r7, #24]
 8002896:	4b35      	ldr	r3, [pc, #212]	; (800296c <HAL_TIM_IC_MspInit+0xfc>)
 8002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289a:	4a34      	ldr	r2, [pc, #208]	; (800296c <HAL_TIM_IC_MspInit+0xfc>)
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	6453      	str	r3, [r2, #68]	; 0x44
 80028a2:	4b32      	ldr	r3, [pc, #200]	; (800296c <HAL_TIM_IC_MspInit+0xfc>)
 80028a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	61bb      	str	r3, [r7, #24]
 80028ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]
 80028b2:	4b2e      	ldr	r3, [pc, #184]	; (800296c <HAL_TIM_IC_MspInit+0xfc>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	4a2d      	ldr	r2, [pc, #180]	; (800296c <HAL_TIM_IC_MspInit+0xfc>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	6313      	str	r3, [r2, #48]	; 0x30
 80028be:	4b2b      	ldr	r3, [pc, #172]	; (800296c <HAL_TIM_IC_MspInit+0xfc>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80028ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d0:	2302      	movs	r3, #2
 80028d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d8:	2300      	movs	r3, #0
 80028da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028dc:	2301      	movs	r3, #1
 80028de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e0:	f107 031c 	add.w	r3, r7, #28
 80028e4:	4619      	mov	r1, r3
 80028e6:	4822      	ldr	r0, [pc, #136]	; (8002970 <HAL_TIM_IC_MspInit+0x100>)
 80028e8:	f001 f880 	bl	80039ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80028ec:	e038      	b.n	8002960 <HAL_TIM_IC_MspInit+0xf0>
  else if(htim_ic->Instance==TIM2)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f6:	d133      	bne.n	8002960 <HAL_TIM_IC_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028f8:	2300      	movs	r3, #0
 80028fa:	613b      	str	r3, [r7, #16]
 80028fc:	4b1b      	ldr	r3, [pc, #108]	; (800296c <HAL_TIM_IC_MspInit+0xfc>)
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	4a1a      	ldr	r2, [pc, #104]	; (800296c <HAL_TIM_IC_MspInit+0xfc>)
 8002902:	f043 0301 	orr.w	r3, r3, #1
 8002906:	6413      	str	r3, [r2, #64]	; 0x40
 8002908:	4b18      	ldr	r3, [pc, #96]	; (800296c <HAL_TIM_IC_MspInit+0xfc>)
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002914:	2300      	movs	r3, #0
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	4b14      	ldr	r3, [pc, #80]	; (800296c <HAL_TIM_IC_MspInit+0xfc>)
 800291a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291c:	4a13      	ldr	r2, [pc, #76]	; (800296c <HAL_TIM_IC_MspInit+0xfc>)
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	6313      	str	r3, [r2, #48]	; 0x30
 8002924:	4b11      	ldr	r3, [pc, #68]	; (800296c <HAL_TIM_IC_MspInit+0xfc>)
 8002926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002930:	2320      	movs	r3, #32
 8002932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002934:	2302      	movs	r3, #2
 8002936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002938:	2300      	movs	r3, #0
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293c:	2300      	movs	r3, #0
 800293e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002940:	2301      	movs	r3, #1
 8002942:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002944:	f107 031c 	add.w	r3, r7, #28
 8002948:	4619      	mov	r1, r3
 800294a:	4809      	ldr	r0, [pc, #36]	; (8002970 <HAL_TIM_IC_MspInit+0x100>)
 800294c:	f001 f84e 	bl	80039ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002950:	2200      	movs	r2, #0
 8002952:	2100      	movs	r1, #0
 8002954:	201c      	movs	r0, #28
 8002956:	f000 ff2a 	bl	80037ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800295a:	201c      	movs	r0, #28
 800295c:	f000 ff43 	bl	80037e6 <HAL_NVIC_EnableIRQ>
}
 8002960:	bf00      	nop
 8002962:	3730      	adds	r7, #48	; 0x30
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40010000 	.word	0x40010000
 800296c:	40023800 	.word	0x40023800
 8002970:	40020000 	.word	0x40020000

08002974 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b094      	sub	sp, #80	; 0x50
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	60da      	str	r2, [r3, #12]
 800298a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a95      	ldr	r2, [pc, #596]	; (8002be8 <HAL_TIM_Base_MspInit+0x274>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d134      	bne.n	8002a00 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	63bb      	str	r3, [r7, #56]	; 0x38
 800299a:	4b94      	ldr	r3, [pc, #592]	; (8002bec <HAL_TIM_Base_MspInit+0x278>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	4a93      	ldr	r2, [pc, #588]	; (8002bec <HAL_TIM_Base_MspInit+0x278>)
 80029a0:	f043 0302 	orr.w	r3, r3, #2
 80029a4:	6413      	str	r3, [r2, #64]	; 0x40
 80029a6:	4b91      	ldr	r3, [pc, #580]	; (8002bec <HAL_TIM_Base_MspInit+0x278>)
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80029b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	637b      	str	r3, [r7, #52]	; 0x34
 80029b6:	4b8d      	ldr	r3, [pc, #564]	; (8002bec <HAL_TIM_Base_MspInit+0x278>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	4a8c      	ldr	r2, [pc, #560]	; (8002bec <HAL_TIM_Base_MspInit+0x278>)
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	6313      	str	r3, [r2, #48]	; 0x30
 80029c2:	4b8a      	ldr	r3, [pc, #552]	; (8002bec <HAL_TIM_Base_MspInit+0x278>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	637b      	str	r3, [r7, #52]	; 0x34
 80029cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029ce:	2340      	movs	r3, #64	; 0x40
 80029d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d2:	2302      	movs	r3, #2
 80029d4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029da:	2300      	movs	r3, #0
 80029dc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029de:	2302      	movs	r3, #2
 80029e0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029e6:	4619      	mov	r1, r3
 80029e8:	4881      	ldr	r0, [pc, #516]	; (8002bf0 <HAL_TIM_Base_MspInit+0x27c>)
 80029ea:	f000 ffff 	bl	80039ec <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80029ee:	2200      	movs	r2, #0
 80029f0:	2100      	movs	r1, #0
 80029f2:	201d      	movs	r0, #29
 80029f4:	f000 fedb 	bl	80037ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80029f8:	201d      	movs	r0, #29
 80029fa:	f000 fef4 	bl	80037e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80029fe:	e0ef      	b.n	8002be0 <HAL_TIM_Base_MspInit+0x26c>
  else if(htim_base->Instance==TIM4)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a7b      	ldr	r2, [pc, #492]	; (8002bf4 <HAL_TIM_Base_MspInit+0x280>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d12c      	bne.n	8002a64 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	633b      	str	r3, [r7, #48]	; 0x30
 8002a0e:	4b77      	ldr	r3, [pc, #476]	; (8002bec <HAL_TIM_Base_MspInit+0x278>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	4a76      	ldr	r2, [pc, #472]	; (8002bec <HAL_TIM_Base_MspInit+0x278>)
 8002a14:	f043 0304 	orr.w	r3, r3, #4
 8002a18:	6413      	str	r3, [r2, #64]	; 0x40
 8002a1a:	4b74      	ldr	r3, [pc, #464]	; (8002bec <HAL_TIM_Base_MspInit+0x278>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	633b      	str	r3, [r7, #48]	; 0x30
 8002a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a26:	2300      	movs	r3, #0
 8002a28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a2a:	4b70      	ldr	r3, [pc, #448]	; (8002bec <HAL_TIM_Base_MspInit+0x278>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	4a6f      	ldr	r2, [pc, #444]	; (8002bec <HAL_TIM_Base_MspInit+0x278>)
 8002a30:	f043 0302 	orr.w	r3, r3, #2
 8002a34:	6313      	str	r3, [r2, #48]	; 0x30
 8002a36:	4b6d      	ldr	r3, [pc, #436]	; (8002bec <HAL_TIM_Base_MspInit+0x278>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a42:	2340      	movs	r3, #64	; 0x40
 8002a44:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a46:	2302      	movs	r3, #2
 8002a48:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a52:	2302      	movs	r3, #2
 8002a54:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a56:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4866      	ldr	r0, [pc, #408]	; (8002bf8 <HAL_TIM_Base_MspInit+0x284>)
 8002a5e:	f000 ffc5 	bl	80039ec <HAL_GPIO_Init>
}
 8002a62:	e0bd      	b.n	8002be0 <HAL_TIM_Base_MspInit+0x26c>
  else if(htim_base->Instance==TIM5)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a64      	ldr	r2, [pc, #400]	; (8002bfc <HAL_TIM_Base_MspInit+0x288>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d12c      	bne.n	8002ac8 <HAL_TIM_Base_MspInit+0x154>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a72:	4b5e      	ldr	r3, [pc, #376]	; (8002bec <HAL_TIM_Base_MspInit+0x278>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	4a5d      	ldr	r2, [pc, #372]	; (8002bec <HAL_TIM_Base_MspInit+0x278>)
 8002a78:	f043 0308 	orr.w	r3, r3, #8
 8002a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a7e:	4b5b      	ldr	r3, [pc, #364]	; (8002bec <HAL_TIM_Base_MspInit+0x278>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f003 0308 	and.w	r3, r3, #8
 8002a86:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a8e:	4b57      	ldr	r3, [pc, #348]	; (8002bec <HAL_TIM_Base_MspInit+0x278>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	4a56      	ldr	r2, [pc, #344]	; (8002bec <HAL_TIM_Base_MspInit+0x278>)
 8002a94:	f043 0301 	orr.w	r3, r3, #1
 8002a98:	6313      	str	r3, [r2, #48]	; 0x30
 8002a9a:	4b54      	ldr	r3, [pc, #336]	; (8002bec <HAL_TIM_Base_MspInit+0x278>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aaa:	2302      	movs	r3, #2
 8002aac:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002abe:	4619      	mov	r1, r3
 8002ac0:	484b      	ldr	r0, [pc, #300]	; (8002bf0 <HAL_TIM_Base_MspInit+0x27c>)
 8002ac2:	f000 ff93 	bl	80039ec <HAL_GPIO_Init>
}
 8002ac6:	e08b      	b.n	8002be0 <HAL_TIM_Base_MspInit+0x26c>
  else if(htim_base->Instance==TIM8)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a4c      	ldr	r2, [pc, #304]	; (8002c00 <HAL_TIM_Base_MspInit+0x28c>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d12c      	bne.n	8002b2c <HAL_TIM_Base_MspInit+0x1b8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	623b      	str	r3, [r7, #32]
 8002ad6:	4b45      	ldr	r3, [pc, #276]	; (8002bec <HAL_TIM_Base_MspInit+0x278>)
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ada:	4a44      	ldr	r2, [pc, #272]	; (8002bec <HAL_TIM_Base_MspInit+0x278>)
 8002adc:	f043 0302 	orr.w	r3, r3, #2
 8002ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ae2:	4b42      	ldr	r3, [pc, #264]	; (8002bec <HAL_TIM_Base_MspInit+0x278>)
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	623b      	str	r3, [r7, #32]
 8002aec:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
 8002af2:	4b3e      	ldr	r3, [pc, #248]	; (8002bec <HAL_TIM_Base_MspInit+0x278>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	4a3d      	ldr	r2, [pc, #244]	; (8002bec <HAL_TIM_Base_MspInit+0x278>)
 8002af8:	f043 0304 	orr.w	r3, r3, #4
 8002afc:	6313      	str	r3, [r2, #48]	; 0x30
 8002afe:	4b3b      	ldr	r3, [pc, #236]	; (8002bec <HAL_TIM_Base_MspInit+0x278>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	61fb      	str	r3, [r7, #28]
 8002b08:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b0a:	2380      	movs	r3, #128	; 0x80
 8002b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b16:	2300      	movs	r3, #0
 8002b18:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b1e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b22:	4619      	mov	r1, r3
 8002b24:	4837      	ldr	r0, [pc, #220]	; (8002c04 <HAL_TIM_Base_MspInit+0x290>)
 8002b26:	f000 ff61 	bl	80039ec <HAL_GPIO_Init>
}
 8002b2a:	e059      	b.n	8002be0 <HAL_TIM_Base_MspInit+0x26c>
  else if(htim_base->Instance==TIM10)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a35      	ldr	r2, [pc, #212]	; (8002c08 <HAL_TIM_Base_MspInit+0x294>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d10e      	bne.n	8002b54 <HAL_TIM_Base_MspInit+0x1e0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	61bb      	str	r3, [r7, #24]
 8002b3a:	4b2c      	ldr	r3, [pc, #176]	; (8002bec <HAL_TIM_Base_MspInit+0x278>)
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	4a2b      	ldr	r2, [pc, #172]	; (8002bec <HAL_TIM_Base_MspInit+0x278>)
 8002b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b44:	6453      	str	r3, [r2, #68]	; 0x44
 8002b46:	4b29      	ldr	r3, [pc, #164]	; (8002bec <HAL_TIM_Base_MspInit+0x278>)
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4e:	61bb      	str	r3, [r7, #24]
 8002b50:	69bb      	ldr	r3, [r7, #24]
}
 8002b52:	e045      	b.n	8002be0 <HAL_TIM_Base_MspInit+0x26c>
  else if(htim_base->Instance==TIM11)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a2c      	ldr	r2, [pc, #176]	; (8002c0c <HAL_TIM_Base_MspInit+0x298>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d10e      	bne.n	8002b7c <HAL_TIM_Base_MspInit+0x208>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	4b22      	ldr	r3, [pc, #136]	; (8002bec <HAL_TIM_Base_MspInit+0x278>)
 8002b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b66:	4a21      	ldr	r2, [pc, #132]	; (8002bec <HAL_TIM_Base_MspInit+0x278>)
 8002b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b6e:	4b1f      	ldr	r3, [pc, #124]	; (8002bec <HAL_TIM_Base_MspInit+0x278>)
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	697b      	ldr	r3, [r7, #20]
}
 8002b7a:	e031      	b.n	8002be0 <HAL_TIM_Base_MspInit+0x26c>
  else if(htim_base->Instance==TIM12)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a23      	ldr	r2, [pc, #140]	; (8002c10 <HAL_TIM_Base_MspInit+0x29c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d12c      	bne.n	8002be0 <HAL_TIM_Base_MspInit+0x26c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	4b18      	ldr	r3, [pc, #96]	; (8002bec <HAL_TIM_Base_MspInit+0x278>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	4a17      	ldr	r2, [pc, #92]	; (8002bec <HAL_TIM_Base_MspInit+0x278>)
 8002b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b94:	6413      	str	r3, [r2, #64]	; 0x40
 8002b96:	4b15      	ldr	r3, [pc, #84]	; (8002bec <HAL_TIM_Base_MspInit+0x278>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9e:	613b      	str	r3, [r7, #16]
 8002ba0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	4b11      	ldr	r3, [pc, #68]	; (8002bec <HAL_TIM_Base_MspInit+0x278>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	4a10      	ldr	r2, [pc, #64]	; (8002bec <HAL_TIM_Base_MspInit+0x278>)
 8002bac:	f043 0302 	orr.w	r3, r3, #2
 8002bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb2:	4b0e      	ldr	r3, [pc, #56]	; (8002bec <HAL_TIM_Base_MspInit+0x278>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002bbe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002bd0:	2309      	movs	r3, #9
 8002bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4807      	ldr	r0, [pc, #28]	; (8002bf8 <HAL_TIM_Base_MspInit+0x284>)
 8002bdc:	f000 ff06 	bl	80039ec <HAL_GPIO_Init>
}
 8002be0:	bf00      	nop
 8002be2:	3750      	adds	r7, #80	; 0x50
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40000400 	.word	0x40000400
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	40020000 	.word	0x40020000
 8002bf4:	40000800 	.word	0x40000800
 8002bf8:	40020400 	.word	0x40020400
 8002bfc:	40000c00 	.word	0x40000c00
 8002c00:	40010400 	.word	0x40010400
 8002c04:	40020800 	.word	0x40020800
 8002c08:	40014400 	.word	0x40014400
 8002c0c:	40014800 	.word	0x40014800
 8002c10:	40001800 	.word	0x40001800

08002c14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08a      	sub	sp, #40	; 0x28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1c:	f107 0314 	add.w	r3, r7, #20
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	60da      	str	r2, [r3, #12]
 8002c2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM10)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a25      	ldr	r2, [pc, #148]	; (8002cc8 <HAL_TIM_MspPostInit+0xb4>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d11f      	bne.n	8002c76 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	613b      	str	r3, [r7, #16]
 8002c3a:	4b24      	ldr	r3, [pc, #144]	; (8002ccc <HAL_TIM_MspPostInit+0xb8>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	4a23      	ldr	r2, [pc, #140]	; (8002ccc <HAL_TIM_MspPostInit+0xb8>)
 8002c40:	f043 0302 	orr.w	r3, r3, #2
 8002c44:	6313      	str	r3, [r2, #48]	; 0x30
 8002c46:	4b21      	ldr	r3, [pc, #132]	; (8002ccc <HAL_TIM_MspPostInit+0xb8>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	613b      	str	r3, [r7, #16]
 8002c50:	693b      	ldr	r3, [r7, #16]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c60:	2300      	movs	r3, #0
 8002c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002c64:	2303      	movs	r3, #3
 8002c66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c68:	f107 0314 	add.w	r3, r7, #20
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4818      	ldr	r0, [pc, #96]	; (8002cd0 <HAL_TIM_MspPostInit+0xbc>)
 8002c70:	f000 febc 	bl	80039ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8002c74:	e023      	b.n	8002cbe <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM11)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a16      	ldr	r2, [pc, #88]	; (8002cd4 <HAL_TIM_MspPostInit+0xc0>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d11e      	bne.n	8002cbe <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <HAL_TIM_MspPostInit+0xb8>)
 8002c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c88:	4a10      	ldr	r2, [pc, #64]	; (8002ccc <HAL_TIM_MspPostInit+0xb8>)
 8002c8a:	f043 0302 	orr.w	r3, r3, #2
 8002c8e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c90:	4b0e      	ldr	r3, [pc, #56]	; (8002ccc <HAL_TIM_MspPostInit+0xb8>)
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002caa:	2300      	movs	r3, #0
 8002cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb2:	f107 0314 	add.w	r3, r7, #20
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4805      	ldr	r0, [pc, #20]	; (8002cd0 <HAL_TIM_MspPostInit+0xbc>)
 8002cba:	f000 fe97 	bl	80039ec <HAL_GPIO_Init>
}
 8002cbe:	bf00      	nop
 8002cc0:	3728      	adds	r7, #40	; 0x28
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40014400 	.word	0x40014400
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	40020400 	.word	0x40020400
 8002cd4:	40014800 	.word	0x40014800

08002cd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08a      	sub	sp, #40	; 0x28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce0:	f107 0314 	add.w	r3, r7, #20
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	605a      	str	r2, [r3, #4]
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	60da      	str	r2, [r3, #12]
 8002cee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a19      	ldr	r2, [pc, #100]	; (8002d5c <HAL_UART_MspInit+0x84>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d12b      	bne.n	8002d52 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	4b18      	ldr	r3, [pc, #96]	; (8002d60 <HAL_UART_MspInit+0x88>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	4a17      	ldr	r2, [pc, #92]	; (8002d60 <HAL_UART_MspInit+0x88>)
 8002d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d08:	6413      	str	r3, [r2, #64]	; 0x40
 8002d0a:	4b15      	ldr	r3, [pc, #84]	; (8002d60 <HAL_UART_MspInit+0x88>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	613b      	str	r3, [r7, #16]
 8002d14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <HAL_UART_MspInit+0x88>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	4a10      	ldr	r2, [pc, #64]	; (8002d60 <HAL_UART_MspInit+0x88>)
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	6313      	str	r3, [r2, #48]	; 0x30
 8002d26:	4b0e      	ldr	r3, [pc, #56]	; (8002d60 <HAL_UART_MspInit+0x88>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d32:	230c      	movs	r3, #12
 8002d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d36:	2302      	movs	r3, #2
 8002d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d42:	2307      	movs	r3, #7
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d46:	f107 0314 	add.w	r3, r7, #20
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4805      	ldr	r0, [pc, #20]	; (8002d64 <HAL_UART_MspInit+0x8c>)
 8002d4e:	f000 fe4d 	bl	80039ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d52:	bf00      	nop
 8002d54:	3728      	adds	r7, #40	; 0x28
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40004400 	.word	0x40004400
 8002d60:	40023800 	.word	0x40023800
 8002d64:	40020000 	.word	0x40020000

08002d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d6c:	e7fe      	b.n	8002d6c <NMI_Handler+0x4>

08002d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d72:	e7fe      	b.n	8002d72 <HardFault_Handler+0x4>

08002d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d78:	e7fe      	b.n	8002d78 <MemManage_Handler+0x4>

08002d7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d7e:	e7fe      	b.n	8002d7e <BusFault_Handler+0x4>

08002d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d84:	e7fe      	b.n	8002d84 <UsageFault_Handler+0x4>

08002d86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d86:	b480      	push	{r7}
 8002d88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d98:	bf00      	nop
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002da2:	b480      	push	{r7}
 8002da4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002da6:	bf00      	nop
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002db4:	f000 f96a 	bl	800308c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002db8:	bf00      	nop
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002dc0:	4802      	ldr	r0, [pc, #8]	; (8002dcc <TIM2_IRQHandler+0x10>)
 8002dc2:	f003 f8fd 	bl	8005fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002dc6:	bf00      	nop
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	20000334 	.word	0x20000334

08002dd0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002dd4:	4802      	ldr	r0, [pc, #8]	; (8002de0 <TIM3_IRQHandler+0x10>)
 8002dd6:	f003 f8f3 	bl	8005fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002dda:	bf00      	nop
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	2000037c 	.word	0x2000037c

08002de4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  return 1;
 8002de8:	2301      	movs	r3, #1
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <_kill>:

int _kill(int pid, int sig)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002dfe:	f005 fb1f 	bl	8008440 <__errno>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2216      	movs	r2, #22
 8002e06:	601a      	str	r2, [r3, #0]
  return -1;
 8002e08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <_exit>:

void _exit (int status)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff ffe7 	bl	8002df4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e26:	e7fe      	b.n	8002e26 <_exit+0x12>

08002e28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	e00a      	b.n	8002e50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e3a:	f3af 8000 	nop.w
 8002e3e:	4601      	mov	r1, r0
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	1c5a      	adds	r2, r3, #1
 8002e44:	60ba      	str	r2, [r7, #8]
 8002e46:	b2ca      	uxtb	r2, r1
 8002e48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	dbf0      	blt.n	8002e3a <_read+0x12>
  }

  return len;
 8002e58:	687b      	ldr	r3, [r7, #4]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3718      	adds	r7, #24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b086      	sub	sp, #24
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e6e:	2300      	movs	r3, #0
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	e009      	b.n	8002e88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	1c5a      	adds	r2, r3, #1
 8002e78:	60ba      	str	r2, [r7, #8]
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff fb9b 	bl	80025b8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	3301      	adds	r3, #1
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	dbf1      	blt.n	8002e74 <_write+0x12>
  }
  return len;
 8002e90:	687b      	ldr	r3, [r7, #4]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3718      	adds	r7, #24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <_close>:

int _close(int file)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ea2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
 8002eba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ec2:	605a      	str	r2, [r3, #4]
  return 0;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <_isatty>:

int _isatty(int file)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002eda:	2301      	movs	r3, #1
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
	...

08002f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f0c:	4a14      	ldr	r2, [pc, #80]	; (8002f60 <_sbrk+0x5c>)
 8002f0e:	4b15      	ldr	r3, [pc, #84]	; (8002f64 <_sbrk+0x60>)
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f18:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <_sbrk+0x64>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d102      	bne.n	8002f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f20:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <_sbrk+0x64>)
 8002f22:	4a12      	ldr	r2, [pc, #72]	; (8002f6c <_sbrk+0x68>)
 8002f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f26:	4b10      	ldr	r3, [pc, #64]	; (8002f68 <_sbrk+0x64>)
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d207      	bcs.n	8002f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f34:	f005 fa84 	bl	8008440 <__errno>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	220c      	movs	r2, #12
 8002f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f42:	e009      	b.n	8002f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f44:	4b08      	ldr	r3, [pc, #32]	; (8002f68 <_sbrk+0x64>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f4a:	4b07      	ldr	r3, [pc, #28]	; (8002f68 <_sbrk+0x64>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4413      	add	r3, r2
 8002f52:	4a05      	ldr	r2, [pc, #20]	; (8002f68 <_sbrk+0x64>)
 8002f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f56:	68fb      	ldr	r3, [r7, #12]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	20020000 	.word	0x20020000
 8002f64:	00000400 	.word	0x00000400
 8002f68:	200005ec 	.word	0x200005ec
 8002f6c:	20000740 	.word	0x20000740

08002f70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f74:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <SystemInit+0x20>)
 8002f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7a:	4a05      	ldr	r2, [pc, #20]	; (8002f90 <SystemInit+0x20>)
 8002f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f84:	bf00      	nop
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	e000ed00 	.word	0xe000ed00

08002f94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f98:	480d      	ldr	r0, [pc, #52]	; (8002fd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f9a:	490e      	ldr	r1, [pc, #56]	; (8002fd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f9c:	4a0e      	ldr	r2, [pc, #56]	; (8002fd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fa0:	e002      	b.n	8002fa8 <LoopCopyDataInit>

08002fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fa6:	3304      	adds	r3, #4

08002fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fac:	d3f9      	bcc.n	8002fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fae:	4a0b      	ldr	r2, [pc, #44]	; (8002fdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002fb0:	4c0b      	ldr	r4, [pc, #44]	; (8002fe0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fb4:	e001      	b.n	8002fba <LoopFillZerobss>

08002fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fb8:	3204      	adds	r2, #4

08002fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fbc:	d3fb      	bcc.n	8002fb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002fbe:	f7ff ffd7 	bl	8002f70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fc2:	f005 fa43 	bl	800844c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fc6:	f7fe facd 	bl	8001564 <main>
  bx  lr    
 8002fca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002fcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fd4:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8002fd8:	0800a704 	.word	0x0800a704
  ldr r2, =_sbss
 8002fdc:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8002fe0:	20000740 	.word	0x20000740

08002fe4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fe4:	e7fe      	b.n	8002fe4 <ADC_IRQHandler>
	...

08002fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fec:	4b0e      	ldr	r3, [pc, #56]	; (8003028 <HAL_Init+0x40>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a0d      	ldr	r2, [pc, #52]	; (8003028 <HAL_Init+0x40>)
 8002ff2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ff6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <HAL_Init+0x40>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a0a      	ldr	r2, [pc, #40]	; (8003028 <HAL_Init+0x40>)
 8002ffe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003002:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003004:	4b08      	ldr	r3, [pc, #32]	; (8003028 <HAL_Init+0x40>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a07      	ldr	r2, [pc, #28]	; (8003028 <HAL_Init+0x40>)
 800300a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800300e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003010:	2003      	movs	r0, #3
 8003012:	f000 fbc1 	bl	8003798 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003016:	2000      	movs	r0, #0
 8003018:	f000 f808 	bl	800302c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800301c:	f7ff fae4 	bl	80025e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40023c00 	.word	0x40023c00

0800302c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003034:	4b12      	ldr	r3, [pc, #72]	; (8003080 <HAL_InitTick+0x54>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	4b12      	ldr	r3, [pc, #72]	; (8003084 <HAL_InitTick+0x58>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	4619      	mov	r1, r3
 800303e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003042:	fbb3 f3f1 	udiv	r3, r3, r1
 8003046:	fbb2 f3f3 	udiv	r3, r2, r3
 800304a:	4618      	mov	r0, r3
 800304c:	f000 fbd9 	bl	8003802 <HAL_SYSTICK_Config>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e00e      	b.n	8003078 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b0f      	cmp	r3, #15
 800305e:	d80a      	bhi.n	8003076 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003060:	2200      	movs	r2, #0
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003068:	f000 fba1 	bl	80037ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800306c:	4a06      	ldr	r2, [pc, #24]	; (8003088 <HAL_InitTick+0x5c>)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	e000      	b.n	8003078 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
}
 8003078:	4618      	mov	r0, r3
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	2000002c 	.word	0x2000002c
 8003084:	20000034 	.word	0x20000034
 8003088:	20000030 	.word	0x20000030

0800308c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003090:	4b06      	ldr	r3, [pc, #24]	; (80030ac <HAL_IncTick+0x20>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	461a      	mov	r2, r3
 8003096:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <HAL_IncTick+0x24>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4413      	add	r3, r2
 800309c:	4a04      	ldr	r2, [pc, #16]	; (80030b0 <HAL_IncTick+0x24>)
 800309e:	6013      	str	r3, [r2, #0]
}
 80030a0:	bf00      	nop
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	20000034 	.word	0x20000034
 80030b0:	200005f0 	.word	0x200005f0

080030b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  return uwTick;
 80030b8:	4b03      	ldr	r3, [pc, #12]	; (80030c8 <HAL_GetTick+0x14>)
 80030ba:	681b      	ldr	r3, [r3, #0]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	200005f0 	.word	0x200005f0

080030cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030d4:	f7ff ffee 	bl	80030b4 <HAL_GetTick>
 80030d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030e4:	d005      	beq.n	80030f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030e6:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <HAL_Delay+0x44>)
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	461a      	mov	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4413      	add	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030f2:	bf00      	nop
 80030f4:	f7ff ffde 	bl	80030b4 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	429a      	cmp	r2, r3
 8003102:	d8f7      	bhi.n	80030f4 <HAL_Delay+0x28>
  {
  }
}
 8003104:	bf00      	nop
 8003106:	bf00      	nop
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	20000034 	.word	0x20000034

08003114 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800311c:	2300      	movs	r3, #0
 800311e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e033      	b.n	8003192 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	2b00      	cmp	r3, #0
 8003130:	d109      	bne.n	8003146 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7ff fa80 	bl	8002638 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f003 0310 	and.w	r3, r3, #16
 800314e:	2b00      	cmp	r3, #0
 8003150:	d118      	bne.n	8003184 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800315a:	f023 0302 	bic.w	r3, r3, #2
 800315e:	f043 0202 	orr.w	r2, r3, #2
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f94a 	bl	8003400 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	f023 0303 	bic.w	r3, r3, #3
 800317a:	f043 0201 	orr.w	r2, r3, #1
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	641a      	str	r2, [r3, #64]	; 0x40
 8003182:	e001      	b.n	8003188 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003190:	7bfb      	ldrb	r3, [r7, #15]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
	...

0800319c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_ADC_ConfigChannel+0x1c>
 80031b4:	2302      	movs	r3, #2
 80031b6:	e113      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x244>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b09      	cmp	r3, #9
 80031c6:	d925      	bls.n	8003214 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68d9      	ldr	r1, [r3, #12]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	461a      	mov	r2, r3
 80031d6:	4613      	mov	r3, r2
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	4413      	add	r3, r2
 80031dc:	3b1e      	subs	r3, #30
 80031de:	2207      	movs	r2, #7
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43da      	mvns	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	400a      	ands	r2, r1
 80031ec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68d9      	ldr	r1, [r3, #12]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	4618      	mov	r0, r3
 8003200:	4603      	mov	r3, r0
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	4403      	add	r3, r0
 8003206:	3b1e      	subs	r3, #30
 8003208:	409a      	lsls	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	60da      	str	r2, [r3, #12]
 8003212:	e022      	b.n	800325a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6919      	ldr	r1, [r3, #16]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	b29b      	uxth	r3, r3
 8003220:	461a      	mov	r2, r3
 8003222:	4613      	mov	r3, r2
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	4413      	add	r3, r2
 8003228:	2207      	movs	r2, #7
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	43da      	mvns	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	400a      	ands	r2, r1
 8003236:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6919      	ldr	r1, [r3, #16]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	b29b      	uxth	r3, r3
 8003248:	4618      	mov	r0, r3
 800324a:	4603      	mov	r3, r0
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	4403      	add	r3, r0
 8003250:	409a      	lsls	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b06      	cmp	r3, #6
 8003260:	d824      	bhi.n	80032ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	3b05      	subs	r3, #5
 8003274:	221f      	movs	r2, #31
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	43da      	mvns	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	400a      	ands	r2, r1
 8003282:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	b29b      	uxth	r3, r3
 8003290:	4618      	mov	r0, r3
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	3b05      	subs	r3, #5
 800329e:	fa00 f203 	lsl.w	r2, r0, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	635a      	str	r2, [r3, #52]	; 0x34
 80032aa:	e04c      	b.n	8003346 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b0c      	cmp	r3, #12
 80032b2:	d824      	bhi.n	80032fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	3b23      	subs	r3, #35	; 0x23
 80032c6:	221f      	movs	r2, #31
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	43da      	mvns	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	400a      	ands	r2, r1
 80032d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	4618      	mov	r0, r3
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	3b23      	subs	r3, #35	; 0x23
 80032f0:	fa00 f203 	lsl.w	r2, r0, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	631a      	str	r2, [r3, #48]	; 0x30
 80032fc:	e023      	b.n	8003346 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	3b41      	subs	r3, #65	; 0x41
 8003310:	221f      	movs	r2, #31
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43da      	mvns	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	400a      	ands	r2, r1
 800331e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	b29b      	uxth	r3, r3
 800332c:	4618      	mov	r0, r3
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	3b41      	subs	r3, #65	; 0x41
 800333a:	fa00 f203 	lsl.w	r2, r0, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003346:	4b29      	ldr	r3, [pc, #164]	; (80033ec <HAL_ADC_ConfigChannel+0x250>)
 8003348:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a28      	ldr	r2, [pc, #160]	; (80033f0 <HAL_ADC_ConfigChannel+0x254>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d10f      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x1d8>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2b12      	cmp	r3, #18
 800335a:	d10b      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a1d      	ldr	r2, [pc, #116]	; (80033f0 <HAL_ADC_ConfigChannel+0x254>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d12b      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x23a>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a1c      	ldr	r2, [pc, #112]	; (80033f4 <HAL_ADC_ConfigChannel+0x258>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d003      	beq.n	8003390 <HAL_ADC_ConfigChannel+0x1f4>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2b11      	cmp	r3, #17
 800338e:	d122      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a11      	ldr	r2, [pc, #68]	; (80033f4 <HAL_ADC_ConfigChannel+0x258>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d111      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033b2:	4b11      	ldr	r3, [pc, #68]	; (80033f8 <HAL_ADC_ConfigChannel+0x25c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a11      	ldr	r2, [pc, #68]	; (80033fc <HAL_ADC_ConfigChannel+0x260>)
 80033b8:	fba2 2303 	umull	r2, r3, r2, r3
 80033bc:	0c9a      	lsrs	r2, r3, #18
 80033be:	4613      	mov	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80033c8:	e002      	b.n	80033d0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	3b01      	subs	r3, #1
 80033ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f9      	bne.n	80033ca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	40012300 	.word	0x40012300
 80033f0:	40012000 	.word	0x40012000
 80033f4:	10000012 	.word	0x10000012
 80033f8:	2000002c 	.word	0x2000002c
 80033fc:	431bde83 	.word	0x431bde83

08003400 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003408:	4b79      	ldr	r3, [pc, #484]	; (80035f0 <ADC_Init+0x1f0>)
 800340a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	431a      	orrs	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003434:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6859      	ldr	r1, [r3, #4]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	021a      	lsls	r2, r3, #8
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003458:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6859      	ldr	r1, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800347a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6899      	ldr	r1, [r3, #8]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68da      	ldr	r2, [r3, #12]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003492:	4a58      	ldr	r2, [pc, #352]	; (80035f4 <ADC_Init+0x1f4>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d022      	beq.n	80034de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689a      	ldr	r2, [r3, #8]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6899      	ldr	r1, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6899      	ldr	r1, [r3, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	609a      	str	r2, [r3, #8]
 80034dc:	e00f      	b.n	80034fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0202 	bic.w	r2, r2, #2
 800350c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6899      	ldr	r1, [r3, #8]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	7e1b      	ldrb	r3, [r3, #24]
 8003518:	005a      	lsls	r2, r3, #1
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d01b      	beq.n	8003564 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800353a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800354a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6859      	ldr	r1, [r3, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	3b01      	subs	r3, #1
 8003558:	035a      	lsls	r2, r3, #13
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	605a      	str	r2, [r3, #4]
 8003562:	e007      	b.n	8003574 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003572:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003582:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	3b01      	subs	r3, #1
 8003590:	051a      	lsls	r2, r3, #20
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6899      	ldr	r1, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035b6:	025a      	lsls	r2, r3, #9
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6899      	ldr	r1, [r3, #8]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	029a      	lsls	r2, r3, #10
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	609a      	str	r2, [r3, #8]
}
 80035e4:	bf00      	nop
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	40012300 	.word	0x40012300
 80035f4:	0f000001 	.word	0x0f000001

080035f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003608:	4b0c      	ldr	r3, [pc, #48]	; (800363c <__NVIC_SetPriorityGrouping+0x44>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003614:	4013      	ands	r3, r2
 8003616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003620:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800362a:	4a04      	ldr	r2, [pc, #16]	; (800363c <__NVIC_SetPriorityGrouping+0x44>)
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	60d3      	str	r3, [r2, #12]
}
 8003630:	bf00      	nop
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	e000ed00 	.word	0xe000ed00

08003640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003644:	4b04      	ldr	r3, [pc, #16]	; (8003658 <__NVIC_GetPriorityGrouping+0x18>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	0a1b      	lsrs	r3, r3, #8
 800364a:	f003 0307 	and.w	r3, r3, #7
}
 800364e:	4618      	mov	r0, r3
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	e000ed00 	.word	0xe000ed00

0800365c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	4603      	mov	r3, r0
 8003664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366a:	2b00      	cmp	r3, #0
 800366c:	db0b      	blt.n	8003686 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800366e:	79fb      	ldrb	r3, [r7, #7]
 8003670:	f003 021f 	and.w	r2, r3, #31
 8003674:	4907      	ldr	r1, [pc, #28]	; (8003694 <__NVIC_EnableIRQ+0x38>)
 8003676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367a:	095b      	lsrs	r3, r3, #5
 800367c:	2001      	movs	r0, #1
 800367e:	fa00 f202 	lsl.w	r2, r0, r2
 8003682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	e000e100 	.word	0xe000e100

08003698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	4603      	mov	r3, r0
 80036a0:	6039      	str	r1, [r7, #0]
 80036a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	db0a      	blt.n	80036c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	490c      	ldr	r1, [pc, #48]	; (80036e4 <__NVIC_SetPriority+0x4c>)
 80036b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b6:	0112      	lsls	r2, r2, #4
 80036b8:	b2d2      	uxtb	r2, r2
 80036ba:	440b      	add	r3, r1
 80036bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036c0:	e00a      	b.n	80036d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	b2da      	uxtb	r2, r3
 80036c6:	4908      	ldr	r1, [pc, #32]	; (80036e8 <__NVIC_SetPriority+0x50>)
 80036c8:	79fb      	ldrb	r3, [r7, #7]
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	3b04      	subs	r3, #4
 80036d0:	0112      	lsls	r2, r2, #4
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	440b      	add	r3, r1
 80036d6:	761a      	strb	r2, [r3, #24]
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	e000e100 	.word	0xe000e100
 80036e8:	e000ed00 	.word	0xe000ed00

080036ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b089      	sub	sp, #36	; 0x24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	f1c3 0307 	rsb	r3, r3, #7
 8003706:	2b04      	cmp	r3, #4
 8003708:	bf28      	it	cs
 800370a:	2304      	movcs	r3, #4
 800370c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	3304      	adds	r3, #4
 8003712:	2b06      	cmp	r3, #6
 8003714:	d902      	bls.n	800371c <NVIC_EncodePriority+0x30>
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	3b03      	subs	r3, #3
 800371a:	e000      	b.n	800371e <NVIC_EncodePriority+0x32>
 800371c:	2300      	movs	r3, #0
 800371e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003720:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	fa02 f303 	lsl.w	r3, r2, r3
 800372a:	43da      	mvns	r2, r3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	401a      	ands	r2, r3
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003734:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	fa01 f303 	lsl.w	r3, r1, r3
 800373e:	43d9      	mvns	r1, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003744:	4313      	orrs	r3, r2
         );
}
 8003746:	4618      	mov	r0, r3
 8003748:	3724      	adds	r7, #36	; 0x24
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
	...

08003754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3b01      	subs	r3, #1
 8003760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003764:	d301      	bcc.n	800376a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003766:	2301      	movs	r3, #1
 8003768:	e00f      	b.n	800378a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800376a:	4a0a      	ldr	r2, [pc, #40]	; (8003794 <SysTick_Config+0x40>)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3b01      	subs	r3, #1
 8003770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003772:	210f      	movs	r1, #15
 8003774:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003778:	f7ff ff8e 	bl	8003698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800377c:	4b05      	ldr	r3, [pc, #20]	; (8003794 <SysTick_Config+0x40>)
 800377e:	2200      	movs	r2, #0
 8003780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003782:	4b04      	ldr	r3, [pc, #16]	; (8003794 <SysTick_Config+0x40>)
 8003784:	2207      	movs	r2, #7
 8003786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	e000e010 	.word	0xe000e010

08003798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff ff29 	bl	80035f8 <__NVIC_SetPriorityGrouping>
}
 80037a6:	bf00      	nop
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b086      	sub	sp, #24
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	4603      	mov	r3, r0
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	607a      	str	r2, [r7, #4]
 80037ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037bc:	2300      	movs	r3, #0
 80037be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037c0:	f7ff ff3e 	bl	8003640 <__NVIC_GetPriorityGrouping>
 80037c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	6978      	ldr	r0, [r7, #20]
 80037cc:	f7ff ff8e 	bl	80036ec <NVIC_EncodePriority>
 80037d0:	4602      	mov	r2, r0
 80037d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037d6:	4611      	mov	r1, r2
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff ff5d 	bl	8003698 <__NVIC_SetPriority>
}
 80037de:	bf00      	nop
 80037e0:	3718      	adds	r7, #24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b082      	sub	sp, #8
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	4603      	mov	r3, r0
 80037ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff ff31 	bl	800365c <__NVIC_EnableIRQ>
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b082      	sub	sp, #8
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff ffa2 	bl	8003754 <SysTick_Config>
 8003810:	4603      	mov	r3, r0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b082      	sub	sp, #8
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e014      	b.n	8003856 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	791b      	ldrb	r3, [r3, #4]
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d105      	bne.n	8003842 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f7fe ff3f 	bl	80026c0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2202      	movs	r2, #2
 8003846:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	795b      	ldrb	r3, [r3, #5]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <HAL_DAC_Start+0x16>
 8003870:	2302      	movs	r3, #2
 8003872:	e040      	b.n	80038f6 <HAL_DAC_Start+0x98>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2202      	movs	r2, #2
 800387e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6819      	ldr	r1, [r3, #0]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	f003 0310 	and.w	r3, r3, #16
 800388c:	2201      	movs	r2, #1
 800388e:	409a      	lsls	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10f      	bne.n	80038be <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80038a8:	2b3c      	cmp	r3, #60	; 0x3c
 80038aa:	d11d      	bne.n	80038e8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0201 	orr.w	r2, r2, #1
 80038ba:	605a      	str	r2, [r3, #4]
 80038bc:	e014      	b.n	80038e8 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	f003 0310 	and.w	r3, r3, #16
 80038ce:	213c      	movs	r1, #60	; 0x3c
 80038d0:	fa01 f303 	lsl.w	r3, r1, r3
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d107      	bne.n	80038e8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 0202 	orr.w	r2, r2, #2
 80038e6:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003902:	b480      	push	{r7}
 8003904:	b087      	sub	sp, #28
 8003906:	af00      	add	r7, sp, #0
 8003908:	60f8      	str	r0, [r7, #12]
 800390a:	60b9      	str	r1, [r7, #8]
 800390c:	607a      	str	r2, [r7, #4]
 800390e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003910:	2300      	movs	r3, #0
 8003912:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d105      	bne.n	800392c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4413      	add	r3, r2
 8003926:	3308      	adds	r3, #8
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	e004      	b.n	8003936 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4413      	add	r3, r2
 8003932:	3314      	adds	r3, #20
 8003934:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	461a      	mov	r2, r3
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	371c      	adds	r7, #28
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	795b      	ldrb	r3, [r3, #5]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d101      	bne.n	8003964 <HAL_DAC_ConfigChannel+0x18>
 8003960:	2302      	movs	r3, #2
 8003962:	e03c      	b.n	80039de <HAL_DAC_ConfigChannel+0x92>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2201      	movs	r2, #1
 8003968:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2202      	movs	r2, #2
 800396e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f003 0310 	and.w	r3, r3, #16
 800397e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003982:	fa02 f303 	lsl.w	r3, r2, r3
 8003986:	43db      	mvns	r3, r3
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	4013      	ands	r3, r2
 800398c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f003 0310 	and.w	r3, r3, #16
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6819      	ldr	r1, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f003 0310 	and.w	r3, r3, #16
 80039c0:	22c0      	movs	r2, #192	; 0xc0
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	43da      	mvns	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	400a      	ands	r2, r1
 80039ce:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2201      	movs	r2, #1
 80039d4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	371c      	adds	r7, #28
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
	...

080039ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b089      	sub	sp, #36	; 0x24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a02:	2300      	movs	r3, #0
 8003a04:	61fb      	str	r3, [r7, #28]
 8003a06:	e165      	b.n	8003cd4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a08:	2201      	movs	r2, #1
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	f040 8154 	bne.w	8003cce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f003 0303 	and.w	r3, r3, #3
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d005      	beq.n	8003a3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d130      	bne.n	8003aa0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	2203      	movs	r2, #3
 8003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4e:	43db      	mvns	r3, r3
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	4013      	ands	r3, r2
 8003a54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a74:	2201      	movs	r2, #1
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	4013      	ands	r3, r2
 8003a82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	091b      	lsrs	r3, r3, #4
 8003a8a:	f003 0201 	and.w	r2, r3, #1
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f003 0303 	and.w	r3, r3, #3
 8003aa8:	2b03      	cmp	r3, #3
 8003aaa:	d017      	beq.n	8003adc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	2203      	movs	r2, #3
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	43db      	mvns	r3, r3
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f003 0303 	and.w	r3, r3, #3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d123      	bne.n	8003b30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	08da      	lsrs	r2, r3, #3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3208      	adds	r2, #8
 8003af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	220f      	movs	r2, #15
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	43db      	mvns	r3, r3
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	08da      	lsrs	r2, r3, #3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	3208      	adds	r2, #8
 8003b2a:	69b9      	ldr	r1, [r7, #24]
 8003b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	2203      	movs	r2, #3
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	43db      	mvns	r3, r3
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	4013      	ands	r3, r2
 8003b46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f003 0203 	and.w	r2, r3, #3
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 80ae 	beq.w	8003cce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b72:	2300      	movs	r3, #0
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	4b5d      	ldr	r3, [pc, #372]	; (8003cec <HAL_GPIO_Init+0x300>)
 8003b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7a:	4a5c      	ldr	r2, [pc, #368]	; (8003cec <HAL_GPIO_Init+0x300>)
 8003b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b80:	6453      	str	r3, [r2, #68]	; 0x44
 8003b82:	4b5a      	ldr	r3, [pc, #360]	; (8003cec <HAL_GPIO_Init+0x300>)
 8003b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b8a:	60fb      	str	r3, [r7, #12]
 8003b8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b8e:	4a58      	ldr	r2, [pc, #352]	; (8003cf0 <HAL_GPIO_Init+0x304>)
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	089b      	lsrs	r3, r3, #2
 8003b94:	3302      	adds	r3, #2
 8003b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	220f      	movs	r2, #15
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	43db      	mvns	r3, r3
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a4f      	ldr	r2, [pc, #316]	; (8003cf4 <HAL_GPIO_Init+0x308>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d025      	beq.n	8003c06 <HAL_GPIO_Init+0x21a>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a4e      	ldr	r2, [pc, #312]	; (8003cf8 <HAL_GPIO_Init+0x30c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d01f      	beq.n	8003c02 <HAL_GPIO_Init+0x216>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a4d      	ldr	r2, [pc, #308]	; (8003cfc <HAL_GPIO_Init+0x310>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d019      	beq.n	8003bfe <HAL_GPIO_Init+0x212>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a4c      	ldr	r2, [pc, #304]	; (8003d00 <HAL_GPIO_Init+0x314>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d013      	beq.n	8003bfa <HAL_GPIO_Init+0x20e>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a4b      	ldr	r2, [pc, #300]	; (8003d04 <HAL_GPIO_Init+0x318>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d00d      	beq.n	8003bf6 <HAL_GPIO_Init+0x20a>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a4a      	ldr	r2, [pc, #296]	; (8003d08 <HAL_GPIO_Init+0x31c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d007      	beq.n	8003bf2 <HAL_GPIO_Init+0x206>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a49      	ldr	r2, [pc, #292]	; (8003d0c <HAL_GPIO_Init+0x320>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d101      	bne.n	8003bee <HAL_GPIO_Init+0x202>
 8003bea:	2306      	movs	r3, #6
 8003bec:	e00c      	b.n	8003c08 <HAL_GPIO_Init+0x21c>
 8003bee:	2307      	movs	r3, #7
 8003bf0:	e00a      	b.n	8003c08 <HAL_GPIO_Init+0x21c>
 8003bf2:	2305      	movs	r3, #5
 8003bf4:	e008      	b.n	8003c08 <HAL_GPIO_Init+0x21c>
 8003bf6:	2304      	movs	r3, #4
 8003bf8:	e006      	b.n	8003c08 <HAL_GPIO_Init+0x21c>
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e004      	b.n	8003c08 <HAL_GPIO_Init+0x21c>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	e002      	b.n	8003c08 <HAL_GPIO_Init+0x21c>
 8003c02:	2301      	movs	r3, #1
 8003c04:	e000      	b.n	8003c08 <HAL_GPIO_Init+0x21c>
 8003c06:	2300      	movs	r3, #0
 8003c08:	69fa      	ldr	r2, [r7, #28]
 8003c0a:	f002 0203 	and.w	r2, r2, #3
 8003c0e:	0092      	lsls	r2, r2, #2
 8003c10:	4093      	lsls	r3, r2
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c18:	4935      	ldr	r1, [pc, #212]	; (8003cf0 <HAL_GPIO_Init+0x304>)
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	089b      	lsrs	r3, r3, #2
 8003c1e:	3302      	adds	r3, #2
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c26:	4b3a      	ldr	r3, [pc, #232]	; (8003d10 <HAL_GPIO_Init+0x324>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4013      	ands	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c4a:	4a31      	ldr	r2, [pc, #196]	; (8003d10 <HAL_GPIO_Init+0x324>)
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c50:	4b2f      	ldr	r3, [pc, #188]	; (8003d10 <HAL_GPIO_Init+0x324>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c74:	4a26      	ldr	r2, [pc, #152]	; (8003d10 <HAL_GPIO_Init+0x324>)
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c7a:	4b25      	ldr	r3, [pc, #148]	; (8003d10 <HAL_GPIO_Init+0x324>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	43db      	mvns	r3, r3
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4013      	ands	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c9e:	4a1c      	ldr	r2, [pc, #112]	; (8003d10 <HAL_GPIO_Init+0x324>)
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ca4:	4b1a      	ldr	r3, [pc, #104]	; (8003d10 <HAL_GPIO_Init+0x324>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	43db      	mvns	r3, r3
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d003      	beq.n	8003cc8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cc8:	4a11      	ldr	r2, [pc, #68]	; (8003d10 <HAL_GPIO_Init+0x324>)
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	61fb      	str	r3, [r7, #28]
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	2b0f      	cmp	r3, #15
 8003cd8:	f67f ae96 	bls.w	8003a08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cdc:	bf00      	nop
 8003cde:	bf00      	nop
 8003ce0:	3724      	adds	r7, #36	; 0x24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	40013800 	.word	0x40013800
 8003cf4:	40020000 	.word	0x40020000
 8003cf8:	40020400 	.word	0x40020400
 8003cfc:	40020800 	.word	0x40020800
 8003d00:	40020c00 	.word	0x40020c00
 8003d04:	40021000 	.word	0x40021000
 8003d08:	40021400 	.word	0x40021400
 8003d0c:	40021800 	.word	0x40021800
 8003d10:	40013c00 	.word	0x40013c00

08003d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	807b      	strh	r3, [r7, #2]
 8003d20:	4613      	mov	r3, r2
 8003d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d24:	787b      	ldrb	r3, [r7, #1]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d2a:	887a      	ldrh	r2, [r7, #2]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d30:	e003      	b.n	8003d3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d32:	887b      	ldrh	r3, [r7, #2]
 8003d34:	041a      	lsls	r2, r3, #16
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	619a      	str	r2, [r3, #24]
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
	...

08003d48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e12b      	b.n	8003fb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fe fcea 	bl	8002748 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2224      	movs	r2, #36	; 0x24
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0201 	bic.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003daa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003dac:	f000 fa52 	bl	8004254 <HAL_RCC_GetPCLK1Freq>
 8003db0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	4a81      	ldr	r2, [pc, #516]	; (8003fbc <HAL_I2C_Init+0x274>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d807      	bhi.n	8003dcc <HAL_I2C_Init+0x84>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4a80      	ldr	r2, [pc, #512]	; (8003fc0 <HAL_I2C_Init+0x278>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	bf94      	ite	ls
 8003dc4:	2301      	movls	r3, #1
 8003dc6:	2300      	movhi	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	e006      	b.n	8003dda <HAL_I2C_Init+0x92>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4a7d      	ldr	r2, [pc, #500]	; (8003fc4 <HAL_I2C_Init+0x27c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	bf94      	ite	ls
 8003dd4:	2301      	movls	r3, #1
 8003dd6:	2300      	movhi	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e0e7      	b.n	8003fb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	4a78      	ldr	r2, [pc, #480]	; (8003fc8 <HAL_I2C_Init+0x280>)
 8003de6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dea:	0c9b      	lsrs	r3, r3, #18
 8003dec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	4a6a      	ldr	r2, [pc, #424]	; (8003fbc <HAL_I2C_Init+0x274>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d802      	bhi.n	8003e1c <HAL_I2C_Init+0xd4>
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	e009      	b.n	8003e30 <HAL_I2C_Init+0xe8>
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e22:	fb02 f303 	mul.w	r3, r2, r3
 8003e26:	4a69      	ldr	r2, [pc, #420]	; (8003fcc <HAL_I2C_Init+0x284>)
 8003e28:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2c:	099b      	lsrs	r3, r3, #6
 8003e2e:	3301      	adds	r3, #1
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6812      	ldr	r2, [r2, #0]
 8003e34:	430b      	orrs	r3, r1
 8003e36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	495c      	ldr	r1, [pc, #368]	; (8003fbc <HAL_I2C_Init+0x274>)
 8003e4c:	428b      	cmp	r3, r1
 8003e4e:	d819      	bhi.n	8003e84 <HAL_I2C_Init+0x13c>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	1e59      	subs	r1, r3, #1
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e5e:	1c59      	adds	r1, r3, #1
 8003e60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e64:	400b      	ands	r3, r1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <HAL_I2C_Init+0x138>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	1e59      	subs	r1, r3, #1
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e78:	3301      	adds	r3, #1
 8003e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e7e:	e051      	b.n	8003f24 <HAL_I2C_Init+0x1dc>
 8003e80:	2304      	movs	r3, #4
 8003e82:	e04f      	b.n	8003f24 <HAL_I2C_Init+0x1dc>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d111      	bne.n	8003eb0 <HAL_I2C_Init+0x168>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	1e58      	subs	r0, r3, #1
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6859      	ldr	r1, [r3, #4]
 8003e94:	460b      	mov	r3, r1
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	440b      	add	r3, r1
 8003e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	bf0c      	ite	eq
 8003ea8:	2301      	moveq	r3, #1
 8003eaa:	2300      	movne	r3, #0
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	e012      	b.n	8003ed6 <HAL_I2C_Init+0x18e>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	1e58      	subs	r0, r3, #1
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6859      	ldr	r1, [r3, #4]
 8003eb8:	460b      	mov	r3, r1
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	0099      	lsls	r1, r3, #2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	bf0c      	ite	eq
 8003ed0:	2301      	moveq	r3, #1
 8003ed2:	2300      	movne	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_I2C_Init+0x196>
 8003eda:	2301      	movs	r3, #1
 8003edc:	e022      	b.n	8003f24 <HAL_I2C_Init+0x1dc>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10e      	bne.n	8003f04 <HAL_I2C_Init+0x1bc>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	1e58      	subs	r0, r3, #1
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6859      	ldr	r1, [r3, #4]
 8003eee:	460b      	mov	r3, r1
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	440b      	add	r3, r1
 8003ef4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ef8:	3301      	adds	r3, #1
 8003efa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f02:	e00f      	b.n	8003f24 <HAL_I2C_Init+0x1dc>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	1e58      	subs	r0, r3, #1
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6859      	ldr	r1, [r3, #4]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	0099      	lsls	r1, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	6809      	ldr	r1, [r1, #0]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	69da      	ldr	r2, [r3, #28]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6911      	ldr	r1, [r2, #16]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	68d2      	ldr	r2, [r2, #12]
 8003f5e:	4311      	orrs	r1, r2
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6812      	ldr	r2, [r2, #0]
 8003f64:	430b      	orrs	r3, r1
 8003f66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695a      	ldr	r2, [r3, #20]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0201 	orr.w	r2, r2, #1
 8003f92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	000186a0 	.word	0x000186a0
 8003fc0:	001e847f 	.word	0x001e847f
 8003fc4:	003d08ff 	.word	0x003d08ff
 8003fc8:	431bde83 	.word	0x431bde83
 8003fcc:	10624dd3 	.word	0x10624dd3

08003fd0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003fda:	2300      	movs	r3, #0
 8003fdc:	603b      	str	r3, [r7, #0]
 8003fde:	4b20      	ldr	r3, [pc, #128]	; (8004060 <HAL_PWREx_EnableOverDrive+0x90>)
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	4a1f      	ldr	r2, [pc, #124]	; (8004060 <HAL_PWREx_EnableOverDrive+0x90>)
 8003fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8003fea:	4b1d      	ldr	r3, [pc, #116]	; (8004060 <HAL_PWREx_EnableOverDrive+0x90>)
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff2:	603b      	str	r3, [r7, #0]
 8003ff4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003ff6:	4b1b      	ldr	r3, [pc, #108]	; (8004064 <HAL_PWREx_EnableOverDrive+0x94>)
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ffc:	f7ff f85a 	bl	80030b4 <HAL_GetTick>
 8004000:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004002:	e009      	b.n	8004018 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004004:	f7ff f856 	bl	80030b4 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004012:	d901      	bls.n	8004018 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e01f      	b.n	8004058 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004018:	4b13      	ldr	r3, [pc, #76]	; (8004068 <HAL_PWREx_EnableOverDrive+0x98>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004024:	d1ee      	bne.n	8004004 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004026:	4b11      	ldr	r3, [pc, #68]	; (800406c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004028:	2201      	movs	r2, #1
 800402a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800402c:	f7ff f842 	bl	80030b4 <HAL_GetTick>
 8004030:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004032:	e009      	b.n	8004048 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004034:	f7ff f83e 	bl	80030b4 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004042:	d901      	bls.n	8004048 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e007      	b.n	8004058 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004048:	4b07      	ldr	r3, [pc, #28]	; (8004068 <HAL_PWREx_EnableOverDrive+0x98>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004050:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004054:	d1ee      	bne.n	8004034 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	40023800 	.word	0x40023800
 8004064:	420e0040 	.word	0x420e0040
 8004068:	40007000 	.word	0x40007000
 800406c:	420e0044 	.word	0x420e0044

08004070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e0cc      	b.n	800421e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004084:	4b68      	ldr	r3, [pc, #416]	; (8004228 <HAL_RCC_ClockConfig+0x1b8>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 030f 	and.w	r3, r3, #15
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	429a      	cmp	r2, r3
 8004090:	d90c      	bls.n	80040ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004092:	4b65      	ldr	r3, [pc, #404]	; (8004228 <HAL_RCC_ClockConfig+0x1b8>)
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	b2d2      	uxtb	r2, r2
 8004098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800409a:	4b63      	ldr	r3, [pc, #396]	; (8004228 <HAL_RCC_ClockConfig+0x1b8>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d001      	beq.n	80040ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e0b8      	b.n	800421e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d020      	beq.n	80040fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d005      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040c4:	4b59      	ldr	r3, [pc, #356]	; (800422c <HAL_RCC_ClockConfig+0x1bc>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	4a58      	ldr	r2, [pc, #352]	; (800422c <HAL_RCC_ClockConfig+0x1bc>)
 80040ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d005      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040dc:	4b53      	ldr	r3, [pc, #332]	; (800422c <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	4a52      	ldr	r2, [pc, #328]	; (800422c <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040e8:	4b50      	ldr	r3, [pc, #320]	; (800422c <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	494d      	ldr	r1, [pc, #308]	; (800422c <HAL_RCC_ClockConfig+0x1bc>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d044      	beq.n	8004190 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d107      	bne.n	800411e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410e:	4b47      	ldr	r3, [pc, #284]	; (800422c <HAL_RCC_ClockConfig+0x1bc>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d119      	bne.n	800414e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e07f      	b.n	800421e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	2b02      	cmp	r3, #2
 8004124:	d003      	beq.n	800412e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800412a:	2b03      	cmp	r3, #3
 800412c:	d107      	bne.n	800413e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800412e:	4b3f      	ldr	r3, [pc, #252]	; (800422c <HAL_RCC_ClockConfig+0x1bc>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d109      	bne.n	800414e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e06f      	b.n	800421e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800413e:	4b3b      	ldr	r3, [pc, #236]	; (800422c <HAL_RCC_ClockConfig+0x1bc>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e067      	b.n	800421e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800414e:	4b37      	ldr	r3, [pc, #220]	; (800422c <HAL_RCC_ClockConfig+0x1bc>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f023 0203 	bic.w	r2, r3, #3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	4934      	ldr	r1, [pc, #208]	; (800422c <HAL_RCC_ClockConfig+0x1bc>)
 800415c:	4313      	orrs	r3, r2
 800415e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004160:	f7fe ffa8 	bl	80030b4 <HAL_GetTick>
 8004164:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004166:	e00a      	b.n	800417e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004168:	f7fe ffa4 	bl	80030b4 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	f241 3288 	movw	r2, #5000	; 0x1388
 8004176:	4293      	cmp	r3, r2
 8004178:	d901      	bls.n	800417e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e04f      	b.n	800421e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800417e:	4b2b      	ldr	r3, [pc, #172]	; (800422c <HAL_RCC_ClockConfig+0x1bc>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f003 020c 	and.w	r2, r3, #12
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	429a      	cmp	r2, r3
 800418e:	d1eb      	bne.n	8004168 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004190:	4b25      	ldr	r3, [pc, #148]	; (8004228 <HAL_RCC_ClockConfig+0x1b8>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 030f 	and.w	r3, r3, #15
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	429a      	cmp	r2, r3
 800419c:	d20c      	bcs.n	80041b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800419e:	4b22      	ldr	r3, [pc, #136]	; (8004228 <HAL_RCC_ClockConfig+0x1b8>)
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a6:	4b20      	ldr	r3, [pc, #128]	; (8004228 <HAL_RCC_ClockConfig+0x1b8>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 030f 	and.w	r3, r3, #15
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d001      	beq.n	80041b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e032      	b.n	800421e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d008      	beq.n	80041d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041c4:	4b19      	ldr	r3, [pc, #100]	; (800422c <HAL_RCC_ClockConfig+0x1bc>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	4916      	ldr	r1, [pc, #88]	; (800422c <HAL_RCC_ClockConfig+0x1bc>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0308 	and.w	r3, r3, #8
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d009      	beq.n	80041f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041e2:	4b12      	ldr	r3, [pc, #72]	; (800422c <HAL_RCC_ClockConfig+0x1bc>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	490e      	ldr	r1, [pc, #56]	; (800422c <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041f6:	f000 fb7f 	bl	80048f8 <HAL_RCC_GetSysClockFreq>
 80041fa:	4602      	mov	r2, r0
 80041fc:	4b0b      	ldr	r3, [pc, #44]	; (800422c <HAL_RCC_ClockConfig+0x1bc>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	091b      	lsrs	r3, r3, #4
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	490a      	ldr	r1, [pc, #40]	; (8004230 <HAL_RCC_ClockConfig+0x1c0>)
 8004208:	5ccb      	ldrb	r3, [r1, r3]
 800420a:	fa22 f303 	lsr.w	r3, r2, r3
 800420e:	4a09      	ldr	r2, [pc, #36]	; (8004234 <HAL_RCC_ClockConfig+0x1c4>)
 8004210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004212:	4b09      	ldr	r3, [pc, #36]	; (8004238 <HAL_RCC_ClockConfig+0x1c8>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4618      	mov	r0, r3
 8004218:	f7fe ff08 	bl	800302c <HAL_InitTick>

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	40023c00 	.word	0x40023c00
 800422c:	40023800 	.word	0x40023800
 8004230:	0800a36c 	.word	0x0800a36c
 8004234:	2000002c 	.word	0x2000002c
 8004238:	20000030 	.word	0x20000030

0800423c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004240:	4b03      	ldr	r3, [pc, #12]	; (8004250 <HAL_RCC_GetHCLKFreq+0x14>)
 8004242:	681b      	ldr	r3, [r3, #0]
}
 8004244:	4618      	mov	r0, r3
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	2000002c 	.word	0x2000002c

08004254 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004258:	f7ff fff0 	bl	800423c <HAL_RCC_GetHCLKFreq>
 800425c:	4602      	mov	r2, r0
 800425e:	4b05      	ldr	r3, [pc, #20]	; (8004274 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	0a9b      	lsrs	r3, r3, #10
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	4903      	ldr	r1, [pc, #12]	; (8004278 <HAL_RCC_GetPCLK1Freq+0x24>)
 800426a:	5ccb      	ldrb	r3, [r1, r3]
 800426c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004270:	4618      	mov	r0, r3
 8004272:	bd80      	pop	{r7, pc}
 8004274:	40023800 	.word	0x40023800
 8004278:	0800a37c 	.word	0x0800a37c

0800427c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004280:	f7ff ffdc 	bl	800423c <HAL_RCC_GetHCLKFreq>
 8004284:	4602      	mov	r2, r0
 8004286:	4b05      	ldr	r3, [pc, #20]	; (800429c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	0b5b      	lsrs	r3, r3, #13
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	4903      	ldr	r1, [pc, #12]	; (80042a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004292:	5ccb      	ldrb	r3, [r1, r3]
 8004294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004298:	4618      	mov	r0, r3
 800429a:	bd80      	pop	{r7, pc}
 800429c:	40023800 	.word	0x40023800
 80042a0:	0800a37c 	.word	0x0800a37c

080042a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b08c      	sub	sp, #48	; 0x30
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d010      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80042dc:	4b6f      	ldr	r3, [pc, #444]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042e2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ea:	496c      	ldr	r1, [pc, #432]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80042fa:	2301      	movs	r3, #1
 80042fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d010      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800430a:	4b64      	ldr	r3, [pc, #400]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800430c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004310:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004318:	4960      	ldr	r1, [pc, #384]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800431a:	4313      	orrs	r3, r2
 800431c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004328:	2301      	movs	r3, #1
 800432a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b00      	cmp	r3, #0
 8004336:	d017      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004338:	4b58      	ldr	r3, [pc, #352]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800433a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800433e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004346:	4955      	ldr	r1, [pc, #340]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004348:	4313      	orrs	r3, r2
 800434a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004356:	d101      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004358:	2301      	movs	r3, #1
 800435a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004364:	2301      	movs	r3, #1
 8004366:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0308 	and.w	r3, r3, #8
 8004370:	2b00      	cmp	r3, #0
 8004372:	d017      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004374:	4b49      	ldr	r3, [pc, #292]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004376:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800437a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004382:	4946      	ldr	r1, [pc, #280]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004384:	4313      	orrs	r3, r2
 8004386:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800438e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004392:	d101      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004394:	2301      	movs	r3, #1
 8004396:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80043a0:	2301      	movs	r3, #1
 80043a2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0320 	and.w	r3, r3, #32
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 808a 	beq.w	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043b2:	2300      	movs	r3, #0
 80043b4:	60bb      	str	r3, [r7, #8]
 80043b6:	4b39      	ldr	r3, [pc, #228]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	4a38      	ldr	r2, [pc, #224]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c0:	6413      	str	r3, [r2, #64]	; 0x40
 80043c2:	4b36      	ldr	r3, [pc, #216]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ca:	60bb      	str	r3, [r7, #8]
 80043cc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80043ce:	4b34      	ldr	r3, [pc, #208]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a33      	ldr	r2, [pc, #204]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80043d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043da:	f7fe fe6b 	bl	80030b4 <HAL_GetTick>
 80043de:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043e0:	e008      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043e2:	f7fe fe67 	bl	80030b4 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d901      	bls.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e278      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043f4:	4b2a      	ldr	r3, [pc, #168]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0f0      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004400:	4b26      	ldr	r3, [pc, #152]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004404:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004408:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800440a:	6a3b      	ldr	r3, [r7, #32]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d02f      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004418:	6a3a      	ldr	r2, [r7, #32]
 800441a:	429a      	cmp	r2, r3
 800441c:	d028      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800441e:	4b1f      	ldr	r3, [pc, #124]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004426:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004428:	4b1e      	ldr	r3, [pc, #120]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800442a:	2201      	movs	r2, #1
 800442c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800442e:	4b1d      	ldr	r3, [pc, #116]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004430:	2200      	movs	r2, #0
 8004432:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004434:	4a19      	ldr	r2, [pc, #100]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004436:	6a3b      	ldr	r3, [r7, #32]
 8004438:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800443a:	4b18      	ldr	r3, [pc, #96]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800443c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b01      	cmp	r3, #1
 8004444:	d114      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004446:	f7fe fe35 	bl	80030b4 <HAL_GetTick>
 800444a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800444c:	e00a      	b.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800444e:	f7fe fe31 	bl	80030b4 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	f241 3288 	movw	r2, #5000	; 0x1388
 800445c:	4293      	cmp	r3, r2
 800445e:	d901      	bls.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e240      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004464:	4b0d      	ldr	r3, [pc, #52]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0ee      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004474:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004478:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800447c:	d114      	bne.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800447e:	4b07      	ldr	r3, [pc, #28]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800448e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004492:	4902      	ldr	r1, [pc, #8]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004494:	4313      	orrs	r3, r2
 8004496:	608b      	str	r3, [r1, #8]
 8004498:	e00c      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800449a:	bf00      	nop
 800449c:	40023800 	.word	0x40023800
 80044a0:	40007000 	.word	0x40007000
 80044a4:	42470e40 	.word	0x42470e40
 80044a8:	4b4a      	ldr	r3, [pc, #296]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	4a49      	ldr	r2, [pc, #292]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044ae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80044b2:	6093      	str	r3, [r2, #8]
 80044b4:	4b47      	ldr	r3, [pc, #284]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044c0:	4944      	ldr	r1, [pc, #272]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0310 	and.w	r3, r3, #16
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d004      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80044d8:	4b3f      	ldr	r3, [pc, #252]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80044da:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00a      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80044e8:	4b3a      	ldr	r3, [pc, #232]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f6:	4937      	ldr	r1, [pc, #220]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00a      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800450a:	4b32      	ldr	r3, [pc, #200]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800450c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004510:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004518:	492e      	ldr	r1, [pc, #184]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800451a:	4313      	orrs	r3, r2
 800451c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004528:	2b00      	cmp	r3, #0
 800452a:	d011      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800452c:	4b29      	ldr	r3, [pc, #164]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800452e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004532:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453a:	4926      	ldr	r1, [pc, #152]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800453c:	4313      	orrs	r3, r2
 800453e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004546:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800454a:	d101      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800454c:	2301      	movs	r3, #1
 800454e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00a      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800455c:	4b1d      	ldr	r3, [pc, #116]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800455e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004562:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456a:	491a      	ldr	r1, [pc, #104]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800456c:	4313      	orrs	r3, r2
 800456e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800457a:	2b00      	cmp	r3, #0
 800457c:	d011      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800457e:	4b15      	ldr	r3, [pc, #84]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004580:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004584:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800458c:	4911      	ldr	r1, [pc, #68]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800458e:	4313      	orrs	r3, r2
 8004590:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004598:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800459c:	d101      	bne.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800459e:	2301      	movs	r3, #1
 80045a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80045a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d005      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045b0:	f040 80ff 	bne.w	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045b4:	4b09      	ldr	r3, [pc, #36]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045ba:	f7fe fd7b 	bl	80030b4 <HAL_GetTick>
 80045be:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045c0:	e00e      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045c2:	f7fe fd77 	bl	80030b4 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d907      	bls.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e188      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80045d4:	40023800 	.word	0x40023800
 80045d8:	424711e0 	.word	0x424711e0
 80045dc:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045e0:	4b7e      	ldr	r3, [pc, #504]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1ea      	bne.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d003      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d009      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004608:	2b00      	cmp	r3, #0
 800460a:	d028      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004610:	2b00      	cmp	r3, #0
 8004612:	d124      	bne.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004614:	4b71      	ldr	r3, [pc, #452]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004616:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800461a:	0c1b      	lsrs	r3, r3, #16
 800461c:	f003 0303 	and.w	r3, r3, #3
 8004620:	3301      	adds	r3, #1
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004626:	4b6d      	ldr	r3, [pc, #436]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004628:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800462c:	0e1b      	lsrs	r3, r3, #24
 800462e:	f003 030f 	and.w	r3, r3, #15
 8004632:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	019b      	lsls	r3, r3, #6
 800463e:	431a      	orrs	r2, r3
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	085b      	lsrs	r3, r3, #1
 8004644:	3b01      	subs	r3, #1
 8004646:	041b      	lsls	r3, r3, #16
 8004648:	431a      	orrs	r2, r3
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	061b      	lsls	r3, r3, #24
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	071b      	lsls	r3, r3, #28
 8004656:	4961      	ldr	r1, [pc, #388]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004658:	4313      	orrs	r3, r2
 800465a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	2b00      	cmp	r3, #0
 8004668:	d004      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004672:	d00a      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800467c:	2b00      	cmp	r3, #0
 800467e:	d035      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004684:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004688:	d130      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800468a:	4b54      	ldr	r3, [pc, #336]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800468c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004690:	0c1b      	lsrs	r3, r3, #16
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	3301      	adds	r3, #1
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800469c:	4b4f      	ldr	r3, [pc, #316]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800469e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046a2:	0f1b      	lsrs	r3, r3, #28
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	019b      	lsls	r3, r3, #6
 80046b4:	431a      	orrs	r2, r3
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	085b      	lsrs	r3, r3, #1
 80046ba:	3b01      	subs	r3, #1
 80046bc:	041b      	lsls	r3, r3, #16
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	061b      	lsls	r3, r3, #24
 80046c6:	431a      	orrs	r2, r3
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	071b      	lsls	r3, r3, #28
 80046cc:	4943      	ldr	r1, [pc, #268]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80046d4:	4b41      	ldr	r3, [pc, #260]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80046d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046da:	f023 021f 	bic.w	r2, r3, #31
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e2:	3b01      	subs	r3, #1
 80046e4:	493d      	ldr	r1, [pc, #244]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d029      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004700:	d124      	bne.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004702:	4b36      	ldr	r3, [pc, #216]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004708:	0c1b      	lsrs	r3, r3, #16
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	3301      	adds	r3, #1
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004714:	4b31      	ldr	r3, [pc, #196]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004716:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800471a:	0f1b      	lsrs	r3, r3, #28
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	019b      	lsls	r3, r3, #6
 800472c:	431a      	orrs	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	085b      	lsrs	r3, r3, #1
 8004734:	3b01      	subs	r3, #1
 8004736:	041b      	lsls	r3, r3, #16
 8004738:	431a      	orrs	r2, r3
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	061b      	lsls	r3, r3, #24
 800473e:	431a      	orrs	r2, r3
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	071b      	lsls	r3, r3, #28
 8004744:	4925      	ldr	r1, [pc, #148]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004746:	4313      	orrs	r3, r2
 8004748:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004754:	2b00      	cmp	r3, #0
 8004756:	d016      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	019b      	lsls	r3, r3, #6
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	085b      	lsrs	r3, r3, #1
 800476a:	3b01      	subs	r3, #1
 800476c:	041b      	lsls	r3, r3, #16
 800476e:	431a      	orrs	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	061b      	lsls	r3, r3, #24
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	071b      	lsls	r3, r3, #28
 800477e:	4917      	ldr	r1, [pc, #92]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004780:	4313      	orrs	r3, r2
 8004782:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004786:	4b16      	ldr	r3, [pc, #88]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004788:	2201      	movs	r2, #1
 800478a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800478c:	f7fe fc92 	bl	80030b4 <HAL_GetTick>
 8004790:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004792:	e008      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004794:	f7fe fc8e 	bl	80030b4 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e09f      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047a6:	4b0d      	ldr	r3, [pc, #52]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0f0      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80047b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	f040 8095 	bne.w	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80047ba:	4b0a      	ldr	r3, [pc, #40]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80047bc:	2200      	movs	r2, #0
 80047be:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047c0:	f7fe fc78 	bl	80030b4 <HAL_GetTick>
 80047c4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80047c6:	e00f      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80047c8:	f7fe fc74 	bl	80030b4 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d908      	bls.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e085      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80047da:	bf00      	nop
 80047dc:	40023800 	.word	0x40023800
 80047e0:	42470068 	.word	0x42470068
 80047e4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80047e8:	4b41      	ldr	r3, [pc, #260]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047f4:	d0e8      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0304 	and.w	r3, r3, #4
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004806:	2b00      	cmp	r3, #0
 8004808:	d009      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004812:	2b00      	cmp	r3, #0
 8004814:	d02b      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800481a:	2b00      	cmp	r3, #0
 800481c:	d127      	bne.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800481e:	4b34      	ldr	r3, [pc, #208]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004824:	0c1b      	lsrs	r3, r3, #16
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	3301      	adds	r3, #1
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	699a      	ldr	r2, [r3, #24]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	019b      	lsls	r3, r3, #6
 800483a:	431a      	orrs	r2, r3
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	085b      	lsrs	r3, r3, #1
 8004840:	3b01      	subs	r3, #1
 8004842:	041b      	lsls	r3, r3, #16
 8004844:	431a      	orrs	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	061b      	lsls	r3, r3, #24
 800484c:	4928      	ldr	r1, [pc, #160]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800484e:	4313      	orrs	r3, r2
 8004850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004854:	4b26      	ldr	r3, [pc, #152]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004856:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800485a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004862:	3b01      	subs	r3, #1
 8004864:	021b      	lsls	r3, r3, #8
 8004866:	4922      	ldr	r1, [pc, #136]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004868:	4313      	orrs	r3, r2
 800486a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004876:	2b00      	cmp	r3, #0
 8004878:	d01d      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004882:	d118      	bne.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004884:	4b1a      	ldr	r3, [pc, #104]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488a:	0e1b      	lsrs	r3, r3, #24
 800488c:	f003 030f 	and.w	r3, r3, #15
 8004890:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	699a      	ldr	r2, [r3, #24]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	019b      	lsls	r3, r3, #6
 800489c:	431a      	orrs	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	085b      	lsrs	r3, r3, #1
 80048a4:	3b01      	subs	r3, #1
 80048a6:	041b      	lsls	r3, r3, #16
 80048a8:	431a      	orrs	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	061b      	lsls	r3, r3, #24
 80048ae:	4910      	ldr	r1, [pc, #64]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80048b6:	4b0f      	ldr	r3, [pc, #60]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80048b8:	2201      	movs	r2, #1
 80048ba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048bc:	f7fe fbfa 	bl	80030b4 <HAL_GetTick>
 80048c0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048c2:	e008      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80048c4:	f7fe fbf6 	bl	80030b4 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e007      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048d6:	4b06      	ldr	r3, [pc, #24]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048e2:	d1ef      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3730      	adds	r7, #48	; 0x30
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	40023800 	.word	0x40023800
 80048f4:	42470070 	.word	0x42470070

080048f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048fc:	b0ae      	sub	sp, #184	; 0xb8
 80048fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004906:	2300      	movs	r3, #0
 8004908:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800490c:	2300      	movs	r3, #0
 800490e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004912:	2300      	movs	r3, #0
 8004914:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004918:	2300      	movs	r3, #0
 800491a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800491e:	4bcb      	ldr	r3, [pc, #812]	; (8004c4c <HAL_RCC_GetSysClockFreq+0x354>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 030c 	and.w	r3, r3, #12
 8004926:	2b0c      	cmp	r3, #12
 8004928:	f200 8206 	bhi.w	8004d38 <HAL_RCC_GetSysClockFreq+0x440>
 800492c:	a201      	add	r2, pc, #4	; (adr r2, 8004934 <HAL_RCC_GetSysClockFreq+0x3c>)
 800492e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004932:	bf00      	nop
 8004934:	08004969 	.word	0x08004969
 8004938:	08004d39 	.word	0x08004d39
 800493c:	08004d39 	.word	0x08004d39
 8004940:	08004d39 	.word	0x08004d39
 8004944:	08004971 	.word	0x08004971
 8004948:	08004d39 	.word	0x08004d39
 800494c:	08004d39 	.word	0x08004d39
 8004950:	08004d39 	.word	0x08004d39
 8004954:	08004979 	.word	0x08004979
 8004958:	08004d39 	.word	0x08004d39
 800495c:	08004d39 	.word	0x08004d39
 8004960:	08004d39 	.word	0x08004d39
 8004964:	08004b69 	.word	0x08004b69
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004968:	4bb9      	ldr	r3, [pc, #740]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x358>)
 800496a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800496e:	e1e7      	b.n	8004d40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004970:	4bb8      	ldr	r3, [pc, #736]	; (8004c54 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004972:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004976:	e1e3      	b.n	8004d40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004978:	4bb4      	ldr	r3, [pc, #720]	; (8004c4c <HAL_RCC_GetSysClockFreq+0x354>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004980:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004984:	4bb1      	ldr	r3, [pc, #708]	; (8004c4c <HAL_RCC_GetSysClockFreq+0x354>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d071      	beq.n	8004a74 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004990:	4bae      	ldr	r3, [pc, #696]	; (8004c4c <HAL_RCC_GetSysClockFreq+0x354>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	099b      	lsrs	r3, r3, #6
 8004996:	2200      	movs	r2, #0
 8004998:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800499c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80049a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049ac:	2300      	movs	r3, #0
 80049ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80049b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80049b6:	4622      	mov	r2, r4
 80049b8:	462b      	mov	r3, r5
 80049ba:	f04f 0000 	mov.w	r0, #0
 80049be:	f04f 0100 	mov.w	r1, #0
 80049c2:	0159      	lsls	r1, r3, #5
 80049c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049c8:	0150      	lsls	r0, r2, #5
 80049ca:	4602      	mov	r2, r0
 80049cc:	460b      	mov	r3, r1
 80049ce:	4621      	mov	r1, r4
 80049d0:	1a51      	subs	r1, r2, r1
 80049d2:	6439      	str	r1, [r7, #64]	; 0x40
 80049d4:	4629      	mov	r1, r5
 80049d6:	eb63 0301 	sbc.w	r3, r3, r1
 80049da:	647b      	str	r3, [r7, #68]	; 0x44
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80049e8:	4649      	mov	r1, r9
 80049ea:	018b      	lsls	r3, r1, #6
 80049ec:	4641      	mov	r1, r8
 80049ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049f2:	4641      	mov	r1, r8
 80049f4:	018a      	lsls	r2, r1, #6
 80049f6:	4641      	mov	r1, r8
 80049f8:	1a51      	subs	r1, r2, r1
 80049fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80049fc:	4649      	mov	r1, r9
 80049fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a04:	f04f 0200 	mov.w	r2, #0
 8004a08:	f04f 0300 	mov.w	r3, #0
 8004a0c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004a10:	4649      	mov	r1, r9
 8004a12:	00cb      	lsls	r3, r1, #3
 8004a14:	4641      	mov	r1, r8
 8004a16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a1a:	4641      	mov	r1, r8
 8004a1c:	00ca      	lsls	r2, r1, #3
 8004a1e:	4610      	mov	r0, r2
 8004a20:	4619      	mov	r1, r3
 8004a22:	4603      	mov	r3, r0
 8004a24:	4622      	mov	r2, r4
 8004a26:	189b      	adds	r3, r3, r2
 8004a28:	633b      	str	r3, [r7, #48]	; 0x30
 8004a2a:	462b      	mov	r3, r5
 8004a2c:	460a      	mov	r2, r1
 8004a2e:	eb42 0303 	adc.w	r3, r2, r3
 8004a32:	637b      	str	r3, [r7, #52]	; 0x34
 8004a34:	f04f 0200 	mov.w	r2, #0
 8004a38:	f04f 0300 	mov.w	r3, #0
 8004a3c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004a40:	4629      	mov	r1, r5
 8004a42:	024b      	lsls	r3, r1, #9
 8004a44:	4621      	mov	r1, r4
 8004a46:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a4a:	4621      	mov	r1, r4
 8004a4c:	024a      	lsls	r2, r1, #9
 8004a4e:	4610      	mov	r0, r2
 8004a50:	4619      	mov	r1, r3
 8004a52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a56:	2200      	movs	r2, #0
 8004a58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a60:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004a64:	f7fc f910 	bl	8000c88 <__aeabi_uldivmod>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a72:	e067      	b.n	8004b44 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a74:	4b75      	ldr	r3, [pc, #468]	; (8004c4c <HAL_RCC_GetSysClockFreq+0x354>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	099b      	lsrs	r3, r3, #6
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a80:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004a84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a8e:	2300      	movs	r3, #0
 8004a90:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a92:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004a96:	4622      	mov	r2, r4
 8004a98:	462b      	mov	r3, r5
 8004a9a:	f04f 0000 	mov.w	r0, #0
 8004a9e:	f04f 0100 	mov.w	r1, #0
 8004aa2:	0159      	lsls	r1, r3, #5
 8004aa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004aa8:	0150      	lsls	r0, r2, #5
 8004aaa:	4602      	mov	r2, r0
 8004aac:	460b      	mov	r3, r1
 8004aae:	4621      	mov	r1, r4
 8004ab0:	1a51      	subs	r1, r2, r1
 8004ab2:	62b9      	str	r1, [r7, #40]	; 0x28
 8004ab4:	4629      	mov	r1, r5
 8004ab6:	eb63 0301 	sbc.w	r3, r3, r1
 8004aba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004abc:	f04f 0200 	mov.w	r2, #0
 8004ac0:	f04f 0300 	mov.w	r3, #0
 8004ac4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004ac8:	4649      	mov	r1, r9
 8004aca:	018b      	lsls	r3, r1, #6
 8004acc:	4641      	mov	r1, r8
 8004ace:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ad2:	4641      	mov	r1, r8
 8004ad4:	018a      	lsls	r2, r1, #6
 8004ad6:	4641      	mov	r1, r8
 8004ad8:	ebb2 0a01 	subs.w	sl, r2, r1
 8004adc:	4649      	mov	r1, r9
 8004ade:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ae2:	f04f 0200 	mov.w	r2, #0
 8004ae6:	f04f 0300 	mov.w	r3, #0
 8004aea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004aee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004af2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004af6:	4692      	mov	sl, r2
 8004af8:	469b      	mov	fp, r3
 8004afa:	4623      	mov	r3, r4
 8004afc:	eb1a 0303 	adds.w	r3, sl, r3
 8004b00:	623b      	str	r3, [r7, #32]
 8004b02:	462b      	mov	r3, r5
 8004b04:	eb4b 0303 	adc.w	r3, fp, r3
 8004b08:	627b      	str	r3, [r7, #36]	; 0x24
 8004b0a:	f04f 0200 	mov.w	r2, #0
 8004b0e:	f04f 0300 	mov.w	r3, #0
 8004b12:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004b16:	4629      	mov	r1, r5
 8004b18:	028b      	lsls	r3, r1, #10
 8004b1a:	4621      	mov	r1, r4
 8004b1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b20:	4621      	mov	r1, r4
 8004b22:	028a      	lsls	r2, r1, #10
 8004b24:	4610      	mov	r0, r2
 8004b26:	4619      	mov	r1, r3
 8004b28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	673b      	str	r3, [r7, #112]	; 0x70
 8004b30:	677a      	str	r2, [r7, #116]	; 0x74
 8004b32:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004b36:	f7fc f8a7 	bl	8000c88 <__aeabi_uldivmod>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	4613      	mov	r3, r2
 8004b40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b44:	4b41      	ldr	r3, [pc, #260]	; (8004c4c <HAL_RCC_GetSysClockFreq+0x354>)
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	0c1b      	lsrs	r3, r3, #16
 8004b4a:	f003 0303 	and.w	r3, r3, #3
 8004b4e:	3301      	adds	r3, #1
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004b56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004b66:	e0eb      	b.n	8004d40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b68:	4b38      	ldr	r3, [pc, #224]	; (8004c4c <HAL_RCC_GetSysClockFreq+0x354>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b74:	4b35      	ldr	r3, [pc, #212]	; (8004c4c <HAL_RCC_GetSysClockFreq+0x354>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d06b      	beq.n	8004c58 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b80:	4b32      	ldr	r3, [pc, #200]	; (8004c4c <HAL_RCC_GetSysClockFreq+0x354>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	099b      	lsrs	r3, r3, #6
 8004b86:	2200      	movs	r2, #0
 8004b88:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b92:	663b      	str	r3, [r7, #96]	; 0x60
 8004b94:	2300      	movs	r3, #0
 8004b96:	667b      	str	r3, [r7, #100]	; 0x64
 8004b98:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004b9c:	4622      	mov	r2, r4
 8004b9e:	462b      	mov	r3, r5
 8004ba0:	f04f 0000 	mov.w	r0, #0
 8004ba4:	f04f 0100 	mov.w	r1, #0
 8004ba8:	0159      	lsls	r1, r3, #5
 8004baa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bae:	0150      	lsls	r0, r2, #5
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	4621      	mov	r1, r4
 8004bb6:	1a51      	subs	r1, r2, r1
 8004bb8:	61b9      	str	r1, [r7, #24]
 8004bba:	4629      	mov	r1, r5
 8004bbc:	eb63 0301 	sbc.w	r3, r3, r1
 8004bc0:	61fb      	str	r3, [r7, #28]
 8004bc2:	f04f 0200 	mov.w	r2, #0
 8004bc6:	f04f 0300 	mov.w	r3, #0
 8004bca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004bce:	4659      	mov	r1, fp
 8004bd0:	018b      	lsls	r3, r1, #6
 8004bd2:	4651      	mov	r1, sl
 8004bd4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bd8:	4651      	mov	r1, sl
 8004bda:	018a      	lsls	r2, r1, #6
 8004bdc:	4651      	mov	r1, sl
 8004bde:	ebb2 0801 	subs.w	r8, r2, r1
 8004be2:	4659      	mov	r1, fp
 8004be4:	eb63 0901 	sbc.w	r9, r3, r1
 8004be8:	f04f 0200 	mov.w	r2, #0
 8004bec:	f04f 0300 	mov.w	r3, #0
 8004bf0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bf4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bf8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bfc:	4690      	mov	r8, r2
 8004bfe:	4699      	mov	r9, r3
 8004c00:	4623      	mov	r3, r4
 8004c02:	eb18 0303 	adds.w	r3, r8, r3
 8004c06:	613b      	str	r3, [r7, #16]
 8004c08:	462b      	mov	r3, r5
 8004c0a:	eb49 0303 	adc.w	r3, r9, r3
 8004c0e:	617b      	str	r3, [r7, #20]
 8004c10:	f04f 0200 	mov.w	r2, #0
 8004c14:	f04f 0300 	mov.w	r3, #0
 8004c18:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004c1c:	4629      	mov	r1, r5
 8004c1e:	024b      	lsls	r3, r1, #9
 8004c20:	4621      	mov	r1, r4
 8004c22:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c26:	4621      	mov	r1, r4
 8004c28:	024a      	lsls	r2, r1, #9
 8004c2a:	4610      	mov	r0, r2
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c32:	2200      	movs	r2, #0
 8004c34:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c36:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004c38:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c3c:	f7fc f824 	bl	8000c88 <__aeabi_uldivmod>
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	4613      	mov	r3, r2
 8004c46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c4a:	e065      	b.n	8004d18 <HAL_RCC_GetSysClockFreq+0x420>
 8004c4c:	40023800 	.word	0x40023800
 8004c50:	00f42400 	.word	0x00f42400
 8004c54:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c58:	4b3d      	ldr	r3, [pc, #244]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x458>)
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	099b      	lsrs	r3, r3, #6
 8004c5e:	2200      	movs	r2, #0
 8004c60:	4618      	mov	r0, r3
 8004c62:	4611      	mov	r1, r2
 8004c64:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c68:	653b      	str	r3, [r7, #80]	; 0x50
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	657b      	str	r3, [r7, #84]	; 0x54
 8004c6e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004c72:	4642      	mov	r2, r8
 8004c74:	464b      	mov	r3, r9
 8004c76:	f04f 0000 	mov.w	r0, #0
 8004c7a:	f04f 0100 	mov.w	r1, #0
 8004c7e:	0159      	lsls	r1, r3, #5
 8004c80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c84:	0150      	lsls	r0, r2, #5
 8004c86:	4602      	mov	r2, r0
 8004c88:	460b      	mov	r3, r1
 8004c8a:	4641      	mov	r1, r8
 8004c8c:	1a51      	subs	r1, r2, r1
 8004c8e:	60b9      	str	r1, [r7, #8]
 8004c90:	4649      	mov	r1, r9
 8004c92:	eb63 0301 	sbc.w	r3, r3, r1
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	f04f 0200 	mov.w	r2, #0
 8004c9c:	f04f 0300 	mov.w	r3, #0
 8004ca0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004ca4:	4659      	mov	r1, fp
 8004ca6:	018b      	lsls	r3, r1, #6
 8004ca8:	4651      	mov	r1, sl
 8004caa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cae:	4651      	mov	r1, sl
 8004cb0:	018a      	lsls	r2, r1, #6
 8004cb2:	4651      	mov	r1, sl
 8004cb4:	1a54      	subs	r4, r2, r1
 8004cb6:	4659      	mov	r1, fp
 8004cb8:	eb63 0501 	sbc.w	r5, r3, r1
 8004cbc:	f04f 0200 	mov.w	r2, #0
 8004cc0:	f04f 0300 	mov.w	r3, #0
 8004cc4:	00eb      	lsls	r3, r5, #3
 8004cc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cca:	00e2      	lsls	r2, r4, #3
 8004ccc:	4614      	mov	r4, r2
 8004cce:	461d      	mov	r5, r3
 8004cd0:	4643      	mov	r3, r8
 8004cd2:	18e3      	adds	r3, r4, r3
 8004cd4:	603b      	str	r3, [r7, #0]
 8004cd6:	464b      	mov	r3, r9
 8004cd8:	eb45 0303 	adc.w	r3, r5, r3
 8004cdc:	607b      	str	r3, [r7, #4]
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cea:	4629      	mov	r1, r5
 8004cec:	028b      	lsls	r3, r1, #10
 8004cee:	4621      	mov	r1, r4
 8004cf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	028a      	lsls	r2, r1, #10
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d00:	2200      	movs	r2, #0
 8004d02:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d04:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004d06:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d0a:	f7fb ffbd 	bl	8000c88 <__aeabi_uldivmod>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	460b      	mov	r3, r1
 8004d12:	4613      	mov	r3, r2
 8004d14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004d18:	4b0d      	ldr	r3, [pc, #52]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x458>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	0f1b      	lsrs	r3, r3, #28
 8004d1e:	f003 0307 	and.w	r3, r3, #7
 8004d22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004d26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004d36:	e003      	b.n	8004d40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d38:	4b06      	ldr	r3, [pc, #24]	; (8004d54 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004d3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004d3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	37b8      	adds	r7, #184	; 0xb8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d4e:	bf00      	nop
 8004d50:	40023800 	.word	0x40023800
 8004d54:	00f42400 	.word	0x00f42400

08004d58 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e28d      	b.n	8005286 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f000 8083 	beq.w	8004e7e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004d78:	4b94      	ldr	r3, [pc, #592]	; (8004fcc <HAL_RCC_OscConfig+0x274>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f003 030c 	and.w	r3, r3, #12
 8004d80:	2b04      	cmp	r3, #4
 8004d82:	d019      	beq.n	8004db8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004d84:	4b91      	ldr	r3, [pc, #580]	; (8004fcc <HAL_RCC_OscConfig+0x274>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004d8c:	2b08      	cmp	r3, #8
 8004d8e:	d106      	bne.n	8004d9e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004d90:	4b8e      	ldr	r3, [pc, #568]	; (8004fcc <HAL_RCC_OscConfig+0x274>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d9c:	d00c      	beq.n	8004db8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d9e:	4b8b      	ldr	r3, [pc, #556]	; (8004fcc <HAL_RCC_OscConfig+0x274>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004da6:	2b0c      	cmp	r3, #12
 8004da8:	d112      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004daa:	4b88      	ldr	r3, [pc, #544]	; (8004fcc <HAL_RCC_OscConfig+0x274>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004db2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004db6:	d10b      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004db8:	4b84      	ldr	r3, [pc, #528]	; (8004fcc <HAL_RCC_OscConfig+0x274>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d05b      	beq.n	8004e7c <HAL_RCC_OscConfig+0x124>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d157      	bne.n	8004e7c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e25a      	b.n	8005286 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd8:	d106      	bne.n	8004de8 <HAL_RCC_OscConfig+0x90>
 8004dda:	4b7c      	ldr	r3, [pc, #496]	; (8004fcc <HAL_RCC_OscConfig+0x274>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a7b      	ldr	r2, [pc, #492]	; (8004fcc <HAL_RCC_OscConfig+0x274>)
 8004de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004de4:	6013      	str	r3, [r2, #0]
 8004de6:	e01d      	b.n	8004e24 <HAL_RCC_OscConfig+0xcc>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004df0:	d10c      	bne.n	8004e0c <HAL_RCC_OscConfig+0xb4>
 8004df2:	4b76      	ldr	r3, [pc, #472]	; (8004fcc <HAL_RCC_OscConfig+0x274>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a75      	ldr	r2, [pc, #468]	; (8004fcc <HAL_RCC_OscConfig+0x274>)
 8004df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dfc:	6013      	str	r3, [r2, #0]
 8004dfe:	4b73      	ldr	r3, [pc, #460]	; (8004fcc <HAL_RCC_OscConfig+0x274>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a72      	ldr	r2, [pc, #456]	; (8004fcc <HAL_RCC_OscConfig+0x274>)
 8004e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e08:	6013      	str	r3, [r2, #0]
 8004e0a:	e00b      	b.n	8004e24 <HAL_RCC_OscConfig+0xcc>
 8004e0c:	4b6f      	ldr	r3, [pc, #444]	; (8004fcc <HAL_RCC_OscConfig+0x274>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a6e      	ldr	r2, [pc, #440]	; (8004fcc <HAL_RCC_OscConfig+0x274>)
 8004e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	4b6c      	ldr	r3, [pc, #432]	; (8004fcc <HAL_RCC_OscConfig+0x274>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a6b      	ldr	r2, [pc, #428]	; (8004fcc <HAL_RCC_OscConfig+0x274>)
 8004e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d013      	beq.n	8004e54 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2c:	f7fe f942 	bl	80030b4 <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e34:	f7fe f93e 	bl	80030b4 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b64      	cmp	r3, #100	; 0x64
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e21f      	b.n	8005286 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e46:	4b61      	ldr	r3, [pc, #388]	; (8004fcc <HAL_RCC_OscConfig+0x274>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d0f0      	beq.n	8004e34 <HAL_RCC_OscConfig+0xdc>
 8004e52:	e014      	b.n	8004e7e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e54:	f7fe f92e 	bl	80030b4 <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e5c:	f7fe f92a 	bl	80030b4 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b64      	cmp	r3, #100	; 0x64
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e20b      	b.n	8005286 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e6e:	4b57      	ldr	r3, [pc, #348]	; (8004fcc <HAL_RCC_OscConfig+0x274>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1f0      	bne.n	8004e5c <HAL_RCC_OscConfig+0x104>
 8004e7a:	e000      	b.n	8004e7e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d06f      	beq.n	8004f6a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004e8a:	4b50      	ldr	r3, [pc, #320]	; (8004fcc <HAL_RCC_OscConfig+0x274>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 030c 	and.w	r3, r3, #12
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d017      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004e96:	4b4d      	ldr	r3, [pc, #308]	; (8004fcc <HAL_RCC_OscConfig+0x274>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004e9e:	2b08      	cmp	r3, #8
 8004ea0:	d105      	bne.n	8004eae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004ea2:	4b4a      	ldr	r3, [pc, #296]	; (8004fcc <HAL_RCC_OscConfig+0x274>)
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00b      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eae:	4b47      	ldr	r3, [pc, #284]	; (8004fcc <HAL_RCC_OscConfig+0x274>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004eb6:	2b0c      	cmp	r3, #12
 8004eb8:	d11c      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eba:	4b44      	ldr	r3, [pc, #272]	; (8004fcc <HAL_RCC_OscConfig+0x274>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d116      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ec6:	4b41      	ldr	r3, [pc, #260]	; (8004fcc <HAL_RCC_OscConfig+0x274>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d005      	beq.n	8004ede <HAL_RCC_OscConfig+0x186>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d001      	beq.n	8004ede <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e1d3      	b.n	8005286 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ede:	4b3b      	ldr	r3, [pc, #236]	; (8004fcc <HAL_RCC_OscConfig+0x274>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	4937      	ldr	r1, [pc, #220]	; (8004fcc <HAL_RCC_OscConfig+0x274>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ef2:	e03a      	b.n	8004f6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d020      	beq.n	8004f3e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004efc:	4b34      	ldr	r3, [pc, #208]	; (8004fd0 <HAL_RCC_OscConfig+0x278>)
 8004efe:	2201      	movs	r2, #1
 8004f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f02:	f7fe f8d7 	bl	80030b4 <HAL_GetTick>
 8004f06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f08:	e008      	b.n	8004f1c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f0a:	f7fe f8d3 	bl	80030b4 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d901      	bls.n	8004f1c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e1b4      	b.n	8005286 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f1c:	4b2b      	ldr	r3, [pc, #172]	; (8004fcc <HAL_RCC_OscConfig+0x274>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0f0      	beq.n	8004f0a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f28:	4b28      	ldr	r3, [pc, #160]	; (8004fcc <HAL_RCC_OscConfig+0x274>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	4925      	ldr	r1, [pc, #148]	; (8004fcc <HAL_RCC_OscConfig+0x274>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	600b      	str	r3, [r1, #0]
 8004f3c:	e015      	b.n	8004f6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f3e:	4b24      	ldr	r3, [pc, #144]	; (8004fd0 <HAL_RCC_OscConfig+0x278>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f44:	f7fe f8b6 	bl	80030b4 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f4c:	f7fe f8b2 	bl	80030b4 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e193      	b.n	8005286 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f5e:	4b1b      	ldr	r3, [pc, #108]	; (8004fcc <HAL_RCC_OscConfig+0x274>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1f0      	bne.n	8004f4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0308 	and.w	r3, r3, #8
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d036      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d016      	beq.n	8004fac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f7e:	4b15      	ldr	r3, [pc, #84]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004f80:	2201      	movs	r2, #1
 8004f82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f84:	f7fe f896 	bl	80030b4 <HAL_GetTick>
 8004f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f8c:	f7fe f892 	bl	80030b4 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e173      	b.n	8005286 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f9e:	4b0b      	ldr	r3, [pc, #44]	; (8004fcc <HAL_RCC_OscConfig+0x274>)
 8004fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0f0      	beq.n	8004f8c <HAL_RCC_OscConfig+0x234>
 8004faa:	e01b      	b.n	8004fe4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fac:	4b09      	ldr	r3, [pc, #36]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb2:	f7fe f87f 	bl	80030b4 <HAL_GetTick>
 8004fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fb8:	e00e      	b.n	8004fd8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fba:	f7fe f87b 	bl	80030b4 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d907      	bls.n	8004fd8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e15c      	b.n	8005286 <HAL_RCC_OscConfig+0x52e>
 8004fcc:	40023800 	.word	0x40023800
 8004fd0:	42470000 	.word	0x42470000
 8004fd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fd8:	4b8a      	ldr	r3, [pc, #552]	; (8005204 <HAL_RCC_OscConfig+0x4ac>)
 8004fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1ea      	bne.n	8004fba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f000 8097 	beq.w	8005120 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ff6:	4b83      	ldr	r3, [pc, #524]	; (8005204 <HAL_RCC_OscConfig+0x4ac>)
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10f      	bne.n	8005022 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005002:	2300      	movs	r3, #0
 8005004:	60bb      	str	r3, [r7, #8]
 8005006:	4b7f      	ldr	r3, [pc, #508]	; (8005204 <HAL_RCC_OscConfig+0x4ac>)
 8005008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500a:	4a7e      	ldr	r2, [pc, #504]	; (8005204 <HAL_RCC_OscConfig+0x4ac>)
 800500c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005010:	6413      	str	r3, [r2, #64]	; 0x40
 8005012:	4b7c      	ldr	r3, [pc, #496]	; (8005204 <HAL_RCC_OscConfig+0x4ac>)
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800501a:	60bb      	str	r3, [r7, #8]
 800501c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800501e:	2301      	movs	r3, #1
 8005020:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005022:	4b79      	ldr	r3, [pc, #484]	; (8005208 <HAL_RCC_OscConfig+0x4b0>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502a:	2b00      	cmp	r3, #0
 800502c:	d118      	bne.n	8005060 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800502e:	4b76      	ldr	r3, [pc, #472]	; (8005208 <HAL_RCC_OscConfig+0x4b0>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a75      	ldr	r2, [pc, #468]	; (8005208 <HAL_RCC_OscConfig+0x4b0>)
 8005034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800503a:	f7fe f83b 	bl	80030b4 <HAL_GetTick>
 800503e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005040:	e008      	b.n	8005054 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005042:	f7fe f837 	bl	80030b4 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d901      	bls.n	8005054 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e118      	b.n	8005286 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005054:	4b6c      	ldr	r3, [pc, #432]	; (8005208 <HAL_RCC_OscConfig+0x4b0>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505c:	2b00      	cmp	r3, #0
 800505e:	d0f0      	beq.n	8005042 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d106      	bne.n	8005076 <HAL_RCC_OscConfig+0x31e>
 8005068:	4b66      	ldr	r3, [pc, #408]	; (8005204 <HAL_RCC_OscConfig+0x4ac>)
 800506a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506c:	4a65      	ldr	r2, [pc, #404]	; (8005204 <HAL_RCC_OscConfig+0x4ac>)
 800506e:	f043 0301 	orr.w	r3, r3, #1
 8005072:	6713      	str	r3, [r2, #112]	; 0x70
 8005074:	e01c      	b.n	80050b0 <HAL_RCC_OscConfig+0x358>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	2b05      	cmp	r3, #5
 800507c:	d10c      	bne.n	8005098 <HAL_RCC_OscConfig+0x340>
 800507e:	4b61      	ldr	r3, [pc, #388]	; (8005204 <HAL_RCC_OscConfig+0x4ac>)
 8005080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005082:	4a60      	ldr	r2, [pc, #384]	; (8005204 <HAL_RCC_OscConfig+0x4ac>)
 8005084:	f043 0304 	orr.w	r3, r3, #4
 8005088:	6713      	str	r3, [r2, #112]	; 0x70
 800508a:	4b5e      	ldr	r3, [pc, #376]	; (8005204 <HAL_RCC_OscConfig+0x4ac>)
 800508c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508e:	4a5d      	ldr	r2, [pc, #372]	; (8005204 <HAL_RCC_OscConfig+0x4ac>)
 8005090:	f043 0301 	orr.w	r3, r3, #1
 8005094:	6713      	str	r3, [r2, #112]	; 0x70
 8005096:	e00b      	b.n	80050b0 <HAL_RCC_OscConfig+0x358>
 8005098:	4b5a      	ldr	r3, [pc, #360]	; (8005204 <HAL_RCC_OscConfig+0x4ac>)
 800509a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509c:	4a59      	ldr	r2, [pc, #356]	; (8005204 <HAL_RCC_OscConfig+0x4ac>)
 800509e:	f023 0301 	bic.w	r3, r3, #1
 80050a2:	6713      	str	r3, [r2, #112]	; 0x70
 80050a4:	4b57      	ldr	r3, [pc, #348]	; (8005204 <HAL_RCC_OscConfig+0x4ac>)
 80050a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a8:	4a56      	ldr	r2, [pc, #344]	; (8005204 <HAL_RCC_OscConfig+0x4ac>)
 80050aa:	f023 0304 	bic.w	r3, r3, #4
 80050ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d015      	beq.n	80050e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b8:	f7fd fffc 	bl	80030b4 <HAL_GetTick>
 80050bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050be:	e00a      	b.n	80050d6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050c0:	f7fd fff8 	bl	80030b4 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e0d7      	b.n	8005286 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050d6:	4b4b      	ldr	r3, [pc, #300]	; (8005204 <HAL_RCC_OscConfig+0x4ac>)
 80050d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d0ee      	beq.n	80050c0 <HAL_RCC_OscConfig+0x368>
 80050e2:	e014      	b.n	800510e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e4:	f7fd ffe6 	bl	80030b4 <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050ea:	e00a      	b.n	8005102 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050ec:	f7fd ffe2 	bl	80030b4 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e0c1      	b.n	8005286 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005102:	4b40      	ldr	r3, [pc, #256]	; (8005204 <HAL_RCC_OscConfig+0x4ac>)
 8005104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1ee      	bne.n	80050ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800510e:	7dfb      	ldrb	r3, [r7, #23]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d105      	bne.n	8005120 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005114:	4b3b      	ldr	r3, [pc, #236]	; (8005204 <HAL_RCC_OscConfig+0x4ac>)
 8005116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005118:	4a3a      	ldr	r2, [pc, #232]	; (8005204 <HAL_RCC_OscConfig+0x4ac>)
 800511a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800511e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	2b00      	cmp	r3, #0
 8005126:	f000 80ad 	beq.w	8005284 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800512a:	4b36      	ldr	r3, [pc, #216]	; (8005204 <HAL_RCC_OscConfig+0x4ac>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f003 030c 	and.w	r3, r3, #12
 8005132:	2b08      	cmp	r3, #8
 8005134:	d060      	beq.n	80051f8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	2b02      	cmp	r3, #2
 800513c:	d145      	bne.n	80051ca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800513e:	4b33      	ldr	r3, [pc, #204]	; (800520c <HAL_RCC_OscConfig+0x4b4>)
 8005140:	2200      	movs	r2, #0
 8005142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005144:	f7fd ffb6 	bl	80030b4 <HAL_GetTick>
 8005148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800514c:	f7fd ffb2 	bl	80030b4 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e093      	b.n	8005286 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800515e:	4b29      	ldr	r3, [pc, #164]	; (8005204 <HAL_RCC_OscConfig+0x4ac>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1f0      	bne.n	800514c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	69da      	ldr	r2, [r3, #28]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	431a      	orrs	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	019b      	lsls	r3, r3, #6
 800517a:	431a      	orrs	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005180:	085b      	lsrs	r3, r3, #1
 8005182:	3b01      	subs	r3, #1
 8005184:	041b      	lsls	r3, r3, #16
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518c:	061b      	lsls	r3, r3, #24
 800518e:	431a      	orrs	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005194:	071b      	lsls	r3, r3, #28
 8005196:	491b      	ldr	r1, [pc, #108]	; (8005204 <HAL_RCC_OscConfig+0x4ac>)
 8005198:	4313      	orrs	r3, r2
 800519a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800519c:	4b1b      	ldr	r3, [pc, #108]	; (800520c <HAL_RCC_OscConfig+0x4b4>)
 800519e:	2201      	movs	r2, #1
 80051a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a2:	f7fd ff87 	bl	80030b4 <HAL_GetTick>
 80051a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051a8:	e008      	b.n	80051bc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051aa:	f7fd ff83 	bl	80030b4 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d901      	bls.n	80051bc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e064      	b.n	8005286 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051bc:	4b11      	ldr	r3, [pc, #68]	; (8005204 <HAL_RCC_OscConfig+0x4ac>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d0f0      	beq.n	80051aa <HAL_RCC_OscConfig+0x452>
 80051c8:	e05c      	b.n	8005284 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ca:	4b10      	ldr	r3, [pc, #64]	; (800520c <HAL_RCC_OscConfig+0x4b4>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d0:	f7fd ff70 	bl	80030b4 <HAL_GetTick>
 80051d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051d6:	e008      	b.n	80051ea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051d8:	f7fd ff6c 	bl	80030b4 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d901      	bls.n	80051ea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e04d      	b.n	8005286 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ea:	4b06      	ldr	r3, [pc, #24]	; (8005204 <HAL_RCC_OscConfig+0x4ac>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1f0      	bne.n	80051d8 <HAL_RCC_OscConfig+0x480>
 80051f6:	e045      	b.n	8005284 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d107      	bne.n	8005210 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e040      	b.n	8005286 <HAL_RCC_OscConfig+0x52e>
 8005204:	40023800 	.word	0x40023800
 8005208:	40007000 	.word	0x40007000
 800520c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005210:	4b1f      	ldr	r3, [pc, #124]	; (8005290 <HAL_RCC_OscConfig+0x538>)
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d030      	beq.n	8005280 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005228:	429a      	cmp	r2, r3
 800522a:	d129      	bne.n	8005280 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005236:	429a      	cmp	r2, r3
 8005238:	d122      	bne.n	8005280 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005240:	4013      	ands	r3, r2
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005246:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005248:	4293      	cmp	r3, r2
 800524a:	d119      	bne.n	8005280 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005256:	085b      	lsrs	r3, r3, #1
 8005258:	3b01      	subs	r3, #1
 800525a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800525c:	429a      	cmp	r2, r3
 800525e:	d10f      	bne.n	8005280 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800526c:	429a      	cmp	r2, r3
 800526e:	d107      	bne.n	8005280 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800527c:	429a      	cmp	r2, r3
 800527e:	d001      	beq.n	8005284 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e000      	b.n	8005286 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3718      	adds	r7, #24
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	40023800 	.word	0x40023800

08005294 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e066      	b.n	8005378 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	7f5b      	ldrb	r3, [r3, #29]
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d105      	bne.n	80052c0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7fd faae 	bl	800281c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2202      	movs	r2, #2
 80052c4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	22ca      	movs	r2, #202	; 0xca
 80052cc:	625a      	str	r2, [r3, #36]	; 0x24
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2253      	movs	r2, #83	; 0x53
 80052d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f998 	bl	800560c <RTC_EnterInitMode>
 80052dc:	4603      	mov	r3, r0
 80052de:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80052e0:	7bfb      	ldrb	r3, [r7, #15]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d12c      	bne.n	8005340 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	6812      	ldr	r2, [r2, #0]
 80052f0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80052f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052f8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	6899      	ldr	r1, [r3, #8]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	431a      	orrs	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	68d2      	ldr	r2, [r2, #12]
 8005320:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6919      	ldr	r1, [r3, #16]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	041a      	lsls	r2, r3, #16
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	430a      	orrs	r2, r1
 8005334:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f99f 	bl	800567a <RTC_ExitInitMode>
 800533c:	4603      	mov	r3, r0
 800533e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005340:	7bfb      	ldrb	r3, [r7, #15]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d113      	bne.n	800536e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005354:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	699a      	ldr	r2, [r3, #24]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	22ff      	movs	r2, #255	; 0xff
 8005374:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005376:	7bfb      	ldrb	r3, [r7, #15]
}
 8005378:	4618      	mov	r0, r3
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005380:	b590      	push	{r4, r7, lr}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800538c:	2300      	movs	r3, #0
 800538e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	7f1b      	ldrb	r3, [r3, #28]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d101      	bne.n	800539c <HAL_RTC_SetTime+0x1c>
 8005398:	2302      	movs	r3, #2
 800539a:	e087      	b.n	80054ac <HAL_RTC_SetTime+0x12c>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2201      	movs	r2, #1
 80053a0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2202      	movs	r2, #2
 80053a6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d126      	bne.n	80053fc <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d102      	bne.n	80053c2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2200      	movs	r2, #0
 80053c0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 f97c 	bl	80056c4 <RTC_ByteToBcd2>
 80053cc:	4603      	mov	r3, r0
 80053ce:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	785b      	ldrb	r3, [r3, #1]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f000 f975 	bl	80056c4 <RTC_ByteToBcd2>
 80053da:	4603      	mov	r3, r0
 80053dc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80053de:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	789b      	ldrb	r3, [r3, #2]
 80053e4:	4618      	mov	r0, r3
 80053e6:	f000 f96d 	bl	80056c4 <RTC_ByteToBcd2>
 80053ea:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80053ec:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	78db      	ldrb	r3, [r3, #3]
 80053f4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80053f6:	4313      	orrs	r3, r2
 80053f8:	617b      	str	r3, [r7, #20]
 80053fa:	e018      	b.n	800542e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005406:	2b00      	cmp	r3, #0
 8005408:	d102      	bne.n	8005410 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	2200      	movs	r2, #0
 800540e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	785b      	ldrb	r3, [r3, #1]
 800541a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800541c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005422:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	78db      	ldrb	r3, [r3, #3]
 8005428:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800542a:	4313      	orrs	r3, r2
 800542c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	22ca      	movs	r2, #202	; 0xca
 8005434:	625a      	str	r2, [r3, #36]	; 0x24
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2253      	movs	r2, #83	; 0x53
 800543c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f000 f8e4 	bl	800560c <RTC_EnterInitMode>
 8005444:	4603      	mov	r3, r0
 8005446:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005448:	7cfb      	ldrb	r3, [r7, #19]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d120      	bne.n	8005490 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005458:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800545c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	689a      	ldr	r2, [r3, #8]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800546c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6899      	ldr	r1, [r3, #8]
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	68da      	ldr	r2, [r3, #12]
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	431a      	orrs	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	430a      	orrs	r2, r1
 8005484:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 f8f7 	bl	800567a <RTC_ExitInitMode>
 800548c:	4603      	mov	r3, r0
 800548e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005490:	7cfb      	ldrb	r3, [r7, #19]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d102      	bne.n	800549c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2201      	movs	r2, #1
 800549a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	22ff      	movs	r2, #255	; 0xff
 80054a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	771a      	strb	r2, [r3, #28]

  return status;
 80054aa:	7cfb      	ldrb	r3, [r7, #19]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	371c      	adds	r7, #28
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd90      	pop	{r4, r7, pc}

080054b4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80054b4:	b590      	push	{r4, r7, lr}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80054c0:	2300      	movs	r3, #0
 80054c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	7f1b      	ldrb	r3, [r3, #28]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d101      	bne.n	80054d0 <HAL_RTC_SetDate+0x1c>
 80054cc:	2302      	movs	r3, #2
 80054ce:	e071      	b.n	80055b4 <HAL_RTC_SetDate+0x100>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2201      	movs	r2, #1
 80054d4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2202      	movs	r2, #2
 80054da:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10e      	bne.n	8005500 <HAL_RTC_SetDate+0x4c>
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	785b      	ldrb	r3, [r3, #1]
 80054e6:	f003 0310 	and.w	r3, r3, #16
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d008      	beq.n	8005500 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	785b      	ldrb	r3, [r3, #1]
 80054f2:	f023 0310 	bic.w	r3, r3, #16
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	330a      	adds	r3, #10
 80054fa:	b2da      	uxtb	r2, r3
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d11c      	bne.n	8005540 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	78db      	ldrb	r3, [r3, #3]
 800550a:	4618      	mov	r0, r3
 800550c:	f000 f8da 	bl	80056c4 <RTC_ByteToBcd2>
 8005510:	4603      	mov	r3, r0
 8005512:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	785b      	ldrb	r3, [r3, #1]
 8005518:	4618      	mov	r0, r3
 800551a:	f000 f8d3 	bl	80056c4 <RTC_ByteToBcd2>
 800551e:	4603      	mov	r3, r0
 8005520:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005522:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	789b      	ldrb	r3, [r3, #2]
 8005528:	4618      	mov	r0, r3
 800552a:	f000 f8cb 	bl	80056c4 <RTC_ByteToBcd2>
 800552e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005530:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800553a:	4313      	orrs	r3, r2
 800553c:	617b      	str	r3, [r7, #20]
 800553e:	e00e      	b.n	800555e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	78db      	ldrb	r3, [r3, #3]
 8005544:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	785b      	ldrb	r3, [r3, #1]
 800554a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800554c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005552:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800555a:	4313      	orrs	r3, r2
 800555c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	22ca      	movs	r2, #202	; 0xca
 8005564:	625a      	str	r2, [r3, #36]	; 0x24
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2253      	movs	r2, #83	; 0x53
 800556c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f000 f84c 	bl	800560c <RTC_EnterInitMode>
 8005574:	4603      	mov	r3, r0
 8005576:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005578:	7cfb      	ldrb	r3, [r7, #19]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10c      	bne.n	8005598 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005588:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800558c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f000 f873 	bl	800567a <RTC_ExitInitMode>
 8005594:	4603      	mov	r3, r0
 8005596:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005598:	7cfb      	ldrb	r3, [r7, #19]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d102      	bne.n	80055a4 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2201      	movs	r2, #1
 80055a2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	22ff      	movs	r2, #255	; 0xff
 80055aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	771a      	strb	r2, [r3, #28]

  return status;
 80055b2:	7cfb      	ldrb	r3, [r7, #19]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	371c      	adds	r7, #28
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd90      	pop	{r4, r7, pc}

080055bc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68da      	ldr	r2, [r3, #12]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80055d6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80055d8:	f7fd fd6c 	bl	80030b4 <HAL_GetTick>
 80055dc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80055de:	e009      	b.n	80055f4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80055e0:	f7fd fd68 	bl	80030b4 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055ee:	d901      	bls.n	80055f4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e007      	b.n	8005604 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f003 0320 	and.w	r3, r3, #32
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d0ee      	beq.n	80055e0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005614:	2300      	movs	r3, #0
 8005616:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005618:	2300      	movs	r3, #0
 800561a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005626:	2b00      	cmp	r3, #0
 8005628:	d122      	bne.n	8005670 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68da      	ldr	r2, [r3, #12]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005638:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800563a:	f7fd fd3b 	bl	80030b4 <HAL_GetTick>
 800563e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005640:	e00c      	b.n	800565c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005642:	f7fd fd37 	bl	80030b4 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005650:	d904      	bls.n	800565c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2204      	movs	r2, #4
 8005656:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005666:	2b00      	cmp	r3, #0
 8005668:	d102      	bne.n	8005670 <RTC_EnterInitMode+0x64>
 800566a:	7bfb      	ldrb	r3, [r7, #15]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d1e8      	bne.n	8005642 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005670:	7bfb      	ldrb	r3, [r7, #15]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b084      	sub	sp, #16
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005682:	2300      	movs	r3, #0
 8005684:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68da      	ldr	r2, [r3, #12]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005694:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f003 0320 	and.w	r3, r3, #32
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10a      	bne.n	80056ba <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f7ff ff89 	bl	80055bc <HAL_RTC_WaitForSynchro>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d004      	beq.n	80056ba <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2204      	movs	r2, #4
 80056b4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80056ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	4603      	mov	r3, r0
 80056cc:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80056ce:	2300      	movs	r3, #0
 80056d0:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80056d2:	e005      	b.n	80056e0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80056d4:	7bfb      	ldrb	r3, [r7, #15]
 80056d6:	3301      	adds	r3, #1
 80056d8:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80056da:	79fb      	ldrb	r3, [r7, #7]
 80056dc:	3b0a      	subs	r3, #10
 80056de:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80056e0:	79fb      	ldrb	r3, [r7, #7]
 80056e2:	2b09      	cmp	r3, #9
 80056e4:	d8f6      	bhi.n	80056d4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80056e6:	7bfb      	ldrb	r3, [r7, #15]
 80056e8:	011b      	lsls	r3, r3, #4
 80056ea:	b2da      	uxtb	r2, r3
 80056ec:	79fb      	ldrb	r3, [r7, #7]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	b2db      	uxtb	r3, r3
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3714      	adds	r7, #20
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b086      	sub	sp, #24
 8005702:	af00      	add	r7, sp, #0
 8005704:	60f8      	str	r0, [r7, #12]
 8005706:	60b9      	str	r1, [r7, #8]
 8005708:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800570a:	2300      	movs	r3, #0
 800570c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	7f1b      	ldrb	r3, [r3, #28]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d101      	bne.n	800571a <HAL_RTCEx_SetWakeUpTimer+0x1c>
 8005716:	2302      	movs	r3, #2
 8005718:	e08a      	b.n	8005830 <HAL_RTCEx_SetWakeUpTimer+0x132>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2201      	movs	r2, #1
 800571e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2202      	movs	r2, #2
 8005724:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	22ca      	movs	r2, #202	; 0xca
 800572c:	625a      	str	r2, [r3, #36]	; 0x24
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2253      	movs	r2, #83	; 0x53
 8005734:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005740:	2b00      	cmp	r3, #0
 8005742:	d01e      	beq.n	8005782 <HAL_RTCEx_SetWakeUpTimer+0x84>
  {
    tickstart = HAL_GetTick();
 8005744:	f7fd fcb6 	bl	80030b4 <HAL_GetTick>
 8005748:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 800574a:	e013      	b.n	8005774 <HAL_RTCEx_SetWakeUpTimer+0x76>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800574c:	f7fd fcb2 	bl	80030b4 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800575a:	d90b      	bls.n	8005774 <HAL_RTCEx_SetWakeUpTimer+0x76>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	22ff      	movs	r2, #255	; 0xff
 8005762:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2203      	movs	r2, #3
 8005768:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e05d      	b.n	8005830 <HAL_RTCEx_SetWakeUpTimer+0x132>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	f003 0304 	and.w	r3, r3, #4
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1e4      	bne.n	800574c <HAL_RTCEx_SetWakeUpTimer+0x4e>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	689a      	ldr	r2, [r3, #8]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005790:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	b2da      	uxtb	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80057a2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80057a4:	f7fd fc86 	bl	80030b4 <HAL_GetTick>
 80057a8:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80057aa:	e013      	b.n	80057d4 <HAL_RTCEx_SetWakeUpTimer+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80057ac:	f7fd fc82 	bl	80030b4 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057ba:	d90b      	bls.n	80057d4 <HAL_RTCEx_SetWakeUpTimer+0xd6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	22ff      	movs	r2, #255	; 0xff
 80057c2:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2203      	movs	r2, #3
 80057c8:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e02d      	b.n	8005830 <HAL_RTCEx_SetWakeUpTimer+0x132>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	f003 0304 	and.w	r3, r3, #4
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d0e4      	beq.n	80057ac <HAL_RTCEx_SetWakeUpTimer+0xae>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689a      	ldr	r2, [r3, #8]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f022 0207 	bic.w	r2, r2, #7
 80057f0:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6899      	ldr	r1, [r3, #8]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	430a      	orrs	r2, r1
 8005800:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	689a      	ldr	r2, [r3, #8]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005818:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	22ff      	movs	r2, #255	; 0xff
 8005820:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2201      	movs	r2, #1
 8005826:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3718      	adds	r7, #24
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e041      	b.n	80058ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d106      	bne.n	8005864 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f7fd f888 	bl	8002974 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2202      	movs	r2, #2
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	3304      	adds	r3, #4
 8005874:	4619      	mov	r1, r3
 8005876:	4610      	mov	r0, r2
 8005878:	f000 ff7e 	bl	8006778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3708      	adds	r7, #8
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b082      	sub	sp, #8
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e041      	b.n	800596c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d106      	bne.n	8005902 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f839 	bl	8005974 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2202      	movs	r2, #2
 8005906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	3304      	adds	r3, #4
 8005912:	4619      	mov	r1, r3
 8005914:	4610      	mov	r0, r2
 8005916:	f000 ff2f 	bl	8006778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3708      	adds	r7, #8
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d109      	bne.n	80059ac <HAL_TIM_PWM_Start+0x24>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	bf14      	ite	ne
 80059a4:	2301      	movne	r3, #1
 80059a6:	2300      	moveq	r3, #0
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	e022      	b.n	80059f2 <HAL_TIM_PWM_Start+0x6a>
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	2b04      	cmp	r3, #4
 80059b0:	d109      	bne.n	80059c6 <HAL_TIM_PWM_Start+0x3e>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	bf14      	ite	ne
 80059be:	2301      	movne	r3, #1
 80059c0:	2300      	moveq	r3, #0
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	e015      	b.n	80059f2 <HAL_TIM_PWM_Start+0x6a>
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	2b08      	cmp	r3, #8
 80059ca:	d109      	bne.n	80059e0 <HAL_TIM_PWM_Start+0x58>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	bf14      	ite	ne
 80059d8:	2301      	movne	r3, #1
 80059da:	2300      	moveq	r3, #0
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	e008      	b.n	80059f2 <HAL_TIM_PWM_Start+0x6a>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	bf14      	ite	ne
 80059ec:	2301      	movne	r3, #1
 80059ee:	2300      	moveq	r3, #0
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d001      	beq.n	80059fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e07c      	b.n	8005af4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d104      	bne.n	8005a0a <HAL_TIM_PWM_Start+0x82>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a08:	e013      	b.n	8005a32 <HAL_TIM_PWM_Start+0xaa>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b04      	cmp	r3, #4
 8005a0e:	d104      	bne.n	8005a1a <HAL_TIM_PWM_Start+0x92>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2202      	movs	r2, #2
 8005a14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a18:	e00b      	b.n	8005a32 <HAL_TIM_PWM_Start+0xaa>
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	2b08      	cmp	r3, #8
 8005a1e:	d104      	bne.n	8005a2a <HAL_TIM_PWM_Start+0xa2>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2202      	movs	r2, #2
 8005a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a28:	e003      	b.n	8005a32 <HAL_TIM_PWM_Start+0xaa>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2201      	movs	r2, #1
 8005a38:	6839      	ldr	r1, [r7, #0]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f001 fb42 	bl	80070c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a2d      	ldr	r2, [pc, #180]	; (8005afc <HAL_TIM_PWM_Start+0x174>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d004      	beq.n	8005a54 <HAL_TIM_PWM_Start+0xcc>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a2c      	ldr	r2, [pc, #176]	; (8005b00 <HAL_TIM_PWM_Start+0x178>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d101      	bne.n	8005a58 <HAL_TIM_PWM_Start+0xd0>
 8005a54:	2301      	movs	r3, #1
 8005a56:	e000      	b.n	8005a5a <HAL_TIM_PWM_Start+0xd2>
 8005a58:	2300      	movs	r3, #0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d007      	beq.n	8005a6e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a22      	ldr	r2, [pc, #136]	; (8005afc <HAL_TIM_PWM_Start+0x174>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d022      	beq.n	8005abe <HAL_TIM_PWM_Start+0x136>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a80:	d01d      	beq.n	8005abe <HAL_TIM_PWM_Start+0x136>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a1f      	ldr	r2, [pc, #124]	; (8005b04 <HAL_TIM_PWM_Start+0x17c>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d018      	beq.n	8005abe <HAL_TIM_PWM_Start+0x136>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a1d      	ldr	r2, [pc, #116]	; (8005b08 <HAL_TIM_PWM_Start+0x180>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d013      	beq.n	8005abe <HAL_TIM_PWM_Start+0x136>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a1c      	ldr	r2, [pc, #112]	; (8005b0c <HAL_TIM_PWM_Start+0x184>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d00e      	beq.n	8005abe <HAL_TIM_PWM_Start+0x136>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a16      	ldr	r2, [pc, #88]	; (8005b00 <HAL_TIM_PWM_Start+0x178>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d009      	beq.n	8005abe <HAL_TIM_PWM_Start+0x136>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a18      	ldr	r2, [pc, #96]	; (8005b10 <HAL_TIM_PWM_Start+0x188>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d004      	beq.n	8005abe <HAL_TIM_PWM_Start+0x136>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a16      	ldr	r2, [pc, #88]	; (8005b14 <HAL_TIM_PWM_Start+0x18c>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d111      	bne.n	8005ae2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f003 0307 	and.w	r3, r3, #7
 8005ac8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2b06      	cmp	r3, #6
 8005ace:	d010      	beq.n	8005af2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 0201 	orr.w	r2, r2, #1
 8005ade:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ae0:	e007      	b.n	8005af2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f042 0201 	orr.w	r2, r2, #1
 8005af0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	40010000 	.word	0x40010000
 8005b00:	40010400 	.word	0x40010400
 8005b04:	40000400 	.word	0x40000400
 8005b08:	40000800 	.word	0x40000800
 8005b0c:	40000c00 	.word	0x40000c00
 8005b10:	40014000 	.word	0x40014000
 8005b14:	40001800 	.word	0x40001800

08005b18 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e041      	b.n	8005bae <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d106      	bne.n	8005b44 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7fc fe96 	bl	8002870 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2202      	movs	r2, #2
 8005b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	3304      	adds	r3, #4
 8005b54:	4619      	mov	r1, r3
 8005b56:	4610      	mov	r0, r2
 8005b58:	f000 fe0e 	bl	8006778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
	...

08005bb8 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d104      	bne.n	8005bd2 <HAL_TIM_IC_Start+0x1a>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	e013      	b.n	8005bfa <HAL_TIM_IC_Start+0x42>
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b04      	cmp	r3, #4
 8005bd6:	d104      	bne.n	8005be2 <HAL_TIM_IC_Start+0x2a>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	e00b      	b.n	8005bfa <HAL_TIM_IC_Start+0x42>
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	d104      	bne.n	8005bf2 <HAL_TIM_IC_Start+0x3a>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	e003      	b.n	8005bfa <HAL_TIM_IC_Start+0x42>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d104      	bne.n	8005c0c <HAL_TIM_IC_Start+0x54>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	e013      	b.n	8005c34 <HAL_TIM_IC_Start+0x7c>
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	2b04      	cmp	r3, #4
 8005c10:	d104      	bne.n	8005c1c <HAL_TIM_IC_Start+0x64>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	e00b      	b.n	8005c34 <HAL_TIM_IC_Start+0x7c>
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	2b08      	cmp	r3, #8
 8005c20:	d104      	bne.n	8005c2c <HAL_TIM_IC_Start+0x74>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	e003      	b.n	8005c34 <HAL_TIM_IC_Start+0x7c>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c36:	7bfb      	ldrb	r3, [r7, #15]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d102      	bne.n	8005c42 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c3c:	7bbb      	ldrb	r3, [r7, #14]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d001      	beq.n	8005c46 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e081      	b.n	8005d4a <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d104      	bne.n	8005c56 <HAL_TIM_IC_Start+0x9e>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c54:	e013      	b.n	8005c7e <HAL_TIM_IC_Start+0xc6>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b04      	cmp	r3, #4
 8005c5a:	d104      	bne.n	8005c66 <HAL_TIM_IC_Start+0xae>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c64:	e00b      	b.n	8005c7e <HAL_TIM_IC_Start+0xc6>
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	2b08      	cmp	r3, #8
 8005c6a:	d104      	bne.n	8005c76 <HAL_TIM_IC_Start+0xbe>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c74:	e003      	b.n	8005c7e <HAL_TIM_IC_Start+0xc6>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2202      	movs	r2, #2
 8005c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d104      	bne.n	8005c8e <HAL_TIM_IC_Start+0xd6>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c8c:	e013      	b.n	8005cb6 <HAL_TIM_IC_Start+0xfe>
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	2b04      	cmp	r3, #4
 8005c92:	d104      	bne.n	8005c9e <HAL_TIM_IC_Start+0xe6>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2202      	movs	r2, #2
 8005c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c9c:	e00b      	b.n	8005cb6 <HAL_TIM_IC_Start+0xfe>
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	2b08      	cmp	r3, #8
 8005ca2:	d104      	bne.n	8005cae <HAL_TIM_IC_Start+0xf6>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cac:	e003      	b.n	8005cb6 <HAL_TIM_IC_Start+0xfe>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2202      	movs	r2, #2
 8005cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	6839      	ldr	r1, [r7, #0]
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f001 fa00 	bl	80070c4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a22      	ldr	r2, [pc, #136]	; (8005d54 <HAL_TIM_IC_Start+0x19c>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d022      	beq.n	8005d14 <HAL_TIM_IC_Start+0x15c>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cd6:	d01d      	beq.n	8005d14 <HAL_TIM_IC_Start+0x15c>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a1e      	ldr	r2, [pc, #120]	; (8005d58 <HAL_TIM_IC_Start+0x1a0>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d018      	beq.n	8005d14 <HAL_TIM_IC_Start+0x15c>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a1d      	ldr	r2, [pc, #116]	; (8005d5c <HAL_TIM_IC_Start+0x1a4>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d013      	beq.n	8005d14 <HAL_TIM_IC_Start+0x15c>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a1b      	ldr	r2, [pc, #108]	; (8005d60 <HAL_TIM_IC_Start+0x1a8>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d00e      	beq.n	8005d14 <HAL_TIM_IC_Start+0x15c>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a1a      	ldr	r2, [pc, #104]	; (8005d64 <HAL_TIM_IC_Start+0x1ac>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d009      	beq.n	8005d14 <HAL_TIM_IC_Start+0x15c>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a18      	ldr	r2, [pc, #96]	; (8005d68 <HAL_TIM_IC_Start+0x1b0>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d004      	beq.n	8005d14 <HAL_TIM_IC_Start+0x15c>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a17      	ldr	r2, [pc, #92]	; (8005d6c <HAL_TIM_IC_Start+0x1b4>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d111      	bne.n	8005d38 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f003 0307 	and.w	r3, r3, #7
 8005d1e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2b06      	cmp	r3, #6
 8005d24:	d010      	beq.n	8005d48 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f042 0201 	orr.w	r2, r2, #1
 8005d34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d36:	e007      	b.n	8005d48 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f042 0201 	orr.w	r2, r2, #1
 8005d46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	40010000 	.word	0x40010000
 8005d58:	40000400 	.word	0x40000400
 8005d5c:	40000800 	.word	0x40000800
 8005d60:	40000c00 	.word	0x40000c00
 8005d64:	40010400 	.word	0x40010400
 8005d68:	40014000 	.word	0x40014000
 8005d6c:	40001800 	.word	0x40001800

08005d70 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d104      	bne.n	8005d8e <HAL_TIM_IC_Start_IT+0x1e>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	e013      	b.n	8005db6 <HAL_TIM_IC_Start_IT+0x46>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b04      	cmp	r3, #4
 8005d92:	d104      	bne.n	8005d9e <HAL_TIM_IC_Start_IT+0x2e>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	e00b      	b.n	8005db6 <HAL_TIM_IC_Start_IT+0x46>
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	2b08      	cmp	r3, #8
 8005da2:	d104      	bne.n	8005dae <HAL_TIM_IC_Start_IT+0x3e>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	e003      	b.n	8005db6 <HAL_TIM_IC_Start_IT+0x46>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d104      	bne.n	8005dc8 <HAL_TIM_IC_Start_IT+0x58>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	e013      	b.n	8005df0 <HAL_TIM_IC_Start_IT+0x80>
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	2b04      	cmp	r3, #4
 8005dcc:	d104      	bne.n	8005dd8 <HAL_TIM_IC_Start_IT+0x68>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	e00b      	b.n	8005df0 <HAL_TIM_IC_Start_IT+0x80>
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	2b08      	cmp	r3, #8
 8005ddc:	d104      	bne.n	8005de8 <HAL_TIM_IC_Start_IT+0x78>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	e003      	b.n	8005df0 <HAL_TIM_IC_Start_IT+0x80>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005df2:	7bbb      	ldrb	r3, [r7, #14]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d102      	bne.n	8005dfe <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005df8:	7b7b      	ldrb	r3, [r7, #13]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d001      	beq.n	8005e02 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e0cc      	b.n	8005f9c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d104      	bne.n	8005e12 <HAL_TIM_IC_Start_IT+0xa2>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e10:	e013      	b.n	8005e3a <HAL_TIM_IC_Start_IT+0xca>
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2b04      	cmp	r3, #4
 8005e16:	d104      	bne.n	8005e22 <HAL_TIM_IC_Start_IT+0xb2>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e20:	e00b      	b.n	8005e3a <HAL_TIM_IC_Start_IT+0xca>
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	2b08      	cmp	r3, #8
 8005e26:	d104      	bne.n	8005e32 <HAL_TIM_IC_Start_IT+0xc2>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e30:	e003      	b.n	8005e3a <HAL_TIM_IC_Start_IT+0xca>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2202      	movs	r2, #2
 8005e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d104      	bne.n	8005e4a <HAL_TIM_IC_Start_IT+0xda>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2202      	movs	r2, #2
 8005e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e48:	e013      	b.n	8005e72 <HAL_TIM_IC_Start_IT+0x102>
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	2b04      	cmp	r3, #4
 8005e4e:	d104      	bne.n	8005e5a <HAL_TIM_IC_Start_IT+0xea>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e58:	e00b      	b.n	8005e72 <HAL_TIM_IC_Start_IT+0x102>
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	2b08      	cmp	r3, #8
 8005e5e:	d104      	bne.n	8005e6a <HAL_TIM_IC_Start_IT+0xfa>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2202      	movs	r2, #2
 8005e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e68:	e003      	b.n	8005e72 <HAL_TIM_IC_Start_IT+0x102>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2202      	movs	r2, #2
 8005e6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	2b0c      	cmp	r3, #12
 8005e76:	d841      	bhi.n	8005efc <HAL_TIM_IC_Start_IT+0x18c>
 8005e78:	a201      	add	r2, pc, #4	; (adr r2, 8005e80 <HAL_TIM_IC_Start_IT+0x110>)
 8005e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e7e:	bf00      	nop
 8005e80:	08005eb5 	.word	0x08005eb5
 8005e84:	08005efd 	.word	0x08005efd
 8005e88:	08005efd 	.word	0x08005efd
 8005e8c:	08005efd 	.word	0x08005efd
 8005e90:	08005ec7 	.word	0x08005ec7
 8005e94:	08005efd 	.word	0x08005efd
 8005e98:	08005efd 	.word	0x08005efd
 8005e9c:	08005efd 	.word	0x08005efd
 8005ea0:	08005ed9 	.word	0x08005ed9
 8005ea4:	08005efd 	.word	0x08005efd
 8005ea8:	08005efd 	.word	0x08005efd
 8005eac:	08005efd 	.word	0x08005efd
 8005eb0:	08005eeb 	.word	0x08005eeb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68da      	ldr	r2, [r3, #12]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f042 0202 	orr.w	r2, r2, #2
 8005ec2:	60da      	str	r2, [r3, #12]
      break;
 8005ec4:	e01d      	b.n	8005f02 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68da      	ldr	r2, [r3, #12]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f042 0204 	orr.w	r2, r2, #4
 8005ed4:	60da      	str	r2, [r3, #12]
      break;
 8005ed6:	e014      	b.n	8005f02 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68da      	ldr	r2, [r3, #12]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f042 0208 	orr.w	r2, r2, #8
 8005ee6:	60da      	str	r2, [r3, #12]
      break;
 8005ee8:	e00b      	b.n	8005f02 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68da      	ldr	r2, [r3, #12]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f042 0210 	orr.w	r2, r2, #16
 8005ef8:	60da      	str	r2, [r3, #12]
      break;
 8005efa:	e002      	b.n	8005f02 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	73fb      	strb	r3, [r7, #15]
      break;
 8005f00:	bf00      	nop
  }

  if (status == HAL_OK)
 8005f02:	7bfb      	ldrb	r3, [r7, #15]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d148      	bne.n	8005f9a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	6839      	ldr	r1, [r7, #0]
 8005f10:	4618      	mov	r0, r3
 8005f12:	f001 f8d7 	bl	80070c4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a22      	ldr	r2, [pc, #136]	; (8005fa4 <HAL_TIM_IC_Start_IT+0x234>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d022      	beq.n	8005f66 <HAL_TIM_IC_Start_IT+0x1f6>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f28:	d01d      	beq.n	8005f66 <HAL_TIM_IC_Start_IT+0x1f6>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a1e      	ldr	r2, [pc, #120]	; (8005fa8 <HAL_TIM_IC_Start_IT+0x238>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d018      	beq.n	8005f66 <HAL_TIM_IC_Start_IT+0x1f6>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a1c      	ldr	r2, [pc, #112]	; (8005fac <HAL_TIM_IC_Start_IT+0x23c>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d013      	beq.n	8005f66 <HAL_TIM_IC_Start_IT+0x1f6>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a1b      	ldr	r2, [pc, #108]	; (8005fb0 <HAL_TIM_IC_Start_IT+0x240>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d00e      	beq.n	8005f66 <HAL_TIM_IC_Start_IT+0x1f6>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a19      	ldr	r2, [pc, #100]	; (8005fb4 <HAL_TIM_IC_Start_IT+0x244>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d009      	beq.n	8005f66 <HAL_TIM_IC_Start_IT+0x1f6>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a18      	ldr	r2, [pc, #96]	; (8005fb8 <HAL_TIM_IC_Start_IT+0x248>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d004      	beq.n	8005f66 <HAL_TIM_IC_Start_IT+0x1f6>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a16      	ldr	r2, [pc, #88]	; (8005fbc <HAL_TIM_IC_Start_IT+0x24c>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d111      	bne.n	8005f8a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f003 0307 	and.w	r3, r3, #7
 8005f70:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	2b06      	cmp	r3, #6
 8005f76:	d010      	beq.n	8005f9a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f042 0201 	orr.w	r2, r2, #1
 8005f86:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f88:	e007      	b.n	8005f9a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f042 0201 	orr.w	r2, r2, #1
 8005f98:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	40010000 	.word	0x40010000
 8005fa8:	40000400 	.word	0x40000400
 8005fac:	40000800 	.word	0x40000800
 8005fb0:	40000c00 	.word	0x40000c00
 8005fb4:	40010400 	.word	0x40010400
 8005fb8:	40014000 	.word	0x40014000
 8005fbc:	40001800 	.word	0x40001800

08005fc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d122      	bne.n	800601c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	f003 0302 	and.w	r3, r3, #2
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d11b      	bne.n	800601c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f06f 0202 	mvn.w	r2, #2
 8005fec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	f003 0303 	and.w	r3, r3, #3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d003      	beq.n	800600a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7fa ffbe 	bl	8000f84 <HAL_TIM_IC_CaptureCallback>
 8006008:	e005      	b.n	8006016 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 fb96 	bl	800673c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 fb9d 	bl	8006750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	f003 0304 	and.w	r3, r3, #4
 8006026:	2b04      	cmp	r3, #4
 8006028:	d122      	bne.n	8006070 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	f003 0304 	and.w	r3, r3, #4
 8006034:	2b04      	cmp	r3, #4
 8006036:	d11b      	bne.n	8006070 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f06f 0204 	mvn.w	r2, #4
 8006040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2202      	movs	r2, #2
 8006046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006052:	2b00      	cmp	r3, #0
 8006054:	d003      	beq.n	800605e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7fa ff94 	bl	8000f84 <HAL_TIM_IC_CaptureCallback>
 800605c:	e005      	b.n	800606a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 fb6c 	bl	800673c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 fb73 	bl	8006750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	f003 0308 	and.w	r3, r3, #8
 800607a:	2b08      	cmp	r3, #8
 800607c:	d122      	bne.n	80060c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	f003 0308 	and.w	r3, r3, #8
 8006088:	2b08      	cmp	r3, #8
 800608a:	d11b      	bne.n	80060c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f06f 0208 	mvn.w	r2, #8
 8006094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2204      	movs	r2, #4
 800609a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	69db      	ldr	r3, [r3, #28]
 80060a2:	f003 0303 	and.w	r3, r3, #3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d003      	beq.n	80060b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7fa ff6a 	bl	8000f84 <HAL_TIM_IC_CaptureCallback>
 80060b0:	e005      	b.n	80060be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 fb42 	bl	800673c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 fb49 	bl	8006750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	f003 0310 	and.w	r3, r3, #16
 80060ce:	2b10      	cmp	r3, #16
 80060d0:	d122      	bne.n	8006118 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	f003 0310 	and.w	r3, r3, #16
 80060dc:	2b10      	cmp	r3, #16
 80060de:	d11b      	bne.n	8006118 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f06f 0210 	mvn.w	r2, #16
 80060e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2208      	movs	r2, #8
 80060ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d003      	beq.n	8006106 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7fa ff40 	bl	8000f84 <HAL_TIM_IC_CaptureCallback>
 8006104:	e005      	b.n	8006112 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 fb18 	bl	800673c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 fb1f 	bl	8006750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b01      	cmp	r3, #1
 8006124:	d10e      	bne.n	8006144 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	f003 0301 	and.w	r3, r3, #1
 8006130:	2b01      	cmp	r3, #1
 8006132:	d107      	bne.n	8006144 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f06f 0201 	mvn.w	r2, #1
 800613c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 faf2 	bl	8006728 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800614e:	2b80      	cmp	r3, #128	; 0x80
 8006150:	d10e      	bne.n	8006170 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800615c:	2b80      	cmp	r3, #128	; 0x80
 800615e:	d107      	bne.n	8006170 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f001 f856 	bl	800721c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800617a:	2b40      	cmp	r3, #64	; 0x40
 800617c:	d10e      	bne.n	800619c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006188:	2b40      	cmp	r3, #64	; 0x40
 800618a:	d107      	bne.n	800619c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fae4 	bl	8006764 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	f003 0320 	and.w	r3, r3, #32
 80061a6:	2b20      	cmp	r3, #32
 80061a8:	d10e      	bne.n	80061c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	f003 0320 	and.w	r3, r3, #32
 80061b4:	2b20      	cmp	r3, #32
 80061b6:	d107      	bne.n	80061c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f06f 0220 	mvn.w	r2, #32
 80061c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f001 f820 	bl	8007208 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061c8:	bf00      	nop
 80061ca:	3708      	adds	r7, #8
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061dc:	2300      	movs	r3, #0
 80061de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d101      	bne.n	80061ee <HAL_TIM_IC_ConfigChannel+0x1e>
 80061ea:	2302      	movs	r3, #2
 80061ec:	e088      	b.n	8006300 <HAL_TIM_IC_ConfigChannel+0x130>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d11b      	bne.n	8006234 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6818      	ldr	r0, [r3, #0]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	6819      	ldr	r1, [r3, #0]
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	685a      	ldr	r2, [r3, #4]
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	f000 fd96 	bl	8006d3c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	699a      	ldr	r2, [r3, #24]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 020c 	bic.w	r2, r2, #12
 800621e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6999      	ldr	r1, [r3, #24]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	689a      	ldr	r2, [r3, #8]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	619a      	str	r2, [r3, #24]
 8006232:	e060      	b.n	80062f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b04      	cmp	r3, #4
 8006238:	d11c      	bne.n	8006274 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6818      	ldr	r0, [r3, #0]
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	6819      	ldr	r1, [r3, #0]
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	685a      	ldr	r2, [r3, #4]
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	f000 fe1a 	bl	8006e82 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	699a      	ldr	r2, [r3, #24]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800625c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6999      	ldr	r1, [r3, #24]
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	021a      	lsls	r2, r3, #8
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	430a      	orrs	r2, r1
 8006270:	619a      	str	r2, [r3, #24]
 8006272:	e040      	b.n	80062f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b08      	cmp	r3, #8
 8006278:	d11b      	bne.n	80062b2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6818      	ldr	r0, [r3, #0]
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	6819      	ldr	r1, [r3, #0]
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	f000 fe67 	bl	8006f5c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	69da      	ldr	r2, [r3, #28]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f022 020c 	bic.w	r2, r2, #12
 800629c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	69d9      	ldr	r1, [r3, #28]
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	689a      	ldr	r2, [r3, #8]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	430a      	orrs	r2, r1
 80062ae:	61da      	str	r2, [r3, #28]
 80062b0:	e021      	b.n	80062f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2b0c      	cmp	r3, #12
 80062b6:	d11c      	bne.n	80062f2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6818      	ldr	r0, [r3, #0]
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	6819      	ldr	r1, [r3, #0]
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	685a      	ldr	r2, [r3, #4]
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f000 fe84 	bl	8006fd4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	69da      	ldr	r2, [r3, #28]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80062da:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	69d9      	ldr	r1, [r3, #28]
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	021a      	lsls	r2, r3, #8
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	430a      	orrs	r2, r1
 80062ee:	61da      	str	r2, [r3, #28]
 80062f0:	e001      	b.n	80062f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3718      	adds	r7, #24
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006314:	2300      	movs	r3, #0
 8006316:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800631e:	2b01      	cmp	r3, #1
 8006320:	d101      	bne.n	8006326 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006322:	2302      	movs	r3, #2
 8006324:	e0ae      	b.n	8006484 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2b0c      	cmp	r3, #12
 8006332:	f200 809f 	bhi.w	8006474 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006336:	a201      	add	r2, pc, #4	; (adr r2, 800633c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633c:	08006371 	.word	0x08006371
 8006340:	08006475 	.word	0x08006475
 8006344:	08006475 	.word	0x08006475
 8006348:	08006475 	.word	0x08006475
 800634c:	080063b1 	.word	0x080063b1
 8006350:	08006475 	.word	0x08006475
 8006354:	08006475 	.word	0x08006475
 8006358:	08006475 	.word	0x08006475
 800635c:	080063f3 	.word	0x080063f3
 8006360:	08006475 	.word	0x08006475
 8006364:	08006475 	.word	0x08006475
 8006368:	08006475 	.word	0x08006475
 800636c:	08006433 	.word	0x08006433
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68b9      	ldr	r1, [r7, #8]
 8006376:	4618      	mov	r0, r3
 8006378:	f000 fa9e 	bl	80068b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	699a      	ldr	r2, [r3, #24]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f042 0208 	orr.w	r2, r2, #8
 800638a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	699a      	ldr	r2, [r3, #24]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f022 0204 	bic.w	r2, r2, #4
 800639a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6999      	ldr	r1, [r3, #24]
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	691a      	ldr	r2, [r3, #16]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	430a      	orrs	r2, r1
 80063ac:	619a      	str	r2, [r3, #24]
      break;
 80063ae:	e064      	b.n	800647a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68b9      	ldr	r1, [r7, #8]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f000 faee 	bl	8006998 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	699a      	ldr	r2, [r3, #24]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	699a      	ldr	r2, [r3, #24]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6999      	ldr	r1, [r3, #24]
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	021a      	lsls	r2, r3, #8
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	430a      	orrs	r2, r1
 80063ee:	619a      	str	r2, [r3, #24]
      break;
 80063f0:	e043      	b.n	800647a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68b9      	ldr	r1, [r7, #8]
 80063f8:	4618      	mov	r0, r3
 80063fa:	f000 fb43 	bl	8006a84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	69da      	ldr	r2, [r3, #28]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f042 0208 	orr.w	r2, r2, #8
 800640c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	69da      	ldr	r2, [r3, #28]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f022 0204 	bic.w	r2, r2, #4
 800641c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	69d9      	ldr	r1, [r3, #28]
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	691a      	ldr	r2, [r3, #16]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	430a      	orrs	r2, r1
 800642e:	61da      	str	r2, [r3, #28]
      break;
 8006430:	e023      	b.n	800647a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68b9      	ldr	r1, [r7, #8]
 8006438:	4618      	mov	r0, r3
 800643a:	f000 fb97 	bl	8006b6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	69da      	ldr	r2, [r3, #28]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800644c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	69da      	ldr	r2, [r3, #28]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800645c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	69d9      	ldr	r1, [r3, #28]
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	021a      	lsls	r2, r3, #8
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	61da      	str	r2, [r3, #28]
      break;
 8006472:	e002      	b.n	800647a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	75fb      	strb	r3, [r7, #23]
      break;
 8006478:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006482:	7dfb      	ldrb	r3, [r7, #23]
}
 8006484:	4618      	mov	r0, r3
 8006486:	3718      	adds	r7, #24
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006496:	2300      	movs	r3, #0
 8006498:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d101      	bne.n	80064a8 <HAL_TIM_ConfigClockSource+0x1c>
 80064a4:	2302      	movs	r3, #2
 80064a6:	e0b4      	b.n	8006612 <HAL_TIM_ConfigClockSource+0x186>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2202      	movs	r2, #2
 80064b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80064c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064e0:	d03e      	beq.n	8006560 <HAL_TIM_ConfigClockSource+0xd4>
 80064e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064e6:	f200 8087 	bhi.w	80065f8 <HAL_TIM_ConfigClockSource+0x16c>
 80064ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ee:	f000 8086 	beq.w	80065fe <HAL_TIM_ConfigClockSource+0x172>
 80064f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064f6:	d87f      	bhi.n	80065f8 <HAL_TIM_ConfigClockSource+0x16c>
 80064f8:	2b70      	cmp	r3, #112	; 0x70
 80064fa:	d01a      	beq.n	8006532 <HAL_TIM_ConfigClockSource+0xa6>
 80064fc:	2b70      	cmp	r3, #112	; 0x70
 80064fe:	d87b      	bhi.n	80065f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006500:	2b60      	cmp	r3, #96	; 0x60
 8006502:	d050      	beq.n	80065a6 <HAL_TIM_ConfigClockSource+0x11a>
 8006504:	2b60      	cmp	r3, #96	; 0x60
 8006506:	d877      	bhi.n	80065f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006508:	2b50      	cmp	r3, #80	; 0x50
 800650a:	d03c      	beq.n	8006586 <HAL_TIM_ConfigClockSource+0xfa>
 800650c:	2b50      	cmp	r3, #80	; 0x50
 800650e:	d873      	bhi.n	80065f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006510:	2b40      	cmp	r3, #64	; 0x40
 8006512:	d058      	beq.n	80065c6 <HAL_TIM_ConfigClockSource+0x13a>
 8006514:	2b40      	cmp	r3, #64	; 0x40
 8006516:	d86f      	bhi.n	80065f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006518:	2b30      	cmp	r3, #48	; 0x30
 800651a:	d064      	beq.n	80065e6 <HAL_TIM_ConfigClockSource+0x15a>
 800651c:	2b30      	cmp	r3, #48	; 0x30
 800651e:	d86b      	bhi.n	80065f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006520:	2b20      	cmp	r3, #32
 8006522:	d060      	beq.n	80065e6 <HAL_TIM_ConfigClockSource+0x15a>
 8006524:	2b20      	cmp	r3, #32
 8006526:	d867      	bhi.n	80065f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006528:	2b00      	cmp	r3, #0
 800652a:	d05c      	beq.n	80065e6 <HAL_TIM_ConfigClockSource+0x15a>
 800652c:	2b10      	cmp	r3, #16
 800652e:	d05a      	beq.n	80065e6 <HAL_TIM_ConfigClockSource+0x15a>
 8006530:	e062      	b.n	80065f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6818      	ldr	r0, [r3, #0]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	6899      	ldr	r1, [r3, #8]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	685a      	ldr	r2, [r3, #4]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	f000 fd9f 	bl	8007084 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006554:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	609a      	str	r2, [r3, #8]
      break;
 800655e:	e04f      	b.n	8006600 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6818      	ldr	r0, [r3, #0]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	6899      	ldr	r1, [r3, #8]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	f000 fd88 	bl	8007084 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689a      	ldr	r2, [r3, #8]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006582:	609a      	str	r2, [r3, #8]
      break;
 8006584:	e03c      	b.n	8006600 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6818      	ldr	r0, [r3, #0]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	6859      	ldr	r1, [r3, #4]
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	461a      	mov	r2, r3
 8006594:	f000 fc46 	bl	8006e24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2150      	movs	r1, #80	; 0x50
 800659e:	4618      	mov	r0, r3
 80065a0:	f000 fd55 	bl	800704e <TIM_ITRx_SetConfig>
      break;
 80065a4:	e02c      	b.n	8006600 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6818      	ldr	r0, [r3, #0]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	6859      	ldr	r1, [r3, #4]
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	461a      	mov	r2, r3
 80065b4:	f000 fca2 	bl	8006efc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2160      	movs	r1, #96	; 0x60
 80065be:	4618      	mov	r0, r3
 80065c0:	f000 fd45 	bl	800704e <TIM_ITRx_SetConfig>
      break;
 80065c4:	e01c      	b.n	8006600 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6818      	ldr	r0, [r3, #0]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	6859      	ldr	r1, [r3, #4]
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	461a      	mov	r2, r3
 80065d4:	f000 fc26 	bl	8006e24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2140      	movs	r1, #64	; 0x40
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 fd35 	bl	800704e <TIM_ITRx_SetConfig>
      break;
 80065e4:	e00c      	b.n	8006600 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4619      	mov	r1, r3
 80065f0:	4610      	mov	r0, r2
 80065f2:	f000 fd2c 	bl	800704e <TIM_ITRx_SetConfig>
      break;
 80065f6:	e003      	b.n	8006600 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	73fb      	strb	r3, [r7, #15]
      break;
 80065fc:	e000      	b.n	8006600 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80065fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006610:	7bfb      	ldrb	r3, [r7, #15]
}
 8006612:	4618      	mov	r0, r3
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b082      	sub	sp, #8
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
 8006622:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800662a:	2b01      	cmp	r3, #1
 800662c:	d101      	bne.n	8006632 <HAL_TIM_SlaveConfigSynchro+0x18>
 800662e:	2302      	movs	r3, #2
 8006630:	e031      	b.n	8006696 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2202      	movs	r2, #2
 800663e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006642:	6839      	ldr	r1, [r7, #0]
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 fae7 	bl	8006c18 <TIM_SlaveTimer_SetConfig>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d009      	beq.n	8006664 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e018      	b.n	8006696 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68da      	ldr	r2, [r3, #12]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006672:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68da      	ldr	r2, [r3, #12]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006682:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3708      	adds	r7, #8
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
	...

080066a0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80066aa:	2300      	movs	r3, #0
 80066ac:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	2b0c      	cmp	r3, #12
 80066b2:	d831      	bhi.n	8006718 <HAL_TIM_ReadCapturedValue+0x78>
 80066b4:	a201      	add	r2, pc, #4	; (adr r2, 80066bc <HAL_TIM_ReadCapturedValue+0x1c>)
 80066b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ba:	bf00      	nop
 80066bc:	080066f1 	.word	0x080066f1
 80066c0:	08006719 	.word	0x08006719
 80066c4:	08006719 	.word	0x08006719
 80066c8:	08006719 	.word	0x08006719
 80066cc:	080066fb 	.word	0x080066fb
 80066d0:	08006719 	.word	0x08006719
 80066d4:	08006719 	.word	0x08006719
 80066d8:	08006719 	.word	0x08006719
 80066dc:	08006705 	.word	0x08006705
 80066e0:	08006719 	.word	0x08006719
 80066e4:	08006719 	.word	0x08006719
 80066e8:	08006719 	.word	0x08006719
 80066ec:	0800670f 	.word	0x0800670f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f6:	60fb      	str	r3, [r7, #12]

      break;
 80066f8:	e00f      	b.n	800671a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006700:	60fb      	str	r3, [r7, #12]

      break;
 8006702:	e00a      	b.n	800671a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800670a:	60fb      	str	r3, [r7, #12]

      break;
 800670c:	e005      	b.n	800671a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006714:	60fb      	str	r3, [r7, #12]

      break;
 8006716:	e000      	b.n	800671a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006718:	bf00      	nop
  }

  return tmpreg;
 800671a:	68fb      	ldr	r3, [r7, #12]
}
 800671c:	4618      	mov	r0, r3
 800671e:	3714      	adds	r7, #20
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a40      	ldr	r2, [pc, #256]	; (800688c <TIM_Base_SetConfig+0x114>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d013      	beq.n	80067b8 <TIM_Base_SetConfig+0x40>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006796:	d00f      	beq.n	80067b8 <TIM_Base_SetConfig+0x40>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a3d      	ldr	r2, [pc, #244]	; (8006890 <TIM_Base_SetConfig+0x118>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d00b      	beq.n	80067b8 <TIM_Base_SetConfig+0x40>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a3c      	ldr	r2, [pc, #240]	; (8006894 <TIM_Base_SetConfig+0x11c>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d007      	beq.n	80067b8 <TIM_Base_SetConfig+0x40>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a3b      	ldr	r2, [pc, #236]	; (8006898 <TIM_Base_SetConfig+0x120>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d003      	beq.n	80067b8 <TIM_Base_SetConfig+0x40>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a3a      	ldr	r2, [pc, #232]	; (800689c <TIM_Base_SetConfig+0x124>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d108      	bne.n	80067ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a2f      	ldr	r2, [pc, #188]	; (800688c <TIM_Base_SetConfig+0x114>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d02b      	beq.n	800682a <TIM_Base_SetConfig+0xb2>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d8:	d027      	beq.n	800682a <TIM_Base_SetConfig+0xb2>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a2c      	ldr	r2, [pc, #176]	; (8006890 <TIM_Base_SetConfig+0x118>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d023      	beq.n	800682a <TIM_Base_SetConfig+0xb2>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a2b      	ldr	r2, [pc, #172]	; (8006894 <TIM_Base_SetConfig+0x11c>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d01f      	beq.n	800682a <TIM_Base_SetConfig+0xb2>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a2a      	ldr	r2, [pc, #168]	; (8006898 <TIM_Base_SetConfig+0x120>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d01b      	beq.n	800682a <TIM_Base_SetConfig+0xb2>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a29      	ldr	r2, [pc, #164]	; (800689c <TIM_Base_SetConfig+0x124>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d017      	beq.n	800682a <TIM_Base_SetConfig+0xb2>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a28      	ldr	r2, [pc, #160]	; (80068a0 <TIM_Base_SetConfig+0x128>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d013      	beq.n	800682a <TIM_Base_SetConfig+0xb2>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a27      	ldr	r2, [pc, #156]	; (80068a4 <TIM_Base_SetConfig+0x12c>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d00f      	beq.n	800682a <TIM_Base_SetConfig+0xb2>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a26      	ldr	r2, [pc, #152]	; (80068a8 <TIM_Base_SetConfig+0x130>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d00b      	beq.n	800682a <TIM_Base_SetConfig+0xb2>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a25      	ldr	r2, [pc, #148]	; (80068ac <TIM_Base_SetConfig+0x134>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d007      	beq.n	800682a <TIM_Base_SetConfig+0xb2>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a24      	ldr	r2, [pc, #144]	; (80068b0 <TIM_Base_SetConfig+0x138>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d003      	beq.n	800682a <TIM_Base_SetConfig+0xb2>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a23      	ldr	r2, [pc, #140]	; (80068b4 <TIM_Base_SetConfig+0x13c>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d108      	bne.n	800683c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006830:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	4313      	orrs	r3, r2
 800683a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	4313      	orrs	r3, r2
 8006848:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	689a      	ldr	r2, [r3, #8]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a0a      	ldr	r2, [pc, #40]	; (800688c <TIM_Base_SetConfig+0x114>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d003      	beq.n	8006870 <TIM_Base_SetConfig+0xf8>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a0c      	ldr	r2, [pc, #48]	; (800689c <TIM_Base_SetConfig+0x124>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d103      	bne.n	8006878 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	691a      	ldr	r2, [r3, #16]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	615a      	str	r2, [r3, #20]
}
 800687e:	bf00      	nop
 8006880:	3714      	adds	r7, #20
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	40010000 	.word	0x40010000
 8006890:	40000400 	.word	0x40000400
 8006894:	40000800 	.word	0x40000800
 8006898:	40000c00 	.word	0x40000c00
 800689c:	40010400 	.word	0x40010400
 80068a0:	40014000 	.word	0x40014000
 80068a4:	40014400 	.word	0x40014400
 80068a8:	40014800 	.word	0x40014800
 80068ac:	40001800 	.word	0x40001800
 80068b0:	40001c00 	.word	0x40001c00
 80068b4:	40002000 	.word	0x40002000

080068b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b087      	sub	sp, #28
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	f023 0201 	bic.w	r2, r3, #1
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f023 0303 	bic.w	r3, r3, #3
 80068ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	f023 0302 	bic.w	r3, r3, #2
 8006900:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	4313      	orrs	r3, r2
 800690a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a20      	ldr	r2, [pc, #128]	; (8006990 <TIM_OC1_SetConfig+0xd8>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d003      	beq.n	800691c <TIM_OC1_SetConfig+0x64>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a1f      	ldr	r2, [pc, #124]	; (8006994 <TIM_OC1_SetConfig+0xdc>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d10c      	bne.n	8006936 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	f023 0308 	bic.w	r3, r3, #8
 8006922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	697a      	ldr	r2, [r7, #20]
 800692a:	4313      	orrs	r3, r2
 800692c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f023 0304 	bic.w	r3, r3, #4
 8006934:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a15      	ldr	r2, [pc, #84]	; (8006990 <TIM_OC1_SetConfig+0xd8>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d003      	beq.n	8006946 <TIM_OC1_SetConfig+0x8e>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a14      	ldr	r2, [pc, #80]	; (8006994 <TIM_OC1_SetConfig+0xdc>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d111      	bne.n	800696a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800694c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006954:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	4313      	orrs	r3, r2
 800695e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	699b      	ldr	r3, [r3, #24]
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	4313      	orrs	r3, r2
 8006968:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	685a      	ldr	r2, [r3, #4]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	697a      	ldr	r2, [r7, #20]
 8006982:	621a      	str	r2, [r3, #32]
}
 8006984:	bf00      	nop
 8006986:	371c      	adds	r7, #28
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	40010000 	.word	0x40010000
 8006994:	40010400 	.word	0x40010400

08006998 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006998:	b480      	push	{r7}
 800699a:	b087      	sub	sp, #28
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	f023 0210 	bic.w	r2, r3, #16
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	021b      	lsls	r3, r3, #8
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	4313      	orrs	r3, r2
 80069da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	f023 0320 	bic.w	r3, r3, #32
 80069e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	011b      	lsls	r3, r3, #4
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a22      	ldr	r2, [pc, #136]	; (8006a7c <TIM_OC2_SetConfig+0xe4>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d003      	beq.n	8006a00 <TIM_OC2_SetConfig+0x68>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a21      	ldr	r2, [pc, #132]	; (8006a80 <TIM_OC2_SetConfig+0xe8>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d10d      	bne.n	8006a1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	011b      	lsls	r3, r3, #4
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a17      	ldr	r2, [pc, #92]	; (8006a7c <TIM_OC2_SetConfig+0xe4>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d003      	beq.n	8006a2c <TIM_OC2_SetConfig+0x94>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a16      	ldr	r2, [pc, #88]	; (8006a80 <TIM_OC2_SetConfig+0xe8>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d113      	bne.n	8006a54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	693a      	ldr	r2, [r7, #16]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	685a      	ldr	r2, [r3, #4]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	621a      	str	r2, [r3, #32]
}
 8006a6e:	bf00      	nop
 8006a70:	371c      	adds	r7, #28
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	40010000 	.word	0x40010000
 8006a80:	40010400 	.word	0x40010400

08006a84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b087      	sub	sp, #28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f023 0303 	bic.w	r3, r3, #3
 8006aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006acc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	021b      	lsls	r3, r3, #8
 8006ad4:	697a      	ldr	r2, [r7, #20]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a21      	ldr	r2, [pc, #132]	; (8006b64 <TIM_OC3_SetConfig+0xe0>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d003      	beq.n	8006aea <TIM_OC3_SetConfig+0x66>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a20      	ldr	r2, [pc, #128]	; (8006b68 <TIM_OC3_SetConfig+0xe4>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d10d      	bne.n	8006b06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006af0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	021b      	lsls	r3, r3, #8
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a16      	ldr	r2, [pc, #88]	; (8006b64 <TIM_OC3_SetConfig+0xe0>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d003      	beq.n	8006b16 <TIM_OC3_SetConfig+0x92>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a15      	ldr	r2, [pc, #84]	; (8006b68 <TIM_OC3_SetConfig+0xe4>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d113      	bne.n	8006b3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	011b      	lsls	r3, r3, #4
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	011b      	lsls	r3, r3, #4
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	697a      	ldr	r2, [r7, #20]
 8006b56:	621a      	str	r2, [r3, #32]
}
 8006b58:	bf00      	nop
 8006b5a:	371c      	adds	r7, #28
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr
 8006b64:	40010000 	.word	0x40010000
 8006b68:	40010400 	.word	0x40010400

08006b6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b087      	sub	sp, #28
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	021b      	lsls	r3, r3, #8
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	031b      	lsls	r3, r3, #12
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a12      	ldr	r2, [pc, #72]	; (8006c10 <TIM_OC4_SetConfig+0xa4>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d003      	beq.n	8006bd4 <TIM_OC4_SetConfig+0x68>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a11      	ldr	r2, [pc, #68]	; (8006c14 <TIM_OC4_SetConfig+0xa8>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d109      	bne.n	8006be8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	695b      	ldr	r3, [r3, #20]
 8006be0:	019b      	lsls	r3, r3, #6
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	685a      	ldr	r2, [r3, #4]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	621a      	str	r2, [r3, #32]
}
 8006c02:	bf00      	nop
 8006c04:	371c      	adds	r7, #28
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	40010000 	.word	0x40010000
 8006c14:	40010400 	.word	0x40010400

08006c18 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c22:	2300      	movs	r3, #0
 8006c24:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c34:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	f023 0307 	bic.w	r3, r3, #7
 8006c46:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	2b70      	cmp	r3, #112	; 0x70
 8006c60:	d01a      	beq.n	8006c98 <TIM_SlaveTimer_SetConfig+0x80>
 8006c62:	2b70      	cmp	r3, #112	; 0x70
 8006c64:	d860      	bhi.n	8006d28 <TIM_SlaveTimer_SetConfig+0x110>
 8006c66:	2b60      	cmp	r3, #96	; 0x60
 8006c68:	d054      	beq.n	8006d14 <TIM_SlaveTimer_SetConfig+0xfc>
 8006c6a:	2b60      	cmp	r3, #96	; 0x60
 8006c6c:	d85c      	bhi.n	8006d28 <TIM_SlaveTimer_SetConfig+0x110>
 8006c6e:	2b50      	cmp	r3, #80	; 0x50
 8006c70:	d046      	beq.n	8006d00 <TIM_SlaveTimer_SetConfig+0xe8>
 8006c72:	2b50      	cmp	r3, #80	; 0x50
 8006c74:	d858      	bhi.n	8006d28 <TIM_SlaveTimer_SetConfig+0x110>
 8006c76:	2b40      	cmp	r3, #64	; 0x40
 8006c78:	d019      	beq.n	8006cae <TIM_SlaveTimer_SetConfig+0x96>
 8006c7a:	2b40      	cmp	r3, #64	; 0x40
 8006c7c:	d854      	bhi.n	8006d28 <TIM_SlaveTimer_SetConfig+0x110>
 8006c7e:	2b30      	cmp	r3, #48	; 0x30
 8006c80:	d055      	beq.n	8006d2e <TIM_SlaveTimer_SetConfig+0x116>
 8006c82:	2b30      	cmp	r3, #48	; 0x30
 8006c84:	d850      	bhi.n	8006d28 <TIM_SlaveTimer_SetConfig+0x110>
 8006c86:	2b20      	cmp	r3, #32
 8006c88:	d051      	beq.n	8006d2e <TIM_SlaveTimer_SetConfig+0x116>
 8006c8a:	2b20      	cmp	r3, #32
 8006c8c:	d84c      	bhi.n	8006d28 <TIM_SlaveTimer_SetConfig+0x110>
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d04d      	beq.n	8006d2e <TIM_SlaveTimer_SetConfig+0x116>
 8006c92:	2b10      	cmp	r3, #16
 8006c94:	d04b      	beq.n	8006d2e <TIM_SlaveTimer_SetConfig+0x116>
 8006c96:	e047      	b.n	8006d28 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6818      	ldr	r0, [r3, #0]
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	68d9      	ldr	r1, [r3, #12]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	689a      	ldr	r2, [r3, #8]
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	f000 f9ec 	bl	8007084 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8006cac:	e040      	b.n	8006d30 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2b05      	cmp	r3, #5
 8006cb4:	d101      	bne.n	8006cba <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e03b      	b.n	8006d32 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	6a1b      	ldr	r3, [r3, #32]
 8006cc0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	6a1a      	ldr	r2, [r3, #32]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f022 0201 	bic.w	r2, r2, #1
 8006cd0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ce0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	011b      	lsls	r3, r3, #4
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68ba      	ldr	r2, [r7, #8]
 8006cf4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	621a      	str	r2, [r3, #32]
      break;
 8006cfe:	e017      	b.n	8006d30 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6818      	ldr	r0, [r3, #0]
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	6899      	ldr	r1, [r3, #8]
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	f000 f889 	bl	8006e24 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006d12:	e00d      	b.n	8006d30 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6818      	ldr	r0, [r3, #0]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	6899      	ldr	r1, [r3, #8]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	461a      	mov	r2, r3
 8006d22:	f000 f8eb 	bl	8006efc <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006d26:	e003      	b.n	8006d30 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d2c:	e000      	b.n	8006d30 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8006d2e:	bf00      	nop
  }

  return status;
 8006d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3718      	adds	r7, #24
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
	...

08006d3c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b087      	sub	sp, #28
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
 8006d48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	f023 0201 	bic.w	r2, r3, #1
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6a1b      	ldr	r3, [r3, #32]
 8006d60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	4a28      	ldr	r2, [pc, #160]	; (8006e08 <TIM_TI1_SetConfig+0xcc>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d01b      	beq.n	8006da2 <TIM_TI1_SetConfig+0x66>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d70:	d017      	beq.n	8006da2 <TIM_TI1_SetConfig+0x66>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	4a25      	ldr	r2, [pc, #148]	; (8006e0c <TIM_TI1_SetConfig+0xd0>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d013      	beq.n	8006da2 <TIM_TI1_SetConfig+0x66>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	4a24      	ldr	r2, [pc, #144]	; (8006e10 <TIM_TI1_SetConfig+0xd4>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d00f      	beq.n	8006da2 <TIM_TI1_SetConfig+0x66>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	4a23      	ldr	r2, [pc, #140]	; (8006e14 <TIM_TI1_SetConfig+0xd8>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d00b      	beq.n	8006da2 <TIM_TI1_SetConfig+0x66>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	4a22      	ldr	r2, [pc, #136]	; (8006e18 <TIM_TI1_SetConfig+0xdc>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d007      	beq.n	8006da2 <TIM_TI1_SetConfig+0x66>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	4a21      	ldr	r2, [pc, #132]	; (8006e1c <TIM_TI1_SetConfig+0xe0>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d003      	beq.n	8006da2 <TIM_TI1_SetConfig+0x66>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	4a20      	ldr	r2, [pc, #128]	; (8006e20 <TIM_TI1_SetConfig+0xe4>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d101      	bne.n	8006da6 <TIM_TI1_SetConfig+0x6a>
 8006da2:	2301      	movs	r3, #1
 8006da4:	e000      	b.n	8006da8 <TIM_TI1_SetConfig+0x6c>
 8006da6:	2300      	movs	r3, #0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d008      	beq.n	8006dbe <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	f023 0303 	bic.w	r3, r3, #3
 8006db2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	617b      	str	r3, [r7, #20]
 8006dbc:	e003      	b.n	8006dc6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	f043 0301 	orr.w	r3, r3, #1
 8006dc4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	011b      	lsls	r3, r3, #4
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	f023 030a 	bic.w	r3, r3, #10
 8006de0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	f003 030a 	and.w	r3, r3, #10
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	621a      	str	r2, [r3, #32]
}
 8006dfa:	bf00      	nop
 8006dfc:	371c      	adds	r7, #28
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	40010000 	.word	0x40010000
 8006e0c:	40000400 	.word	0x40000400
 8006e10:	40000800 	.word	0x40000800
 8006e14:	40000c00 	.word	0x40000c00
 8006e18:	40010400 	.word	0x40010400
 8006e1c:	40014000 	.word	0x40014000
 8006e20:	40001800 	.word	0x40001800

08006e24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b087      	sub	sp, #28
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6a1b      	ldr	r3, [r3, #32]
 8006e34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	f023 0201 	bic.w	r2, r3, #1
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	011b      	lsls	r3, r3, #4
 8006e54:	693a      	ldr	r2, [r7, #16]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f023 030a 	bic.w	r3, r3, #10
 8006e60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	621a      	str	r2, [r3, #32]
}
 8006e76:	bf00      	nop
 8006e78:	371c      	adds	r7, #28
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e82:	b480      	push	{r7}
 8006e84:	b087      	sub	sp, #28
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	60f8      	str	r0, [r7, #12]
 8006e8a:	60b9      	str	r1, [r7, #8]
 8006e8c:	607a      	str	r2, [r7, #4]
 8006e8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6a1b      	ldr	r3, [r3, #32]
 8006e94:	f023 0210 	bic.w	r2, r3, #16
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6a1b      	ldr	r3, [r3, #32]
 8006ea6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	021b      	lsls	r3, r3, #8
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ec0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	031b      	lsls	r3, r3, #12
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	697a      	ldr	r2, [r7, #20]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ed4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	011b      	lsls	r3, r3, #4
 8006eda:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006ede:	693a      	ldr	r2, [r7, #16]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	621a      	str	r2, [r3, #32]
}
 8006ef0:	bf00      	nop
 8006ef2:	371c      	adds	r7, #28
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6a1b      	ldr	r3, [r3, #32]
 8006f0c:	f023 0210 	bic.w	r2, r3, #16
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6a1b      	ldr	r3, [r3, #32]
 8006f1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	031b      	lsls	r3, r3, #12
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	011b      	lsls	r3, r3, #4
 8006f3e:	693a      	ldr	r2, [r7, #16]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	621a      	str	r2, [r3, #32]
}
 8006f50:	bf00      	nop
 8006f52:	371c      	adds	r7, #28
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b087      	sub	sp, #28
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
 8006f68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	69db      	ldr	r3, [r3, #28]
 8006f7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6a1b      	ldr	r3, [r3, #32]
 8006f80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	f023 0303 	bic.w	r3, r3, #3
 8006f88:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006f8a:	697a      	ldr	r2, [r7, #20]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f98:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	011b      	lsls	r3, r3, #4
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	697a      	ldr	r2, [r7, #20]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006fac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	021b      	lsls	r3, r3, #8
 8006fb2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	621a      	str	r2, [r3, #32]
}
 8006fc8:	bf00      	nop
 8006fca:	371c      	adds	r7, #28
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b087      	sub	sp, #28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	607a      	str	r2, [r7, #4]
 8006fe0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6a1b      	ldr	r3, [r3, #32]
 8006ff8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007000:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	021b      	lsls	r3, r3, #8
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	4313      	orrs	r3, r2
 800700a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007012:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	031b      	lsls	r3, r3, #12
 8007018:	b29b      	uxth	r3, r3
 800701a:	697a      	ldr	r2, [r7, #20]
 800701c:	4313      	orrs	r3, r2
 800701e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007026:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	031b      	lsls	r3, r3, #12
 800702c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	4313      	orrs	r3, r2
 8007034:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	697a      	ldr	r2, [r7, #20]
 800703a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	693a      	ldr	r2, [r7, #16]
 8007040:	621a      	str	r2, [r3, #32]
}
 8007042:	bf00      	nop
 8007044:	371c      	adds	r7, #28
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800704e:	b480      	push	{r7}
 8007050:	b085      	sub	sp, #20
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
 8007056:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007064:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007066:	683a      	ldr	r2, [r7, #0]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	4313      	orrs	r3, r2
 800706c:	f043 0307 	orr.w	r3, r3, #7
 8007070:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	609a      	str	r2, [r3, #8]
}
 8007078:	bf00      	nop
 800707a:	3714      	adds	r7, #20
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007084:	b480      	push	{r7}
 8007086:	b087      	sub	sp, #28
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
 8007090:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800709e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	021a      	lsls	r2, r3, #8
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	431a      	orrs	r2, r3
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	697a      	ldr	r2, [r7, #20]
 80070b6:	609a      	str	r2, [r3, #8]
}
 80070b8:	bf00      	nop
 80070ba:	371c      	adds	r7, #28
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b087      	sub	sp, #28
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	f003 031f 	and.w	r3, r3, #31
 80070d6:	2201      	movs	r2, #1
 80070d8:	fa02 f303 	lsl.w	r3, r2, r3
 80070dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6a1a      	ldr	r2, [r3, #32]
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	43db      	mvns	r3, r3
 80070e6:	401a      	ands	r2, r3
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6a1a      	ldr	r2, [r3, #32]
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	f003 031f 	and.w	r3, r3, #31
 80070f6:	6879      	ldr	r1, [r7, #4]
 80070f8:	fa01 f303 	lsl.w	r3, r1, r3
 80070fc:	431a      	orrs	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	621a      	str	r2, [r3, #32]
}
 8007102:	bf00      	nop
 8007104:	371c      	adds	r7, #28
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
	...

08007110 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007110:	b480      	push	{r7}
 8007112:	b085      	sub	sp, #20
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007120:	2b01      	cmp	r3, #1
 8007122:	d101      	bne.n	8007128 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007124:	2302      	movs	r3, #2
 8007126:	e05a      	b.n	80071de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2202      	movs	r2, #2
 8007134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800714e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	4313      	orrs	r3, r2
 8007158:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a21      	ldr	r2, [pc, #132]	; (80071ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d022      	beq.n	80071b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007174:	d01d      	beq.n	80071b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a1d      	ldr	r2, [pc, #116]	; (80071f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d018      	beq.n	80071b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a1b      	ldr	r2, [pc, #108]	; (80071f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d013      	beq.n	80071b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a1a      	ldr	r2, [pc, #104]	; (80071f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d00e      	beq.n	80071b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a18      	ldr	r2, [pc, #96]	; (80071fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d009      	beq.n	80071b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a17      	ldr	r2, [pc, #92]	; (8007200 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d004      	beq.n	80071b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a15      	ldr	r2, [pc, #84]	; (8007204 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d10c      	bne.n	80071cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68ba      	ldr	r2, [r7, #8]
 80071ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3714      	adds	r7, #20
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	40010000 	.word	0x40010000
 80071f0:	40000400 	.word	0x40000400
 80071f4:	40000800 	.word	0x40000800
 80071f8:	40000c00 	.word	0x40000c00
 80071fc:	40010400 	.word	0x40010400
 8007200:	40014000 	.word	0x40014000
 8007204:	40001800 	.word	0x40001800

08007208 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007210:	bf00      	nop
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d101      	bne.n	8007242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	e03f      	b.n	80072c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007248:	b2db      	uxtb	r3, r3
 800724a:	2b00      	cmp	r3, #0
 800724c:	d106      	bne.n	800725c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f7fb fd3e 	bl	8002cd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2224      	movs	r2, #36	; 0x24
 8007260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68da      	ldr	r2, [r3, #12]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007272:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 f929 	bl	80074cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	691a      	ldr	r2, [r3, #16]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007288:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	695a      	ldr	r2, [r3, #20]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007298:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68da      	ldr	r2, [r3, #12]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2220      	movs	r2, #32
 80072b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2220      	movs	r2, #32
 80072bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3708      	adds	r7, #8
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b08a      	sub	sp, #40	; 0x28
 80072ce:	af02      	add	r7, sp, #8
 80072d0:	60f8      	str	r0, [r7, #12]
 80072d2:	60b9      	str	r1, [r7, #8]
 80072d4:	603b      	str	r3, [r7, #0]
 80072d6:	4613      	mov	r3, r2
 80072d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80072da:	2300      	movs	r3, #0
 80072dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b20      	cmp	r3, #32
 80072e8:	d17c      	bne.n	80073e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d002      	beq.n	80072f6 <HAL_UART_Transmit+0x2c>
 80072f0:	88fb      	ldrh	r3, [r7, #6]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d101      	bne.n	80072fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e075      	b.n	80073e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007300:	2b01      	cmp	r3, #1
 8007302:	d101      	bne.n	8007308 <HAL_UART_Transmit+0x3e>
 8007304:	2302      	movs	r3, #2
 8007306:	e06e      	b.n	80073e6 <HAL_UART_Transmit+0x11c>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2200      	movs	r2, #0
 8007314:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2221      	movs	r2, #33	; 0x21
 800731a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800731e:	f7fb fec9 	bl	80030b4 <HAL_GetTick>
 8007322:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	88fa      	ldrh	r2, [r7, #6]
 8007328:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	88fa      	ldrh	r2, [r7, #6]
 800732e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007338:	d108      	bne.n	800734c <HAL_UART_Transmit+0x82>
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d104      	bne.n	800734c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007342:	2300      	movs	r3, #0
 8007344:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	61bb      	str	r3, [r7, #24]
 800734a:	e003      	b.n	8007354 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007350:	2300      	movs	r3, #0
 8007352:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800735c:	e02a      	b.n	80073b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	9300      	str	r3, [sp, #0]
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	2200      	movs	r2, #0
 8007366:	2180      	movs	r1, #128	; 0x80
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f000 f840 	bl	80073ee <UART_WaitOnFlagUntilTimeout>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d001      	beq.n	8007378 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e036      	b.n	80073e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10b      	bne.n	8007396 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	881b      	ldrh	r3, [r3, #0]
 8007382:	461a      	mov	r2, r3
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800738c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	3302      	adds	r3, #2
 8007392:	61bb      	str	r3, [r7, #24]
 8007394:	e007      	b.n	80073a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	781a      	ldrb	r2, [r3, #0]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	3301      	adds	r3, #1
 80073a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	3b01      	subs	r3, #1
 80073ae:	b29a      	uxth	r2, r3
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1cf      	bne.n	800735e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	9300      	str	r3, [sp, #0]
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	2200      	movs	r2, #0
 80073c6:	2140      	movs	r1, #64	; 0x40
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f000 f810 	bl	80073ee <UART_WaitOnFlagUntilTimeout>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d001      	beq.n	80073d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e006      	b.n	80073e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2220      	movs	r2, #32
 80073dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80073e0:	2300      	movs	r3, #0
 80073e2:	e000      	b.n	80073e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80073e4:	2302      	movs	r3, #2
  }
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3720      	adds	r7, #32
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b090      	sub	sp, #64	; 0x40
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	60f8      	str	r0, [r7, #12]
 80073f6:	60b9      	str	r1, [r7, #8]
 80073f8:	603b      	str	r3, [r7, #0]
 80073fa:	4613      	mov	r3, r2
 80073fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073fe:	e050      	b.n	80074a2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007400:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007402:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007406:	d04c      	beq.n	80074a2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800740a:	2b00      	cmp	r3, #0
 800740c:	d007      	beq.n	800741e <UART_WaitOnFlagUntilTimeout+0x30>
 800740e:	f7fb fe51 	bl	80030b4 <HAL_GetTick>
 8007412:	4602      	mov	r2, r0
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800741a:	429a      	cmp	r2, r3
 800741c:	d241      	bcs.n	80074a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	330c      	adds	r3, #12
 8007424:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007428:	e853 3f00 	ldrex	r3, [r3]
 800742c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800742e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007430:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007434:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	330c      	adds	r3, #12
 800743c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800743e:	637a      	str	r2, [r7, #52]	; 0x34
 8007440:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007442:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007444:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007446:	e841 2300 	strex	r3, r2, [r1]
 800744a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800744c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1e5      	bne.n	800741e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	3314      	adds	r3, #20
 8007458:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	e853 3f00 	ldrex	r3, [r3]
 8007460:	613b      	str	r3, [r7, #16]
   return(result);
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	f023 0301 	bic.w	r3, r3, #1
 8007468:	63bb      	str	r3, [r7, #56]	; 0x38
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	3314      	adds	r3, #20
 8007470:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007472:	623a      	str	r2, [r7, #32]
 8007474:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007476:	69f9      	ldr	r1, [r7, #28]
 8007478:	6a3a      	ldr	r2, [r7, #32]
 800747a:	e841 2300 	strex	r3, r2, [r1]
 800747e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1e5      	bne.n	8007452 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2220      	movs	r2, #32
 800748a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2220      	movs	r2, #32
 8007492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800749e:	2303      	movs	r3, #3
 80074a0:	e00f      	b.n	80074c2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	4013      	ands	r3, r2
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	bf0c      	ite	eq
 80074b2:	2301      	moveq	r3, #1
 80074b4:	2300      	movne	r3, #0
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	461a      	mov	r2, r3
 80074ba:	79fb      	ldrb	r3, [r7, #7]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d09f      	beq.n	8007400 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3740      	adds	r7, #64	; 0x40
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
	...

080074cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074d0:	b0c0      	sub	sp, #256	; 0x100
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80074e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074e8:	68d9      	ldr	r1, [r3, #12]
 80074ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	ea40 0301 	orr.w	r3, r0, r1
 80074f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80074f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074fa:	689a      	ldr	r2, [r3, #8]
 80074fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	431a      	orrs	r2, r3
 8007504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007508:	695b      	ldr	r3, [r3, #20]
 800750a:	431a      	orrs	r2, r3
 800750c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007510:	69db      	ldr	r3, [r3, #28]
 8007512:	4313      	orrs	r3, r2
 8007514:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007524:	f021 010c 	bic.w	r1, r1, #12
 8007528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007532:	430b      	orrs	r3, r1
 8007534:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	695b      	ldr	r3, [r3, #20]
 800753e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007546:	6999      	ldr	r1, [r3, #24]
 8007548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	ea40 0301 	orr.w	r3, r0, r1
 8007552:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	4b8f      	ldr	r3, [pc, #572]	; (8007798 <UART_SetConfig+0x2cc>)
 800755c:	429a      	cmp	r2, r3
 800755e:	d005      	beq.n	800756c <UART_SetConfig+0xa0>
 8007560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	4b8d      	ldr	r3, [pc, #564]	; (800779c <UART_SetConfig+0x2d0>)
 8007568:	429a      	cmp	r2, r3
 800756a:	d104      	bne.n	8007576 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800756c:	f7fc fe86 	bl	800427c <HAL_RCC_GetPCLK2Freq>
 8007570:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007574:	e003      	b.n	800757e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007576:	f7fc fe6d 	bl	8004254 <HAL_RCC_GetPCLK1Freq>
 800757a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800757e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007582:	69db      	ldr	r3, [r3, #28]
 8007584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007588:	f040 810c 	bne.w	80077a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800758c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007590:	2200      	movs	r2, #0
 8007592:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007596:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800759a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800759e:	4622      	mov	r2, r4
 80075a0:	462b      	mov	r3, r5
 80075a2:	1891      	adds	r1, r2, r2
 80075a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80075a6:	415b      	adcs	r3, r3
 80075a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80075ae:	4621      	mov	r1, r4
 80075b0:	eb12 0801 	adds.w	r8, r2, r1
 80075b4:	4629      	mov	r1, r5
 80075b6:	eb43 0901 	adc.w	r9, r3, r1
 80075ba:	f04f 0200 	mov.w	r2, #0
 80075be:	f04f 0300 	mov.w	r3, #0
 80075c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80075c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80075ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80075ce:	4690      	mov	r8, r2
 80075d0:	4699      	mov	r9, r3
 80075d2:	4623      	mov	r3, r4
 80075d4:	eb18 0303 	adds.w	r3, r8, r3
 80075d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80075dc:	462b      	mov	r3, r5
 80075de:	eb49 0303 	adc.w	r3, r9, r3
 80075e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80075e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80075f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80075f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80075fa:	460b      	mov	r3, r1
 80075fc:	18db      	adds	r3, r3, r3
 80075fe:	653b      	str	r3, [r7, #80]	; 0x50
 8007600:	4613      	mov	r3, r2
 8007602:	eb42 0303 	adc.w	r3, r2, r3
 8007606:	657b      	str	r3, [r7, #84]	; 0x54
 8007608:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800760c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007610:	f7f9 fb3a 	bl	8000c88 <__aeabi_uldivmod>
 8007614:	4602      	mov	r2, r0
 8007616:	460b      	mov	r3, r1
 8007618:	4b61      	ldr	r3, [pc, #388]	; (80077a0 <UART_SetConfig+0x2d4>)
 800761a:	fba3 2302 	umull	r2, r3, r3, r2
 800761e:	095b      	lsrs	r3, r3, #5
 8007620:	011c      	lsls	r4, r3, #4
 8007622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007626:	2200      	movs	r2, #0
 8007628:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800762c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007630:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007634:	4642      	mov	r2, r8
 8007636:	464b      	mov	r3, r9
 8007638:	1891      	adds	r1, r2, r2
 800763a:	64b9      	str	r1, [r7, #72]	; 0x48
 800763c:	415b      	adcs	r3, r3
 800763e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007640:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007644:	4641      	mov	r1, r8
 8007646:	eb12 0a01 	adds.w	sl, r2, r1
 800764a:	4649      	mov	r1, r9
 800764c:	eb43 0b01 	adc.w	fp, r3, r1
 8007650:	f04f 0200 	mov.w	r2, #0
 8007654:	f04f 0300 	mov.w	r3, #0
 8007658:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800765c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007660:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007664:	4692      	mov	sl, r2
 8007666:	469b      	mov	fp, r3
 8007668:	4643      	mov	r3, r8
 800766a:	eb1a 0303 	adds.w	r3, sl, r3
 800766e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007672:	464b      	mov	r3, r9
 8007674:	eb4b 0303 	adc.w	r3, fp, r3
 8007678:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800767c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007688:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800768c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007690:	460b      	mov	r3, r1
 8007692:	18db      	adds	r3, r3, r3
 8007694:	643b      	str	r3, [r7, #64]	; 0x40
 8007696:	4613      	mov	r3, r2
 8007698:	eb42 0303 	adc.w	r3, r2, r3
 800769c:	647b      	str	r3, [r7, #68]	; 0x44
 800769e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80076a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80076a6:	f7f9 faef 	bl	8000c88 <__aeabi_uldivmod>
 80076aa:	4602      	mov	r2, r0
 80076ac:	460b      	mov	r3, r1
 80076ae:	4611      	mov	r1, r2
 80076b0:	4b3b      	ldr	r3, [pc, #236]	; (80077a0 <UART_SetConfig+0x2d4>)
 80076b2:	fba3 2301 	umull	r2, r3, r3, r1
 80076b6:	095b      	lsrs	r3, r3, #5
 80076b8:	2264      	movs	r2, #100	; 0x64
 80076ba:	fb02 f303 	mul.w	r3, r2, r3
 80076be:	1acb      	subs	r3, r1, r3
 80076c0:	00db      	lsls	r3, r3, #3
 80076c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80076c6:	4b36      	ldr	r3, [pc, #216]	; (80077a0 <UART_SetConfig+0x2d4>)
 80076c8:	fba3 2302 	umull	r2, r3, r3, r2
 80076cc:	095b      	lsrs	r3, r3, #5
 80076ce:	005b      	lsls	r3, r3, #1
 80076d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80076d4:	441c      	add	r4, r3
 80076d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076da:	2200      	movs	r2, #0
 80076dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80076e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80076e8:	4642      	mov	r2, r8
 80076ea:	464b      	mov	r3, r9
 80076ec:	1891      	adds	r1, r2, r2
 80076ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80076f0:	415b      	adcs	r3, r3
 80076f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80076f8:	4641      	mov	r1, r8
 80076fa:	1851      	adds	r1, r2, r1
 80076fc:	6339      	str	r1, [r7, #48]	; 0x30
 80076fe:	4649      	mov	r1, r9
 8007700:	414b      	adcs	r3, r1
 8007702:	637b      	str	r3, [r7, #52]	; 0x34
 8007704:	f04f 0200 	mov.w	r2, #0
 8007708:	f04f 0300 	mov.w	r3, #0
 800770c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007710:	4659      	mov	r1, fp
 8007712:	00cb      	lsls	r3, r1, #3
 8007714:	4651      	mov	r1, sl
 8007716:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800771a:	4651      	mov	r1, sl
 800771c:	00ca      	lsls	r2, r1, #3
 800771e:	4610      	mov	r0, r2
 8007720:	4619      	mov	r1, r3
 8007722:	4603      	mov	r3, r0
 8007724:	4642      	mov	r2, r8
 8007726:	189b      	adds	r3, r3, r2
 8007728:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800772c:	464b      	mov	r3, r9
 800772e:	460a      	mov	r2, r1
 8007730:	eb42 0303 	adc.w	r3, r2, r3
 8007734:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007744:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007748:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800774c:	460b      	mov	r3, r1
 800774e:	18db      	adds	r3, r3, r3
 8007750:	62bb      	str	r3, [r7, #40]	; 0x28
 8007752:	4613      	mov	r3, r2
 8007754:	eb42 0303 	adc.w	r3, r2, r3
 8007758:	62fb      	str	r3, [r7, #44]	; 0x2c
 800775a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800775e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007762:	f7f9 fa91 	bl	8000c88 <__aeabi_uldivmod>
 8007766:	4602      	mov	r2, r0
 8007768:	460b      	mov	r3, r1
 800776a:	4b0d      	ldr	r3, [pc, #52]	; (80077a0 <UART_SetConfig+0x2d4>)
 800776c:	fba3 1302 	umull	r1, r3, r3, r2
 8007770:	095b      	lsrs	r3, r3, #5
 8007772:	2164      	movs	r1, #100	; 0x64
 8007774:	fb01 f303 	mul.w	r3, r1, r3
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	00db      	lsls	r3, r3, #3
 800777c:	3332      	adds	r3, #50	; 0x32
 800777e:	4a08      	ldr	r2, [pc, #32]	; (80077a0 <UART_SetConfig+0x2d4>)
 8007780:	fba2 2303 	umull	r2, r3, r2, r3
 8007784:	095b      	lsrs	r3, r3, #5
 8007786:	f003 0207 	and.w	r2, r3, #7
 800778a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4422      	add	r2, r4
 8007792:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007794:	e106      	b.n	80079a4 <UART_SetConfig+0x4d8>
 8007796:	bf00      	nop
 8007798:	40011000 	.word	0x40011000
 800779c:	40011400 	.word	0x40011400
 80077a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80077a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077a8:	2200      	movs	r2, #0
 80077aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80077ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80077b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80077b6:	4642      	mov	r2, r8
 80077b8:	464b      	mov	r3, r9
 80077ba:	1891      	adds	r1, r2, r2
 80077bc:	6239      	str	r1, [r7, #32]
 80077be:	415b      	adcs	r3, r3
 80077c0:	627b      	str	r3, [r7, #36]	; 0x24
 80077c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80077c6:	4641      	mov	r1, r8
 80077c8:	1854      	adds	r4, r2, r1
 80077ca:	4649      	mov	r1, r9
 80077cc:	eb43 0501 	adc.w	r5, r3, r1
 80077d0:	f04f 0200 	mov.w	r2, #0
 80077d4:	f04f 0300 	mov.w	r3, #0
 80077d8:	00eb      	lsls	r3, r5, #3
 80077da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80077de:	00e2      	lsls	r2, r4, #3
 80077e0:	4614      	mov	r4, r2
 80077e2:	461d      	mov	r5, r3
 80077e4:	4643      	mov	r3, r8
 80077e6:	18e3      	adds	r3, r4, r3
 80077e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80077ec:	464b      	mov	r3, r9
 80077ee:	eb45 0303 	adc.w	r3, r5, r3
 80077f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80077f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007802:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007806:	f04f 0200 	mov.w	r2, #0
 800780a:	f04f 0300 	mov.w	r3, #0
 800780e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007812:	4629      	mov	r1, r5
 8007814:	008b      	lsls	r3, r1, #2
 8007816:	4621      	mov	r1, r4
 8007818:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800781c:	4621      	mov	r1, r4
 800781e:	008a      	lsls	r2, r1, #2
 8007820:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007824:	f7f9 fa30 	bl	8000c88 <__aeabi_uldivmod>
 8007828:	4602      	mov	r2, r0
 800782a:	460b      	mov	r3, r1
 800782c:	4b60      	ldr	r3, [pc, #384]	; (80079b0 <UART_SetConfig+0x4e4>)
 800782e:	fba3 2302 	umull	r2, r3, r3, r2
 8007832:	095b      	lsrs	r3, r3, #5
 8007834:	011c      	lsls	r4, r3, #4
 8007836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800783a:	2200      	movs	r2, #0
 800783c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007840:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007844:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007848:	4642      	mov	r2, r8
 800784a:	464b      	mov	r3, r9
 800784c:	1891      	adds	r1, r2, r2
 800784e:	61b9      	str	r1, [r7, #24]
 8007850:	415b      	adcs	r3, r3
 8007852:	61fb      	str	r3, [r7, #28]
 8007854:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007858:	4641      	mov	r1, r8
 800785a:	1851      	adds	r1, r2, r1
 800785c:	6139      	str	r1, [r7, #16]
 800785e:	4649      	mov	r1, r9
 8007860:	414b      	adcs	r3, r1
 8007862:	617b      	str	r3, [r7, #20]
 8007864:	f04f 0200 	mov.w	r2, #0
 8007868:	f04f 0300 	mov.w	r3, #0
 800786c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007870:	4659      	mov	r1, fp
 8007872:	00cb      	lsls	r3, r1, #3
 8007874:	4651      	mov	r1, sl
 8007876:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800787a:	4651      	mov	r1, sl
 800787c:	00ca      	lsls	r2, r1, #3
 800787e:	4610      	mov	r0, r2
 8007880:	4619      	mov	r1, r3
 8007882:	4603      	mov	r3, r0
 8007884:	4642      	mov	r2, r8
 8007886:	189b      	adds	r3, r3, r2
 8007888:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800788c:	464b      	mov	r3, r9
 800788e:	460a      	mov	r2, r1
 8007890:	eb42 0303 	adc.w	r3, r2, r3
 8007894:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80078a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80078a4:	f04f 0200 	mov.w	r2, #0
 80078a8:	f04f 0300 	mov.w	r3, #0
 80078ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80078b0:	4649      	mov	r1, r9
 80078b2:	008b      	lsls	r3, r1, #2
 80078b4:	4641      	mov	r1, r8
 80078b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078ba:	4641      	mov	r1, r8
 80078bc:	008a      	lsls	r2, r1, #2
 80078be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80078c2:	f7f9 f9e1 	bl	8000c88 <__aeabi_uldivmod>
 80078c6:	4602      	mov	r2, r0
 80078c8:	460b      	mov	r3, r1
 80078ca:	4611      	mov	r1, r2
 80078cc:	4b38      	ldr	r3, [pc, #224]	; (80079b0 <UART_SetConfig+0x4e4>)
 80078ce:	fba3 2301 	umull	r2, r3, r3, r1
 80078d2:	095b      	lsrs	r3, r3, #5
 80078d4:	2264      	movs	r2, #100	; 0x64
 80078d6:	fb02 f303 	mul.w	r3, r2, r3
 80078da:	1acb      	subs	r3, r1, r3
 80078dc:	011b      	lsls	r3, r3, #4
 80078de:	3332      	adds	r3, #50	; 0x32
 80078e0:	4a33      	ldr	r2, [pc, #204]	; (80079b0 <UART_SetConfig+0x4e4>)
 80078e2:	fba2 2303 	umull	r2, r3, r2, r3
 80078e6:	095b      	lsrs	r3, r3, #5
 80078e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078ec:	441c      	add	r4, r3
 80078ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078f2:	2200      	movs	r2, #0
 80078f4:	673b      	str	r3, [r7, #112]	; 0x70
 80078f6:	677a      	str	r2, [r7, #116]	; 0x74
 80078f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80078fc:	4642      	mov	r2, r8
 80078fe:	464b      	mov	r3, r9
 8007900:	1891      	adds	r1, r2, r2
 8007902:	60b9      	str	r1, [r7, #8]
 8007904:	415b      	adcs	r3, r3
 8007906:	60fb      	str	r3, [r7, #12]
 8007908:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800790c:	4641      	mov	r1, r8
 800790e:	1851      	adds	r1, r2, r1
 8007910:	6039      	str	r1, [r7, #0]
 8007912:	4649      	mov	r1, r9
 8007914:	414b      	adcs	r3, r1
 8007916:	607b      	str	r3, [r7, #4]
 8007918:	f04f 0200 	mov.w	r2, #0
 800791c:	f04f 0300 	mov.w	r3, #0
 8007920:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007924:	4659      	mov	r1, fp
 8007926:	00cb      	lsls	r3, r1, #3
 8007928:	4651      	mov	r1, sl
 800792a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800792e:	4651      	mov	r1, sl
 8007930:	00ca      	lsls	r2, r1, #3
 8007932:	4610      	mov	r0, r2
 8007934:	4619      	mov	r1, r3
 8007936:	4603      	mov	r3, r0
 8007938:	4642      	mov	r2, r8
 800793a:	189b      	adds	r3, r3, r2
 800793c:	66bb      	str	r3, [r7, #104]	; 0x68
 800793e:	464b      	mov	r3, r9
 8007940:	460a      	mov	r2, r1
 8007942:	eb42 0303 	adc.w	r3, r2, r3
 8007946:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	663b      	str	r3, [r7, #96]	; 0x60
 8007952:	667a      	str	r2, [r7, #100]	; 0x64
 8007954:	f04f 0200 	mov.w	r2, #0
 8007958:	f04f 0300 	mov.w	r3, #0
 800795c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007960:	4649      	mov	r1, r9
 8007962:	008b      	lsls	r3, r1, #2
 8007964:	4641      	mov	r1, r8
 8007966:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800796a:	4641      	mov	r1, r8
 800796c:	008a      	lsls	r2, r1, #2
 800796e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007972:	f7f9 f989 	bl	8000c88 <__aeabi_uldivmod>
 8007976:	4602      	mov	r2, r0
 8007978:	460b      	mov	r3, r1
 800797a:	4b0d      	ldr	r3, [pc, #52]	; (80079b0 <UART_SetConfig+0x4e4>)
 800797c:	fba3 1302 	umull	r1, r3, r3, r2
 8007980:	095b      	lsrs	r3, r3, #5
 8007982:	2164      	movs	r1, #100	; 0x64
 8007984:	fb01 f303 	mul.w	r3, r1, r3
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	011b      	lsls	r3, r3, #4
 800798c:	3332      	adds	r3, #50	; 0x32
 800798e:	4a08      	ldr	r2, [pc, #32]	; (80079b0 <UART_SetConfig+0x4e4>)
 8007990:	fba2 2303 	umull	r2, r3, r2, r3
 8007994:	095b      	lsrs	r3, r3, #5
 8007996:	f003 020f 	and.w	r2, r3, #15
 800799a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4422      	add	r2, r4
 80079a2:	609a      	str	r2, [r3, #8]
}
 80079a4:	bf00      	nop
 80079a6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80079aa:	46bd      	mov	sp, r7
 80079ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079b0:	51eb851f 	.word	0x51eb851f

080079b4 <__cvt>:
 80079b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079b8:	ec55 4b10 	vmov	r4, r5, d0
 80079bc:	2d00      	cmp	r5, #0
 80079be:	460e      	mov	r6, r1
 80079c0:	4619      	mov	r1, r3
 80079c2:	462b      	mov	r3, r5
 80079c4:	bfbb      	ittet	lt
 80079c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80079ca:	461d      	movlt	r5, r3
 80079cc:	2300      	movge	r3, #0
 80079ce:	232d      	movlt	r3, #45	; 0x2d
 80079d0:	700b      	strb	r3, [r1, #0]
 80079d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80079d8:	4691      	mov	r9, r2
 80079da:	f023 0820 	bic.w	r8, r3, #32
 80079de:	bfbc      	itt	lt
 80079e0:	4622      	movlt	r2, r4
 80079e2:	4614      	movlt	r4, r2
 80079e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80079e8:	d005      	beq.n	80079f6 <__cvt+0x42>
 80079ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80079ee:	d100      	bne.n	80079f2 <__cvt+0x3e>
 80079f0:	3601      	adds	r6, #1
 80079f2:	2102      	movs	r1, #2
 80079f4:	e000      	b.n	80079f8 <__cvt+0x44>
 80079f6:	2103      	movs	r1, #3
 80079f8:	ab03      	add	r3, sp, #12
 80079fa:	9301      	str	r3, [sp, #4]
 80079fc:	ab02      	add	r3, sp, #8
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	ec45 4b10 	vmov	d0, r4, r5
 8007a04:	4653      	mov	r3, sl
 8007a06:	4632      	mov	r2, r6
 8007a08:	f000 fdd2 	bl	80085b0 <_dtoa_r>
 8007a0c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007a10:	4607      	mov	r7, r0
 8007a12:	d102      	bne.n	8007a1a <__cvt+0x66>
 8007a14:	f019 0f01 	tst.w	r9, #1
 8007a18:	d022      	beq.n	8007a60 <__cvt+0xac>
 8007a1a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007a1e:	eb07 0906 	add.w	r9, r7, r6
 8007a22:	d110      	bne.n	8007a46 <__cvt+0x92>
 8007a24:	783b      	ldrb	r3, [r7, #0]
 8007a26:	2b30      	cmp	r3, #48	; 0x30
 8007a28:	d10a      	bne.n	8007a40 <__cvt+0x8c>
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	4620      	mov	r0, r4
 8007a30:	4629      	mov	r1, r5
 8007a32:	f7f9 f869 	bl	8000b08 <__aeabi_dcmpeq>
 8007a36:	b918      	cbnz	r0, 8007a40 <__cvt+0x8c>
 8007a38:	f1c6 0601 	rsb	r6, r6, #1
 8007a3c:	f8ca 6000 	str.w	r6, [sl]
 8007a40:	f8da 3000 	ldr.w	r3, [sl]
 8007a44:	4499      	add	r9, r3
 8007a46:	2200      	movs	r2, #0
 8007a48:	2300      	movs	r3, #0
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	4629      	mov	r1, r5
 8007a4e:	f7f9 f85b 	bl	8000b08 <__aeabi_dcmpeq>
 8007a52:	b108      	cbz	r0, 8007a58 <__cvt+0xa4>
 8007a54:	f8cd 900c 	str.w	r9, [sp, #12]
 8007a58:	2230      	movs	r2, #48	; 0x30
 8007a5a:	9b03      	ldr	r3, [sp, #12]
 8007a5c:	454b      	cmp	r3, r9
 8007a5e:	d307      	bcc.n	8007a70 <__cvt+0xbc>
 8007a60:	9b03      	ldr	r3, [sp, #12]
 8007a62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a64:	1bdb      	subs	r3, r3, r7
 8007a66:	4638      	mov	r0, r7
 8007a68:	6013      	str	r3, [r2, #0]
 8007a6a:	b004      	add	sp, #16
 8007a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a70:	1c59      	adds	r1, r3, #1
 8007a72:	9103      	str	r1, [sp, #12]
 8007a74:	701a      	strb	r2, [r3, #0]
 8007a76:	e7f0      	b.n	8007a5a <__cvt+0xa6>

08007a78 <__exponent>:
 8007a78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2900      	cmp	r1, #0
 8007a7e:	bfb8      	it	lt
 8007a80:	4249      	neglt	r1, r1
 8007a82:	f803 2b02 	strb.w	r2, [r3], #2
 8007a86:	bfb4      	ite	lt
 8007a88:	222d      	movlt	r2, #45	; 0x2d
 8007a8a:	222b      	movge	r2, #43	; 0x2b
 8007a8c:	2909      	cmp	r1, #9
 8007a8e:	7042      	strb	r2, [r0, #1]
 8007a90:	dd2a      	ble.n	8007ae8 <__exponent+0x70>
 8007a92:	f10d 0207 	add.w	r2, sp, #7
 8007a96:	4617      	mov	r7, r2
 8007a98:	260a      	movs	r6, #10
 8007a9a:	4694      	mov	ip, r2
 8007a9c:	fb91 f5f6 	sdiv	r5, r1, r6
 8007aa0:	fb06 1415 	mls	r4, r6, r5, r1
 8007aa4:	3430      	adds	r4, #48	; 0x30
 8007aa6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007aaa:	460c      	mov	r4, r1
 8007aac:	2c63      	cmp	r4, #99	; 0x63
 8007aae:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8007ab2:	4629      	mov	r1, r5
 8007ab4:	dcf1      	bgt.n	8007a9a <__exponent+0x22>
 8007ab6:	3130      	adds	r1, #48	; 0x30
 8007ab8:	f1ac 0402 	sub.w	r4, ip, #2
 8007abc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007ac0:	1c41      	adds	r1, r0, #1
 8007ac2:	4622      	mov	r2, r4
 8007ac4:	42ba      	cmp	r2, r7
 8007ac6:	d30a      	bcc.n	8007ade <__exponent+0x66>
 8007ac8:	f10d 0209 	add.w	r2, sp, #9
 8007acc:	eba2 020c 	sub.w	r2, r2, ip
 8007ad0:	42bc      	cmp	r4, r7
 8007ad2:	bf88      	it	hi
 8007ad4:	2200      	movhi	r2, #0
 8007ad6:	4413      	add	r3, r2
 8007ad8:	1a18      	subs	r0, r3, r0
 8007ada:	b003      	add	sp, #12
 8007adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ade:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007ae2:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007ae6:	e7ed      	b.n	8007ac4 <__exponent+0x4c>
 8007ae8:	2330      	movs	r3, #48	; 0x30
 8007aea:	3130      	adds	r1, #48	; 0x30
 8007aec:	7083      	strb	r3, [r0, #2]
 8007aee:	70c1      	strb	r1, [r0, #3]
 8007af0:	1d03      	adds	r3, r0, #4
 8007af2:	e7f1      	b.n	8007ad8 <__exponent+0x60>

08007af4 <_printf_float>:
 8007af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af8:	ed2d 8b02 	vpush	{d8}
 8007afc:	b08d      	sub	sp, #52	; 0x34
 8007afe:	460c      	mov	r4, r1
 8007b00:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007b04:	4616      	mov	r6, r2
 8007b06:	461f      	mov	r7, r3
 8007b08:	4605      	mov	r5, r0
 8007b0a:	f000 fc95 	bl	8008438 <_localeconv_r>
 8007b0e:	f8d0 a000 	ldr.w	sl, [r0]
 8007b12:	4650      	mov	r0, sl
 8007b14:	f7f8 fbcc 	bl	80002b0 <strlen>
 8007b18:	2300      	movs	r3, #0
 8007b1a:	930a      	str	r3, [sp, #40]	; 0x28
 8007b1c:	6823      	ldr	r3, [r4, #0]
 8007b1e:	9305      	str	r3, [sp, #20]
 8007b20:	f8d8 3000 	ldr.w	r3, [r8]
 8007b24:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007b28:	3307      	adds	r3, #7
 8007b2a:	f023 0307 	bic.w	r3, r3, #7
 8007b2e:	f103 0208 	add.w	r2, r3, #8
 8007b32:	f8c8 2000 	str.w	r2, [r8]
 8007b36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b3a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b3e:	9307      	str	r3, [sp, #28]
 8007b40:	f8cd 8018 	str.w	r8, [sp, #24]
 8007b44:	ee08 0a10 	vmov	s16, r0
 8007b48:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007b4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b50:	4b9e      	ldr	r3, [pc, #632]	; (8007dcc <_printf_float+0x2d8>)
 8007b52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b56:	f7f9 f809 	bl	8000b6c <__aeabi_dcmpun>
 8007b5a:	bb88      	cbnz	r0, 8007bc0 <_printf_float+0xcc>
 8007b5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b60:	4b9a      	ldr	r3, [pc, #616]	; (8007dcc <_printf_float+0x2d8>)
 8007b62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b66:	f7f8 ffe3 	bl	8000b30 <__aeabi_dcmple>
 8007b6a:	bb48      	cbnz	r0, 8007bc0 <_printf_float+0xcc>
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	2300      	movs	r3, #0
 8007b70:	4640      	mov	r0, r8
 8007b72:	4649      	mov	r1, r9
 8007b74:	f7f8 ffd2 	bl	8000b1c <__aeabi_dcmplt>
 8007b78:	b110      	cbz	r0, 8007b80 <_printf_float+0x8c>
 8007b7a:	232d      	movs	r3, #45	; 0x2d
 8007b7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b80:	4a93      	ldr	r2, [pc, #588]	; (8007dd0 <_printf_float+0x2dc>)
 8007b82:	4b94      	ldr	r3, [pc, #592]	; (8007dd4 <_printf_float+0x2e0>)
 8007b84:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007b88:	bf94      	ite	ls
 8007b8a:	4690      	movls	r8, r2
 8007b8c:	4698      	movhi	r8, r3
 8007b8e:	2303      	movs	r3, #3
 8007b90:	6123      	str	r3, [r4, #16]
 8007b92:	9b05      	ldr	r3, [sp, #20]
 8007b94:	f023 0304 	bic.w	r3, r3, #4
 8007b98:	6023      	str	r3, [r4, #0]
 8007b9a:	f04f 0900 	mov.w	r9, #0
 8007b9e:	9700      	str	r7, [sp, #0]
 8007ba0:	4633      	mov	r3, r6
 8007ba2:	aa0b      	add	r2, sp, #44	; 0x2c
 8007ba4:	4621      	mov	r1, r4
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	f000 f9da 	bl	8007f60 <_printf_common>
 8007bac:	3001      	adds	r0, #1
 8007bae:	f040 8090 	bne.w	8007cd2 <_printf_float+0x1de>
 8007bb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007bb6:	b00d      	add	sp, #52	; 0x34
 8007bb8:	ecbd 8b02 	vpop	{d8}
 8007bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bc0:	4642      	mov	r2, r8
 8007bc2:	464b      	mov	r3, r9
 8007bc4:	4640      	mov	r0, r8
 8007bc6:	4649      	mov	r1, r9
 8007bc8:	f7f8 ffd0 	bl	8000b6c <__aeabi_dcmpun>
 8007bcc:	b140      	cbz	r0, 8007be0 <_printf_float+0xec>
 8007bce:	464b      	mov	r3, r9
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	bfbc      	itt	lt
 8007bd4:	232d      	movlt	r3, #45	; 0x2d
 8007bd6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007bda:	4a7f      	ldr	r2, [pc, #508]	; (8007dd8 <_printf_float+0x2e4>)
 8007bdc:	4b7f      	ldr	r3, [pc, #508]	; (8007ddc <_printf_float+0x2e8>)
 8007bde:	e7d1      	b.n	8007b84 <_printf_float+0x90>
 8007be0:	6863      	ldr	r3, [r4, #4]
 8007be2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007be6:	9206      	str	r2, [sp, #24]
 8007be8:	1c5a      	adds	r2, r3, #1
 8007bea:	d13f      	bne.n	8007c6c <_printf_float+0x178>
 8007bec:	2306      	movs	r3, #6
 8007bee:	6063      	str	r3, [r4, #4]
 8007bf0:	9b05      	ldr	r3, [sp, #20]
 8007bf2:	6861      	ldr	r1, [r4, #4]
 8007bf4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	9303      	str	r3, [sp, #12]
 8007bfc:	ab0a      	add	r3, sp, #40	; 0x28
 8007bfe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007c02:	ab09      	add	r3, sp, #36	; 0x24
 8007c04:	ec49 8b10 	vmov	d0, r8, r9
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	6022      	str	r2, [r4, #0]
 8007c0c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007c10:	4628      	mov	r0, r5
 8007c12:	f7ff fecf 	bl	80079b4 <__cvt>
 8007c16:	9b06      	ldr	r3, [sp, #24]
 8007c18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c1a:	2b47      	cmp	r3, #71	; 0x47
 8007c1c:	4680      	mov	r8, r0
 8007c1e:	d108      	bne.n	8007c32 <_printf_float+0x13e>
 8007c20:	1cc8      	adds	r0, r1, #3
 8007c22:	db02      	blt.n	8007c2a <_printf_float+0x136>
 8007c24:	6863      	ldr	r3, [r4, #4]
 8007c26:	4299      	cmp	r1, r3
 8007c28:	dd41      	ble.n	8007cae <_printf_float+0x1ba>
 8007c2a:	f1ab 0302 	sub.w	r3, fp, #2
 8007c2e:	fa5f fb83 	uxtb.w	fp, r3
 8007c32:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007c36:	d820      	bhi.n	8007c7a <_printf_float+0x186>
 8007c38:	3901      	subs	r1, #1
 8007c3a:	465a      	mov	r2, fp
 8007c3c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007c40:	9109      	str	r1, [sp, #36]	; 0x24
 8007c42:	f7ff ff19 	bl	8007a78 <__exponent>
 8007c46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c48:	1813      	adds	r3, r2, r0
 8007c4a:	2a01      	cmp	r2, #1
 8007c4c:	4681      	mov	r9, r0
 8007c4e:	6123      	str	r3, [r4, #16]
 8007c50:	dc02      	bgt.n	8007c58 <_printf_float+0x164>
 8007c52:	6822      	ldr	r2, [r4, #0]
 8007c54:	07d2      	lsls	r2, r2, #31
 8007c56:	d501      	bpl.n	8007c5c <_printf_float+0x168>
 8007c58:	3301      	adds	r3, #1
 8007c5a:	6123      	str	r3, [r4, #16]
 8007c5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d09c      	beq.n	8007b9e <_printf_float+0xaa>
 8007c64:	232d      	movs	r3, #45	; 0x2d
 8007c66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c6a:	e798      	b.n	8007b9e <_printf_float+0xaa>
 8007c6c:	9a06      	ldr	r2, [sp, #24]
 8007c6e:	2a47      	cmp	r2, #71	; 0x47
 8007c70:	d1be      	bne.n	8007bf0 <_printf_float+0xfc>
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d1bc      	bne.n	8007bf0 <_printf_float+0xfc>
 8007c76:	2301      	movs	r3, #1
 8007c78:	e7b9      	b.n	8007bee <_printf_float+0xfa>
 8007c7a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007c7e:	d118      	bne.n	8007cb2 <_printf_float+0x1be>
 8007c80:	2900      	cmp	r1, #0
 8007c82:	6863      	ldr	r3, [r4, #4]
 8007c84:	dd0b      	ble.n	8007c9e <_printf_float+0x1aa>
 8007c86:	6121      	str	r1, [r4, #16]
 8007c88:	b913      	cbnz	r3, 8007c90 <_printf_float+0x19c>
 8007c8a:	6822      	ldr	r2, [r4, #0]
 8007c8c:	07d0      	lsls	r0, r2, #31
 8007c8e:	d502      	bpl.n	8007c96 <_printf_float+0x1a2>
 8007c90:	3301      	adds	r3, #1
 8007c92:	440b      	add	r3, r1
 8007c94:	6123      	str	r3, [r4, #16]
 8007c96:	65a1      	str	r1, [r4, #88]	; 0x58
 8007c98:	f04f 0900 	mov.w	r9, #0
 8007c9c:	e7de      	b.n	8007c5c <_printf_float+0x168>
 8007c9e:	b913      	cbnz	r3, 8007ca6 <_printf_float+0x1b2>
 8007ca0:	6822      	ldr	r2, [r4, #0]
 8007ca2:	07d2      	lsls	r2, r2, #31
 8007ca4:	d501      	bpl.n	8007caa <_printf_float+0x1b6>
 8007ca6:	3302      	adds	r3, #2
 8007ca8:	e7f4      	b.n	8007c94 <_printf_float+0x1a0>
 8007caa:	2301      	movs	r3, #1
 8007cac:	e7f2      	b.n	8007c94 <_printf_float+0x1a0>
 8007cae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007cb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cb4:	4299      	cmp	r1, r3
 8007cb6:	db05      	blt.n	8007cc4 <_printf_float+0x1d0>
 8007cb8:	6823      	ldr	r3, [r4, #0]
 8007cba:	6121      	str	r1, [r4, #16]
 8007cbc:	07d8      	lsls	r0, r3, #31
 8007cbe:	d5ea      	bpl.n	8007c96 <_printf_float+0x1a2>
 8007cc0:	1c4b      	adds	r3, r1, #1
 8007cc2:	e7e7      	b.n	8007c94 <_printf_float+0x1a0>
 8007cc4:	2900      	cmp	r1, #0
 8007cc6:	bfd4      	ite	le
 8007cc8:	f1c1 0202 	rsble	r2, r1, #2
 8007ccc:	2201      	movgt	r2, #1
 8007cce:	4413      	add	r3, r2
 8007cd0:	e7e0      	b.n	8007c94 <_printf_float+0x1a0>
 8007cd2:	6823      	ldr	r3, [r4, #0]
 8007cd4:	055a      	lsls	r2, r3, #21
 8007cd6:	d407      	bmi.n	8007ce8 <_printf_float+0x1f4>
 8007cd8:	6923      	ldr	r3, [r4, #16]
 8007cda:	4642      	mov	r2, r8
 8007cdc:	4631      	mov	r1, r6
 8007cde:	4628      	mov	r0, r5
 8007ce0:	47b8      	blx	r7
 8007ce2:	3001      	adds	r0, #1
 8007ce4:	d12c      	bne.n	8007d40 <_printf_float+0x24c>
 8007ce6:	e764      	b.n	8007bb2 <_printf_float+0xbe>
 8007ce8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007cec:	f240 80e0 	bls.w	8007eb0 <_printf_float+0x3bc>
 8007cf0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	f7f8 ff06 	bl	8000b08 <__aeabi_dcmpeq>
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	d034      	beq.n	8007d6a <_printf_float+0x276>
 8007d00:	4a37      	ldr	r2, [pc, #220]	; (8007de0 <_printf_float+0x2ec>)
 8007d02:	2301      	movs	r3, #1
 8007d04:	4631      	mov	r1, r6
 8007d06:	4628      	mov	r0, r5
 8007d08:	47b8      	blx	r7
 8007d0a:	3001      	adds	r0, #1
 8007d0c:	f43f af51 	beq.w	8007bb2 <_printf_float+0xbe>
 8007d10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d14:	429a      	cmp	r2, r3
 8007d16:	db02      	blt.n	8007d1e <_printf_float+0x22a>
 8007d18:	6823      	ldr	r3, [r4, #0]
 8007d1a:	07d8      	lsls	r0, r3, #31
 8007d1c:	d510      	bpl.n	8007d40 <_printf_float+0x24c>
 8007d1e:	ee18 3a10 	vmov	r3, s16
 8007d22:	4652      	mov	r2, sl
 8007d24:	4631      	mov	r1, r6
 8007d26:	4628      	mov	r0, r5
 8007d28:	47b8      	blx	r7
 8007d2a:	3001      	adds	r0, #1
 8007d2c:	f43f af41 	beq.w	8007bb2 <_printf_float+0xbe>
 8007d30:	f04f 0800 	mov.w	r8, #0
 8007d34:	f104 091a 	add.w	r9, r4, #26
 8007d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	4543      	cmp	r3, r8
 8007d3e:	dc09      	bgt.n	8007d54 <_printf_float+0x260>
 8007d40:	6823      	ldr	r3, [r4, #0]
 8007d42:	079b      	lsls	r3, r3, #30
 8007d44:	f100 8107 	bmi.w	8007f56 <_printf_float+0x462>
 8007d48:	68e0      	ldr	r0, [r4, #12]
 8007d4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d4c:	4298      	cmp	r0, r3
 8007d4e:	bfb8      	it	lt
 8007d50:	4618      	movlt	r0, r3
 8007d52:	e730      	b.n	8007bb6 <_printf_float+0xc2>
 8007d54:	2301      	movs	r3, #1
 8007d56:	464a      	mov	r2, r9
 8007d58:	4631      	mov	r1, r6
 8007d5a:	4628      	mov	r0, r5
 8007d5c:	47b8      	blx	r7
 8007d5e:	3001      	adds	r0, #1
 8007d60:	f43f af27 	beq.w	8007bb2 <_printf_float+0xbe>
 8007d64:	f108 0801 	add.w	r8, r8, #1
 8007d68:	e7e6      	b.n	8007d38 <_printf_float+0x244>
 8007d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	dc39      	bgt.n	8007de4 <_printf_float+0x2f0>
 8007d70:	4a1b      	ldr	r2, [pc, #108]	; (8007de0 <_printf_float+0x2ec>)
 8007d72:	2301      	movs	r3, #1
 8007d74:	4631      	mov	r1, r6
 8007d76:	4628      	mov	r0, r5
 8007d78:	47b8      	blx	r7
 8007d7a:	3001      	adds	r0, #1
 8007d7c:	f43f af19 	beq.w	8007bb2 <_printf_float+0xbe>
 8007d80:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007d84:	4313      	orrs	r3, r2
 8007d86:	d102      	bne.n	8007d8e <_printf_float+0x29a>
 8007d88:	6823      	ldr	r3, [r4, #0]
 8007d8a:	07d9      	lsls	r1, r3, #31
 8007d8c:	d5d8      	bpl.n	8007d40 <_printf_float+0x24c>
 8007d8e:	ee18 3a10 	vmov	r3, s16
 8007d92:	4652      	mov	r2, sl
 8007d94:	4631      	mov	r1, r6
 8007d96:	4628      	mov	r0, r5
 8007d98:	47b8      	blx	r7
 8007d9a:	3001      	adds	r0, #1
 8007d9c:	f43f af09 	beq.w	8007bb2 <_printf_float+0xbe>
 8007da0:	f04f 0900 	mov.w	r9, #0
 8007da4:	f104 0a1a 	add.w	sl, r4, #26
 8007da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007daa:	425b      	negs	r3, r3
 8007dac:	454b      	cmp	r3, r9
 8007dae:	dc01      	bgt.n	8007db4 <_printf_float+0x2c0>
 8007db0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007db2:	e792      	b.n	8007cda <_printf_float+0x1e6>
 8007db4:	2301      	movs	r3, #1
 8007db6:	4652      	mov	r2, sl
 8007db8:	4631      	mov	r1, r6
 8007dba:	4628      	mov	r0, r5
 8007dbc:	47b8      	blx	r7
 8007dbe:	3001      	adds	r0, #1
 8007dc0:	f43f aef7 	beq.w	8007bb2 <_printf_float+0xbe>
 8007dc4:	f109 0901 	add.w	r9, r9, #1
 8007dc8:	e7ee      	b.n	8007da8 <_printf_float+0x2b4>
 8007dca:	bf00      	nop
 8007dcc:	7fefffff 	.word	0x7fefffff
 8007dd0:	0800a384 	.word	0x0800a384
 8007dd4:	0800a388 	.word	0x0800a388
 8007dd8:	0800a38c 	.word	0x0800a38c
 8007ddc:	0800a390 	.word	0x0800a390
 8007de0:	0800a394 	.word	0x0800a394
 8007de4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007de6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007de8:	429a      	cmp	r2, r3
 8007dea:	bfa8      	it	ge
 8007dec:	461a      	movge	r2, r3
 8007dee:	2a00      	cmp	r2, #0
 8007df0:	4691      	mov	r9, r2
 8007df2:	dc37      	bgt.n	8007e64 <_printf_float+0x370>
 8007df4:	f04f 0b00 	mov.w	fp, #0
 8007df8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007dfc:	f104 021a 	add.w	r2, r4, #26
 8007e00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e02:	9305      	str	r3, [sp, #20]
 8007e04:	eba3 0309 	sub.w	r3, r3, r9
 8007e08:	455b      	cmp	r3, fp
 8007e0a:	dc33      	bgt.n	8007e74 <_printf_float+0x380>
 8007e0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e10:	429a      	cmp	r2, r3
 8007e12:	db3b      	blt.n	8007e8c <_printf_float+0x398>
 8007e14:	6823      	ldr	r3, [r4, #0]
 8007e16:	07da      	lsls	r2, r3, #31
 8007e18:	d438      	bmi.n	8007e8c <_printf_float+0x398>
 8007e1a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007e1e:	eba2 0903 	sub.w	r9, r2, r3
 8007e22:	9b05      	ldr	r3, [sp, #20]
 8007e24:	1ad2      	subs	r2, r2, r3
 8007e26:	4591      	cmp	r9, r2
 8007e28:	bfa8      	it	ge
 8007e2a:	4691      	movge	r9, r2
 8007e2c:	f1b9 0f00 	cmp.w	r9, #0
 8007e30:	dc35      	bgt.n	8007e9e <_printf_float+0x3aa>
 8007e32:	f04f 0800 	mov.w	r8, #0
 8007e36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e3a:	f104 0a1a 	add.w	sl, r4, #26
 8007e3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e42:	1a9b      	subs	r3, r3, r2
 8007e44:	eba3 0309 	sub.w	r3, r3, r9
 8007e48:	4543      	cmp	r3, r8
 8007e4a:	f77f af79 	ble.w	8007d40 <_printf_float+0x24c>
 8007e4e:	2301      	movs	r3, #1
 8007e50:	4652      	mov	r2, sl
 8007e52:	4631      	mov	r1, r6
 8007e54:	4628      	mov	r0, r5
 8007e56:	47b8      	blx	r7
 8007e58:	3001      	adds	r0, #1
 8007e5a:	f43f aeaa 	beq.w	8007bb2 <_printf_float+0xbe>
 8007e5e:	f108 0801 	add.w	r8, r8, #1
 8007e62:	e7ec      	b.n	8007e3e <_printf_float+0x34a>
 8007e64:	4613      	mov	r3, r2
 8007e66:	4631      	mov	r1, r6
 8007e68:	4642      	mov	r2, r8
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	47b8      	blx	r7
 8007e6e:	3001      	adds	r0, #1
 8007e70:	d1c0      	bne.n	8007df4 <_printf_float+0x300>
 8007e72:	e69e      	b.n	8007bb2 <_printf_float+0xbe>
 8007e74:	2301      	movs	r3, #1
 8007e76:	4631      	mov	r1, r6
 8007e78:	4628      	mov	r0, r5
 8007e7a:	9205      	str	r2, [sp, #20]
 8007e7c:	47b8      	blx	r7
 8007e7e:	3001      	adds	r0, #1
 8007e80:	f43f ae97 	beq.w	8007bb2 <_printf_float+0xbe>
 8007e84:	9a05      	ldr	r2, [sp, #20]
 8007e86:	f10b 0b01 	add.w	fp, fp, #1
 8007e8a:	e7b9      	b.n	8007e00 <_printf_float+0x30c>
 8007e8c:	ee18 3a10 	vmov	r3, s16
 8007e90:	4652      	mov	r2, sl
 8007e92:	4631      	mov	r1, r6
 8007e94:	4628      	mov	r0, r5
 8007e96:	47b8      	blx	r7
 8007e98:	3001      	adds	r0, #1
 8007e9a:	d1be      	bne.n	8007e1a <_printf_float+0x326>
 8007e9c:	e689      	b.n	8007bb2 <_printf_float+0xbe>
 8007e9e:	9a05      	ldr	r2, [sp, #20]
 8007ea0:	464b      	mov	r3, r9
 8007ea2:	4442      	add	r2, r8
 8007ea4:	4631      	mov	r1, r6
 8007ea6:	4628      	mov	r0, r5
 8007ea8:	47b8      	blx	r7
 8007eaa:	3001      	adds	r0, #1
 8007eac:	d1c1      	bne.n	8007e32 <_printf_float+0x33e>
 8007eae:	e680      	b.n	8007bb2 <_printf_float+0xbe>
 8007eb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007eb2:	2a01      	cmp	r2, #1
 8007eb4:	dc01      	bgt.n	8007eba <_printf_float+0x3c6>
 8007eb6:	07db      	lsls	r3, r3, #31
 8007eb8:	d53a      	bpl.n	8007f30 <_printf_float+0x43c>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	4642      	mov	r2, r8
 8007ebe:	4631      	mov	r1, r6
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	47b8      	blx	r7
 8007ec4:	3001      	adds	r0, #1
 8007ec6:	f43f ae74 	beq.w	8007bb2 <_printf_float+0xbe>
 8007eca:	ee18 3a10 	vmov	r3, s16
 8007ece:	4652      	mov	r2, sl
 8007ed0:	4631      	mov	r1, r6
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	47b8      	blx	r7
 8007ed6:	3001      	adds	r0, #1
 8007ed8:	f43f ae6b 	beq.w	8007bb2 <_printf_float+0xbe>
 8007edc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007ee8:	f7f8 fe0e 	bl	8000b08 <__aeabi_dcmpeq>
 8007eec:	b9d8      	cbnz	r0, 8007f26 <_printf_float+0x432>
 8007eee:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007ef2:	f108 0201 	add.w	r2, r8, #1
 8007ef6:	4631      	mov	r1, r6
 8007ef8:	4628      	mov	r0, r5
 8007efa:	47b8      	blx	r7
 8007efc:	3001      	adds	r0, #1
 8007efe:	d10e      	bne.n	8007f1e <_printf_float+0x42a>
 8007f00:	e657      	b.n	8007bb2 <_printf_float+0xbe>
 8007f02:	2301      	movs	r3, #1
 8007f04:	4652      	mov	r2, sl
 8007f06:	4631      	mov	r1, r6
 8007f08:	4628      	mov	r0, r5
 8007f0a:	47b8      	blx	r7
 8007f0c:	3001      	adds	r0, #1
 8007f0e:	f43f ae50 	beq.w	8007bb2 <_printf_float+0xbe>
 8007f12:	f108 0801 	add.w	r8, r8, #1
 8007f16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	4543      	cmp	r3, r8
 8007f1c:	dcf1      	bgt.n	8007f02 <_printf_float+0x40e>
 8007f1e:	464b      	mov	r3, r9
 8007f20:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007f24:	e6da      	b.n	8007cdc <_printf_float+0x1e8>
 8007f26:	f04f 0800 	mov.w	r8, #0
 8007f2a:	f104 0a1a 	add.w	sl, r4, #26
 8007f2e:	e7f2      	b.n	8007f16 <_printf_float+0x422>
 8007f30:	2301      	movs	r3, #1
 8007f32:	4642      	mov	r2, r8
 8007f34:	e7df      	b.n	8007ef6 <_printf_float+0x402>
 8007f36:	2301      	movs	r3, #1
 8007f38:	464a      	mov	r2, r9
 8007f3a:	4631      	mov	r1, r6
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	47b8      	blx	r7
 8007f40:	3001      	adds	r0, #1
 8007f42:	f43f ae36 	beq.w	8007bb2 <_printf_float+0xbe>
 8007f46:	f108 0801 	add.w	r8, r8, #1
 8007f4a:	68e3      	ldr	r3, [r4, #12]
 8007f4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f4e:	1a5b      	subs	r3, r3, r1
 8007f50:	4543      	cmp	r3, r8
 8007f52:	dcf0      	bgt.n	8007f36 <_printf_float+0x442>
 8007f54:	e6f8      	b.n	8007d48 <_printf_float+0x254>
 8007f56:	f04f 0800 	mov.w	r8, #0
 8007f5a:	f104 0919 	add.w	r9, r4, #25
 8007f5e:	e7f4      	b.n	8007f4a <_printf_float+0x456>

08007f60 <_printf_common>:
 8007f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f64:	4616      	mov	r6, r2
 8007f66:	4699      	mov	r9, r3
 8007f68:	688a      	ldr	r2, [r1, #8]
 8007f6a:	690b      	ldr	r3, [r1, #16]
 8007f6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f70:	4293      	cmp	r3, r2
 8007f72:	bfb8      	it	lt
 8007f74:	4613      	movlt	r3, r2
 8007f76:	6033      	str	r3, [r6, #0]
 8007f78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f7c:	4607      	mov	r7, r0
 8007f7e:	460c      	mov	r4, r1
 8007f80:	b10a      	cbz	r2, 8007f86 <_printf_common+0x26>
 8007f82:	3301      	adds	r3, #1
 8007f84:	6033      	str	r3, [r6, #0]
 8007f86:	6823      	ldr	r3, [r4, #0]
 8007f88:	0699      	lsls	r1, r3, #26
 8007f8a:	bf42      	ittt	mi
 8007f8c:	6833      	ldrmi	r3, [r6, #0]
 8007f8e:	3302      	addmi	r3, #2
 8007f90:	6033      	strmi	r3, [r6, #0]
 8007f92:	6825      	ldr	r5, [r4, #0]
 8007f94:	f015 0506 	ands.w	r5, r5, #6
 8007f98:	d106      	bne.n	8007fa8 <_printf_common+0x48>
 8007f9a:	f104 0a19 	add.w	sl, r4, #25
 8007f9e:	68e3      	ldr	r3, [r4, #12]
 8007fa0:	6832      	ldr	r2, [r6, #0]
 8007fa2:	1a9b      	subs	r3, r3, r2
 8007fa4:	42ab      	cmp	r3, r5
 8007fa6:	dc26      	bgt.n	8007ff6 <_printf_common+0x96>
 8007fa8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007fac:	1e13      	subs	r3, r2, #0
 8007fae:	6822      	ldr	r2, [r4, #0]
 8007fb0:	bf18      	it	ne
 8007fb2:	2301      	movne	r3, #1
 8007fb4:	0692      	lsls	r2, r2, #26
 8007fb6:	d42b      	bmi.n	8008010 <_printf_common+0xb0>
 8007fb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fbc:	4649      	mov	r1, r9
 8007fbe:	4638      	mov	r0, r7
 8007fc0:	47c0      	blx	r8
 8007fc2:	3001      	adds	r0, #1
 8007fc4:	d01e      	beq.n	8008004 <_printf_common+0xa4>
 8007fc6:	6823      	ldr	r3, [r4, #0]
 8007fc8:	6922      	ldr	r2, [r4, #16]
 8007fca:	f003 0306 	and.w	r3, r3, #6
 8007fce:	2b04      	cmp	r3, #4
 8007fd0:	bf02      	ittt	eq
 8007fd2:	68e5      	ldreq	r5, [r4, #12]
 8007fd4:	6833      	ldreq	r3, [r6, #0]
 8007fd6:	1aed      	subeq	r5, r5, r3
 8007fd8:	68a3      	ldr	r3, [r4, #8]
 8007fda:	bf0c      	ite	eq
 8007fdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fe0:	2500      	movne	r5, #0
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	bfc4      	itt	gt
 8007fe6:	1a9b      	subgt	r3, r3, r2
 8007fe8:	18ed      	addgt	r5, r5, r3
 8007fea:	2600      	movs	r6, #0
 8007fec:	341a      	adds	r4, #26
 8007fee:	42b5      	cmp	r5, r6
 8007ff0:	d11a      	bne.n	8008028 <_printf_common+0xc8>
 8007ff2:	2000      	movs	r0, #0
 8007ff4:	e008      	b.n	8008008 <_printf_common+0xa8>
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	4652      	mov	r2, sl
 8007ffa:	4649      	mov	r1, r9
 8007ffc:	4638      	mov	r0, r7
 8007ffe:	47c0      	blx	r8
 8008000:	3001      	adds	r0, #1
 8008002:	d103      	bne.n	800800c <_printf_common+0xac>
 8008004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800800c:	3501      	adds	r5, #1
 800800e:	e7c6      	b.n	8007f9e <_printf_common+0x3e>
 8008010:	18e1      	adds	r1, r4, r3
 8008012:	1c5a      	adds	r2, r3, #1
 8008014:	2030      	movs	r0, #48	; 0x30
 8008016:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800801a:	4422      	add	r2, r4
 800801c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008020:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008024:	3302      	adds	r3, #2
 8008026:	e7c7      	b.n	8007fb8 <_printf_common+0x58>
 8008028:	2301      	movs	r3, #1
 800802a:	4622      	mov	r2, r4
 800802c:	4649      	mov	r1, r9
 800802e:	4638      	mov	r0, r7
 8008030:	47c0      	blx	r8
 8008032:	3001      	adds	r0, #1
 8008034:	d0e6      	beq.n	8008004 <_printf_common+0xa4>
 8008036:	3601      	adds	r6, #1
 8008038:	e7d9      	b.n	8007fee <_printf_common+0x8e>
	...

0800803c <_printf_i>:
 800803c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008040:	7e0f      	ldrb	r7, [r1, #24]
 8008042:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008044:	2f78      	cmp	r7, #120	; 0x78
 8008046:	4691      	mov	r9, r2
 8008048:	4680      	mov	r8, r0
 800804a:	460c      	mov	r4, r1
 800804c:	469a      	mov	sl, r3
 800804e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008052:	d807      	bhi.n	8008064 <_printf_i+0x28>
 8008054:	2f62      	cmp	r7, #98	; 0x62
 8008056:	d80a      	bhi.n	800806e <_printf_i+0x32>
 8008058:	2f00      	cmp	r7, #0
 800805a:	f000 80d4 	beq.w	8008206 <_printf_i+0x1ca>
 800805e:	2f58      	cmp	r7, #88	; 0x58
 8008060:	f000 80c0 	beq.w	80081e4 <_printf_i+0x1a8>
 8008064:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008068:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800806c:	e03a      	b.n	80080e4 <_printf_i+0xa8>
 800806e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008072:	2b15      	cmp	r3, #21
 8008074:	d8f6      	bhi.n	8008064 <_printf_i+0x28>
 8008076:	a101      	add	r1, pc, #4	; (adr r1, 800807c <_printf_i+0x40>)
 8008078:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800807c:	080080d5 	.word	0x080080d5
 8008080:	080080e9 	.word	0x080080e9
 8008084:	08008065 	.word	0x08008065
 8008088:	08008065 	.word	0x08008065
 800808c:	08008065 	.word	0x08008065
 8008090:	08008065 	.word	0x08008065
 8008094:	080080e9 	.word	0x080080e9
 8008098:	08008065 	.word	0x08008065
 800809c:	08008065 	.word	0x08008065
 80080a0:	08008065 	.word	0x08008065
 80080a4:	08008065 	.word	0x08008065
 80080a8:	080081ed 	.word	0x080081ed
 80080ac:	08008115 	.word	0x08008115
 80080b0:	080081a7 	.word	0x080081a7
 80080b4:	08008065 	.word	0x08008065
 80080b8:	08008065 	.word	0x08008065
 80080bc:	0800820f 	.word	0x0800820f
 80080c0:	08008065 	.word	0x08008065
 80080c4:	08008115 	.word	0x08008115
 80080c8:	08008065 	.word	0x08008065
 80080cc:	08008065 	.word	0x08008065
 80080d0:	080081af 	.word	0x080081af
 80080d4:	682b      	ldr	r3, [r5, #0]
 80080d6:	1d1a      	adds	r2, r3, #4
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	602a      	str	r2, [r5, #0]
 80080dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080e4:	2301      	movs	r3, #1
 80080e6:	e09f      	b.n	8008228 <_printf_i+0x1ec>
 80080e8:	6820      	ldr	r0, [r4, #0]
 80080ea:	682b      	ldr	r3, [r5, #0]
 80080ec:	0607      	lsls	r7, r0, #24
 80080ee:	f103 0104 	add.w	r1, r3, #4
 80080f2:	6029      	str	r1, [r5, #0]
 80080f4:	d501      	bpl.n	80080fa <_printf_i+0xbe>
 80080f6:	681e      	ldr	r6, [r3, #0]
 80080f8:	e003      	b.n	8008102 <_printf_i+0xc6>
 80080fa:	0646      	lsls	r6, r0, #25
 80080fc:	d5fb      	bpl.n	80080f6 <_printf_i+0xba>
 80080fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008102:	2e00      	cmp	r6, #0
 8008104:	da03      	bge.n	800810e <_printf_i+0xd2>
 8008106:	232d      	movs	r3, #45	; 0x2d
 8008108:	4276      	negs	r6, r6
 800810a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800810e:	485a      	ldr	r0, [pc, #360]	; (8008278 <_printf_i+0x23c>)
 8008110:	230a      	movs	r3, #10
 8008112:	e012      	b.n	800813a <_printf_i+0xfe>
 8008114:	682b      	ldr	r3, [r5, #0]
 8008116:	6820      	ldr	r0, [r4, #0]
 8008118:	1d19      	adds	r1, r3, #4
 800811a:	6029      	str	r1, [r5, #0]
 800811c:	0605      	lsls	r5, r0, #24
 800811e:	d501      	bpl.n	8008124 <_printf_i+0xe8>
 8008120:	681e      	ldr	r6, [r3, #0]
 8008122:	e002      	b.n	800812a <_printf_i+0xee>
 8008124:	0641      	lsls	r1, r0, #25
 8008126:	d5fb      	bpl.n	8008120 <_printf_i+0xe4>
 8008128:	881e      	ldrh	r6, [r3, #0]
 800812a:	4853      	ldr	r0, [pc, #332]	; (8008278 <_printf_i+0x23c>)
 800812c:	2f6f      	cmp	r7, #111	; 0x6f
 800812e:	bf0c      	ite	eq
 8008130:	2308      	moveq	r3, #8
 8008132:	230a      	movne	r3, #10
 8008134:	2100      	movs	r1, #0
 8008136:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800813a:	6865      	ldr	r5, [r4, #4]
 800813c:	60a5      	str	r5, [r4, #8]
 800813e:	2d00      	cmp	r5, #0
 8008140:	bfa2      	ittt	ge
 8008142:	6821      	ldrge	r1, [r4, #0]
 8008144:	f021 0104 	bicge.w	r1, r1, #4
 8008148:	6021      	strge	r1, [r4, #0]
 800814a:	b90e      	cbnz	r6, 8008150 <_printf_i+0x114>
 800814c:	2d00      	cmp	r5, #0
 800814e:	d04b      	beq.n	80081e8 <_printf_i+0x1ac>
 8008150:	4615      	mov	r5, r2
 8008152:	fbb6 f1f3 	udiv	r1, r6, r3
 8008156:	fb03 6711 	mls	r7, r3, r1, r6
 800815a:	5dc7      	ldrb	r7, [r0, r7]
 800815c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008160:	4637      	mov	r7, r6
 8008162:	42bb      	cmp	r3, r7
 8008164:	460e      	mov	r6, r1
 8008166:	d9f4      	bls.n	8008152 <_printf_i+0x116>
 8008168:	2b08      	cmp	r3, #8
 800816a:	d10b      	bne.n	8008184 <_printf_i+0x148>
 800816c:	6823      	ldr	r3, [r4, #0]
 800816e:	07de      	lsls	r6, r3, #31
 8008170:	d508      	bpl.n	8008184 <_printf_i+0x148>
 8008172:	6923      	ldr	r3, [r4, #16]
 8008174:	6861      	ldr	r1, [r4, #4]
 8008176:	4299      	cmp	r1, r3
 8008178:	bfde      	ittt	le
 800817a:	2330      	movle	r3, #48	; 0x30
 800817c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008180:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008184:	1b52      	subs	r2, r2, r5
 8008186:	6122      	str	r2, [r4, #16]
 8008188:	f8cd a000 	str.w	sl, [sp]
 800818c:	464b      	mov	r3, r9
 800818e:	aa03      	add	r2, sp, #12
 8008190:	4621      	mov	r1, r4
 8008192:	4640      	mov	r0, r8
 8008194:	f7ff fee4 	bl	8007f60 <_printf_common>
 8008198:	3001      	adds	r0, #1
 800819a:	d14a      	bne.n	8008232 <_printf_i+0x1f6>
 800819c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081a0:	b004      	add	sp, #16
 80081a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081a6:	6823      	ldr	r3, [r4, #0]
 80081a8:	f043 0320 	orr.w	r3, r3, #32
 80081ac:	6023      	str	r3, [r4, #0]
 80081ae:	4833      	ldr	r0, [pc, #204]	; (800827c <_printf_i+0x240>)
 80081b0:	2778      	movs	r7, #120	; 0x78
 80081b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80081b6:	6823      	ldr	r3, [r4, #0]
 80081b8:	6829      	ldr	r1, [r5, #0]
 80081ba:	061f      	lsls	r7, r3, #24
 80081bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80081c0:	d402      	bmi.n	80081c8 <_printf_i+0x18c>
 80081c2:	065f      	lsls	r7, r3, #25
 80081c4:	bf48      	it	mi
 80081c6:	b2b6      	uxthmi	r6, r6
 80081c8:	07df      	lsls	r7, r3, #31
 80081ca:	bf48      	it	mi
 80081cc:	f043 0320 	orrmi.w	r3, r3, #32
 80081d0:	6029      	str	r1, [r5, #0]
 80081d2:	bf48      	it	mi
 80081d4:	6023      	strmi	r3, [r4, #0]
 80081d6:	b91e      	cbnz	r6, 80081e0 <_printf_i+0x1a4>
 80081d8:	6823      	ldr	r3, [r4, #0]
 80081da:	f023 0320 	bic.w	r3, r3, #32
 80081de:	6023      	str	r3, [r4, #0]
 80081e0:	2310      	movs	r3, #16
 80081e2:	e7a7      	b.n	8008134 <_printf_i+0xf8>
 80081e4:	4824      	ldr	r0, [pc, #144]	; (8008278 <_printf_i+0x23c>)
 80081e6:	e7e4      	b.n	80081b2 <_printf_i+0x176>
 80081e8:	4615      	mov	r5, r2
 80081ea:	e7bd      	b.n	8008168 <_printf_i+0x12c>
 80081ec:	682b      	ldr	r3, [r5, #0]
 80081ee:	6826      	ldr	r6, [r4, #0]
 80081f0:	6961      	ldr	r1, [r4, #20]
 80081f2:	1d18      	adds	r0, r3, #4
 80081f4:	6028      	str	r0, [r5, #0]
 80081f6:	0635      	lsls	r5, r6, #24
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	d501      	bpl.n	8008200 <_printf_i+0x1c4>
 80081fc:	6019      	str	r1, [r3, #0]
 80081fe:	e002      	b.n	8008206 <_printf_i+0x1ca>
 8008200:	0670      	lsls	r0, r6, #25
 8008202:	d5fb      	bpl.n	80081fc <_printf_i+0x1c0>
 8008204:	8019      	strh	r1, [r3, #0]
 8008206:	2300      	movs	r3, #0
 8008208:	6123      	str	r3, [r4, #16]
 800820a:	4615      	mov	r5, r2
 800820c:	e7bc      	b.n	8008188 <_printf_i+0x14c>
 800820e:	682b      	ldr	r3, [r5, #0]
 8008210:	1d1a      	adds	r2, r3, #4
 8008212:	602a      	str	r2, [r5, #0]
 8008214:	681d      	ldr	r5, [r3, #0]
 8008216:	6862      	ldr	r2, [r4, #4]
 8008218:	2100      	movs	r1, #0
 800821a:	4628      	mov	r0, r5
 800821c:	f7f7 fff8 	bl	8000210 <memchr>
 8008220:	b108      	cbz	r0, 8008226 <_printf_i+0x1ea>
 8008222:	1b40      	subs	r0, r0, r5
 8008224:	6060      	str	r0, [r4, #4]
 8008226:	6863      	ldr	r3, [r4, #4]
 8008228:	6123      	str	r3, [r4, #16]
 800822a:	2300      	movs	r3, #0
 800822c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008230:	e7aa      	b.n	8008188 <_printf_i+0x14c>
 8008232:	6923      	ldr	r3, [r4, #16]
 8008234:	462a      	mov	r2, r5
 8008236:	4649      	mov	r1, r9
 8008238:	4640      	mov	r0, r8
 800823a:	47d0      	blx	sl
 800823c:	3001      	adds	r0, #1
 800823e:	d0ad      	beq.n	800819c <_printf_i+0x160>
 8008240:	6823      	ldr	r3, [r4, #0]
 8008242:	079b      	lsls	r3, r3, #30
 8008244:	d413      	bmi.n	800826e <_printf_i+0x232>
 8008246:	68e0      	ldr	r0, [r4, #12]
 8008248:	9b03      	ldr	r3, [sp, #12]
 800824a:	4298      	cmp	r0, r3
 800824c:	bfb8      	it	lt
 800824e:	4618      	movlt	r0, r3
 8008250:	e7a6      	b.n	80081a0 <_printf_i+0x164>
 8008252:	2301      	movs	r3, #1
 8008254:	4632      	mov	r2, r6
 8008256:	4649      	mov	r1, r9
 8008258:	4640      	mov	r0, r8
 800825a:	47d0      	blx	sl
 800825c:	3001      	adds	r0, #1
 800825e:	d09d      	beq.n	800819c <_printf_i+0x160>
 8008260:	3501      	adds	r5, #1
 8008262:	68e3      	ldr	r3, [r4, #12]
 8008264:	9903      	ldr	r1, [sp, #12]
 8008266:	1a5b      	subs	r3, r3, r1
 8008268:	42ab      	cmp	r3, r5
 800826a:	dcf2      	bgt.n	8008252 <_printf_i+0x216>
 800826c:	e7eb      	b.n	8008246 <_printf_i+0x20a>
 800826e:	2500      	movs	r5, #0
 8008270:	f104 0619 	add.w	r6, r4, #25
 8008274:	e7f5      	b.n	8008262 <_printf_i+0x226>
 8008276:	bf00      	nop
 8008278:	0800a396 	.word	0x0800a396
 800827c:	0800a3a7 	.word	0x0800a3a7

08008280 <std>:
 8008280:	2300      	movs	r3, #0
 8008282:	b510      	push	{r4, lr}
 8008284:	4604      	mov	r4, r0
 8008286:	e9c0 3300 	strd	r3, r3, [r0]
 800828a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800828e:	6083      	str	r3, [r0, #8]
 8008290:	8181      	strh	r1, [r0, #12]
 8008292:	6643      	str	r3, [r0, #100]	; 0x64
 8008294:	81c2      	strh	r2, [r0, #14]
 8008296:	6183      	str	r3, [r0, #24]
 8008298:	4619      	mov	r1, r3
 800829a:	2208      	movs	r2, #8
 800829c:	305c      	adds	r0, #92	; 0x5c
 800829e:	f000 f8c3 	bl	8008428 <memset>
 80082a2:	4b0d      	ldr	r3, [pc, #52]	; (80082d8 <std+0x58>)
 80082a4:	6263      	str	r3, [r4, #36]	; 0x24
 80082a6:	4b0d      	ldr	r3, [pc, #52]	; (80082dc <std+0x5c>)
 80082a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80082aa:	4b0d      	ldr	r3, [pc, #52]	; (80082e0 <std+0x60>)
 80082ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80082ae:	4b0d      	ldr	r3, [pc, #52]	; (80082e4 <std+0x64>)
 80082b0:	6323      	str	r3, [r4, #48]	; 0x30
 80082b2:	4b0d      	ldr	r3, [pc, #52]	; (80082e8 <std+0x68>)
 80082b4:	6224      	str	r4, [r4, #32]
 80082b6:	429c      	cmp	r4, r3
 80082b8:	d006      	beq.n	80082c8 <std+0x48>
 80082ba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80082be:	4294      	cmp	r4, r2
 80082c0:	d002      	beq.n	80082c8 <std+0x48>
 80082c2:	33d0      	adds	r3, #208	; 0xd0
 80082c4:	429c      	cmp	r4, r3
 80082c6:	d105      	bne.n	80082d4 <std+0x54>
 80082c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80082cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082d0:	f000 b8e0 	b.w	8008494 <__retarget_lock_init_recursive>
 80082d4:	bd10      	pop	{r4, pc}
 80082d6:	bf00      	nop
 80082d8:	08009dd9 	.word	0x08009dd9
 80082dc:	08009dfb 	.word	0x08009dfb
 80082e0:	08009e33 	.word	0x08009e33
 80082e4:	08009e57 	.word	0x08009e57
 80082e8:	200005f4 	.word	0x200005f4

080082ec <stdio_exit_handler>:
 80082ec:	4a02      	ldr	r2, [pc, #8]	; (80082f8 <stdio_exit_handler+0xc>)
 80082ee:	4903      	ldr	r1, [pc, #12]	; (80082fc <stdio_exit_handler+0x10>)
 80082f0:	4803      	ldr	r0, [pc, #12]	; (8008300 <stdio_exit_handler+0x14>)
 80082f2:	f000 b869 	b.w	80083c8 <_fwalk_sglue>
 80082f6:	bf00      	nop
 80082f8:	20000038 	.word	0x20000038
 80082fc:	08009679 	.word	0x08009679
 8008300:	20000044 	.word	0x20000044

08008304 <cleanup_stdio>:
 8008304:	6841      	ldr	r1, [r0, #4]
 8008306:	4b0c      	ldr	r3, [pc, #48]	; (8008338 <cleanup_stdio+0x34>)
 8008308:	4299      	cmp	r1, r3
 800830a:	b510      	push	{r4, lr}
 800830c:	4604      	mov	r4, r0
 800830e:	d001      	beq.n	8008314 <cleanup_stdio+0x10>
 8008310:	f001 f9b2 	bl	8009678 <_fflush_r>
 8008314:	68a1      	ldr	r1, [r4, #8]
 8008316:	4b09      	ldr	r3, [pc, #36]	; (800833c <cleanup_stdio+0x38>)
 8008318:	4299      	cmp	r1, r3
 800831a:	d002      	beq.n	8008322 <cleanup_stdio+0x1e>
 800831c:	4620      	mov	r0, r4
 800831e:	f001 f9ab 	bl	8009678 <_fflush_r>
 8008322:	68e1      	ldr	r1, [r4, #12]
 8008324:	4b06      	ldr	r3, [pc, #24]	; (8008340 <cleanup_stdio+0x3c>)
 8008326:	4299      	cmp	r1, r3
 8008328:	d004      	beq.n	8008334 <cleanup_stdio+0x30>
 800832a:	4620      	mov	r0, r4
 800832c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008330:	f001 b9a2 	b.w	8009678 <_fflush_r>
 8008334:	bd10      	pop	{r4, pc}
 8008336:	bf00      	nop
 8008338:	200005f4 	.word	0x200005f4
 800833c:	2000065c 	.word	0x2000065c
 8008340:	200006c4 	.word	0x200006c4

08008344 <global_stdio_init.part.0>:
 8008344:	b510      	push	{r4, lr}
 8008346:	4b0b      	ldr	r3, [pc, #44]	; (8008374 <global_stdio_init.part.0+0x30>)
 8008348:	4c0b      	ldr	r4, [pc, #44]	; (8008378 <global_stdio_init.part.0+0x34>)
 800834a:	4a0c      	ldr	r2, [pc, #48]	; (800837c <global_stdio_init.part.0+0x38>)
 800834c:	601a      	str	r2, [r3, #0]
 800834e:	4620      	mov	r0, r4
 8008350:	2200      	movs	r2, #0
 8008352:	2104      	movs	r1, #4
 8008354:	f7ff ff94 	bl	8008280 <std>
 8008358:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800835c:	2201      	movs	r2, #1
 800835e:	2109      	movs	r1, #9
 8008360:	f7ff ff8e 	bl	8008280 <std>
 8008364:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008368:	2202      	movs	r2, #2
 800836a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800836e:	2112      	movs	r1, #18
 8008370:	f7ff bf86 	b.w	8008280 <std>
 8008374:	2000072c 	.word	0x2000072c
 8008378:	200005f4 	.word	0x200005f4
 800837c:	080082ed 	.word	0x080082ed

08008380 <__sfp_lock_acquire>:
 8008380:	4801      	ldr	r0, [pc, #4]	; (8008388 <__sfp_lock_acquire+0x8>)
 8008382:	f000 b888 	b.w	8008496 <__retarget_lock_acquire_recursive>
 8008386:	bf00      	nop
 8008388:	20000731 	.word	0x20000731

0800838c <__sfp_lock_release>:
 800838c:	4801      	ldr	r0, [pc, #4]	; (8008394 <__sfp_lock_release+0x8>)
 800838e:	f000 b883 	b.w	8008498 <__retarget_lock_release_recursive>
 8008392:	bf00      	nop
 8008394:	20000731 	.word	0x20000731

08008398 <__sinit>:
 8008398:	b510      	push	{r4, lr}
 800839a:	4604      	mov	r4, r0
 800839c:	f7ff fff0 	bl	8008380 <__sfp_lock_acquire>
 80083a0:	6a23      	ldr	r3, [r4, #32]
 80083a2:	b11b      	cbz	r3, 80083ac <__sinit+0x14>
 80083a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083a8:	f7ff bff0 	b.w	800838c <__sfp_lock_release>
 80083ac:	4b04      	ldr	r3, [pc, #16]	; (80083c0 <__sinit+0x28>)
 80083ae:	6223      	str	r3, [r4, #32]
 80083b0:	4b04      	ldr	r3, [pc, #16]	; (80083c4 <__sinit+0x2c>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d1f5      	bne.n	80083a4 <__sinit+0xc>
 80083b8:	f7ff ffc4 	bl	8008344 <global_stdio_init.part.0>
 80083bc:	e7f2      	b.n	80083a4 <__sinit+0xc>
 80083be:	bf00      	nop
 80083c0:	08008305 	.word	0x08008305
 80083c4:	2000072c 	.word	0x2000072c

080083c8 <_fwalk_sglue>:
 80083c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083cc:	4607      	mov	r7, r0
 80083ce:	4688      	mov	r8, r1
 80083d0:	4614      	mov	r4, r2
 80083d2:	2600      	movs	r6, #0
 80083d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80083d8:	f1b9 0901 	subs.w	r9, r9, #1
 80083dc:	d505      	bpl.n	80083ea <_fwalk_sglue+0x22>
 80083de:	6824      	ldr	r4, [r4, #0]
 80083e0:	2c00      	cmp	r4, #0
 80083e2:	d1f7      	bne.n	80083d4 <_fwalk_sglue+0xc>
 80083e4:	4630      	mov	r0, r6
 80083e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083ea:	89ab      	ldrh	r3, [r5, #12]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d907      	bls.n	8008400 <_fwalk_sglue+0x38>
 80083f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083f4:	3301      	adds	r3, #1
 80083f6:	d003      	beq.n	8008400 <_fwalk_sglue+0x38>
 80083f8:	4629      	mov	r1, r5
 80083fa:	4638      	mov	r0, r7
 80083fc:	47c0      	blx	r8
 80083fe:	4306      	orrs	r6, r0
 8008400:	3568      	adds	r5, #104	; 0x68
 8008402:	e7e9      	b.n	80083d8 <_fwalk_sglue+0x10>

08008404 <iprintf>:
 8008404:	b40f      	push	{r0, r1, r2, r3}
 8008406:	b507      	push	{r0, r1, r2, lr}
 8008408:	4906      	ldr	r1, [pc, #24]	; (8008424 <iprintf+0x20>)
 800840a:	ab04      	add	r3, sp, #16
 800840c:	6808      	ldr	r0, [r1, #0]
 800840e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008412:	6881      	ldr	r1, [r0, #8]
 8008414:	9301      	str	r3, [sp, #4]
 8008416:	f000 fee7 	bl	80091e8 <_vfiprintf_r>
 800841a:	b003      	add	sp, #12
 800841c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008420:	b004      	add	sp, #16
 8008422:	4770      	bx	lr
 8008424:	20000090 	.word	0x20000090

08008428 <memset>:
 8008428:	4402      	add	r2, r0
 800842a:	4603      	mov	r3, r0
 800842c:	4293      	cmp	r3, r2
 800842e:	d100      	bne.n	8008432 <memset+0xa>
 8008430:	4770      	bx	lr
 8008432:	f803 1b01 	strb.w	r1, [r3], #1
 8008436:	e7f9      	b.n	800842c <memset+0x4>

08008438 <_localeconv_r>:
 8008438:	4800      	ldr	r0, [pc, #0]	; (800843c <_localeconv_r+0x4>)
 800843a:	4770      	bx	lr
 800843c:	20000184 	.word	0x20000184

08008440 <__errno>:
 8008440:	4b01      	ldr	r3, [pc, #4]	; (8008448 <__errno+0x8>)
 8008442:	6818      	ldr	r0, [r3, #0]
 8008444:	4770      	bx	lr
 8008446:	bf00      	nop
 8008448:	20000090 	.word	0x20000090

0800844c <__libc_init_array>:
 800844c:	b570      	push	{r4, r5, r6, lr}
 800844e:	4d0d      	ldr	r5, [pc, #52]	; (8008484 <__libc_init_array+0x38>)
 8008450:	4c0d      	ldr	r4, [pc, #52]	; (8008488 <__libc_init_array+0x3c>)
 8008452:	1b64      	subs	r4, r4, r5
 8008454:	10a4      	asrs	r4, r4, #2
 8008456:	2600      	movs	r6, #0
 8008458:	42a6      	cmp	r6, r4
 800845a:	d109      	bne.n	8008470 <__libc_init_array+0x24>
 800845c:	4d0b      	ldr	r5, [pc, #44]	; (800848c <__libc_init_array+0x40>)
 800845e:	4c0c      	ldr	r4, [pc, #48]	; (8008490 <__libc_init_array+0x44>)
 8008460:	f001 ff76 	bl	800a350 <_init>
 8008464:	1b64      	subs	r4, r4, r5
 8008466:	10a4      	asrs	r4, r4, #2
 8008468:	2600      	movs	r6, #0
 800846a:	42a6      	cmp	r6, r4
 800846c:	d105      	bne.n	800847a <__libc_init_array+0x2e>
 800846e:	bd70      	pop	{r4, r5, r6, pc}
 8008470:	f855 3b04 	ldr.w	r3, [r5], #4
 8008474:	4798      	blx	r3
 8008476:	3601      	adds	r6, #1
 8008478:	e7ee      	b.n	8008458 <__libc_init_array+0xc>
 800847a:	f855 3b04 	ldr.w	r3, [r5], #4
 800847e:	4798      	blx	r3
 8008480:	3601      	adds	r6, #1
 8008482:	e7f2      	b.n	800846a <__libc_init_array+0x1e>
 8008484:	0800a6fc 	.word	0x0800a6fc
 8008488:	0800a6fc 	.word	0x0800a6fc
 800848c:	0800a6fc 	.word	0x0800a6fc
 8008490:	0800a700 	.word	0x0800a700

08008494 <__retarget_lock_init_recursive>:
 8008494:	4770      	bx	lr

08008496 <__retarget_lock_acquire_recursive>:
 8008496:	4770      	bx	lr

08008498 <__retarget_lock_release_recursive>:
 8008498:	4770      	bx	lr

0800849a <quorem>:
 800849a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800849e:	6903      	ldr	r3, [r0, #16]
 80084a0:	690c      	ldr	r4, [r1, #16]
 80084a2:	42a3      	cmp	r3, r4
 80084a4:	4607      	mov	r7, r0
 80084a6:	db7e      	blt.n	80085a6 <quorem+0x10c>
 80084a8:	3c01      	subs	r4, #1
 80084aa:	f101 0814 	add.w	r8, r1, #20
 80084ae:	f100 0514 	add.w	r5, r0, #20
 80084b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084b6:	9301      	str	r3, [sp, #4]
 80084b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80084bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084c0:	3301      	adds	r3, #1
 80084c2:	429a      	cmp	r2, r3
 80084c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80084c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80084cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80084d0:	d331      	bcc.n	8008536 <quorem+0x9c>
 80084d2:	f04f 0e00 	mov.w	lr, #0
 80084d6:	4640      	mov	r0, r8
 80084d8:	46ac      	mov	ip, r5
 80084da:	46f2      	mov	sl, lr
 80084dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80084e0:	b293      	uxth	r3, r2
 80084e2:	fb06 e303 	mla	r3, r6, r3, lr
 80084e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80084ea:	0c1a      	lsrs	r2, r3, #16
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	ebaa 0303 	sub.w	r3, sl, r3
 80084f2:	f8dc a000 	ldr.w	sl, [ip]
 80084f6:	fa13 f38a 	uxtah	r3, r3, sl
 80084fa:	fb06 220e 	mla	r2, r6, lr, r2
 80084fe:	9300      	str	r3, [sp, #0]
 8008500:	9b00      	ldr	r3, [sp, #0]
 8008502:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008506:	b292      	uxth	r2, r2
 8008508:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800850c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008510:	f8bd 3000 	ldrh.w	r3, [sp]
 8008514:	4581      	cmp	r9, r0
 8008516:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800851a:	f84c 3b04 	str.w	r3, [ip], #4
 800851e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008522:	d2db      	bcs.n	80084dc <quorem+0x42>
 8008524:	f855 300b 	ldr.w	r3, [r5, fp]
 8008528:	b92b      	cbnz	r3, 8008536 <quorem+0x9c>
 800852a:	9b01      	ldr	r3, [sp, #4]
 800852c:	3b04      	subs	r3, #4
 800852e:	429d      	cmp	r5, r3
 8008530:	461a      	mov	r2, r3
 8008532:	d32c      	bcc.n	800858e <quorem+0xf4>
 8008534:	613c      	str	r4, [r7, #16]
 8008536:	4638      	mov	r0, r7
 8008538:	f001 fb4e 	bl	8009bd8 <__mcmp>
 800853c:	2800      	cmp	r0, #0
 800853e:	db22      	blt.n	8008586 <quorem+0xec>
 8008540:	3601      	adds	r6, #1
 8008542:	4629      	mov	r1, r5
 8008544:	2000      	movs	r0, #0
 8008546:	f858 2b04 	ldr.w	r2, [r8], #4
 800854a:	f8d1 c000 	ldr.w	ip, [r1]
 800854e:	b293      	uxth	r3, r2
 8008550:	1ac3      	subs	r3, r0, r3
 8008552:	0c12      	lsrs	r2, r2, #16
 8008554:	fa13 f38c 	uxtah	r3, r3, ip
 8008558:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800855c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008560:	b29b      	uxth	r3, r3
 8008562:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008566:	45c1      	cmp	r9, r8
 8008568:	f841 3b04 	str.w	r3, [r1], #4
 800856c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008570:	d2e9      	bcs.n	8008546 <quorem+0xac>
 8008572:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008576:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800857a:	b922      	cbnz	r2, 8008586 <quorem+0xec>
 800857c:	3b04      	subs	r3, #4
 800857e:	429d      	cmp	r5, r3
 8008580:	461a      	mov	r2, r3
 8008582:	d30a      	bcc.n	800859a <quorem+0x100>
 8008584:	613c      	str	r4, [r7, #16]
 8008586:	4630      	mov	r0, r6
 8008588:	b003      	add	sp, #12
 800858a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800858e:	6812      	ldr	r2, [r2, #0]
 8008590:	3b04      	subs	r3, #4
 8008592:	2a00      	cmp	r2, #0
 8008594:	d1ce      	bne.n	8008534 <quorem+0x9a>
 8008596:	3c01      	subs	r4, #1
 8008598:	e7c9      	b.n	800852e <quorem+0x94>
 800859a:	6812      	ldr	r2, [r2, #0]
 800859c:	3b04      	subs	r3, #4
 800859e:	2a00      	cmp	r2, #0
 80085a0:	d1f0      	bne.n	8008584 <quorem+0xea>
 80085a2:	3c01      	subs	r4, #1
 80085a4:	e7eb      	b.n	800857e <quorem+0xe4>
 80085a6:	2000      	movs	r0, #0
 80085a8:	e7ee      	b.n	8008588 <quorem+0xee>
 80085aa:	0000      	movs	r0, r0
 80085ac:	0000      	movs	r0, r0
	...

080085b0 <_dtoa_r>:
 80085b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b4:	ed2d 8b04 	vpush	{d8-d9}
 80085b8:	69c5      	ldr	r5, [r0, #28]
 80085ba:	b093      	sub	sp, #76	; 0x4c
 80085bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80085c0:	ec57 6b10 	vmov	r6, r7, d0
 80085c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80085c8:	9107      	str	r1, [sp, #28]
 80085ca:	4604      	mov	r4, r0
 80085cc:	920a      	str	r2, [sp, #40]	; 0x28
 80085ce:	930d      	str	r3, [sp, #52]	; 0x34
 80085d0:	b975      	cbnz	r5, 80085f0 <_dtoa_r+0x40>
 80085d2:	2010      	movs	r0, #16
 80085d4:	f000 ff22 	bl	800941c <malloc>
 80085d8:	4602      	mov	r2, r0
 80085da:	61e0      	str	r0, [r4, #28]
 80085dc:	b920      	cbnz	r0, 80085e8 <_dtoa_r+0x38>
 80085de:	4bae      	ldr	r3, [pc, #696]	; (8008898 <_dtoa_r+0x2e8>)
 80085e0:	21ef      	movs	r1, #239	; 0xef
 80085e2:	48ae      	ldr	r0, [pc, #696]	; (800889c <_dtoa_r+0x2ec>)
 80085e4:	f001 fdb8 	bl	800a158 <__assert_func>
 80085e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80085ec:	6005      	str	r5, [r0, #0]
 80085ee:	60c5      	str	r5, [r0, #12]
 80085f0:	69e3      	ldr	r3, [r4, #28]
 80085f2:	6819      	ldr	r1, [r3, #0]
 80085f4:	b151      	cbz	r1, 800860c <_dtoa_r+0x5c>
 80085f6:	685a      	ldr	r2, [r3, #4]
 80085f8:	604a      	str	r2, [r1, #4]
 80085fa:	2301      	movs	r3, #1
 80085fc:	4093      	lsls	r3, r2
 80085fe:	608b      	str	r3, [r1, #8]
 8008600:	4620      	mov	r0, r4
 8008602:	f001 f8ad 	bl	8009760 <_Bfree>
 8008606:	69e3      	ldr	r3, [r4, #28]
 8008608:	2200      	movs	r2, #0
 800860a:	601a      	str	r2, [r3, #0]
 800860c:	1e3b      	subs	r3, r7, #0
 800860e:	bfbb      	ittet	lt
 8008610:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008614:	9303      	strlt	r3, [sp, #12]
 8008616:	2300      	movge	r3, #0
 8008618:	2201      	movlt	r2, #1
 800861a:	bfac      	ite	ge
 800861c:	f8c8 3000 	strge.w	r3, [r8]
 8008620:	f8c8 2000 	strlt.w	r2, [r8]
 8008624:	4b9e      	ldr	r3, [pc, #632]	; (80088a0 <_dtoa_r+0x2f0>)
 8008626:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800862a:	ea33 0308 	bics.w	r3, r3, r8
 800862e:	d11b      	bne.n	8008668 <_dtoa_r+0xb8>
 8008630:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008632:	f242 730f 	movw	r3, #9999	; 0x270f
 8008636:	6013      	str	r3, [r2, #0]
 8008638:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800863c:	4333      	orrs	r3, r6
 800863e:	f000 8593 	beq.w	8009168 <_dtoa_r+0xbb8>
 8008642:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008644:	b963      	cbnz	r3, 8008660 <_dtoa_r+0xb0>
 8008646:	4b97      	ldr	r3, [pc, #604]	; (80088a4 <_dtoa_r+0x2f4>)
 8008648:	e027      	b.n	800869a <_dtoa_r+0xea>
 800864a:	4b97      	ldr	r3, [pc, #604]	; (80088a8 <_dtoa_r+0x2f8>)
 800864c:	9300      	str	r3, [sp, #0]
 800864e:	3308      	adds	r3, #8
 8008650:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008652:	6013      	str	r3, [r2, #0]
 8008654:	9800      	ldr	r0, [sp, #0]
 8008656:	b013      	add	sp, #76	; 0x4c
 8008658:	ecbd 8b04 	vpop	{d8-d9}
 800865c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008660:	4b90      	ldr	r3, [pc, #576]	; (80088a4 <_dtoa_r+0x2f4>)
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	3303      	adds	r3, #3
 8008666:	e7f3      	b.n	8008650 <_dtoa_r+0xa0>
 8008668:	ed9d 7b02 	vldr	d7, [sp, #8]
 800866c:	2200      	movs	r2, #0
 800866e:	ec51 0b17 	vmov	r0, r1, d7
 8008672:	eeb0 8a47 	vmov.f32	s16, s14
 8008676:	eef0 8a67 	vmov.f32	s17, s15
 800867a:	2300      	movs	r3, #0
 800867c:	f7f8 fa44 	bl	8000b08 <__aeabi_dcmpeq>
 8008680:	4681      	mov	r9, r0
 8008682:	b160      	cbz	r0, 800869e <_dtoa_r+0xee>
 8008684:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008686:	2301      	movs	r3, #1
 8008688:	6013      	str	r3, [r2, #0]
 800868a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800868c:	2b00      	cmp	r3, #0
 800868e:	f000 8568 	beq.w	8009162 <_dtoa_r+0xbb2>
 8008692:	4b86      	ldr	r3, [pc, #536]	; (80088ac <_dtoa_r+0x2fc>)
 8008694:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008696:	6013      	str	r3, [r2, #0]
 8008698:	3b01      	subs	r3, #1
 800869a:	9300      	str	r3, [sp, #0]
 800869c:	e7da      	b.n	8008654 <_dtoa_r+0xa4>
 800869e:	aa10      	add	r2, sp, #64	; 0x40
 80086a0:	a911      	add	r1, sp, #68	; 0x44
 80086a2:	4620      	mov	r0, r4
 80086a4:	eeb0 0a48 	vmov.f32	s0, s16
 80086a8:	eef0 0a68 	vmov.f32	s1, s17
 80086ac:	f001 fb3a 	bl	8009d24 <__d2b>
 80086b0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80086b4:	4682      	mov	sl, r0
 80086b6:	2d00      	cmp	r5, #0
 80086b8:	d07f      	beq.n	80087ba <_dtoa_r+0x20a>
 80086ba:	ee18 3a90 	vmov	r3, s17
 80086be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086c2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80086c6:	ec51 0b18 	vmov	r0, r1, d8
 80086ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80086ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80086d2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80086d6:	4619      	mov	r1, r3
 80086d8:	2200      	movs	r2, #0
 80086da:	4b75      	ldr	r3, [pc, #468]	; (80088b0 <_dtoa_r+0x300>)
 80086dc:	f7f7 fdf4 	bl	80002c8 <__aeabi_dsub>
 80086e0:	a367      	add	r3, pc, #412	; (adr r3, 8008880 <_dtoa_r+0x2d0>)
 80086e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e6:	f7f7 ffa7 	bl	8000638 <__aeabi_dmul>
 80086ea:	a367      	add	r3, pc, #412	; (adr r3, 8008888 <_dtoa_r+0x2d8>)
 80086ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f0:	f7f7 fdec 	bl	80002cc <__adddf3>
 80086f4:	4606      	mov	r6, r0
 80086f6:	4628      	mov	r0, r5
 80086f8:	460f      	mov	r7, r1
 80086fa:	f7f7 ff33 	bl	8000564 <__aeabi_i2d>
 80086fe:	a364      	add	r3, pc, #400	; (adr r3, 8008890 <_dtoa_r+0x2e0>)
 8008700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008704:	f7f7 ff98 	bl	8000638 <__aeabi_dmul>
 8008708:	4602      	mov	r2, r0
 800870a:	460b      	mov	r3, r1
 800870c:	4630      	mov	r0, r6
 800870e:	4639      	mov	r1, r7
 8008710:	f7f7 fddc 	bl	80002cc <__adddf3>
 8008714:	4606      	mov	r6, r0
 8008716:	460f      	mov	r7, r1
 8008718:	f7f8 fa3e 	bl	8000b98 <__aeabi_d2iz>
 800871c:	2200      	movs	r2, #0
 800871e:	4683      	mov	fp, r0
 8008720:	2300      	movs	r3, #0
 8008722:	4630      	mov	r0, r6
 8008724:	4639      	mov	r1, r7
 8008726:	f7f8 f9f9 	bl	8000b1c <__aeabi_dcmplt>
 800872a:	b148      	cbz	r0, 8008740 <_dtoa_r+0x190>
 800872c:	4658      	mov	r0, fp
 800872e:	f7f7 ff19 	bl	8000564 <__aeabi_i2d>
 8008732:	4632      	mov	r2, r6
 8008734:	463b      	mov	r3, r7
 8008736:	f7f8 f9e7 	bl	8000b08 <__aeabi_dcmpeq>
 800873a:	b908      	cbnz	r0, 8008740 <_dtoa_r+0x190>
 800873c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008740:	f1bb 0f16 	cmp.w	fp, #22
 8008744:	d857      	bhi.n	80087f6 <_dtoa_r+0x246>
 8008746:	4b5b      	ldr	r3, [pc, #364]	; (80088b4 <_dtoa_r+0x304>)
 8008748:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800874c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008750:	ec51 0b18 	vmov	r0, r1, d8
 8008754:	f7f8 f9e2 	bl	8000b1c <__aeabi_dcmplt>
 8008758:	2800      	cmp	r0, #0
 800875a:	d04e      	beq.n	80087fa <_dtoa_r+0x24a>
 800875c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008760:	2300      	movs	r3, #0
 8008762:	930c      	str	r3, [sp, #48]	; 0x30
 8008764:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008766:	1b5b      	subs	r3, r3, r5
 8008768:	1e5a      	subs	r2, r3, #1
 800876a:	bf45      	ittet	mi
 800876c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008770:	9305      	strmi	r3, [sp, #20]
 8008772:	2300      	movpl	r3, #0
 8008774:	2300      	movmi	r3, #0
 8008776:	9206      	str	r2, [sp, #24]
 8008778:	bf54      	ite	pl
 800877a:	9305      	strpl	r3, [sp, #20]
 800877c:	9306      	strmi	r3, [sp, #24]
 800877e:	f1bb 0f00 	cmp.w	fp, #0
 8008782:	db3c      	blt.n	80087fe <_dtoa_r+0x24e>
 8008784:	9b06      	ldr	r3, [sp, #24]
 8008786:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800878a:	445b      	add	r3, fp
 800878c:	9306      	str	r3, [sp, #24]
 800878e:	2300      	movs	r3, #0
 8008790:	9308      	str	r3, [sp, #32]
 8008792:	9b07      	ldr	r3, [sp, #28]
 8008794:	2b09      	cmp	r3, #9
 8008796:	d868      	bhi.n	800886a <_dtoa_r+0x2ba>
 8008798:	2b05      	cmp	r3, #5
 800879a:	bfc4      	itt	gt
 800879c:	3b04      	subgt	r3, #4
 800879e:	9307      	strgt	r3, [sp, #28]
 80087a0:	9b07      	ldr	r3, [sp, #28]
 80087a2:	f1a3 0302 	sub.w	r3, r3, #2
 80087a6:	bfcc      	ite	gt
 80087a8:	2500      	movgt	r5, #0
 80087aa:	2501      	movle	r5, #1
 80087ac:	2b03      	cmp	r3, #3
 80087ae:	f200 8085 	bhi.w	80088bc <_dtoa_r+0x30c>
 80087b2:	e8df f003 	tbb	[pc, r3]
 80087b6:	3b2e      	.short	0x3b2e
 80087b8:	5839      	.short	0x5839
 80087ba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80087be:	441d      	add	r5, r3
 80087c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80087c4:	2b20      	cmp	r3, #32
 80087c6:	bfc1      	itttt	gt
 80087c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80087cc:	fa08 f803 	lslgt.w	r8, r8, r3
 80087d0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80087d4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80087d8:	bfd6      	itet	le
 80087da:	f1c3 0320 	rsble	r3, r3, #32
 80087de:	ea48 0003 	orrgt.w	r0, r8, r3
 80087e2:	fa06 f003 	lslle.w	r0, r6, r3
 80087e6:	f7f7 fead 	bl	8000544 <__aeabi_ui2d>
 80087ea:	2201      	movs	r2, #1
 80087ec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80087f0:	3d01      	subs	r5, #1
 80087f2:	920e      	str	r2, [sp, #56]	; 0x38
 80087f4:	e76f      	b.n	80086d6 <_dtoa_r+0x126>
 80087f6:	2301      	movs	r3, #1
 80087f8:	e7b3      	b.n	8008762 <_dtoa_r+0x1b2>
 80087fa:	900c      	str	r0, [sp, #48]	; 0x30
 80087fc:	e7b2      	b.n	8008764 <_dtoa_r+0x1b4>
 80087fe:	9b05      	ldr	r3, [sp, #20]
 8008800:	eba3 030b 	sub.w	r3, r3, fp
 8008804:	9305      	str	r3, [sp, #20]
 8008806:	f1cb 0300 	rsb	r3, fp, #0
 800880a:	9308      	str	r3, [sp, #32]
 800880c:	2300      	movs	r3, #0
 800880e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008810:	e7bf      	b.n	8008792 <_dtoa_r+0x1e2>
 8008812:	2300      	movs	r3, #0
 8008814:	9309      	str	r3, [sp, #36]	; 0x24
 8008816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008818:	2b00      	cmp	r3, #0
 800881a:	dc52      	bgt.n	80088c2 <_dtoa_r+0x312>
 800881c:	2301      	movs	r3, #1
 800881e:	9301      	str	r3, [sp, #4]
 8008820:	9304      	str	r3, [sp, #16]
 8008822:	461a      	mov	r2, r3
 8008824:	920a      	str	r2, [sp, #40]	; 0x28
 8008826:	e00b      	b.n	8008840 <_dtoa_r+0x290>
 8008828:	2301      	movs	r3, #1
 800882a:	e7f3      	b.n	8008814 <_dtoa_r+0x264>
 800882c:	2300      	movs	r3, #0
 800882e:	9309      	str	r3, [sp, #36]	; 0x24
 8008830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008832:	445b      	add	r3, fp
 8008834:	9301      	str	r3, [sp, #4]
 8008836:	3301      	adds	r3, #1
 8008838:	2b01      	cmp	r3, #1
 800883a:	9304      	str	r3, [sp, #16]
 800883c:	bfb8      	it	lt
 800883e:	2301      	movlt	r3, #1
 8008840:	69e0      	ldr	r0, [r4, #28]
 8008842:	2100      	movs	r1, #0
 8008844:	2204      	movs	r2, #4
 8008846:	f102 0614 	add.w	r6, r2, #20
 800884a:	429e      	cmp	r6, r3
 800884c:	d93d      	bls.n	80088ca <_dtoa_r+0x31a>
 800884e:	6041      	str	r1, [r0, #4]
 8008850:	4620      	mov	r0, r4
 8008852:	f000 ff45 	bl	80096e0 <_Balloc>
 8008856:	9000      	str	r0, [sp, #0]
 8008858:	2800      	cmp	r0, #0
 800885a:	d139      	bne.n	80088d0 <_dtoa_r+0x320>
 800885c:	4b16      	ldr	r3, [pc, #88]	; (80088b8 <_dtoa_r+0x308>)
 800885e:	4602      	mov	r2, r0
 8008860:	f240 11af 	movw	r1, #431	; 0x1af
 8008864:	e6bd      	b.n	80085e2 <_dtoa_r+0x32>
 8008866:	2301      	movs	r3, #1
 8008868:	e7e1      	b.n	800882e <_dtoa_r+0x27e>
 800886a:	2501      	movs	r5, #1
 800886c:	2300      	movs	r3, #0
 800886e:	9307      	str	r3, [sp, #28]
 8008870:	9509      	str	r5, [sp, #36]	; 0x24
 8008872:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008876:	9301      	str	r3, [sp, #4]
 8008878:	9304      	str	r3, [sp, #16]
 800887a:	2200      	movs	r2, #0
 800887c:	2312      	movs	r3, #18
 800887e:	e7d1      	b.n	8008824 <_dtoa_r+0x274>
 8008880:	636f4361 	.word	0x636f4361
 8008884:	3fd287a7 	.word	0x3fd287a7
 8008888:	8b60c8b3 	.word	0x8b60c8b3
 800888c:	3fc68a28 	.word	0x3fc68a28
 8008890:	509f79fb 	.word	0x509f79fb
 8008894:	3fd34413 	.word	0x3fd34413
 8008898:	0800a3c5 	.word	0x0800a3c5
 800889c:	0800a3dc 	.word	0x0800a3dc
 80088a0:	7ff00000 	.word	0x7ff00000
 80088a4:	0800a3c1 	.word	0x0800a3c1
 80088a8:	0800a3b8 	.word	0x0800a3b8
 80088ac:	0800a395 	.word	0x0800a395
 80088b0:	3ff80000 	.word	0x3ff80000
 80088b4:	0800a4d8 	.word	0x0800a4d8
 80088b8:	0800a434 	.word	0x0800a434
 80088bc:	2301      	movs	r3, #1
 80088be:	9309      	str	r3, [sp, #36]	; 0x24
 80088c0:	e7d7      	b.n	8008872 <_dtoa_r+0x2c2>
 80088c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088c4:	9301      	str	r3, [sp, #4]
 80088c6:	9304      	str	r3, [sp, #16]
 80088c8:	e7ba      	b.n	8008840 <_dtoa_r+0x290>
 80088ca:	3101      	adds	r1, #1
 80088cc:	0052      	lsls	r2, r2, #1
 80088ce:	e7ba      	b.n	8008846 <_dtoa_r+0x296>
 80088d0:	69e3      	ldr	r3, [r4, #28]
 80088d2:	9a00      	ldr	r2, [sp, #0]
 80088d4:	601a      	str	r2, [r3, #0]
 80088d6:	9b04      	ldr	r3, [sp, #16]
 80088d8:	2b0e      	cmp	r3, #14
 80088da:	f200 80a8 	bhi.w	8008a2e <_dtoa_r+0x47e>
 80088de:	2d00      	cmp	r5, #0
 80088e0:	f000 80a5 	beq.w	8008a2e <_dtoa_r+0x47e>
 80088e4:	f1bb 0f00 	cmp.w	fp, #0
 80088e8:	dd38      	ble.n	800895c <_dtoa_r+0x3ac>
 80088ea:	4bc0      	ldr	r3, [pc, #768]	; (8008bec <_dtoa_r+0x63c>)
 80088ec:	f00b 020f 	and.w	r2, fp, #15
 80088f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80088f8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80088fc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008900:	d019      	beq.n	8008936 <_dtoa_r+0x386>
 8008902:	4bbb      	ldr	r3, [pc, #748]	; (8008bf0 <_dtoa_r+0x640>)
 8008904:	ec51 0b18 	vmov	r0, r1, d8
 8008908:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800890c:	f7f7 ffbe 	bl	800088c <__aeabi_ddiv>
 8008910:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008914:	f008 080f 	and.w	r8, r8, #15
 8008918:	2503      	movs	r5, #3
 800891a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008bf0 <_dtoa_r+0x640>
 800891e:	f1b8 0f00 	cmp.w	r8, #0
 8008922:	d10a      	bne.n	800893a <_dtoa_r+0x38a>
 8008924:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008928:	4632      	mov	r2, r6
 800892a:	463b      	mov	r3, r7
 800892c:	f7f7 ffae 	bl	800088c <__aeabi_ddiv>
 8008930:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008934:	e02b      	b.n	800898e <_dtoa_r+0x3de>
 8008936:	2502      	movs	r5, #2
 8008938:	e7ef      	b.n	800891a <_dtoa_r+0x36a>
 800893a:	f018 0f01 	tst.w	r8, #1
 800893e:	d008      	beq.n	8008952 <_dtoa_r+0x3a2>
 8008940:	4630      	mov	r0, r6
 8008942:	4639      	mov	r1, r7
 8008944:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008948:	f7f7 fe76 	bl	8000638 <__aeabi_dmul>
 800894c:	3501      	adds	r5, #1
 800894e:	4606      	mov	r6, r0
 8008950:	460f      	mov	r7, r1
 8008952:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008956:	f109 0908 	add.w	r9, r9, #8
 800895a:	e7e0      	b.n	800891e <_dtoa_r+0x36e>
 800895c:	f000 809f 	beq.w	8008a9e <_dtoa_r+0x4ee>
 8008960:	f1cb 0600 	rsb	r6, fp, #0
 8008964:	4ba1      	ldr	r3, [pc, #644]	; (8008bec <_dtoa_r+0x63c>)
 8008966:	4fa2      	ldr	r7, [pc, #648]	; (8008bf0 <_dtoa_r+0x640>)
 8008968:	f006 020f 	and.w	r2, r6, #15
 800896c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008974:	ec51 0b18 	vmov	r0, r1, d8
 8008978:	f7f7 fe5e 	bl	8000638 <__aeabi_dmul>
 800897c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008980:	1136      	asrs	r6, r6, #4
 8008982:	2300      	movs	r3, #0
 8008984:	2502      	movs	r5, #2
 8008986:	2e00      	cmp	r6, #0
 8008988:	d17e      	bne.n	8008a88 <_dtoa_r+0x4d8>
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1d0      	bne.n	8008930 <_dtoa_r+0x380>
 800898e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008990:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008994:	2b00      	cmp	r3, #0
 8008996:	f000 8084 	beq.w	8008aa2 <_dtoa_r+0x4f2>
 800899a:	4b96      	ldr	r3, [pc, #600]	; (8008bf4 <_dtoa_r+0x644>)
 800899c:	2200      	movs	r2, #0
 800899e:	4640      	mov	r0, r8
 80089a0:	4649      	mov	r1, r9
 80089a2:	f7f8 f8bb 	bl	8000b1c <__aeabi_dcmplt>
 80089a6:	2800      	cmp	r0, #0
 80089a8:	d07b      	beq.n	8008aa2 <_dtoa_r+0x4f2>
 80089aa:	9b04      	ldr	r3, [sp, #16]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d078      	beq.n	8008aa2 <_dtoa_r+0x4f2>
 80089b0:	9b01      	ldr	r3, [sp, #4]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	dd39      	ble.n	8008a2a <_dtoa_r+0x47a>
 80089b6:	4b90      	ldr	r3, [pc, #576]	; (8008bf8 <_dtoa_r+0x648>)
 80089b8:	2200      	movs	r2, #0
 80089ba:	4640      	mov	r0, r8
 80089bc:	4649      	mov	r1, r9
 80089be:	f7f7 fe3b 	bl	8000638 <__aeabi_dmul>
 80089c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089c6:	9e01      	ldr	r6, [sp, #4]
 80089c8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80089cc:	3501      	adds	r5, #1
 80089ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80089d2:	4628      	mov	r0, r5
 80089d4:	f7f7 fdc6 	bl	8000564 <__aeabi_i2d>
 80089d8:	4642      	mov	r2, r8
 80089da:	464b      	mov	r3, r9
 80089dc:	f7f7 fe2c 	bl	8000638 <__aeabi_dmul>
 80089e0:	4b86      	ldr	r3, [pc, #536]	; (8008bfc <_dtoa_r+0x64c>)
 80089e2:	2200      	movs	r2, #0
 80089e4:	f7f7 fc72 	bl	80002cc <__adddf3>
 80089e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80089ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089f0:	9303      	str	r3, [sp, #12]
 80089f2:	2e00      	cmp	r6, #0
 80089f4:	d158      	bne.n	8008aa8 <_dtoa_r+0x4f8>
 80089f6:	4b82      	ldr	r3, [pc, #520]	; (8008c00 <_dtoa_r+0x650>)
 80089f8:	2200      	movs	r2, #0
 80089fa:	4640      	mov	r0, r8
 80089fc:	4649      	mov	r1, r9
 80089fe:	f7f7 fc63 	bl	80002c8 <__aeabi_dsub>
 8008a02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a06:	4680      	mov	r8, r0
 8008a08:	4689      	mov	r9, r1
 8008a0a:	f7f8 f8a5 	bl	8000b58 <__aeabi_dcmpgt>
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	f040 8296 	bne.w	8008f40 <_dtoa_r+0x990>
 8008a14:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008a18:	4640      	mov	r0, r8
 8008a1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a1e:	4649      	mov	r1, r9
 8008a20:	f7f8 f87c 	bl	8000b1c <__aeabi_dcmplt>
 8008a24:	2800      	cmp	r0, #0
 8008a26:	f040 8289 	bne.w	8008f3c <_dtoa_r+0x98c>
 8008a2a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008a2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f2c0 814e 	blt.w	8008cd2 <_dtoa_r+0x722>
 8008a36:	f1bb 0f0e 	cmp.w	fp, #14
 8008a3a:	f300 814a 	bgt.w	8008cd2 <_dtoa_r+0x722>
 8008a3e:	4b6b      	ldr	r3, [pc, #428]	; (8008bec <_dtoa_r+0x63c>)
 8008a40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008a44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	f280 80dc 	bge.w	8008c08 <_dtoa_r+0x658>
 8008a50:	9b04      	ldr	r3, [sp, #16]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	f300 80d8 	bgt.w	8008c08 <_dtoa_r+0x658>
 8008a58:	f040 826f 	bne.w	8008f3a <_dtoa_r+0x98a>
 8008a5c:	4b68      	ldr	r3, [pc, #416]	; (8008c00 <_dtoa_r+0x650>)
 8008a5e:	2200      	movs	r2, #0
 8008a60:	4640      	mov	r0, r8
 8008a62:	4649      	mov	r1, r9
 8008a64:	f7f7 fde8 	bl	8000638 <__aeabi_dmul>
 8008a68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a6c:	f7f8 f86a 	bl	8000b44 <__aeabi_dcmpge>
 8008a70:	9e04      	ldr	r6, [sp, #16]
 8008a72:	4637      	mov	r7, r6
 8008a74:	2800      	cmp	r0, #0
 8008a76:	f040 8245 	bne.w	8008f04 <_dtoa_r+0x954>
 8008a7a:	9d00      	ldr	r5, [sp, #0]
 8008a7c:	2331      	movs	r3, #49	; 0x31
 8008a7e:	f805 3b01 	strb.w	r3, [r5], #1
 8008a82:	f10b 0b01 	add.w	fp, fp, #1
 8008a86:	e241      	b.n	8008f0c <_dtoa_r+0x95c>
 8008a88:	07f2      	lsls	r2, r6, #31
 8008a8a:	d505      	bpl.n	8008a98 <_dtoa_r+0x4e8>
 8008a8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a90:	f7f7 fdd2 	bl	8000638 <__aeabi_dmul>
 8008a94:	3501      	adds	r5, #1
 8008a96:	2301      	movs	r3, #1
 8008a98:	1076      	asrs	r6, r6, #1
 8008a9a:	3708      	adds	r7, #8
 8008a9c:	e773      	b.n	8008986 <_dtoa_r+0x3d6>
 8008a9e:	2502      	movs	r5, #2
 8008aa0:	e775      	b.n	800898e <_dtoa_r+0x3de>
 8008aa2:	9e04      	ldr	r6, [sp, #16]
 8008aa4:	465f      	mov	r7, fp
 8008aa6:	e792      	b.n	80089ce <_dtoa_r+0x41e>
 8008aa8:	9900      	ldr	r1, [sp, #0]
 8008aaa:	4b50      	ldr	r3, [pc, #320]	; (8008bec <_dtoa_r+0x63c>)
 8008aac:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ab0:	4431      	add	r1, r6
 8008ab2:	9102      	str	r1, [sp, #8]
 8008ab4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ab6:	eeb0 9a47 	vmov.f32	s18, s14
 8008aba:	eef0 9a67 	vmov.f32	s19, s15
 8008abe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008ac2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ac6:	2900      	cmp	r1, #0
 8008ac8:	d044      	beq.n	8008b54 <_dtoa_r+0x5a4>
 8008aca:	494e      	ldr	r1, [pc, #312]	; (8008c04 <_dtoa_r+0x654>)
 8008acc:	2000      	movs	r0, #0
 8008ace:	f7f7 fedd 	bl	800088c <__aeabi_ddiv>
 8008ad2:	ec53 2b19 	vmov	r2, r3, d9
 8008ad6:	f7f7 fbf7 	bl	80002c8 <__aeabi_dsub>
 8008ada:	9d00      	ldr	r5, [sp, #0]
 8008adc:	ec41 0b19 	vmov	d9, r0, r1
 8008ae0:	4649      	mov	r1, r9
 8008ae2:	4640      	mov	r0, r8
 8008ae4:	f7f8 f858 	bl	8000b98 <__aeabi_d2iz>
 8008ae8:	4606      	mov	r6, r0
 8008aea:	f7f7 fd3b 	bl	8000564 <__aeabi_i2d>
 8008aee:	4602      	mov	r2, r0
 8008af0:	460b      	mov	r3, r1
 8008af2:	4640      	mov	r0, r8
 8008af4:	4649      	mov	r1, r9
 8008af6:	f7f7 fbe7 	bl	80002c8 <__aeabi_dsub>
 8008afa:	3630      	adds	r6, #48	; 0x30
 8008afc:	f805 6b01 	strb.w	r6, [r5], #1
 8008b00:	ec53 2b19 	vmov	r2, r3, d9
 8008b04:	4680      	mov	r8, r0
 8008b06:	4689      	mov	r9, r1
 8008b08:	f7f8 f808 	bl	8000b1c <__aeabi_dcmplt>
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	d164      	bne.n	8008bda <_dtoa_r+0x62a>
 8008b10:	4642      	mov	r2, r8
 8008b12:	464b      	mov	r3, r9
 8008b14:	4937      	ldr	r1, [pc, #220]	; (8008bf4 <_dtoa_r+0x644>)
 8008b16:	2000      	movs	r0, #0
 8008b18:	f7f7 fbd6 	bl	80002c8 <__aeabi_dsub>
 8008b1c:	ec53 2b19 	vmov	r2, r3, d9
 8008b20:	f7f7 fffc 	bl	8000b1c <__aeabi_dcmplt>
 8008b24:	2800      	cmp	r0, #0
 8008b26:	f040 80b6 	bne.w	8008c96 <_dtoa_r+0x6e6>
 8008b2a:	9b02      	ldr	r3, [sp, #8]
 8008b2c:	429d      	cmp	r5, r3
 8008b2e:	f43f af7c 	beq.w	8008a2a <_dtoa_r+0x47a>
 8008b32:	4b31      	ldr	r3, [pc, #196]	; (8008bf8 <_dtoa_r+0x648>)
 8008b34:	ec51 0b19 	vmov	r0, r1, d9
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f7f7 fd7d 	bl	8000638 <__aeabi_dmul>
 8008b3e:	4b2e      	ldr	r3, [pc, #184]	; (8008bf8 <_dtoa_r+0x648>)
 8008b40:	ec41 0b19 	vmov	d9, r0, r1
 8008b44:	2200      	movs	r2, #0
 8008b46:	4640      	mov	r0, r8
 8008b48:	4649      	mov	r1, r9
 8008b4a:	f7f7 fd75 	bl	8000638 <__aeabi_dmul>
 8008b4e:	4680      	mov	r8, r0
 8008b50:	4689      	mov	r9, r1
 8008b52:	e7c5      	b.n	8008ae0 <_dtoa_r+0x530>
 8008b54:	ec51 0b17 	vmov	r0, r1, d7
 8008b58:	f7f7 fd6e 	bl	8000638 <__aeabi_dmul>
 8008b5c:	9b02      	ldr	r3, [sp, #8]
 8008b5e:	9d00      	ldr	r5, [sp, #0]
 8008b60:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b62:	ec41 0b19 	vmov	d9, r0, r1
 8008b66:	4649      	mov	r1, r9
 8008b68:	4640      	mov	r0, r8
 8008b6a:	f7f8 f815 	bl	8000b98 <__aeabi_d2iz>
 8008b6e:	4606      	mov	r6, r0
 8008b70:	f7f7 fcf8 	bl	8000564 <__aeabi_i2d>
 8008b74:	3630      	adds	r6, #48	; 0x30
 8008b76:	4602      	mov	r2, r0
 8008b78:	460b      	mov	r3, r1
 8008b7a:	4640      	mov	r0, r8
 8008b7c:	4649      	mov	r1, r9
 8008b7e:	f7f7 fba3 	bl	80002c8 <__aeabi_dsub>
 8008b82:	f805 6b01 	strb.w	r6, [r5], #1
 8008b86:	9b02      	ldr	r3, [sp, #8]
 8008b88:	429d      	cmp	r5, r3
 8008b8a:	4680      	mov	r8, r0
 8008b8c:	4689      	mov	r9, r1
 8008b8e:	f04f 0200 	mov.w	r2, #0
 8008b92:	d124      	bne.n	8008bde <_dtoa_r+0x62e>
 8008b94:	4b1b      	ldr	r3, [pc, #108]	; (8008c04 <_dtoa_r+0x654>)
 8008b96:	ec51 0b19 	vmov	r0, r1, d9
 8008b9a:	f7f7 fb97 	bl	80002cc <__adddf3>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	4640      	mov	r0, r8
 8008ba4:	4649      	mov	r1, r9
 8008ba6:	f7f7 ffd7 	bl	8000b58 <__aeabi_dcmpgt>
 8008baa:	2800      	cmp	r0, #0
 8008bac:	d173      	bne.n	8008c96 <_dtoa_r+0x6e6>
 8008bae:	ec53 2b19 	vmov	r2, r3, d9
 8008bb2:	4914      	ldr	r1, [pc, #80]	; (8008c04 <_dtoa_r+0x654>)
 8008bb4:	2000      	movs	r0, #0
 8008bb6:	f7f7 fb87 	bl	80002c8 <__aeabi_dsub>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	4640      	mov	r0, r8
 8008bc0:	4649      	mov	r1, r9
 8008bc2:	f7f7 ffab 	bl	8000b1c <__aeabi_dcmplt>
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	f43f af2f 	beq.w	8008a2a <_dtoa_r+0x47a>
 8008bcc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008bce:	1e6b      	subs	r3, r5, #1
 8008bd0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bd2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008bd6:	2b30      	cmp	r3, #48	; 0x30
 8008bd8:	d0f8      	beq.n	8008bcc <_dtoa_r+0x61c>
 8008bda:	46bb      	mov	fp, r7
 8008bdc:	e04a      	b.n	8008c74 <_dtoa_r+0x6c4>
 8008bde:	4b06      	ldr	r3, [pc, #24]	; (8008bf8 <_dtoa_r+0x648>)
 8008be0:	f7f7 fd2a 	bl	8000638 <__aeabi_dmul>
 8008be4:	4680      	mov	r8, r0
 8008be6:	4689      	mov	r9, r1
 8008be8:	e7bd      	b.n	8008b66 <_dtoa_r+0x5b6>
 8008bea:	bf00      	nop
 8008bec:	0800a4d8 	.word	0x0800a4d8
 8008bf0:	0800a4b0 	.word	0x0800a4b0
 8008bf4:	3ff00000 	.word	0x3ff00000
 8008bf8:	40240000 	.word	0x40240000
 8008bfc:	401c0000 	.word	0x401c0000
 8008c00:	40140000 	.word	0x40140000
 8008c04:	3fe00000 	.word	0x3fe00000
 8008c08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008c0c:	9d00      	ldr	r5, [sp, #0]
 8008c0e:	4642      	mov	r2, r8
 8008c10:	464b      	mov	r3, r9
 8008c12:	4630      	mov	r0, r6
 8008c14:	4639      	mov	r1, r7
 8008c16:	f7f7 fe39 	bl	800088c <__aeabi_ddiv>
 8008c1a:	f7f7 ffbd 	bl	8000b98 <__aeabi_d2iz>
 8008c1e:	9001      	str	r0, [sp, #4]
 8008c20:	f7f7 fca0 	bl	8000564 <__aeabi_i2d>
 8008c24:	4642      	mov	r2, r8
 8008c26:	464b      	mov	r3, r9
 8008c28:	f7f7 fd06 	bl	8000638 <__aeabi_dmul>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	460b      	mov	r3, r1
 8008c30:	4630      	mov	r0, r6
 8008c32:	4639      	mov	r1, r7
 8008c34:	f7f7 fb48 	bl	80002c8 <__aeabi_dsub>
 8008c38:	9e01      	ldr	r6, [sp, #4]
 8008c3a:	9f04      	ldr	r7, [sp, #16]
 8008c3c:	3630      	adds	r6, #48	; 0x30
 8008c3e:	f805 6b01 	strb.w	r6, [r5], #1
 8008c42:	9e00      	ldr	r6, [sp, #0]
 8008c44:	1bae      	subs	r6, r5, r6
 8008c46:	42b7      	cmp	r7, r6
 8008c48:	4602      	mov	r2, r0
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	d134      	bne.n	8008cb8 <_dtoa_r+0x708>
 8008c4e:	f7f7 fb3d 	bl	80002cc <__adddf3>
 8008c52:	4642      	mov	r2, r8
 8008c54:	464b      	mov	r3, r9
 8008c56:	4606      	mov	r6, r0
 8008c58:	460f      	mov	r7, r1
 8008c5a:	f7f7 ff7d 	bl	8000b58 <__aeabi_dcmpgt>
 8008c5e:	b9c8      	cbnz	r0, 8008c94 <_dtoa_r+0x6e4>
 8008c60:	4642      	mov	r2, r8
 8008c62:	464b      	mov	r3, r9
 8008c64:	4630      	mov	r0, r6
 8008c66:	4639      	mov	r1, r7
 8008c68:	f7f7 ff4e 	bl	8000b08 <__aeabi_dcmpeq>
 8008c6c:	b110      	cbz	r0, 8008c74 <_dtoa_r+0x6c4>
 8008c6e:	9b01      	ldr	r3, [sp, #4]
 8008c70:	07db      	lsls	r3, r3, #31
 8008c72:	d40f      	bmi.n	8008c94 <_dtoa_r+0x6e4>
 8008c74:	4651      	mov	r1, sl
 8008c76:	4620      	mov	r0, r4
 8008c78:	f000 fd72 	bl	8009760 <_Bfree>
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c80:	702b      	strb	r3, [r5, #0]
 8008c82:	f10b 0301 	add.w	r3, fp, #1
 8008c86:	6013      	str	r3, [r2, #0]
 8008c88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f43f ace2 	beq.w	8008654 <_dtoa_r+0xa4>
 8008c90:	601d      	str	r5, [r3, #0]
 8008c92:	e4df      	b.n	8008654 <_dtoa_r+0xa4>
 8008c94:	465f      	mov	r7, fp
 8008c96:	462b      	mov	r3, r5
 8008c98:	461d      	mov	r5, r3
 8008c9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c9e:	2a39      	cmp	r2, #57	; 0x39
 8008ca0:	d106      	bne.n	8008cb0 <_dtoa_r+0x700>
 8008ca2:	9a00      	ldr	r2, [sp, #0]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d1f7      	bne.n	8008c98 <_dtoa_r+0x6e8>
 8008ca8:	9900      	ldr	r1, [sp, #0]
 8008caa:	2230      	movs	r2, #48	; 0x30
 8008cac:	3701      	adds	r7, #1
 8008cae:	700a      	strb	r2, [r1, #0]
 8008cb0:	781a      	ldrb	r2, [r3, #0]
 8008cb2:	3201      	adds	r2, #1
 8008cb4:	701a      	strb	r2, [r3, #0]
 8008cb6:	e790      	b.n	8008bda <_dtoa_r+0x62a>
 8008cb8:	4ba3      	ldr	r3, [pc, #652]	; (8008f48 <_dtoa_r+0x998>)
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f7f7 fcbc 	bl	8000638 <__aeabi_dmul>
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	4606      	mov	r6, r0
 8008cc6:	460f      	mov	r7, r1
 8008cc8:	f7f7 ff1e 	bl	8000b08 <__aeabi_dcmpeq>
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	d09e      	beq.n	8008c0e <_dtoa_r+0x65e>
 8008cd0:	e7d0      	b.n	8008c74 <_dtoa_r+0x6c4>
 8008cd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cd4:	2a00      	cmp	r2, #0
 8008cd6:	f000 80ca 	beq.w	8008e6e <_dtoa_r+0x8be>
 8008cda:	9a07      	ldr	r2, [sp, #28]
 8008cdc:	2a01      	cmp	r2, #1
 8008cde:	f300 80ad 	bgt.w	8008e3c <_dtoa_r+0x88c>
 8008ce2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ce4:	2a00      	cmp	r2, #0
 8008ce6:	f000 80a5 	beq.w	8008e34 <_dtoa_r+0x884>
 8008cea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008cee:	9e08      	ldr	r6, [sp, #32]
 8008cf0:	9d05      	ldr	r5, [sp, #20]
 8008cf2:	9a05      	ldr	r2, [sp, #20]
 8008cf4:	441a      	add	r2, r3
 8008cf6:	9205      	str	r2, [sp, #20]
 8008cf8:	9a06      	ldr	r2, [sp, #24]
 8008cfa:	2101      	movs	r1, #1
 8008cfc:	441a      	add	r2, r3
 8008cfe:	4620      	mov	r0, r4
 8008d00:	9206      	str	r2, [sp, #24]
 8008d02:	f000 fde3 	bl	80098cc <__i2b>
 8008d06:	4607      	mov	r7, r0
 8008d08:	b165      	cbz	r5, 8008d24 <_dtoa_r+0x774>
 8008d0a:	9b06      	ldr	r3, [sp, #24]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	dd09      	ble.n	8008d24 <_dtoa_r+0x774>
 8008d10:	42ab      	cmp	r3, r5
 8008d12:	9a05      	ldr	r2, [sp, #20]
 8008d14:	bfa8      	it	ge
 8008d16:	462b      	movge	r3, r5
 8008d18:	1ad2      	subs	r2, r2, r3
 8008d1a:	9205      	str	r2, [sp, #20]
 8008d1c:	9a06      	ldr	r2, [sp, #24]
 8008d1e:	1aed      	subs	r5, r5, r3
 8008d20:	1ad3      	subs	r3, r2, r3
 8008d22:	9306      	str	r3, [sp, #24]
 8008d24:	9b08      	ldr	r3, [sp, #32]
 8008d26:	b1f3      	cbz	r3, 8008d66 <_dtoa_r+0x7b6>
 8008d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	f000 80a3 	beq.w	8008e76 <_dtoa_r+0x8c6>
 8008d30:	2e00      	cmp	r6, #0
 8008d32:	dd10      	ble.n	8008d56 <_dtoa_r+0x7a6>
 8008d34:	4639      	mov	r1, r7
 8008d36:	4632      	mov	r2, r6
 8008d38:	4620      	mov	r0, r4
 8008d3a:	f000 fe87 	bl	8009a4c <__pow5mult>
 8008d3e:	4652      	mov	r2, sl
 8008d40:	4601      	mov	r1, r0
 8008d42:	4607      	mov	r7, r0
 8008d44:	4620      	mov	r0, r4
 8008d46:	f000 fdd7 	bl	80098f8 <__multiply>
 8008d4a:	4651      	mov	r1, sl
 8008d4c:	4680      	mov	r8, r0
 8008d4e:	4620      	mov	r0, r4
 8008d50:	f000 fd06 	bl	8009760 <_Bfree>
 8008d54:	46c2      	mov	sl, r8
 8008d56:	9b08      	ldr	r3, [sp, #32]
 8008d58:	1b9a      	subs	r2, r3, r6
 8008d5a:	d004      	beq.n	8008d66 <_dtoa_r+0x7b6>
 8008d5c:	4651      	mov	r1, sl
 8008d5e:	4620      	mov	r0, r4
 8008d60:	f000 fe74 	bl	8009a4c <__pow5mult>
 8008d64:	4682      	mov	sl, r0
 8008d66:	2101      	movs	r1, #1
 8008d68:	4620      	mov	r0, r4
 8008d6a:	f000 fdaf 	bl	80098cc <__i2b>
 8008d6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	4606      	mov	r6, r0
 8008d74:	f340 8081 	ble.w	8008e7a <_dtoa_r+0x8ca>
 8008d78:	461a      	mov	r2, r3
 8008d7a:	4601      	mov	r1, r0
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	f000 fe65 	bl	8009a4c <__pow5mult>
 8008d82:	9b07      	ldr	r3, [sp, #28]
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	4606      	mov	r6, r0
 8008d88:	dd7a      	ble.n	8008e80 <_dtoa_r+0x8d0>
 8008d8a:	f04f 0800 	mov.w	r8, #0
 8008d8e:	6933      	ldr	r3, [r6, #16]
 8008d90:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008d94:	6918      	ldr	r0, [r3, #16]
 8008d96:	f000 fd4b 	bl	8009830 <__hi0bits>
 8008d9a:	f1c0 0020 	rsb	r0, r0, #32
 8008d9e:	9b06      	ldr	r3, [sp, #24]
 8008da0:	4418      	add	r0, r3
 8008da2:	f010 001f 	ands.w	r0, r0, #31
 8008da6:	f000 8094 	beq.w	8008ed2 <_dtoa_r+0x922>
 8008daa:	f1c0 0320 	rsb	r3, r0, #32
 8008dae:	2b04      	cmp	r3, #4
 8008db0:	f340 8085 	ble.w	8008ebe <_dtoa_r+0x90e>
 8008db4:	9b05      	ldr	r3, [sp, #20]
 8008db6:	f1c0 001c 	rsb	r0, r0, #28
 8008dba:	4403      	add	r3, r0
 8008dbc:	9305      	str	r3, [sp, #20]
 8008dbe:	9b06      	ldr	r3, [sp, #24]
 8008dc0:	4403      	add	r3, r0
 8008dc2:	4405      	add	r5, r0
 8008dc4:	9306      	str	r3, [sp, #24]
 8008dc6:	9b05      	ldr	r3, [sp, #20]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	dd05      	ble.n	8008dd8 <_dtoa_r+0x828>
 8008dcc:	4651      	mov	r1, sl
 8008dce:	461a      	mov	r2, r3
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	f000 fe95 	bl	8009b00 <__lshift>
 8008dd6:	4682      	mov	sl, r0
 8008dd8:	9b06      	ldr	r3, [sp, #24]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	dd05      	ble.n	8008dea <_dtoa_r+0x83a>
 8008dde:	4631      	mov	r1, r6
 8008de0:	461a      	mov	r2, r3
 8008de2:	4620      	mov	r0, r4
 8008de4:	f000 fe8c 	bl	8009b00 <__lshift>
 8008de8:	4606      	mov	r6, r0
 8008dea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d072      	beq.n	8008ed6 <_dtoa_r+0x926>
 8008df0:	4631      	mov	r1, r6
 8008df2:	4650      	mov	r0, sl
 8008df4:	f000 fef0 	bl	8009bd8 <__mcmp>
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	da6c      	bge.n	8008ed6 <_dtoa_r+0x926>
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	4651      	mov	r1, sl
 8008e00:	220a      	movs	r2, #10
 8008e02:	4620      	mov	r0, r4
 8008e04:	f000 fcce 	bl	80097a4 <__multadd>
 8008e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e0a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008e0e:	4682      	mov	sl, r0
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f000 81b0 	beq.w	8009176 <_dtoa_r+0xbc6>
 8008e16:	2300      	movs	r3, #0
 8008e18:	4639      	mov	r1, r7
 8008e1a:	220a      	movs	r2, #10
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	f000 fcc1 	bl	80097a4 <__multadd>
 8008e22:	9b01      	ldr	r3, [sp, #4]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	4607      	mov	r7, r0
 8008e28:	f300 8096 	bgt.w	8008f58 <_dtoa_r+0x9a8>
 8008e2c:	9b07      	ldr	r3, [sp, #28]
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	dc59      	bgt.n	8008ee6 <_dtoa_r+0x936>
 8008e32:	e091      	b.n	8008f58 <_dtoa_r+0x9a8>
 8008e34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008e3a:	e758      	b.n	8008cee <_dtoa_r+0x73e>
 8008e3c:	9b04      	ldr	r3, [sp, #16]
 8008e3e:	1e5e      	subs	r6, r3, #1
 8008e40:	9b08      	ldr	r3, [sp, #32]
 8008e42:	42b3      	cmp	r3, r6
 8008e44:	bfbf      	itttt	lt
 8008e46:	9b08      	ldrlt	r3, [sp, #32]
 8008e48:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008e4a:	9608      	strlt	r6, [sp, #32]
 8008e4c:	1af3      	sublt	r3, r6, r3
 8008e4e:	bfb4      	ite	lt
 8008e50:	18d2      	addlt	r2, r2, r3
 8008e52:	1b9e      	subge	r6, r3, r6
 8008e54:	9b04      	ldr	r3, [sp, #16]
 8008e56:	bfbc      	itt	lt
 8008e58:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008e5a:	2600      	movlt	r6, #0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	bfb7      	itett	lt
 8008e60:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008e64:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008e68:	1a9d      	sublt	r5, r3, r2
 8008e6a:	2300      	movlt	r3, #0
 8008e6c:	e741      	b.n	8008cf2 <_dtoa_r+0x742>
 8008e6e:	9e08      	ldr	r6, [sp, #32]
 8008e70:	9d05      	ldr	r5, [sp, #20]
 8008e72:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008e74:	e748      	b.n	8008d08 <_dtoa_r+0x758>
 8008e76:	9a08      	ldr	r2, [sp, #32]
 8008e78:	e770      	b.n	8008d5c <_dtoa_r+0x7ac>
 8008e7a:	9b07      	ldr	r3, [sp, #28]
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	dc19      	bgt.n	8008eb4 <_dtoa_r+0x904>
 8008e80:	9b02      	ldr	r3, [sp, #8]
 8008e82:	b9bb      	cbnz	r3, 8008eb4 <_dtoa_r+0x904>
 8008e84:	9b03      	ldr	r3, [sp, #12]
 8008e86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e8a:	b99b      	cbnz	r3, 8008eb4 <_dtoa_r+0x904>
 8008e8c:	9b03      	ldr	r3, [sp, #12]
 8008e8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e92:	0d1b      	lsrs	r3, r3, #20
 8008e94:	051b      	lsls	r3, r3, #20
 8008e96:	b183      	cbz	r3, 8008eba <_dtoa_r+0x90a>
 8008e98:	9b05      	ldr	r3, [sp, #20]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	9305      	str	r3, [sp, #20]
 8008e9e:	9b06      	ldr	r3, [sp, #24]
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	9306      	str	r3, [sp, #24]
 8008ea4:	f04f 0801 	mov.w	r8, #1
 8008ea8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	f47f af6f 	bne.w	8008d8e <_dtoa_r+0x7de>
 8008eb0:	2001      	movs	r0, #1
 8008eb2:	e774      	b.n	8008d9e <_dtoa_r+0x7ee>
 8008eb4:	f04f 0800 	mov.w	r8, #0
 8008eb8:	e7f6      	b.n	8008ea8 <_dtoa_r+0x8f8>
 8008eba:	4698      	mov	r8, r3
 8008ebc:	e7f4      	b.n	8008ea8 <_dtoa_r+0x8f8>
 8008ebe:	d082      	beq.n	8008dc6 <_dtoa_r+0x816>
 8008ec0:	9a05      	ldr	r2, [sp, #20]
 8008ec2:	331c      	adds	r3, #28
 8008ec4:	441a      	add	r2, r3
 8008ec6:	9205      	str	r2, [sp, #20]
 8008ec8:	9a06      	ldr	r2, [sp, #24]
 8008eca:	441a      	add	r2, r3
 8008ecc:	441d      	add	r5, r3
 8008ece:	9206      	str	r2, [sp, #24]
 8008ed0:	e779      	b.n	8008dc6 <_dtoa_r+0x816>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	e7f4      	b.n	8008ec0 <_dtoa_r+0x910>
 8008ed6:	9b04      	ldr	r3, [sp, #16]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	dc37      	bgt.n	8008f4c <_dtoa_r+0x99c>
 8008edc:	9b07      	ldr	r3, [sp, #28]
 8008ede:	2b02      	cmp	r3, #2
 8008ee0:	dd34      	ble.n	8008f4c <_dtoa_r+0x99c>
 8008ee2:	9b04      	ldr	r3, [sp, #16]
 8008ee4:	9301      	str	r3, [sp, #4]
 8008ee6:	9b01      	ldr	r3, [sp, #4]
 8008ee8:	b963      	cbnz	r3, 8008f04 <_dtoa_r+0x954>
 8008eea:	4631      	mov	r1, r6
 8008eec:	2205      	movs	r2, #5
 8008eee:	4620      	mov	r0, r4
 8008ef0:	f000 fc58 	bl	80097a4 <__multadd>
 8008ef4:	4601      	mov	r1, r0
 8008ef6:	4606      	mov	r6, r0
 8008ef8:	4650      	mov	r0, sl
 8008efa:	f000 fe6d 	bl	8009bd8 <__mcmp>
 8008efe:	2800      	cmp	r0, #0
 8008f00:	f73f adbb 	bgt.w	8008a7a <_dtoa_r+0x4ca>
 8008f04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f06:	9d00      	ldr	r5, [sp, #0]
 8008f08:	ea6f 0b03 	mvn.w	fp, r3
 8008f0c:	f04f 0800 	mov.w	r8, #0
 8008f10:	4631      	mov	r1, r6
 8008f12:	4620      	mov	r0, r4
 8008f14:	f000 fc24 	bl	8009760 <_Bfree>
 8008f18:	2f00      	cmp	r7, #0
 8008f1a:	f43f aeab 	beq.w	8008c74 <_dtoa_r+0x6c4>
 8008f1e:	f1b8 0f00 	cmp.w	r8, #0
 8008f22:	d005      	beq.n	8008f30 <_dtoa_r+0x980>
 8008f24:	45b8      	cmp	r8, r7
 8008f26:	d003      	beq.n	8008f30 <_dtoa_r+0x980>
 8008f28:	4641      	mov	r1, r8
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	f000 fc18 	bl	8009760 <_Bfree>
 8008f30:	4639      	mov	r1, r7
 8008f32:	4620      	mov	r0, r4
 8008f34:	f000 fc14 	bl	8009760 <_Bfree>
 8008f38:	e69c      	b.n	8008c74 <_dtoa_r+0x6c4>
 8008f3a:	2600      	movs	r6, #0
 8008f3c:	4637      	mov	r7, r6
 8008f3e:	e7e1      	b.n	8008f04 <_dtoa_r+0x954>
 8008f40:	46bb      	mov	fp, r7
 8008f42:	4637      	mov	r7, r6
 8008f44:	e599      	b.n	8008a7a <_dtoa_r+0x4ca>
 8008f46:	bf00      	nop
 8008f48:	40240000 	.word	0x40240000
 8008f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	f000 80c8 	beq.w	80090e4 <_dtoa_r+0xb34>
 8008f54:	9b04      	ldr	r3, [sp, #16]
 8008f56:	9301      	str	r3, [sp, #4]
 8008f58:	2d00      	cmp	r5, #0
 8008f5a:	dd05      	ble.n	8008f68 <_dtoa_r+0x9b8>
 8008f5c:	4639      	mov	r1, r7
 8008f5e:	462a      	mov	r2, r5
 8008f60:	4620      	mov	r0, r4
 8008f62:	f000 fdcd 	bl	8009b00 <__lshift>
 8008f66:	4607      	mov	r7, r0
 8008f68:	f1b8 0f00 	cmp.w	r8, #0
 8008f6c:	d05b      	beq.n	8009026 <_dtoa_r+0xa76>
 8008f6e:	6879      	ldr	r1, [r7, #4]
 8008f70:	4620      	mov	r0, r4
 8008f72:	f000 fbb5 	bl	80096e0 <_Balloc>
 8008f76:	4605      	mov	r5, r0
 8008f78:	b928      	cbnz	r0, 8008f86 <_dtoa_r+0x9d6>
 8008f7a:	4b83      	ldr	r3, [pc, #524]	; (8009188 <_dtoa_r+0xbd8>)
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008f82:	f7ff bb2e 	b.w	80085e2 <_dtoa_r+0x32>
 8008f86:	693a      	ldr	r2, [r7, #16]
 8008f88:	3202      	adds	r2, #2
 8008f8a:	0092      	lsls	r2, r2, #2
 8008f8c:	f107 010c 	add.w	r1, r7, #12
 8008f90:	300c      	adds	r0, #12
 8008f92:	f001 f8d3 	bl	800a13c <memcpy>
 8008f96:	2201      	movs	r2, #1
 8008f98:	4629      	mov	r1, r5
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	f000 fdb0 	bl	8009b00 <__lshift>
 8008fa0:	9b00      	ldr	r3, [sp, #0]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	9304      	str	r3, [sp, #16]
 8008fa6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008faa:	4413      	add	r3, r2
 8008fac:	9308      	str	r3, [sp, #32]
 8008fae:	9b02      	ldr	r3, [sp, #8]
 8008fb0:	f003 0301 	and.w	r3, r3, #1
 8008fb4:	46b8      	mov	r8, r7
 8008fb6:	9306      	str	r3, [sp, #24]
 8008fb8:	4607      	mov	r7, r0
 8008fba:	9b04      	ldr	r3, [sp, #16]
 8008fbc:	4631      	mov	r1, r6
 8008fbe:	3b01      	subs	r3, #1
 8008fc0:	4650      	mov	r0, sl
 8008fc2:	9301      	str	r3, [sp, #4]
 8008fc4:	f7ff fa69 	bl	800849a <quorem>
 8008fc8:	4641      	mov	r1, r8
 8008fca:	9002      	str	r0, [sp, #8]
 8008fcc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008fd0:	4650      	mov	r0, sl
 8008fd2:	f000 fe01 	bl	8009bd8 <__mcmp>
 8008fd6:	463a      	mov	r2, r7
 8008fd8:	9005      	str	r0, [sp, #20]
 8008fda:	4631      	mov	r1, r6
 8008fdc:	4620      	mov	r0, r4
 8008fde:	f000 fe17 	bl	8009c10 <__mdiff>
 8008fe2:	68c2      	ldr	r2, [r0, #12]
 8008fe4:	4605      	mov	r5, r0
 8008fe6:	bb02      	cbnz	r2, 800902a <_dtoa_r+0xa7a>
 8008fe8:	4601      	mov	r1, r0
 8008fea:	4650      	mov	r0, sl
 8008fec:	f000 fdf4 	bl	8009bd8 <__mcmp>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	4629      	mov	r1, r5
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	9209      	str	r2, [sp, #36]	; 0x24
 8008ff8:	f000 fbb2 	bl	8009760 <_Bfree>
 8008ffc:	9b07      	ldr	r3, [sp, #28]
 8008ffe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009000:	9d04      	ldr	r5, [sp, #16]
 8009002:	ea43 0102 	orr.w	r1, r3, r2
 8009006:	9b06      	ldr	r3, [sp, #24]
 8009008:	4319      	orrs	r1, r3
 800900a:	d110      	bne.n	800902e <_dtoa_r+0xa7e>
 800900c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009010:	d029      	beq.n	8009066 <_dtoa_r+0xab6>
 8009012:	9b05      	ldr	r3, [sp, #20]
 8009014:	2b00      	cmp	r3, #0
 8009016:	dd02      	ble.n	800901e <_dtoa_r+0xa6e>
 8009018:	9b02      	ldr	r3, [sp, #8]
 800901a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800901e:	9b01      	ldr	r3, [sp, #4]
 8009020:	f883 9000 	strb.w	r9, [r3]
 8009024:	e774      	b.n	8008f10 <_dtoa_r+0x960>
 8009026:	4638      	mov	r0, r7
 8009028:	e7ba      	b.n	8008fa0 <_dtoa_r+0x9f0>
 800902a:	2201      	movs	r2, #1
 800902c:	e7e1      	b.n	8008ff2 <_dtoa_r+0xa42>
 800902e:	9b05      	ldr	r3, [sp, #20]
 8009030:	2b00      	cmp	r3, #0
 8009032:	db04      	blt.n	800903e <_dtoa_r+0xa8e>
 8009034:	9907      	ldr	r1, [sp, #28]
 8009036:	430b      	orrs	r3, r1
 8009038:	9906      	ldr	r1, [sp, #24]
 800903a:	430b      	orrs	r3, r1
 800903c:	d120      	bne.n	8009080 <_dtoa_r+0xad0>
 800903e:	2a00      	cmp	r2, #0
 8009040:	dded      	ble.n	800901e <_dtoa_r+0xa6e>
 8009042:	4651      	mov	r1, sl
 8009044:	2201      	movs	r2, #1
 8009046:	4620      	mov	r0, r4
 8009048:	f000 fd5a 	bl	8009b00 <__lshift>
 800904c:	4631      	mov	r1, r6
 800904e:	4682      	mov	sl, r0
 8009050:	f000 fdc2 	bl	8009bd8 <__mcmp>
 8009054:	2800      	cmp	r0, #0
 8009056:	dc03      	bgt.n	8009060 <_dtoa_r+0xab0>
 8009058:	d1e1      	bne.n	800901e <_dtoa_r+0xa6e>
 800905a:	f019 0f01 	tst.w	r9, #1
 800905e:	d0de      	beq.n	800901e <_dtoa_r+0xa6e>
 8009060:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009064:	d1d8      	bne.n	8009018 <_dtoa_r+0xa68>
 8009066:	9a01      	ldr	r2, [sp, #4]
 8009068:	2339      	movs	r3, #57	; 0x39
 800906a:	7013      	strb	r3, [r2, #0]
 800906c:	462b      	mov	r3, r5
 800906e:	461d      	mov	r5, r3
 8009070:	3b01      	subs	r3, #1
 8009072:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009076:	2a39      	cmp	r2, #57	; 0x39
 8009078:	d06c      	beq.n	8009154 <_dtoa_r+0xba4>
 800907a:	3201      	adds	r2, #1
 800907c:	701a      	strb	r2, [r3, #0]
 800907e:	e747      	b.n	8008f10 <_dtoa_r+0x960>
 8009080:	2a00      	cmp	r2, #0
 8009082:	dd07      	ble.n	8009094 <_dtoa_r+0xae4>
 8009084:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009088:	d0ed      	beq.n	8009066 <_dtoa_r+0xab6>
 800908a:	9a01      	ldr	r2, [sp, #4]
 800908c:	f109 0301 	add.w	r3, r9, #1
 8009090:	7013      	strb	r3, [r2, #0]
 8009092:	e73d      	b.n	8008f10 <_dtoa_r+0x960>
 8009094:	9b04      	ldr	r3, [sp, #16]
 8009096:	9a08      	ldr	r2, [sp, #32]
 8009098:	f803 9c01 	strb.w	r9, [r3, #-1]
 800909c:	4293      	cmp	r3, r2
 800909e:	d043      	beq.n	8009128 <_dtoa_r+0xb78>
 80090a0:	4651      	mov	r1, sl
 80090a2:	2300      	movs	r3, #0
 80090a4:	220a      	movs	r2, #10
 80090a6:	4620      	mov	r0, r4
 80090a8:	f000 fb7c 	bl	80097a4 <__multadd>
 80090ac:	45b8      	cmp	r8, r7
 80090ae:	4682      	mov	sl, r0
 80090b0:	f04f 0300 	mov.w	r3, #0
 80090b4:	f04f 020a 	mov.w	r2, #10
 80090b8:	4641      	mov	r1, r8
 80090ba:	4620      	mov	r0, r4
 80090bc:	d107      	bne.n	80090ce <_dtoa_r+0xb1e>
 80090be:	f000 fb71 	bl	80097a4 <__multadd>
 80090c2:	4680      	mov	r8, r0
 80090c4:	4607      	mov	r7, r0
 80090c6:	9b04      	ldr	r3, [sp, #16]
 80090c8:	3301      	adds	r3, #1
 80090ca:	9304      	str	r3, [sp, #16]
 80090cc:	e775      	b.n	8008fba <_dtoa_r+0xa0a>
 80090ce:	f000 fb69 	bl	80097a4 <__multadd>
 80090d2:	4639      	mov	r1, r7
 80090d4:	4680      	mov	r8, r0
 80090d6:	2300      	movs	r3, #0
 80090d8:	220a      	movs	r2, #10
 80090da:	4620      	mov	r0, r4
 80090dc:	f000 fb62 	bl	80097a4 <__multadd>
 80090e0:	4607      	mov	r7, r0
 80090e2:	e7f0      	b.n	80090c6 <_dtoa_r+0xb16>
 80090e4:	9b04      	ldr	r3, [sp, #16]
 80090e6:	9301      	str	r3, [sp, #4]
 80090e8:	9d00      	ldr	r5, [sp, #0]
 80090ea:	4631      	mov	r1, r6
 80090ec:	4650      	mov	r0, sl
 80090ee:	f7ff f9d4 	bl	800849a <quorem>
 80090f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80090f6:	9b00      	ldr	r3, [sp, #0]
 80090f8:	f805 9b01 	strb.w	r9, [r5], #1
 80090fc:	1aea      	subs	r2, r5, r3
 80090fe:	9b01      	ldr	r3, [sp, #4]
 8009100:	4293      	cmp	r3, r2
 8009102:	dd07      	ble.n	8009114 <_dtoa_r+0xb64>
 8009104:	4651      	mov	r1, sl
 8009106:	2300      	movs	r3, #0
 8009108:	220a      	movs	r2, #10
 800910a:	4620      	mov	r0, r4
 800910c:	f000 fb4a 	bl	80097a4 <__multadd>
 8009110:	4682      	mov	sl, r0
 8009112:	e7ea      	b.n	80090ea <_dtoa_r+0xb3a>
 8009114:	9b01      	ldr	r3, [sp, #4]
 8009116:	2b00      	cmp	r3, #0
 8009118:	bfc8      	it	gt
 800911a:	461d      	movgt	r5, r3
 800911c:	9b00      	ldr	r3, [sp, #0]
 800911e:	bfd8      	it	le
 8009120:	2501      	movle	r5, #1
 8009122:	441d      	add	r5, r3
 8009124:	f04f 0800 	mov.w	r8, #0
 8009128:	4651      	mov	r1, sl
 800912a:	2201      	movs	r2, #1
 800912c:	4620      	mov	r0, r4
 800912e:	f000 fce7 	bl	8009b00 <__lshift>
 8009132:	4631      	mov	r1, r6
 8009134:	4682      	mov	sl, r0
 8009136:	f000 fd4f 	bl	8009bd8 <__mcmp>
 800913a:	2800      	cmp	r0, #0
 800913c:	dc96      	bgt.n	800906c <_dtoa_r+0xabc>
 800913e:	d102      	bne.n	8009146 <_dtoa_r+0xb96>
 8009140:	f019 0f01 	tst.w	r9, #1
 8009144:	d192      	bne.n	800906c <_dtoa_r+0xabc>
 8009146:	462b      	mov	r3, r5
 8009148:	461d      	mov	r5, r3
 800914a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800914e:	2a30      	cmp	r2, #48	; 0x30
 8009150:	d0fa      	beq.n	8009148 <_dtoa_r+0xb98>
 8009152:	e6dd      	b.n	8008f10 <_dtoa_r+0x960>
 8009154:	9a00      	ldr	r2, [sp, #0]
 8009156:	429a      	cmp	r2, r3
 8009158:	d189      	bne.n	800906e <_dtoa_r+0xabe>
 800915a:	f10b 0b01 	add.w	fp, fp, #1
 800915e:	2331      	movs	r3, #49	; 0x31
 8009160:	e796      	b.n	8009090 <_dtoa_r+0xae0>
 8009162:	4b0a      	ldr	r3, [pc, #40]	; (800918c <_dtoa_r+0xbdc>)
 8009164:	f7ff ba99 	b.w	800869a <_dtoa_r+0xea>
 8009168:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800916a:	2b00      	cmp	r3, #0
 800916c:	f47f aa6d 	bne.w	800864a <_dtoa_r+0x9a>
 8009170:	4b07      	ldr	r3, [pc, #28]	; (8009190 <_dtoa_r+0xbe0>)
 8009172:	f7ff ba92 	b.w	800869a <_dtoa_r+0xea>
 8009176:	9b01      	ldr	r3, [sp, #4]
 8009178:	2b00      	cmp	r3, #0
 800917a:	dcb5      	bgt.n	80090e8 <_dtoa_r+0xb38>
 800917c:	9b07      	ldr	r3, [sp, #28]
 800917e:	2b02      	cmp	r3, #2
 8009180:	f73f aeb1 	bgt.w	8008ee6 <_dtoa_r+0x936>
 8009184:	e7b0      	b.n	80090e8 <_dtoa_r+0xb38>
 8009186:	bf00      	nop
 8009188:	0800a434 	.word	0x0800a434
 800918c:	0800a394 	.word	0x0800a394
 8009190:	0800a3b8 	.word	0x0800a3b8

08009194 <__sfputc_r>:
 8009194:	6893      	ldr	r3, [r2, #8]
 8009196:	3b01      	subs	r3, #1
 8009198:	2b00      	cmp	r3, #0
 800919a:	b410      	push	{r4}
 800919c:	6093      	str	r3, [r2, #8]
 800919e:	da08      	bge.n	80091b2 <__sfputc_r+0x1e>
 80091a0:	6994      	ldr	r4, [r2, #24]
 80091a2:	42a3      	cmp	r3, r4
 80091a4:	db01      	blt.n	80091aa <__sfputc_r+0x16>
 80091a6:	290a      	cmp	r1, #10
 80091a8:	d103      	bne.n	80091b2 <__sfputc_r+0x1e>
 80091aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091ae:	f000 be56 	b.w	8009e5e <__swbuf_r>
 80091b2:	6813      	ldr	r3, [r2, #0]
 80091b4:	1c58      	adds	r0, r3, #1
 80091b6:	6010      	str	r0, [r2, #0]
 80091b8:	7019      	strb	r1, [r3, #0]
 80091ba:	4608      	mov	r0, r1
 80091bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091c0:	4770      	bx	lr

080091c2 <__sfputs_r>:
 80091c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091c4:	4606      	mov	r6, r0
 80091c6:	460f      	mov	r7, r1
 80091c8:	4614      	mov	r4, r2
 80091ca:	18d5      	adds	r5, r2, r3
 80091cc:	42ac      	cmp	r4, r5
 80091ce:	d101      	bne.n	80091d4 <__sfputs_r+0x12>
 80091d0:	2000      	movs	r0, #0
 80091d2:	e007      	b.n	80091e4 <__sfputs_r+0x22>
 80091d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091d8:	463a      	mov	r2, r7
 80091da:	4630      	mov	r0, r6
 80091dc:	f7ff ffda 	bl	8009194 <__sfputc_r>
 80091e0:	1c43      	adds	r3, r0, #1
 80091e2:	d1f3      	bne.n	80091cc <__sfputs_r+0xa>
 80091e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080091e8 <_vfiprintf_r>:
 80091e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ec:	460d      	mov	r5, r1
 80091ee:	b09d      	sub	sp, #116	; 0x74
 80091f0:	4614      	mov	r4, r2
 80091f2:	4698      	mov	r8, r3
 80091f4:	4606      	mov	r6, r0
 80091f6:	b118      	cbz	r0, 8009200 <_vfiprintf_r+0x18>
 80091f8:	6a03      	ldr	r3, [r0, #32]
 80091fa:	b90b      	cbnz	r3, 8009200 <_vfiprintf_r+0x18>
 80091fc:	f7ff f8cc 	bl	8008398 <__sinit>
 8009200:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009202:	07d9      	lsls	r1, r3, #31
 8009204:	d405      	bmi.n	8009212 <_vfiprintf_r+0x2a>
 8009206:	89ab      	ldrh	r3, [r5, #12]
 8009208:	059a      	lsls	r2, r3, #22
 800920a:	d402      	bmi.n	8009212 <_vfiprintf_r+0x2a>
 800920c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800920e:	f7ff f942 	bl	8008496 <__retarget_lock_acquire_recursive>
 8009212:	89ab      	ldrh	r3, [r5, #12]
 8009214:	071b      	lsls	r3, r3, #28
 8009216:	d501      	bpl.n	800921c <_vfiprintf_r+0x34>
 8009218:	692b      	ldr	r3, [r5, #16]
 800921a:	b99b      	cbnz	r3, 8009244 <_vfiprintf_r+0x5c>
 800921c:	4629      	mov	r1, r5
 800921e:	4630      	mov	r0, r6
 8009220:	f000 fe5a 	bl	8009ed8 <__swsetup_r>
 8009224:	b170      	cbz	r0, 8009244 <_vfiprintf_r+0x5c>
 8009226:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009228:	07dc      	lsls	r4, r3, #31
 800922a:	d504      	bpl.n	8009236 <_vfiprintf_r+0x4e>
 800922c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009230:	b01d      	add	sp, #116	; 0x74
 8009232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009236:	89ab      	ldrh	r3, [r5, #12]
 8009238:	0598      	lsls	r0, r3, #22
 800923a:	d4f7      	bmi.n	800922c <_vfiprintf_r+0x44>
 800923c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800923e:	f7ff f92b 	bl	8008498 <__retarget_lock_release_recursive>
 8009242:	e7f3      	b.n	800922c <_vfiprintf_r+0x44>
 8009244:	2300      	movs	r3, #0
 8009246:	9309      	str	r3, [sp, #36]	; 0x24
 8009248:	2320      	movs	r3, #32
 800924a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800924e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009252:	2330      	movs	r3, #48	; 0x30
 8009254:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009408 <_vfiprintf_r+0x220>
 8009258:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800925c:	f04f 0901 	mov.w	r9, #1
 8009260:	4623      	mov	r3, r4
 8009262:	469a      	mov	sl, r3
 8009264:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009268:	b10a      	cbz	r2, 800926e <_vfiprintf_r+0x86>
 800926a:	2a25      	cmp	r2, #37	; 0x25
 800926c:	d1f9      	bne.n	8009262 <_vfiprintf_r+0x7a>
 800926e:	ebba 0b04 	subs.w	fp, sl, r4
 8009272:	d00b      	beq.n	800928c <_vfiprintf_r+0xa4>
 8009274:	465b      	mov	r3, fp
 8009276:	4622      	mov	r2, r4
 8009278:	4629      	mov	r1, r5
 800927a:	4630      	mov	r0, r6
 800927c:	f7ff ffa1 	bl	80091c2 <__sfputs_r>
 8009280:	3001      	adds	r0, #1
 8009282:	f000 80a9 	beq.w	80093d8 <_vfiprintf_r+0x1f0>
 8009286:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009288:	445a      	add	r2, fp
 800928a:	9209      	str	r2, [sp, #36]	; 0x24
 800928c:	f89a 3000 	ldrb.w	r3, [sl]
 8009290:	2b00      	cmp	r3, #0
 8009292:	f000 80a1 	beq.w	80093d8 <_vfiprintf_r+0x1f0>
 8009296:	2300      	movs	r3, #0
 8009298:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800929c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092a0:	f10a 0a01 	add.w	sl, sl, #1
 80092a4:	9304      	str	r3, [sp, #16]
 80092a6:	9307      	str	r3, [sp, #28]
 80092a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092ac:	931a      	str	r3, [sp, #104]	; 0x68
 80092ae:	4654      	mov	r4, sl
 80092b0:	2205      	movs	r2, #5
 80092b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092b6:	4854      	ldr	r0, [pc, #336]	; (8009408 <_vfiprintf_r+0x220>)
 80092b8:	f7f6 ffaa 	bl	8000210 <memchr>
 80092bc:	9a04      	ldr	r2, [sp, #16]
 80092be:	b9d8      	cbnz	r0, 80092f8 <_vfiprintf_r+0x110>
 80092c0:	06d1      	lsls	r1, r2, #27
 80092c2:	bf44      	itt	mi
 80092c4:	2320      	movmi	r3, #32
 80092c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092ca:	0713      	lsls	r3, r2, #28
 80092cc:	bf44      	itt	mi
 80092ce:	232b      	movmi	r3, #43	; 0x2b
 80092d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092d4:	f89a 3000 	ldrb.w	r3, [sl]
 80092d8:	2b2a      	cmp	r3, #42	; 0x2a
 80092da:	d015      	beq.n	8009308 <_vfiprintf_r+0x120>
 80092dc:	9a07      	ldr	r2, [sp, #28]
 80092de:	4654      	mov	r4, sl
 80092e0:	2000      	movs	r0, #0
 80092e2:	f04f 0c0a 	mov.w	ip, #10
 80092e6:	4621      	mov	r1, r4
 80092e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092ec:	3b30      	subs	r3, #48	; 0x30
 80092ee:	2b09      	cmp	r3, #9
 80092f0:	d94d      	bls.n	800938e <_vfiprintf_r+0x1a6>
 80092f2:	b1b0      	cbz	r0, 8009322 <_vfiprintf_r+0x13a>
 80092f4:	9207      	str	r2, [sp, #28]
 80092f6:	e014      	b.n	8009322 <_vfiprintf_r+0x13a>
 80092f8:	eba0 0308 	sub.w	r3, r0, r8
 80092fc:	fa09 f303 	lsl.w	r3, r9, r3
 8009300:	4313      	orrs	r3, r2
 8009302:	9304      	str	r3, [sp, #16]
 8009304:	46a2      	mov	sl, r4
 8009306:	e7d2      	b.n	80092ae <_vfiprintf_r+0xc6>
 8009308:	9b03      	ldr	r3, [sp, #12]
 800930a:	1d19      	adds	r1, r3, #4
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	9103      	str	r1, [sp, #12]
 8009310:	2b00      	cmp	r3, #0
 8009312:	bfbb      	ittet	lt
 8009314:	425b      	neglt	r3, r3
 8009316:	f042 0202 	orrlt.w	r2, r2, #2
 800931a:	9307      	strge	r3, [sp, #28]
 800931c:	9307      	strlt	r3, [sp, #28]
 800931e:	bfb8      	it	lt
 8009320:	9204      	strlt	r2, [sp, #16]
 8009322:	7823      	ldrb	r3, [r4, #0]
 8009324:	2b2e      	cmp	r3, #46	; 0x2e
 8009326:	d10c      	bne.n	8009342 <_vfiprintf_r+0x15a>
 8009328:	7863      	ldrb	r3, [r4, #1]
 800932a:	2b2a      	cmp	r3, #42	; 0x2a
 800932c:	d134      	bne.n	8009398 <_vfiprintf_r+0x1b0>
 800932e:	9b03      	ldr	r3, [sp, #12]
 8009330:	1d1a      	adds	r2, r3, #4
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	9203      	str	r2, [sp, #12]
 8009336:	2b00      	cmp	r3, #0
 8009338:	bfb8      	it	lt
 800933a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800933e:	3402      	adds	r4, #2
 8009340:	9305      	str	r3, [sp, #20]
 8009342:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009418 <_vfiprintf_r+0x230>
 8009346:	7821      	ldrb	r1, [r4, #0]
 8009348:	2203      	movs	r2, #3
 800934a:	4650      	mov	r0, sl
 800934c:	f7f6 ff60 	bl	8000210 <memchr>
 8009350:	b138      	cbz	r0, 8009362 <_vfiprintf_r+0x17a>
 8009352:	9b04      	ldr	r3, [sp, #16]
 8009354:	eba0 000a 	sub.w	r0, r0, sl
 8009358:	2240      	movs	r2, #64	; 0x40
 800935a:	4082      	lsls	r2, r0
 800935c:	4313      	orrs	r3, r2
 800935e:	3401      	adds	r4, #1
 8009360:	9304      	str	r3, [sp, #16]
 8009362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009366:	4829      	ldr	r0, [pc, #164]	; (800940c <_vfiprintf_r+0x224>)
 8009368:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800936c:	2206      	movs	r2, #6
 800936e:	f7f6 ff4f 	bl	8000210 <memchr>
 8009372:	2800      	cmp	r0, #0
 8009374:	d03f      	beq.n	80093f6 <_vfiprintf_r+0x20e>
 8009376:	4b26      	ldr	r3, [pc, #152]	; (8009410 <_vfiprintf_r+0x228>)
 8009378:	bb1b      	cbnz	r3, 80093c2 <_vfiprintf_r+0x1da>
 800937a:	9b03      	ldr	r3, [sp, #12]
 800937c:	3307      	adds	r3, #7
 800937e:	f023 0307 	bic.w	r3, r3, #7
 8009382:	3308      	adds	r3, #8
 8009384:	9303      	str	r3, [sp, #12]
 8009386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009388:	443b      	add	r3, r7
 800938a:	9309      	str	r3, [sp, #36]	; 0x24
 800938c:	e768      	b.n	8009260 <_vfiprintf_r+0x78>
 800938e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009392:	460c      	mov	r4, r1
 8009394:	2001      	movs	r0, #1
 8009396:	e7a6      	b.n	80092e6 <_vfiprintf_r+0xfe>
 8009398:	2300      	movs	r3, #0
 800939a:	3401      	adds	r4, #1
 800939c:	9305      	str	r3, [sp, #20]
 800939e:	4619      	mov	r1, r3
 80093a0:	f04f 0c0a 	mov.w	ip, #10
 80093a4:	4620      	mov	r0, r4
 80093a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093aa:	3a30      	subs	r2, #48	; 0x30
 80093ac:	2a09      	cmp	r2, #9
 80093ae:	d903      	bls.n	80093b8 <_vfiprintf_r+0x1d0>
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d0c6      	beq.n	8009342 <_vfiprintf_r+0x15a>
 80093b4:	9105      	str	r1, [sp, #20]
 80093b6:	e7c4      	b.n	8009342 <_vfiprintf_r+0x15a>
 80093b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80093bc:	4604      	mov	r4, r0
 80093be:	2301      	movs	r3, #1
 80093c0:	e7f0      	b.n	80093a4 <_vfiprintf_r+0x1bc>
 80093c2:	ab03      	add	r3, sp, #12
 80093c4:	9300      	str	r3, [sp, #0]
 80093c6:	462a      	mov	r2, r5
 80093c8:	4b12      	ldr	r3, [pc, #72]	; (8009414 <_vfiprintf_r+0x22c>)
 80093ca:	a904      	add	r1, sp, #16
 80093cc:	4630      	mov	r0, r6
 80093ce:	f7fe fb91 	bl	8007af4 <_printf_float>
 80093d2:	4607      	mov	r7, r0
 80093d4:	1c78      	adds	r0, r7, #1
 80093d6:	d1d6      	bne.n	8009386 <_vfiprintf_r+0x19e>
 80093d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093da:	07d9      	lsls	r1, r3, #31
 80093dc:	d405      	bmi.n	80093ea <_vfiprintf_r+0x202>
 80093de:	89ab      	ldrh	r3, [r5, #12]
 80093e0:	059a      	lsls	r2, r3, #22
 80093e2:	d402      	bmi.n	80093ea <_vfiprintf_r+0x202>
 80093e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093e6:	f7ff f857 	bl	8008498 <__retarget_lock_release_recursive>
 80093ea:	89ab      	ldrh	r3, [r5, #12]
 80093ec:	065b      	lsls	r3, r3, #25
 80093ee:	f53f af1d 	bmi.w	800922c <_vfiprintf_r+0x44>
 80093f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093f4:	e71c      	b.n	8009230 <_vfiprintf_r+0x48>
 80093f6:	ab03      	add	r3, sp, #12
 80093f8:	9300      	str	r3, [sp, #0]
 80093fa:	462a      	mov	r2, r5
 80093fc:	4b05      	ldr	r3, [pc, #20]	; (8009414 <_vfiprintf_r+0x22c>)
 80093fe:	a904      	add	r1, sp, #16
 8009400:	4630      	mov	r0, r6
 8009402:	f7fe fe1b 	bl	800803c <_printf_i>
 8009406:	e7e4      	b.n	80093d2 <_vfiprintf_r+0x1ea>
 8009408:	0800a445 	.word	0x0800a445
 800940c:	0800a44f 	.word	0x0800a44f
 8009410:	08007af5 	.word	0x08007af5
 8009414:	080091c3 	.word	0x080091c3
 8009418:	0800a44b 	.word	0x0800a44b

0800941c <malloc>:
 800941c:	4b02      	ldr	r3, [pc, #8]	; (8009428 <malloc+0xc>)
 800941e:	4601      	mov	r1, r0
 8009420:	6818      	ldr	r0, [r3, #0]
 8009422:	f000 b823 	b.w	800946c <_malloc_r>
 8009426:	bf00      	nop
 8009428:	20000090 	.word	0x20000090

0800942c <sbrk_aligned>:
 800942c:	b570      	push	{r4, r5, r6, lr}
 800942e:	4e0e      	ldr	r6, [pc, #56]	; (8009468 <sbrk_aligned+0x3c>)
 8009430:	460c      	mov	r4, r1
 8009432:	6831      	ldr	r1, [r6, #0]
 8009434:	4605      	mov	r5, r0
 8009436:	b911      	cbnz	r1, 800943e <sbrk_aligned+0x12>
 8009438:	f000 fe5e 	bl	800a0f8 <_sbrk_r>
 800943c:	6030      	str	r0, [r6, #0]
 800943e:	4621      	mov	r1, r4
 8009440:	4628      	mov	r0, r5
 8009442:	f000 fe59 	bl	800a0f8 <_sbrk_r>
 8009446:	1c43      	adds	r3, r0, #1
 8009448:	d00a      	beq.n	8009460 <sbrk_aligned+0x34>
 800944a:	1cc4      	adds	r4, r0, #3
 800944c:	f024 0403 	bic.w	r4, r4, #3
 8009450:	42a0      	cmp	r0, r4
 8009452:	d007      	beq.n	8009464 <sbrk_aligned+0x38>
 8009454:	1a21      	subs	r1, r4, r0
 8009456:	4628      	mov	r0, r5
 8009458:	f000 fe4e 	bl	800a0f8 <_sbrk_r>
 800945c:	3001      	adds	r0, #1
 800945e:	d101      	bne.n	8009464 <sbrk_aligned+0x38>
 8009460:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009464:	4620      	mov	r0, r4
 8009466:	bd70      	pop	{r4, r5, r6, pc}
 8009468:	20000738 	.word	0x20000738

0800946c <_malloc_r>:
 800946c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009470:	1ccd      	adds	r5, r1, #3
 8009472:	f025 0503 	bic.w	r5, r5, #3
 8009476:	3508      	adds	r5, #8
 8009478:	2d0c      	cmp	r5, #12
 800947a:	bf38      	it	cc
 800947c:	250c      	movcc	r5, #12
 800947e:	2d00      	cmp	r5, #0
 8009480:	4607      	mov	r7, r0
 8009482:	db01      	blt.n	8009488 <_malloc_r+0x1c>
 8009484:	42a9      	cmp	r1, r5
 8009486:	d905      	bls.n	8009494 <_malloc_r+0x28>
 8009488:	230c      	movs	r3, #12
 800948a:	603b      	str	r3, [r7, #0]
 800948c:	2600      	movs	r6, #0
 800948e:	4630      	mov	r0, r6
 8009490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009494:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009568 <_malloc_r+0xfc>
 8009498:	f000 f916 	bl	80096c8 <__malloc_lock>
 800949c:	f8d8 3000 	ldr.w	r3, [r8]
 80094a0:	461c      	mov	r4, r3
 80094a2:	bb5c      	cbnz	r4, 80094fc <_malloc_r+0x90>
 80094a4:	4629      	mov	r1, r5
 80094a6:	4638      	mov	r0, r7
 80094a8:	f7ff ffc0 	bl	800942c <sbrk_aligned>
 80094ac:	1c43      	adds	r3, r0, #1
 80094ae:	4604      	mov	r4, r0
 80094b0:	d155      	bne.n	800955e <_malloc_r+0xf2>
 80094b2:	f8d8 4000 	ldr.w	r4, [r8]
 80094b6:	4626      	mov	r6, r4
 80094b8:	2e00      	cmp	r6, #0
 80094ba:	d145      	bne.n	8009548 <_malloc_r+0xdc>
 80094bc:	2c00      	cmp	r4, #0
 80094be:	d048      	beq.n	8009552 <_malloc_r+0xe6>
 80094c0:	6823      	ldr	r3, [r4, #0]
 80094c2:	4631      	mov	r1, r6
 80094c4:	4638      	mov	r0, r7
 80094c6:	eb04 0903 	add.w	r9, r4, r3
 80094ca:	f000 fe15 	bl	800a0f8 <_sbrk_r>
 80094ce:	4581      	cmp	r9, r0
 80094d0:	d13f      	bne.n	8009552 <_malloc_r+0xe6>
 80094d2:	6821      	ldr	r1, [r4, #0]
 80094d4:	1a6d      	subs	r5, r5, r1
 80094d6:	4629      	mov	r1, r5
 80094d8:	4638      	mov	r0, r7
 80094da:	f7ff ffa7 	bl	800942c <sbrk_aligned>
 80094de:	3001      	adds	r0, #1
 80094e0:	d037      	beq.n	8009552 <_malloc_r+0xe6>
 80094e2:	6823      	ldr	r3, [r4, #0]
 80094e4:	442b      	add	r3, r5
 80094e6:	6023      	str	r3, [r4, #0]
 80094e8:	f8d8 3000 	ldr.w	r3, [r8]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d038      	beq.n	8009562 <_malloc_r+0xf6>
 80094f0:	685a      	ldr	r2, [r3, #4]
 80094f2:	42a2      	cmp	r2, r4
 80094f4:	d12b      	bne.n	800954e <_malloc_r+0xe2>
 80094f6:	2200      	movs	r2, #0
 80094f8:	605a      	str	r2, [r3, #4]
 80094fa:	e00f      	b.n	800951c <_malloc_r+0xb0>
 80094fc:	6822      	ldr	r2, [r4, #0]
 80094fe:	1b52      	subs	r2, r2, r5
 8009500:	d41f      	bmi.n	8009542 <_malloc_r+0xd6>
 8009502:	2a0b      	cmp	r2, #11
 8009504:	d917      	bls.n	8009536 <_malloc_r+0xca>
 8009506:	1961      	adds	r1, r4, r5
 8009508:	42a3      	cmp	r3, r4
 800950a:	6025      	str	r5, [r4, #0]
 800950c:	bf18      	it	ne
 800950e:	6059      	strne	r1, [r3, #4]
 8009510:	6863      	ldr	r3, [r4, #4]
 8009512:	bf08      	it	eq
 8009514:	f8c8 1000 	streq.w	r1, [r8]
 8009518:	5162      	str	r2, [r4, r5]
 800951a:	604b      	str	r3, [r1, #4]
 800951c:	4638      	mov	r0, r7
 800951e:	f104 060b 	add.w	r6, r4, #11
 8009522:	f000 f8d7 	bl	80096d4 <__malloc_unlock>
 8009526:	f026 0607 	bic.w	r6, r6, #7
 800952a:	1d23      	adds	r3, r4, #4
 800952c:	1af2      	subs	r2, r6, r3
 800952e:	d0ae      	beq.n	800948e <_malloc_r+0x22>
 8009530:	1b9b      	subs	r3, r3, r6
 8009532:	50a3      	str	r3, [r4, r2]
 8009534:	e7ab      	b.n	800948e <_malloc_r+0x22>
 8009536:	42a3      	cmp	r3, r4
 8009538:	6862      	ldr	r2, [r4, #4]
 800953a:	d1dd      	bne.n	80094f8 <_malloc_r+0x8c>
 800953c:	f8c8 2000 	str.w	r2, [r8]
 8009540:	e7ec      	b.n	800951c <_malloc_r+0xb0>
 8009542:	4623      	mov	r3, r4
 8009544:	6864      	ldr	r4, [r4, #4]
 8009546:	e7ac      	b.n	80094a2 <_malloc_r+0x36>
 8009548:	4634      	mov	r4, r6
 800954a:	6876      	ldr	r6, [r6, #4]
 800954c:	e7b4      	b.n	80094b8 <_malloc_r+0x4c>
 800954e:	4613      	mov	r3, r2
 8009550:	e7cc      	b.n	80094ec <_malloc_r+0x80>
 8009552:	230c      	movs	r3, #12
 8009554:	603b      	str	r3, [r7, #0]
 8009556:	4638      	mov	r0, r7
 8009558:	f000 f8bc 	bl	80096d4 <__malloc_unlock>
 800955c:	e797      	b.n	800948e <_malloc_r+0x22>
 800955e:	6025      	str	r5, [r4, #0]
 8009560:	e7dc      	b.n	800951c <_malloc_r+0xb0>
 8009562:	605b      	str	r3, [r3, #4]
 8009564:	deff      	udf	#255	; 0xff
 8009566:	bf00      	nop
 8009568:	20000734 	.word	0x20000734

0800956c <__sflush_r>:
 800956c:	898a      	ldrh	r2, [r1, #12]
 800956e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009572:	4605      	mov	r5, r0
 8009574:	0710      	lsls	r0, r2, #28
 8009576:	460c      	mov	r4, r1
 8009578:	d458      	bmi.n	800962c <__sflush_r+0xc0>
 800957a:	684b      	ldr	r3, [r1, #4]
 800957c:	2b00      	cmp	r3, #0
 800957e:	dc05      	bgt.n	800958c <__sflush_r+0x20>
 8009580:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009582:	2b00      	cmp	r3, #0
 8009584:	dc02      	bgt.n	800958c <__sflush_r+0x20>
 8009586:	2000      	movs	r0, #0
 8009588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800958c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800958e:	2e00      	cmp	r6, #0
 8009590:	d0f9      	beq.n	8009586 <__sflush_r+0x1a>
 8009592:	2300      	movs	r3, #0
 8009594:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009598:	682f      	ldr	r7, [r5, #0]
 800959a:	6a21      	ldr	r1, [r4, #32]
 800959c:	602b      	str	r3, [r5, #0]
 800959e:	d032      	beq.n	8009606 <__sflush_r+0x9a>
 80095a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80095a2:	89a3      	ldrh	r3, [r4, #12]
 80095a4:	075a      	lsls	r2, r3, #29
 80095a6:	d505      	bpl.n	80095b4 <__sflush_r+0x48>
 80095a8:	6863      	ldr	r3, [r4, #4]
 80095aa:	1ac0      	subs	r0, r0, r3
 80095ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80095ae:	b10b      	cbz	r3, 80095b4 <__sflush_r+0x48>
 80095b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80095b2:	1ac0      	subs	r0, r0, r3
 80095b4:	2300      	movs	r3, #0
 80095b6:	4602      	mov	r2, r0
 80095b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095ba:	6a21      	ldr	r1, [r4, #32]
 80095bc:	4628      	mov	r0, r5
 80095be:	47b0      	blx	r6
 80095c0:	1c43      	adds	r3, r0, #1
 80095c2:	89a3      	ldrh	r3, [r4, #12]
 80095c4:	d106      	bne.n	80095d4 <__sflush_r+0x68>
 80095c6:	6829      	ldr	r1, [r5, #0]
 80095c8:	291d      	cmp	r1, #29
 80095ca:	d82b      	bhi.n	8009624 <__sflush_r+0xb8>
 80095cc:	4a29      	ldr	r2, [pc, #164]	; (8009674 <__sflush_r+0x108>)
 80095ce:	410a      	asrs	r2, r1
 80095d0:	07d6      	lsls	r6, r2, #31
 80095d2:	d427      	bmi.n	8009624 <__sflush_r+0xb8>
 80095d4:	2200      	movs	r2, #0
 80095d6:	6062      	str	r2, [r4, #4]
 80095d8:	04d9      	lsls	r1, r3, #19
 80095da:	6922      	ldr	r2, [r4, #16]
 80095dc:	6022      	str	r2, [r4, #0]
 80095de:	d504      	bpl.n	80095ea <__sflush_r+0x7e>
 80095e0:	1c42      	adds	r2, r0, #1
 80095e2:	d101      	bne.n	80095e8 <__sflush_r+0x7c>
 80095e4:	682b      	ldr	r3, [r5, #0]
 80095e6:	b903      	cbnz	r3, 80095ea <__sflush_r+0x7e>
 80095e8:	6560      	str	r0, [r4, #84]	; 0x54
 80095ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095ec:	602f      	str	r7, [r5, #0]
 80095ee:	2900      	cmp	r1, #0
 80095f0:	d0c9      	beq.n	8009586 <__sflush_r+0x1a>
 80095f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095f6:	4299      	cmp	r1, r3
 80095f8:	d002      	beq.n	8009600 <__sflush_r+0x94>
 80095fa:	4628      	mov	r0, r5
 80095fc:	f000 fde0 	bl	800a1c0 <_free_r>
 8009600:	2000      	movs	r0, #0
 8009602:	6360      	str	r0, [r4, #52]	; 0x34
 8009604:	e7c0      	b.n	8009588 <__sflush_r+0x1c>
 8009606:	2301      	movs	r3, #1
 8009608:	4628      	mov	r0, r5
 800960a:	47b0      	blx	r6
 800960c:	1c41      	adds	r1, r0, #1
 800960e:	d1c8      	bne.n	80095a2 <__sflush_r+0x36>
 8009610:	682b      	ldr	r3, [r5, #0]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d0c5      	beq.n	80095a2 <__sflush_r+0x36>
 8009616:	2b1d      	cmp	r3, #29
 8009618:	d001      	beq.n	800961e <__sflush_r+0xb2>
 800961a:	2b16      	cmp	r3, #22
 800961c:	d101      	bne.n	8009622 <__sflush_r+0xb6>
 800961e:	602f      	str	r7, [r5, #0]
 8009620:	e7b1      	b.n	8009586 <__sflush_r+0x1a>
 8009622:	89a3      	ldrh	r3, [r4, #12]
 8009624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009628:	81a3      	strh	r3, [r4, #12]
 800962a:	e7ad      	b.n	8009588 <__sflush_r+0x1c>
 800962c:	690f      	ldr	r7, [r1, #16]
 800962e:	2f00      	cmp	r7, #0
 8009630:	d0a9      	beq.n	8009586 <__sflush_r+0x1a>
 8009632:	0793      	lsls	r3, r2, #30
 8009634:	680e      	ldr	r6, [r1, #0]
 8009636:	bf08      	it	eq
 8009638:	694b      	ldreq	r3, [r1, #20]
 800963a:	600f      	str	r7, [r1, #0]
 800963c:	bf18      	it	ne
 800963e:	2300      	movne	r3, #0
 8009640:	eba6 0807 	sub.w	r8, r6, r7
 8009644:	608b      	str	r3, [r1, #8]
 8009646:	f1b8 0f00 	cmp.w	r8, #0
 800964a:	dd9c      	ble.n	8009586 <__sflush_r+0x1a>
 800964c:	6a21      	ldr	r1, [r4, #32]
 800964e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009650:	4643      	mov	r3, r8
 8009652:	463a      	mov	r2, r7
 8009654:	4628      	mov	r0, r5
 8009656:	47b0      	blx	r6
 8009658:	2800      	cmp	r0, #0
 800965a:	dc06      	bgt.n	800966a <__sflush_r+0xfe>
 800965c:	89a3      	ldrh	r3, [r4, #12]
 800965e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009662:	81a3      	strh	r3, [r4, #12]
 8009664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009668:	e78e      	b.n	8009588 <__sflush_r+0x1c>
 800966a:	4407      	add	r7, r0
 800966c:	eba8 0800 	sub.w	r8, r8, r0
 8009670:	e7e9      	b.n	8009646 <__sflush_r+0xda>
 8009672:	bf00      	nop
 8009674:	dfbffffe 	.word	0xdfbffffe

08009678 <_fflush_r>:
 8009678:	b538      	push	{r3, r4, r5, lr}
 800967a:	690b      	ldr	r3, [r1, #16]
 800967c:	4605      	mov	r5, r0
 800967e:	460c      	mov	r4, r1
 8009680:	b913      	cbnz	r3, 8009688 <_fflush_r+0x10>
 8009682:	2500      	movs	r5, #0
 8009684:	4628      	mov	r0, r5
 8009686:	bd38      	pop	{r3, r4, r5, pc}
 8009688:	b118      	cbz	r0, 8009692 <_fflush_r+0x1a>
 800968a:	6a03      	ldr	r3, [r0, #32]
 800968c:	b90b      	cbnz	r3, 8009692 <_fflush_r+0x1a>
 800968e:	f7fe fe83 	bl	8008398 <__sinit>
 8009692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d0f3      	beq.n	8009682 <_fflush_r+0xa>
 800969a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800969c:	07d0      	lsls	r0, r2, #31
 800969e:	d404      	bmi.n	80096aa <_fflush_r+0x32>
 80096a0:	0599      	lsls	r1, r3, #22
 80096a2:	d402      	bmi.n	80096aa <_fflush_r+0x32>
 80096a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096a6:	f7fe fef6 	bl	8008496 <__retarget_lock_acquire_recursive>
 80096aa:	4628      	mov	r0, r5
 80096ac:	4621      	mov	r1, r4
 80096ae:	f7ff ff5d 	bl	800956c <__sflush_r>
 80096b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096b4:	07da      	lsls	r2, r3, #31
 80096b6:	4605      	mov	r5, r0
 80096b8:	d4e4      	bmi.n	8009684 <_fflush_r+0xc>
 80096ba:	89a3      	ldrh	r3, [r4, #12]
 80096bc:	059b      	lsls	r3, r3, #22
 80096be:	d4e1      	bmi.n	8009684 <_fflush_r+0xc>
 80096c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096c2:	f7fe fee9 	bl	8008498 <__retarget_lock_release_recursive>
 80096c6:	e7dd      	b.n	8009684 <_fflush_r+0xc>

080096c8 <__malloc_lock>:
 80096c8:	4801      	ldr	r0, [pc, #4]	; (80096d0 <__malloc_lock+0x8>)
 80096ca:	f7fe bee4 	b.w	8008496 <__retarget_lock_acquire_recursive>
 80096ce:	bf00      	nop
 80096d0:	20000730 	.word	0x20000730

080096d4 <__malloc_unlock>:
 80096d4:	4801      	ldr	r0, [pc, #4]	; (80096dc <__malloc_unlock+0x8>)
 80096d6:	f7fe bedf 	b.w	8008498 <__retarget_lock_release_recursive>
 80096da:	bf00      	nop
 80096dc:	20000730 	.word	0x20000730

080096e0 <_Balloc>:
 80096e0:	b570      	push	{r4, r5, r6, lr}
 80096e2:	69c6      	ldr	r6, [r0, #28]
 80096e4:	4604      	mov	r4, r0
 80096e6:	460d      	mov	r5, r1
 80096e8:	b976      	cbnz	r6, 8009708 <_Balloc+0x28>
 80096ea:	2010      	movs	r0, #16
 80096ec:	f7ff fe96 	bl	800941c <malloc>
 80096f0:	4602      	mov	r2, r0
 80096f2:	61e0      	str	r0, [r4, #28]
 80096f4:	b920      	cbnz	r0, 8009700 <_Balloc+0x20>
 80096f6:	4b18      	ldr	r3, [pc, #96]	; (8009758 <_Balloc+0x78>)
 80096f8:	4818      	ldr	r0, [pc, #96]	; (800975c <_Balloc+0x7c>)
 80096fa:	216b      	movs	r1, #107	; 0x6b
 80096fc:	f000 fd2c 	bl	800a158 <__assert_func>
 8009700:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009704:	6006      	str	r6, [r0, #0]
 8009706:	60c6      	str	r6, [r0, #12]
 8009708:	69e6      	ldr	r6, [r4, #28]
 800970a:	68f3      	ldr	r3, [r6, #12]
 800970c:	b183      	cbz	r3, 8009730 <_Balloc+0x50>
 800970e:	69e3      	ldr	r3, [r4, #28]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009716:	b9b8      	cbnz	r0, 8009748 <_Balloc+0x68>
 8009718:	2101      	movs	r1, #1
 800971a:	fa01 f605 	lsl.w	r6, r1, r5
 800971e:	1d72      	adds	r2, r6, #5
 8009720:	0092      	lsls	r2, r2, #2
 8009722:	4620      	mov	r0, r4
 8009724:	f000 fd36 	bl	800a194 <_calloc_r>
 8009728:	b160      	cbz	r0, 8009744 <_Balloc+0x64>
 800972a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800972e:	e00e      	b.n	800974e <_Balloc+0x6e>
 8009730:	2221      	movs	r2, #33	; 0x21
 8009732:	2104      	movs	r1, #4
 8009734:	4620      	mov	r0, r4
 8009736:	f000 fd2d 	bl	800a194 <_calloc_r>
 800973a:	69e3      	ldr	r3, [r4, #28]
 800973c:	60f0      	str	r0, [r6, #12]
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d1e4      	bne.n	800970e <_Balloc+0x2e>
 8009744:	2000      	movs	r0, #0
 8009746:	bd70      	pop	{r4, r5, r6, pc}
 8009748:	6802      	ldr	r2, [r0, #0]
 800974a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800974e:	2300      	movs	r3, #0
 8009750:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009754:	e7f7      	b.n	8009746 <_Balloc+0x66>
 8009756:	bf00      	nop
 8009758:	0800a3c5 	.word	0x0800a3c5
 800975c:	0800a456 	.word	0x0800a456

08009760 <_Bfree>:
 8009760:	b570      	push	{r4, r5, r6, lr}
 8009762:	69c6      	ldr	r6, [r0, #28]
 8009764:	4605      	mov	r5, r0
 8009766:	460c      	mov	r4, r1
 8009768:	b976      	cbnz	r6, 8009788 <_Bfree+0x28>
 800976a:	2010      	movs	r0, #16
 800976c:	f7ff fe56 	bl	800941c <malloc>
 8009770:	4602      	mov	r2, r0
 8009772:	61e8      	str	r0, [r5, #28]
 8009774:	b920      	cbnz	r0, 8009780 <_Bfree+0x20>
 8009776:	4b09      	ldr	r3, [pc, #36]	; (800979c <_Bfree+0x3c>)
 8009778:	4809      	ldr	r0, [pc, #36]	; (80097a0 <_Bfree+0x40>)
 800977a:	218f      	movs	r1, #143	; 0x8f
 800977c:	f000 fcec 	bl	800a158 <__assert_func>
 8009780:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009784:	6006      	str	r6, [r0, #0]
 8009786:	60c6      	str	r6, [r0, #12]
 8009788:	b13c      	cbz	r4, 800979a <_Bfree+0x3a>
 800978a:	69eb      	ldr	r3, [r5, #28]
 800978c:	6862      	ldr	r2, [r4, #4]
 800978e:	68db      	ldr	r3, [r3, #12]
 8009790:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009794:	6021      	str	r1, [r4, #0]
 8009796:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800979a:	bd70      	pop	{r4, r5, r6, pc}
 800979c:	0800a3c5 	.word	0x0800a3c5
 80097a0:	0800a456 	.word	0x0800a456

080097a4 <__multadd>:
 80097a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097a8:	690d      	ldr	r5, [r1, #16]
 80097aa:	4607      	mov	r7, r0
 80097ac:	460c      	mov	r4, r1
 80097ae:	461e      	mov	r6, r3
 80097b0:	f101 0c14 	add.w	ip, r1, #20
 80097b4:	2000      	movs	r0, #0
 80097b6:	f8dc 3000 	ldr.w	r3, [ip]
 80097ba:	b299      	uxth	r1, r3
 80097bc:	fb02 6101 	mla	r1, r2, r1, r6
 80097c0:	0c1e      	lsrs	r6, r3, #16
 80097c2:	0c0b      	lsrs	r3, r1, #16
 80097c4:	fb02 3306 	mla	r3, r2, r6, r3
 80097c8:	b289      	uxth	r1, r1
 80097ca:	3001      	adds	r0, #1
 80097cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80097d0:	4285      	cmp	r5, r0
 80097d2:	f84c 1b04 	str.w	r1, [ip], #4
 80097d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80097da:	dcec      	bgt.n	80097b6 <__multadd+0x12>
 80097dc:	b30e      	cbz	r6, 8009822 <__multadd+0x7e>
 80097de:	68a3      	ldr	r3, [r4, #8]
 80097e0:	42ab      	cmp	r3, r5
 80097e2:	dc19      	bgt.n	8009818 <__multadd+0x74>
 80097e4:	6861      	ldr	r1, [r4, #4]
 80097e6:	4638      	mov	r0, r7
 80097e8:	3101      	adds	r1, #1
 80097ea:	f7ff ff79 	bl	80096e0 <_Balloc>
 80097ee:	4680      	mov	r8, r0
 80097f0:	b928      	cbnz	r0, 80097fe <__multadd+0x5a>
 80097f2:	4602      	mov	r2, r0
 80097f4:	4b0c      	ldr	r3, [pc, #48]	; (8009828 <__multadd+0x84>)
 80097f6:	480d      	ldr	r0, [pc, #52]	; (800982c <__multadd+0x88>)
 80097f8:	21ba      	movs	r1, #186	; 0xba
 80097fa:	f000 fcad 	bl	800a158 <__assert_func>
 80097fe:	6922      	ldr	r2, [r4, #16]
 8009800:	3202      	adds	r2, #2
 8009802:	f104 010c 	add.w	r1, r4, #12
 8009806:	0092      	lsls	r2, r2, #2
 8009808:	300c      	adds	r0, #12
 800980a:	f000 fc97 	bl	800a13c <memcpy>
 800980e:	4621      	mov	r1, r4
 8009810:	4638      	mov	r0, r7
 8009812:	f7ff ffa5 	bl	8009760 <_Bfree>
 8009816:	4644      	mov	r4, r8
 8009818:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800981c:	3501      	adds	r5, #1
 800981e:	615e      	str	r6, [r3, #20]
 8009820:	6125      	str	r5, [r4, #16]
 8009822:	4620      	mov	r0, r4
 8009824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009828:	0800a434 	.word	0x0800a434
 800982c:	0800a456 	.word	0x0800a456

08009830 <__hi0bits>:
 8009830:	0c03      	lsrs	r3, r0, #16
 8009832:	041b      	lsls	r3, r3, #16
 8009834:	b9d3      	cbnz	r3, 800986c <__hi0bits+0x3c>
 8009836:	0400      	lsls	r0, r0, #16
 8009838:	2310      	movs	r3, #16
 800983a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800983e:	bf04      	itt	eq
 8009840:	0200      	lsleq	r0, r0, #8
 8009842:	3308      	addeq	r3, #8
 8009844:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009848:	bf04      	itt	eq
 800984a:	0100      	lsleq	r0, r0, #4
 800984c:	3304      	addeq	r3, #4
 800984e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009852:	bf04      	itt	eq
 8009854:	0080      	lsleq	r0, r0, #2
 8009856:	3302      	addeq	r3, #2
 8009858:	2800      	cmp	r0, #0
 800985a:	db05      	blt.n	8009868 <__hi0bits+0x38>
 800985c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009860:	f103 0301 	add.w	r3, r3, #1
 8009864:	bf08      	it	eq
 8009866:	2320      	moveq	r3, #32
 8009868:	4618      	mov	r0, r3
 800986a:	4770      	bx	lr
 800986c:	2300      	movs	r3, #0
 800986e:	e7e4      	b.n	800983a <__hi0bits+0xa>

08009870 <__lo0bits>:
 8009870:	6803      	ldr	r3, [r0, #0]
 8009872:	f013 0207 	ands.w	r2, r3, #7
 8009876:	d00c      	beq.n	8009892 <__lo0bits+0x22>
 8009878:	07d9      	lsls	r1, r3, #31
 800987a:	d422      	bmi.n	80098c2 <__lo0bits+0x52>
 800987c:	079a      	lsls	r2, r3, #30
 800987e:	bf49      	itett	mi
 8009880:	085b      	lsrmi	r3, r3, #1
 8009882:	089b      	lsrpl	r3, r3, #2
 8009884:	6003      	strmi	r3, [r0, #0]
 8009886:	2201      	movmi	r2, #1
 8009888:	bf5c      	itt	pl
 800988a:	6003      	strpl	r3, [r0, #0]
 800988c:	2202      	movpl	r2, #2
 800988e:	4610      	mov	r0, r2
 8009890:	4770      	bx	lr
 8009892:	b299      	uxth	r1, r3
 8009894:	b909      	cbnz	r1, 800989a <__lo0bits+0x2a>
 8009896:	0c1b      	lsrs	r3, r3, #16
 8009898:	2210      	movs	r2, #16
 800989a:	b2d9      	uxtb	r1, r3
 800989c:	b909      	cbnz	r1, 80098a2 <__lo0bits+0x32>
 800989e:	3208      	adds	r2, #8
 80098a0:	0a1b      	lsrs	r3, r3, #8
 80098a2:	0719      	lsls	r1, r3, #28
 80098a4:	bf04      	itt	eq
 80098a6:	091b      	lsreq	r3, r3, #4
 80098a8:	3204      	addeq	r2, #4
 80098aa:	0799      	lsls	r1, r3, #30
 80098ac:	bf04      	itt	eq
 80098ae:	089b      	lsreq	r3, r3, #2
 80098b0:	3202      	addeq	r2, #2
 80098b2:	07d9      	lsls	r1, r3, #31
 80098b4:	d403      	bmi.n	80098be <__lo0bits+0x4e>
 80098b6:	085b      	lsrs	r3, r3, #1
 80098b8:	f102 0201 	add.w	r2, r2, #1
 80098bc:	d003      	beq.n	80098c6 <__lo0bits+0x56>
 80098be:	6003      	str	r3, [r0, #0]
 80098c0:	e7e5      	b.n	800988e <__lo0bits+0x1e>
 80098c2:	2200      	movs	r2, #0
 80098c4:	e7e3      	b.n	800988e <__lo0bits+0x1e>
 80098c6:	2220      	movs	r2, #32
 80098c8:	e7e1      	b.n	800988e <__lo0bits+0x1e>
	...

080098cc <__i2b>:
 80098cc:	b510      	push	{r4, lr}
 80098ce:	460c      	mov	r4, r1
 80098d0:	2101      	movs	r1, #1
 80098d2:	f7ff ff05 	bl	80096e0 <_Balloc>
 80098d6:	4602      	mov	r2, r0
 80098d8:	b928      	cbnz	r0, 80098e6 <__i2b+0x1a>
 80098da:	4b05      	ldr	r3, [pc, #20]	; (80098f0 <__i2b+0x24>)
 80098dc:	4805      	ldr	r0, [pc, #20]	; (80098f4 <__i2b+0x28>)
 80098de:	f240 1145 	movw	r1, #325	; 0x145
 80098e2:	f000 fc39 	bl	800a158 <__assert_func>
 80098e6:	2301      	movs	r3, #1
 80098e8:	6144      	str	r4, [r0, #20]
 80098ea:	6103      	str	r3, [r0, #16]
 80098ec:	bd10      	pop	{r4, pc}
 80098ee:	bf00      	nop
 80098f0:	0800a434 	.word	0x0800a434
 80098f4:	0800a456 	.word	0x0800a456

080098f8 <__multiply>:
 80098f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098fc:	4691      	mov	r9, r2
 80098fe:	690a      	ldr	r2, [r1, #16]
 8009900:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009904:	429a      	cmp	r2, r3
 8009906:	bfb8      	it	lt
 8009908:	460b      	movlt	r3, r1
 800990a:	460c      	mov	r4, r1
 800990c:	bfbc      	itt	lt
 800990e:	464c      	movlt	r4, r9
 8009910:	4699      	movlt	r9, r3
 8009912:	6927      	ldr	r7, [r4, #16]
 8009914:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009918:	68a3      	ldr	r3, [r4, #8]
 800991a:	6861      	ldr	r1, [r4, #4]
 800991c:	eb07 060a 	add.w	r6, r7, sl
 8009920:	42b3      	cmp	r3, r6
 8009922:	b085      	sub	sp, #20
 8009924:	bfb8      	it	lt
 8009926:	3101      	addlt	r1, #1
 8009928:	f7ff feda 	bl	80096e0 <_Balloc>
 800992c:	b930      	cbnz	r0, 800993c <__multiply+0x44>
 800992e:	4602      	mov	r2, r0
 8009930:	4b44      	ldr	r3, [pc, #272]	; (8009a44 <__multiply+0x14c>)
 8009932:	4845      	ldr	r0, [pc, #276]	; (8009a48 <__multiply+0x150>)
 8009934:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009938:	f000 fc0e 	bl	800a158 <__assert_func>
 800993c:	f100 0514 	add.w	r5, r0, #20
 8009940:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009944:	462b      	mov	r3, r5
 8009946:	2200      	movs	r2, #0
 8009948:	4543      	cmp	r3, r8
 800994a:	d321      	bcc.n	8009990 <__multiply+0x98>
 800994c:	f104 0314 	add.w	r3, r4, #20
 8009950:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009954:	f109 0314 	add.w	r3, r9, #20
 8009958:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800995c:	9202      	str	r2, [sp, #8]
 800995e:	1b3a      	subs	r2, r7, r4
 8009960:	3a15      	subs	r2, #21
 8009962:	f022 0203 	bic.w	r2, r2, #3
 8009966:	3204      	adds	r2, #4
 8009968:	f104 0115 	add.w	r1, r4, #21
 800996c:	428f      	cmp	r7, r1
 800996e:	bf38      	it	cc
 8009970:	2204      	movcc	r2, #4
 8009972:	9201      	str	r2, [sp, #4]
 8009974:	9a02      	ldr	r2, [sp, #8]
 8009976:	9303      	str	r3, [sp, #12]
 8009978:	429a      	cmp	r2, r3
 800997a:	d80c      	bhi.n	8009996 <__multiply+0x9e>
 800997c:	2e00      	cmp	r6, #0
 800997e:	dd03      	ble.n	8009988 <__multiply+0x90>
 8009980:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009984:	2b00      	cmp	r3, #0
 8009986:	d05b      	beq.n	8009a40 <__multiply+0x148>
 8009988:	6106      	str	r6, [r0, #16]
 800998a:	b005      	add	sp, #20
 800998c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009990:	f843 2b04 	str.w	r2, [r3], #4
 8009994:	e7d8      	b.n	8009948 <__multiply+0x50>
 8009996:	f8b3 a000 	ldrh.w	sl, [r3]
 800999a:	f1ba 0f00 	cmp.w	sl, #0
 800999e:	d024      	beq.n	80099ea <__multiply+0xf2>
 80099a0:	f104 0e14 	add.w	lr, r4, #20
 80099a4:	46a9      	mov	r9, r5
 80099a6:	f04f 0c00 	mov.w	ip, #0
 80099aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80099ae:	f8d9 1000 	ldr.w	r1, [r9]
 80099b2:	fa1f fb82 	uxth.w	fp, r2
 80099b6:	b289      	uxth	r1, r1
 80099b8:	fb0a 110b 	mla	r1, sl, fp, r1
 80099bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80099c0:	f8d9 2000 	ldr.w	r2, [r9]
 80099c4:	4461      	add	r1, ip
 80099c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80099ca:	fb0a c20b 	mla	r2, sl, fp, ip
 80099ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80099d2:	b289      	uxth	r1, r1
 80099d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80099d8:	4577      	cmp	r7, lr
 80099da:	f849 1b04 	str.w	r1, [r9], #4
 80099de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80099e2:	d8e2      	bhi.n	80099aa <__multiply+0xb2>
 80099e4:	9a01      	ldr	r2, [sp, #4]
 80099e6:	f845 c002 	str.w	ip, [r5, r2]
 80099ea:	9a03      	ldr	r2, [sp, #12]
 80099ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80099f0:	3304      	adds	r3, #4
 80099f2:	f1b9 0f00 	cmp.w	r9, #0
 80099f6:	d021      	beq.n	8009a3c <__multiply+0x144>
 80099f8:	6829      	ldr	r1, [r5, #0]
 80099fa:	f104 0c14 	add.w	ip, r4, #20
 80099fe:	46ae      	mov	lr, r5
 8009a00:	f04f 0a00 	mov.w	sl, #0
 8009a04:	f8bc b000 	ldrh.w	fp, [ip]
 8009a08:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009a0c:	fb09 220b 	mla	r2, r9, fp, r2
 8009a10:	4452      	add	r2, sl
 8009a12:	b289      	uxth	r1, r1
 8009a14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009a18:	f84e 1b04 	str.w	r1, [lr], #4
 8009a1c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009a20:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009a24:	f8be 1000 	ldrh.w	r1, [lr]
 8009a28:	fb09 110a 	mla	r1, r9, sl, r1
 8009a2c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009a30:	4567      	cmp	r7, ip
 8009a32:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009a36:	d8e5      	bhi.n	8009a04 <__multiply+0x10c>
 8009a38:	9a01      	ldr	r2, [sp, #4]
 8009a3a:	50a9      	str	r1, [r5, r2]
 8009a3c:	3504      	adds	r5, #4
 8009a3e:	e799      	b.n	8009974 <__multiply+0x7c>
 8009a40:	3e01      	subs	r6, #1
 8009a42:	e79b      	b.n	800997c <__multiply+0x84>
 8009a44:	0800a434 	.word	0x0800a434
 8009a48:	0800a456 	.word	0x0800a456

08009a4c <__pow5mult>:
 8009a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a50:	4615      	mov	r5, r2
 8009a52:	f012 0203 	ands.w	r2, r2, #3
 8009a56:	4606      	mov	r6, r0
 8009a58:	460f      	mov	r7, r1
 8009a5a:	d007      	beq.n	8009a6c <__pow5mult+0x20>
 8009a5c:	4c25      	ldr	r4, [pc, #148]	; (8009af4 <__pow5mult+0xa8>)
 8009a5e:	3a01      	subs	r2, #1
 8009a60:	2300      	movs	r3, #0
 8009a62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a66:	f7ff fe9d 	bl	80097a4 <__multadd>
 8009a6a:	4607      	mov	r7, r0
 8009a6c:	10ad      	asrs	r5, r5, #2
 8009a6e:	d03d      	beq.n	8009aec <__pow5mult+0xa0>
 8009a70:	69f4      	ldr	r4, [r6, #28]
 8009a72:	b97c      	cbnz	r4, 8009a94 <__pow5mult+0x48>
 8009a74:	2010      	movs	r0, #16
 8009a76:	f7ff fcd1 	bl	800941c <malloc>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	61f0      	str	r0, [r6, #28]
 8009a7e:	b928      	cbnz	r0, 8009a8c <__pow5mult+0x40>
 8009a80:	4b1d      	ldr	r3, [pc, #116]	; (8009af8 <__pow5mult+0xac>)
 8009a82:	481e      	ldr	r0, [pc, #120]	; (8009afc <__pow5mult+0xb0>)
 8009a84:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009a88:	f000 fb66 	bl	800a158 <__assert_func>
 8009a8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a90:	6004      	str	r4, [r0, #0]
 8009a92:	60c4      	str	r4, [r0, #12]
 8009a94:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009a98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a9c:	b94c      	cbnz	r4, 8009ab2 <__pow5mult+0x66>
 8009a9e:	f240 2171 	movw	r1, #625	; 0x271
 8009aa2:	4630      	mov	r0, r6
 8009aa4:	f7ff ff12 	bl	80098cc <__i2b>
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	f8c8 0008 	str.w	r0, [r8, #8]
 8009aae:	4604      	mov	r4, r0
 8009ab0:	6003      	str	r3, [r0, #0]
 8009ab2:	f04f 0900 	mov.w	r9, #0
 8009ab6:	07eb      	lsls	r3, r5, #31
 8009ab8:	d50a      	bpl.n	8009ad0 <__pow5mult+0x84>
 8009aba:	4639      	mov	r1, r7
 8009abc:	4622      	mov	r2, r4
 8009abe:	4630      	mov	r0, r6
 8009ac0:	f7ff ff1a 	bl	80098f8 <__multiply>
 8009ac4:	4639      	mov	r1, r7
 8009ac6:	4680      	mov	r8, r0
 8009ac8:	4630      	mov	r0, r6
 8009aca:	f7ff fe49 	bl	8009760 <_Bfree>
 8009ace:	4647      	mov	r7, r8
 8009ad0:	106d      	asrs	r5, r5, #1
 8009ad2:	d00b      	beq.n	8009aec <__pow5mult+0xa0>
 8009ad4:	6820      	ldr	r0, [r4, #0]
 8009ad6:	b938      	cbnz	r0, 8009ae8 <__pow5mult+0x9c>
 8009ad8:	4622      	mov	r2, r4
 8009ada:	4621      	mov	r1, r4
 8009adc:	4630      	mov	r0, r6
 8009ade:	f7ff ff0b 	bl	80098f8 <__multiply>
 8009ae2:	6020      	str	r0, [r4, #0]
 8009ae4:	f8c0 9000 	str.w	r9, [r0]
 8009ae8:	4604      	mov	r4, r0
 8009aea:	e7e4      	b.n	8009ab6 <__pow5mult+0x6a>
 8009aec:	4638      	mov	r0, r7
 8009aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009af2:	bf00      	nop
 8009af4:	0800a5a0 	.word	0x0800a5a0
 8009af8:	0800a3c5 	.word	0x0800a3c5
 8009afc:	0800a456 	.word	0x0800a456

08009b00 <__lshift>:
 8009b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b04:	460c      	mov	r4, r1
 8009b06:	6849      	ldr	r1, [r1, #4]
 8009b08:	6923      	ldr	r3, [r4, #16]
 8009b0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009b0e:	68a3      	ldr	r3, [r4, #8]
 8009b10:	4607      	mov	r7, r0
 8009b12:	4691      	mov	r9, r2
 8009b14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b18:	f108 0601 	add.w	r6, r8, #1
 8009b1c:	42b3      	cmp	r3, r6
 8009b1e:	db0b      	blt.n	8009b38 <__lshift+0x38>
 8009b20:	4638      	mov	r0, r7
 8009b22:	f7ff fddd 	bl	80096e0 <_Balloc>
 8009b26:	4605      	mov	r5, r0
 8009b28:	b948      	cbnz	r0, 8009b3e <__lshift+0x3e>
 8009b2a:	4602      	mov	r2, r0
 8009b2c:	4b28      	ldr	r3, [pc, #160]	; (8009bd0 <__lshift+0xd0>)
 8009b2e:	4829      	ldr	r0, [pc, #164]	; (8009bd4 <__lshift+0xd4>)
 8009b30:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009b34:	f000 fb10 	bl	800a158 <__assert_func>
 8009b38:	3101      	adds	r1, #1
 8009b3a:	005b      	lsls	r3, r3, #1
 8009b3c:	e7ee      	b.n	8009b1c <__lshift+0x1c>
 8009b3e:	2300      	movs	r3, #0
 8009b40:	f100 0114 	add.w	r1, r0, #20
 8009b44:	f100 0210 	add.w	r2, r0, #16
 8009b48:	4618      	mov	r0, r3
 8009b4a:	4553      	cmp	r3, sl
 8009b4c:	db33      	blt.n	8009bb6 <__lshift+0xb6>
 8009b4e:	6920      	ldr	r0, [r4, #16]
 8009b50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b54:	f104 0314 	add.w	r3, r4, #20
 8009b58:	f019 091f 	ands.w	r9, r9, #31
 8009b5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b64:	d02b      	beq.n	8009bbe <__lshift+0xbe>
 8009b66:	f1c9 0e20 	rsb	lr, r9, #32
 8009b6a:	468a      	mov	sl, r1
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	6818      	ldr	r0, [r3, #0]
 8009b70:	fa00 f009 	lsl.w	r0, r0, r9
 8009b74:	4310      	orrs	r0, r2
 8009b76:	f84a 0b04 	str.w	r0, [sl], #4
 8009b7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b7e:	459c      	cmp	ip, r3
 8009b80:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b84:	d8f3      	bhi.n	8009b6e <__lshift+0x6e>
 8009b86:	ebac 0304 	sub.w	r3, ip, r4
 8009b8a:	3b15      	subs	r3, #21
 8009b8c:	f023 0303 	bic.w	r3, r3, #3
 8009b90:	3304      	adds	r3, #4
 8009b92:	f104 0015 	add.w	r0, r4, #21
 8009b96:	4584      	cmp	ip, r0
 8009b98:	bf38      	it	cc
 8009b9a:	2304      	movcc	r3, #4
 8009b9c:	50ca      	str	r2, [r1, r3]
 8009b9e:	b10a      	cbz	r2, 8009ba4 <__lshift+0xa4>
 8009ba0:	f108 0602 	add.w	r6, r8, #2
 8009ba4:	3e01      	subs	r6, #1
 8009ba6:	4638      	mov	r0, r7
 8009ba8:	612e      	str	r6, [r5, #16]
 8009baa:	4621      	mov	r1, r4
 8009bac:	f7ff fdd8 	bl	8009760 <_Bfree>
 8009bb0:	4628      	mov	r0, r5
 8009bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bb6:	f842 0f04 	str.w	r0, [r2, #4]!
 8009bba:	3301      	adds	r3, #1
 8009bbc:	e7c5      	b.n	8009b4a <__lshift+0x4a>
 8009bbe:	3904      	subs	r1, #4
 8009bc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bc4:	f841 2f04 	str.w	r2, [r1, #4]!
 8009bc8:	459c      	cmp	ip, r3
 8009bca:	d8f9      	bhi.n	8009bc0 <__lshift+0xc0>
 8009bcc:	e7ea      	b.n	8009ba4 <__lshift+0xa4>
 8009bce:	bf00      	nop
 8009bd0:	0800a434 	.word	0x0800a434
 8009bd4:	0800a456 	.word	0x0800a456

08009bd8 <__mcmp>:
 8009bd8:	b530      	push	{r4, r5, lr}
 8009bda:	6902      	ldr	r2, [r0, #16]
 8009bdc:	690c      	ldr	r4, [r1, #16]
 8009bde:	1b12      	subs	r2, r2, r4
 8009be0:	d10e      	bne.n	8009c00 <__mcmp+0x28>
 8009be2:	f100 0314 	add.w	r3, r0, #20
 8009be6:	3114      	adds	r1, #20
 8009be8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009bec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009bf0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009bf4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009bf8:	42a5      	cmp	r5, r4
 8009bfa:	d003      	beq.n	8009c04 <__mcmp+0x2c>
 8009bfc:	d305      	bcc.n	8009c0a <__mcmp+0x32>
 8009bfe:	2201      	movs	r2, #1
 8009c00:	4610      	mov	r0, r2
 8009c02:	bd30      	pop	{r4, r5, pc}
 8009c04:	4283      	cmp	r3, r0
 8009c06:	d3f3      	bcc.n	8009bf0 <__mcmp+0x18>
 8009c08:	e7fa      	b.n	8009c00 <__mcmp+0x28>
 8009c0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c0e:	e7f7      	b.n	8009c00 <__mcmp+0x28>

08009c10 <__mdiff>:
 8009c10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c14:	460c      	mov	r4, r1
 8009c16:	4606      	mov	r6, r0
 8009c18:	4611      	mov	r1, r2
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	4690      	mov	r8, r2
 8009c1e:	f7ff ffdb 	bl	8009bd8 <__mcmp>
 8009c22:	1e05      	subs	r5, r0, #0
 8009c24:	d110      	bne.n	8009c48 <__mdiff+0x38>
 8009c26:	4629      	mov	r1, r5
 8009c28:	4630      	mov	r0, r6
 8009c2a:	f7ff fd59 	bl	80096e0 <_Balloc>
 8009c2e:	b930      	cbnz	r0, 8009c3e <__mdiff+0x2e>
 8009c30:	4b3a      	ldr	r3, [pc, #232]	; (8009d1c <__mdiff+0x10c>)
 8009c32:	4602      	mov	r2, r0
 8009c34:	f240 2137 	movw	r1, #567	; 0x237
 8009c38:	4839      	ldr	r0, [pc, #228]	; (8009d20 <__mdiff+0x110>)
 8009c3a:	f000 fa8d 	bl	800a158 <__assert_func>
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c48:	bfa4      	itt	ge
 8009c4a:	4643      	movge	r3, r8
 8009c4c:	46a0      	movge	r8, r4
 8009c4e:	4630      	mov	r0, r6
 8009c50:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009c54:	bfa6      	itte	ge
 8009c56:	461c      	movge	r4, r3
 8009c58:	2500      	movge	r5, #0
 8009c5a:	2501      	movlt	r5, #1
 8009c5c:	f7ff fd40 	bl	80096e0 <_Balloc>
 8009c60:	b920      	cbnz	r0, 8009c6c <__mdiff+0x5c>
 8009c62:	4b2e      	ldr	r3, [pc, #184]	; (8009d1c <__mdiff+0x10c>)
 8009c64:	4602      	mov	r2, r0
 8009c66:	f240 2145 	movw	r1, #581	; 0x245
 8009c6a:	e7e5      	b.n	8009c38 <__mdiff+0x28>
 8009c6c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009c70:	6926      	ldr	r6, [r4, #16]
 8009c72:	60c5      	str	r5, [r0, #12]
 8009c74:	f104 0914 	add.w	r9, r4, #20
 8009c78:	f108 0514 	add.w	r5, r8, #20
 8009c7c:	f100 0e14 	add.w	lr, r0, #20
 8009c80:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009c84:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009c88:	f108 0210 	add.w	r2, r8, #16
 8009c8c:	46f2      	mov	sl, lr
 8009c8e:	2100      	movs	r1, #0
 8009c90:	f859 3b04 	ldr.w	r3, [r9], #4
 8009c94:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009c98:	fa11 f88b 	uxtah	r8, r1, fp
 8009c9c:	b299      	uxth	r1, r3
 8009c9e:	0c1b      	lsrs	r3, r3, #16
 8009ca0:	eba8 0801 	sub.w	r8, r8, r1
 8009ca4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009ca8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009cac:	fa1f f888 	uxth.w	r8, r8
 8009cb0:	1419      	asrs	r1, r3, #16
 8009cb2:	454e      	cmp	r6, r9
 8009cb4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009cb8:	f84a 3b04 	str.w	r3, [sl], #4
 8009cbc:	d8e8      	bhi.n	8009c90 <__mdiff+0x80>
 8009cbe:	1b33      	subs	r3, r6, r4
 8009cc0:	3b15      	subs	r3, #21
 8009cc2:	f023 0303 	bic.w	r3, r3, #3
 8009cc6:	3304      	adds	r3, #4
 8009cc8:	3415      	adds	r4, #21
 8009cca:	42a6      	cmp	r6, r4
 8009ccc:	bf38      	it	cc
 8009cce:	2304      	movcc	r3, #4
 8009cd0:	441d      	add	r5, r3
 8009cd2:	4473      	add	r3, lr
 8009cd4:	469e      	mov	lr, r3
 8009cd6:	462e      	mov	r6, r5
 8009cd8:	4566      	cmp	r6, ip
 8009cda:	d30e      	bcc.n	8009cfa <__mdiff+0xea>
 8009cdc:	f10c 0203 	add.w	r2, ip, #3
 8009ce0:	1b52      	subs	r2, r2, r5
 8009ce2:	f022 0203 	bic.w	r2, r2, #3
 8009ce6:	3d03      	subs	r5, #3
 8009ce8:	45ac      	cmp	ip, r5
 8009cea:	bf38      	it	cc
 8009cec:	2200      	movcc	r2, #0
 8009cee:	4413      	add	r3, r2
 8009cf0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009cf4:	b17a      	cbz	r2, 8009d16 <__mdiff+0x106>
 8009cf6:	6107      	str	r7, [r0, #16]
 8009cf8:	e7a4      	b.n	8009c44 <__mdiff+0x34>
 8009cfa:	f856 8b04 	ldr.w	r8, [r6], #4
 8009cfe:	fa11 f288 	uxtah	r2, r1, r8
 8009d02:	1414      	asrs	r4, r2, #16
 8009d04:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009d08:	b292      	uxth	r2, r2
 8009d0a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009d0e:	f84e 2b04 	str.w	r2, [lr], #4
 8009d12:	1421      	asrs	r1, r4, #16
 8009d14:	e7e0      	b.n	8009cd8 <__mdiff+0xc8>
 8009d16:	3f01      	subs	r7, #1
 8009d18:	e7ea      	b.n	8009cf0 <__mdiff+0xe0>
 8009d1a:	bf00      	nop
 8009d1c:	0800a434 	.word	0x0800a434
 8009d20:	0800a456 	.word	0x0800a456

08009d24 <__d2b>:
 8009d24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d28:	460f      	mov	r7, r1
 8009d2a:	2101      	movs	r1, #1
 8009d2c:	ec59 8b10 	vmov	r8, r9, d0
 8009d30:	4616      	mov	r6, r2
 8009d32:	f7ff fcd5 	bl	80096e0 <_Balloc>
 8009d36:	4604      	mov	r4, r0
 8009d38:	b930      	cbnz	r0, 8009d48 <__d2b+0x24>
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	4b24      	ldr	r3, [pc, #144]	; (8009dd0 <__d2b+0xac>)
 8009d3e:	4825      	ldr	r0, [pc, #148]	; (8009dd4 <__d2b+0xb0>)
 8009d40:	f240 310f 	movw	r1, #783	; 0x30f
 8009d44:	f000 fa08 	bl	800a158 <__assert_func>
 8009d48:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009d4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d50:	bb2d      	cbnz	r5, 8009d9e <__d2b+0x7a>
 8009d52:	9301      	str	r3, [sp, #4]
 8009d54:	f1b8 0300 	subs.w	r3, r8, #0
 8009d58:	d026      	beq.n	8009da8 <__d2b+0x84>
 8009d5a:	4668      	mov	r0, sp
 8009d5c:	9300      	str	r3, [sp, #0]
 8009d5e:	f7ff fd87 	bl	8009870 <__lo0bits>
 8009d62:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009d66:	b1e8      	cbz	r0, 8009da4 <__d2b+0x80>
 8009d68:	f1c0 0320 	rsb	r3, r0, #32
 8009d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d70:	430b      	orrs	r3, r1
 8009d72:	40c2      	lsrs	r2, r0
 8009d74:	6163      	str	r3, [r4, #20]
 8009d76:	9201      	str	r2, [sp, #4]
 8009d78:	9b01      	ldr	r3, [sp, #4]
 8009d7a:	61a3      	str	r3, [r4, #24]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	bf14      	ite	ne
 8009d80:	2202      	movne	r2, #2
 8009d82:	2201      	moveq	r2, #1
 8009d84:	6122      	str	r2, [r4, #16]
 8009d86:	b1bd      	cbz	r5, 8009db8 <__d2b+0x94>
 8009d88:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009d8c:	4405      	add	r5, r0
 8009d8e:	603d      	str	r5, [r7, #0]
 8009d90:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009d94:	6030      	str	r0, [r6, #0]
 8009d96:	4620      	mov	r0, r4
 8009d98:	b003      	add	sp, #12
 8009d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009da2:	e7d6      	b.n	8009d52 <__d2b+0x2e>
 8009da4:	6161      	str	r1, [r4, #20]
 8009da6:	e7e7      	b.n	8009d78 <__d2b+0x54>
 8009da8:	a801      	add	r0, sp, #4
 8009daa:	f7ff fd61 	bl	8009870 <__lo0bits>
 8009dae:	9b01      	ldr	r3, [sp, #4]
 8009db0:	6163      	str	r3, [r4, #20]
 8009db2:	3020      	adds	r0, #32
 8009db4:	2201      	movs	r2, #1
 8009db6:	e7e5      	b.n	8009d84 <__d2b+0x60>
 8009db8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009dbc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009dc0:	6038      	str	r0, [r7, #0]
 8009dc2:	6918      	ldr	r0, [r3, #16]
 8009dc4:	f7ff fd34 	bl	8009830 <__hi0bits>
 8009dc8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009dcc:	e7e2      	b.n	8009d94 <__d2b+0x70>
 8009dce:	bf00      	nop
 8009dd0:	0800a434 	.word	0x0800a434
 8009dd4:	0800a456 	.word	0x0800a456

08009dd8 <__sread>:
 8009dd8:	b510      	push	{r4, lr}
 8009dda:	460c      	mov	r4, r1
 8009ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009de0:	f000 f978 	bl	800a0d4 <_read_r>
 8009de4:	2800      	cmp	r0, #0
 8009de6:	bfab      	itete	ge
 8009de8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009dea:	89a3      	ldrhlt	r3, [r4, #12]
 8009dec:	181b      	addge	r3, r3, r0
 8009dee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009df2:	bfac      	ite	ge
 8009df4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009df6:	81a3      	strhlt	r3, [r4, #12]
 8009df8:	bd10      	pop	{r4, pc}

08009dfa <__swrite>:
 8009dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dfe:	461f      	mov	r7, r3
 8009e00:	898b      	ldrh	r3, [r1, #12]
 8009e02:	05db      	lsls	r3, r3, #23
 8009e04:	4605      	mov	r5, r0
 8009e06:	460c      	mov	r4, r1
 8009e08:	4616      	mov	r6, r2
 8009e0a:	d505      	bpl.n	8009e18 <__swrite+0x1e>
 8009e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e10:	2302      	movs	r3, #2
 8009e12:	2200      	movs	r2, #0
 8009e14:	f000 f94c 	bl	800a0b0 <_lseek_r>
 8009e18:	89a3      	ldrh	r3, [r4, #12]
 8009e1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e22:	81a3      	strh	r3, [r4, #12]
 8009e24:	4632      	mov	r2, r6
 8009e26:	463b      	mov	r3, r7
 8009e28:	4628      	mov	r0, r5
 8009e2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e2e:	f000 b973 	b.w	800a118 <_write_r>

08009e32 <__sseek>:
 8009e32:	b510      	push	{r4, lr}
 8009e34:	460c      	mov	r4, r1
 8009e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e3a:	f000 f939 	bl	800a0b0 <_lseek_r>
 8009e3e:	1c43      	adds	r3, r0, #1
 8009e40:	89a3      	ldrh	r3, [r4, #12]
 8009e42:	bf15      	itete	ne
 8009e44:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e4e:	81a3      	strheq	r3, [r4, #12]
 8009e50:	bf18      	it	ne
 8009e52:	81a3      	strhne	r3, [r4, #12]
 8009e54:	bd10      	pop	{r4, pc}

08009e56 <__sclose>:
 8009e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e5a:	f000 b8f7 	b.w	800a04c <_close_r>

08009e5e <__swbuf_r>:
 8009e5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e60:	460e      	mov	r6, r1
 8009e62:	4614      	mov	r4, r2
 8009e64:	4605      	mov	r5, r0
 8009e66:	b118      	cbz	r0, 8009e70 <__swbuf_r+0x12>
 8009e68:	6a03      	ldr	r3, [r0, #32]
 8009e6a:	b90b      	cbnz	r3, 8009e70 <__swbuf_r+0x12>
 8009e6c:	f7fe fa94 	bl	8008398 <__sinit>
 8009e70:	69a3      	ldr	r3, [r4, #24]
 8009e72:	60a3      	str	r3, [r4, #8]
 8009e74:	89a3      	ldrh	r3, [r4, #12]
 8009e76:	071a      	lsls	r2, r3, #28
 8009e78:	d525      	bpl.n	8009ec6 <__swbuf_r+0x68>
 8009e7a:	6923      	ldr	r3, [r4, #16]
 8009e7c:	b31b      	cbz	r3, 8009ec6 <__swbuf_r+0x68>
 8009e7e:	6823      	ldr	r3, [r4, #0]
 8009e80:	6922      	ldr	r2, [r4, #16]
 8009e82:	1a98      	subs	r0, r3, r2
 8009e84:	6963      	ldr	r3, [r4, #20]
 8009e86:	b2f6      	uxtb	r6, r6
 8009e88:	4283      	cmp	r3, r0
 8009e8a:	4637      	mov	r7, r6
 8009e8c:	dc04      	bgt.n	8009e98 <__swbuf_r+0x3a>
 8009e8e:	4621      	mov	r1, r4
 8009e90:	4628      	mov	r0, r5
 8009e92:	f7ff fbf1 	bl	8009678 <_fflush_r>
 8009e96:	b9e0      	cbnz	r0, 8009ed2 <__swbuf_r+0x74>
 8009e98:	68a3      	ldr	r3, [r4, #8]
 8009e9a:	3b01      	subs	r3, #1
 8009e9c:	60a3      	str	r3, [r4, #8]
 8009e9e:	6823      	ldr	r3, [r4, #0]
 8009ea0:	1c5a      	adds	r2, r3, #1
 8009ea2:	6022      	str	r2, [r4, #0]
 8009ea4:	701e      	strb	r6, [r3, #0]
 8009ea6:	6962      	ldr	r2, [r4, #20]
 8009ea8:	1c43      	adds	r3, r0, #1
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d004      	beq.n	8009eb8 <__swbuf_r+0x5a>
 8009eae:	89a3      	ldrh	r3, [r4, #12]
 8009eb0:	07db      	lsls	r3, r3, #31
 8009eb2:	d506      	bpl.n	8009ec2 <__swbuf_r+0x64>
 8009eb4:	2e0a      	cmp	r6, #10
 8009eb6:	d104      	bne.n	8009ec2 <__swbuf_r+0x64>
 8009eb8:	4621      	mov	r1, r4
 8009eba:	4628      	mov	r0, r5
 8009ebc:	f7ff fbdc 	bl	8009678 <_fflush_r>
 8009ec0:	b938      	cbnz	r0, 8009ed2 <__swbuf_r+0x74>
 8009ec2:	4638      	mov	r0, r7
 8009ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ec6:	4621      	mov	r1, r4
 8009ec8:	4628      	mov	r0, r5
 8009eca:	f000 f805 	bl	8009ed8 <__swsetup_r>
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	d0d5      	beq.n	8009e7e <__swbuf_r+0x20>
 8009ed2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009ed6:	e7f4      	b.n	8009ec2 <__swbuf_r+0x64>

08009ed8 <__swsetup_r>:
 8009ed8:	b538      	push	{r3, r4, r5, lr}
 8009eda:	4b2a      	ldr	r3, [pc, #168]	; (8009f84 <__swsetup_r+0xac>)
 8009edc:	4605      	mov	r5, r0
 8009ede:	6818      	ldr	r0, [r3, #0]
 8009ee0:	460c      	mov	r4, r1
 8009ee2:	b118      	cbz	r0, 8009eec <__swsetup_r+0x14>
 8009ee4:	6a03      	ldr	r3, [r0, #32]
 8009ee6:	b90b      	cbnz	r3, 8009eec <__swsetup_r+0x14>
 8009ee8:	f7fe fa56 	bl	8008398 <__sinit>
 8009eec:	89a3      	ldrh	r3, [r4, #12]
 8009eee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ef2:	0718      	lsls	r0, r3, #28
 8009ef4:	d422      	bmi.n	8009f3c <__swsetup_r+0x64>
 8009ef6:	06d9      	lsls	r1, r3, #27
 8009ef8:	d407      	bmi.n	8009f0a <__swsetup_r+0x32>
 8009efa:	2309      	movs	r3, #9
 8009efc:	602b      	str	r3, [r5, #0]
 8009efe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f02:	81a3      	strh	r3, [r4, #12]
 8009f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f08:	e034      	b.n	8009f74 <__swsetup_r+0x9c>
 8009f0a:	0758      	lsls	r0, r3, #29
 8009f0c:	d512      	bpl.n	8009f34 <__swsetup_r+0x5c>
 8009f0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f10:	b141      	cbz	r1, 8009f24 <__swsetup_r+0x4c>
 8009f12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f16:	4299      	cmp	r1, r3
 8009f18:	d002      	beq.n	8009f20 <__swsetup_r+0x48>
 8009f1a:	4628      	mov	r0, r5
 8009f1c:	f000 f950 	bl	800a1c0 <_free_r>
 8009f20:	2300      	movs	r3, #0
 8009f22:	6363      	str	r3, [r4, #52]	; 0x34
 8009f24:	89a3      	ldrh	r3, [r4, #12]
 8009f26:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f2a:	81a3      	strh	r3, [r4, #12]
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	6063      	str	r3, [r4, #4]
 8009f30:	6923      	ldr	r3, [r4, #16]
 8009f32:	6023      	str	r3, [r4, #0]
 8009f34:	89a3      	ldrh	r3, [r4, #12]
 8009f36:	f043 0308 	orr.w	r3, r3, #8
 8009f3a:	81a3      	strh	r3, [r4, #12]
 8009f3c:	6923      	ldr	r3, [r4, #16]
 8009f3e:	b94b      	cbnz	r3, 8009f54 <__swsetup_r+0x7c>
 8009f40:	89a3      	ldrh	r3, [r4, #12]
 8009f42:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f4a:	d003      	beq.n	8009f54 <__swsetup_r+0x7c>
 8009f4c:	4621      	mov	r1, r4
 8009f4e:	4628      	mov	r0, r5
 8009f50:	f000 f840 	bl	8009fd4 <__smakebuf_r>
 8009f54:	89a0      	ldrh	r0, [r4, #12]
 8009f56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f5a:	f010 0301 	ands.w	r3, r0, #1
 8009f5e:	d00a      	beq.n	8009f76 <__swsetup_r+0x9e>
 8009f60:	2300      	movs	r3, #0
 8009f62:	60a3      	str	r3, [r4, #8]
 8009f64:	6963      	ldr	r3, [r4, #20]
 8009f66:	425b      	negs	r3, r3
 8009f68:	61a3      	str	r3, [r4, #24]
 8009f6a:	6923      	ldr	r3, [r4, #16]
 8009f6c:	b943      	cbnz	r3, 8009f80 <__swsetup_r+0xa8>
 8009f6e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f72:	d1c4      	bne.n	8009efe <__swsetup_r+0x26>
 8009f74:	bd38      	pop	{r3, r4, r5, pc}
 8009f76:	0781      	lsls	r1, r0, #30
 8009f78:	bf58      	it	pl
 8009f7a:	6963      	ldrpl	r3, [r4, #20]
 8009f7c:	60a3      	str	r3, [r4, #8]
 8009f7e:	e7f4      	b.n	8009f6a <__swsetup_r+0x92>
 8009f80:	2000      	movs	r0, #0
 8009f82:	e7f7      	b.n	8009f74 <__swsetup_r+0x9c>
 8009f84:	20000090 	.word	0x20000090

08009f88 <__swhatbuf_r>:
 8009f88:	b570      	push	{r4, r5, r6, lr}
 8009f8a:	460c      	mov	r4, r1
 8009f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f90:	2900      	cmp	r1, #0
 8009f92:	b096      	sub	sp, #88	; 0x58
 8009f94:	4615      	mov	r5, r2
 8009f96:	461e      	mov	r6, r3
 8009f98:	da0d      	bge.n	8009fb6 <__swhatbuf_r+0x2e>
 8009f9a:	89a3      	ldrh	r3, [r4, #12]
 8009f9c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009fa0:	f04f 0100 	mov.w	r1, #0
 8009fa4:	bf0c      	ite	eq
 8009fa6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009faa:	2340      	movne	r3, #64	; 0x40
 8009fac:	2000      	movs	r0, #0
 8009fae:	6031      	str	r1, [r6, #0]
 8009fb0:	602b      	str	r3, [r5, #0]
 8009fb2:	b016      	add	sp, #88	; 0x58
 8009fb4:	bd70      	pop	{r4, r5, r6, pc}
 8009fb6:	466a      	mov	r2, sp
 8009fb8:	f000 f858 	bl	800a06c <_fstat_r>
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	dbec      	blt.n	8009f9a <__swhatbuf_r+0x12>
 8009fc0:	9901      	ldr	r1, [sp, #4]
 8009fc2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009fc6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009fca:	4259      	negs	r1, r3
 8009fcc:	4159      	adcs	r1, r3
 8009fce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fd2:	e7eb      	b.n	8009fac <__swhatbuf_r+0x24>

08009fd4 <__smakebuf_r>:
 8009fd4:	898b      	ldrh	r3, [r1, #12]
 8009fd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009fd8:	079d      	lsls	r5, r3, #30
 8009fda:	4606      	mov	r6, r0
 8009fdc:	460c      	mov	r4, r1
 8009fde:	d507      	bpl.n	8009ff0 <__smakebuf_r+0x1c>
 8009fe0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009fe4:	6023      	str	r3, [r4, #0]
 8009fe6:	6123      	str	r3, [r4, #16]
 8009fe8:	2301      	movs	r3, #1
 8009fea:	6163      	str	r3, [r4, #20]
 8009fec:	b002      	add	sp, #8
 8009fee:	bd70      	pop	{r4, r5, r6, pc}
 8009ff0:	ab01      	add	r3, sp, #4
 8009ff2:	466a      	mov	r2, sp
 8009ff4:	f7ff ffc8 	bl	8009f88 <__swhatbuf_r>
 8009ff8:	9900      	ldr	r1, [sp, #0]
 8009ffa:	4605      	mov	r5, r0
 8009ffc:	4630      	mov	r0, r6
 8009ffe:	f7ff fa35 	bl	800946c <_malloc_r>
 800a002:	b948      	cbnz	r0, 800a018 <__smakebuf_r+0x44>
 800a004:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a008:	059a      	lsls	r2, r3, #22
 800a00a:	d4ef      	bmi.n	8009fec <__smakebuf_r+0x18>
 800a00c:	f023 0303 	bic.w	r3, r3, #3
 800a010:	f043 0302 	orr.w	r3, r3, #2
 800a014:	81a3      	strh	r3, [r4, #12]
 800a016:	e7e3      	b.n	8009fe0 <__smakebuf_r+0xc>
 800a018:	89a3      	ldrh	r3, [r4, #12]
 800a01a:	6020      	str	r0, [r4, #0]
 800a01c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a020:	81a3      	strh	r3, [r4, #12]
 800a022:	9b00      	ldr	r3, [sp, #0]
 800a024:	6163      	str	r3, [r4, #20]
 800a026:	9b01      	ldr	r3, [sp, #4]
 800a028:	6120      	str	r0, [r4, #16]
 800a02a:	b15b      	cbz	r3, 800a044 <__smakebuf_r+0x70>
 800a02c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a030:	4630      	mov	r0, r6
 800a032:	f000 f82d 	bl	800a090 <_isatty_r>
 800a036:	b128      	cbz	r0, 800a044 <__smakebuf_r+0x70>
 800a038:	89a3      	ldrh	r3, [r4, #12]
 800a03a:	f023 0303 	bic.w	r3, r3, #3
 800a03e:	f043 0301 	orr.w	r3, r3, #1
 800a042:	81a3      	strh	r3, [r4, #12]
 800a044:	89a3      	ldrh	r3, [r4, #12]
 800a046:	431d      	orrs	r5, r3
 800a048:	81a5      	strh	r5, [r4, #12]
 800a04a:	e7cf      	b.n	8009fec <__smakebuf_r+0x18>

0800a04c <_close_r>:
 800a04c:	b538      	push	{r3, r4, r5, lr}
 800a04e:	4d06      	ldr	r5, [pc, #24]	; (800a068 <_close_r+0x1c>)
 800a050:	2300      	movs	r3, #0
 800a052:	4604      	mov	r4, r0
 800a054:	4608      	mov	r0, r1
 800a056:	602b      	str	r3, [r5, #0]
 800a058:	f7f8 ff1f 	bl	8002e9a <_close>
 800a05c:	1c43      	adds	r3, r0, #1
 800a05e:	d102      	bne.n	800a066 <_close_r+0x1a>
 800a060:	682b      	ldr	r3, [r5, #0]
 800a062:	b103      	cbz	r3, 800a066 <_close_r+0x1a>
 800a064:	6023      	str	r3, [r4, #0]
 800a066:	bd38      	pop	{r3, r4, r5, pc}
 800a068:	2000073c 	.word	0x2000073c

0800a06c <_fstat_r>:
 800a06c:	b538      	push	{r3, r4, r5, lr}
 800a06e:	4d07      	ldr	r5, [pc, #28]	; (800a08c <_fstat_r+0x20>)
 800a070:	2300      	movs	r3, #0
 800a072:	4604      	mov	r4, r0
 800a074:	4608      	mov	r0, r1
 800a076:	4611      	mov	r1, r2
 800a078:	602b      	str	r3, [r5, #0]
 800a07a:	f7f8 ff1a 	bl	8002eb2 <_fstat>
 800a07e:	1c43      	adds	r3, r0, #1
 800a080:	d102      	bne.n	800a088 <_fstat_r+0x1c>
 800a082:	682b      	ldr	r3, [r5, #0]
 800a084:	b103      	cbz	r3, 800a088 <_fstat_r+0x1c>
 800a086:	6023      	str	r3, [r4, #0]
 800a088:	bd38      	pop	{r3, r4, r5, pc}
 800a08a:	bf00      	nop
 800a08c:	2000073c 	.word	0x2000073c

0800a090 <_isatty_r>:
 800a090:	b538      	push	{r3, r4, r5, lr}
 800a092:	4d06      	ldr	r5, [pc, #24]	; (800a0ac <_isatty_r+0x1c>)
 800a094:	2300      	movs	r3, #0
 800a096:	4604      	mov	r4, r0
 800a098:	4608      	mov	r0, r1
 800a09a:	602b      	str	r3, [r5, #0]
 800a09c:	f7f8 ff19 	bl	8002ed2 <_isatty>
 800a0a0:	1c43      	adds	r3, r0, #1
 800a0a2:	d102      	bne.n	800a0aa <_isatty_r+0x1a>
 800a0a4:	682b      	ldr	r3, [r5, #0]
 800a0a6:	b103      	cbz	r3, 800a0aa <_isatty_r+0x1a>
 800a0a8:	6023      	str	r3, [r4, #0]
 800a0aa:	bd38      	pop	{r3, r4, r5, pc}
 800a0ac:	2000073c 	.word	0x2000073c

0800a0b0 <_lseek_r>:
 800a0b0:	b538      	push	{r3, r4, r5, lr}
 800a0b2:	4d07      	ldr	r5, [pc, #28]	; (800a0d0 <_lseek_r+0x20>)
 800a0b4:	4604      	mov	r4, r0
 800a0b6:	4608      	mov	r0, r1
 800a0b8:	4611      	mov	r1, r2
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	602a      	str	r2, [r5, #0]
 800a0be:	461a      	mov	r2, r3
 800a0c0:	f7f8 ff12 	bl	8002ee8 <_lseek>
 800a0c4:	1c43      	adds	r3, r0, #1
 800a0c6:	d102      	bne.n	800a0ce <_lseek_r+0x1e>
 800a0c8:	682b      	ldr	r3, [r5, #0]
 800a0ca:	b103      	cbz	r3, 800a0ce <_lseek_r+0x1e>
 800a0cc:	6023      	str	r3, [r4, #0]
 800a0ce:	bd38      	pop	{r3, r4, r5, pc}
 800a0d0:	2000073c 	.word	0x2000073c

0800a0d4 <_read_r>:
 800a0d4:	b538      	push	{r3, r4, r5, lr}
 800a0d6:	4d07      	ldr	r5, [pc, #28]	; (800a0f4 <_read_r+0x20>)
 800a0d8:	4604      	mov	r4, r0
 800a0da:	4608      	mov	r0, r1
 800a0dc:	4611      	mov	r1, r2
 800a0de:	2200      	movs	r2, #0
 800a0e0:	602a      	str	r2, [r5, #0]
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	f7f8 fea0 	bl	8002e28 <_read>
 800a0e8:	1c43      	adds	r3, r0, #1
 800a0ea:	d102      	bne.n	800a0f2 <_read_r+0x1e>
 800a0ec:	682b      	ldr	r3, [r5, #0]
 800a0ee:	b103      	cbz	r3, 800a0f2 <_read_r+0x1e>
 800a0f0:	6023      	str	r3, [r4, #0]
 800a0f2:	bd38      	pop	{r3, r4, r5, pc}
 800a0f4:	2000073c 	.word	0x2000073c

0800a0f8 <_sbrk_r>:
 800a0f8:	b538      	push	{r3, r4, r5, lr}
 800a0fa:	4d06      	ldr	r5, [pc, #24]	; (800a114 <_sbrk_r+0x1c>)
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	4604      	mov	r4, r0
 800a100:	4608      	mov	r0, r1
 800a102:	602b      	str	r3, [r5, #0]
 800a104:	f7f8 fefe 	bl	8002f04 <_sbrk>
 800a108:	1c43      	adds	r3, r0, #1
 800a10a:	d102      	bne.n	800a112 <_sbrk_r+0x1a>
 800a10c:	682b      	ldr	r3, [r5, #0]
 800a10e:	b103      	cbz	r3, 800a112 <_sbrk_r+0x1a>
 800a110:	6023      	str	r3, [r4, #0]
 800a112:	bd38      	pop	{r3, r4, r5, pc}
 800a114:	2000073c 	.word	0x2000073c

0800a118 <_write_r>:
 800a118:	b538      	push	{r3, r4, r5, lr}
 800a11a:	4d07      	ldr	r5, [pc, #28]	; (800a138 <_write_r+0x20>)
 800a11c:	4604      	mov	r4, r0
 800a11e:	4608      	mov	r0, r1
 800a120:	4611      	mov	r1, r2
 800a122:	2200      	movs	r2, #0
 800a124:	602a      	str	r2, [r5, #0]
 800a126:	461a      	mov	r2, r3
 800a128:	f7f8 fe9b 	bl	8002e62 <_write>
 800a12c:	1c43      	adds	r3, r0, #1
 800a12e:	d102      	bne.n	800a136 <_write_r+0x1e>
 800a130:	682b      	ldr	r3, [r5, #0]
 800a132:	b103      	cbz	r3, 800a136 <_write_r+0x1e>
 800a134:	6023      	str	r3, [r4, #0]
 800a136:	bd38      	pop	{r3, r4, r5, pc}
 800a138:	2000073c 	.word	0x2000073c

0800a13c <memcpy>:
 800a13c:	440a      	add	r2, r1
 800a13e:	4291      	cmp	r1, r2
 800a140:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a144:	d100      	bne.n	800a148 <memcpy+0xc>
 800a146:	4770      	bx	lr
 800a148:	b510      	push	{r4, lr}
 800a14a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a14e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a152:	4291      	cmp	r1, r2
 800a154:	d1f9      	bne.n	800a14a <memcpy+0xe>
 800a156:	bd10      	pop	{r4, pc}

0800a158 <__assert_func>:
 800a158:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a15a:	4614      	mov	r4, r2
 800a15c:	461a      	mov	r2, r3
 800a15e:	4b09      	ldr	r3, [pc, #36]	; (800a184 <__assert_func+0x2c>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4605      	mov	r5, r0
 800a164:	68d8      	ldr	r0, [r3, #12]
 800a166:	b14c      	cbz	r4, 800a17c <__assert_func+0x24>
 800a168:	4b07      	ldr	r3, [pc, #28]	; (800a188 <__assert_func+0x30>)
 800a16a:	9100      	str	r1, [sp, #0]
 800a16c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a170:	4906      	ldr	r1, [pc, #24]	; (800a18c <__assert_func+0x34>)
 800a172:	462b      	mov	r3, r5
 800a174:	f000 f882 	bl	800a27c <fiprintf>
 800a178:	f000 f89f 	bl	800a2ba <abort>
 800a17c:	4b04      	ldr	r3, [pc, #16]	; (800a190 <__assert_func+0x38>)
 800a17e:	461c      	mov	r4, r3
 800a180:	e7f3      	b.n	800a16a <__assert_func+0x12>
 800a182:	bf00      	nop
 800a184:	20000090 	.word	0x20000090
 800a188:	0800a6b7 	.word	0x0800a6b7
 800a18c:	0800a6c4 	.word	0x0800a6c4
 800a190:	0800a6f2 	.word	0x0800a6f2

0800a194 <_calloc_r>:
 800a194:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a196:	fba1 2402 	umull	r2, r4, r1, r2
 800a19a:	b94c      	cbnz	r4, 800a1b0 <_calloc_r+0x1c>
 800a19c:	4611      	mov	r1, r2
 800a19e:	9201      	str	r2, [sp, #4]
 800a1a0:	f7ff f964 	bl	800946c <_malloc_r>
 800a1a4:	9a01      	ldr	r2, [sp, #4]
 800a1a6:	4605      	mov	r5, r0
 800a1a8:	b930      	cbnz	r0, 800a1b8 <_calloc_r+0x24>
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	b003      	add	sp, #12
 800a1ae:	bd30      	pop	{r4, r5, pc}
 800a1b0:	220c      	movs	r2, #12
 800a1b2:	6002      	str	r2, [r0, #0]
 800a1b4:	2500      	movs	r5, #0
 800a1b6:	e7f8      	b.n	800a1aa <_calloc_r+0x16>
 800a1b8:	4621      	mov	r1, r4
 800a1ba:	f7fe f935 	bl	8008428 <memset>
 800a1be:	e7f4      	b.n	800a1aa <_calloc_r+0x16>

0800a1c0 <_free_r>:
 800a1c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1c2:	2900      	cmp	r1, #0
 800a1c4:	d044      	beq.n	800a250 <_free_r+0x90>
 800a1c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1ca:	9001      	str	r0, [sp, #4]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	f1a1 0404 	sub.w	r4, r1, #4
 800a1d2:	bfb8      	it	lt
 800a1d4:	18e4      	addlt	r4, r4, r3
 800a1d6:	f7ff fa77 	bl	80096c8 <__malloc_lock>
 800a1da:	4a1e      	ldr	r2, [pc, #120]	; (800a254 <_free_r+0x94>)
 800a1dc:	9801      	ldr	r0, [sp, #4]
 800a1de:	6813      	ldr	r3, [r2, #0]
 800a1e0:	b933      	cbnz	r3, 800a1f0 <_free_r+0x30>
 800a1e2:	6063      	str	r3, [r4, #4]
 800a1e4:	6014      	str	r4, [r2, #0]
 800a1e6:	b003      	add	sp, #12
 800a1e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1ec:	f7ff ba72 	b.w	80096d4 <__malloc_unlock>
 800a1f0:	42a3      	cmp	r3, r4
 800a1f2:	d908      	bls.n	800a206 <_free_r+0x46>
 800a1f4:	6825      	ldr	r5, [r4, #0]
 800a1f6:	1961      	adds	r1, r4, r5
 800a1f8:	428b      	cmp	r3, r1
 800a1fa:	bf01      	itttt	eq
 800a1fc:	6819      	ldreq	r1, [r3, #0]
 800a1fe:	685b      	ldreq	r3, [r3, #4]
 800a200:	1949      	addeq	r1, r1, r5
 800a202:	6021      	streq	r1, [r4, #0]
 800a204:	e7ed      	b.n	800a1e2 <_free_r+0x22>
 800a206:	461a      	mov	r2, r3
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	b10b      	cbz	r3, 800a210 <_free_r+0x50>
 800a20c:	42a3      	cmp	r3, r4
 800a20e:	d9fa      	bls.n	800a206 <_free_r+0x46>
 800a210:	6811      	ldr	r1, [r2, #0]
 800a212:	1855      	adds	r5, r2, r1
 800a214:	42a5      	cmp	r5, r4
 800a216:	d10b      	bne.n	800a230 <_free_r+0x70>
 800a218:	6824      	ldr	r4, [r4, #0]
 800a21a:	4421      	add	r1, r4
 800a21c:	1854      	adds	r4, r2, r1
 800a21e:	42a3      	cmp	r3, r4
 800a220:	6011      	str	r1, [r2, #0]
 800a222:	d1e0      	bne.n	800a1e6 <_free_r+0x26>
 800a224:	681c      	ldr	r4, [r3, #0]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	6053      	str	r3, [r2, #4]
 800a22a:	440c      	add	r4, r1
 800a22c:	6014      	str	r4, [r2, #0]
 800a22e:	e7da      	b.n	800a1e6 <_free_r+0x26>
 800a230:	d902      	bls.n	800a238 <_free_r+0x78>
 800a232:	230c      	movs	r3, #12
 800a234:	6003      	str	r3, [r0, #0]
 800a236:	e7d6      	b.n	800a1e6 <_free_r+0x26>
 800a238:	6825      	ldr	r5, [r4, #0]
 800a23a:	1961      	adds	r1, r4, r5
 800a23c:	428b      	cmp	r3, r1
 800a23e:	bf04      	itt	eq
 800a240:	6819      	ldreq	r1, [r3, #0]
 800a242:	685b      	ldreq	r3, [r3, #4]
 800a244:	6063      	str	r3, [r4, #4]
 800a246:	bf04      	itt	eq
 800a248:	1949      	addeq	r1, r1, r5
 800a24a:	6021      	streq	r1, [r4, #0]
 800a24c:	6054      	str	r4, [r2, #4]
 800a24e:	e7ca      	b.n	800a1e6 <_free_r+0x26>
 800a250:	b003      	add	sp, #12
 800a252:	bd30      	pop	{r4, r5, pc}
 800a254:	20000734 	.word	0x20000734

0800a258 <__ascii_mbtowc>:
 800a258:	b082      	sub	sp, #8
 800a25a:	b901      	cbnz	r1, 800a25e <__ascii_mbtowc+0x6>
 800a25c:	a901      	add	r1, sp, #4
 800a25e:	b142      	cbz	r2, 800a272 <__ascii_mbtowc+0x1a>
 800a260:	b14b      	cbz	r3, 800a276 <__ascii_mbtowc+0x1e>
 800a262:	7813      	ldrb	r3, [r2, #0]
 800a264:	600b      	str	r3, [r1, #0]
 800a266:	7812      	ldrb	r2, [r2, #0]
 800a268:	1e10      	subs	r0, r2, #0
 800a26a:	bf18      	it	ne
 800a26c:	2001      	movne	r0, #1
 800a26e:	b002      	add	sp, #8
 800a270:	4770      	bx	lr
 800a272:	4610      	mov	r0, r2
 800a274:	e7fb      	b.n	800a26e <__ascii_mbtowc+0x16>
 800a276:	f06f 0001 	mvn.w	r0, #1
 800a27a:	e7f8      	b.n	800a26e <__ascii_mbtowc+0x16>

0800a27c <fiprintf>:
 800a27c:	b40e      	push	{r1, r2, r3}
 800a27e:	b503      	push	{r0, r1, lr}
 800a280:	4601      	mov	r1, r0
 800a282:	ab03      	add	r3, sp, #12
 800a284:	4805      	ldr	r0, [pc, #20]	; (800a29c <fiprintf+0x20>)
 800a286:	f853 2b04 	ldr.w	r2, [r3], #4
 800a28a:	6800      	ldr	r0, [r0, #0]
 800a28c:	9301      	str	r3, [sp, #4]
 800a28e:	f7fe ffab 	bl	80091e8 <_vfiprintf_r>
 800a292:	b002      	add	sp, #8
 800a294:	f85d eb04 	ldr.w	lr, [sp], #4
 800a298:	b003      	add	sp, #12
 800a29a:	4770      	bx	lr
 800a29c:	20000090 	.word	0x20000090

0800a2a0 <__ascii_wctomb>:
 800a2a0:	b149      	cbz	r1, 800a2b6 <__ascii_wctomb+0x16>
 800a2a2:	2aff      	cmp	r2, #255	; 0xff
 800a2a4:	bf85      	ittet	hi
 800a2a6:	238a      	movhi	r3, #138	; 0x8a
 800a2a8:	6003      	strhi	r3, [r0, #0]
 800a2aa:	700a      	strbls	r2, [r1, #0]
 800a2ac:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a2b0:	bf98      	it	ls
 800a2b2:	2001      	movls	r0, #1
 800a2b4:	4770      	bx	lr
 800a2b6:	4608      	mov	r0, r1
 800a2b8:	4770      	bx	lr

0800a2ba <abort>:
 800a2ba:	b508      	push	{r3, lr}
 800a2bc:	2006      	movs	r0, #6
 800a2be:	f000 f82b 	bl	800a318 <raise>
 800a2c2:	2001      	movs	r0, #1
 800a2c4:	f7f8 fda6 	bl	8002e14 <_exit>

0800a2c8 <_raise_r>:
 800a2c8:	291f      	cmp	r1, #31
 800a2ca:	b538      	push	{r3, r4, r5, lr}
 800a2cc:	4604      	mov	r4, r0
 800a2ce:	460d      	mov	r5, r1
 800a2d0:	d904      	bls.n	800a2dc <_raise_r+0x14>
 800a2d2:	2316      	movs	r3, #22
 800a2d4:	6003      	str	r3, [r0, #0]
 800a2d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2da:	bd38      	pop	{r3, r4, r5, pc}
 800a2dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a2de:	b112      	cbz	r2, 800a2e6 <_raise_r+0x1e>
 800a2e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a2e4:	b94b      	cbnz	r3, 800a2fa <_raise_r+0x32>
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	f000 f830 	bl	800a34c <_getpid_r>
 800a2ec:	462a      	mov	r2, r5
 800a2ee:	4601      	mov	r1, r0
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2f6:	f000 b817 	b.w	800a328 <_kill_r>
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d00a      	beq.n	800a314 <_raise_r+0x4c>
 800a2fe:	1c59      	adds	r1, r3, #1
 800a300:	d103      	bne.n	800a30a <_raise_r+0x42>
 800a302:	2316      	movs	r3, #22
 800a304:	6003      	str	r3, [r0, #0]
 800a306:	2001      	movs	r0, #1
 800a308:	e7e7      	b.n	800a2da <_raise_r+0x12>
 800a30a:	2400      	movs	r4, #0
 800a30c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a310:	4628      	mov	r0, r5
 800a312:	4798      	blx	r3
 800a314:	2000      	movs	r0, #0
 800a316:	e7e0      	b.n	800a2da <_raise_r+0x12>

0800a318 <raise>:
 800a318:	4b02      	ldr	r3, [pc, #8]	; (800a324 <raise+0xc>)
 800a31a:	4601      	mov	r1, r0
 800a31c:	6818      	ldr	r0, [r3, #0]
 800a31e:	f7ff bfd3 	b.w	800a2c8 <_raise_r>
 800a322:	bf00      	nop
 800a324:	20000090 	.word	0x20000090

0800a328 <_kill_r>:
 800a328:	b538      	push	{r3, r4, r5, lr}
 800a32a:	4d07      	ldr	r5, [pc, #28]	; (800a348 <_kill_r+0x20>)
 800a32c:	2300      	movs	r3, #0
 800a32e:	4604      	mov	r4, r0
 800a330:	4608      	mov	r0, r1
 800a332:	4611      	mov	r1, r2
 800a334:	602b      	str	r3, [r5, #0]
 800a336:	f7f8 fd5d 	bl	8002df4 <_kill>
 800a33a:	1c43      	adds	r3, r0, #1
 800a33c:	d102      	bne.n	800a344 <_kill_r+0x1c>
 800a33e:	682b      	ldr	r3, [r5, #0]
 800a340:	b103      	cbz	r3, 800a344 <_kill_r+0x1c>
 800a342:	6023      	str	r3, [r4, #0]
 800a344:	bd38      	pop	{r3, r4, r5, pc}
 800a346:	bf00      	nop
 800a348:	2000073c 	.word	0x2000073c

0800a34c <_getpid_r>:
 800a34c:	f7f8 bd4a 	b.w	8002de4 <_getpid>

0800a350 <_init>:
 800a350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a352:	bf00      	nop
 800a354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a356:	bc08      	pop	{r3}
 800a358:	469e      	mov	lr, r3
 800a35a:	4770      	bx	lr

0800a35c <_fini>:
 800a35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a35e:	bf00      	nop
 800a360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a362:	bc08      	pop	{r3}
 800a364:	469e      	mov	lr, r3
 800a366:	4770      	bx	lr
