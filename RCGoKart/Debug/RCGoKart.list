
RCGoKart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076f8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080078c8  080078c8  000178c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800791c  0800791c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800791c  0800791c  0001791c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007924  08007924  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007924  08007924  00017924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007928  08007928  00017928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800792c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000564  20000068  08007994  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005cc  08007994  000205cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000086  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000146c7  00000000  00000000  0002011e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029b0  00000000  00000000  000347e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a8  00000000  00000000  00037198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f89  00000000  00000000  00038540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000254d8  00000000  00000000  000394c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017b0e  00000000  00000000  0005e9a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7b8f  00000000  00000000  000764af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c0c  00000000  00000000  0015e040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00163c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080078b0 	.word	0x080078b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	080078b0 	.word	0x080078b0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <HAL_TIM_IC_CaptureCallback>:

uint32_t ICValue = 0;
uint32_t Frequency = 0;
float Duty = 0;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // If the interrupt is triggered by channel 1
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	7f1b      	ldrb	r3, [r3, #28]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d124      	bne.n	8000606 <HAL_TIM_IC_CaptureCallback+0x5a>
	{
		// Read the IC value
		ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80005bc:	2100      	movs	r1, #0
 80005be:	6878      	ldr	r0, [r7, #4]
 80005c0:	f005 f8b8 	bl	8005734 <HAL_TIM_ReadCapturedValue>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4a12      	ldr	r2, [pc, #72]	; (8000610 <HAL_TIM_IC_CaptureCallback+0x64>)
 80005c8:	6013      	str	r3, [r2, #0]

		if (ICValue != 0)
 80005ca:	4b11      	ldr	r3, [pc, #68]	; (8000610 <HAL_TIM_IC_CaptureCallback+0x64>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d019      	beq.n	8000606 <HAL_TIM_IC_CaptureCallback+0x5a>
		{
			// calculate the Duty Cycle
			Duty = (HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) *100)/ICValue;
 80005d2:	2104      	movs	r1, #4
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f005 f8ad 	bl	8005734 <HAL_TIM_ReadCapturedValue>
 80005da:	4603      	mov	r3, r0
 80005dc:	2264      	movs	r2, #100	; 0x64
 80005de:	fb03 f202 	mul.w	r2, r3, r2
 80005e2:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <HAL_TIM_IC_CaptureCallback+0x64>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ea:	ee07 3a90 	vmov	s15, r3
 80005ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005f2:	4b08      	ldr	r3, [pc, #32]	; (8000614 <HAL_TIM_IC_CaptureCallback+0x68>)
 80005f4:	edc3 7a00 	vstr	s15, [r3]

			Frequency = 90000000/ICValue;
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <HAL_TIM_IC_CaptureCallback+0x64>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a06      	ldr	r2, [pc, #24]	; (8000618 <HAL_TIM_IC_CaptureCallback+0x6c>)
 80005fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000602:	4a06      	ldr	r2, [pc, #24]	; (800061c <HAL_TIM_IC_CaptureCallback+0x70>)
 8000604:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000460 	.word	0x20000460
 8000614:	20000468 	.word	0x20000468
 8000618:	055d4a80 	.word	0x055d4a80
 800061c:	20000464 	.word	0x20000464

08000620 <drivingInput>:
		min = rawSteeringInput;
	}
	return (float)(rawSteeringInput-min)/(max-min);
}

float drivingInput(uint32_t rawDrivingInput){
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	return ((rawDrivingInput-90355)/53548);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f5a3 33b0 	sub.w	r3, r3, #90112	; 0x16000
 800062e:	3bf3      	subs	r3, #243	; 0xf3
 8000630:	4a07      	ldr	r2, [pc, #28]	; (8000650 <drivingInput+0x30>)
 8000632:	fba2 2303 	umull	r2, r3, r2, r3
 8000636:	0b5b      	lsrs	r3, r3, #13
 8000638:	ee07 3a90 	vmov	s15, r3
 800063c:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8000640:	eeb0 0a67 	vmov.f32	s0, s15
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	2729f99d 	.word	0x2729f99d

08000654 <getPIDPower>:

float getPIDPower(float currentPosition, float requestPosition, int cycleTime){
 8000654:	b480      	push	{r7}
 8000656:	b087      	sub	sp, #28
 8000658:	af00      	add	r7, sp, #0
 800065a:	ed87 0a03 	vstr	s0, [r7, #12]
 800065e:	edc7 0a02 	vstr	s1, [r7, #8]
 8000662:	6078      	str	r0, [r7, #4]
	float error = requestPosition - currentPosition;
 8000664:	ed97 7a02 	vldr	s14, [r7, #8]
 8000668:	edd7 7a03 	vldr	s15, [r7, #12]
 800066c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000670:	edc7 7a05 	vstr	s15, [r7, #20]
	integral = integral + (error * cycleTime);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	ee07 3a90 	vmov	s15, r3
 800067a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800067e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000682:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000686:	4b23      	ldr	r3, [pc, #140]	; (8000714 <getPIDPower+0xc0>)
 8000688:	edd3 7a00 	vldr	s15, [r3]
 800068c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000690:	4b20      	ldr	r3, [pc, #128]	; (8000714 <getPIDPower+0xc0>)
 8000692:	edc3 7a00 	vstr	s15, [r3]
	float derivative = (error-pastError)/cycleTime;
 8000696:	4b20      	ldr	r3, [pc, #128]	; (8000718 <getPIDPower+0xc4>)
 8000698:	edd3 7a00 	vldr	s15, [r3]
 800069c:	ed97 7a05 	vldr	s14, [r7, #20]
 80006a0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	ee07 3a90 	vmov	s15, r3
 80006aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006b2:	edc7 7a04 	vstr	s15, [r7, #16]
//	return absMax(kP*error+kI*integral+kD*derivative, (float)1.0);
	encoder = kP*error+kI*integral+kD*derivative;
 80006b6:	eddf 7a19 	vldr	s15, [pc, #100]	; 800071c <getPIDPower+0xc8>
 80006ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006be:	edd7 7a05 	vldr	s15, [r7, #20]
 80006c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80006c6:	eddf 7a15 	vldr	s15, [pc, #84]	; 800071c <getPIDPower+0xc8>
 80006ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <getPIDPower+0xc0>)
 80006d0:	edd3 7a00 	vldr	s15, [r3]
 80006d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80006d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80006dc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800071c <getPIDPower+0xc8>
 80006e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80006e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80006e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80006ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006f4:	ee17 2a90 	vmov	r2, s15
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <getPIDPower+0xcc>)
 80006fa:	601a      	str	r2, [r3, #0]
	return 0.5;
 80006fc:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8000700:	ee07 3a90 	vmov	s15, r3
}
 8000704:	eeb0 0a67 	vmov.f32	s0, s15
 8000708:	371c      	adds	r7, #28
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	20000458 	.word	0x20000458
 8000718:	20000454 	.word	0x20000454
 800071c:	00000000 	.word	0x00000000
 8000720:	2000046c 	.word	0x2000046c

08000724 <getEncoderAngle>:

float getEncoderAngle(){
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
	return (((360*(TIM3->CCR1-kSteeringEncoderMin))/kSteeringEncoderRange)+kOffset)%360;
 8000728:	4b10      	ldr	r3, [pc, #64]	; (800076c <getEncoderAngle+0x48>)
 800072a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800072c:	f24a 22e4 	movw	r2, #41700	; 0xa2e4
 8000730:	1a9b      	subs	r3, r3, r2
 8000732:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000736:	fb02 f303 	mul.w	r3, r2, r3
 800073a:	4a0d      	ldr	r2, [pc, #52]	; (8000770 <getEncoderAngle+0x4c>)
 800073c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000740:	2200      	movs	r2, #0
 8000742:	441a      	add	r2, r3
 8000744:	08d3      	lsrs	r3, r2, #3
 8000746:	490b      	ldr	r1, [pc, #44]	; (8000774 <getEncoderAngle+0x50>)
 8000748:	fba1 1303 	umull	r1, r3, r1, r3
 800074c:	089b      	lsrs	r3, r3, #2
 800074e:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8000752:	fb01 f303 	mul.w	r3, r1, r3
 8000756:	1ad3      	subs	r3, r2, r3
 8000758:	ee07 3a90 	vmov	s15, r3
 800075c:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8000760:	eeb0 0a67 	vmov.f32	s0, s15
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	40000400 	.word	0x40000400
 8000770:	0001688c 	.word	0x0001688c
 8000774:	16c16c17 	.word	0x16c16c17

08000778 <rawSteeringToAngle>:

float rawSteeringToAngle(uint32_t steeringInput){
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	return ((360*(steeringInput-90355)/53548)+180)%360;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000786:	fb03 f202 	mul.w	r2, r3, r2
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <rawSteeringToAngle+0x4c>)
 800078c:	4413      	add	r3, r2
 800078e:	4a0e      	ldr	r2, [pc, #56]	; (80007c8 <rawSteeringToAngle+0x50>)
 8000790:	fba2 2303 	umull	r2, r3, r2, r3
 8000794:	0b5b      	lsrs	r3, r3, #13
 8000796:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 800079a:	08d3      	lsrs	r3, r2, #3
 800079c:	490b      	ldr	r1, [pc, #44]	; (80007cc <rawSteeringToAngle+0x54>)
 800079e:	fba1 1303 	umull	r1, r3, r1, r3
 80007a2:	089b      	lsrs	r3, r3, #2
 80007a4:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80007a8:	fb01 f303 	mul.w	r3, r1, r3
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	ee07 3a90 	vmov	s15, r3
 80007b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 80007b6:	eeb0 0a67 	vmov.f32	s0, s15
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	fe0faa48 	.word	0xfe0faa48
 80007c8:	2729f99d 	.word	0x2729f99d
 80007cc:	16c16c17 	.word	0x16c16c17

080007d0 <setSteeringMotor>:

/**
 * Sets the steering motors power
 * @power value from -1.0 to 1.0
 */
void setSteeringMotor(float power){//+-1.0
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	ed87 0a01 	vstr	s0, [r7, #4]
	short int out = (((power)+1)/2)*180;//Converts the range -1 to 1, to 0 to 1800
 80007da:	edd7 7a01 	vldr	s15, [r7, #4]
 80007de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80007e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80007e6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80007ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007ee:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000814 <setSteeringMotor+0x44>
 80007f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007fa:	ee17 3a90 	vmov	r3, s15
 80007fe:	81fb      	strh	r3, [r7, #14]
	TIM10->CCR1 = out;
 8000800:	4a05      	ldr	r2, [pc, #20]	; (8000818 <setSteeringMotor+0x48>)
 8000802:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000806:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000808:	bf00      	nop
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	43340000 	.word	0x43340000
 8000818:	40014400 	.word	0x40014400

0800081c <setDrivingMotor>:

/**
 * Sets the driving motors power
 * @power value from 0 to 1.0
 */
void setDrivingMotor(float power){//0 to 1.0
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	ed87 0a01 	vstr	s0, [r7, #4]
	short int out = (((power)+1)/2)*1800;//Converts the range -1 to 1, to 0 to 1800
 8000826:	edd7 7a01 	vldr	s15, [r7, #4]
 800082a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800082e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000832:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000836:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800083a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800087c <setDrivingMotor+0x60>
 800083e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000842:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000846:	ee17 3a90 	vmov	r3, s15
 800084a:	81fb      	strh	r3, [r7, #14]
	TIM11->CCR1 = out*maxSpeed;
 800084c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000850:	ee07 3a90 	vmov	s15, r3
 8000854:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <setDrivingMotor+0x64>)
 800085a:	edd3 7a00 	vldr	s15, [r3]
 800085e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <setDrivingMotor+0x68>)
 8000864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000868:	ee17 2a90 	vmov	r2, s15
 800086c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800086e:	bf00      	nop
 8000870:	3714      	adds	r7, #20
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	44e10000 	.word	0x44e10000
 8000880:	2000045c 	.word	0x2000045c
 8000884:	40014800 	.word	0x40014800

08000888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	ed2d 8b02 	vpush	{d8}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000892:	f001 fcf5 	bl	8002280 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint32_t steeringRequest;
  uint32_t drivingRequest;
  uint8_t debug = true;
 8000896:	2301      	movs	r3, #1
 8000898:	73fb      	strb	r3, [r7, #15]
  uint8_t pwmOutMax = 1800;
 800089a:	2308      	movs	r3, #8
 800089c:	73bb      	strb	r3, [r7, #14]
  uint16_t pwmBottomState = 5000;
 800089e:	f241 3388 	movw	r3, #5000	; 0x1388
 80008a2:	81bb      	strh	r3, [r7, #12]
  uint16_t pwmLowState = 25000;
 80008a4:	f246 13a8 	movw	r3, #25000	; 0x61a8
 80008a8:	817b      	strh	r3, [r7, #10]
  uint16_t pwmHighState = 45000;
 80008aa:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 80008ae:	813b      	strh	r3, [r7, #8]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b0:	f000 f8f4 	bl	8000a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b4:	f000 ffa0 	bl	80017f8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80008b8:	f000 f966 	bl	8000b88 <MX_ADC1_Init>
  MX_TIM1_Init();
 80008bc:	f000 fa48 	bl	8000d50 <MX_TIM1_Init>
  MX_TIM2_Init();
 80008c0:	f000 faca 	bl	8000e58 <MX_TIM2_Init>
  MX_TIM3_Init();
 80008c4:	f000 fb48 	bl	8000f58 <MX_TIM3_Init>
  MX_TIM4_Init();
 80008c8:	f000 fbe4 	bl	8001094 <MX_TIM4_Init>
  MX_TIM5_Init();
 80008cc:	f000 fc80 	bl	80011d0 <MX_TIM5_Init>
  MX_TIM8_Init();
 80008d0:	f000 fd1c 	bl	800130c <MX_TIM8_Init>
  MX_TIM9_Init();
 80008d4:	f000 fdba 	bl	800144c <MX_TIM9_Init>
  MX_TIM10_Init();
 80008d8:	f000 fe40 	bl	800155c <MX_TIM10_Init>
  MX_TIM11_Init();
 80008dc:	f000 fe8c 	bl	80015f8 <MX_TIM11_Init>
  MX_TIM12_Init();
 80008e0:	f000 fed8 	bl	8001694 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80008e4:	f000 ff5e 	bl	80017a4 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80008e8:	f000 f9ce 	bl	8000c88 <MX_RTC_Init>
  MX_I2C2_Init();
 80008ec:	f000 f99e 	bl	8000c2c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  //Starts HAL timing for input capture
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80008f0:	2100      	movs	r1, #0
 80008f2:	4858      	ldr	r0, [pc, #352]	; (8000a54 <main+0x1cc>)
 80008f4:	f004 fa86 	bl	8004e04 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 80008f8:	2104      	movs	r1, #4
 80008fa:	4856      	ldr	r0, [pc, #344]	; (8000a54 <main+0x1cc>)
 80008fc:	f004 f9a6 	bl	8004c4c <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000900:	2100      	movs	r1, #0
 8000902:	4855      	ldr	r0, [pc, #340]	; (8000a58 <main+0x1d0>)
 8000904:	f004 fa7e 	bl	8004e04 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8000908:	2104      	movs	r1, #4
 800090a:	4853      	ldr	r0, [pc, #332]	; (8000a58 <main+0x1d0>)
 800090c:	f004 f99e 	bl	8004c4c <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000910:	2100      	movs	r1, #0
 8000912:	4852      	ldr	r0, [pc, #328]	; (8000a5c <main+0x1d4>)
 8000914:	f004 fa76 	bl	8004e04 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 8000918:	2104      	movs	r1, #4
 800091a:	4850      	ldr	r0, [pc, #320]	; (8000a5c <main+0x1d4>)
 800091c:	f004 f996 	bl	8004c4c <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000920:	2100      	movs	r1, #0
 8000922:	484f      	ldr	r0, [pc, #316]	; (8000a60 <main+0x1d8>)
 8000924:	f004 fa6e 	bl	8004e04 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2);
 8000928:	2104      	movs	r1, #4
 800092a:	484d      	ldr	r0, [pc, #308]	; (8000a60 <main+0x1d8>)
 800092c:	f004 f98e 	bl	8004c4c <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8000930:	2100      	movs	r1, #0
 8000932:	484c      	ldr	r0, [pc, #304]	; (8000a64 <main+0x1dc>)
 8000934:	f004 fa66 	bl	8004e04 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 8000938:	2104      	movs	r1, #4
 800093a:	484a      	ldr	r0, [pc, #296]	; (8000a64 <main+0x1dc>)
 800093c:	f004 f986 	bl	8004c4c <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_1);
 8000940:	2100      	movs	r1, #0
 8000942:	4849      	ldr	r0, [pc, #292]	; (8000a68 <main+0x1e0>)
 8000944:	f004 fa5e 	bl	8004e04 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_2);
 8000948:	2104      	movs	r1, #4
 800094a:	4847      	ldr	r0, [pc, #284]	; (8000a68 <main+0x1e0>)
 800094c:	f004 f97e 	bl	8004c4c <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim9, TIM_CHANNEL_1);
 8000950:	2100      	movs	r1, #0
 8000952:	4846      	ldr	r0, [pc, #280]	; (8000a6c <main+0x1e4>)
 8000954:	f004 fa56 	bl	8004e04 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim9, TIM_CHANNEL_2);
 8000958:	2104      	movs	r1, #4
 800095a:	4844      	ldr	r0, [pc, #272]	; (8000a6c <main+0x1e4>)
 800095c:	f004 f976 	bl	8004c4c <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim12, TIM_CHANNEL_1);
 8000960:	2100      	movs	r1, #0
 8000962:	4843      	ldr	r0, [pc, #268]	; (8000a70 <main+0x1e8>)
 8000964:	f004 fa4e 	bl	8004e04 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim12, TIM_CHANNEL_2);
 8000968:	2104      	movs	r1, #4
 800096a:	4841      	ldr	r0, [pc, #260]	; (8000a70 <main+0x1e8>)
 800096c:	f004 f96e 	bl	8004c4c <HAL_TIM_IC_Start>

  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8000970:	2100      	movs	r1, #0
 8000972:	4840      	ldr	r0, [pc, #256]	; (8000a74 <main+0x1ec>)
 8000974:	f004 f852 	bl	8004a1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8000978:	2100      	movs	r1, #0
 800097a:	483f      	ldr	r0, [pc, #252]	; (8000a78 <main+0x1f0>)
 800097c:	f004 f84e 	bl	8004a1c <HAL_TIM_PWM_Start>
  TIM10->CCR1 = 450; //Sets the PWM output of tim1 channel 1 to 450
 8000980:	4b3e      	ldr	r3, [pc, #248]	; (8000a7c <main+0x1f4>)
 8000982:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8000986:	635a      	str	r2, [r3, #52]	; 0x34
  TIM11->CCR1 = 0; //Sets the PWM output of tim1 channel 1 to 450
 8000988:	4b3d      	ldr	r3, [pc, #244]	; (8000a80 <main+0x1f8>)
 800098a:	2200      	movs	r2, #0
 800098c:	635a      	str	r2, [r3, #52]	; 0x34

    /* USER CODE BEGIN 3 */
	  //DEBUG
	  if(true){
		  //UART printing
		  printf("%lu0a\n", TIM4->CCR2);
 800098e:	4b3d      	ldr	r3, [pc, #244]	; (8000a84 <main+0x1fc>)
 8000990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000992:	4619      	mov	r1, r3
 8000994:	483c      	ldr	r0, [pc, #240]	; (8000a88 <main+0x200>)
 8000996:	f006 f919 	bl	8006bcc <iprintf>
//		  printf("%lu0a\n", TIM1->CCR2);
//		  printf("%lu0a\n", steeringInput(TIM2->CCR2));
	  }
	  //E-STOP
	  if(TIM4->CCR2>pwmLowState){//Checking if E-Stop is switched to the high state, forces user on RC controller to switch the e-stop switch to start it
 800099a:	4b3a      	ldr	r3, [pc, #232]	; (8000a84 <main+0x1fc>)
 800099c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800099e:	897b      	ldrh	r3, [r7, #10]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d952      	bls.n	8000a4a <main+0x1c2>
		  //State management
		  if(TIM1->CCR2<pwmBottomState){//Switch to RC mode, middle switch state
 80009a4:	4b39      	ldr	r3, [pc, #228]	; (8000a8c <main+0x204>)
 80009a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009a8:	89bb      	ldrh	r3, [r7, #12]
 80009aa:	429a      	cmp	r2, r3
 80009ac:	d23e      	bcs.n	8000a2c <main+0x1a4>
			  steeringRequest = TIM2->CCR2;//Sets curVal to the timer counts per period(PWM signal)
 80009ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009b4:	607b      	str	r3, [r7, #4]
			  drivingRequest = TIM5->CCR2;
 80009b6:	4b36      	ldr	r3, [pc, #216]	; (8000a90 <main+0x208>)
 80009b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009ba:	603b      	str	r3, [r7, #0]
			  //PID:
			  if(true){//Switch from PID to raw steering control
				  a= getEncoderAngle();
 80009bc:	f7ff feb2 	bl	8000724 <getEncoderAngle>
 80009c0:	eef0 7a40 	vmov.f32	s15, s0
 80009c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009c8:	ee17 2a90 	vmov	r2, s15
 80009cc:	4b31      	ldr	r3, [pc, #196]	; (8000a94 <main+0x20c>)
 80009ce:	601a      	str	r2, [r3, #0]
				  b = rawSteeringToAngle(steeringRequest);
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f7ff fed1 	bl	8000778 <rawSteeringToAngle>
 80009d6:	eef0 7a40 	vmov.f32	s15, s0
 80009da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009de:	ee17 2a90 	vmov	r2, s15
 80009e2:	4b2d      	ldr	r3, [pc, #180]	; (8000a98 <main+0x210>)
 80009e4:	601a      	str	r2, [r3, #0]
				  setSteeringMotor(getPIDPower(getEncoderAngle(), rawSteeringToAngle(steeringRequest), 10));
 80009e6:	f7ff fe9d 	bl	8000724 <getEncoderAngle>
 80009ea:	eeb0 8a40 	vmov.f32	s16, s0
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f7ff fec2 	bl	8000778 <rawSteeringToAngle>
 80009f4:	eef0 7a40 	vmov.f32	s15, s0
 80009f8:	200a      	movs	r0, #10
 80009fa:	eef0 0a67 	vmov.f32	s1, s15
 80009fe:	eeb0 0a48 	vmov.f32	s0, s16
 8000a02:	f7ff fe27 	bl	8000654 <getPIDPower>
 8000a06:	eef0 7a40 	vmov.f32	s15, s0
 8000a0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000a0e:	f7ff fedf 	bl	80007d0 <setSteeringMotor>
				  setDrivingMotor(drivingInput(drivingRequest));
 8000a12:	6838      	ldr	r0, [r7, #0]
 8000a14:	f7ff fe04 	bl	8000620 <drivingInput>
 8000a18:	eef0 7a40 	vmov.f32	s15, s0
 8000a1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a20:	f7ff fefc 	bl	800081c <setDrivingMotor>
				  y = TIM3->CCR2;
				  setSteeringMotor(steeringInput(steeringRequest));//Sets the PWM output to the converted PWM input
				  setDrivingMotor(drivingInput(drivingRequest));
			  }

			  HAL_Delay(10);//For faster response decrease delay
 8000a24:	200a      	movs	r0, #10
 8000a26:	f001 fc9d 	bl	8002364 <HAL_Delay>
 8000a2a:	e7b0      	b.n	800098e <main+0x106>
		  }
		  else if(TIM1->CCR2>pwmHighState){//Switch to auto mode, high switch state
 8000a2c:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <main+0x204>)
 8000a2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a30:	893b      	ldrh	r3, [r7, #8]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d904      	bls.n	8000a40 <main+0x1b8>
			  setSteeringMotor(0.5);
 8000a36:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8000a3a:	f7ff fec9 	bl	80007d0 <setSteeringMotor>
 8000a3e:	e7a6      	b.n	800098e <main+0x106>
			  //auto code
		  }
		  else{
			  //off state, low switch state
			  setSteeringMotor(0.5);
 8000a40:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8000a44:	f7ff fec4 	bl	80007d0 <setSteeringMotor>
 8000a48:	e7a1      	b.n	800098e <main+0x106>
		  }
	  }
	  else{
//		  TIM10->CCR2 = pwmOutMax/2;//Sets steering motor power to 0
//		  setSteeringMotor(0);
		  setSteeringMotor(0.5);
 8000a4a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8000a4e:	f7ff febf 	bl	80007d0 <setSteeringMotor>
	  if(true){
 8000a52:	e79c      	b.n	800098e <main+0x106>
 8000a54:	20000140 	.word	0x20000140
 8000a58:	20000188 	.word	0x20000188
 8000a5c:	200001d0 	.word	0x200001d0
 8000a60:	20000218 	.word	0x20000218
 8000a64:	20000260 	.word	0x20000260
 8000a68:	200002a8 	.word	0x200002a8
 8000a6c:	200002f0 	.word	0x200002f0
 8000a70:	200003c8 	.word	0x200003c8
 8000a74:	20000338 	.word	0x20000338
 8000a78:	20000380 	.word	0x20000380
 8000a7c:	40014400 	.word	0x40014400
 8000a80:	40014800 	.word	0x40014800
 8000a84:	40000800 	.word	0x40000800
 8000a88:	080078c8 	.word	0x080078c8
 8000a8c:	40010000 	.word	0x40010000
 8000a90:	40000c00 	.word	0x40000c00
 8000a94:	20000470 	.word	0x20000470
 8000a98:	20000474 	.word	0x20000474

08000a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b094      	sub	sp, #80	; 0x50
 8000aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	2234      	movs	r2, #52	; 0x34
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f006 f8a0 	bl	8006bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab0:	f107 0308 	add.w	r3, r7, #8
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <SystemClock_Config+0xe4>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac8:	4a2d      	ldr	r2, [pc, #180]	; (8000b80 <SystemClock_Config+0xe4>)
 8000aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ace:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad0:	4b2b      	ldr	r3, [pc, #172]	; (8000b80 <SystemClock_Config+0xe4>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000adc:	2300      	movs	r3, #0
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	4b28      	ldr	r3, [pc, #160]	; (8000b84 <SystemClock_Config+0xe8>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a27      	ldr	r2, [pc, #156]	; (8000b84 <SystemClock_Config+0xe8>)
 8000ae6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000aea:	6013      	str	r3, [r2, #0]
 8000aec:	4b25      	ldr	r3, [pc, #148]	; (8000b84 <SystemClock_Config+0xe8>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000af8:	2309      	movs	r3, #9
 8000afa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000afc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b00:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b02:	2301      	movs	r3, #1
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b06:	2301      	movs	r3, #1
 8000b08:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b14:	2304      	movs	r3, #4
 8000b16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000b18:	23b4      	movs	r3, #180	; 0xb4
 8000b1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b20:	2302      	movs	r3, #2
 8000b22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b24:	2302      	movs	r3, #2
 8000b26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f003 f95d 	bl	8003dec <HAL_RCC_OscConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000b38:	f000 feca 	bl	80018d0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b3c:	f002 fa92 	bl	8003064 <HAL_PWREx_EnableOverDrive>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b46:	f000 fec3 	bl	80018d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4a:	230f      	movs	r3, #15
 8000b4c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b56:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000b5c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b60:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b62:	f107 0308 	add.w	r3, r7, #8
 8000b66:	2105      	movs	r1, #5
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f002 facb 	bl	8003104 <HAL_RCC_ClockConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000b74:	f000 feac 	bl	80018d0 <Error_Handler>
  }
}
 8000b78:	bf00      	nop
 8000b7a:	3750      	adds	r7, #80	; 0x50
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40007000 	.word	0x40007000

08000b88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b8e:	463b      	mov	r3, r7
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b9a:	4b21      	ldr	r3, [pc, #132]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000b9c:	4a21      	ldr	r2, [pc, #132]	; (8000c24 <MX_ADC1_Init+0x9c>)
 8000b9e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ba0:	4b1f      	ldr	r3, [pc, #124]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ba6:	4b1e      	ldr	r3, [pc, #120]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000bac:	4b1c      	ldr	r3, [pc, #112]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bb2:	4b1b      	ldr	r3, [pc, #108]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bb8:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bc0:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bc6:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000bc8:	4a17      	ldr	r2, [pc, #92]	; (8000c28 <MX_ADC1_Init+0xa0>)
 8000bca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bcc:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bd2:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bd8:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000be6:	480e      	ldr	r0, [pc, #56]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000be8:	f001 fbe0 	bl	80023ac <HAL_ADC_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000bf2:	f000 fe6d 	bl	80018d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000bf6:	2304      	movs	r3, #4
 8000bf8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c02:	463b      	mov	r3, r7
 8000c04:	4619      	mov	r1, r3
 8000c06:	4806      	ldr	r0, [pc, #24]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000c08:	f001 fc14 	bl	8002434 <HAL_ADC_ConfigChannel>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000c12:	f000 fe5d 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000084 	.word	0x20000084
 8000c24:	40012000 	.word	0x40012000
 8000c28:	0f000001 	.word	0x0f000001

08000c2c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <MX_I2C2_Init+0x50>)
 8000c32:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <MX_I2C2_Init+0x54>)
 8000c34:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <MX_I2C2_Init+0x50>)
 8000c38:	4a12      	ldr	r2, [pc, #72]	; (8000c84 <MX_I2C2_Init+0x58>)
 8000c3a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <MX_I2C2_Init+0x50>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_I2C2_Init+0x50>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MX_I2C2_Init+0x50>)
 8000c4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c4e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c50:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <MX_I2C2_Init+0x50>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_I2C2_Init+0x50>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c5c:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <MX_I2C2_Init+0x50>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_I2C2_Init+0x50>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c68:	4804      	ldr	r0, [pc, #16]	; (8000c7c <MX_I2C2_Init+0x50>)
 8000c6a:	f002 f8b7 	bl	8002ddc <HAL_I2C_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c74:	f000 fe2c 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	200000cc 	.word	0x200000cc
 8000c80:	40005800 	.word	0x40005800
 8000c84:	000186a0 	.word	0x000186a0

08000c88 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ca0:	4b29      	ldr	r3, [pc, #164]	; (8000d48 <MX_RTC_Init+0xc0>)
 8000ca2:	4a2a      	ldr	r2, [pc, #168]	; (8000d4c <MX_RTC_Init+0xc4>)
 8000ca4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ca6:	4b28      	ldr	r3, [pc, #160]	; (8000d48 <MX_RTC_Init+0xc0>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000cac:	4b26      	ldr	r3, [pc, #152]	; (8000d48 <MX_RTC_Init+0xc0>)
 8000cae:	227f      	movs	r2, #127	; 0x7f
 8000cb0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000cb2:	4b25      	ldr	r3, [pc, #148]	; (8000d48 <MX_RTC_Init+0xc0>)
 8000cb4:	22ff      	movs	r2, #255	; 0xff
 8000cb6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000cb8:	4b23      	ldr	r3, [pc, #140]	; (8000d48 <MX_RTC_Init+0xc0>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000cbe:	4b22      	ldr	r3, [pc, #136]	; (8000d48 <MX_RTC_Init+0xc0>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000cc4:	4b20      	ldr	r3, [pc, #128]	; (8000d48 <MX_RTC_Init+0xc0>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000cca:	481f      	ldr	r0, [pc, #124]	; (8000d48 <MX_RTC_Init+0xc0>)
 8000ccc:	f003 fb2c 	bl	8004328 <HAL_RTC_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000cd6:	f000 fdfb 	bl	80018d0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4814      	ldr	r0, [pc, #80]	; (8000d48 <MX_RTC_Init+0xc0>)
 8000cf6:	f003 fb8d 	bl	8004414 <HAL_RTC_SetTime>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000d00:	f000 fde6 	bl	80018d0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d04:	2301      	movs	r3, #1
 8000d06:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000d14:	463b      	mov	r3, r7
 8000d16:	2201      	movs	r2, #1
 8000d18:	4619      	mov	r1, r3
 8000d1a:	480b      	ldr	r0, [pc, #44]	; (8000d48 <MX_RTC_Init+0xc0>)
 8000d1c:	f003 fc14 	bl	8004548 <HAL_RTC_SetDate>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000d26:	f000 fdd3 	bl	80018d0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4806      	ldr	r0, [pc, #24]	; (8000d48 <MX_RTC_Init+0xc0>)
 8000d30:	f003 fd2f 	bl	8004792 <HAL_RTCEx_SetWakeUpTimer>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 8000d3a:	f000 fdc9 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000120 	.word	0x20000120
 8000d4c:	40002800 	.word	0x40002800

08000d50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08c      	sub	sp, #48	; 0x30
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000d56:	f107 031c 	add.w	r3, r7, #28
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
 8000d64:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d66:	f107 030c 	add.w	r3, r7, #12
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d7c:	4b34      	ldr	r3, [pc, #208]	; (8000e50 <MX_TIM1_Init+0x100>)
 8000d7e:	4a35      	ldr	r2, [pc, #212]	; (8000e54 <MX_TIM1_Init+0x104>)
 8000d80:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d82:	4b33      	ldr	r3, [pc, #204]	; (8000e50 <MX_TIM1_Init+0x100>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d88:	4b31      	ldr	r3, [pc, #196]	; (8000e50 <MX_TIM1_Init+0x100>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d8e:	4b30      	ldr	r3, [pc, #192]	; (8000e50 <MX_TIM1_Init+0x100>)
 8000d90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d94:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d96:	4b2e      	ldr	r3, [pc, #184]	; (8000e50 <MX_TIM1_Init+0x100>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d9c:	4b2c      	ldr	r3, [pc, #176]	; (8000e50 <MX_TIM1_Init+0x100>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da2:	4b2b      	ldr	r3, [pc, #172]	; (8000e50 <MX_TIM1_Init+0x100>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000da8:	4829      	ldr	r0, [pc, #164]	; (8000e50 <MX_TIM1_Init+0x100>)
 8000daa:	f003 feff 	bl	8004bac <HAL_TIM_IC_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000db4:	f000 fd8c 	bl	80018d0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000db8:	2304      	movs	r3, #4
 8000dba:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000dbc:	2350      	movs	r3, #80	; 0x50
 8000dbe:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000dcc:	f107 031c 	add.w	r3, r7, #28
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	481f      	ldr	r0, [pc, #124]	; (8000e50 <MX_TIM1_Init+0x100>)
 8000dd4:	f004 fc6b 	bl	80056ae <HAL_TIM_SlaveConfigSynchro>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000dde:	f000 fd77 	bl	80018d0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000de6:	2301      	movs	r3, #1
 8000de8:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000df2:	f107 030c 	add.w	r3, r7, #12
 8000df6:	2200      	movs	r2, #0
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4815      	ldr	r0, [pc, #84]	; (8000e50 <MX_TIM1_Init+0x100>)
 8000dfc:	f004 fa32 	bl	8005264 <HAL_TIM_IC_ConfigChannel>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8000e06:	f000 fd63 	bl	80018d0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000e12:	f107 030c 	add.w	r3, r7, #12
 8000e16:	2204      	movs	r2, #4
 8000e18:	4619      	mov	r1, r3
 8000e1a:	480d      	ldr	r0, [pc, #52]	; (8000e50 <MX_TIM1_Init+0x100>)
 8000e1c:	f004 fa22 	bl	8005264 <HAL_TIM_IC_ConfigChannel>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8000e26:	f000 fd53 	bl	80018d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	4619      	mov	r1, r3
 8000e36:	4806      	ldr	r0, [pc, #24]	; (8000e50 <MX_TIM1_Init+0x100>)
 8000e38:	f005 f9b4 	bl	80061a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000e42:	f000 fd45 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	3730      	adds	r7, #48	; 0x30
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000140 	.word	0x20000140
 8000e54:	40010000 	.word	0x40010000

08000e58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08c      	sub	sp, #48	; 0x30
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
 8000e6c:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e6e:	f107 030c 	add.w	r3, r7, #12
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e84:	4b33      	ldr	r3, [pc, #204]	; (8000f54 <MX_TIM2_Init+0xfc>)
 8000e86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e8c:	4b31      	ldr	r3, [pc, #196]	; (8000f54 <MX_TIM2_Init+0xfc>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e92:	4b30      	ldr	r3, [pc, #192]	; (8000f54 <MX_TIM2_Init+0xfc>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000e98:	4b2e      	ldr	r3, [pc, #184]	; (8000f54 <MX_TIM2_Init+0xfc>)
 8000e9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea0:	4b2c      	ldr	r3, [pc, #176]	; (8000f54 <MX_TIM2_Init+0xfc>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea6:	4b2b      	ldr	r3, [pc, #172]	; (8000f54 <MX_TIM2_Init+0xfc>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000eac:	4829      	ldr	r0, [pc, #164]	; (8000f54 <MX_TIM2_Init+0xfc>)
 8000eae:	f003 fe7d 	bl	8004bac <HAL_TIM_IC_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000eb8:	f000 fd0a 	bl	80018d0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000ebc:	2304      	movs	r3, #4
 8000ebe:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000ec0:	2350      	movs	r3, #80	; 0x50
 8000ec2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000ed0:	f107 031c 	add.w	r3, r7, #28
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	481f      	ldr	r0, [pc, #124]	; (8000f54 <MX_TIM2_Init+0xfc>)
 8000ed8:	f004 fbe9 	bl	80056ae <HAL_TIM_SlaveConfigSynchro>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000ee2:	f000 fcf5 	bl	80018d0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000eea:	2301      	movs	r3, #1
 8000eec:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ef6:	f107 030c 	add.w	r3, r7, #12
 8000efa:	2200      	movs	r2, #0
 8000efc:	4619      	mov	r1, r3
 8000efe:	4815      	ldr	r0, [pc, #84]	; (8000f54 <MX_TIM2_Init+0xfc>)
 8000f00:	f004 f9b0 	bl	8005264 <HAL_TIM_IC_ConfigChannel>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000f0a:	f000 fce1 	bl	80018d0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000f12:	2302      	movs	r3, #2
 8000f14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000f16:	f107 030c 	add.w	r3, r7, #12
 8000f1a:	2204      	movs	r2, #4
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	480d      	ldr	r0, [pc, #52]	; (8000f54 <MX_TIM2_Init+0xfc>)
 8000f20:	f004 f9a0 	bl	8005264 <HAL_TIM_IC_ConfigChannel>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000f2a:	f000 fcd1 	bl	80018d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4806      	ldr	r0, [pc, #24]	; (8000f54 <MX_TIM2_Init+0xfc>)
 8000f3c:	f005 f932 	bl	80061a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000f46:	f000 fcc3 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f4a:	bf00      	nop
 8000f4c:	3730      	adds	r7, #48	; 0x30
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000188 	.word	0x20000188

08000f58 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b090      	sub	sp, #64	; 0x40
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f92:	4b3e      	ldr	r3, [pc, #248]	; (800108c <MX_TIM3_Init+0x134>)
 8000f94:	4a3e      	ldr	r2, [pc, #248]	; (8001090 <MX_TIM3_Init+0x138>)
 8000f96:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f98:	4b3c      	ldr	r3, [pc, #240]	; (800108c <MX_TIM3_Init+0x134>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9e:	4b3b      	ldr	r3, [pc, #236]	; (800108c <MX_TIM3_Init+0x134>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000fa4:	4b39      	ldr	r3, [pc, #228]	; (800108c <MX_TIM3_Init+0x134>)
 8000fa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000faa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fac:	4b37      	ldr	r3, [pc, #220]	; (800108c <MX_TIM3_Init+0x134>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb2:	4b36      	ldr	r3, [pc, #216]	; (800108c <MX_TIM3_Init+0x134>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fb8:	4834      	ldr	r0, [pc, #208]	; (800108c <MX_TIM3_Init+0x134>)
 8000fba:	f003 fc87 	bl	80048cc <HAL_TIM_Base_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000fc4:	f000 fc84 	bl	80018d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fcc:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	482d      	ldr	r0, [pc, #180]	; (800108c <MX_TIM3_Init+0x134>)
 8000fd6:	f004 faa3 	bl	8005520 <HAL_TIM_ConfigClockSource>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000fe0:	f000 fc76 	bl	80018d0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000fe4:	4829      	ldr	r0, [pc, #164]	; (800108c <MX_TIM3_Init+0x134>)
 8000fe6:	f003 fde1 	bl	8004bac <HAL_TIM_IC_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000ff0:	f000 fc6e 	bl	80018d0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000ff8:	2350      	movs	r3, #80	; 0x50
 8000ffa:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001000:	2300      	movs	r3, #0
 8001002:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	4619      	mov	r1, r3
 800100e:	481f      	ldr	r0, [pc, #124]	; (800108c <MX_TIM3_Init+0x134>)
 8001010:	f004 fb4d 	bl	80056ae <HAL_TIM_SlaveConfigSynchro>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 800101a:	f000 fc59 	bl	80018d0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001022:	2301      	movs	r3, #1
 8001024:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	2200      	movs	r2, #0
 8001034:	4619      	mov	r1, r3
 8001036:	4815      	ldr	r0, [pc, #84]	; (800108c <MX_TIM3_Init+0x134>)
 8001038:	f004 f914 	bl	8005264 <HAL_TIM_IC_ConfigChannel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001042:	f000 fc45 	bl	80018d0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001046:	2302      	movs	r3, #2
 8001048:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800104a:	2302      	movs	r3, #2
 800104c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800104e:	f107 030c 	add.w	r3, r7, #12
 8001052:	2204      	movs	r2, #4
 8001054:	4619      	mov	r1, r3
 8001056:	480d      	ldr	r0, [pc, #52]	; (800108c <MX_TIM3_Init+0x134>)
 8001058:	f004 f904 	bl	8005264 <HAL_TIM_IC_ConfigChannel>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 8001062:	f000 fc35 	bl	80018d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001066:	2300      	movs	r3, #0
 8001068:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	4619      	mov	r1, r3
 8001072:	4806      	ldr	r0, [pc, #24]	; (800108c <MX_TIM3_Init+0x134>)
 8001074:	f005 f896 	bl	80061a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM3_Init+0x12a>
  {
    Error_Handler();
 800107e:	f000 fc27 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	3740      	adds	r7, #64	; 0x40
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200001d0 	.word	0x200001d0
 8001090:	40000400 	.word	0x40000400

08001094 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b090      	sub	sp, #64	; 0x40
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800109a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010ce:	4b3e      	ldr	r3, [pc, #248]	; (80011c8 <MX_TIM4_Init+0x134>)
 80010d0:	4a3e      	ldr	r2, [pc, #248]	; (80011cc <MX_TIM4_Init+0x138>)
 80010d2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80010d4:	4b3c      	ldr	r3, [pc, #240]	; (80011c8 <MX_TIM4_Init+0x134>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010da:	4b3b      	ldr	r3, [pc, #236]	; (80011c8 <MX_TIM4_Init+0x134>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80010e0:	4b39      	ldr	r3, [pc, #228]	; (80011c8 <MX_TIM4_Init+0x134>)
 80010e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010e6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e8:	4b37      	ldr	r3, [pc, #220]	; (80011c8 <MX_TIM4_Init+0x134>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ee:	4b36      	ldr	r3, [pc, #216]	; (80011c8 <MX_TIM4_Init+0x134>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80010f4:	4834      	ldr	r0, [pc, #208]	; (80011c8 <MX_TIM4_Init+0x134>)
 80010f6:	f003 fbe9 	bl	80048cc <HAL_TIM_Base_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001100:	f000 fbe6 	bl	80018d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001108:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800110a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800110e:	4619      	mov	r1, r3
 8001110:	482d      	ldr	r0, [pc, #180]	; (80011c8 <MX_TIM4_Init+0x134>)
 8001112:	f004 fa05 	bl	8005520 <HAL_TIM_ConfigClockSource>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800111c:	f000 fbd8 	bl	80018d0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001120:	4829      	ldr	r0, [pc, #164]	; (80011c8 <MX_TIM4_Init+0x134>)
 8001122:	f003 fd43 	bl	8004bac <HAL_TIM_IC_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800112c:	f000 fbd0 	bl	80018d0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001130:	2304      	movs	r3, #4
 8001132:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001134:	2350      	movs	r3, #80	; 0x50
 8001136:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001138:	2300      	movs	r3, #0
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800113c:	2300      	movs	r3, #0
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	4619      	mov	r1, r3
 800114a:	481f      	ldr	r0, [pc, #124]	; (80011c8 <MX_TIM4_Init+0x134>)
 800114c:	f004 faaf 	bl	80056ae <HAL_TIM_SlaveConfigSynchro>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 8001156:	f000 fbbb 	bl	80018d0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800115e:	2301      	movs	r3, #1
 8001160:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	2200      	movs	r2, #0
 8001170:	4619      	mov	r1, r3
 8001172:	4815      	ldr	r0, [pc, #84]	; (80011c8 <MX_TIM4_Init+0x134>)
 8001174:	f004 f876 	bl	8005264 <HAL_TIM_IC_ConfigChannel>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 800117e:	f000 fba7 	bl	80018d0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001182:	2302      	movs	r3, #2
 8001184:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001186:	2302      	movs	r3, #2
 8001188:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800118a:	f107 030c 	add.w	r3, r7, #12
 800118e:	2204      	movs	r2, #4
 8001190:	4619      	mov	r1, r3
 8001192:	480d      	ldr	r0, [pc, #52]	; (80011c8 <MX_TIM4_Init+0x134>)
 8001194:	f004 f866 	bl	8005264 <HAL_TIM_IC_ConfigChannel>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM4_Init+0x10e>
  {
    Error_Handler();
 800119e:	f000 fb97 	bl	80018d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	4619      	mov	r1, r3
 80011ae:	4806      	ldr	r0, [pc, #24]	; (80011c8 <MX_TIM4_Init+0x134>)
 80011b0:	f004 fff8 	bl	80061a4 <HAL_TIMEx_MasterConfigSynchronization>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM4_Init+0x12a>
  {
    Error_Handler();
 80011ba:	f000 fb89 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	3740      	adds	r7, #64	; 0x40
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000218 	.word	0x20000218
 80011cc:	40000800 	.word	0x40000800

080011d0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b090      	sub	sp, #64	; 0x40
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800120a:	4b3e      	ldr	r3, [pc, #248]	; (8001304 <MX_TIM5_Init+0x134>)
 800120c:	4a3e      	ldr	r2, [pc, #248]	; (8001308 <MX_TIM5_Init+0x138>)
 800120e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001210:	4b3c      	ldr	r3, [pc, #240]	; (8001304 <MX_TIM5_Init+0x134>)
 8001212:	2200      	movs	r2, #0
 8001214:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001216:	4b3b      	ldr	r3, [pc, #236]	; (8001304 <MX_TIM5_Init+0x134>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800121c:	4b39      	ldr	r3, [pc, #228]	; (8001304 <MX_TIM5_Init+0x134>)
 800121e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001222:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001224:	4b37      	ldr	r3, [pc, #220]	; (8001304 <MX_TIM5_Init+0x134>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122a:	4b36      	ldr	r3, [pc, #216]	; (8001304 <MX_TIM5_Init+0x134>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001230:	4834      	ldr	r0, [pc, #208]	; (8001304 <MX_TIM5_Init+0x134>)
 8001232:	f003 fb4b 	bl	80048cc <HAL_TIM_Base_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800123c:	f000 fb48 	bl	80018d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001244:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001246:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800124a:	4619      	mov	r1, r3
 800124c:	482d      	ldr	r0, [pc, #180]	; (8001304 <MX_TIM5_Init+0x134>)
 800124e:	f004 f967 	bl	8005520 <HAL_TIM_ConfigClockSource>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001258:	f000 fb3a 	bl	80018d0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 800125c:	4829      	ldr	r0, [pc, #164]	; (8001304 <MX_TIM5_Init+0x134>)
 800125e:	f003 fca5 	bl	8004bac <HAL_TIM_IC_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001268:	f000 fb32 	bl	80018d0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800126c:	2304      	movs	r3, #4
 800126e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001270:	2350      	movs	r3, #80	; 0x50
 8001272:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001274:	2300      	movs	r3, #0
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001278:	2300      	movs	r3, #0
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8001280:	f107 031c 	add.w	r3, r7, #28
 8001284:	4619      	mov	r1, r3
 8001286:	481f      	ldr	r0, [pc, #124]	; (8001304 <MX_TIM5_Init+0x134>)
 8001288:	f004 fa11 	bl	80056ae <HAL_TIM_SlaveConfigSynchro>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM5_Init+0xc6>
  {
    Error_Handler();
 8001292:	f000 fb1d 	bl	80018d0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800129a:	2301      	movs	r3, #1
 800129c:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012a6:	f107 030c 	add.w	r3, r7, #12
 80012aa:	2200      	movs	r2, #0
 80012ac:	4619      	mov	r1, r3
 80012ae:	4815      	ldr	r0, [pc, #84]	; (8001304 <MX_TIM5_Init+0x134>)
 80012b0:	f003 ffd8 	bl	8005264 <HAL_TIM_IC_ConfigChannel>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 80012ba:	f000 fb09 	bl	80018d0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80012be:	2302      	movs	r3, #2
 80012c0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80012c2:	2302      	movs	r3, #2
 80012c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80012c6:	f107 030c 	add.w	r3, r7, #12
 80012ca:	2204      	movs	r2, #4
 80012cc:	4619      	mov	r1, r3
 80012ce:	480d      	ldr	r0, [pc, #52]	; (8001304 <MX_TIM5_Init+0x134>)
 80012d0:	f003 ffc8 	bl	8005264 <HAL_TIM_IC_ConfigChannel>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM5_Init+0x10e>
  {
    Error_Handler();
 80012da:	f000 faf9 	bl	80018d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	4619      	mov	r1, r3
 80012ea:	4806      	ldr	r0, [pc, #24]	; (8001304 <MX_TIM5_Init+0x134>)
 80012ec:	f004 ff5a 	bl	80061a4 <HAL_TIMEx_MasterConfigSynchronization>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM5_Init+0x12a>
  {
    Error_Handler();
 80012f6:	f000 faeb 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	3740      	adds	r7, #64	; 0x40
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000260 	.word	0x20000260
 8001308:	40000c00 	.word	0x40000c00

0800130c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b090      	sub	sp, #64	; 0x40
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001312:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001346:	4b3f      	ldr	r3, [pc, #252]	; (8001444 <MX_TIM8_Init+0x138>)
 8001348:	4a3f      	ldr	r2, [pc, #252]	; (8001448 <MX_TIM8_Init+0x13c>)
 800134a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800134c:	4b3d      	ldr	r3, [pc, #244]	; (8001444 <MX_TIM8_Init+0x138>)
 800134e:	2200      	movs	r2, #0
 8001350:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001352:	4b3c      	ldr	r3, [pc, #240]	; (8001444 <MX_TIM8_Init+0x138>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001358:	4b3a      	ldr	r3, [pc, #232]	; (8001444 <MX_TIM8_Init+0x138>)
 800135a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800135e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001360:	4b38      	ldr	r3, [pc, #224]	; (8001444 <MX_TIM8_Init+0x138>)
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001366:	4b37      	ldr	r3, [pc, #220]	; (8001444 <MX_TIM8_Init+0x138>)
 8001368:	2200      	movs	r2, #0
 800136a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136c:	4b35      	ldr	r3, [pc, #212]	; (8001444 <MX_TIM8_Init+0x138>)
 800136e:	2200      	movs	r2, #0
 8001370:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001372:	4834      	ldr	r0, [pc, #208]	; (8001444 <MX_TIM8_Init+0x138>)
 8001374:	f003 faaa 	bl	80048cc <HAL_TIM_Base_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800137e:	f000 faa7 	bl	80018d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001386:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001388:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800138c:	4619      	mov	r1, r3
 800138e:	482d      	ldr	r0, [pc, #180]	; (8001444 <MX_TIM8_Init+0x138>)
 8001390:	f004 f8c6 	bl	8005520 <HAL_TIM_ConfigClockSource>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 800139a:	f000 fa99 	bl	80018d0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 800139e:	4829      	ldr	r0, [pc, #164]	; (8001444 <MX_TIM8_Init+0x138>)
 80013a0:	f003 fc04 	bl	8004bac <HAL_TIM_IC_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM8_Init+0xa2>
  {
    Error_Handler();
 80013aa:	f000 fa91 	bl	80018d0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80013ae:	2304      	movs	r3, #4
 80013b0:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80013b2:	2350      	movs	r3, #80	; 0x50
 80013b4:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013b6:	2300      	movs	r3, #0
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80013ba:	2300      	movs	r3, #0
 80013bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 80013c2:	f107 031c 	add.w	r3, r7, #28
 80013c6:	4619      	mov	r1, r3
 80013c8:	481e      	ldr	r0, [pc, #120]	; (8001444 <MX_TIM8_Init+0x138>)
 80013ca:	f004 f970 	bl	80056ae <HAL_TIM_SlaveConfigSynchro>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 80013d4:	f000 fa7c 	bl	80018d0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013dc:	2301      	movs	r3, #1
 80013de:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	2200      	movs	r2, #0
 80013ee:	4619      	mov	r1, r3
 80013f0:	4814      	ldr	r0, [pc, #80]	; (8001444 <MX_TIM8_Init+0x138>)
 80013f2:	f003 ff37 	bl	8005264 <HAL_TIM_IC_ConfigChannel>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 80013fc:	f000 fa68 	bl	80018d0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001400:	2302      	movs	r3, #2
 8001402:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001404:	2302      	movs	r3, #2
 8001406:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	2204      	movs	r2, #4
 800140e:	4619      	mov	r1, r3
 8001410:	480c      	ldr	r0, [pc, #48]	; (8001444 <MX_TIM8_Init+0x138>)
 8001412:	f003 ff27 	bl	8005264 <HAL_TIM_IC_ConfigChannel>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM8_Init+0x114>
  {
    Error_Handler();
 800141c:	f000 fa58 	bl	80018d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001420:	2300      	movs	r3, #0
 8001422:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	4619      	mov	r1, r3
 800142c:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_TIM8_Init+0x138>)
 800142e:	f004 feb9 	bl	80061a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8001438:	f000 fa4a 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	3740      	adds	r7, #64	; 0x40
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200002a8 	.word	0x200002a8
 8001448:	40010400 	.word	0x40010400

0800144c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08e      	sub	sp, #56	; 0x38
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001452:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800147c:	4b35      	ldr	r3, [pc, #212]	; (8001554 <MX_TIM9_Init+0x108>)
 800147e:	4a36      	ldr	r2, [pc, #216]	; (8001558 <MX_TIM9_Init+0x10c>)
 8001480:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001482:	4b34      	ldr	r3, [pc, #208]	; (8001554 <MX_TIM9_Init+0x108>)
 8001484:	2200      	movs	r2, #0
 8001486:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001488:	4b32      	ldr	r3, [pc, #200]	; (8001554 <MX_TIM9_Init+0x108>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 800148e:	4b31      	ldr	r3, [pc, #196]	; (8001554 <MX_TIM9_Init+0x108>)
 8001490:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001494:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001496:	4b2f      	ldr	r3, [pc, #188]	; (8001554 <MX_TIM9_Init+0x108>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149c:	4b2d      	ldr	r3, [pc, #180]	; (8001554 <MX_TIM9_Init+0x108>)
 800149e:	2200      	movs	r2, #0
 80014a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80014a2:	482c      	ldr	r0, [pc, #176]	; (8001554 <MX_TIM9_Init+0x108>)
 80014a4:	f003 fa12 	bl	80048cc <HAL_TIM_Base_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM9_Init+0x66>
  {
    Error_Handler();
 80014ae:	f000 fa0f 	bl	80018d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80014b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014bc:	4619      	mov	r1, r3
 80014be:	4825      	ldr	r0, [pc, #148]	; (8001554 <MX_TIM9_Init+0x108>)
 80014c0:	f004 f82e 	bl	8005520 <HAL_TIM_ConfigClockSource>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM9_Init+0x82>
  {
    Error_Handler();
 80014ca:	f000 fa01 	bl	80018d0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 80014ce:	4821      	ldr	r0, [pc, #132]	; (8001554 <MX_TIM9_Init+0x108>)
 80014d0:	f003 fb6c 	bl	8004bac <HAL_TIM_IC_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM9_Init+0x92>
  {
    Error_Handler();
 80014da:	f000 f9f9 	bl	80018d0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80014de:	2304      	movs	r3, #4
 80014e0:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80014e2:	2350      	movs	r3, #80	; 0x50
 80014e4:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80014ea:	2300      	movs	r3, #0
 80014ec:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim9, &sSlaveConfig) != HAL_OK)
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4619      	mov	r1, r3
 80014f8:	4816      	ldr	r0, [pc, #88]	; (8001554 <MX_TIM9_Init+0x108>)
 80014fa:	f004 f8d8 	bl	80056ae <HAL_TIM_SlaveConfigSynchro>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM9_Init+0xbc>
  {
    Error_Handler();
 8001504:	f000 f9e4 	bl	80018d0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001508:	2300      	movs	r3, #0
 800150a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800150c:	2301      	movs	r3, #1
 800150e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	2200      	movs	r2, #0
 800151c:	4619      	mov	r1, r3
 800151e:	480d      	ldr	r0, [pc, #52]	; (8001554 <MX_TIM9_Init+0x108>)
 8001520:	f003 fea0 	bl	8005264 <HAL_TIM_IC_ConfigChannel>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM9_Init+0xe2>
  {
    Error_Handler();
 800152a:	f000 f9d1 	bl	80018d0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800152e:	2302      	movs	r3, #2
 8001530:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001532:	2302      	movs	r3, #2
 8001534:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	2204      	movs	r2, #4
 800153a:	4619      	mov	r1, r3
 800153c:	4805      	ldr	r0, [pc, #20]	; (8001554 <MX_TIM9_Init+0x108>)
 800153e:	f003 fe91 	bl	8005264 <HAL_TIM_IC_ConfigChannel>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM9_Init+0x100>
  {
    Error_Handler();
 8001548:	f000 f9c2 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800154c:	bf00      	nop
 800154e:	3738      	adds	r7, #56	; 0x38
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	200002f0 	.word	0x200002f0
 8001558:	40014000 	.word	0x40014000

0800155c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
 8001570:	615a      	str	r2, [r3, #20]
 8001572:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001574:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <MX_TIM10_Init+0x94>)
 8001576:	4a1f      	ldr	r2, [pc, #124]	; (80015f4 <MX_TIM10_Init+0x98>)
 8001578:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 999;
 800157a:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <MX_TIM10_Init+0x94>)
 800157c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001580:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001582:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <MX_TIM10_Init+0x94>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1800-1;
 8001588:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <MX_TIM10_Init+0x94>)
 800158a:	f240 7207 	movw	r2, #1799	; 0x707
 800158e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001590:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <MX_TIM10_Init+0x94>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001596:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <MX_TIM10_Init+0x94>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800159c:	4814      	ldr	r0, [pc, #80]	; (80015f0 <MX_TIM10_Init+0x94>)
 800159e:	f003 f995 	bl	80048cc <HAL_TIM_Base_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 80015a8:	f000 f992 	bl	80018d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80015ac:	4810      	ldr	r0, [pc, #64]	; (80015f0 <MX_TIM10_Init+0x94>)
 80015ae:	f003 f9dc 	bl	800496a <HAL_TIM_PWM_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 80015b8:	f000 f98a 	bl	80018d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015bc:	2360      	movs	r3, #96	; 0x60
 80015be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	2200      	movs	r2, #0
 80015d0:	4619      	mov	r1, r3
 80015d2:	4807      	ldr	r0, [pc, #28]	; (80015f0 <MX_TIM10_Init+0x94>)
 80015d4:	f003 fee2 	bl	800539c <HAL_TIM_PWM_ConfigChannel>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 80015de:	f000 f977 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80015e2:	4803      	ldr	r0, [pc, #12]	; (80015f0 <MX_TIM10_Init+0x94>)
 80015e4:	f000 fc84 	bl	8001ef0 <HAL_TIM_MspPostInit>

}
 80015e8:	bf00      	nop
 80015ea:	3720      	adds	r7, #32
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000338 	.word	0x20000338
 80015f4:	40014400 	.word	0x40014400

080015f8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
 800160c:	615a      	str	r2, [r3, #20]
 800160e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001610:	4b1e      	ldr	r3, [pc, #120]	; (800168c <MX_TIM11_Init+0x94>)
 8001612:	4a1f      	ldr	r2, [pc, #124]	; (8001690 <MX_TIM11_Init+0x98>)
 8001614:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8001616:	4b1d      	ldr	r3, [pc, #116]	; (800168c <MX_TIM11_Init+0x94>)
 8001618:	2200      	movs	r2, #0
 800161a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161c:	4b1b      	ldr	r3, [pc, #108]	; (800168c <MX_TIM11_Init+0x94>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1800-1;
 8001622:	4b1a      	ldr	r3, [pc, #104]	; (800168c <MX_TIM11_Init+0x94>)
 8001624:	f240 7207 	movw	r2, #1799	; 0x707
 8001628:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162a:	4b18      	ldr	r3, [pc, #96]	; (800168c <MX_TIM11_Init+0x94>)
 800162c:	2200      	movs	r2, #0
 800162e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001630:	4b16      	ldr	r3, [pc, #88]	; (800168c <MX_TIM11_Init+0x94>)
 8001632:	2200      	movs	r2, #0
 8001634:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001636:	4815      	ldr	r0, [pc, #84]	; (800168c <MX_TIM11_Init+0x94>)
 8001638:	f003 f948 	bl	80048cc <HAL_TIM_Base_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001642:	f000 f945 	bl	80018d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001646:	4811      	ldr	r0, [pc, #68]	; (800168c <MX_TIM11_Init+0x94>)
 8001648:	f003 f98f 	bl	800496a <HAL_TIM_PWM_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001652:	f000 f93d 	bl	80018d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001656:	2360      	movs	r3, #96	; 0x60
 8001658:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	2200      	movs	r2, #0
 800166a:	4619      	mov	r1, r3
 800166c:	4807      	ldr	r0, [pc, #28]	; (800168c <MX_TIM11_Init+0x94>)
 800166e:	f003 fe95 	bl	800539c <HAL_TIM_PWM_ConfigChannel>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001678:	f000 f92a 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 800167c:	4803      	ldr	r0, [pc, #12]	; (800168c <MX_TIM11_Init+0x94>)
 800167e:	f000 fc37 	bl	8001ef0 <HAL_TIM_MspPostInit>

}
 8001682:	bf00      	nop
 8001684:	3720      	adds	r7, #32
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000380 	.word	0x20000380
 8001690:	40014800 	.word	0x40014800

08001694 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08e      	sub	sp, #56	; 0x38
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800169a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80016c4:	4b35      	ldr	r3, [pc, #212]	; (800179c <MX_TIM12_Init+0x108>)
 80016c6:	4a36      	ldr	r2, [pc, #216]	; (80017a0 <MX_TIM12_Init+0x10c>)
 80016c8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80016ca:	4b34      	ldr	r3, [pc, #208]	; (800179c <MX_TIM12_Init+0x108>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d0:	4b32      	ldr	r3, [pc, #200]	; (800179c <MX_TIM12_Init+0x108>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80016d6:	4b31      	ldr	r3, [pc, #196]	; (800179c <MX_TIM12_Init+0x108>)
 80016d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016dc:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016de:	4b2f      	ldr	r3, [pc, #188]	; (800179c <MX_TIM12_Init+0x108>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e4:	4b2d      	ldr	r3, [pc, #180]	; (800179c <MX_TIM12_Init+0x108>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80016ea:	482c      	ldr	r0, [pc, #176]	; (800179c <MX_TIM12_Init+0x108>)
 80016ec:	f003 f8ee 	bl	80048cc <HAL_TIM_Base_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM12_Init+0x66>
  {
    Error_Handler();
 80016f6:	f000 f8eb 	bl	80018d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016fe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001700:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001704:	4619      	mov	r1, r3
 8001706:	4825      	ldr	r0, [pc, #148]	; (800179c <MX_TIM12_Init+0x108>)
 8001708:	f003 ff0a 	bl	8005520 <HAL_TIM_ConfigClockSource>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM12_Init+0x82>
  {
    Error_Handler();
 8001712:	f000 f8dd 	bl	80018d0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 8001716:	4821      	ldr	r0, [pc, #132]	; (800179c <MX_TIM12_Init+0x108>)
 8001718:	f003 fa48 	bl	8004bac <HAL_TIM_IC_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM12_Init+0x92>
  {
    Error_Handler();
 8001722:	f000 f8d5 	bl	80018d0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001726:	2304      	movs	r3, #4
 8001728:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800172a:	2350      	movs	r3, #80	; 0x50
 800172c:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001732:	2300      	movs	r3, #0
 8001734:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim12, &sSlaveConfig) != HAL_OK)
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	4619      	mov	r1, r3
 8001740:	4816      	ldr	r0, [pc, #88]	; (800179c <MX_TIM12_Init+0x108>)
 8001742:	f003 ffb4 	bl	80056ae <HAL_TIM_SlaveConfigSynchro>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM12_Init+0xbc>
  {
    Error_Handler();
 800174c:	f000 f8c0 	bl	80018d0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001750:	2300      	movs	r3, #0
 8001752:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001754:	2301      	movs	r3, #1
 8001756:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	2200      	movs	r2, #0
 8001764:	4619      	mov	r1, r3
 8001766:	480d      	ldr	r0, [pc, #52]	; (800179c <MX_TIM12_Init+0x108>)
 8001768:	f003 fd7c 	bl	8005264 <HAL_TIM_IC_ConfigChannel>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM12_Init+0xe2>
  {
    Error_Handler();
 8001772:	f000 f8ad 	bl	80018d0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001776:	2302      	movs	r3, #2
 8001778:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800177a:	2302      	movs	r3, #2
 800177c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	2204      	movs	r2, #4
 8001782:	4619      	mov	r1, r3
 8001784:	4805      	ldr	r0, [pc, #20]	; (800179c <MX_TIM12_Init+0x108>)
 8001786:	f003 fd6d 	bl	8005264 <HAL_TIM_IC_ConfigChannel>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_TIM12_Init+0x100>
  {
    Error_Handler();
 8001790:	f000 f89e 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8001794:	bf00      	nop
 8001796:	3738      	adds	r7, #56	; 0x38
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	200003c8 	.word	0x200003c8
 80017a0:	40001800 	.word	0x40001800

080017a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017a8:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <MX_USART1_UART_Init+0x4c>)
 80017aa:	4a12      	ldr	r2, [pc, #72]	; (80017f4 <MX_USART1_UART_Init+0x50>)
 80017ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017ae:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <MX_USART1_UART_Init+0x4c>)
 80017b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <MX_USART1_UART_Init+0x4c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <MX_USART1_UART_Init+0x4c>)
 80017be:	2200      	movs	r2, #0
 80017c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <MX_USART1_UART_Init+0x4c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <MX_USART1_UART_Init+0x4c>)
 80017ca:	220c      	movs	r2, #12
 80017cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ce:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <MX_USART1_UART_Init+0x4c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <MX_USART1_UART_Init+0x4c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017da:	4805      	ldr	r0, [pc, #20]	; (80017f0 <MX_USART1_UART_Init+0x4c>)
 80017dc:	f004 fd72 	bl	80062c4 <HAL_UART_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017e6:	f000 f873 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000410 	.word	0x20000410
 80017f4:	40011000 	.word	0x40011000

080017f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	; 0x28
 80017fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	60da      	str	r2, [r3, #12]
 800180c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	4b24      	ldr	r3, [pc, #144]	; (80018a4 <MX_GPIO_Init+0xac>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a23      	ldr	r2, [pc, #140]	; (80018a4 <MX_GPIO_Init+0xac>)
 8001818:	f043 0304 	orr.w	r3, r3, #4
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <MX_GPIO_Init+0xac>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	4b1d      	ldr	r3, [pc, #116]	; (80018a4 <MX_GPIO_Init+0xac>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a1c      	ldr	r2, [pc, #112]	; (80018a4 <MX_GPIO_Init+0xac>)
 8001834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b1a      	ldr	r3, [pc, #104]	; (80018a4 <MX_GPIO_Init+0xac>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <MX_GPIO_Init+0xac>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a15      	ldr	r2, [pc, #84]	; (80018a4 <MX_GPIO_Init+0xac>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <MX_GPIO_Init+0xac>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <MX_GPIO_Init+0xac>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a0e      	ldr	r2, [pc, #56]	; (80018a4 <MX_GPIO_Init+0xac>)
 800186c:	f043 0302 	orr.w	r3, r3, #2
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <MX_GPIO_Init+0xac>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800187e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001884:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	4619      	mov	r1, r3
 8001894:	4804      	ldr	r0, [pc, #16]	; (80018a8 <MX_GPIO_Init+0xb0>)
 8001896:	f001 f90d 	bl	8002ab4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800189a:	bf00      	nop
 800189c:	3728      	adds	r7, #40	; 0x28
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40020800 	.word	0x40020800

080018ac <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80018b4:	1d39      	adds	r1, r7, #4
 80018b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018ba:	2201      	movs	r2, #1
 80018bc:	4803      	ldr	r0, [pc, #12]	; (80018cc <__io_putchar+0x20>)
 80018be:	f004 fd4e 	bl	800635e <HAL_UART_Transmit>

  return ch;
 80018c2:	687b      	ldr	r3, [r7, #4]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000410 	.word	0x20000410

080018d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d4:	b672      	cpsid	i
}
 80018d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <Error_Handler+0x8>
	...

080018dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	4b10      	ldr	r3, [pc, #64]	; (8001928 <HAL_MspInit+0x4c>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	4a0f      	ldr	r2, [pc, #60]	; (8001928 <HAL_MspInit+0x4c>)
 80018ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f0:	6453      	str	r3, [r2, #68]	; 0x44
 80018f2:	4b0d      	ldr	r3, [pc, #52]	; (8001928 <HAL_MspInit+0x4c>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	603b      	str	r3, [r7, #0]
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <HAL_MspInit+0x4c>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	4a08      	ldr	r2, [pc, #32]	; (8001928 <HAL_MspInit+0x4c>)
 8001908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800190c:	6413      	str	r3, [r2, #64]	; 0x40
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_MspInit+0x4c>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800191a:	2007      	movs	r0, #7
 800191c:	f001 f888 	bl	8002a30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40023800 	.word	0x40023800

0800192c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	; 0x28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a17      	ldr	r2, [pc, #92]	; (80019a8 <HAL_ADC_MspInit+0x7c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d127      	bne.n	800199e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	4b16      	ldr	r3, [pc, #88]	; (80019ac <HAL_ADC_MspInit+0x80>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	4a15      	ldr	r2, [pc, #84]	; (80019ac <HAL_ADC_MspInit+0x80>)
 8001958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800195c:	6453      	str	r3, [r2, #68]	; 0x44
 800195e:	4b13      	ldr	r3, [pc, #76]	; (80019ac <HAL_ADC_MspInit+0x80>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <HAL_ADC_MspInit+0x80>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4a0e      	ldr	r2, [pc, #56]	; (80019ac <HAL_ADC_MspInit+0x80>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <HAL_ADC_MspInit+0x80>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001986:	2310      	movs	r3, #16
 8001988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800198a:	2303      	movs	r3, #3
 800198c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	4619      	mov	r1, r3
 8001998:	4805      	ldr	r0, [pc, #20]	; (80019b0 <HAL_ADC_MspInit+0x84>)
 800199a:	f001 f88b 	bl	8002ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800199e:	bf00      	nop
 80019a0:	3728      	adds	r7, #40	; 0x28
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40012000 	.word	0x40012000
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40020000 	.word	0x40020000

080019b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08a      	sub	sp, #40	; 0x28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a29      	ldr	r2, [pc, #164]	; (8001a78 <HAL_I2C_MspInit+0xc4>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d14b      	bne.n	8001a6e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	4b28      	ldr	r3, [pc, #160]	; (8001a7c <HAL_I2C_MspInit+0xc8>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a27      	ldr	r2, [pc, #156]	; (8001a7c <HAL_I2C_MspInit+0xc8>)
 80019e0:	f043 0302 	orr.w	r3, r3, #2
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b25      	ldr	r3, [pc, #148]	; (8001a7c <HAL_I2C_MspInit+0xc8>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	613b      	str	r3, [r7, #16]
 80019f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <HAL_I2C_MspInit+0xc8>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a20      	ldr	r2, [pc, #128]	; (8001a7c <HAL_I2C_MspInit+0xc8>)
 80019fc:	f043 0304 	orr.w	r3, r3, #4
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <HAL_I2C_MspInit+0xc8>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a14:	2312      	movs	r3, #18
 8001a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a20:	2304      	movs	r3, #4
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4815      	ldr	r0, [pc, #84]	; (8001a80 <HAL_I2C_MspInit+0xcc>)
 8001a2c:	f001 f842 	bl	8002ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a36:	2312      	movs	r3, #18
 8001a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a42:	2304      	movs	r3, #4
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	480d      	ldr	r0, [pc, #52]	; (8001a84 <HAL_I2C_MspInit+0xd0>)
 8001a4e:	f001 f831 	bl	8002ab4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <HAL_I2C_MspInit+0xc8>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	4a08      	ldr	r2, [pc, #32]	; (8001a7c <HAL_I2C_MspInit+0xc8>)
 8001a5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a60:	6413      	str	r3, [r2, #64]	; 0x40
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_I2C_MspInit+0xc8>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a6e:	bf00      	nop
 8001a70:	3728      	adds	r7, #40	; 0x28
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40005800 	.word	0x40005800
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40020400 	.word	0x40020400
 8001a84:	40020800 	.word	0x40020800

08001a88 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b09a      	sub	sp, #104	; 0x68
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a90:	f107 030c 	add.w	r3, r7, #12
 8001a94:	225c      	movs	r2, #92	; 0x5c
 8001a96:	2100      	movs	r1, #0
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f005 f8a9 	bl	8006bf0 <memset>
  if(hrtc->Instance==RTC)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a0c      	ldr	r2, [pc, #48]	; (8001ad4 <HAL_RTC_MspInit+0x4c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d111      	bne.n	8001acc <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001aa8:	2320      	movs	r3, #32
 8001aaa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001aac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ab2:	f107 030c 	add.w	r3, r7, #12
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f001 fc3e 	bl	8003338 <HAL_RCCEx_PeriphCLKConfig>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001ac2:	f7ff ff05 	bl	80018d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ac6:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <HAL_RTC_MspInit+0x50>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001acc:	bf00      	nop
 8001ace:	3768      	adds	r7, #104	; 0x68
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40002800 	.word	0x40002800
 8001ad8:	42470e3c 	.word	0x42470e3c

08001adc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08c      	sub	sp, #48	; 0x30
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 031c 	add.w	r3, r7, #28
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a36      	ldr	r2, [pc, #216]	; (8001bd4 <HAL_TIM_IC_MspInit+0xf8>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d12d      	bne.n	8001b5a <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	61bb      	str	r3, [r7, #24]
 8001b02:	4b35      	ldr	r3, [pc, #212]	; (8001bd8 <HAL_TIM_IC_MspInit+0xfc>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	4a34      	ldr	r2, [pc, #208]	; (8001bd8 <HAL_TIM_IC_MspInit+0xfc>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b0e:	4b32      	ldr	r3, [pc, #200]	; (8001bd8 <HAL_TIM_IC_MspInit+0xfc>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	61bb      	str	r3, [r7, #24]
 8001b18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	4b2e      	ldr	r3, [pc, #184]	; (8001bd8 <HAL_TIM_IC_MspInit+0xfc>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a2d      	ldr	r2, [pc, #180]	; (8001bd8 <HAL_TIM_IC_MspInit+0xfc>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b2b      	ldr	r3, [pc, #172]	; (8001bd8 <HAL_TIM_IC_MspInit+0xfc>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b44:	2300      	movs	r3, #0
 8001b46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4c:	f107 031c 	add.w	r3, r7, #28
 8001b50:	4619      	mov	r1, r3
 8001b52:	4822      	ldr	r0, [pc, #136]	; (8001bdc <HAL_TIM_IC_MspInit+0x100>)
 8001b54:	f000 ffae 	bl	8002ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b58:	e038      	b.n	8001bcc <HAL_TIM_IC_MspInit+0xf0>
  else if(htim_ic->Instance==TIM2)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b62:	d133      	bne.n	8001bcc <HAL_TIM_IC_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b64:	2300      	movs	r3, #0
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	4b1b      	ldr	r3, [pc, #108]	; (8001bd8 <HAL_TIM_IC_MspInit+0xfc>)
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	4a1a      	ldr	r2, [pc, #104]	; (8001bd8 <HAL_TIM_IC_MspInit+0xfc>)
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	6413      	str	r3, [r2, #64]	; 0x40
 8001b74:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <HAL_TIM_IC_MspInit+0xfc>)
 8001b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <HAL_TIM_IC_MspInit+0xfc>)
 8001b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b88:	4a13      	ldr	r2, [pc, #76]	; (8001bd8 <HAL_TIM_IC_MspInit+0xfc>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <HAL_TIM_IC_MspInit+0xfc>)
 8001b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b9c:	2320      	movs	r3, #32
 8001b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bac:	2301      	movs	r3, #1
 8001bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb0:	f107 031c 	add.w	r3, r7, #28
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4809      	ldr	r0, [pc, #36]	; (8001bdc <HAL_TIM_IC_MspInit+0x100>)
 8001bb8:	f000 ff7c 	bl	8002ab4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	201c      	movs	r0, #28
 8001bc2:	f000 ff40 	bl	8002a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bc6:	201c      	movs	r0, #28
 8001bc8:	f000 ff59 	bl	8002a7e <HAL_NVIC_EnableIRQ>
}
 8001bcc:	bf00      	nop
 8001bce:	3730      	adds	r7, #48	; 0x30
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40010000 	.word	0x40010000
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40020000 	.word	0x40020000

08001be0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b096      	sub	sp, #88	; 0x58
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a93      	ldr	r2, [pc, #588]	; (8001e4c <HAL_TIM_Base_MspInit+0x26c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d134      	bne.n	8001c6c <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	643b      	str	r3, [r7, #64]	; 0x40
 8001c06:	4b92      	ldr	r3, [pc, #584]	; (8001e50 <HAL_TIM_Base_MspInit+0x270>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	4a91      	ldr	r2, [pc, #580]	; (8001e50 <HAL_TIM_Base_MspInit+0x270>)
 8001c0c:	f043 0302 	orr.w	r3, r3, #2
 8001c10:	6413      	str	r3, [r2, #64]	; 0x40
 8001c12:	4b8f      	ldr	r3, [pc, #572]	; (8001e50 <HAL_TIM_Base_MspInit+0x270>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	643b      	str	r3, [r7, #64]	; 0x40
 8001c1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c22:	4b8b      	ldr	r3, [pc, #556]	; (8001e50 <HAL_TIM_Base_MspInit+0x270>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	4a8a      	ldr	r2, [pc, #552]	; (8001e50 <HAL_TIM_Base_MspInit+0x270>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2e:	4b88      	ldr	r3, [pc, #544]	; (8001e50 <HAL_TIM_Base_MspInit+0x270>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c3a:	2340      	movs	r3, #64	; 0x40
 8001c3c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c46:	2300      	movs	r3, #0
 8001c48:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c52:	4619      	mov	r1, r3
 8001c54:	487f      	ldr	r0, [pc, #508]	; (8001e54 <HAL_TIM_Base_MspInit+0x274>)
 8001c56:	f000 ff2d 	bl	8002ab4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	201d      	movs	r0, #29
 8001c60:	f000 fef1 	bl	8002a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c64:	201d      	movs	r0, #29
 8001c66:	f000 ff0a 	bl	8002a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001c6a:	e137      	b.n	8001edc <HAL_TIM_Base_MspInit+0x2fc>
  else if(htim_base->Instance==TIM4)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a79      	ldr	r2, [pc, #484]	; (8001e58 <HAL_TIM_Base_MspInit+0x278>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d12c      	bne.n	8001cd0 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c7a:	4b75      	ldr	r3, [pc, #468]	; (8001e50 <HAL_TIM_Base_MspInit+0x270>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	4a74      	ldr	r2, [pc, #464]	; (8001e50 <HAL_TIM_Base_MspInit+0x270>)
 8001c80:	f043 0304 	orr.w	r3, r3, #4
 8001c84:	6413      	str	r3, [r2, #64]	; 0x40
 8001c86:	4b72      	ldr	r3, [pc, #456]	; (8001e50 <HAL_TIM_Base_MspInit+0x270>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	637b      	str	r3, [r7, #52]	; 0x34
 8001c96:	4b6e      	ldr	r3, [pc, #440]	; (8001e50 <HAL_TIM_Base_MspInit+0x270>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	4a6d      	ldr	r2, [pc, #436]	; (8001e50 <HAL_TIM_Base_MspInit+0x270>)
 8001c9c:	f043 0302 	orr.w	r3, r3, #2
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca2:	4b6b      	ldr	r3, [pc, #428]	; (8001e50 <HAL_TIM_Base_MspInit+0x270>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	637b      	str	r3, [r7, #52]	; 0x34
 8001cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cae:	2340      	movs	r3, #64	; 0x40
 8001cb0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4864      	ldr	r0, [pc, #400]	; (8001e5c <HAL_TIM_Base_MspInit+0x27c>)
 8001cca:	f000 fef3 	bl	8002ab4 <HAL_GPIO_Init>
}
 8001cce:	e105      	b.n	8001edc <HAL_TIM_Base_MspInit+0x2fc>
  else if(htim_base->Instance==TIM5)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a62      	ldr	r2, [pc, #392]	; (8001e60 <HAL_TIM_Base_MspInit+0x280>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d12c      	bne.n	8001d34 <HAL_TIM_Base_MspInit+0x154>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	633b      	str	r3, [r7, #48]	; 0x30
 8001cde:	4b5c      	ldr	r3, [pc, #368]	; (8001e50 <HAL_TIM_Base_MspInit+0x270>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	4a5b      	ldr	r2, [pc, #364]	; (8001e50 <HAL_TIM_Base_MspInit+0x270>)
 8001ce4:	f043 0308 	orr.w	r3, r3, #8
 8001ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cea:	4b59      	ldr	r3, [pc, #356]	; (8001e50 <HAL_TIM_Base_MspInit+0x270>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	633b      	str	r3, [r7, #48]	; 0x30
 8001cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cfa:	4b55      	ldr	r3, [pc, #340]	; (8001e50 <HAL_TIM_Base_MspInit+0x270>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	4a54      	ldr	r2, [pc, #336]	; (8001e50 <HAL_TIM_Base_MspInit+0x270>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6313      	str	r3, [r2, #48]	; 0x30
 8001d06:	4b52      	ldr	r3, [pc, #328]	; (8001e50 <HAL_TIM_Base_MspInit+0x270>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d12:	2301      	movs	r3, #1
 8001d14:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d16:	2302      	movs	r3, #2
 8001d18:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001d22:	2302      	movs	r3, #2
 8001d24:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d26:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4849      	ldr	r0, [pc, #292]	; (8001e54 <HAL_TIM_Base_MspInit+0x274>)
 8001d2e:	f000 fec1 	bl	8002ab4 <HAL_GPIO_Init>
}
 8001d32:	e0d3      	b.n	8001edc <HAL_TIM_Base_MspInit+0x2fc>
  else if(htim_base->Instance==TIM8)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a4a      	ldr	r2, [pc, #296]	; (8001e64 <HAL_TIM_Base_MspInit+0x284>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d12c      	bne.n	8001d98 <HAL_TIM_Base_MspInit+0x1b8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d42:	4b43      	ldr	r3, [pc, #268]	; (8001e50 <HAL_TIM_Base_MspInit+0x270>)
 8001d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d46:	4a42      	ldr	r2, [pc, #264]	; (8001e50 <HAL_TIM_Base_MspInit+0x270>)
 8001d48:	f043 0302 	orr.w	r3, r3, #2
 8001d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d4e:	4b40      	ldr	r3, [pc, #256]	; (8001e50 <HAL_TIM_Base_MspInit+0x270>)
 8001d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d5e:	4b3c      	ldr	r3, [pc, #240]	; (8001e50 <HAL_TIM_Base_MspInit+0x270>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a3b      	ldr	r2, [pc, #236]	; (8001e50 <HAL_TIM_Base_MspInit+0x270>)
 8001d64:	f043 0304 	orr.w	r3, r3, #4
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b39      	ldr	r3, [pc, #228]	; (8001e50 <HAL_TIM_Base_MspInit+0x270>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0304 	and.w	r3, r3, #4
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d76:	2340      	movs	r3, #64	; 0x40
 8001d78:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d82:	2300      	movs	r3, #0
 8001d84:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001d86:	2303      	movs	r3, #3
 8001d88:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d8a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4835      	ldr	r0, [pc, #212]	; (8001e68 <HAL_TIM_Base_MspInit+0x288>)
 8001d92:	f000 fe8f 	bl	8002ab4 <HAL_GPIO_Init>
}
 8001d96:	e0a1      	b.n	8001edc <HAL_TIM_Base_MspInit+0x2fc>
  else if(htim_base->Instance==TIM9)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a33      	ldr	r2, [pc, #204]	; (8001e6c <HAL_TIM_Base_MspInit+0x28c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d12c      	bne.n	8001dfc <HAL_TIM_Base_MspInit+0x21c>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	623b      	str	r3, [r7, #32]
 8001da6:	4b2a      	ldr	r3, [pc, #168]	; (8001e50 <HAL_TIM_Base_MspInit+0x270>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	4a29      	ldr	r2, [pc, #164]	; (8001e50 <HAL_TIM_Base_MspInit+0x270>)
 8001dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db0:	6453      	str	r3, [r2, #68]	; 0x44
 8001db2:	4b27      	ldr	r3, [pc, #156]	; (8001e50 <HAL_TIM_Base_MspInit+0x270>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dba:	623b      	str	r3, [r7, #32]
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
 8001dc2:	4b23      	ldr	r3, [pc, #140]	; (8001e50 <HAL_TIM_Base_MspInit+0x270>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	4a22      	ldr	r2, [pc, #136]	; (8001e50 <HAL_TIM_Base_MspInit+0x270>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dce:	4b20      	ldr	r3, [pc, #128]	; (8001e50 <HAL_TIM_Base_MspInit+0x270>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	61fb      	str	r3, [r7, #28]
 8001dd8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001dda:	2304      	movs	r3, #4
 8001ddc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dde:	2302      	movs	r3, #2
 8001de0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de6:	2300      	movs	r3, #0
 8001de8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001dea:	2303      	movs	r3, #3
 8001dec:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001df2:	4619      	mov	r1, r3
 8001df4:	4817      	ldr	r0, [pc, #92]	; (8001e54 <HAL_TIM_Base_MspInit+0x274>)
 8001df6:	f000 fe5d 	bl	8002ab4 <HAL_GPIO_Init>
}
 8001dfa:	e06f      	b.n	8001edc <HAL_TIM_Base_MspInit+0x2fc>
  else if(htim_base->Instance==TIM10)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a1b      	ldr	r2, [pc, #108]	; (8001e70 <HAL_TIM_Base_MspInit+0x290>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d10e      	bne.n	8001e24 <HAL_TIM_Base_MspInit+0x244>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	61bb      	str	r3, [r7, #24]
 8001e0a:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <HAL_TIM_Base_MspInit+0x270>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	4a10      	ldr	r2, [pc, #64]	; (8001e50 <HAL_TIM_Base_MspInit+0x270>)
 8001e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e14:	6453      	str	r3, [r2, #68]	; 0x44
 8001e16:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <HAL_TIM_Base_MspInit+0x270>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1e:	61bb      	str	r3, [r7, #24]
 8001e20:	69bb      	ldr	r3, [r7, #24]
}
 8001e22:	e05b      	b.n	8001edc <HAL_TIM_Base_MspInit+0x2fc>
  else if(htim_base->Instance==TIM11)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a12      	ldr	r2, [pc, #72]	; (8001e74 <HAL_TIM_Base_MspInit+0x294>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d124      	bne.n	8001e78 <HAL_TIM_Base_MspInit+0x298>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <HAL_TIM_Base_MspInit+0x270>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	4a06      	ldr	r2, [pc, #24]	; (8001e50 <HAL_TIM_Base_MspInit+0x270>)
 8001e38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3e:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <HAL_TIM_Base_MspInit+0x270>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	697b      	ldr	r3, [r7, #20]
}
 8001e4a:	e047      	b.n	8001edc <HAL_TIM_Base_MspInit+0x2fc>
 8001e4c:	40000400 	.word	0x40000400
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40020000 	.word	0x40020000
 8001e58:	40000800 	.word	0x40000800
 8001e5c:	40020400 	.word	0x40020400
 8001e60:	40000c00 	.word	0x40000c00
 8001e64:	40010400 	.word	0x40010400
 8001e68:	40020800 	.word	0x40020800
 8001e6c:	40014000 	.word	0x40014000
 8001e70:	40014400 	.word	0x40014400
 8001e74:	40014800 	.word	0x40014800
  else if(htim_base->Instance==TIM12)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a19      	ldr	r2, [pc, #100]	; (8001ee4 <HAL_TIM_Base_MspInit+0x304>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d12c      	bne.n	8001edc <HAL_TIM_Base_MspInit+0x2fc>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]
 8001e86:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <HAL_TIM_Base_MspInit+0x308>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	4a17      	ldr	r2, [pc, #92]	; (8001ee8 <HAL_TIM_Base_MspInit+0x308>)
 8001e8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e90:	6413      	str	r3, [r2, #64]	; 0x40
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <HAL_TIM_Base_MspInit+0x308>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <HAL_TIM_Base_MspInit+0x308>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	4a10      	ldr	r2, [pc, #64]	; (8001ee8 <HAL_TIM_Base_MspInit+0x308>)
 8001ea8:	f043 0302 	orr.w	r3, r3, #2
 8001eac:	6313      	str	r3, [r2, #48]	; 0x30
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <HAL_TIM_Base_MspInit+0x308>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001eba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ebe:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001ecc:	2309      	movs	r3, #9
 8001ece:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4805      	ldr	r0, [pc, #20]	; (8001eec <HAL_TIM_Base_MspInit+0x30c>)
 8001ed8:	f000 fdec 	bl	8002ab4 <HAL_GPIO_Init>
}
 8001edc:	bf00      	nop
 8001ede:	3758      	adds	r7, #88	; 0x58
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40001800 	.word	0x40001800
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40020400 	.word	0x40020400

08001ef0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	; 0x28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM10)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a25      	ldr	r2, [pc, #148]	; (8001fa4 <HAL_TIM_MspPostInit+0xb4>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d11f      	bne.n	8001f52 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	4b24      	ldr	r3, [pc, #144]	; (8001fa8 <HAL_TIM_MspPostInit+0xb8>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	4a23      	ldr	r2, [pc, #140]	; (8001fa8 <HAL_TIM_MspPostInit+0xb8>)
 8001f1c:	f043 0302 	orr.w	r3, r3, #2
 8001f20:	6313      	str	r3, [r2, #48]	; 0x30
 8001f22:	4b21      	ldr	r3, [pc, #132]	; (8001fa8 <HAL_TIM_MspPostInit+0xb8>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f34:	2302      	movs	r3, #2
 8001f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001f40:	2303      	movs	r3, #3
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f44:	f107 0314 	add.w	r3, r7, #20
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4818      	ldr	r0, [pc, #96]	; (8001fac <HAL_TIM_MspPostInit+0xbc>)
 8001f4c:	f000 fdb2 	bl	8002ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8001f50:	e023      	b.n	8001f9a <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM11)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a16      	ldr	r2, [pc, #88]	; (8001fb0 <HAL_TIM_MspPostInit+0xc0>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d11e      	bne.n	8001f9a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <HAL_TIM_MspPostInit+0xb8>)
 8001f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f64:	4a10      	ldr	r2, [pc, #64]	; (8001fa8 <HAL_TIM_MspPostInit+0xb8>)
 8001f66:	f043 0302 	orr.w	r3, r3, #2
 8001f6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6c:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <HAL_TIM_MspPostInit+0xb8>)
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f86:	2300      	movs	r3, #0
 8001f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f8e:	f107 0314 	add.w	r3, r7, #20
 8001f92:	4619      	mov	r1, r3
 8001f94:	4805      	ldr	r0, [pc, #20]	; (8001fac <HAL_TIM_MspPostInit+0xbc>)
 8001f96:	f000 fd8d 	bl	8002ab4 <HAL_GPIO_Init>
}
 8001f9a:	bf00      	nop
 8001f9c:	3728      	adds	r7, #40	; 0x28
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40014400 	.word	0x40014400
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40020400 	.word	0x40020400
 8001fb0:	40014800 	.word	0x40014800

08001fb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08a      	sub	sp, #40	; 0x28
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a19      	ldr	r2, [pc, #100]	; (8002038 <HAL_UART_MspInit+0x84>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d12c      	bne.n	8002030 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	613b      	str	r3, [r7, #16]
 8001fda:	4b18      	ldr	r3, [pc, #96]	; (800203c <HAL_UART_MspInit+0x88>)
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fde:	4a17      	ldr	r2, [pc, #92]	; (800203c <HAL_UART_MspInit+0x88>)
 8001fe0:	f043 0310 	orr.w	r3, r3, #16
 8001fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fe6:	4b15      	ldr	r3, [pc, #84]	; (800203c <HAL_UART_MspInit+0x88>)
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fea:	f003 0310 	and.w	r3, r3, #16
 8001fee:	613b      	str	r3, [r7, #16]
 8001ff0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	4b11      	ldr	r3, [pc, #68]	; (800203c <HAL_UART_MspInit+0x88>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	4a10      	ldr	r2, [pc, #64]	; (800203c <HAL_UART_MspInit+0x88>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6313      	str	r3, [r2, #48]	; 0x30
 8002002:	4b0e      	ldr	r3, [pc, #56]	; (800203c <HAL_UART_MspInit+0x88>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800200e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002012:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002014:	2302      	movs	r3, #2
 8002016:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201c:	2303      	movs	r3, #3
 800201e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002020:	2307      	movs	r3, #7
 8002022:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002024:	f107 0314 	add.w	r3, r7, #20
 8002028:	4619      	mov	r1, r3
 800202a:	4805      	ldr	r0, [pc, #20]	; (8002040 <HAL_UART_MspInit+0x8c>)
 800202c:	f000 fd42 	bl	8002ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002030:	bf00      	nop
 8002032:	3728      	adds	r7, #40	; 0x28
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40011000 	.word	0x40011000
 800203c:	40023800 	.word	0x40023800
 8002040:	40020000 	.word	0x40020000

08002044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002048:	e7fe      	b.n	8002048 <NMI_Handler+0x4>

0800204a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800204e:	e7fe      	b.n	800204e <HardFault_Handler+0x4>

08002050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002054:	e7fe      	b.n	8002054 <MemManage_Handler+0x4>

08002056 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800205a:	e7fe      	b.n	800205a <BusFault_Handler+0x4>

0800205c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002060:	e7fe      	b.n	8002060 <UsageFault_Handler+0x4>

08002062 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002090:	f000 f948 	bl	8002324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002094:	bf00      	nop
 8002096:	bd80      	pop	{r7, pc}

08002098 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800209c:	4802      	ldr	r0, [pc, #8]	; (80020a8 <TIM2_IRQHandler+0x10>)
 800209e:	f002 ffd9 	bl	8005054 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000188 	.word	0x20000188

080020ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020b0:	4802      	ldr	r0, [pc, #8]	; (80020bc <TIM3_IRQHandler+0x10>)
 80020b2:	f002 ffcf 	bl	8005054 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	200001d0 	.word	0x200001d0

080020c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	e00a      	b.n	80020e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020d2:	f3af 8000 	nop.w
 80020d6:	4601      	mov	r1, r0
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	60ba      	str	r2, [r7, #8]
 80020de:	b2ca      	uxtb	r2, r1
 80020e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	3301      	adds	r3, #1
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	dbf0      	blt.n	80020d2 <_read+0x12>
  }

  return len;
 80020f0:	687b      	ldr	r3, [r7, #4]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b086      	sub	sp, #24
 80020fe:	af00      	add	r7, sp, #0
 8002100:	60f8      	str	r0, [r7, #12]
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	e009      	b.n	8002120 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	1c5a      	adds	r2, r3, #1
 8002110:	60ba      	str	r2, [r7, #8]
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff fbc9 	bl	80018ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	3301      	adds	r3, #1
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	429a      	cmp	r2, r3
 8002126:	dbf1      	blt.n	800210c <_write+0x12>
  }
  return len;
 8002128:	687b      	ldr	r3, [r7, #4]
}
 800212a:	4618      	mov	r0, r3
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <_close>:

int _close(int file)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800213a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800215a:	605a      	str	r2, [r3, #4]
  return 0;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <_isatty>:

int _isatty(int file)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002172:	2301      	movs	r3, #1
}
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
	...

0800219c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021a4:	4a14      	ldr	r2, [pc, #80]	; (80021f8 <_sbrk+0x5c>)
 80021a6:	4b15      	ldr	r3, [pc, #84]	; (80021fc <_sbrk+0x60>)
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021b0:	4b13      	ldr	r3, [pc, #76]	; (8002200 <_sbrk+0x64>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d102      	bne.n	80021be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <_sbrk+0x64>)
 80021ba:	4a12      	ldr	r2, [pc, #72]	; (8002204 <_sbrk+0x68>)
 80021bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021be:	4b10      	ldr	r3, [pc, #64]	; (8002200 <_sbrk+0x64>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d207      	bcs.n	80021dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021cc:	f004 fd18 	bl	8006c00 <__errno>
 80021d0:	4603      	mov	r3, r0
 80021d2:	220c      	movs	r2, #12
 80021d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021da:	e009      	b.n	80021f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021dc:	4b08      	ldr	r3, [pc, #32]	; (8002200 <_sbrk+0x64>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021e2:	4b07      	ldr	r3, [pc, #28]	; (8002200 <_sbrk+0x64>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4413      	add	r3, r2
 80021ea:	4a05      	ldr	r2, [pc, #20]	; (8002200 <_sbrk+0x64>)
 80021ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ee:	68fb      	ldr	r3, [r7, #12]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20020000 	.word	0x20020000
 80021fc:	00000400 	.word	0x00000400
 8002200:	20000478 	.word	0x20000478
 8002204:	200005d0 	.word	0x200005d0

08002208 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800220c:	4b06      	ldr	r3, [pc, #24]	; (8002228 <SystemInit+0x20>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002212:	4a05      	ldr	r2, [pc, #20]	; (8002228 <SystemInit+0x20>)
 8002214:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002218:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800222c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002264 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002230:	480d      	ldr	r0, [pc, #52]	; (8002268 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002232:	490e      	ldr	r1, [pc, #56]	; (800226c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002234:	4a0e      	ldr	r2, [pc, #56]	; (8002270 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002238:	e002      	b.n	8002240 <LoopCopyDataInit>

0800223a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800223a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800223c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800223e:	3304      	adds	r3, #4

08002240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002244:	d3f9      	bcc.n	800223a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002246:	4a0b      	ldr	r2, [pc, #44]	; (8002274 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002248:	4c0b      	ldr	r4, [pc, #44]	; (8002278 <LoopFillZerobss+0x26>)
  movs r3, #0
 800224a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800224c:	e001      	b.n	8002252 <LoopFillZerobss>

0800224e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800224e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002250:	3204      	adds	r2, #4

08002252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002254:	d3fb      	bcc.n	800224e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002256:	f7ff ffd7 	bl	8002208 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800225a:	f004 fcd7 	bl	8006c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800225e:	f7fe fb13 	bl	8000888 <main>
  bx  lr    
 8002262:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002264:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800226c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002270:	0800792c 	.word	0x0800792c
  ldr r2, =_sbss
 8002274:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002278:	200005cc 	.word	0x200005cc

0800227c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800227c:	e7fe      	b.n	800227c <ADC_IRQHandler>
	...

08002280 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002284:	4b0e      	ldr	r3, [pc, #56]	; (80022c0 <HAL_Init+0x40>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0d      	ldr	r2, [pc, #52]	; (80022c0 <HAL_Init+0x40>)
 800228a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800228e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002290:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <HAL_Init+0x40>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a0a      	ldr	r2, [pc, #40]	; (80022c0 <HAL_Init+0x40>)
 8002296:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800229a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800229c:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <HAL_Init+0x40>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a07      	ldr	r2, [pc, #28]	; (80022c0 <HAL_Init+0x40>)
 80022a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022a8:	2003      	movs	r0, #3
 80022aa:	f000 fbc1 	bl	8002a30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ae:	2000      	movs	r0, #0
 80022b0:	f000 f808 	bl	80022c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022b4:	f7ff fb12 	bl	80018dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40023c00 	.word	0x40023c00

080022c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022cc:	4b12      	ldr	r3, [pc, #72]	; (8002318 <HAL_InitTick+0x54>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	4b12      	ldr	r3, [pc, #72]	; (800231c <HAL_InitTick+0x58>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	4619      	mov	r1, r3
 80022d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022da:	fbb3 f3f1 	udiv	r3, r3, r1
 80022de:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 fbd9 	bl	8002a9a <HAL_SYSTICK_Config>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e00e      	b.n	8002310 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b0f      	cmp	r3, #15
 80022f6:	d80a      	bhi.n	800230e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022f8:	2200      	movs	r2, #0
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002300:	f000 fba1 	bl	8002a46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002304:	4a06      	ldr	r2, [pc, #24]	; (8002320 <HAL_InitTick+0x5c>)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800230a:	2300      	movs	r3, #0
 800230c:	e000      	b.n	8002310 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
}
 8002310:	4618      	mov	r0, r3
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20000000 	.word	0x20000000
 800231c:	20000008 	.word	0x20000008
 8002320:	20000004 	.word	0x20000004

08002324 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_IncTick+0x20>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	461a      	mov	r2, r3
 800232e:	4b06      	ldr	r3, [pc, #24]	; (8002348 <HAL_IncTick+0x24>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4413      	add	r3, r2
 8002334:	4a04      	ldr	r2, [pc, #16]	; (8002348 <HAL_IncTick+0x24>)
 8002336:	6013      	str	r3, [r2, #0]
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	20000008 	.word	0x20000008
 8002348:	2000047c 	.word	0x2000047c

0800234c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return uwTick;
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <HAL_GetTick+0x14>)
 8002352:	681b      	ldr	r3, [r3, #0]
}
 8002354:	4618      	mov	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	2000047c 	.word	0x2000047c

08002364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800236c:	f7ff ffee 	bl	800234c <HAL_GetTick>
 8002370:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800237c:	d005      	beq.n	800238a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800237e:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <HAL_Delay+0x44>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	461a      	mov	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4413      	add	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800238a:	bf00      	nop
 800238c:	f7ff ffde 	bl	800234c <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	429a      	cmp	r2, r3
 800239a:	d8f7      	bhi.n	800238c <HAL_Delay+0x28>
  {
  }
}
 800239c:	bf00      	nop
 800239e:	bf00      	nop
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000008 	.word	0x20000008

080023ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e033      	b.n	800242a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d109      	bne.n	80023de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff faae 	bl	800192c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d118      	bne.n	800241c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023f2:	f023 0302 	bic.w	r3, r3, #2
 80023f6:	f043 0202 	orr.w	r2, r3, #2
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f94a 	bl	8002698 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	f023 0303 	bic.w	r3, r3, #3
 8002412:	f043 0201 	orr.w	r2, r3, #1
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	641a      	str	r2, [r3, #64]	; 0x40
 800241a:	e001      	b.n	8002420 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002428:	7bfb      	ldrb	r3, [r7, #15]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800243e:	2300      	movs	r3, #0
 8002440:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002448:	2b01      	cmp	r3, #1
 800244a:	d101      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x1c>
 800244c:	2302      	movs	r3, #2
 800244e:	e113      	b.n	8002678 <HAL_ADC_ConfigChannel+0x244>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b09      	cmp	r3, #9
 800245e:	d925      	bls.n	80024ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68d9      	ldr	r1, [r3, #12]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	b29b      	uxth	r3, r3
 800246c:	461a      	mov	r2, r3
 800246e:	4613      	mov	r3, r2
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	4413      	add	r3, r2
 8002474:	3b1e      	subs	r3, #30
 8002476:	2207      	movs	r2, #7
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43da      	mvns	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	400a      	ands	r2, r1
 8002484:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68d9      	ldr	r1, [r3, #12]
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	b29b      	uxth	r3, r3
 8002496:	4618      	mov	r0, r3
 8002498:	4603      	mov	r3, r0
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	4403      	add	r3, r0
 800249e:	3b1e      	subs	r3, #30
 80024a0:	409a      	lsls	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	60da      	str	r2, [r3, #12]
 80024aa:	e022      	b.n	80024f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6919      	ldr	r1, [r3, #16]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	461a      	mov	r2, r3
 80024ba:	4613      	mov	r3, r2
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	4413      	add	r3, r2
 80024c0:	2207      	movs	r2, #7
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43da      	mvns	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	400a      	ands	r2, r1
 80024ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6919      	ldr	r1, [r3, #16]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	4618      	mov	r0, r3
 80024e2:	4603      	mov	r3, r0
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	4403      	add	r3, r0
 80024e8:	409a      	lsls	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b06      	cmp	r3, #6
 80024f8:	d824      	bhi.n	8002544 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	3b05      	subs	r3, #5
 800250c:	221f      	movs	r2, #31
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43da      	mvns	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	400a      	ands	r2, r1
 800251a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	b29b      	uxth	r3, r3
 8002528:	4618      	mov	r0, r3
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	3b05      	subs	r3, #5
 8002536:	fa00 f203 	lsl.w	r2, r0, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	635a      	str	r2, [r3, #52]	; 0x34
 8002542:	e04c      	b.n	80025de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b0c      	cmp	r3, #12
 800254a:	d824      	bhi.n	8002596 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	4613      	mov	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	3b23      	subs	r3, #35	; 0x23
 800255e:	221f      	movs	r2, #31
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43da      	mvns	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	400a      	ands	r2, r1
 800256c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	b29b      	uxth	r3, r3
 800257a:	4618      	mov	r0, r3
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	3b23      	subs	r3, #35	; 0x23
 8002588:	fa00 f203 	lsl.w	r2, r0, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	631a      	str	r2, [r3, #48]	; 0x30
 8002594:	e023      	b.n	80025de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	3b41      	subs	r3, #65	; 0x41
 80025a8:	221f      	movs	r2, #31
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43da      	mvns	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	400a      	ands	r2, r1
 80025b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	4618      	mov	r0, r3
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	3b41      	subs	r3, #65	; 0x41
 80025d2:	fa00 f203 	lsl.w	r2, r0, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025de:	4b29      	ldr	r3, [pc, #164]	; (8002684 <HAL_ADC_ConfigChannel+0x250>)
 80025e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a28      	ldr	r2, [pc, #160]	; (8002688 <HAL_ADC_ConfigChannel+0x254>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d10f      	bne.n	800260c <HAL_ADC_ConfigChannel+0x1d8>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b12      	cmp	r3, #18
 80025f2:	d10b      	bne.n	800260c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a1d      	ldr	r2, [pc, #116]	; (8002688 <HAL_ADC_ConfigChannel+0x254>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d12b      	bne.n	800266e <HAL_ADC_ConfigChannel+0x23a>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a1c      	ldr	r2, [pc, #112]	; (800268c <HAL_ADC_ConfigChannel+0x258>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d003      	beq.n	8002628 <HAL_ADC_ConfigChannel+0x1f4>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2b11      	cmp	r3, #17
 8002626:	d122      	bne.n	800266e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a11      	ldr	r2, [pc, #68]	; (800268c <HAL_ADC_ConfigChannel+0x258>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d111      	bne.n	800266e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800264a:	4b11      	ldr	r3, [pc, #68]	; (8002690 <HAL_ADC_ConfigChannel+0x25c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a11      	ldr	r2, [pc, #68]	; (8002694 <HAL_ADC_ConfigChannel+0x260>)
 8002650:	fba2 2303 	umull	r2, r3, r2, r3
 8002654:	0c9a      	lsrs	r2, r3, #18
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002660:	e002      	b.n	8002668 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	3b01      	subs	r3, #1
 8002666:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f9      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	40012300 	.word	0x40012300
 8002688:	40012000 	.word	0x40012000
 800268c:	10000012 	.word	0x10000012
 8002690:	20000000 	.word	0x20000000
 8002694:	431bde83 	.word	0x431bde83

08002698 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026a0:	4b79      	ldr	r3, [pc, #484]	; (8002888 <ADC_Init+0x1f0>)
 80026a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	431a      	orrs	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6859      	ldr	r1, [r3, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	021a      	lsls	r2, r3, #8
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6859      	ldr	r1, [r3, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689a      	ldr	r2, [r3, #8]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002712:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6899      	ldr	r1, [r3, #8]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272a:	4a58      	ldr	r2, [pc, #352]	; (800288c <ADC_Init+0x1f4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d022      	beq.n	8002776 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800273e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6899      	ldr	r1, [r3, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002760:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6899      	ldr	r1, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	e00f      	b.n	8002796 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002784:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002794:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0202 	bic.w	r2, r2, #2
 80027a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6899      	ldr	r1, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	7e1b      	ldrb	r3, [r3, #24]
 80027b0:	005a      	lsls	r2, r3, #1
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d01b      	beq.n	80027fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80027e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6859      	ldr	r1, [r3, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	3b01      	subs	r3, #1
 80027f0:	035a      	lsls	r2, r3, #13
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	e007      	b.n	800280c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800280a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800281a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	3b01      	subs	r3, #1
 8002828:	051a      	lsls	r2, r3, #20
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002840:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6899      	ldr	r1, [r3, #8]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800284e:	025a      	lsls	r2, r3, #9
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002866:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6899      	ldr	r1, [r3, #8]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	029a      	lsls	r2, r3, #10
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	609a      	str	r2, [r3, #8]
}
 800287c:	bf00      	nop
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	40012300 	.word	0x40012300
 800288c:	0f000001 	.word	0x0f000001

08002890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028a0:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <__NVIC_SetPriorityGrouping+0x44>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028ac:	4013      	ands	r3, r2
 80028ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028c2:	4a04      	ldr	r2, [pc, #16]	; (80028d4 <__NVIC_SetPriorityGrouping+0x44>)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	60d3      	str	r3, [r2, #12]
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028dc:	4b04      	ldr	r3, [pc, #16]	; (80028f0 <__NVIC_GetPriorityGrouping+0x18>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	0a1b      	lsrs	r3, r3, #8
 80028e2:	f003 0307 	and.w	r3, r3, #7
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002902:	2b00      	cmp	r3, #0
 8002904:	db0b      	blt.n	800291e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	f003 021f 	and.w	r2, r3, #31
 800290c:	4907      	ldr	r1, [pc, #28]	; (800292c <__NVIC_EnableIRQ+0x38>)
 800290e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	2001      	movs	r0, #1
 8002916:	fa00 f202 	lsl.w	r2, r0, r2
 800291a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	e000e100 	.word	0xe000e100

08002930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	6039      	str	r1, [r7, #0]
 800293a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800293c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002940:	2b00      	cmp	r3, #0
 8002942:	db0a      	blt.n	800295a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	b2da      	uxtb	r2, r3
 8002948:	490c      	ldr	r1, [pc, #48]	; (800297c <__NVIC_SetPriority+0x4c>)
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	0112      	lsls	r2, r2, #4
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	440b      	add	r3, r1
 8002954:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002958:	e00a      	b.n	8002970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	b2da      	uxtb	r2, r3
 800295e:	4908      	ldr	r1, [pc, #32]	; (8002980 <__NVIC_SetPriority+0x50>)
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	3b04      	subs	r3, #4
 8002968:	0112      	lsls	r2, r2, #4
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	440b      	add	r3, r1
 800296e:	761a      	strb	r2, [r3, #24]
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	e000e100 	.word	0xe000e100
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002984:	b480      	push	{r7}
 8002986:	b089      	sub	sp, #36	; 0x24
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f1c3 0307 	rsb	r3, r3, #7
 800299e:	2b04      	cmp	r3, #4
 80029a0:	bf28      	it	cs
 80029a2:	2304      	movcs	r3, #4
 80029a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	3304      	adds	r3, #4
 80029aa:	2b06      	cmp	r3, #6
 80029ac:	d902      	bls.n	80029b4 <NVIC_EncodePriority+0x30>
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3b03      	subs	r3, #3
 80029b2:	e000      	b.n	80029b6 <NVIC_EncodePriority+0x32>
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43da      	mvns	r2, r3
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	401a      	ands	r2, r3
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	fa01 f303 	lsl.w	r3, r1, r3
 80029d6:	43d9      	mvns	r1, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029dc:	4313      	orrs	r3, r2
         );
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3724      	adds	r7, #36	; 0x24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
	...

080029ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029fc:	d301      	bcc.n	8002a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029fe:	2301      	movs	r3, #1
 8002a00:	e00f      	b.n	8002a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a02:	4a0a      	ldr	r2, [pc, #40]	; (8002a2c <SysTick_Config+0x40>)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a0a:	210f      	movs	r1, #15
 8002a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a10:	f7ff ff8e 	bl	8002930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a14:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <SysTick_Config+0x40>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a1a:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <SysTick_Config+0x40>)
 8002a1c:	2207      	movs	r2, #7
 8002a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	e000e010 	.word	0xe000e010

08002a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7ff ff29 	bl	8002890 <__NVIC_SetPriorityGrouping>
}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b086      	sub	sp, #24
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	607a      	str	r2, [r7, #4]
 8002a52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a58:	f7ff ff3e 	bl	80028d8 <__NVIC_GetPriorityGrouping>
 8002a5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	68b9      	ldr	r1, [r7, #8]
 8002a62:	6978      	ldr	r0, [r7, #20]
 8002a64:	f7ff ff8e 	bl	8002984 <NVIC_EncodePriority>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a6e:	4611      	mov	r1, r2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff ff5d 	bl	8002930 <__NVIC_SetPriority>
}
 8002a76:	bf00      	nop
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	4603      	mov	r3, r0
 8002a86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff ff31 	bl	80028f4 <__NVIC_EnableIRQ>
}
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7ff ffa2 	bl	80029ec <SysTick_Config>
 8002aa8:	4603      	mov	r3, r0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b089      	sub	sp, #36	; 0x24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aca:	2300      	movs	r3, #0
 8002acc:	61fb      	str	r3, [r7, #28]
 8002ace:	e165      	b.n	8002d9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	f040 8154 	bne.w	8002d96 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d005      	beq.n	8002b06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d130      	bne.n	8002b68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	2203      	movs	r2, #3
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43db      	mvns	r3, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	68da      	ldr	r2, [r3, #12]
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43db      	mvns	r3, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	091b      	lsrs	r3, r3, #4
 8002b52:	f003 0201 	and.w	r2, r3, #1
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 0303 	and.w	r3, r3, #3
 8002b70:	2b03      	cmp	r3, #3
 8002b72:	d017      	beq.n	8002ba4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	2203      	movs	r2, #3
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f003 0303 	and.w	r3, r3, #3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d123      	bne.n	8002bf8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	08da      	lsrs	r2, r3, #3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3208      	adds	r2, #8
 8002bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	220f      	movs	r2, #15
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	691a      	ldr	r2, [r3, #16]
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	08da      	lsrs	r2, r3, #3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3208      	adds	r2, #8
 8002bf2:	69b9      	ldr	r1, [r7, #24]
 8002bf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	2203      	movs	r2, #3
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 0203 	and.w	r2, r3, #3
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 80ae 	beq.w	8002d96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	4b5d      	ldr	r3, [pc, #372]	; (8002db4 <HAL_GPIO_Init+0x300>)
 8002c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c42:	4a5c      	ldr	r2, [pc, #368]	; (8002db4 <HAL_GPIO_Init+0x300>)
 8002c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c48:	6453      	str	r3, [r2, #68]	; 0x44
 8002c4a:	4b5a      	ldr	r3, [pc, #360]	; (8002db4 <HAL_GPIO_Init+0x300>)
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c56:	4a58      	ldr	r2, [pc, #352]	; (8002db8 <HAL_GPIO_Init+0x304>)
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	089b      	lsrs	r3, r3, #2
 8002c5c:	3302      	adds	r3, #2
 8002c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f003 0303 	and.w	r3, r3, #3
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	220f      	movs	r2, #15
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	43db      	mvns	r3, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4013      	ands	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a4f      	ldr	r2, [pc, #316]	; (8002dbc <HAL_GPIO_Init+0x308>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d025      	beq.n	8002cce <HAL_GPIO_Init+0x21a>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a4e      	ldr	r2, [pc, #312]	; (8002dc0 <HAL_GPIO_Init+0x30c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d01f      	beq.n	8002cca <HAL_GPIO_Init+0x216>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a4d      	ldr	r2, [pc, #308]	; (8002dc4 <HAL_GPIO_Init+0x310>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d019      	beq.n	8002cc6 <HAL_GPIO_Init+0x212>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a4c      	ldr	r2, [pc, #304]	; (8002dc8 <HAL_GPIO_Init+0x314>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d013      	beq.n	8002cc2 <HAL_GPIO_Init+0x20e>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a4b      	ldr	r2, [pc, #300]	; (8002dcc <HAL_GPIO_Init+0x318>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d00d      	beq.n	8002cbe <HAL_GPIO_Init+0x20a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a4a      	ldr	r2, [pc, #296]	; (8002dd0 <HAL_GPIO_Init+0x31c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d007      	beq.n	8002cba <HAL_GPIO_Init+0x206>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a49      	ldr	r2, [pc, #292]	; (8002dd4 <HAL_GPIO_Init+0x320>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d101      	bne.n	8002cb6 <HAL_GPIO_Init+0x202>
 8002cb2:	2306      	movs	r3, #6
 8002cb4:	e00c      	b.n	8002cd0 <HAL_GPIO_Init+0x21c>
 8002cb6:	2307      	movs	r3, #7
 8002cb8:	e00a      	b.n	8002cd0 <HAL_GPIO_Init+0x21c>
 8002cba:	2305      	movs	r3, #5
 8002cbc:	e008      	b.n	8002cd0 <HAL_GPIO_Init+0x21c>
 8002cbe:	2304      	movs	r3, #4
 8002cc0:	e006      	b.n	8002cd0 <HAL_GPIO_Init+0x21c>
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e004      	b.n	8002cd0 <HAL_GPIO_Init+0x21c>
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	e002      	b.n	8002cd0 <HAL_GPIO_Init+0x21c>
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <HAL_GPIO_Init+0x21c>
 8002cce:	2300      	movs	r3, #0
 8002cd0:	69fa      	ldr	r2, [r7, #28]
 8002cd2:	f002 0203 	and.w	r2, r2, #3
 8002cd6:	0092      	lsls	r2, r2, #2
 8002cd8:	4093      	lsls	r3, r2
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ce0:	4935      	ldr	r1, [pc, #212]	; (8002db8 <HAL_GPIO_Init+0x304>)
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	089b      	lsrs	r3, r3, #2
 8002ce6:	3302      	adds	r3, #2
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cee:	4b3a      	ldr	r3, [pc, #232]	; (8002dd8 <HAL_GPIO_Init+0x324>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d12:	4a31      	ldr	r2, [pc, #196]	; (8002dd8 <HAL_GPIO_Init+0x324>)
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d18:	4b2f      	ldr	r3, [pc, #188]	; (8002dd8 <HAL_GPIO_Init+0x324>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	43db      	mvns	r3, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4013      	ands	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d003      	beq.n	8002d3c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d3c:	4a26      	ldr	r2, [pc, #152]	; (8002dd8 <HAL_GPIO_Init+0x324>)
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d42:	4b25      	ldr	r3, [pc, #148]	; (8002dd8 <HAL_GPIO_Init+0x324>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d66:	4a1c      	ldr	r2, [pc, #112]	; (8002dd8 <HAL_GPIO_Init+0x324>)
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d6c:	4b1a      	ldr	r3, [pc, #104]	; (8002dd8 <HAL_GPIO_Init+0x324>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d90:	4a11      	ldr	r2, [pc, #68]	; (8002dd8 <HAL_GPIO_Init+0x324>)
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	61fb      	str	r3, [r7, #28]
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	2b0f      	cmp	r3, #15
 8002da0:	f67f ae96 	bls.w	8002ad0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002da4:	bf00      	nop
 8002da6:	bf00      	nop
 8002da8:	3724      	adds	r7, #36	; 0x24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40023800 	.word	0x40023800
 8002db8:	40013800 	.word	0x40013800
 8002dbc:	40020000 	.word	0x40020000
 8002dc0:	40020400 	.word	0x40020400
 8002dc4:	40020800 	.word	0x40020800
 8002dc8:	40020c00 	.word	0x40020c00
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	40021400 	.word	0x40021400
 8002dd4:	40021800 	.word	0x40021800
 8002dd8:	40013c00 	.word	0x40013c00

08002ddc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e12b      	b.n	8003046 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7fe fdd6 	bl	80019b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2224      	movs	r2, #36	; 0x24
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0201 	bic.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e40:	f000 fa52 	bl	80032e8 <HAL_RCC_GetPCLK1Freq>
 8002e44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	4a81      	ldr	r2, [pc, #516]	; (8003050 <HAL_I2C_Init+0x274>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d807      	bhi.n	8002e60 <HAL_I2C_Init+0x84>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4a80      	ldr	r2, [pc, #512]	; (8003054 <HAL_I2C_Init+0x278>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	bf94      	ite	ls
 8002e58:	2301      	movls	r3, #1
 8002e5a:	2300      	movhi	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	e006      	b.n	8002e6e <HAL_I2C_Init+0x92>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4a7d      	ldr	r2, [pc, #500]	; (8003058 <HAL_I2C_Init+0x27c>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	bf94      	ite	ls
 8002e68:	2301      	movls	r3, #1
 8002e6a:	2300      	movhi	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e0e7      	b.n	8003046 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4a78      	ldr	r2, [pc, #480]	; (800305c <HAL_I2C_Init+0x280>)
 8002e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7e:	0c9b      	lsrs	r3, r3, #18
 8002e80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	4a6a      	ldr	r2, [pc, #424]	; (8003050 <HAL_I2C_Init+0x274>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d802      	bhi.n	8002eb0 <HAL_I2C_Init+0xd4>
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	3301      	adds	r3, #1
 8002eae:	e009      	b.n	8002ec4 <HAL_I2C_Init+0xe8>
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002eb6:	fb02 f303 	mul.w	r3, r2, r3
 8002eba:	4a69      	ldr	r2, [pc, #420]	; (8003060 <HAL_I2C_Init+0x284>)
 8002ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec0:	099b      	lsrs	r3, r3, #6
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ed6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	495c      	ldr	r1, [pc, #368]	; (8003050 <HAL_I2C_Init+0x274>)
 8002ee0:	428b      	cmp	r3, r1
 8002ee2:	d819      	bhi.n	8002f18 <HAL_I2C_Init+0x13c>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	1e59      	subs	r1, r3, #1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ef2:	1c59      	adds	r1, r3, #1
 8002ef4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ef8:	400b      	ands	r3, r1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00a      	beq.n	8002f14 <HAL_I2C_Init+0x138>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	1e59      	subs	r1, r3, #1
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f12:	e051      	b.n	8002fb8 <HAL_I2C_Init+0x1dc>
 8002f14:	2304      	movs	r3, #4
 8002f16:	e04f      	b.n	8002fb8 <HAL_I2C_Init+0x1dc>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d111      	bne.n	8002f44 <HAL_I2C_Init+0x168>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	1e58      	subs	r0, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6859      	ldr	r1, [r3, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	440b      	add	r3, r1
 8002f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f32:	3301      	adds	r3, #1
 8002f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bf0c      	ite	eq
 8002f3c:	2301      	moveq	r3, #1
 8002f3e:	2300      	movne	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	e012      	b.n	8002f6a <HAL_I2C_Init+0x18e>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	1e58      	subs	r0, r3, #1
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6859      	ldr	r1, [r3, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	0099      	lsls	r1, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf0c      	ite	eq
 8002f64:	2301      	moveq	r3, #1
 8002f66:	2300      	movne	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_I2C_Init+0x196>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e022      	b.n	8002fb8 <HAL_I2C_Init+0x1dc>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10e      	bne.n	8002f98 <HAL_I2C_Init+0x1bc>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	1e58      	subs	r0, r3, #1
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6859      	ldr	r1, [r3, #4]
 8002f82:	460b      	mov	r3, r1
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	440b      	add	r3, r1
 8002f88:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f96:	e00f      	b.n	8002fb8 <HAL_I2C_Init+0x1dc>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	1e58      	subs	r0, r3, #1
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6859      	ldr	r1, [r3, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	0099      	lsls	r1, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fae:	3301      	adds	r3, #1
 8002fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	6809      	ldr	r1, [r1, #0]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69da      	ldr	r2, [r3, #28]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fe6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6911      	ldr	r1, [r2, #16]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	68d2      	ldr	r2, [r2, #12]
 8002ff2:	4311      	orrs	r1, r2
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695a      	ldr	r2, [r3, #20]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0201 	orr.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2220      	movs	r2, #32
 8003032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	000186a0 	.word	0x000186a0
 8003054:	001e847f 	.word	0x001e847f
 8003058:	003d08ff 	.word	0x003d08ff
 800305c:	431bde83 	.word	0x431bde83
 8003060:	10624dd3 	.word	0x10624dd3

08003064 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800306a:	2300      	movs	r3, #0
 800306c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800306e:	2300      	movs	r3, #0
 8003070:	603b      	str	r3, [r7, #0]
 8003072:	4b20      	ldr	r3, [pc, #128]	; (80030f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	4a1f      	ldr	r2, [pc, #124]	; (80030f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800307c:	6413      	str	r3, [r2, #64]	; 0x40
 800307e:	4b1d      	ldr	r3, [pc, #116]	; (80030f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003086:	603b      	str	r3, [r7, #0]
 8003088:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800308a:	4b1b      	ldr	r3, [pc, #108]	; (80030f8 <HAL_PWREx_EnableOverDrive+0x94>)
 800308c:	2201      	movs	r2, #1
 800308e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003090:	f7ff f95c 	bl	800234c <HAL_GetTick>
 8003094:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003096:	e009      	b.n	80030ac <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003098:	f7ff f958 	bl	800234c <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030a6:	d901      	bls.n	80030ac <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e01f      	b.n	80030ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030ac:	4b13      	ldr	r3, [pc, #76]	; (80030fc <HAL_PWREx_EnableOverDrive+0x98>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b8:	d1ee      	bne.n	8003098 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80030ba:	4b11      	ldr	r3, [pc, #68]	; (8003100 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030bc:	2201      	movs	r2, #1
 80030be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030c0:	f7ff f944 	bl	800234c <HAL_GetTick>
 80030c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030c6:	e009      	b.n	80030dc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030c8:	f7ff f940 	bl	800234c <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030d6:	d901      	bls.n	80030dc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e007      	b.n	80030ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030dc:	4b07      	ldr	r3, [pc, #28]	; (80030fc <HAL_PWREx_EnableOverDrive+0x98>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030e8:	d1ee      	bne.n	80030c8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40023800 	.word	0x40023800
 80030f8:	420e0040 	.word	0x420e0040
 80030fc:	40007000 	.word	0x40007000
 8003100:	420e0044 	.word	0x420e0044

08003104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e0cc      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003118:	4b68      	ldr	r3, [pc, #416]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 030f 	and.w	r3, r3, #15
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d90c      	bls.n	8003140 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003126:	4b65      	ldr	r3, [pc, #404]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800312e:	4b63      	ldr	r3, [pc, #396]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	429a      	cmp	r2, r3
 800313a:	d001      	beq.n	8003140 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0b8      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d020      	beq.n	800318e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d005      	beq.n	8003164 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003158:	4b59      	ldr	r3, [pc, #356]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	4a58      	ldr	r2, [pc, #352]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003162:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003170:	4b53      	ldr	r3, [pc, #332]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	4a52      	ldr	r2, [pc, #328]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800317a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800317c:	4b50      	ldr	r3, [pc, #320]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	494d      	ldr	r1, [pc, #308]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	4313      	orrs	r3, r2
 800318c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d044      	beq.n	8003224 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d107      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a2:	4b47      	ldr	r3, [pc, #284]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d119      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e07f      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d003      	beq.n	80031c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031be:	2b03      	cmp	r3, #3
 80031c0:	d107      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c2:	4b3f      	ldr	r3, [pc, #252]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d109      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e06f      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d2:	4b3b      	ldr	r3, [pc, #236]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e067      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031e2:	4b37      	ldr	r3, [pc, #220]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f023 0203 	bic.w	r2, r3, #3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	4934      	ldr	r1, [pc, #208]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031f4:	f7ff f8aa 	bl	800234c <HAL_GetTick>
 80031f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fa:	e00a      	b.n	8003212 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031fc:	f7ff f8a6 	bl	800234c <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f241 3288 	movw	r2, #5000	; 0x1388
 800320a:	4293      	cmp	r3, r2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e04f      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003212:	4b2b      	ldr	r3, [pc, #172]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 020c 	and.w	r2, r3, #12
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	429a      	cmp	r2, r3
 8003222:	d1eb      	bne.n	80031fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003224:	4b25      	ldr	r3, [pc, #148]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 030f 	and.w	r3, r3, #15
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d20c      	bcs.n	800324c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003232:	4b22      	ldr	r3, [pc, #136]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800323a:	4b20      	ldr	r3, [pc, #128]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d001      	beq.n	800324c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e032      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	d008      	beq.n	800326a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003258:	4b19      	ldr	r3, [pc, #100]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	4916      	ldr	r1, [pc, #88]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	4313      	orrs	r3, r2
 8003268:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b00      	cmp	r3, #0
 8003274:	d009      	beq.n	800328a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003276:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	490e      	ldr	r1, [pc, #56]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	4313      	orrs	r3, r2
 8003288:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800328a:	f000 fb7f 	bl	800398c <HAL_RCC_GetSysClockFreq>
 800328e:	4602      	mov	r2, r0
 8003290:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	490a      	ldr	r1, [pc, #40]	; (80032c4 <HAL_RCC_ClockConfig+0x1c0>)
 800329c:	5ccb      	ldrb	r3, [r1, r3]
 800329e:	fa22 f303 	lsr.w	r3, r2, r3
 80032a2:	4a09      	ldr	r2, [pc, #36]	; (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 80032a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032a6:	4b09      	ldr	r3, [pc, #36]	; (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff f80a 	bl	80022c4 <HAL_InitTick>

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40023c00 	.word	0x40023c00
 80032c0:	40023800 	.word	0x40023800
 80032c4:	080078d0 	.word	0x080078d0
 80032c8:	20000000 	.word	0x20000000
 80032cc:	20000004 	.word	0x20000004

080032d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032d4:	4b03      	ldr	r3, [pc, #12]	; (80032e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80032d6:	681b      	ldr	r3, [r3, #0]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	20000000 	.word	0x20000000

080032e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032ec:	f7ff fff0 	bl	80032d0 <HAL_RCC_GetHCLKFreq>
 80032f0:	4602      	mov	r2, r0
 80032f2:	4b05      	ldr	r3, [pc, #20]	; (8003308 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	0a9b      	lsrs	r3, r3, #10
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	4903      	ldr	r1, [pc, #12]	; (800330c <HAL_RCC_GetPCLK1Freq+0x24>)
 80032fe:	5ccb      	ldrb	r3, [r1, r3]
 8003300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003304:	4618      	mov	r0, r3
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40023800 	.word	0x40023800
 800330c:	080078e0 	.word	0x080078e0

08003310 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003314:	f7ff ffdc 	bl	80032d0 <HAL_RCC_GetHCLKFreq>
 8003318:	4602      	mov	r2, r0
 800331a:	4b05      	ldr	r3, [pc, #20]	; (8003330 <HAL_RCC_GetPCLK2Freq+0x20>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	0b5b      	lsrs	r3, r3, #13
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	4903      	ldr	r1, [pc, #12]	; (8003334 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003326:	5ccb      	ldrb	r3, [r1, r3]
 8003328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800332c:	4618      	mov	r0, r3
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40023800 	.word	0x40023800
 8003334:	080078e0 	.word	0x080078e0

08003338 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b08c      	sub	sp, #48	; 0x30
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003358:	2300      	movs	r3, #0
 800335a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b00      	cmp	r3, #0
 800336e:	d010      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003370:	4b6f      	ldr	r3, [pc, #444]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003372:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003376:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337e:	496c      	ldr	r1, [pc, #432]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003380:	4313      	orrs	r3, r2
 8003382:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800338e:	2301      	movs	r3, #1
 8003390:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d010      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800339e:	4b64      	ldr	r3, [pc, #400]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033a4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ac:	4960      	ldr	r1, [pc, #384]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80033bc:	2301      	movs	r3, #1
 80033be:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d017      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033cc:	4b58      	ldr	r3, [pc, #352]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	4955      	ldr	r1, [pc, #340]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ea:	d101      	bne.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80033ec:	2301      	movs	r3, #1
 80033ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80033f8:	2301      	movs	r3, #1
 80033fa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b00      	cmp	r3, #0
 8003406:	d017      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003408:	4b49      	ldr	r3, [pc, #292]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800340a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800340e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003416:	4946      	ldr	r1, [pc, #280]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003418:	4313      	orrs	r3, r2
 800341a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003422:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003426:	d101      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003428:	2301      	movs	r3, #1
 800342a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003434:	2301      	movs	r3, #1
 8003436:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0320 	and.w	r3, r3, #32
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 808a 	beq.w	800355a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	60bb      	str	r3, [r7, #8]
 800344a:	4b39      	ldr	r3, [pc, #228]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	4a38      	ldr	r2, [pc, #224]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003454:	6413      	str	r3, [r2, #64]	; 0x40
 8003456:	4b36      	ldr	r3, [pc, #216]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345e:	60bb      	str	r3, [r7, #8]
 8003460:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003462:	4b34      	ldr	r3, [pc, #208]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a33      	ldr	r2, [pc, #204]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800346c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800346e:	f7fe ff6d 	bl	800234c <HAL_GetTick>
 8003472:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003474:	e008      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003476:	f7fe ff69 	bl	800234c <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e278      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003488:	4b2a      	ldr	r3, [pc, #168]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0f0      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003494:	4b26      	ldr	r3, [pc, #152]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003498:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d02f      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ac:	6a3a      	ldr	r2, [r7, #32]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d028      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034b2:	4b1f      	ldr	r3, [pc, #124]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ba:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034bc:	4b1e      	ldr	r3, [pc, #120]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80034be:	2201      	movs	r2, #1
 80034c0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034c2:	4b1d      	ldr	r3, [pc, #116]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80034c8:	4a19      	ldr	r2, [pc, #100]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80034ce:	4b18      	ldr	r3, [pc, #96]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d114      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80034da:	f7fe ff37 	bl	800234c <HAL_GetTick>
 80034de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e0:	e00a      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034e2:	f7fe ff33 	bl	800234c <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e240      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f8:	4b0d      	ldr	r3, [pc, #52]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0ee      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800350c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003510:	d114      	bne.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003512:	4b07      	ldr	r3, [pc, #28]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003526:	4902      	ldr	r1, [pc, #8]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003528:	4313      	orrs	r3, r2
 800352a:	608b      	str	r3, [r1, #8]
 800352c:	e00c      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800352e:	bf00      	nop
 8003530:	40023800 	.word	0x40023800
 8003534:	40007000 	.word	0x40007000
 8003538:	42470e40 	.word	0x42470e40
 800353c:	4b4a      	ldr	r3, [pc, #296]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	4a49      	ldr	r2, [pc, #292]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003542:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003546:	6093      	str	r3, [r2, #8]
 8003548:	4b47      	ldr	r3, [pc, #284]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800354a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003554:	4944      	ldr	r1, [pc, #272]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003556:	4313      	orrs	r3, r2
 8003558:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0310 	and.w	r3, r3, #16
 8003562:	2b00      	cmp	r3, #0
 8003564:	d004      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800356c:	4b3f      	ldr	r3, [pc, #252]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800356e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00a      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800357c:	4b3a      	ldr	r3, [pc, #232]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800357e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003582:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800358a:	4937      	ldr	r1, [pc, #220]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800359e:	4b32      	ldr	r3, [pc, #200]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035a4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ac:	492e      	ldr	r1, [pc, #184]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d011      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80035c0:	4b29      	ldr	r3, [pc, #164]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035c6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ce:	4926      	ldr	r1, [pc, #152]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035de:	d101      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80035e0:	2301      	movs	r3, #1
 80035e2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00a      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80035f0:	4b1d      	ldr	r3, [pc, #116]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035f6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fe:	491a      	ldr	r1, [pc, #104]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003600:	4313      	orrs	r3, r2
 8003602:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800360e:	2b00      	cmp	r3, #0
 8003610:	d011      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003612:	4b15      	ldr	r3, [pc, #84]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003614:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003618:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003620:	4911      	ldr	r1, [pc, #68]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003622:	4313      	orrs	r3, r2
 8003624:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800362c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003630:	d101      	bne.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003632:	2301      	movs	r3, #1
 8003634:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003638:	2b01      	cmp	r3, #1
 800363a:	d005      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003644:	f040 80ff 	bne.w	8003846 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003648:	4b09      	ldr	r3, [pc, #36]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800364a:	2200      	movs	r2, #0
 800364c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800364e:	f7fe fe7d 	bl	800234c <HAL_GetTick>
 8003652:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003654:	e00e      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003656:	f7fe fe79 	bl	800234c <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d907      	bls.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e188      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003668:	40023800 	.word	0x40023800
 800366c:	424711e0 	.word	0x424711e0
 8003670:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003674:	4b7e      	ldr	r3, [pc, #504]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1ea      	bne.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003690:	2b00      	cmp	r3, #0
 8003692:	d009      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800369c:	2b00      	cmp	r3, #0
 800369e:	d028      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d124      	bne.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80036a8:	4b71      	ldr	r3, [pc, #452]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ae:	0c1b      	lsrs	r3, r3, #16
 80036b0:	f003 0303 	and.w	r3, r3, #3
 80036b4:	3301      	adds	r3, #1
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036ba:	4b6d      	ldr	r3, [pc, #436]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036c0:	0e1b      	lsrs	r3, r3, #24
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	019b      	lsls	r3, r3, #6
 80036d2:	431a      	orrs	r2, r3
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	085b      	lsrs	r3, r3, #1
 80036d8:	3b01      	subs	r3, #1
 80036da:	041b      	lsls	r3, r3, #16
 80036dc:	431a      	orrs	r2, r3
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	061b      	lsls	r3, r3, #24
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	071b      	lsls	r3, r3, #28
 80036ea:	4961      	ldr	r1, [pc, #388]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d004      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003706:	d00a      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003710:	2b00      	cmp	r3, #0
 8003712:	d035      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003718:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800371c:	d130      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800371e:	4b54      	ldr	r3, [pc, #336]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003724:	0c1b      	lsrs	r3, r3, #16
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	3301      	adds	r3, #1
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003730:	4b4f      	ldr	r3, [pc, #316]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003732:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003736:	0f1b      	lsrs	r3, r3, #28
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	019b      	lsls	r3, r3, #6
 8003748:	431a      	orrs	r2, r3
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	085b      	lsrs	r3, r3, #1
 800374e:	3b01      	subs	r3, #1
 8003750:	041b      	lsls	r3, r3, #16
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	061b      	lsls	r3, r3, #24
 800375a:	431a      	orrs	r2, r3
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	071b      	lsls	r3, r3, #28
 8003760:	4943      	ldr	r1, [pc, #268]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003762:	4313      	orrs	r3, r2
 8003764:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003768:	4b41      	ldr	r3, [pc, #260]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800376a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800376e:	f023 021f 	bic.w	r2, r3, #31
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003776:	3b01      	subs	r3, #1
 8003778:	493d      	ldr	r1, [pc, #244]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800377a:	4313      	orrs	r3, r2
 800377c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003788:	2b00      	cmp	r3, #0
 800378a:	d029      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003790:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003794:	d124      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003796:	4b36      	ldr	r3, [pc, #216]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003798:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800379c:	0c1b      	lsrs	r3, r3, #16
 800379e:	f003 0303 	and.w	r3, r3, #3
 80037a2:	3301      	adds	r3, #1
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037a8:	4b31      	ldr	r3, [pc, #196]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ae:	0f1b      	lsrs	r3, r3, #28
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	019b      	lsls	r3, r3, #6
 80037c0:	431a      	orrs	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	085b      	lsrs	r3, r3, #1
 80037c8:	3b01      	subs	r3, #1
 80037ca:	041b      	lsls	r3, r3, #16
 80037cc:	431a      	orrs	r2, r3
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	061b      	lsls	r3, r3, #24
 80037d2:	431a      	orrs	r2, r3
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	071b      	lsls	r3, r3, #28
 80037d8:	4925      	ldr	r1, [pc, #148]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d016      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	019b      	lsls	r3, r3, #6
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	085b      	lsrs	r3, r3, #1
 80037fe:	3b01      	subs	r3, #1
 8003800:	041b      	lsls	r3, r3, #16
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	061b      	lsls	r3, r3, #24
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	071b      	lsls	r3, r3, #28
 8003812:	4917      	ldr	r1, [pc, #92]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800381a:	4b16      	ldr	r3, [pc, #88]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800381c:	2201      	movs	r2, #1
 800381e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003820:	f7fe fd94 	bl	800234c <HAL_GetTick>
 8003824:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003826:	e008      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003828:	f7fe fd90 	bl	800234c <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d901      	bls.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e09f      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800383a:	4b0d      	ldr	r3, [pc, #52]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0f0      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003848:	2b01      	cmp	r3, #1
 800384a:	f040 8095 	bne.w	8003978 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800384e:	4b0a      	ldr	r3, [pc, #40]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003850:	2200      	movs	r2, #0
 8003852:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003854:	f7fe fd7a 	bl	800234c <HAL_GetTick>
 8003858:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800385a:	e00f      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800385c:	f7fe fd76 	bl	800234c <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d908      	bls.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e085      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800386e:	bf00      	nop
 8003870:	40023800 	.word	0x40023800
 8003874:	42470068 	.word	0x42470068
 8003878:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800387c:	4b41      	ldr	r3, [pc, #260]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003884:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003888:	d0e8      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0304 	and.w	r3, r3, #4
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	2b00      	cmp	r3, #0
 800389c:	d009      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d02b      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d127      	bne.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80038b2:	4b34      	ldr	r3, [pc, #208]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b8:	0c1b      	lsrs	r3, r3, #16
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	3301      	adds	r3, #1
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	699a      	ldr	r2, [r3, #24]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	019b      	lsls	r3, r3, #6
 80038ce:	431a      	orrs	r2, r3
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	085b      	lsrs	r3, r3, #1
 80038d4:	3b01      	subs	r3, #1
 80038d6:	041b      	lsls	r3, r3, #16
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	061b      	lsls	r3, r3, #24
 80038e0:	4928      	ldr	r1, [pc, #160]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80038e8:	4b26      	ldr	r3, [pc, #152]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038ee:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f6:	3b01      	subs	r3, #1
 80038f8:	021b      	lsls	r3, r3, #8
 80038fa:	4922      	ldr	r1, [pc, #136]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390a:	2b00      	cmp	r3, #0
 800390c:	d01d      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x612>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003912:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003916:	d118      	bne.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003918:	4b1a      	ldr	r3, [pc, #104]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800391a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391e:	0e1b      	lsrs	r3, r3, #24
 8003920:	f003 030f 	and.w	r3, r3, #15
 8003924:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699a      	ldr	r2, [r3, #24]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	019b      	lsls	r3, r3, #6
 8003930:	431a      	orrs	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	085b      	lsrs	r3, r3, #1
 8003938:	3b01      	subs	r3, #1
 800393a:	041b      	lsls	r3, r3, #16
 800393c:	431a      	orrs	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	061b      	lsls	r3, r3, #24
 8003942:	4910      	ldr	r1, [pc, #64]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003944:	4313      	orrs	r3, r2
 8003946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800394a:	4b0f      	ldr	r3, [pc, #60]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800394c:	2201      	movs	r2, #1
 800394e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003950:	f7fe fcfc 	bl	800234c <HAL_GetTick>
 8003954:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003956:	e008      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003958:	f7fe fcf8 	bl	800234c <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e007      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800396a:	4b06      	ldr	r3, [pc, #24]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003972:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003976:	d1ef      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3730      	adds	r7, #48	; 0x30
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40023800 	.word	0x40023800
 8003988:	42470070 	.word	0x42470070

0800398c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800398c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003990:	b0ae      	sub	sp, #184	; 0xb8
 8003992:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003994:	2300      	movs	r3, #0
 8003996:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800399a:	2300      	movs	r3, #0
 800399c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80039a0:	2300      	movs	r3, #0
 80039a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039b2:	4bcb      	ldr	r3, [pc, #812]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x354>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 030c 	and.w	r3, r3, #12
 80039ba:	2b0c      	cmp	r3, #12
 80039bc:	f200 8206 	bhi.w	8003dcc <HAL_RCC_GetSysClockFreq+0x440>
 80039c0:	a201      	add	r2, pc, #4	; (adr r2, 80039c8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80039c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c6:	bf00      	nop
 80039c8:	080039fd 	.word	0x080039fd
 80039cc:	08003dcd 	.word	0x08003dcd
 80039d0:	08003dcd 	.word	0x08003dcd
 80039d4:	08003dcd 	.word	0x08003dcd
 80039d8:	08003a05 	.word	0x08003a05
 80039dc:	08003dcd 	.word	0x08003dcd
 80039e0:	08003dcd 	.word	0x08003dcd
 80039e4:	08003dcd 	.word	0x08003dcd
 80039e8:	08003a0d 	.word	0x08003a0d
 80039ec:	08003dcd 	.word	0x08003dcd
 80039f0:	08003dcd 	.word	0x08003dcd
 80039f4:	08003dcd 	.word	0x08003dcd
 80039f8:	08003bfd 	.word	0x08003bfd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039fc:	4bb9      	ldr	r3, [pc, #740]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x358>)
 80039fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003a02:	e1e7      	b.n	8003dd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a04:	4bb8      	ldr	r3, [pc, #736]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003a06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003a0a:	e1e3      	b.n	8003dd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a0c:	4bb4      	ldr	r3, [pc, #720]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a18:	4bb1      	ldr	r3, [pc, #708]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d071      	beq.n	8003b08 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a24:	4bae      	ldr	r3, [pc, #696]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	099b      	lsrs	r3, r3, #6
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a30:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003a34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a40:	2300      	movs	r3, #0
 8003a42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a4a:	4622      	mov	r2, r4
 8003a4c:	462b      	mov	r3, r5
 8003a4e:	f04f 0000 	mov.w	r0, #0
 8003a52:	f04f 0100 	mov.w	r1, #0
 8003a56:	0159      	lsls	r1, r3, #5
 8003a58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a5c:	0150      	lsls	r0, r2, #5
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	4621      	mov	r1, r4
 8003a64:	1a51      	subs	r1, r2, r1
 8003a66:	6439      	str	r1, [r7, #64]	; 0x40
 8003a68:	4629      	mov	r1, r5
 8003a6a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a6e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a70:	f04f 0200 	mov.w	r2, #0
 8003a74:	f04f 0300 	mov.w	r3, #0
 8003a78:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003a7c:	4649      	mov	r1, r9
 8003a7e:	018b      	lsls	r3, r1, #6
 8003a80:	4641      	mov	r1, r8
 8003a82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a86:	4641      	mov	r1, r8
 8003a88:	018a      	lsls	r2, r1, #6
 8003a8a:	4641      	mov	r1, r8
 8003a8c:	1a51      	subs	r1, r2, r1
 8003a8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a90:	4649      	mov	r1, r9
 8003a92:	eb63 0301 	sbc.w	r3, r3, r1
 8003a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a98:	f04f 0200 	mov.w	r2, #0
 8003a9c:	f04f 0300 	mov.w	r3, #0
 8003aa0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003aa4:	4649      	mov	r1, r9
 8003aa6:	00cb      	lsls	r3, r1, #3
 8003aa8:	4641      	mov	r1, r8
 8003aaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aae:	4641      	mov	r1, r8
 8003ab0:	00ca      	lsls	r2, r1, #3
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	4622      	mov	r2, r4
 8003aba:	189b      	adds	r3, r3, r2
 8003abc:	633b      	str	r3, [r7, #48]	; 0x30
 8003abe:	462b      	mov	r3, r5
 8003ac0:	460a      	mov	r2, r1
 8003ac2:	eb42 0303 	adc.w	r3, r2, r3
 8003ac6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ad4:	4629      	mov	r1, r5
 8003ad6:	024b      	lsls	r3, r1, #9
 8003ad8:	4621      	mov	r1, r4
 8003ada:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ade:	4621      	mov	r1, r4
 8003ae0:	024a      	lsls	r2, r1, #9
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003aea:	2200      	movs	r2, #0
 8003aec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003af0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003af4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003af8:	f7fc fbda 	bl	80002b0 <__aeabi_uldivmod>
 8003afc:	4602      	mov	r2, r0
 8003afe:	460b      	mov	r3, r1
 8003b00:	4613      	mov	r3, r2
 8003b02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b06:	e067      	b.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b08:	4b75      	ldr	r3, [pc, #468]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	099b      	lsrs	r3, r3, #6
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b14:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003b18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b20:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b22:	2300      	movs	r3, #0
 8003b24:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b26:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003b2a:	4622      	mov	r2, r4
 8003b2c:	462b      	mov	r3, r5
 8003b2e:	f04f 0000 	mov.w	r0, #0
 8003b32:	f04f 0100 	mov.w	r1, #0
 8003b36:	0159      	lsls	r1, r3, #5
 8003b38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b3c:	0150      	lsls	r0, r2, #5
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	4621      	mov	r1, r4
 8003b44:	1a51      	subs	r1, r2, r1
 8003b46:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b48:	4629      	mov	r1, r5
 8003b4a:	eb63 0301 	sbc.w	r3, r3, r1
 8003b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b50:	f04f 0200 	mov.w	r2, #0
 8003b54:	f04f 0300 	mov.w	r3, #0
 8003b58:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003b5c:	4649      	mov	r1, r9
 8003b5e:	018b      	lsls	r3, r1, #6
 8003b60:	4641      	mov	r1, r8
 8003b62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b66:	4641      	mov	r1, r8
 8003b68:	018a      	lsls	r2, r1, #6
 8003b6a:	4641      	mov	r1, r8
 8003b6c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b70:	4649      	mov	r1, r9
 8003b72:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b76:	f04f 0200 	mov.w	r2, #0
 8003b7a:	f04f 0300 	mov.w	r3, #0
 8003b7e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b82:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b8a:	4692      	mov	sl, r2
 8003b8c:	469b      	mov	fp, r3
 8003b8e:	4623      	mov	r3, r4
 8003b90:	eb1a 0303 	adds.w	r3, sl, r3
 8003b94:	623b      	str	r3, [r7, #32]
 8003b96:	462b      	mov	r3, r5
 8003b98:	eb4b 0303 	adc.w	r3, fp, r3
 8003b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b9e:	f04f 0200 	mov.w	r2, #0
 8003ba2:	f04f 0300 	mov.w	r3, #0
 8003ba6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003baa:	4629      	mov	r1, r5
 8003bac:	028b      	lsls	r3, r1, #10
 8003bae:	4621      	mov	r1, r4
 8003bb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bb4:	4621      	mov	r1, r4
 8003bb6:	028a      	lsls	r2, r1, #10
 8003bb8:	4610      	mov	r0, r2
 8003bba:	4619      	mov	r1, r3
 8003bbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	673b      	str	r3, [r7, #112]	; 0x70
 8003bc4:	677a      	str	r2, [r7, #116]	; 0x74
 8003bc6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003bca:	f7fc fb71 	bl	80002b0 <__aeabi_uldivmod>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bd8:	4b41      	ldr	r3, [pc, #260]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	0c1b      	lsrs	r3, r3, #16
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	3301      	adds	r3, #1
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003bea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003bee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003bfa:	e0eb      	b.n	8003dd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bfc:	4b38      	ldr	r3, [pc, #224]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c08:	4b35      	ldr	r3, [pc, #212]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d06b      	beq.n	8003cec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c14:	4b32      	ldr	r3, [pc, #200]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	099b      	lsrs	r3, r3, #6
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c26:	663b      	str	r3, [r7, #96]	; 0x60
 8003c28:	2300      	movs	r3, #0
 8003c2a:	667b      	str	r3, [r7, #100]	; 0x64
 8003c2c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003c30:	4622      	mov	r2, r4
 8003c32:	462b      	mov	r3, r5
 8003c34:	f04f 0000 	mov.w	r0, #0
 8003c38:	f04f 0100 	mov.w	r1, #0
 8003c3c:	0159      	lsls	r1, r3, #5
 8003c3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c42:	0150      	lsls	r0, r2, #5
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4621      	mov	r1, r4
 8003c4a:	1a51      	subs	r1, r2, r1
 8003c4c:	61b9      	str	r1, [r7, #24]
 8003c4e:	4629      	mov	r1, r5
 8003c50:	eb63 0301 	sbc.w	r3, r3, r1
 8003c54:	61fb      	str	r3, [r7, #28]
 8003c56:	f04f 0200 	mov.w	r2, #0
 8003c5a:	f04f 0300 	mov.w	r3, #0
 8003c5e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003c62:	4659      	mov	r1, fp
 8003c64:	018b      	lsls	r3, r1, #6
 8003c66:	4651      	mov	r1, sl
 8003c68:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c6c:	4651      	mov	r1, sl
 8003c6e:	018a      	lsls	r2, r1, #6
 8003c70:	4651      	mov	r1, sl
 8003c72:	ebb2 0801 	subs.w	r8, r2, r1
 8003c76:	4659      	mov	r1, fp
 8003c78:	eb63 0901 	sbc.w	r9, r3, r1
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c88:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c8c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c90:	4690      	mov	r8, r2
 8003c92:	4699      	mov	r9, r3
 8003c94:	4623      	mov	r3, r4
 8003c96:	eb18 0303 	adds.w	r3, r8, r3
 8003c9a:	613b      	str	r3, [r7, #16]
 8003c9c:	462b      	mov	r3, r5
 8003c9e:	eb49 0303 	adc.w	r3, r9, r3
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	f04f 0300 	mov.w	r3, #0
 8003cac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003cb0:	4629      	mov	r1, r5
 8003cb2:	024b      	lsls	r3, r1, #9
 8003cb4:	4621      	mov	r1, r4
 8003cb6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cba:	4621      	mov	r1, r4
 8003cbc:	024a      	lsls	r2, r1, #9
 8003cbe:	4610      	mov	r0, r2
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cca:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003ccc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003cd0:	f7fc faee 	bl	80002b0 <__aeabi_uldivmod>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	4613      	mov	r3, r2
 8003cda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cde:	e065      	b.n	8003dac <HAL_RCC_GetSysClockFreq+0x420>
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	00f42400 	.word	0x00f42400
 8003ce8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cec:	4b3d      	ldr	r3, [pc, #244]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x458>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	099b      	lsrs	r3, r3, #6
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	4611      	mov	r1, r2
 8003cf8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cfc:	653b      	str	r3, [r7, #80]	; 0x50
 8003cfe:	2300      	movs	r3, #0
 8003d00:	657b      	str	r3, [r7, #84]	; 0x54
 8003d02:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003d06:	4642      	mov	r2, r8
 8003d08:	464b      	mov	r3, r9
 8003d0a:	f04f 0000 	mov.w	r0, #0
 8003d0e:	f04f 0100 	mov.w	r1, #0
 8003d12:	0159      	lsls	r1, r3, #5
 8003d14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d18:	0150      	lsls	r0, r2, #5
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4641      	mov	r1, r8
 8003d20:	1a51      	subs	r1, r2, r1
 8003d22:	60b9      	str	r1, [r7, #8]
 8003d24:	4649      	mov	r1, r9
 8003d26:	eb63 0301 	sbc.w	r3, r3, r1
 8003d2a:	60fb      	str	r3, [r7, #12]
 8003d2c:	f04f 0200 	mov.w	r2, #0
 8003d30:	f04f 0300 	mov.w	r3, #0
 8003d34:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003d38:	4659      	mov	r1, fp
 8003d3a:	018b      	lsls	r3, r1, #6
 8003d3c:	4651      	mov	r1, sl
 8003d3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d42:	4651      	mov	r1, sl
 8003d44:	018a      	lsls	r2, r1, #6
 8003d46:	4651      	mov	r1, sl
 8003d48:	1a54      	subs	r4, r2, r1
 8003d4a:	4659      	mov	r1, fp
 8003d4c:	eb63 0501 	sbc.w	r5, r3, r1
 8003d50:	f04f 0200 	mov.w	r2, #0
 8003d54:	f04f 0300 	mov.w	r3, #0
 8003d58:	00eb      	lsls	r3, r5, #3
 8003d5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d5e:	00e2      	lsls	r2, r4, #3
 8003d60:	4614      	mov	r4, r2
 8003d62:	461d      	mov	r5, r3
 8003d64:	4643      	mov	r3, r8
 8003d66:	18e3      	adds	r3, r4, r3
 8003d68:	603b      	str	r3, [r7, #0]
 8003d6a:	464b      	mov	r3, r9
 8003d6c:	eb45 0303 	adc.w	r3, r5, r3
 8003d70:	607b      	str	r3, [r7, #4]
 8003d72:	f04f 0200 	mov.w	r2, #0
 8003d76:	f04f 0300 	mov.w	r3, #0
 8003d7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d7e:	4629      	mov	r1, r5
 8003d80:	028b      	lsls	r3, r1, #10
 8003d82:	4621      	mov	r1, r4
 8003d84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d88:	4621      	mov	r1, r4
 8003d8a:	028a      	lsls	r2, r1, #10
 8003d8c:	4610      	mov	r0, r2
 8003d8e:	4619      	mov	r1, r3
 8003d90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d94:	2200      	movs	r2, #0
 8003d96:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d98:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003d9a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d9e:	f7fc fa87 	bl	80002b0 <__aeabi_uldivmod>
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	4613      	mov	r3, r2
 8003da8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003dac:	4b0d      	ldr	r3, [pc, #52]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x458>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	0f1b      	lsrs	r3, r3, #28
 8003db2:	f003 0307 	and.w	r3, r3, #7
 8003db6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003dba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003dbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003dca:	e003      	b.n	8003dd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dcc:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003dce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003dd2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	37b8      	adds	r7, #184	; 0xb8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003de2:	bf00      	nop
 8003de4:	40023800 	.word	0x40023800
 8003de8:	00f42400 	.word	0x00f42400

08003dec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e28d      	b.n	800431a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 8083 	beq.w	8003f12 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e0c:	4b94      	ldr	r3, [pc, #592]	; (8004060 <HAL_RCC_OscConfig+0x274>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 030c 	and.w	r3, r3, #12
 8003e14:	2b04      	cmp	r3, #4
 8003e16:	d019      	beq.n	8003e4c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e18:	4b91      	ldr	r3, [pc, #580]	; (8004060 <HAL_RCC_OscConfig+0x274>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	d106      	bne.n	8003e32 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e24:	4b8e      	ldr	r3, [pc, #568]	; (8004060 <HAL_RCC_OscConfig+0x274>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e30:	d00c      	beq.n	8003e4c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e32:	4b8b      	ldr	r3, [pc, #556]	; (8004060 <HAL_RCC_OscConfig+0x274>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e3a:	2b0c      	cmp	r3, #12
 8003e3c:	d112      	bne.n	8003e64 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e3e:	4b88      	ldr	r3, [pc, #544]	; (8004060 <HAL_RCC_OscConfig+0x274>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e4a:	d10b      	bne.n	8003e64 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e4c:	4b84      	ldr	r3, [pc, #528]	; (8004060 <HAL_RCC_OscConfig+0x274>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d05b      	beq.n	8003f10 <HAL_RCC_OscConfig+0x124>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d157      	bne.n	8003f10 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e25a      	b.n	800431a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e6c:	d106      	bne.n	8003e7c <HAL_RCC_OscConfig+0x90>
 8003e6e:	4b7c      	ldr	r3, [pc, #496]	; (8004060 <HAL_RCC_OscConfig+0x274>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a7b      	ldr	r2, [pc, #492]	; (8004060 <HAL_RCC_OscConfig+0x274>)
 8003e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e78:	6013      	str	r3, [r2, #0]
 8003e7a:	e01d      	b.n	8003eb8 <HAL_RCC_OscConfig+0xcc>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e84:	d10c      	bne.n	8003ea0 <HAL_RCC_OscConfig+0xb4>
 8003e86:	4b76      	ldr	r3, [pc, #472]	; (8004060 <HAL_RCC_OscConfig+0x274>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a75      	ldr	r2, [pc, #468]	; (8004060 <HAL_RCC_OscConfig+0x274>)
 8003e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e90:	6013      	str	r3, [r2, #0]
 8003e92:	4b73      	ldr	r3, [pc, #460]	; (8004060 <HAL_RCC_OscConfig+0x274>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a72      	ldr	r2, [pc, #456]	; (8004060 <HAL_RCC_OscConfig+0x274>)
 8003e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e9c:	6013      	str	r3, [r2, #0]
 8003e9e:	e00b      	b.n	8003eb8 <HAL_RCC_OscConfig+0xcc>
 8003ea0:	4b6f      	ldr	r3, [pc, #444]	; (8004060 <HAL_RCC_OscConfig+0x274>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a6e      	ldr	r2, [pc, #440]	; (8004060 <HAL_RCC_OscConfig+0x274>)
 8003ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eaa:	6013      	str	r3, [r2, #0]
 8003eac:	4b6c      	ldr	r3, [pc, #432]	; (8004060 <HAL_RCC_OscConfig+0x274>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a6b      	ldr	r2, [pc, #428]	; (8004060 <HAL_RCC_OscConfig+0x274>)
 8003eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d013      	beq.n	8003ee8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec0:	f7fe fa44 	bl	800234c <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ec8:	f7fe fa40 	bl	800234c <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b64      	cmp	r3, #100	; 0x64
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e21f      	b.n	800431a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eda:	4b61      	ldr	r3, [pc, #388]	; (8004060 <HAL_RCC_OscConfig+0x274>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0f0      	beq.n	8003ec8 <HAL_RCC_OscConfig+0xdc>
 8003ee6:	e014      	b.n	8003f12 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee8:	f7fe fa30 	bl	800234c <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ef0:	f7fe fa2c 	bl	800234c <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b64      	cmp	r3, #100	; 0x64
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e20b      	b.n	800431a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f02:	4b57      	ldr	r3, [pc, #348]	; (8004060 <HAL_RCC_OscConfig+0x274>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1f0      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x104>
 8003f0e:	e000      	b.n	8003f12 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d06f      	beq.n	8003ffe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f1e:	4b50      	ldr	r3, [pc, #320]	; (8004060 <HAL_RCC_OscConfig+0x274>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 030c 	and.w	r3, r3, #12
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d017      	beq.n	8003f5a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f2a:	4b4d      	ldr	r3, [pc, #308]	; (8004060 <HAL_RCC_OscConfig+0x274>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f32:	2b08      	cmp	r3, #8
 8003f34:	d105      	bne.n	8003f42 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f36:	4b4a      	ldr	r3, [pc, #296]	; (8004060 <HAL_RCC_OscConfig+0x274>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00b      	beq.n	8003f5a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f42:	4b47      	ldr	r3, [pc, #284]	; (8004060 <HAL_RCC_OscConfig+0x274>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f4a:	2b0c      	cmp	r3, #12
 8003f4c:	d11c      	bne.n	8003f88 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f4e:	4b44      	ldr	r3, [pc, #272]	; (8004060 <HAL_RCC_OscConfig+0x274>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d116      	bne.n	8003f88 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f5a:	4b41      	ldr	r3, [pc, #260]	; (8004060 <HAL_RCC_OscConfig+0x274>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d005      	beq.n	8003f72 <HAL_RCC_OscConfig+0x186>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d001      	beq.n	8003f72 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e1d3      	b.n	800431a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f72:	4b3b      	ldr	r3, [pc, #236]	; (8004060 <HAL_RCC_OscConfig+0x274>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	4937      	ldr	r1, [pc, #220]	; (8004060 <HAL_RCC_OscConfig+0x274>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f86:	e03a      	b.n	8003ffe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d020      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f90:	4b34      	ldr	r3, [pc, #208]	; (8004064 <HAL_RCC_OscConfig+0x278>)
 8003f92:	2201      	movs	r2, #1
 8003f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f96:	f7fe f9d9 	bl	800234c <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f9e:	f7fe f9d5 	bl	800234c <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e1b4      	b.n	800431a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fb0:	4b2b      	ldr	r3, [pc, #172]	; (8004060 <HAL_RCC_OscConfig+0x274>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0f0      	beq.n	8003f9e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fbc:	4b28      	ldr	r3, [pc, #160]	; (8004060 <HAL_RCC_OscConfig+0x274>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	4925      	ldr	r1, [pc, #148]	; (8004060 <HAL_RCC_OscConfig+0x274>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	600b      	str	r3, [r1, #0]
 8003fd0:	e015      	b.n	8003ffe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fd2:	4b24      	ldr	r3, [pc, #144]	; (8004064 <HAL_RCC_OscConfig+0x278>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd8:	f7fe f9b8 	bl	800234c <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fe0:	f7fe f9b4 	bl	800234c <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e193      	b.n	800431a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ff2:	4b1b      	ldr	r3, [pc, #108]	; (8004060 <HAL_RCC_OscConfig+0x274>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1f0      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b00      	cmp	r3, #0
 8004008:	d036      	beq.n	8004078 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d016      	beq.n	8004040 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004012:	4b15      	ldr	r3, [pc, #84]	; (8004068 <HAL_RCC_OscConfig+0x27c>)
 8004014:	2201      	movs	r2, #1
 8004016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004018:	f7fe f998 	bl	800234c <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004020:	f7fe f994 	bl	800234c <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e173      	b.n	800431a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004032:	4b0b      	ldr	r3, [pc, #44]	; (8004060 <HAL_RCC_OscConfig+0x274>)
 8004034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0f0      	beq.n	8004020 <HAL_RCC_OscConfig+0x234>
 800403e:	e01b      	b.n	8004078 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004040:	4b09      	ldr	r3, [pc, #36]	; (8004068 <HAL_RCC_OscConfig+0x27c>)
 8004042:	2200      	movs	r2, #0
 8004044:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004046:	f7fe f981 	bl	800234c <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800404c:	e00e      	b.n	800406c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800404e:	f7fe f97d 	bl	800234c <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d907      	bls.n	800406c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e15c      	b.n	800431a <HAL_RCC_OscConfig+0x52e>
 8004060:	40023800 	.word	0x40023800
 8004064:	42470000 	.word	0x42470000
 8004068:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800406c:	4b8a      	ldr	r3, [pc, #552]	; (8004298 <HAL_RCC_OscConfig+0x4ac>)
 800406e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1ea      	bne.n	800404e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 8097 	beq.w	80041b4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004086:	2300      	movs	r3, #0
 8004088:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800408a:	4b83      	ldr	r3, [pc, #524]	; (8004298 <HAL_RCC_OscConfig+0x4ac>)
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10f      	bne.n	80040b6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004096:	2300      	movs	r3, #0
 8004098:	60bb      	str	r3, [r7, #8]
 800409a:	4b7f      	ldr	r3, [pc, #508]	; (8004298 <HAL_RCC_OscConfig+0x4ac>)
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	4a7e      	ldr	r2, [pc, #504]	; (8004298 <HAL_RCC_OscConfig+0x4ac>)
 80040a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040a4:	6413      	str	r3, [r2, #64]	; 0x40
 80040a6:	4b7c      	ldr	r3, [pc, #496]	; (8004298 <HAL_RCC_OscConfig+0x4ac>)
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ae:	60bb      	str	r3, [r7, #8]
 80040b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040b2:	2301      	movs	r3, #1
 80040b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b6:	4b79      	ldr	r3, [pc, #484]	; (800429c <HAL_RCC_OscConfig+0x4b0>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d118      	bne.n	80040f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040c2:	4b76      	ldr	r3, [pc, #472]	; (800429c <HAL_RCC_OscConfig+0x4b0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a75      	ldr	r2, [pc, #468]	; (800429c <HAL_RCC_OscConfig+0x4b0>)
 80040c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040ce:	f7fe f93d 	bl	800234c <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040d6:	f7fe f939 	bl	800234c <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e118      	b.n	800431a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e8:	4b6c      	ldr	r3, [pc, #432]	; (800429c <HAL_RCC_OscConfig+0x4b0>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0f0      	beq.n	80040d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d106      	bne.n	800410a <HAL_RCC_OscConfig+0x31e>
 80040fc:	4b66      	ldr	r3, [pc, #408]	; (8004298 <HAL_RCC_OscConfig+0x4ac>)
 80040fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004100:	4a65      	ldr	r2, [pc, #404]	; (8004298 <HAL_RCC_OscConfig+0x4ac>)
 8004102:	f043 0301 	orr.w	r3, r3, #1
 8004106:	6713      	str	r3, [r2, #112]	; 0x70
 8004108:	e01c      	b.n	8004144 <HAL_RCC_OscConfig+0x358>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	2b05      	cmp	r3, #5
 8004110:	d10c      	bne.n	800412c <HAL_RCC_OscConfig+0x340>
 8004112:	4b61      	ldr	r3, [pc, #388]	; (8004298 <HAL_RCC_OscConfig+0x4ac>)
 8004114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004116:	4a60      	ldr	r2, [pc, #384]	; (8004298 <HAL_RCC_OscConfig+0x4ac>)
 8004118:	f043 0304 	orr.w	r3, r3, #4
 800411c:	6713      	str	r3, [r2, #112]	; 0x70
 800411e:	4b5e      	ldr	r3, [pc, #376]	; (8004298 <HAL_RCC_OscConfig+0x4ac>)
 8004120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004122:	4a5d      	ldr	r2, [pc, #372]	; (8004298 <HAL_RCC_OscConfig+0x4ac>)
 8004124:	f043 0301 	orr.w	r3, r3, #1
 8004128:	6713      	str	r3, [r2, #112]	; 0x70
 800412a:	e00b      	b.n	8004144 <HAL_RCC_OscConfig+0x358>
 800412c:	4b5a      	ldr	r3, [pc, #360]	; (8004298 <HAL_RCC_OscConfig+0x4ac>)
 800412e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004130:	4a59      	ldr	r2, [pc, #356]	; (8004298 <HAL_RCC_OscConfig+0x4ac>)
 8004132:	f023 0301 	bic.w	r3, r3, #1
 8004136:	6713      	str	r3, [r2, #112]	; 0x70
 8004138:	4b57      	ldr	r3, [pc, #348]	; (8004298 <HAL_RCC_OscConfig+0x4ac>)
 800413a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413c:	4a56      	ldr	r2, [pc, #344]	; (8004298 <HAL_RCC_OscConfig+0x4ac>)
 800413e:	f023 0304 	bic.w	r3, r3, #4
 8004142:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d015      	beq.n	8004178 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800414c:	f7fe f8fe 	bl	800234c <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004152:	e00a      	b.n	800416a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004154:	f7fe f8fa 	bl	800234c <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004162:	4293      	cmp	r3, r2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e0d7      	b.n	800431a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800416a:	4b4b      	ldr	r3, [pc, #300]	; (8004298 <HAL_RCC_OscConfig+0x4ac>)
 800416c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0ee      	beq.n	8004154 <HAL_RCC_OscConfig+0x368>
 8004176:	e014      	b.n	80041a2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004178:	f7fe f8e8 	bl	800234c <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800417e:	e00a      	b.n	8004196 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004180:	f7fe f8e4 	bl	800234c <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	f241 3288 	movw	r2, #5000	; 0x1388
 800418e:	4293      	cmp	r3, r2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e0c1      	b.n	800431a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004196:	4b40      	ldr	r3, [pc, #256]	; (8004298 <HAL_RCC_OscConfig+0x4ac>)
 8004198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1ee      	bne.n	8004180 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041a2:	7dfb      	ldrb	r3, [r7, #23]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d105      	bne.n	80041b4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041a8:	4b3b      	ldr	r3, [pc, #236]	; (8004298 <HAL_RCC_OscConfig+0x4ac>)
 80041aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ac:	4a3a      	ldr	r2, [pc, #232]	; (8004298 <HAL_RCC_OscConfig+0x4ac>)
 80041ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 80ad 	beq.w	8004318 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041be:	4b36      	ldr	r3, [pc, #216]	; (8004298 <HAL_RCC_OscConfig+0x4ac>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 030c 	and.w	r3, r3, #12
 80041c6:	2b08      	cmp	r3, #8
 80041c8:	d060      	beq.n	800428c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d145      	bne.n	800425e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041d2:	4b33      	ldr	r3, [pc, #204]	; (80042a0 <HAL_RCC_OscConfig+0x4b4>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d8:	f7fe f8b8 	bl	800234c <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041e0:	f7fe f8b4 	bl	800234c <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e093      	b.n	800431a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041f2:	4b29      	ldr	r3, [pc, #164]	; (8004298 <HAL_RCC_OscConfig+0x4ac>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1f0      	bne.n	80041e0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	69da      	ldr	r2, [r3, #28]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	019b      	lsls	r3, r3, #6
 800420e:	431a      	orrs	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004214:	085b      	lsrs	r3, r3, #1
 8004216:	3b01      	subs	r3, #1
 8004218:	041b      	lsls	r3, r3, #16
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004220:	061b      	lsls	r3, r3, #24
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004228:	071b      	lsls	r3, r3, #28
 800422a:	491b      	ldr	r1, [pc, #108]	; (8004298 <HAL_RCC_OscConfig+0x4ac>)
 800422c:	4313      	orrs	r3, r2
 800422e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004230:	4b1b      	ldr	r3, [pc, #108]	; (80042a0 <HAL_RCC_OscConfig+0x4b4>)
 8004232:	2201      	movs	r2, #1
 8004234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004236:	f7fe f889 	bl	800234c <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800423c:	e008      	b.n	8004250 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800423e:	f7fe f885 	bl	800234c <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e064      	b.n	800431a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004250:	4b11      	ldr	r3, [pc, #68]	; (8004298 <HAL_RCC_OscConfig+0x4ac>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0f0      	beq.n	800423e <HAL_RCC_OscConfig+0x452>
 800425c:	e05c      	b.n	8004318 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800425e:	4b10      	ldr	r3, [pc, #64]	; (80042a0 <HAL_RCC_OscConfig+0x4b4>)
 8004260:	2200      	movs	r2, #0
 8004262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004264:	f7fe f872 	bl	800234c <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800426c:	f7fe f86e 	bl	800234c <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e04d      	b.n	800431a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800427e:	4b06      	ldr	r3, [pc, #24]	; (8004298 <HAL_RCC_OscConfig+0x4ac>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1f0      	bne.n	800426c <HAL_RCC_OscConfig+0x480>
 800428a:	e045      	b.n	8004318 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d107      	bne.n	80042a4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e040      	b.n	800431a <HAL_RCC_OscConfig+0x52e>
 8004298:	40023800 	.word	0x40023800
 800429c:	40007000 	.word	0x40007000
 80042a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042a4:	4b1f      	ldr	r3, [pc, #124]	; (8004324 <HAL_RCC_OscConfig+0x538>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d030      	beq.n	8004314 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042bc:	429a      	cmp	r2, r3
 80042be:	d129      	bne.n	8004314 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d122      	bne.n	8004314 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042d4:	4013      	ands	r3, r2
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042dc:	4293      	cmp	r3, r2
 80042de:	d119      	bne.n	8004314 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ea:	085b      	lsrs	r3, r3, #1
 80042ec:	3b01      	subs	r3, #1
 80042ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d10f      	bne.n	8004314 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004300:	429a      	cmp	r2, r3
 8004302:	d107      	bne.n	8004314 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004310:	429a      	cmp	r2, r3
 8004312:	d001      	beq.n	8004318 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e000      	b.n	800431a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3718      	adds	r7, #24
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	40023800 	.word	0x40023800

08004328 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e066      	b.n	800440c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	7f5b      	ldrb	r3, [r3, #29]
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b00      	cmp	r3, #0
 8004346:	d105      	bne.n	8004354 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7fd fb9a 	bl	8001a88 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2202      	movs	r2, #2
 8004358:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	22ca      	movs	r2, #202	; 0xca
 8004360:	625a      	str	r2, [r3, #36]	; 0x24
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2253      	movs	r2, #83	; 0x53
 8004368:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f998 	bl	80046a0 <RTC_EnterInitMode>
 8004370:	4603      	mov	r3, r0
 8004372:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004374:	7bfb      	ldrb	r3, [r7, #15]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d12c      	bne.n	80043d4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6812      	ldr	r2, [r2, #0]
 8004384:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004388:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800438c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6899      	ldr	r1, [r3, #8]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	431a      	orrs	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	430a      	orrs	r2, r1
 80043aa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	68d2      	ldr	r2, [r2, #12]
 80043b4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6919      	ldr	r1, [r3, #16]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	041a      	lsls	r2, r3, #16
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f99f 	bl	800470e <RTC_ExitInitMode>
 80043d0:	4603      	mov	r3, r0
 80043d2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d113      	bne.n	8004402 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80043e8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	699a      	ldr	r2, [r3, #24]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	22ff      	movs	r2, #255	; 0xff
 8004408:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800440a:	7bfb      	ldrb	r3, [r7, #15]
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004414:	b590      	push	{r4, r7, lr}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	7f1b      	ldrb	r3, [r3, #28]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d101      	bne.n	8004430 <HAL_RTC_SetTime+0x1c>
 800442c:	2302      	movs	r3, #2
 800442e:	e087      	b.n	8004540 <HAL_RTC_SetTime+0x12c>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2201      	movs	r2, #1
 8004434:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2202      	movs	r2, #2
 800443a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d126      	bne.n	8004490 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444c:	2b00      	cmp	r3, #0
 800444e:	d102      	bne.n	8004456 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	2200      	movs	r2, #0
 8004454:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	f000 f97c 	bl	8004758 <RTC_ByteToBcd2>
 8004460:	4603      	mov	r3, r0
 8004462:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	785b      	ldrb	r3, [r3, #1]
 8004468:	4618      	mov	r0, r3
 800446a:	f000 f975 	bl	8004758 <RTC_ByteToBcd2>
 800446e:	4603      	mov	r3, r0
 8004470:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004472:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	789b      	ldrb	r3, [r3, #2]
 8004478:	4618      	mov	r0, r3
 800447a:	f000 f96d 	bl	8004758 <RTC_ByteToBcd2>
 800447e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004480:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	78db      	ldrb	r3, [r3, #3]
 8004488:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800448a:	4313      	orrs	r3, r2
 800448c:	617b      	str	r3, [r7, #20]
 800448e:	e018      	b.n	80044c2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449a:	2b00      	cmp	r3, #0
 800449c:	d102      	bne.n	80044a4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	2200      	movs	r2, #0
 80044a2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	785b      	ldrb	r3, [r3, #1]
 80044ae:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80044b0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80044b6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	78db      	ldrb	r3, [r3, #3]
 80044bc:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80044be:	4313      	orrs	r3, r2
 80044c0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	22ca      	movs	r2, #202	; 0xca
 80044c8:	625a      	str	r2, [r3, #36]	; 0x24
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2253      	movs	r2, #83	; 0x53
 80044d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f000 f8e4 	bl	80046a0 <RTC_EnterInitMode>
 80044d8:	4603      	mov	r3, r0
 80044da:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80044dc:	7cfb      	ldrb	r3, [r7, #19]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d120      	bne.n	8004524 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80044ec:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80044f0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004500:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6899      	ldr	r1, [r3, #8]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	431a      	orrs	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 f8f7 	bl	800470e <RTC_ExitInitMode>
 8004520:	4603      	mov	r3, r0
 8004522:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004524:	7cfb      	ldrb	r3, [r7, #19]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d102      	bne.n	8004530 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2201      	movs	r2, #1
 800452e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	22ff      	movs	r2, #255	; 0xff
 8004536:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	771a      	strb	r2, [r3, #28]

  return status;
 800453e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004540:	4618      	mov	r0, r3
 8004542:	371c      	adds	r7, #28
 8004544:	46bd      	mov	sp, r7
 8004546:	bd90      	pop	{r4, r7, pc}

08004548 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004548:	b590      	push	{r4, r7, lr}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	7f1b      	ldrb	r3, [r3, #28]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d101      	bne.n	8004564 <HAL_RTC_SetDate+0x1c>
 8004560:	2302      	movs	r3, #2
 8004562:	e071      	b.n	8004648 <HAL_RTC_SetDate+0x100>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2201      	movs	r2, #1
 8004568:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2202      	movs	r2, #2
 800456e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10e      	bne.n	8004594 <HAL_RTC_SetDate+0x4c>
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	785b      	ldrb	r3, [r3, #1]
 800457a:	f003 0310 	and.w	r3, r3, #16
 800457e:	2b00      	cmp	r3, #0
 8004580:	d008      	beq.n	8004594 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	785b      	ldrb	r3, [r3, #1]
 8004586:	f023 0310 	bic.w	r3, r3, #16
 800458a:	b2db      	uxtb	r3, r3
 800458c:	330a      	adds	r3, #10
 800458e:	b2da      	uxtb	r2, r3
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d11c      	bne.n	80045d4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	78db      	ldrb	r3, [r3, #3]
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 f8da 	bl	8004758 <RTC_ByteToBcd2>
 80045a4:	4603      	mov	r3, r0
 80045a6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	785b      	ldrb	r3, [r3, #1]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 f8d3 	bl	8004758 <RTC_ByteToBcd2>
 80045b2:	4603      	mov	r3, r0
 80045b4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80045b6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	789b      	ldrb	r3, [r3, #2]
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 f8cb 	bl	8004758 <RTC_ByteToBcd2>
 80045c2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80045c4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80045ce:	4313      	orrs	r3, r2
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	e00e      	b.n	80045f2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	78db      	ldrb	r3, [r3, #3]
 80045d8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	785b      	ldrb	r3, [r3, #1]
 80045de:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80045e0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80045e6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80045ee:	4313      	orrs	r3, r2
 80045f0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	22ca      	movs	r2, #202	; 0xca
 80045f8:	625a      	str	r2, [r3, #36]	; 0x24
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2253      	movs	r2, #83	; 0x53
 8004600:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 f84c 	bl	80046a0 <RTC_EnterInitMode>
 8004608:	4603      	mov	r3, r0
 800460a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800460c:	7cfb      	ldrb	r3, [r7, #19]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10c      	bne.n	800462c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800461c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004620:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 f873 	bl	800470e <RTC_ExitInitMode>
 8004628:	4603      	mov	r3, r0
 800462a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800462c:	7cfb      	ldrb	r3, [r7, #19]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d102      	bne.n	8004638 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2201      	movs	r2, #1
 8004636:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	22ff      	movs	r2, #255	; 0xff
 800463e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	771a      	strb	r2, [r3, #28]

  return status;
 8004646:	7cfb      	ldrb	r3, [r7, #19]
}
 8004648:	4618      	mov	r0, r3
 800464a:	371c      	adds	r7, #28
 800464c:	46bd      	mov	sp, r7
 800464e:	bd90      	pop	{r4, r7, pc}

08004650 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004658:	2300      	movs	r3, #0
 800465a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68da      	ldr	r2, [r3, #12]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800466a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800466c:	f7fd fe6e 	bl	800234c <HAL_GetTick>
 8004670:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004672:	e009      	b.n	8004688 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004674:	f7fd fe6a 	bl	800234c <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004682:	d901      	bls.n	8004688 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e007      	b.n	8004698 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f003 0320 	and.w	r3, r3, #32
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0ee      	beq.n	8004674 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80046ac:	2300      	movs	r3, #0
 80046ae:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d122      	bne.n	8004704 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68da      	ldr	r2, [r3, #12]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046cc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80046ce:	f7fd fe3d 	bl	800234c <HAL_GetTick>
 80046d2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80046d4:	e00c      	b.n	80046f0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80046d6:	f7fd fe39 	bl	800234c <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046e4:	d904      	bls.n	80046f0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2204      	movs	r2, #4
 80046ea:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d102      	bne.n	8004704 <RTC_EnterInitMode+0x64>
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d1e8      	bne.n	80046d6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004704:	7bfb      	ldrb	r3, [r7, #15]
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b084      	sub	sp, #16
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004716:	2300      	movs	r3, #0
 8004718:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68da      	ldr	r2, [r3, #12]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004728:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f003 0320 	and.w	r3, r3, #32
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10a      	bne.n	800474e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f7ff ff89 	bl	8004650 <HAL_RTC_WaitForSynchro>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d004      	beq.n	800474e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2204      	movs	r2, #4
 8004748:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800474e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	4603      	mov	r3, r0
 8004760:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8004762:	2300      	movs	r3, #0
 8004764:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8004766:	e005      	b.n	8004774 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004768:	7bfb      	ldrb	r3, [r7, #15]
 800476a:	3301      	adds	r3, #1
 800476c:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800476e:	79fb      	ldrb	r3, [r7, #7]
 8004770:	3b0a      	subs	r3, #10
 8004772:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004774:	79fb      	ldrb	r3, [r7, #7]
 8004776:	2b09      	cmp	r3, #9
 8004778:	d8f6      	bhi.n	8004768 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800477a:	7bfb      	ldrb	r3, [r7, #15]
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	b2da      	uxtb	r2, r3
 8004780:	79fb      	ldrb	r3, [r7, #7]
 8004782:	4313      	orrs	r3, r2
 8004784:	b2db      	uxtb	r3, r3
}
 8004786:	4618      	mov	r0, r3
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b086      	sub	sp, #24
 8004796:	af00      	add	r7, sp, #0
 8004798:	60f8      	str	r0, [r7, #12]
 800479a:	60b9      	str	r1, [r7, #8]
 800479c:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800479e:	2300      	movs	r3, #0
 80047a0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	7f1b      	ldrb	r3, [r3, #28]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d101      	bne.n	80047ae <HAL_RTCEx_SetWakeUpTimer+0x1c>
 80047aa:	2302      	movs	r3, #2
 80047ac:	e08a      	b.n	80048c4 <HAL_RTCEx_SetWakeUpTimer+0x132>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2201      	movs	r2, #1
 80047b2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2202      	movs	r2, #2
 80047b8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	22ca      	movs	r2, #202	; 0xca
 80047c0:	625a      	str	r2, [r3, #36]	; 0x24
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2253      	movs	r2, #83	; 0x53
 80047c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d01e      	beq.n	8004816 <HAL_RTCEx_SetWakeUpTimer+0x84>
  {
    tickstart = HAL_GetTick();
 80047d8:	f7fd fdb8 	bl	800234c <HAL_GetTick>
 80047dc:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 80047de:	e013      	b.n	8004808 <HAL_RTCEx_SetWakeUpTimer+0x76>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80047e0:	f7fd fdb4 	bl	800234c <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047ee:	d90b      	bls.n	8004808 <HAL_RTCEx_SetWakeUpTimer+0x76>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	22ff      	movs	r2, #255	; 0xff
 80047f6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2203      	movs	r2, #3
 80047fc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e05d      	b.n	80048c4 <HAL_RTCEx_SetWakeUpTimer+0x132>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	f003 0304 	and.w	r3, r3, #4
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1e4      	bne.n	80047e0 <HAL_RTCEx_SetWakeUpTimer+0x4e>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	689a      	ldr	r2, [r3, #8]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004824:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	b2da      	uxtb	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004836:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004838:	f7fd fd88 	bl	800234c <HAL_GetTick>
 800483c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800483e:	e013      	b.n	8004868 <HAL_RTCEx_SetWakeUpTimer+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004840:	f7fd fd84 	bl	800234c <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800484e:	d90b      	bls.n	8004868 <HAL_RTCEx_SetWakeUpTimer+0xd6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	22ff      	movs	r2, #255	; 0xff
 8004856:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2203      	movs	r2, #3
 800485c:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e02d      	b.n	80048c4 <HAL_RTCEx_SetWakeUpTimer+0x132>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f003 0304 	and.w	r3, r3, #4
 8004872:	2b00      	cmp	r3, #0
 8004874:	d0e4      	beq.n	8004840 <HAL_RTCEx_SetWakeUpTimer+0xae>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0207 	bic.w	r2, r2, #7
 8004884:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6899      	ldr	r1, [r3, #8]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	430a      	orrs	r2, r1
 8004894:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048ac:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	22ff      	movs	r2, #255	; 0xff
 80048b4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2201      	movs	r2, #1
 80048ba:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3718      	adds	r7, #24
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e041      	b.n	8004962 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d106      	bne.n	80048f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7fd f974 	bl	8001be0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3304      	adds	r3, #4
 8004908:	4619      	mov	r1, r3
 800490a:	4610      	mov	r0, r2
 800490c:	f000 ff7e 	bl	800580c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b082      	sub	sp, #8
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e041      	b.n	8004a00 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	d106      	bne.n	8004996 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f839 	bl	8004a08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2202      	movs	r2, #2
 800499a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	3304      	adds	r3, #4
 80049a6:	4619      	mov	r1, r3
 80049a8:	4610      	mov	r0, r2
 80049aa:	f000 ff2f 	bl	800580c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d109      	bne.n	8004a40 <HAL_TIM_PWM_Start+0x24>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	bf14      	ite	ne
 8004a38:	2301      	movne	r3, #1
 8004a3a:	2300      	moveq	r3, #0
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	e022      	b.n	8004a86 <HAL_TIM_PWM_Start+0x6a>
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d109      	bne.n	8004a5a <HAL_TIM_PWM_Start+0x3e>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	bf14      	ite	ne
 8004a52:	2301      	movne	r3, #1
 8004a54:	2300      	moveq	r3, #0
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	e015      	b.n	8004a86 <HAL_TIM_PWM_Start+0x6a>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d109      	bne.n	8004a74 <HAL_TIM_PWM_Start+0x58>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	bf14      	ite	ne
 8004a6c:	2301      	movne	r3, #1
 8004a6e:	2300      	moveq	r3, #0
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	e008      	b.n	8004a86 <HAL_TIM_PWM_Start+0x6a>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	bf14      	ite	ne
 8004a80:	2301      	movne	r3, #1
 8004a82:	2300      	moveq	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e07c      	b.n	8004b88 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d104      	bne.n	8004a9e <HAL_TIM_PWM_Start+0x82>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2202      	movs	r2, #2
 8004a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a9c:	e013      	b.n	8004ac6 <HAL_TIM_PWM_Start+0xaa>
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d104      	bne.n	8004aae <HAL_TIM_PWM_Start+0x92>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aac:	e00b      	b.n	8004ac6 <HAL_TIM_PWM_Start+0xaa>
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	2b08      	cmp	r3, #8
 8004ab2:	d104      	bne.n	8004abe <HAL_TIM_PWM_Start+0xa2>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004abc:	e003      	b.n	8004ac6 <HAL_TIM_PWM_Start+0xaa>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2202      	movs	r2, #2
 8004ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2201      	movs	r2, #1
 8004acc:	6839      	ldr	r1, [r7, #0]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f001 fb42 	bl	8006158 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a2d      	ldr	r2, [pc, #180]	; (8004b90 <HAL_TIM_PWM_Start+0x174>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d004      	beq.n	8004ae8 <HAL_TIM_PWM_Start+0xcc>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a2c      	ldr	r2, [pc, #176]	; (8004b94 <HAL_TIM_PWM_Start+0x178>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d101      	bne.n	8004aec <HAL_TIM_PWM_Start+0xd0>
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e000      	b.n	8004aee <HAL_TIM_PWM_Start+0xd2>
 8004aec:	2300      	movs	r3, #0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d007      	beq.n	8004b02 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a22      	ldr	r2, [pc, #136]	; (8004b90 <HAL_TIM_PWM_Start+0x174>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d022      	beq.n	8004b52 <HAL_TIM_PWM_Start+0x136>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b14:	d01d      	beq.n	8004b52 <HAL_TIM_PWM_Start+0x136>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a1f      	ldr	r2, [pc, #124]	; (8004b98 <HAL_TIM_PWM_Start+0x17c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d018      	beq.n	8004b52 <HAL_TIM_PWM_Start+0x136>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a1d      	ldr	r2, [pc, #116]	; (8004b9c <HAL_TIM_PWM_Start+0x180>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d013      	beq.n	8004b52 <HAL_TIM_PWM_Start+0x136>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a1c      	ldr	r2, [pc, #112]	; (8004ba0 <HAL_TIM_PWM_Start+0x184>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d00e      	beq.n	8004b52 <HAL_TIM_PWM_Start+0x136>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a16      	ldr	r2, [pc, #88]	; (8004b94 <HAL_TIM_PWM_Start+0x178>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d009      	beq.n	8004b52 <HAL_TIM_PWM_Start+0x136>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a18      	ldr	r2, [pc, #96]	; (8004ba4 <HAL_TIM_PWM_Start+0x188>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d004      	beq.n	8004b52 <HAL_TIM_PWM_Start+0x136>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a16      	ldr	r2, [pc, #88]	; (8004ba8 <HAL_TIM_PWM_Start+0x18c>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d111      	bne.n	8004b76 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2b06      	cmp	r3, #6
 8004b62:	d010      	beq.n	8004b86 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0201 	orr.w	r2, r2, #1
 8004b72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b74:	e007      	b.n	8004b86 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f042 0201 	orr.w	r2, r2, #1
 8004b84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	40010000 	.word	0x40010000
 8004b94:	40010400 	.word	0x40010400
 8004b98:	40000400 	.word	0x40000400
 8004b9c:	40000800 	.word	0x40000800
 8004ba0:	40000c00 	.word	0x40000c00
 8004ba4:	40014000 	.word	0x40014000
 8004ba8:	40001800 	.word	0x40001800

08004bac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e041      	b.n	8004c42 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d106      	bne.n	8004bd8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7fc ff82 	bl	8001adc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	3304      	adds	r3, #4
 8004be8:	4619      	mov	r1, r3
 8004bea:	4610      	mov	r0, r2
 8004bec:	f000 fe0e 	bl	800580c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
	...

08004c4c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d104      	bne.n	8004c66 <HAL_TIM_IC_Start+0x1a>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	e013      	b.n	8004c8e <HAL_TIM_IC_Start+0x42>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b04      	cmp	r3, #4
 8004c6a:	d104      	bne.n	8004c76 <HAL_TIM_IC_Start+0x2a>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	e00b      	b.n	8004c8e <HAL_TIM_IC_Start+0x42>
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d104      	bne.n	8004c86 <HAL_TIM_IC_Start+0x3a>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	e003      	b.n	8004c8e <HAL_TIM_IC_Start+0x42>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d104      	bne.n	8004ca0 <HAL_TIM_IC_Start+0x54>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	e013      	b.n	8004cc8 <HAL_TIM_IC_Start+0x7c>
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	2b04      	cmp	r3, #4
 8004ca4:	d104      	bne.n	8004cb0 <HAL_TIM_IC_Start+0x64>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	e00b      	b.n	8004cc8 <HAL_TIM_IC_Start+0x7c>
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	2b08      	cmp	r3, #8
 8004cb4:	d104      	bne.n	8004cc0 <HAL_TIM_IC_Start+0x74>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	e003      	b.n	8004cc8 <HAL_TIM_IC_Start+0x7c>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cca:	7bfb      	ldrb	r3, [r7, #15]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d102      	bne.n	8004cd6 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cd0:	7bbb      	ldrb	r3, [r7, #14]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d001      	beq.n	8004cda <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e081      	b.n	8004dde <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d104      	bne.n	8004cea <HAL_TIM_IC_Start+0x9e>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ce8:	e013      	b.n	8004d12 <HAL_TIM_IC_Start+0xc6>
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b04      	cmp	r3, #4
 8004cee:	d104      	bne.n	8004cfa <HAL_TIM_IC_Start+0xae>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cf8:	e00b      	b.n	8004d12 <HAL_TIM_IC_Start+0xc6>
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b08      	cmp	r3, #8
 8004cfe:	d104      	bne.n	8004d0a <HAL_TIM_IC_Start+0xbe>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2202      	movs	r2, #2
 8004d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d08:	e003      	b.n	8004d12 <HAL_TIM_IC_Start+0xc6>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2202      	movs	r2, #2
 8004d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d104      	bne.n	8004d22 <HAL_TIM_IC_Start+0xd6>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d20:	e013      	b.n	8004d4a <HAL_TIM_IC_Start+0xfe>
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b04      	cmp	r3, #4
 8004d26:	d104      	bne.n	8004d32 <HAL_TIM_IC_Start+0xe6>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d30:	e00b      	b.n	8004d4a <HAL_TIM_IC_Start+0xfe>
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2b08      	cmp	r3, #8
 8004d36:	d104      	bne.n	8004d42 <HAL_TIM_IC_Start+0xf6>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d40:	e003      	b.n	8004d4a <HAL_TIM_IC_Start+0xfe>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2202      	movs	r2, #2
 8004d46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	6839      	ldr	r1, [r7, #0]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f001 fa00 	bl	8006158 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a22      	ldr	r2, [pc, #136]	; (8004de8 <HAL_TIM_IC_Start+0x19c>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d022      	beq.n	8004da8 <HAL_TIM_IC_Start+0x15c>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d6a:	d01d      	beq.n	8004da8 <HAL_TIM_IC_Start+0x15c>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a1e      	ldr	r2, [pc, #120]	; (8004dec <HAL_TIM_IC_Start+0x1a0>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d018      	beq.n	8004da8 <HAL_TIM_IC_Start+0x15c>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a1d      	ldr	r2, [pc, #116]	; (8004df0 <HAL_TIM_IC_Start+0x1a4>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d013      	beq.n	8004da8 <HAL_TIM_IC_Start+0x15c>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a1b      	ldr	r2, [pc, #108]	; (8004df4 <HAL_TIM_IC_Start+0x1a8>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d00e      	beq.n	8004da8 <HAL_TIM_IC_Start+0x15c>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a1a      	ldr	r2, [pc, #104]	; (8004df8 <HAL_TIM_IC_Start+0x1ac>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d009      	beq.n	8004da8 <HAL_TIM_IC_Start+0x15c>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a18      	ldr	r2, [pc, #96]	; (8004dfc <HAL_TIM_IC_Start+0x1b0>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d004      	beq.n	8004da8 <HAL_TIM_IC_Start+0x15c>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a17      	ldr	r2, [pc, #92]	; (8004e00 <HAL_TIM_IC_Start+0x1b4>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d111      	bne.n	8004dcc <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f003 0307 	and.w	r3, r3, #7
 8004db2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	2b06      	cmp	r3, #6
 8004db8:	d010      	beq.n	8004ddc <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f042 0201 	orr.w	r2, r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dca:	e007      	b.n	8004ddc <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f042 0201 	orr.w	r2, r2, #1
 8004dda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	40010000 	.word	0x40010000
 8004dec:	40000400 	.word	0x40000400
 8004df0:	40000800 	.word	0x40000800
 8004df4:	40000c00 	.word	0x40000c00
 8004df8:	40010400 	.word	0x40010400
 8004dfc:	40014000 	.word	0x40014000
 8004e00:	40001800 	.word	0x40001800

08004e04 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d104      	bne.n	8004e22 <HAL_TIM_IC_Start_IT+0x1e>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	e013      	b.n	8004e4a <HAL_TIM_IC_Start_IT+0x46>
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b04      	cmp	r3, #4
 8004e26:	d104      	bne.n	8004e32 <HAL_TIM_IC_Start_IT+0x2e>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	e00b      	b.n	8004e4a <HAL_TIM_IC_Start_IT+0x46>
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	2b08      	cmp	r3, #8
 8004e36:	d104      	bne.n	8004e42 <HAL_TIM_IC_Start_IT+0x3e>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	e003      	b.n	8004e4a <HAL_TIM_IC_Start_IT+0x46>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d104      	bne.n	8004e5c <HAL_TIM_IC_Start_IT+0x58>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	e013      	b.n	8004e84 <HAL_TIM_IC_Start_IT+0x80>
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d104      	bne.n	8004e6c <HAL_TIM_IC_Start_IT+0x68>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	e00b      	b.n	8004e84 <HAL_TIM_IC_Start_IT+0x80>
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	2b08      	cmp	r3, #8
 8004e70:	d104      	bne.n	8004e7c <HAL_TIM_IC_Start_IT+0x78>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	e003      	b.n	8004e84 <HAL_TIM_IC_Start_IT+0x80>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e86:	7bbb      	ldrb	r3, [r7, #14]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d102      	bne.n	8004e92 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e8c:	7b7b      	ldrb	r3, [r7, #13]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d001      	beq.n	8004e96 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e0cc      	b.n	8005030 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d104      	bne.n	8004ea6 <HAL_TIM_IC_Start_IT+0xa2>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ea4:	e013      	b.n	8004ece <HAL_TIM_IC_Start_IT+0xca>
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b04      	cmp	r3, #4
 8004eaa:	d104      	bne.n	8004eb6 <HAL_TIM_IC_Start_IT+0xb2>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004eb4:	e00b      	b.n	8004ece <HAL_TIM_IC_Start_IT+0xca>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b08      	cmp	r3, #8
 8004eba:	d104      	bne.n	8004ec6 <HAL_TIM_IC_Start_IT+0xc2>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ec4:	e003      	b.n	8004ece <HAL_TIM_IC_Start_IT+0xca>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2202      	movs	r2, #2
 8004eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d104      	bne.n	8004ede <HAL_TIM_IC_Start_IT+0xda>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004edc:	e013      	b.n	8004f06 <HAL_TIM_IC_Start_IT+0x102>
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b04      	cmp	r3, #4
 8004ee2:	d104      	bne.n	8004eee <HAL_TIM_IC_Start_IT+0xea>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004eec:	e00b      	b.n	8004f06 <HAL_TIM_IC_Start_IT+0x102>
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d104      	bne.n	8004efe <HAL_TIM_IC_Start_IT+0xfa>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004efc:	e003      	b.n	8004f06 <HAL_TIM_IC_Start_IT+0x102>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2202      	movs	r2, #2
 8004f02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b0c      	cmp	r3, #12
 8004f0a:	d841      	bhi.n	8004f90 <HAL_TIM_IC_Start_IT+0x18c>
 8004f0c:	a201      	add	r2, pc, #4	; (adr r2, 8004f14 <HAL_TIM_IC_Start_IT+0x110>)
 8004f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f12:	bf00      	nop
 8004f14:	08004f49 	.word	0x08004f49
 8004f18:	08004f91 	.word	0x08004f91
 8004f1c:	08004f91 	.word	0x08004f91
 8004f20:	08004f91 	.word	0x08004f91
 8004f24:	08004f5b 	.word	0x08004f5b
 8004f28:	08004f91 	.word	0x08004f91
 8004f2c:	08004f91 	.word	0x08004f91
 8004f30:	08004f91 	.word	0x08004f91
 8004f34:	08004f6d 	.word	0x08004f6d
 8004f38:	08004f91 	.word	0x08004f91
 8004f3c:	08004f91 	.word	0x08004f91
 8004f40:	08004f91 	.word	0x08004f91
 8004f44:	08004f7f 	.word	0x08004f7f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0202 	orr.w	r2, r2, #2
 8004f56:	60da      	str	r2, [r3, #12]
      break;
 8004f58:	e01d      	b.n	8004f96 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68da      	ldr	r2, [r3, #12]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f042 0204 	orr.w	r2, r2, #4
 8004f68:	60da      	str	r2, [r3, #12]
      break;
 8004f6a:	e014      	b.n	8004f96 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68da      	ldr	r2, [r3, #12]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0208 	orr.w	r2, r2, #8
 8004f7a:	60da      	str	r2, [r3, #12]
      break;
 8004f7c:	e00b      	b.n	8004f96 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f042 0210 	orr.w	r2, r2, #16
 8004f8c:	60da      	str	r2, [r3, #12]
      break;
 8004f8e:	e002      	b.n	8004f96 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	73fb      	strb	r3, [r7, #15]
      break;
 8004f94:	bf00      	nop
  }

  if (status == HAL_OK)
 8004f96:	7bfb      	ldrb	r3, [r7, #15]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d148      	bne.n	800502e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	6839      	ldr	r1, [r7, #0]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f001 f8d7 	bl	8006158 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a22      	ldr	r2, [pc, #136]	; (8005038 <HAL_TIM_IC_Start_IT+0x234>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d022      	beq.n	8004ffa <HAL_TIM_IC_Start_IT+0x1f6>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fbc:	d01d      	beq.n	8004ffa <HAL_TIM_IC_Start_IT+0x1f6>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a1e      	ldr	r2, [pc, #120]	; (800503c <HAL_TIM_IC_Start_IT+0x238>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d018      	beq.n	8004ffa <HAL_TIM_IC_Start_IT+0x1f6>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a1c      	ldr	r2, [pc, #112]	; (8005040 <HAL_TIM_IC_Start_IT+0x23c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d013      	beq.n	8004ffa <HAL_TIM_IC_Start_IT+0x1f6>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a1b      	ldr	r2, [pc, #108]	; (8005044 <HAL_TIM_IC_Start_IT+0x240>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d00e      	beq.n	8004ffa <HAL_TIM_IC_Start_IT+0x1f6>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a19      	ldr	r2, [pc, #100]	; (8005048 <HAL_TIM_IC_Start_IT+0x244>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d009      	beq.n	8004ffa <HAL_TIM_IC_Start_IT+0x1f6>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a18      	ldr	r2, [pc, #96]	; (800504c <HAL_TIM_IC_Start_IT+0x248>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d004      	beq.n	8004ffa <HAL_TIM_IC_Start_IT+0x1f6>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a16      	ldr	r2, [pc, #88]	; (8005050 <HAL_TIM_IC_Start_IT+0x24c>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d111      	bne.n	800501e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f003 0307 	and.w	r3, r3, #7
 8005004:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	2b06      	cmp	r3, #6
 800500a:	d010      	beq.n	800502e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f042 0201 	orr.w	r2, r2, #1
 800501a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800501c:	e007      	b.n	800502e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f042 0201 	orr.w	r2, r2, #1
 800502c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800502e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	40010000 	.word	0x40010000
 800503c:	40000400 	.word	0x40000400
 8005040:	40000800 	.word	0x40000800
 8005044:	40000c00 	.word	0x40000c00
 8005048:	40010400 	.word	0x40010400
 800504c:	40014000 	.word	0x40014000
 8005050:	40001800 	.word	0x40001800

08005054 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b02      	cmp	r3, #2
 8005068:	d122      	bne.n	80050b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	2b02      	cmp	r3, #2
 8005076:	d11b      	bne.n	80050b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f06f 0202 	mvn.w	r2, #2
 8005080:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	f003 0303 	and.w	r3, r3, #3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7fb fa88 	bl	80005ac <HAL_TIM_IC_CaptureCallback>
 800509c:	e005      	b.n	80050aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fb96 	bl	80057d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 fb9d 	bl	80057e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	f003 0304 	and.w	r3, r3, #4
 80050ba:	2b04      	cmp	r3, #4
 80050bc:	d122      	bne.n	8005104 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	f003 0304 	and.w	r3, r3, #4
 80050c8:	2b04      	cmp	r3, #4
 80050ca:	d11b      	bne.n	8005104 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f06f 0204 	mvn.w	r2, #4
 80050d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2202      	movs	r2, #2
 80050da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7fb fa5e 	bl	80005ac <HAL_TIM_IC_CaptureCallback>
 80050f0:	e005      	b.n	80050fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 fb6c 	bl	80057d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 fb73 	bl	80057e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	f003 0308 	and.w	r3, r3, #8
 800510e:	2b08      	cmp	r3, #8
 8005110:	d122      	bne.n	8005158 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	f003 0308 	and.w	r3, r3, #8
 800511c:	2b08      	cmp	r3, #8
 800511e:	d11b      	bne.n	8005158 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f06f 0208 	mvn.w	r2, #8
 8005128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2204      	movs	r2, #4
 800512e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	f003 0303 	and.w	r3, r3, #3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7fb fa34 	bl	80005ac <HAL_TIM_IC_CaptureCallback>
 8005144:	e005      	b.n	8005152 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 fb42 	bl	80057d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 fb49 	bl	80057e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	f003 0310 	and.w	r3, r3, #16
 8005162:	2b10      	cmp	r3, #16
 8005164:	d122      	bne.n	80051ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	f003 0310 	and.w	r3, r3, #16
 8005170:	2b10      	cmp	r3, #16
 8005172:	d11b      	bne.n	80051ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f06f 0210 	mvn.w	r2, #16
 800517c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2208      	movs	r2, #8
 8005182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7fb fa0a 	bl	80005ac <HAL_TIM_IC_CaptureCallback>
 8005198:	e005      	b.n	80051a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 fb18 	bl	80057d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 fb1f 	bl	80057e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d10e      	bne.n	80051d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d107      	bne.n	80051d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f06f 0201 	mvn.w	r2, #1
 80051d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 faf2 	bl	80057bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e2:	2b80      	cmp	r3, #128	; 0x80
 80051e4:	d10e      	bne.n	8005204 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f0:	2b80      	cmp	r3, #128	; 0x80
 80051f2:	d107      	bne.n	8005204 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f001 f856 	bl	80062b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800520e:	2b40      	cmp	r3, #64	; 0x40
 8005210:	d10e      	bne.n	8005230 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521c:	2b40      	cmp	r3, #64	; 0x40
 800521e:	d107      	bne.n	8005230 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 fae4 	bl	80057f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	f003 0320 	and.w	r3, r3, #32
 800523a:	2b20      	cmp	r3, #32
 800523c:	d10e      	bne.n	800525c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f003 0320 	and.w	r3, r3, #32
 8005248:	2b20      	cmp	r3, #32
 800524a:	d107      	bne.n	800525c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f06f 0220 	mvn.w	r2, #32
 8005254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f001 f820 	bl	800629c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800525c:	bf00      	nop
 800525e:	3708      	adds	r7, #8
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005270:	2300      	movs	r3, #0
 8005272:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800527a:	2b01      	cmp	r3, #1
 800527c:	d101      	bne.n	8005282 <HAL_TIM_IC_ConfigChannel+0x1e>
 800527e:	2302      	movs	r3, #2
 8005280:	e088      	b.n	8005394 <HAL_TIM_IC_ConfigChannel+0x130>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d11b      	bne.n	80052c8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6818      	ldr	r0, [r3, #0]
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	6819      	ldr	r1, [r3, #0]
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f000 fd96 	bl	8005dd0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699a      	ldr	r2, [r3, #24]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 020c 	bic.w	r2, r2, #12
 80052b2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6999      	ldr	r1, [r3, #24]
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	689a      	ldr	r2, [r3, #8]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	619a      	str	r2, [r3, #24]
 80052c6:	e060      	b.n	800538a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b04      	cmp	r3, #4
 80052cc:	d11c      	bne.n	8005308 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6818      	ldr	r0, [r3, #0]
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	6819      	ldr	r1, [r3, #0]
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f000 fe1a 	bl	8005f16 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	699a      	ldr	r2, [r3, #24]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80052f0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6999      	ldr	r1, [r3, #24]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	021a      	lsls	r2, r3, #8
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	430a      	orrs	r2, r1
 8005304:	619a      	str	r2, [r3, #24]
 8005306:	e040      	b.n	800538a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b08      	cmp	r3, #8
 800530c:	d11b      	bne.n	8005346 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6818      	ldr	r0, [r3, #0]
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	6819      	ldr	r1, [r3, #0]
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f000 fe67 	bl	8005ff0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	69da      	ldr	r2, [r3, #28]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f022 020c 	bic.w	r2, r2, #12
 8005330:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	69d9      	ldr	r1, [r3, #28]
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	430a      	orrs	r2, r1
 8005342:	61da      	str	r2, [r3, #28]
 8005344:	e021      	b.n	800538a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b0c      	cmp	r3, #12
 800534a:	d11c      	bne.n	8005386 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6818      	ldr	r0, [r3, #0]
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	6819      	ldr	r1, [r3, #0]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f000 fe84 	bl	8006068 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	69da      	ldr	r2, [r3, #28]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800536e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	69d9      	ldr	r1, [r3, #28]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	021a      	lsls	r2, r3, #8
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	430a      	orrs	r2, r1
 8005382:	61da      	str	r2, [r3, #28]
 8005384:	e001      	b.n	800538a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005392:	7dfb      	ldrb	r3, [r7, #23]
}
 8005394:	4618      	mov	r0, r3
 8005396:	3718      	adds	r7, #24
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053a8:	2300      	movs	r3, #0
 80053aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d101      	bne.n	80053ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053b6:	2302      	movs	r3, #2
 80053b8:	e0ae      	b.n	8005518 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b0c      	cmp	r3, #12
 80053c6:	f200 809f 	bhi.w	8005508 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80053ca:	a201      	add	r2, pc, #4	; (adr r2, 80053d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d0:	08005405 	.word	0x08005405
 80053d4:	08005509 	.word	0x08005509
 80053d8:	08005509 	.word	0x08005509
 80053dc:	08005509 	.word	0x08005509
 80053e0:	08005445 	.word	0x08005445
 80053e4:	08005509 	.word	0x08005509
 80053e8:	08005509 	.word	0x08005509
 80053ec:	08005509 	.word	0x08005509
 80053f0:	08005487 	.word	0x08005487
 80053f4:	08005509 	.word	0x08005509
 80053f8:	08005509 	.word	0x08005509
 80053fc:	08005509 	.word	0x08005509
 8005400:	080054c7 	.word	0x080054c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68b9      	ldr	r1, [r7, #8]
 800540a:	4618      	mov	r0, r3
 800540c:	f000 fa9e 	bl	800594c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	699a      	ldr	r2, [r3, #24]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f042 0208 	orr.w	r2, r2, #8
 800541e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	699a      	ldr	r2, [r3, #24]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 0204 	bic.w	r2, r2, #4
 800542e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6999      	ldr	r1, [r3, #24]
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	691a      	ldr	r2, [r3, #16]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	619a      	str	r2, [r3, #24]
      break;
 8005442:	e064      	b.n	800550e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68b9      	ldr	r1, [r7, #8]
 800544a:	4618      	mov	r0, r3
 800544c:	f000 faee 	bl	8005a2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	699a      	ldr	r2, [r3, #24]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800545e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699a      	ldr	r2, [r3, #24]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800546e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6999      	ldr	r1, [r3, #24]
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	021a      	lsls	r2, r3, #8
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	619a      	str	r2, [r3, #24]
      break;
 8005484:	e043      	b.n	800550e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68b9      	ldr	r1, [r7, #8]
 800548c:	4618      	mov	r0, r3
 800548e:	f000 fb43 	bl	8005b18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	69da      	ldr	r2, [r3, #28]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f042 0208 	orr.w	r2, r2, #8
 80054a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	69da      	ldr	r2, [r3, #28]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 0204 	bic.w	r2, r2, #4
 80054b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	69d9      	ldr	r1, [r3, #28]
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	691a      	ldr	r2, [r3, #16]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	61da      	str	r2, [r3, #28]
      break;
 80054c4:	e023      	b.n	800550e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68b9      	ldr	r1, [r7, #8]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 fb97 	bl	8005c00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	69da      	ldr	r2, [r3, #28]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	69da      	ldr	r2, [r3, #28]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	69d9      	ldr	r1, [r3, #28]
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	021a      	lsls	r2, r3, #8
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	61da      	str	r2, [r3, #28]
      break;
 8005506:	e002      	b.n	800550e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	75fb      	strb	r3, [r7, #23]
      break;
 800550c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005516:	7dfb      	ldrb	r3, [r7, #23]
}
 8005518:	4618      	mov	r0, r3
 800551a:	3718      	adds	r7, #24
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800552a:	2300      	movs	r3, #0
 800552c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005534:	2b01      	cmp	r3, #1
 8005536:	d101      	bne.n	800553c <HAL_TIM_ConfigClockSource+0x1c>
 8005538:	2302      	movs	r3, #2
 800553a:	e0b4      	b.n	80056a6 <HAL_TIM_ConfigClockSource+0x186>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2202      	movs	r2, #2
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800555a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005562:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005574:	d03e      	beq.n	80055f4 <HAL_TIM_ConfigClockSource+0xd4>
 8005576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800557a:	f200 8087 	bhi.w	800568c <HAL_TIM_ConfigClockSource+0x16c>
 800557e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005582:	f000 8086 	beq.w	8005692 <HAL_TIM_ConfigClockSource+0x172>
 8005586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800558a:	d87f      	bhi.n	800568c <HAL_TIM_ConfigClockSource+0x16c>
 800558c:	2b70      	cmp	r3, #112	; 0x70
 800558e:	d01a      	beq.n	80055c6 <HAL_TIM_ConfigClockSource+0xa6>
 8005590:	2b70      	cmp	r3, #112	; 0x70
 8005592:	d87b      	bhi.n	800568c <HAL_TIM_ConfigClockSource+0x16c>
 8005594:	2b60      	cmp	r3, #96	; 0x60
 8005596:	d050      	beq.n	800563a <HAL_TIM_ConfigClockSource+0x11a>
 8005598:	2b60      	cmp	r3, #96	; 0x60
 800559a:	d877      	bhi.n	800568c <HAL_TIM_ConfigClockSource+0x16c>
 800559c:	2b50      	cmp	r3, #80	; 0x50
 800559e:	d03c      	beq.n	800561a <HAL_TIM_ConfigClockSource+0xfa>
 80055a0:	2b50      	cmp	r3, #80	; 0x50
 80055a2:	d873      	bhi.n	800568c <HAL_TIM_ConfigClockSource+0x16c>
 80055a4:	2b40      	cmp	r3, #64	; 0x40
 80055a6:	d058      	beq.n	800565a <HAL_TIM_ConfigClockSource+0x13a>
 80055a8:	2b40      	cmp	r3, #64	; 0x40
 80055aa:	d86f      	bhi.n	800568c <HAL_TIM_ConfigClockSource+0x16c>
 80055ac:	2b30      	cmp	r3, #48	; 0x30
 80055ae:	d064      	beq.n	800567a <HAL_TIM_ConfigClockSource+0x15a>
 80055b0:	2b30      	cmp	r3, #48	; 0x30
 80055b2:	d86b      	bhi.n	800568c <HAL_TIM_ConfigClockSource+0x16c>
 80055b4:	2b20      	cmp	r3, #32
 80055b6:	d060      	beq.n	800567a <HAL_TIM_ConfigClockSource+0x15a>
 80055b8:	2b20      	cmp	r3, #32
 80055ba:	d867      	bhi.n	800568c <HAL_TIM_ConfigClockSource+0x16c>
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d05c      	beq.n	800567a <HAL_TIM_ConfigClockSource+0x15a>
 80055c0:	2b10      	cmp	r3, #16
 80055c2:	d05a      	beq.n	800567a <HAL_TIM_ConfigClockSource+0x15a>
 80055c4:	e062      	b.n	800568c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6818      	ldr	r0, [r3, #0]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	6899      	ldr	r1, [r3, #8]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f000 fd9f 	bl	8006118 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	609a      	str	r2, [r3, #8]
      break;
 80055f2:	e04f      	b.n	8005694 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6818      	ldr	r0, [r3, #0]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	6899      	ldr	r1, [r3, #8]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685a      	ldr	r2, [r3, #4]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	f000 fd88 	bl	8006118 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689a      	ldr	r2, [r3, #8]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005616:	609a      	str	r2, [r3, #8]
      break;
 8005618:	e03c      	b.n	8005694 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6818      	ldr	r0, [r3, #0]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	6859      	ldr	r1, [r3, #4]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	461a      	mov	r2, r3
 8005628:	f000 fc46 	bl	8005eb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2150      	movs	r1, #80	; 0x50
 8005632:	4618      	mov	r0, r3
 8005634:	f000 fd55 	bl	80060e2 <TIM_ITRx_SetConfig>
      break;
 8005638:	e02c      	b.n	8005694 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6818      	ldr	r0, [r3, #0]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	6859      	ldr	r1, [r3, #4]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	461a      	mov	r2, r3
 8005648:	f000 fca2 	bl	8005f90 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2160      	movs	r1, #96	; 0x60
 8005652:	4618      	mov	r0, r3
 8005654:	f000 fd45 	bl	80060e2 <TIM_ITRx_SetConfig>
      break;
 8005658:	e01c      	b.n	8005694 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6818      	ldr	r0, [r3, #0]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	6859      	ldr	r1, [r3, #4]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	461a      	mov	r2, r3
 8005668:	f000 fc26 	bl	8005eb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2140      	movs	r1, #64	; 0x40
 8005672:	4618      	mov	r0, r3
 8005674:	f000 fd35 	bl	80060e2 <TIM_ITRx_SetConfig>
      break;
 8005678:	e00c      	b.n	8005694 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4619      	mov	r1, r3
 8005684:	4610      	mov	r0, r2
 8005686:	f000 fd2c 	bl	80060e2 <TIM_ITRx_SetConfig>
      break;
 800568a:	e003      	b.n	8005694 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	73fb      	strb	r3, [r7, #15]
      break;
 8005690:	e000      	b.n	8005694 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005692:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b082      	sub	sp, #8
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
 80056b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d101      	bne.n	80056c6 <HAL_TIM_SlaveConfigSynchro+0x18>
 80056c2:	2302      	movs	r3, #2
 80056c4:	e031      	b.n	800572a <HAL_TIM_SlaveConfigSynchro+0x7c>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2202      	movs	r2, #2
 80056d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80056d6:	6839      	ldr	r1, [r7, #0]
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 fae7 	bl	8005cac <TIM_SlaveTimer_SetConfig>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d009      	beq.n	80056f8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e018      	b.n	800572a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68da      	ldr	r2, [r3, #12]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005706:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68da      	ldr	r2, [r3, #12]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005716:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3708      	adds	r7, #8
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
	...

08005734 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800573e:	2300      	movs	r3, #0
 8005740:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b0c      	cmp	r3, #12
 8005746:	d831      	bhi.n	80057ac <HAL_TIM_ReadCapturedValue+0x78>
 8005748:	a201      	add	r2, pc, #4	; (adr r2, 8005750 <HAL_TIM_ReadCapturedValue+0x1c>)
 800574a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574e:	bf00      	nop
 8005750:	08005785 	.word	0x08005785
 8005754:	080057ad 	.word	0x080057ad
 8005758:	080057ad 	.word	0x080057ad
 800575c:	080057ad 	.word	0x080057ad
 8005760:	0800578f 	.word	0x0800578f
 8005764:	080057ad 	.word	0x080057ad
 8005768:	080057ad 	.word	0x080057ad
 800576c:	080057ad 	.word	0x080057ad
 8005770:	08005799 	.word	0x08005799
 8005774:	080057ad 	.word	0x080057ad
 8005778:	080057ad 	.word	0x080057ad
 800577c:	080057ad 	.word	0x080057ad
 8005780:	080057a3 	.word	0x080057a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800578a:	60fb      	str	r3, [r7, #12]

      break;
 800578c:	e00f      	b.n	80057ae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005794:	60fb      	str	r3, [r7, #12]

      break;
 8005796:	e00a      	b.n	80057ae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800579e:	60fb      	str	r3, [r7, #12]

      break;
 80057a0:	e005      	b.n	80057ae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a8:	60fb      	str	r3, [r7, #12]

      break;
 80057aa:	e000      	b.n	80057ae <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80057ac:	bf00      	nop
  }

  return tmpreg;
 80057ae:	68fb      	ldr	r3, [r7, #12]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a40      	ldr	r2, [pc, #256]	; (8005920 <TIM_Base_SetConfig+0x114>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d013      	beq.n	800584c <TIM_Base_SetConfig+0x40>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800582a:	d00f      	beq.n	800584c <TIM_Base_SetConfig+0x40>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a3d      	ldr	r2, [pc, #244]	; (8005924 <TIM_Base_SetConfig+0x118>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d00b      	beq.n	800584c <TIM_Base_SetConfig+0x40>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a3c      	ldr	r2, [pc, #240]	; (8005928 <TIM_Base_SetConfig+0x11c>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d007      	beq.n	800584c <TIM_Base_SetConfig+0x40>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a3b      	ldr	r2, [pc, #236]	; (800592c <TIM_Base_SetConfig+0x120>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d003      	beq.n	800584c <TIM_Base_SetConfig+0x40>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a3a      	ldr	r2, [pc, #232]	; (8005930 <TIM_Base_SetConfig+0x124>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d108      	bne.n	800585e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005852:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	4313      	orrs	r3, r2
 800585c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a2f      	ldr	r2, [pc, #188]	; (8005920 <TIM_Base_SetConfig+0x114>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d02b      	beq.n	80058be <TIM_Base_SetConfig+0xb2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800586c:	d027      	beq.n	80058be <TIM_Base_SetConfig+0xb2>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a2c      	ldr	r2, [pc, #176]	; (8005924 <TIM_Base_SetConfig+0x118>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d023      	beq.n	80058be <TIM_Base_SetConfig+0xb2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a2b      	ldr	r2, [pc, #172]	; (8005928 <TIM_Base_SetConfig+0x11c>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d01f      	beq.n	80058be <TIM_Base_SetConfig+0xb2>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a2a      	ldr	r2, [pc, #168]	; (800592c <TIM_Base_SetConfig+0x120>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d01b      	beq.n	80058be <TIM_Base_SetConfig+0xb2>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a29      	ldr	r2, [pc, #164]	; (8005930 <TIM_Base_SetConfig+0x124>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d017      	beq.n	80058be <TIM_Base_SetConfig+0xb2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a28      	ldr	r2, [pc, #160]	; (8005934 <TIM_Base_SetConfig+0x128>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d013      	beq.n	80058be <TIM_Base_SetConfig+0xb2>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a27      	ldr	r2, [pc, #156]	; (8005938 <TIM_Base_SetConfig+0x12c>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d00f      	beq.n	80058be <TIM_Base_SetConfig+0xb2>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a26      	ldr	r2, [pc, #152]	; (800593c <TIM_Base_SetConfig+0x130>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d00b      	beq.n	80058be <TIM_Base_SetConfig+0xb2>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a25      	ldr	r2, [pc, #148]	; (8005940 <TIM_Base_SetConfig+0x134>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d007      	beq.n	80058be <TIM_Base_SetConfig+0xb2>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a24      	ldr	r2, [pc, #144]	; (8005944 <TIM_Base_SetConfig+0x138>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d003      	beq.n	80058be <TIM_Base_SetConfig+0xb2>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a23      	ldr	r2, [pc, #140]	; (8005948 <TIM_Base_SetConfig+0x13c>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d108      	bne.n	80058d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	4313      	orrs	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	689a      	ldr	r2, [r3, #8]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a0a      	ldr	r2, [pc, #40]	; (8005920 <TIM_Base_SetConfig+0x114>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d003      	beq.n	8005904 <TIM_Base_SetConfig+0xf8>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a0c      	ldr	r2, [pc, #48]	; (8005930 <TIM_Base_SetConfig+0x124>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d103      	bne.n	800590c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	691a      	ldr	r2, [r3, #16]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	615a      	str	r2, [r3, #20]
}
 8005912:	bf00      	nop
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	40010000 	.word	0x40010000
 8005924:	40000400 	.word	0x40000400
 8005928:	40000800 	.word	0x40000800
 800592c:	40000c00 	.word	0x40000c00
 8005930:	40010400 	.word	0x40010400
 8005934:	40014000 	.word	0x40014000
 8005938:	40014400 	.word	0x40014400
 800593c:	40014800 	.word	0x40014800
 8005940:	40001800 	.word	0x40001800
 8005944:	40001c00 	.word	0x40001c00
 8005948:	40002000 	.word	0x40002000

0800594c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800594c:	b480      	push	{r7}
 800594e:	b087      	sub	sp, #28
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	f023 0201 	bic.w	r2, r3, #1
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800597a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f023 0303 	bic.w	r3, r3, #3
 8005982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	4313      	orrs	r3, r2
 800598c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f023 0302 	bic.w	r3, r3, #2
 8005994:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	4313      	orrs	r3, r2
 800599e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a20      	ldr	r2, [pc, #128]	; (8005a24 <TIM_OC1_SetConfig+0xd8>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d003      	beq.n	80059b0 <TIM_OC1_SetConfig+0x64>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a1f      	ldr	r2, [pc, #124]	; (8005a28 <TIM_OC1_SetConfig+0xdc>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d10c      	bne.n	80059ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	f023 0308 	bic.w	r3, r3, #8
 80059b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	4313      	orrs	r3, r2
 80059c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f023 0304 	bic.w	r3, r3, #4
 80059c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a15      	ldr	r2, [pc, #84]	; (8005a24 <TIM_OC1_SetConfig+0xd8>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d003      	beq.n	80059da <TIM_OC1_SetConfig+0x8e>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a14      	ldr	r2, [pc, #80]	; (8005a28 <TIM_OC1_SetConfig+0xdc>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d111      	bne.n	80059fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	685a      	ldr	r2, [r3, #4]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	621a      	str	r2, [r3, #32]
}
 8005a18:	bf00      	nop
 8005a1a:	371c      	adds	r7, #28
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	40010000 	.word	0x40010000
 8005a28:	40010400 	.word	0x40010400

08005a2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	f023 0210 	bic.w	r2, r3, #16
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	021b      	lsls	r3, r3, #8
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	f023 0320 	bic.w	r3, r3, #32
 8005a76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	011b      	lsls	r3, r3, #4
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a22      	ldr	r2, [pc, #136]	; (8005b10 <TIM_OC2_SetConfig+0xe4>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d003      	beq.n	8005a94 <TIM_OC2_SetConfig+0x68>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a21      	ldr	r2, [pc, #132]	; (8005b14 <TIM_OC2_SetConfig+0xe8>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d10d      	bne.n	8005ab0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	011b      	lsls	r3, r3, #4
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a17      	ldr	r2, [pc, #92]	; (8005b10 <TIM_OC2_SetConfig+0xe4>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d003      	beq.n	8005ac0 <TIM_OC2_SetConfig+0x94>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a16      	ldr	r2, [pc, #88]	; (8005b14 <TIM_OC2_SetConfig+0xe8>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d113      	bne.n	8005ae8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ac6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ace:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	621a      	str	r2, [r3, #32]
}
 8005b02:	bf00      	nop
 8005b04:	371c      	adds	r7, #28
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	40010000 	.word	0x40010000
 8005b14:	40010400 	.word	0x40010400

08005b18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b087      	sub	sp, #28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f023 0303 	bic.w	r3, r3, #3
 8005b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	021b      	lsls	r3, r3, #8
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a21      	ldr	r2, [pc, #132]	; (8005bf8 <TIM_OC3_SetConfig+0xe0>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d003      	beq.n	8005b7e <TIM_OC3_SetConfig+0x66>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a20      	ldr	r2, [pc, #128]	; (8005bfc <TIM_OC3_SetConfig+0xe4>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d10d      	bne.n	8005b9a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	021b      	lsls	r3, r3, #8
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a16      	ldr	r2, [pc, #88]	; (8005bf8 <TIM_OC3_SetConfig+0xe0>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d003      	beq.n	8005baa <TIM_OC3_SetConfig+0x92>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a15      	ldr	r2, [pc, #84]	; (8005bfc <TIM_OC3_SetConfig+0xe4>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d113      	bne.n	8005bd2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	011b      	lsls	r3, r3, #4
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	011b      	lsls	r3, r3, #4
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	685a      	ldr	r2, [r3, #4]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	621a      	str	r2, [r3, #32]
}
 8005bec:	bf00      	nop
 8005bee:	371c      	adds	r7, #28
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	40010000 	.word	0x40010000
 8005bfc:	40010400 	.word	0x40010400

08005c00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b087      	sub	sp, #28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	021b      	lsls	r3, r3, #8
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	031b      	lsls	r3, r3, #12
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a12      	ldr	r2, [pc, #72]	; (8005ca4 <TIM_OC4_SetConfig+0xa4>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d003      	beq.n	8005c68 <TIM_OC4_SetConfig+0x68>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a11      	ldr	r2, [pc, #68]	; (8005ca8 <TIM_OC4_SetConfig+0xa8>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d109      	bne.n	8005c7c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	695b      	ldr	r3, [r3, #20]
 8005c74:	019b      	lsls	r3, r3, #6
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	621a      	str	r2, [r3, #32]
}
 8005c96:	bf00      	nop
 8005c98:	371c      	adds	r7, #28
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	40010000 	.word	0x40010000
 8005ca8:	40010400 	.word	0x40010400

08005cac <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	f023 0307 	bic.w	r3, r3, #7
 8005cda:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	2b70      	cmp	r3, #112	; 0x70
 8005cf4:	d01a      	beq.n	8005d2c <TIM_SlaveTimer_SetConfig+0x80>
 8005cf6:	2b70      	cmp	r3, #112	; 0x70
 8005cf8:	d860      	bhi.n	8005dbc <TIM_SlaveTimer_SetConfig+0x110>
 8005cfa:	2b60      	cmp	r3, #96	; 0x60
 8005cfc:	d054      	beq.n	8005da8 <TIM_SlaveTimer_SetConfig+0xfc>
 8005cfe:	2b60      	cmp	r3, #96	; 0x60
 8005d00:	d85c      	bhi.n	8005dbc <TIM_SlaveTimer_SetConfig+0x110>
 8005d02:	2b50      	cmp	r3, #80	; 0x50
 8005d04:	d046      	beq.n	8005d94 <TIM_SlaveTimer_SetConfig+0xe8>
 8005d06:	2b50      	cmp	r3, #80	; 0x50
 8005d08:	d858      	bhi.n	8005dbc <TIM_SlaveTimer_SetConfig+0x110>
 8005d0a:	2b40      	cmp	r3, #64	; 0x40
 8005d0c:	d019      	beq.n	8005d42 <TIM_SlaveTimer_SetConfig+0x96>
 8005d0e:	2b40      	cmp	r3, #64	; 0x40
 8005d10:	d854      	bhi.n	8005dbc <TIM_SlaveTimer_SetConfig+0x110>
 8005d12:	2b30      	cmp	r3, #48	; 0x30
 8005d14:	d055      	beq.n	8005dc2 <TIM_SlaveTimer_SetConfig+0x116>
 8005d16:	2b30      	cmp	r3, #48	; 0x30
 8005d18:	d850      	bhi.n	8005dbc <TIM_SlaveTimer_SetConfig+0x110>
 8005d1a:	2b20      	cmp	r3, #32
 8005d1c:	d051      	beq.n	8005dc2 <TIM_SlaveTimer_SetConfig+0x116>
 8005d1e:	2b20      	cmp	r3, #32
 8005d20:	d84c      	bhi.n	8005dbc <TIM_SlaveTimer_SetConfig+0x110>
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d04d      	beq.n	8005dc2 <TIM_SlaveTimer_SetConfig+0x116>
 8005d26:	2b10      	cmp	r3, #16
 8005d28:	d04b      	beq.n	8005dc2 <TIM_SlaveTimer_SetConfig+0x116>
 8005d2a:	e047      	b.n	8005dbc <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6818      	ldr	r0, [r3, #0]
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	68d9      	ldr	r1, [r3, #12]
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	689a      	ldr	r2, [r3, #8]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	f000 f9ec 	bl	8006118 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8005d40:	e040      	b.n	8005dc4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b05      	cmp	r3, #5
 8005d48:	d101      	bne.n	8005d4e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e03b      	b.n	8005dc6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6a1a      	ldr	r2, [r3, #32]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 0201 	bic.w	r2, r2, #1
 8005d64:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d74:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	011b      	lsls	r3, r3, #4
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	621a      	str	r2, [r3, #32]
      break;
 8005d92:	e017      	b.n	8005dc4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6818      	ldr	r0, [r3, #0]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	6899      	ldr	r1, [r3, #8]
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	461a      	mov	r2, r3
 8005da2:	f000 f889 	bl	8005eb8 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005da6:	e00d      	b.n	8005dc4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6818      	ldr	r0, [r3, #0]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	6899      	ldr	r1, [r3, #8]
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	461a      	mov	r2, r3
 8005db6:	f000 f8eb 	bl	8005f90 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005dba:	e003      	b.n	8005dc4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8005dc0:	e000      	b.n	8005dc4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005dc2:	bf00      	nop
  }

  return status;
 8005dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3718      	adds	r7, #24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
	...

08005dd0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b087      	sub	sp, #28
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
 8005ddc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	f023 0201 	bic.w	r2, r3, #1
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6a1b      	ldr	r3, [r3, #32]
 8005df4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	4a28      	ldr	r2, [pc, #160]	; (8005e9c <TIM_TI1_SetConfig+0xcc>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d01b      	beq.n	8005e36 <TIM_TI1_SetConfig+0x66>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e04:	d017      	beq.n	8005e36 <TIM_TI1_SetConfig+0x66>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	4a25      	ldr	r2, [pc, #148]	; (8005ea0 <TIM_TI1_SetConfig+0xd0>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d013      	beq.n	8005e36 <TIM_TI1_SetConfig+0x66>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	4a24      	ldr	r2, [pc, #144]	; (8005ea4 <TIM_TI1_SetConfig+0xd4>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d00f      	beq.n	8005e36 <TIM_TI1_SetConfig+0x66>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	4a23      	ldr	r2, [pc, #140]	; (8005ea8 <TIM_TI1_SetConfig+0xd8>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d00b      	beq.n	8005e36 <TIM_TI1_SetConfig+0x66>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	4a22      	ldr	r2, [pc, #136]	; (8005eac <TIM_TI1_SetConfig+0xdc>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d007      	beq.n	8005e36 <TIM_TI1_SetConfig+0x66>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	4a21      	ldr	r2, [pc, #132]	; (8005eb0 <TIM_TI1_SetConfig+0xe0>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d003      	beq.n	8005e36 <TIM_TI1_SetConfig+0x66>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	4a20      	ldr	r2, [pc, #128]	; (8005eb4 <TIM_TI1_SetConfig+0xe4>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d101      	bne.n	8005e3a <TIM_TI1_SetConfig+0x6a>
 8005e36:	2301      	movs	r3, #1
 8005e38:	e000      	b.n	8005e3c <TIM_TI1_SetConfig+0x6c>
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d008      	beq.n	8005e52 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f023 0303 	bic.w	r3, r3, #3
 8005e46:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	617b      	str	r3, [r7, #20]
 8005e50:	e003      	b.n	8005e5a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	f043 0301 	orr.w	r3, r3, #1
 8005e58:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	011b      	lsls	r3, r3, #4
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	f023 030a 	bic.w	r3, r3, #10
 8005e74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	f003 030a 	and.w	r3, r3, #10
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	621a      	str	r2, [r3, #32]
}
 8005e8e:	bf00      	nop
 8005e90:	371c      	adds	r7, #28
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	40010000 	.word	0x40010000
 8005ea0:	40000400 	.word	0x40000400
 8005ea4:	40000800 	.word	0x40000800
 8005ea8:	40000c00 	.word	0x40000c00
 8005eac:	40010400 	.word	0x40010400
 8005eb0:	40014000 	.word	0x40014000
 8005eb4:	40001800 	.word	0x40001800

08005eb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b087      	sub	sp, #28
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
 8005ec8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	f023 0201 	bic.w	r2, r3, #1
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ee2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	011b      	lsls	r3, r3, #4
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f023 030a 	bic.w	r3, r3, #10
 8005ef4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	621a      	str	r2, [r3, #32]
}
 8005f0a:	bf00      	nop
 8005f0c:	371c      	adds	r7, #28
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b087      	sub	sp, #28
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	60f8      	str	r0, [r7, #12]
 8005f1e:	60b9      	str	r1, [r7, #8]
 8005f20:	607a      	str	r2, [r7, #4]
 8005f22:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6a1b      	ldr	r3, [r3, #32]
 8005f28:	f023 0210 	bic.w	r2, r3, #16
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f42:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	021b      	lsls	r3, r3, #8
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	031b      	lsls	r3, r3, #12
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	697a      	ldr	r2, [r7, #20]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f68:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	011b      	lsls	r3, r3, #4
 8005f6e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	621a      	str	r2, [r3, #32]
}
 8005f84:	bf00      	nop
 8005f86:	371c      	adds	r7, #28
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6a1b      	ldr	r3, [r3, #32]
 8005fa0:	f023 0210 	bic.w	r2, r3, #16
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	031b      	lsls	r3, r3, #12
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fcc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	011b      	lsls	r3, r3, #4
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	621a      	str	r2, [r3, #32]
}
 8005fe4:	bf00      	nop
 8005fe6:	371c      	adds	r7, #28
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b087      	sub	sp, #28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]
 8005ffc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	69db      	ldr	r3, [r3, #28]
 800600e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f023 0303 	bic.w	r3, r3, #3
 800601c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4313      	orrs	r3, r2
 8006024:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800602c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	011b      	lsls	r3, r3, #4
 8006032:	b2db      	uxtb	r3, r3
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	4313      	orrs	r3, r2
 8006038:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006040:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	021b      	lsls	r3, r3, #8
 8006046:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	4313      	orrs	r3, r2
 800604e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	693a      	ldr	r2, [r7, #16]
 800605a:	621a      	str	r2, [r3, #32]
}
 800605c:	bf00      	nop
 800605e:	371c      	adds	r7, #28
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006068:	b480      	push	{r7}
 800606a:	b087      	sub	sp, #28
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
 8006074:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	69db      	ldr	r3, [r3, #28]
 8006086:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006094:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	021b      	lsls	r3, r3, #8
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	4313      	orrs	r3, r2
 800609e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	031b      	lsls	r3, r3, #12
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80060ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	031b      	lsls	r3, r3, #12
 80060c0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	621a      	str	r2, [r3, #32]
}
 80060d6:	bf00      	nop
 80060d8:	371c      	adds	r7, #28
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b085      	sub	sp, #20
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
 80060ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4313      	orrs	r3, r2
 8006100:	f043 0307 	orr.w	r3, r3, #7
 8006104:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	609a      	str	r2, [r3, #8]
}
 800610c:	bf00      	nop
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
 8006124:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006132:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	021a      	lsls	r2, r3, #8
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	431a      	orrs	r2, r3
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	4313      	orrs	r3, r2
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	4313      	orrs	r3, r2
 8006144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	609a      	str	r2, [r3, #8]
}
 800614c:	bf00      	nop
 800614e:	371c      	adds	r7, #28
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006158:	b480      	push	{r7}
 800615a:	b087      	sub	sp, #28
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	f003 031f 	and.w	r3, r3, #31
 800616a:	2201      	movs	r2, #1
 800616c:	fa02 f303 	lsl.w	r3, r2, r3
 8006170:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6a1a      	ldr	r2, [r3, #32]
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	43db      	mvns	r3, r3
 800617a:	401a      	ands	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6a1a      	ldr	r2, [r3, #32]
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	f003 031f 	and.w	r3, r3, #31
 800618a:	6879      	ldr	r1, [r7, #4]
 800618c:	fa01 f303 	lsl.w	r3, r1, r3
 8006190:	431a      	orrs	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	621a      	str	r2, [r3, #32]
}
 8006196:	bf00      	nop
 8006198:	371c      	adds	r7, #28
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
	...

080061a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d101      	bne.n	80061bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061b8:	2302      	movs	r3, #2
 80061ba:	e05a      	b.n	8006272 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2202      	movs	r2, #2
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a21      	ldr	r2, [pc, #132]	; (8006280 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d022      	beq.n	8006246 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006208:	d01d      	beq.n	8006246 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a1d      	ldr	r2, [pc, #116]	; (8006284 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d018      	beq.n	8006246 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a1b      	ldr	r2, [pc, #108]	; (8006288 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d013      	beq.n	8006246 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a1a      	ldr	r2, [pc, #104]	; (800628c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d00e      	beq.n	8006246 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a18      	ldr	r2, [pc, #96]	; (8006290 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d009      	beq.n	8006246 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a17      	ldr	r2, [pc, #92]	; (8006294 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d004      	beq.n	8006246 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a15      	ldr	r2, [pc, #84]	; (8006298 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d10c      	bne.n	8006260 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800624c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	68ba      	ldr	r2, [r7, #8]
 8006254:	4313      	orrs	r3, r2
 8006256:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	40010000 	.word	0x40010000
 8006284:	40000400 	.word	0x40000400
 8006288:	40000800 	.word	0x40000800
 800628c:	40000c00 	.word	0x40000c00
 8006290:	40010400 	.word	0x40010400
 8006294:	40014000 	.word	0x40014000
 8006298:	40001800 	.word	0x40001800

0800629c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d101      	bne.n	80062d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e03f      	b.n	8006356 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d106      	bne.n	80062f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f7fb fe62 	bl	8001fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2224      	movs	r2, #36	; 0x24
 80062f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68da      	ldr	r2, [r3, #12]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006306:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 f929 	bl	8006560 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	691a      	ldr	r2, [r3, #16]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800631c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	695a      	ldr	r2, [r3, #20]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800632c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68da      	ldr	r2, [r3, #12]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800633c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2220      	movs	r2, #32
 8006348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2220      	movs	r2, #32
 8006350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3708      	adds	r7, #8
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800635e:	b580      	push	{r7, lr}
 8006360:	b08a      	sub	sp, #40	; 0x28
 8006362:	af02      	add	r7, sp, #8
 8006364:	60f8      	str	r0, [r7, #12]
 8006366:	60b9      	str	r1, [r7, #8]
 8006368:	603b      	str	r3, [r7, #0]
 800636a:	4613      	mov	r3, r2
 800636c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800636e:	2300      	movs	r3, #0
 8006370:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b20      	cmp	r3, #32
 800637c:	d17c      	bne.n	8006478 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d002      	beq.n	800638a <HAL_UART_Transmit+0x2c>
 8006384:	88fb      	ldrh	r3, [r7, #6]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e075      	b.n	800647a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006394:	2b01      	cmp	r3, #1
 8006396:	d101      	bne.n	800639c <HAL_UART_Transmit+0x3e>
 8006398:	2302      	movs	r3, #2
 800639a:	e06e      	b.n	800647a <HAL_UART_Transmit+0x11c>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2221      	movs	r2, #33	; 0x21
 80063ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063b2:	f7fb ffcb 	bl	800234c <HAL_GetTick>
 80063b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	88fa      	ldrh	r2, [r7, #6]
 80063bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	88fa      	ldrh	r2, [r7, #6]
 80063c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063cc:	d108      	bne.n	80063e0 <HAL_UART_Transmit+0x82>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d104      	bne.n	80063e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80063d6:	2300      	movs	r3, #0
 80063d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	61bb      	str	r3, [r7, #24]
 80063de:	e003      	b.n	80063e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063e4:	2300      	movs	r3, #0
 80063e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80063f0:	e02a      	b.n	8006448 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	2200      	movs	r2, #0
 80063fa:	2180      	movs	r1, #128	; 0x80
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 f840 	bl	8006482 <UART_WaitOnFlagUntilTimeout>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e036      	b.n	800647a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10b      	bne.n	800642a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	881b      	ldrh	r3, [r3, #0]
 8006416:	461a      	mov	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006420:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	3302      	adds	r3, #2
 8006426:	61bb      	str	r3, [r7, #24]
 8006428:	e007      	b.n	800643a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	781a      	ldrb	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	3301      	adds	r3, #1
 8006438:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800643e:	b29b      	uxth	r3, r3
 8006440:	3b01      	subs	r3, #1
 8006442:	b29a      	uxth	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800644c:	b29b      	uxth	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1cf      	bne.n	80063f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	9300      	str	r3, [sp, #0]
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	2200      	movs	r2, #0
 800645a:	2140      	movs	r1, #64	; 0x40
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f000 f810 	bl	8006482 <UART_WaitOnFlagUntilTimeout>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d001      	beq.n	800646c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e006      	b.n	800647a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2220      	movs	r2, #32
 8006470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006474:	2300      	movs	r3, #0
 8006476:	e000      	b.n	800647a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006478:	2302      	movs	r3, #2
  }
}
 800647a:	4618      	mov	r0, r3
 800647c:	3720      	adds	r7, #32
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b090      	sub	sp, #64	; 0x40
 8006486:	af00      	add	r7, sp, #0
 8006488:	60f8      	str	r0, [r7, #12]
 800648a:	60b9      	str	r1, [r7, #8]
 800648c:	603b      	str	r3, [r7, #0]
 800648e:	4613      	mov	r3, r2
 8006490:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006492:	e050      	b.n	8006536 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006496:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800649a:	d04c      	beq.n	8006536 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800649c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d007      	beq.n	80064b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80064a2:	f7fb ff53 	bl	800234c <HAL_GetTick>
 80064a6:	4602      	mov	r2, r0
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d241      	bcs.n	8006536 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	330c      	adds	r3, #12
 80064b8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064bc:	e853 3f00 	ldrex	r3, [r3]
 80064c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	330c      	adds	r3, #12
 80064d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064d2:	637a      	str	r2, [r7, #52]	; 0x34
 80064d4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064da:	e841 2300 	strex	r3, r2, [r1]
 80064de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80064e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1e5      	bne.n	80064b2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	3314      	adds	r3, #20
 80064ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	e853 3f00 	ldrex	r3, [r3]
 80064f4:	613b      	str	r3, [r7, #16]
   return(result);
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	f023 0301 	bic.w	r3, r3, #1
 80064fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	3314      	adds	r3, #20
 8006504:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006506:	623a      	str	r2, [r7, #32]
 8006508:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650a:	69f9      	ldr	r1, [r7, #28]
 800650c:	6a3a      	ldr	r2, [r7, #32]
 800650e:	e841 2300 	strex	r3, r2, [r1]
 8006512:	61bb      	str	r3, [r7, #24]
   return(result);
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1e5      	bne.n	80064e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2220      	movs	r2, #32
 800651e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2220      	movs	r2, #32
 8006526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e00f      	b.n	8006556 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	4013      	ands	r3, r2
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	429a      	cmp	r2, r3
 8006544:	bf0c      	ite	eq
 8006546:	2301      	moveq	r3, #1
 8006548:	2300      	movne	r3, #0
 800654a:	b2db      	uxtb	r3, r3
 800654c:	461a      	mov	r2, r3
 800654e:	79fb      	ldrb	r3, [r7, #7]
 8006550:	429a      	cmp	r2, r3
 8006552:	d09f      	beq.n	8006494 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3740      	adds	r7, #64	; 0x40
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
	...

08006560 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006564:	b0c0      	sub	sp, #256	; 0x100
 8006566:	af00      	add	r7, sp, #0
 8006568:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800656c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800657c:	68d9      	ldr	r1, [r3, #12]
 800657e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	ea40 0301 	orr.w	r3, r0, r1
 8006588:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800658a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	431a      	orrs	r2, r3
 8006598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	431a      	orrs	r2, r3
 80065a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80065ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80065b8:	f021 010c 	bic.w	r1, r1, #12
 80065bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80065c6:	430b      	orrs	r3, r1
 80065c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80065d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065da:	6999      	ldr	r1, [r3, #24]
 80065dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	ea40 0301 	orr.w	r3, r0, r1
 80065e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	4b8f      	ldr	r3, [pc, #572]	; (800682c <UART_SetConfig+0x2cc>)
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d005      	beq.n	8006600 <UART_SetConfig+0xa0>
 80065f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	4b8d      	ldr	r3, [pc, #564]	; (8006830 <UART_SetConfig+0x2d0>)
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d104      	bne.n	800660a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006600:	f7fc fe86 	bl	8003310 <HAL_RCC_GetPCLK2Freq>
 8006604:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006608:	e003      	b.n	8006612 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800660a:	f7fc fe6d 	bl	80032e8 <HAL_RCC_GetPCLK1Freq>
 800660e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006616:	69db      	ldr	r3, [r3, #28]
 8006618:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800661c:	f040 810c 	bne.w	8006838 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006624:	2200      	movs	r2, #0
 8006626:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800662a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800662e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006632:	4622      	mov	r2, r4
 8006634:	462b      	mov	r3, r5
 8006636:	1891      	adds	r1, r2, r2
 8006638:	65b9      	str	r1, [r7, #88]	; 0x58
 800663a:	415b      	adcs	r3, r3
 800663c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800663e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006642:	4621      	mov	r1, r4
 8006644:	eb12 0801 	adds.w	r8, r2, r1
 8006648:	4629      	mov	r1, r5
 800664a:	eb43 0901 	adc.w	r9, r3, r1
 800664e:	f04f 0200 	mov.w	r2, #0
 8006652:	f04f 0300 	mov.w	r3, #0
 8006656:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800665a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800665e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006662:	4690      	mov	r8, r2
 8006664:	4699      	mov	r9, r3
 8006666:	4623      	mov	r3, r4
 8006668:	eb18 0303 	adds.w	r3, r8, r3
 800666c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006670:	462b      	mov	r3, r5
 8006672:	eb49 0303 	adc.w	r3, r9, r3
 8006676:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800667a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006686:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800668a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800668e:	460b      	mov	r3, r1
 8006690:	18db      	adds	r3, r3, r3
 8006692:	653b      	str	r3, [r7, #80]	; 0x50
 8006694:	4613      	mov	r3, r2
 8006696:	eb42 0303 	adc.w	r3, r2, r3
 800669a:	657b      	str	r3, [r7, #84]	; 0x54
 800669c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80066a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80066a4:	f7f9 fe04 	bl	80002b0 <__aeabi_uldivmod>
 80066a8:	4602      	mov	r2, r0
 80066aa:	460b      	mov	r3, r1
 80066ac:	4b61      	ldr	r3, [pc, #388]	; (8006834 <UART_SetConfig+0x2d4>)
 80066ae:	fba3 2302 	umull	r2, r3, r3, r2
 80066b2:	095b      	lsrs	r3, r3, #5
 80066b4:	011c      	lsls	r4, r3, #4
 80066b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066ba:	2200      	movs	r2, #0
 80066bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80066c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80066c8:	4642      	mov	r2, r8
 80066ca:	464b      	mov	r3, r9
 80066cc:	1891      	adds	r1, r2, r2
 80066ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80066d0:	415b      	adcs	r3, r3
 80066d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80066d8:	4641      	mov	r1, r8
 80066da:	eb12 0a01 	adds.w	sl, r2, r1
 80066de:	4649      	mov	r1, r9
 80066e0:	eb43 0b01 	adc.w	fp, r3, r1
 80066e4:	f04f 0200 	mov.w	r2, #0
 80066e8:	f04f 0300 	mov.w	r3, #0
 80066ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80066f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80066f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066f8:	4692      	mov	sl, r2
 80066fa:	469b      	mov	fp, r3
 80066fc:	4643      	mov	r3, r8
 80066fe:	eb1a 0303 	adds.w	r3, sl, r3
 8006702:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006706:	464b      	mov	r3, r9
 8006708:	eb4b 0303 	adc.w	r3, fp, r3
 800670c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800671c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006720:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006724:	460b      	mov	r3, r1
 8006726:	18db      	adds	r3, r3, r3
 8006728:	643b      	str	r3, [r7, #64]	; 0x40
 800672a:	4613      	mov	r3, r2
 800672c:	eb42 0303 	adc.w	r3, r2, r3
 8006730:	647b      	str	r3, [r7, #68]	; 0x44
 8006732:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006736:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800673a:	f7f9 fdb9 	bl	80002b0 <__aeabi_uldivmod>
 800673e:	4602      	mov	r2, r0
 8006740:	460b      	mov	r3, r1
 8006742:	4611      	mov	r1, r2
 8006744:	4b3b      	ldr	r3, [pc, #236]	; (8006834 <UART_SetConfig+0x2d4>)
 8006746:	fba3 2301 	umull	r2, r3, r3, r1
 800674a:	095b      	lsrs	r3, r3, #5
 800674c:	2264      	movs	r2, #100	; 0x64
 800674e:	fb02 f303 	mul.w	r3, r2, r3
 8006752:	1acb      	subs	r3, r1, r3
 8006754:	00db      	lsls	r3, r3, #3
 8006756:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800675a:	4b36      	ldr	r3, [pc, #216]	; (8006834 <UART_SetConfig+0x2d4>)
 800675c:	fba3 2302 	umull	r2, r3, r3, r2
 8006760:	095b      	lsrs	r3, r3, #5
 8006762:	005b      	lsls	r3, r3, #1
 8006764:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006768:	441c      	add	r4, r3
 800676a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800676e:	2200      	movs	r2, #0
 8006770:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006774:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006778:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800677c:	4642      	mov	r2, r8
 800677e:	464b      	mov	r3, r9
 8006780:	1891      	adds	r1, r2, r2
 8006782:	63b9      	str	r1, [r7, #56]	; 0x38
 8006784:	415b      	adcs	r3, r3
 8006786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006788:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800678c:	4641      	mov	r1, r8
 800678e:	1851      	adds	r1, r2, r1
 8006790:	6339      	str	r1, [r7, #48]	; 0x30
 8006792:	4649      	mov	r1, r9
 8006794:	414b      	adcs	r3, r1
 8006796:	637b      	str	r3, [r7, #52]	; 0x34
 8006798:	f04f 0200 	mov.w	r2, #0
 800679c:	f04f 0300 	mov.w	r3, #0
 80067a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80067a4:	4659      	mov	r1, fp
 80067a6:	00cb      	lsls	r3, r1, #3
 80067a8:	4651      	mov	r1, sl
 80067aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067ae:	4651      	mov	r1, sl
 80067b0:	00ca      	lsls	r2, r1, #3
 80067b2:	4610      	mov	r0, r2
 80067b4:	4619      	mov	r1, r3
 80067b6:	4603      	mov	r3, r0
 80067b8:	4642      	mov	r2, r8
 80067ba:	189b      	adds	r3, r3, r2
 80067bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067c0:	464b      	mov	r3, r9
 80067c2:	460a      	mov	r2, r1
 80067c4:	eb42 0303 	adc.w	r3, r2, r3
 80067c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80067d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80067dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80067e0:	460b      	mov	r3, r1
 80067e2:	18db      	adds	r3, r3, r3
 80067e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80067e6:	4613      	mov	r3, r2
 80067e8:	eb42 0303 	adc.w	r3, r2, r3
 80067ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80067f6:	f7f9 fd5b 	bl	80002b0 <__aeabi_uldivmod>
 80067fa:	4602      	mov	r2, r0
 80067fc:	460b      	mov	r3, r1
 80067fe:	4b0d      	ldr	r3, [pc, #52]	; (8006834 <UART_SetConfig+0x2d4>)
 8006800:	fba3 1302 	umull	r1, r3, r3, r2
 8006804:	095b      	lsrs	r3, r3, #5
 8006806:	2164      	movs	r1, #100	; 0x64
 8006808:	fb01 f303 	mul.w	r3, r1, r3
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	00db      	lsls	r3, r3, #3
 8006810:	3332      	adds	r3, #50	; 0x32
 8006812:	4a08      	ldr	r2, [pc, #32]	; (8006834 <UART_SetConfig+0x2d4>)
 8006814:	fba2 2303 	umull	r2, r3, r2, r3
 8006818:	095b      	lsrs	r3, r3, #5
 800681a:	f003 0207 	and.w	r2, r3, #7
 800681e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4422      	add	r2, r4
 8006826:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006828:	e106      	b.n	8006a38 <UART_SetConfig+0x4d8>
 800682a:	bf00      	nop
 800682c:	40011000 	.word	0x40011000
 8006830:	40011400 	.word	0x40011400
 8006834:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006838:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800683c:	2200      	movs	r2, #0
 800683e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006842:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006846:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800684a:	4642      	mov	r2, r8
 800684c:	464b      	mov	r3, r9
 800684e:	1891      	adds	r1, r2, r2
 8006850:	6239      	str	r1, [r7, #32]
 8006852:	415b      	adcs	r3, r3
 8006854:	627b      	str	r3, [r7, #36]	; 0x24
 8006856:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800685a:	4641      	mov	r1, r8
 800685c:	1854      	adds	r4, r2, r1
 800685e:	4649      	mov	r1, r9
 8006860:	eb43 0501 	adc.w	r5, r3, r1
 8006864:	f04f 0200 	mov.w	r2, #0
 8006868:	f04f 0300 	mov.w	r3, #0
 800686c:	00eb      	lsls	r3, r5, #3
 800686e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006872:	00e2      	lsls	r2, r4, #3
 8006874:	4614      	mov	r4, r2
 8006876:	461d      	mov	r5, r3
 8006878:	4643      	mov	r3, r8
 800687a:	18e3      	adds	r3, r4, r3
 800687c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006880:	464b      	mov	r3, r9
 8006882:	eb45 0303 	adc.w	r3, r5, r3
 8006886:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800688a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006896:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800689a:	f04f 0200 	mov.w	r2, #0
 800689e:	f04f 0300 	mov.w	r3, #0
 80068a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80068a6:	4629      	mov	r1, r5
 80068a8:	008b      	lsls	r3, r1, #2
 80068aa:	4621      	mov	r1, r4
 80068ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068b0:	4621      	mov	r1, r4
 80068b2:	008a      	lsls	r2, r1, #2
 80068b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80068b8:	f7f9 fcfa 	bl	80002b0 <__aeabi_uldivmod>
 80068bc:	4602      	mov	r2, r0
 80068be:	460b      	mov	r3, r1
 80068c0:	4b60      	ldr	r3, [pc, #384]	; (8006a44 <UART_SetConfig+0x4e4>)
 80068c2:	fba3 2302 	umull	r2, r3, r3, r2
 80068c6:	095b      	lsrs	r3, r3, #5
 80068c8:	011c      	lsls	r4, r3, #4
 80068ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068ce:	2200      	movs	r2, #0
 80068d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80068d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80068d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80068dc:	4642      	mov	r2, r8
 80068de:	464b      	mov	r3, r9
 80068e0:	1891      	adds	r1, r2, r2
 80068e2:	61b9      	str	r1, [r7, #24]
 80068e4:	415b      	adcs	r3, r3
 80068e6:	61fb      	str	r3, [r7, #28]
 80068e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068ec:	4641      	mov	r1, r8
 80068ee:	1851      	adds	r1, r2, r1
 80068f0:	6139      	str	r1, [r7, #16]
 80068f2:	4649      	mov	r1, r9
 80068f4:	414b      	adcs	r3, r1
 80068f6:	617b      	str	r3, [r7, #20]
 80068f8:	f04f 0200 	mov.w	r2, #0
 80068fc:	f04f 0300 	mov.w	r3, #0
 8006900:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006904:	4659      	mov	r1, fp
 8006906:	00cb      	lsls	r3, r1, #3
 8006908:	4651      	mov	r1, sl
 800690a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800690e:	4651      	mov	r1, sl
 8006910:	00ca      	lsls	r2, r1, #3
 8006912:	4610      	mov	r0, r2
 8006914:	4619      	mov	r1, r3
 8006916:	4603      	mov	r3, r0
 8006918:	4642      	mov	r2, r8
 800691a:	189b      	adds	r3, r3, r2
 800691c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006920:	464b      	mov	r3, r9
 8006922:	460a      	mov	r2, r1
 8006924:	eb42 0303 	adc.w	r3, r2, r3
 8006928:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800692c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	67bb      	str	r3, [r7, #120]	; 0x78
 8006936:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006938:	f04f 0200 	mov.w	r2, #0
 800693c:	f04f 0300 	mov.w	r3, #0
 8006940:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006944:	4649      	mov	r1, r9
 8006946:	008b      	lsls	r3, r1, #2
 8006948:	4641      	mov	r1, r8
 800694a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800694e:	4641      	mov	r1, r8
 8006950:	008a      	lsls	r2, r1, #2
 8006952:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006956:	f7f9 fcab 	bl	80002b0 <__aeabi_uldivmod>
 800695a:	4602      	mov	r2, r0
 800695c:	460b      	mov	r3, r1
 800695e:	4611      	mov	r1, r2
 8006960:	4b38      	ldr	r3, [pc, #224]	; (8006a44 <UART_SetConfig+0x4e4>)
 8006962:	fba3 2301 	umull	r2, r3, r3, r1
 8006966:	095b      	lsrs	r3, r3, #5
 8006968:	2264      	movs	r2, #100	; 0x64
 800696a:	fb02 f303 	mul.w	r3, r2, r3
 800696e:	1acb      	subs	r3, r1, r3
 8006970:	011b      	lsls	r3, r3, #4
 8006972:	3332      	adds	r3, #50	; 0x32
 8006974:	4a33      	ldr	r2, [pc, #204]	; (8006a44 <UART_SetConfig+0x4e4>)
 8006976:	fba2 2303 	umull	r2, r3, r2, r3
 800697a:	095b      	lsrs	r3, r3, #5
 800697c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006980:	441c      	add	r4, r3
 8006982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006986:	2200      	movs	r2, #0
 8006988:	673b      	str	r3, [r7, #112]	; 0x70
 800698a:	677a      	str	r2, [r7, #116]	; 0x74
 800698c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006990:	4642      	mov	r2, r8
 8006992:	464b      	mov	r3, r9
 8006994:	1891      	adds	r1, r2, r2
 8006996:	60b9      	str	r1, [r7, #8]
 8006998:	415b      	adcs	r3, r3
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069a0:	4641      	mov	r1, r8
 80069a2:	1851      	adds	r1, r2, r1
 80069a4:	6039      	str	r1, [r7, #0]
 80069a6:	4649      	mov	r1, r9
 80069a8:	414b      	adcs	r3, r1
 80069aa:	607b      	str	r3, [r7, #4]
 80069ac:	f04f 0200 	mov.w	r2, #0
 80069b0:	f04f 0300 	mov.w	r3, #0
 80069b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80069b8:	4659      	mov	r1, fp
 80069ba:	00cb      	lsls	r3, r1, #3
 80069bc:	4651      	mov	r1, sl
 80069be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069c2:	4651      	mov	r1, sl
 80069c4:	00ca      	lsls	r2, r1, #3
 80069c6:	4610      	mov	r0, r2
 80069c8:	4619      	mov	r1, r3
 80069ca:	4603      	mov	r3, r0
 80069cc:	4642      	mov	r2, r8
 80069ce:	189b      	adds	r3, r3, r2
 80069d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80069d2:	464b      	mov	r3, r9
 80069d4:	460a      	mov	r2, r1
 80069d6:	eb42 0303 	adc.w	r3, r2, r3
 80069da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	663b      	str	r3, [r7, #96]	; 0x60
 80069e6:	667a      	str	r2, [r7, #100]	; 0x64
 80069e8:	f04f 0200 	mov.w	r2, #0
 80069ec:	f04f 0300 	mov.w	r3, #0
 80069f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80069f4:	4649      	mov	r1, r9
 80069f6:	008b      	lsls	r3, r1, #2
 80069f8:	4641      	mov	r1, r8
 80069fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069fe:	4641      	mov	r1, r8
 8006a00:	008a      	lsls	r2, r1, #2
 8006a02:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006a06:	f7f9 fc53 	bl	80002b0 <__aeabi_uldivmod>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	4b0d      	ldr	r3, [pc, #52]	; (8006a44 <UART_SetConfig+0x4e4>)
 8006a10:	fba3 1302 	umull	r1, r3, r3, r2
 8006a14:	095b      	lsrs	r3, r3, #5
 8006a16:	2164      	movs	r1, #100	; 0x64
 8006a18:	fb01 f303 	mul.w	r3, r1, r3
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	011b      	lsls	r3, r3, #4
 8006a20:	3332      	adds	r3, #50	; 0x32
 8006a22:	4a08      	ldr	r2, [pc, #32]	; (8006a44 <UART_SetConfig+0x4e4>)
 8006a24:	fba2 2303 	umull	r2, r3, r2, r3
 8006a28:	095b      	lsrs	r3, r3, #5
 8006a2a:	f003 020f 	and.w	r2, r3, #15
 8006a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4422      	add	r2, r4
 8006a36:	609a      	str	r2, [r3, #8]
}
 8006a38:	bf00      	nop
 8006a3a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a44:	51eb851f 	.word	0x51eb851f

08006a48 <std>:
 8006a48:	2300      	movs	r3, #0
 8006a4a:	b510      	push	{r4, lr}
 8006a4c:	4604      	mov	r4, r0
 8006a4e:	e9c0 3300 	strd	r3, r3, [r0]
 8006a52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a56:	6083      	str	r3, [r0, #8]
 8006a58:	8181      	strh	r1, [r0, #12]
 8006a5a:	6643      	str	r3, [r0, #100]	; 0x64
 8006a5c:	81c2      	strh	r2, [r0, #14]
 8006a5e:	6183      	str	r3, [r0, #24]
 8006a60:	4619      	mov	r1, r3
 8006a62:	2208      	movs	r2, #8
 8006a64:	305c      	adds	r0, #92	; 0x5c
 8006a66:	f000 f8c3 	bl	8006bf0 <memset>
 8006a6a:	4b0d      	ldr	r3, [pc, #52]	; (8006aa0 <std+0x58>)
 8006a6c:	6263      	str	r3, [r4, #36]	; 0x24
 8006a6e:	4b0d      	ldr	r3, [pc, #52]	; (8006aa4 <std+0x5c>)
 8006a70:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a72:	4b0d      	ldr	r3, [pc, #52]	; (8006aa8 <std+0x60>)
 8006a74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a76:	4b0d      	ldr	r3, [pc, #52]	; (8006aac <std+0x64>)
 8006a78:	6323      	str	r3, [r4, #48]	; 0x30
 8006a7a:	4b0d      	ldr	r3, [pc, #52]	; (8006ab0 <std+0x68>)
 8006a7c:	6224      	str	r4, [r4, #32]
 8006a7e:	429c      	cmp	r4, r3
 8006a80:	d006      	beq.n	8006a90 <std+0x48>
 8006a82:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006a86:	4294      	cmp	r4, r2
 8006a88:	d002      	beq.n	8006a90 <std+0x48>
 8006a8a:	33d0      	adds	r3, #208	; 0xd0
 8006a8c:	429c      	cmp	r4, r3
 8006a8e:	d105      	bne.n	8006a9c <std+0x54>
 8006a90:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a98:	f000 b8dc 	b.w	8006c54 <__retarget_lock_init_recursive>
 8006a9c:	bd10      	pop	{r4, pc}
 8006a9e:	bf00      	nop
 8006aa0:	080074b5 	.word	0x080074b5
 8006aa4:	080074d7 	.word	0x080074d7
 8006aa8:	0800750f 	.word	0x0800750f
 8006aac:	08007533 	.word	0x08007533
 8006ab0:	20000480 	.word	0x20000480

08006ab4 <stdio_exit_handler>:
 8006ab4:	4a02      	ldr	r2, [pc, #8]	; (8006ac0 <stdio_exit_handler+0xc>)
 8006ab6:	4903      	ldr	r1, [pc, #12]	; (8006ac4 <stdio_exit_handler+0x10>)
 8006ab8:	4803      	ldr	r0, [pc, #12]	; (8006ac8 <stdio_exit_handler+0x14>)
 8006aba:	f000 b869 	b.w	8006b90 <_fwalk_sglue>
 8006abe:	bf00      	nop
 8006ac0:	2000000c 	.word	0x2000000c
 8006ac4:	0800744d 	.word	0x0800744d
 8006ac8:	20000018 	.word	0x20000018

08006acc <cleanup_stdio>:
 8006acc:	6841      	ldr	r1, [r0, #4]
 8006ace:	4b0c      	ldr	r3, [pc, #48]	; (8006b00 <cleanup_stdio+0x34>)
 8006ad0:	4299      	cmp	r1, r3
 8006ad2:	b510      	push	{r4, lr}
 8006ad4:	4604      	mov	r4, r0
 8006ad6:	d001      	beq.n	8006adc <cleanup_stdio+0x10>
 8006ad8:	f000 fcb8 	bl	800744c <_fflush_r>
 8006adc:	68a1      	ldr	r1, [r4, #8]
 8006ade:	4b09      	ldr	r3, [pc, #36]	; (8006b04 <cleanup_stdio+0x38>)
 8006ae0:	4299      	cmp	r1, r3
 8006ae2:	d002      	beq.n	8006aea <cleanup_stdio+0x1e>
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	f000 fcb1 	bl	800744c <_fflush_r>
 8006aea:	68e1      	ldr	r1, [r4, #12]
 8006aec:	4b06      	ldr	r3, [pc, #24]	; (8006b08 <cleanup_stdio+0x3c>)
 8006aee:	4299      	cmp	r1, r3
 8006af0:	d004      	beq.n	8006afc <cleanup_stdio+0x30>
 8006af2:	4620      	mov	r0, r4
 8006af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006af8:	f000 bca8 	b.w	800744c <_fflush_r>
 8006afc:	bd10      	pop	{r4, pc}
 8006afe:	bf00      	nop
 8006b00:	20000480 	.word	0x20000480
 8006b04:	200004e8 	.word	0x200004e8
 8006b08:	20000550 	.word	0x20000550

08006b0c <global_stdio_init.part.0>:
 8006b0c:	b510      	push	{r4, lr}
 8006b0e:	4b0b      	ldr	r3, [pc, #44]	; (8006b3c <global_stdio_init.part.0+0x30>)
 8006b10:	4c0b      	ldr	r4, [pc, #44]	; (8006b40 <global_stdio_init.part.0+0x34>)
 8006b12:	4a0c      	ldr	r2, [pc, #48]	; (8006b44 <global_stdio_init.part.0+0x38>)
 8006b14:	601a      	str	r2, [r3, #0]
 8006b16:	4620      	mov	r0, r4
 8006b18:	2200      	movs	r2, #0
 8006b1a:	2104      	movs	r1, #4
 8006b1c:	f7ff ff94 	bl	8006a48 <std>
 8006b20:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006b24:	2201      	movs	r2, #1
 8006b26:	2109      	movs	r1, #9
 8006b28:	f7ff ff8e 	bl	8006a48 <std>
 8006b2c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006b30:	2202      	movs	r2, #2
 8006b32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b36:	2112      	movs	r1, #18
 8006b38:	f7ff bf86 	b.w	8006a48 <std>
 8006b3c:	200005b8 	.word	0x200005b8
 8006b40:	20000480 	.word	0x20000480
 8006b44:	08006ab5 	.word	0x08006ab5

08006b48 <__sfp_lock_acquire>:
 8006b48:	4801      	ldr	r0, [pc, #4]	; (8006b50 <__sfp_lock_acquire+0x8>)
 8006b4a:	f000 b884 	b.w	8006c56 <__retarget_lock_acquire_recursive>
 8006b4e:	bf00      	nop
 8006b50:	200005bd 	.word	0x200005bd

08006b54 <__sfp_lock_release>:
 8006b54:	4801      	ldr	r0, [pc, #4]	; (8006b5c <__sfp_lock_release+0x8>)
 8006b56:	f000 b87f 	b.w	8006c58 <__retarget_lock_release_recursive>
 8006b5a:	bf00      	nop
 8006b5c:	200005bd 	.word	0x200005bd

08006b60 <__sinit>:
 8006b60:	b510      	push	{r4, lr}
 8006b62:	4604      	mov	r4, r0
 8006b64:	f7ff fff0 	bl	8006b48 <__sfp_lock_acquire>
 8006b68:	6a23      	ldr	r3, [r4, #32]
 8006b6a:	b11b      	cbz	r3, 8006b74 <__sinit+0x14>
 8006b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b70:	f7ff bff0 	b.w	8006b54 <__sfp_lock_release>
 8006b74:	4b04      	ldr	r3, [pc, #16]	; (8006b88 <__sinit+0x28>)
 8006b76:	6223      	str	r3, [r4, #32]
 8006b78:	4b04      	ldr	r3, [pc, #16]	; (8006b8c <__sinit+0x2c>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1f5      	bne.n	8006b6c <__sinit+0xc>
 8006b80:	f7ff ffc4 	bl	8006b0c <global_stdio_init.part.0>
 8006b84:	e7f2      	b.n	8006b6c <__sinit+0xc>
 8006b86:	bf00      	nop
 8006b88:	08006acd 	.word	0x08006acd
 8006b8c:	200005b8 	.word	0x200005b8

08006b90 <_fwalk_sglue>:
 8006b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b94:	4607      	mov	r7, r0
 8006b96:	4688      	mov	r8, r1
 8006b98:	4614      	mov	r4, r2
 8006b9a:	2600      	movs	r6, #0
 8006b9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ba0:	f1b9 0901 	subs.w	r9, r9, #1
 8006ba4:	d505      	bpl.n	8006bb2 <_fwalk_sglue+0x22>
 8006ba6:	6824      	ldr	r4, [r4, #0]
 8006ba8:	2c00      	cmp	r4, #0
 8006baa:	d1f7      	bne.n	8006b9c <_fwalk_sglue+0xc>
 8006bac:	4630      	mov	r0, r6
 8006bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bb2:	89ab      	ldrh	r3, [r5, #12]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d907      	bls.n	8006bc8 <_fwalk_sglue+0x38>
 8006bb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	d003      	beq.n	8006bc8 <_fwalk_sglue+0x38>
 8006bc0:	4629      	mov	r1, r5
 8006bc2:	4638      	mov	r0, r7
 8006bc4:	47c0      	blx	r8
 8006bc6:	4306      	orrs	r6, r0
 8006bc8:	3568      	adds	r5, #104	; 0x68
 8006bca:	e7e9      	b.n	8006ba0 <_fwalk_sglue+0x10>

08006bcc <iprintf>:
 8006bcc:	b40f      	push	{r0, r1, r2, r3}
 8006bce:	b507      	push	{r0, r1, r2, lr}
 8006bd0:	4906      	ldr	r1, [pc, #24]	; (8006bec <iprintf+0x20>)
 8006bd2:	ab04      	add	r3, sp, #16
 8006bd4:	6808      	ldr	r0, [r1, #0]
 8006bd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bda:	6881      	ldr	r1, [r0, #8]
 8006bdc:	9301      	str	r3, [sp, #4]
 8006bde:	f000 f865 	bl	8006cac <_vfiprintf_r>
 8006be2:	b003      	add	sp, #12
 8006be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006be8:	b004      	add	sp, #16
 8006bea:	4770      	bx	lr
 8006bec:	20000064 	.word	0x20000064

08006bf0 <memset>:
 8006bf0:	4402      	add	r2, r0
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d100      	bne.n	8006bfa <memset+0xa>
 8006bf8:	4770      	bx	lr
 8006bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8006bfe:	e7f9      	b.n	8006bf4 <memset+0x4>

08006c00 <__errno>:
 8006c00:	4b01      	ldr	r3, [pc, #4]	; (8006c08 <__errno+0x8>)
 8006c02:	6818      	ldr	r0, [r3, #0]
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	20000064 	.word	0x20000064

08006c0c <__libc_init_array>:
 8006c0c:	b570      	push	{r4, r5, r6, lr}
 8006c0e:	4d0d      	ldr	r5, [pc, #52]	; (8006c44 <__libc_init_array+0x38>)
 8006c10:	4c0d      	ldr	r4, [pc, #52]	; (8006c48 <__libc_init_array+0x3c>)
 8006c12:	1b64      	subs	r4, r4, r5
 8006c14:	10a4      	asrs	r4, r4, #2
 8006c16:	2600      	movs	r6, #0
 8006c18:	42a6      	cmp	r6, r4
 8006c1a:	d109      	bne.n	8006c30 <__libc_init_array+0x24>
 8006c1c:	4d0b      	ldr	r5, [pc, #44]	; (8006c4c <__libc_init_array+0x40>)
 8006c1e:	4c0c      	ldr	r4, [pc, #48]	; (8006c50 <__libc_init_array+0x44>)
 8006c20:	f000 fe46 	bl	80078b0 <_init>
 8006c24:	1b64      	subs	r4, r4, r5
 8006c26:	10a4      	asrs	r4, r4, #2
 8006c28:	2600      	movs	r6, #0
 8006c2a:	42a6      	cmp	r6, r4
 8006c2c:	d105      	bne.n	8006c3a <__libc_init_array+0x2e>
 8006c2e:	bd70      	pop	{r4, r5, r6, pc}
 8006c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c34:	4798      	blx	r3
 8006c36:	3601      	adds	r6, #1
 8006c38:	e7ee      	b.n	8006c18 <__libc_init_array+0xc>
 8006c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c3e:	4798      	blx	r3
 8006c40:	3601      	adds	r6, #1
 8006c42:	e7f2      	b.n	8006c2a <__libc_init_array+0x1e>
 8006c44:	08007924 	.word	0x08007924
 8006c48:	08007924 	.word	0x08007924
 8006c4c:	08007924 	.word	0x08007924
 8006c50:	08007928 	.word	0x08007928

08006c54 <__retarget_lock_init_recursive>:
 8006c54:	4770      	bx	lr

08006c56 <__retarget_lock_acquire_recursive>:
 8006c56:	4770      	bx	lr

08006c58 <__retarget_lock_release_recursive>:
 8006c58:	4770      	bx	lr

08006c5a <__sfputc_r>:
 8006c5a:	6893      	ldr	r3, [r2, #8]
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	b410      	push	{r4}
 8006c62:	6093      	str	r3, [r2, #8]
 8006c64:	da08      	bge.n	8006c78 <__sfputc_r+0x1e>
 8006c66:	6994      	ldr	r4, [r2, #24]
 8006c68:	42a3      	cmp	r3, r4
 8006c6a:	db01      	blt.n	8006c70 <__sfputc_r+0x16>
 8006c6c:	290a      	cmp	r1, #10
 8006c6e:	d103      	bne.n	8006c78 <__sfputc_r+0x1e>
 8006c70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c74:	f000 bc61 	b.w	800753a <__swbuf_r>
 8006c78:	6813      	ldr	r3, [r2, #0]
 8006c7a:	1c58      	adds	r0, r3, #1
 8006c7c:	6010      	str	r0, [r2, #0]
 8006c7e:	7019      	strb	r1, [r3, #0]
 8006c80:	4608      	mov	r0, r1
 8006c82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <__sfputs_r>:
 8006c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8a:	4606      	mov	r6, r0
 8006c8c:	460f      	mov	r7, r1
 8006c8e:	4614      	mov	r4, r2
 8006c90:	18d5      	adds	r5, r2, r3
 8006c92:	42ac      	cmp	r4, r5
 8006c94:	d101      	bne.n	8006c9a <__sfputs_r+0x12>
 8006c96:	2000      	movs	r0, #0
 8006c98:	e007      	b.n	8006caa <__sfputs_r+0x22>
 8006c9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c9e:	463a      	mov	r2, r7
 8006ca0:	4630      	mov	r0, r6
 8006ca2:	f7ff ffda 	bl	8006c5a <__sfputc_r>
 8006ca6:	1c43      	adds	r3, r0, #1
 8006ca8:	d1f3      	bne.n	8006c92 <__sfputs_r+0xa>
 8006caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006cac <_vfiprintf_r>:
 8006cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb0:	460d      	mov	r5, r1
 8006cb2:	b09d      	sub	sp, #116	; 0x74
 8006cb4:	4614      	mov	r4, r2
 8006cb6:	4698      	mov	r8, r3
 8006cb8:	4606      	mov	r6, r0
 8006cba:	b118      	cbz	r0, 8006cc4 <_vfiprintf_r+0x18>
 8006cbc:	6a03      	ldr	r3, [r0, #32]
 8006cbe:	b90b      	cbnz	r3, 8006cc4 <_vfiprintf_r+0x18>
 8006cc0:	f7ff ff4e 	bl	8006b60 <__sinit>
 8006cc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cc6:	07d9      	lsls	r1, r3, #31
 8006cc8:	d405      	bmi.n	8006cd6 <_vfiprintf_r+0x2a>
 8006cca:	89ab      	ldrh	r3, [r5, #12]
 8006ccc:	059a      	lsls	r2, r3, #22
 8006cce:	d402      	bmi.n	8006cd6 <_vfiprintf_r+0x2a>
 8006cd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cd2:	f7ff ffc0 	bl	8006c56 <__retarget_lock_acquire_recursive>
 8006cd6:	89ab      	ldrh	r3, [r5, #12]
 8006cd8:	071b      	lsls	r3, r3, #28
 8006cda:	d501      	bpl.n	8006ce0 <_vfiprintf_r+0x34>
 8006cdc:	692b      	ldr	r3, [r5, #16]
 8006cde:	b99b      	cbnz	r3, 8006d08 <_vfiprintf_r+0x5c>
 8006ce0:	4629      	mov	r1, r5
 8006ce2:	4630      	mov	r0, r6
 8006ce4:	f000 fc66 	bl	80075b4 <__swsetup_r>
 8006ce8:	b170      	cbz	r0, 8006d08 <_vfiprintf_r+0x5c>
 8006cea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cec:	07dc      	lsls	r4, r3, #31
 8006cee:	d504      	bpl.n	8006cfa <_vfiprintf_r+0x4e>
 8006cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cf4:	b01d      	add	sp, #116	; 0x74
 8006cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cfa:	89ab      	ldrh	r3, [r5, #12]
 8006cfc:	0598      	lsls	r0, r3, #22
 8006cfe:	d4f7      	bmi.n	8006cf0 <_vfiprintf_r+0x44>
 8006d00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d02:	f7ff ffa9 	bl	8006c58 <__retarget_lock_release_recursive>
 8006d06:	e7f3      	b.n	8006cf0 <_vfiprintf_r+0x44>
 8006d08:	2300      	movs	r3, #0
 8006d0a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d0c:	2320      	movs	r3, #32
 8006d0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d12:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d16:	2330      	movs	r3, #48	; 0x30
 8006d18:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006ecc <_vfiprintf_r+0x220>
 8006d1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d20:	f04f 0901 	mov.w	r9, #1
 8006d24:	4623      	mov	r3, r4
 8006d26:	469a      	mov	sl, r3
 8006d28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d2c:	b10a      	cbz	r2, 8006d32 <_vfiprintf_r+0x86>
 8006d2e:	2a25      	cmp	r2, #37	; 0x25
 8006d30:	d1f9      	bne.n	8006d26 <_vfiprintf_r+0x7a>
 8006d32:	ebba 0b04 	subs.w	fp, sl, r4
 8006d36:	d00b      	beq.n	8006d50 <_vfiprintf_r+0xa4>
 8006d38:	465b      	mov	r3, fp
 8006d3a:	4622      	mov	r2, r4
 8006d3c:	4629      	mov	r1, r5
 8006d3e:	4630      	mov	r0, r6
 8006d40:	f7ff ffa2 	bl	8006c88 <__sfputs_r>
 8006d44:	3001      	adds	r0, #1
 8006d46:	f000 80a9 	beq.w	8006e9c <_vfiprintf_r+0x1f0>
 8006d4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d4c:	445a      	add	r2, fp
 8006d4e:	9209      	str	r2, [sp, #36]	; 0x24
 8006d50:	f89a 3000 	ldrb.w	r3, [sl]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 80a1 	beq.w	8006e9c <_vfiprintf_r+0x1f0>
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d64:	f10a 0a01 	add.w	sl, sl, #1
 8006d68:	9304      	str	r3, [sp, #16]
 8006d6a:	9307      	str	r3, [sp, #28]
 8006d6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d70:	931a      	str	r3, [sp, #104]	; 0x68
 8006d72:	4654      	mov	r4, sl
 8006d74:	2205      	movs	r2, #5
 8006d76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d7a:	4854      	ldr	r0, [pc, #336]	; (8006ecc <_vfiprintf_r+0x220>)
 8006d7c:	f7f9 fa48 	bl	8000210 <memchr>
 8006d80:	9a04      	ldr	r2, [sp, #16]
 8006d82:	b9d8      	cbnz	r0, 8006dbc <_vfiprintf_r+0x110>
 8006d84:	06d1      	lsls	r1, r2, #27
 8006d86:	bf44      	itt	mi
 8006d88:	2320      	movmi	r3, #32
 8006d8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d8e:	0713      	lsls	r3, r2, #28
 8006d90:	bf44      	itt	mi
 8006d92:	232b      	movmi	r3, #43	; 0x2b
 8006d94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d98:	f89a 3000 	ldrb.w	r3, [sl]
 8006d9c:	2b2a      	cmp	r3, #42	; 0x2a
 8006d9e:	d015      	beq.n	8006dcc <_vfiprintf_r+0x120>
 8006da0:	9a07      	ldr	r2, [sp, #28]
 8006da2:	4654      	mov	r4, sl
 8006da4:	2000      	movs	r0, #0
 8006da6:	f04f 0c0a 	mov.w	ip, #10
 8006daa:	4621      	mov	r1, r4
 8006dac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006db0:	3b30      	subs	r3, #48	; 0x30
 8006db2:	2b09      	cmp	r3, #9
 8006db4:	d94d      	bls.n	8006e52 <_vfiprintf_r+0x1a6>
 8006db6:	b1b0      	cbz	r0, 8006de6 <_vfiprintf_r+0x13a>
 8006db8:	9207      	str	r2, [sp, #28]
 8006dba:	e014      	b.n	8006de6 <_vfiprintf_r+0x13a>
 8006dbc:	eba0 0308 	sub.w	r3, r0, r8
 8006dc0:	fa09 f303 	lsl.w	r3, r9, r3
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	9304      	str	r3, [sp, #16]
 8006dc8:	46a2      	mov	sl, r4
 8006dca:	e7d2      	b.n	8006d72 <_vfiprintf_r+0xc6>
 8006dcc:	9b03      	ldr	r3, [sp, #12]
 8006dce:	1d19      	adds	r1, r3, #4
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	9103      	str	r1, [sp, #12]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	bfbb      	ittet	lt
 8006dd8:	425b      	neglt	r3, r3
 8006dda:	f042 0202 	orrlt.w	r2, r2, #2
 8006dde:	9307      	strge	r3, [sp, #28]
 8006de0:	9307      	strlt	r3, [sp, #28]
 8006de2:	bfb8      	it	lt
 8006de4:	9204      	strlt	r2, [sp, #16]
 8006de6:	7823      	ldrb	r3, [r4, #0]
 8006de8:	2b2e      	cmp	r3, #46	; 0x2e
 8006dea:	d10c      	bne.n	8006e06 <_vfiprintf_r+0x15a>
 8006dec:	7863      	ldrb	r3, [r4, #1]
 8006dee:	2b2a      	cmp	r3, #42	; 0x2a
 8006df0:	d134      	bne.n	8006e5c <_vfiprintf_r+0x1b0>
 8006df2:	9b03      	ldr	r3, [sp, #12]
 8006df4:	1d1a      	adds	r2, r3, #4
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	9203      	str	r2, [sp, #12]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	bfb8      	it	lt
 8006dfe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006e02:	3402      	adds	r4, #2
 8006e04:	9305      	str	r3, [sp, #20]
 8006e06:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006edc <_vfiprintf_r+0x230>
 8006e0a:	7821      	ldrb	r1, [r4, #0]
 8006e0c:	2203      	movs	r2, #3
 8006e0e:	4650      	mov	r0, sl
 8006e10:	f7f9 f9fe 	bl	8000210 <memchr>
 8006e14:	b138      	cbz	r0, 8006e26 <_vfiprintf_r+0x17a>
 8006e16:	9b04      	ldr	r3, [sp, #16]
 8006e18:	eba0 000a 	sub.w	r0, r0, sl
 8006e1c:	2240      	movs	r2, #64	; 0x40
 8006e1e:	4082      	lsls	r2, r0
 8006e20:	4313      	orrs	r3, r2
 8006e22:	3401      	adds	r4, #1
 8006e24:	9304      	str	r3, [sp, #16]
 8006e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e2a:	4829      	ldr	r0, [pc, #164]	; (8006ed0 <_vfiprintf_r+0x224>)
 8006e2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e30:	2206      	movs	r2, #6
 8006e32:	f7f9 f9ed 	bl	8000210 <memchr>
 8006e36:	2800      	cmp	r0, #0
 8006e38:	d03f      	beq.n	8006eba <_vfiprintf_r+0x20e>
 8006e3a:	4b26      	ldr	r3, [pc, #152]	; (8006ed4 <_vfiprintf_r+0x228>)
 8006e3c:	bb1b      	cbnz	r3, 8006e86 <_vfiprintf_r+0x1da>
 8006e3e:	9b03      	ldr	r3, [sp, #12]
 8006e40:	3307      	adds	r3, #7
 8006e42:	f023 0307 	bic.w	r3, r3, #7
 8006e46:	3308      	adds	r3, #8
 8006e48:	9303      	str	r3, [sp, #12]
 8006e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e4c:	443b      	add	r3, r7
 8006e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e50:	e768      	b.n	8006d24 <_vfiprintf_r+0x78>
 8006e52:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e56:	460c      	mov	r4, r1
 8006e58:	2001      	movs	r0, #1
 8006e5a:	e7a6      	b.n	8006daa <_vfiprintf_r+0xfe>
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	3401      	adds	r4, #1
 8006e60:	9305      	str	r3, [sp, #20]
 8006e62:	4619      	mov	r1, r3
 8006e64:	f04f 0c0a 	mov.w	ip, #10
 8006e68:	4620      	mov	r0, r4
 8006e6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e6e:	3a30      	subs	r2, #48	; 0x30
 8006e70:	2a09      	cmp	r2, #9
 8006e72:	d903      	bls.n	8006e7c <_vfiprintf_r+0x1d0>
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d0c6      	beq.n	8006e06 <_vfiprintf_r+0x15a>
 8006e78:	9105      	str	r1, [sp, #20]
 8006e7a:	e7c4      	b.n	8006e06 <_vfiprintf_r+0x15a>
 8006e7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e80:	4604      	mov	r4, r0
 8006e82:	2301      	movs	r3, #1
 8006e84:	e7f0      	b.n	8006e68 <_vfiprintf_r+0x1bc>
 8006e86:	ab03      	add	r3, sp, #12
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	462a      	mov	r2, r5
 8006e8c:	4b12      	ldr	r3, [pc, #72]	; (8006ed8 <_vfiprintf_r+0x22c>)
 8006e8e:	a904      	add	r1, sp, #16
 8006e90:	4630      	mov	r0, r6
 8006e92:	f3af 8000 	nop.w
 8006e96:	4607      	mov	r7, r0
 8006e98:	1c78      	adds	r0, r7, #1
 8006e9a:	d1d6      	bne.n	8006e4a <_vfiprintf_r+0x19e>
 8006e9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e9e:	07d9      	lsls	r1, r3, #31
 8006ea0:	d405      	bmi.n	8006eae <_vfiprintf_r+0x202>
 8006ea2:	89ab      	ldrh	r3, [r5, #12]
 8006ea4:	059a      	lsls	r2, r3, #22
 8006ea6:	d402      	bmi.n	8006eae <_vfiprintf_r+0x202>
 8006ea8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006eaa:	f7ff fed5 	bl	8006c58 <__retarget_lock_release_recursive>
 8006eae:	89ab      	ldrh	r3, [r5, #12]
 8006eb0:	065b      	lsls	r3, r3, #25
 8006eb2:	f53f af1d 	bmi.w	8006cf0 <_vfiprintf_r+0x44>
 8006eb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006eb8:	e71c      	b.n	8006cf4 <_vfiprintf_r+0x48>
 8006eba:	ab03      	add	r3, sp, #12
 8006ebc:	9300      	str	r3, [sp, #0]
 8006ebe:	462a      	mov	r2, r5
 8006ec0:	4b05      	ldr	r3, [pc, #20]	; (8006ed8 <_vfiprintf_r+0x22c>)
 8006ec2:	a904      	add	r1, sp, #16
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	f000 f919 	bl	80070fc <_printf_i>
 8006eca:	e7e4      	b.n	8006e96 <_vfiprintf_r+0x1ea>
 8006ecc:	080078e8 	.word	0x080078e8
 8006ed0:	080078f2 	.word	0x080078f2
 8006ed4:	00000000 	.word	0x00000000
 8006ed8:	08006c89 	.word	0x08006c89
 8006edc:	080078ee 	.word	0x080078ee

08006ee0 <sbrk_aligned>:
 8006ee0:	b570      	push	{r4, r5, r6, lr}
 8006ee2:	4e0e      	ldr	r6, [pc, #56]	; (8006f1c <sbrk_aligned+0x3c>)
 8006ee4:	460c      	mov	r4, r1
 8006ee6:	6831      	ldr	r1, [r6, #0]
 8006ee8:	4605      	mov	r5, r0
 8006eea:	b911      	cbnz	r1, 8006ef2 <sbrk_aligned+0x12>
 8006eec:	f000 fc72 	bl	80077d4 <_sbrk_r>
 8006ef0:	6030      	str	r0, [r6, #0]
 8006ef2:	4621      	mov	r1, r4
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	f000 fc6d 	bl	80077d4 <_sbrk_r>
 8006efa:	1c43      	adds	r3, r0, #1
 8006efc:	d00a      	beq.n	8006f14 <sbrk_aligned+0x34>
 8006efe:	1cc4      	adds	r4, r0, #3
 8006f00:	f024 0403 	bic.w	r4, r4, #3
 8006f04:	42a0      	cmp	r0, r4
 8006f06:	d007      	beq.n	8006f18 <sbrk_aligned+0x38>
 8006f08:	1a21      	subs	r1, r4, r0
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	f000 fc62 	bl	80077d4 <_sbrk_r>
 8006f10:	3001      	adds	r0, #1
 8006f12:	d101      	bne.n	8006f18 <sbrk_aligned+0x38>
 8006f14:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006f18:	4620      	mov	r0, r4
 8006f1a:	bd70      	pop	{r4, r5, r6, pc}
 8006f1c:	200005c4 	.word	0x200005c4

08006f20 <_malloc_r>:
 8006f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f24:	1ccd      	adds	r5, r1, #3
 8006f26:	f025 0503 	bic.w	r5, r5, #3
 8006f2a:	3508      	adds	r5, #8
 8006f2c:	2d0c      	cmp	r5, #12
 8006f2e:	bf38      	it	cc
 8006f30:	250c      	movcc	r5, #12
 8006f32:	2d00      	cmp	r5, #0
 8006f34:	4607      	mov	r7, r0
 8006f36:	db01      	blt.n	8006f3c <_malloc_r+0x1c>
 8006f38:	42a9      	cmp	r1, r5
 8006f3a:	d905      	bls.n	8006f48 <_malloc_r+0x28>
 8006f3c:	230c      	movs	r3, #12
 8006f3e:	603b      	str	r3, [r7, #0]
 8006f40:	2600      	movs	r6, #0
 8006f42:	4630      	mov	r0, r6
 8006f44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f48:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800701c <_malloc_r+0xfc>
 8006f4c:	f000 faa6 	bl	800749c <__malloc_lock>
 8006f50:	f8d8 3000 	ldr.w	r3, [r8]
 8006f54:	461c      	mov	r4, r3
 8006f56:	bb5c      	cbnz	r4, 8006fb0 <_malloc_r+0x90>
 8006f58:	4629      	mov	r1, r5
 8006f5a:	4638      	mov	r0, r7
 8006f5c:	f7ff ffc0 	bl	8006ee0 <sbrk_aligned>
 8006f60:	1c43      	adds	r3, r0, #1
 8006f62:	4604      	mov	r4, r0
 8006f64:	d155      	bne.n	8007012 <_malloc_r+0xf2>
 8006f66:	f8d8 4000 	ldr.w	r4, [r8]
 8006f6a:	4626      	mov	r6, r4
 8006f6c:	2e00      	cmp	r6, #0
 8006f6e:	d145      	bne.n	8006ffc <_malloc_r+0xdc>
 8006f70:	2c00      	cmp	r4, #0
 8006f72:	d048      	beq.n	8007006 <_malloc_r+0xe6>
 8006f74:	6823      	ldr	r3, [r4, #0]
 8006f76:	4631      	mov	r1, r6
 8006f78:	4638      	mov	r0, r7
 8006f7a:	eb04 0903 	add.w	r9, r4, r3
 8006f7e:	f000 fc29 	bl	80077d4 <_sbrk_r>
 8006f82:	4581      	cmp	r9, r0
 8006f84:	d13f      	bne.n	8007006 <_malloc_r+0xe6>
 8006f86:	6821      	ldr	r1, [r4, #0]
 8006f88:	1a6d      	subs	r5, r5, r1
 8006f8a:	4629      	mov	r1, r5
 8006f8c:	4638      	mov	r0, r7
 8006f8e:	f7ff ffa7 	bl	8006ee0 <sbrk_aligned>
 8006f92:	3001      	adds	r0, #1
 8006f94:	d037      	beq.n	8007006 <_malloc_r+0xe6>
 8006f96:	6823      	ldr	r3, [r4, #0]
 8006f98:	442b      	add	r3, r5
 8006f9a:	6023      	str	r3, [r4, #0]
 8006f9c:	f8d8 3000 	ldr.w	r3, [r8]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d038      	beq.n	8007016 <_malloc_r+0xf6>
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	42a2      	cmp	r2, r4
 8006fa8:	d12b      	bne.n	8007002 <_malloc_r+0xe2>
 8006faa:	2200      	movs	r2, #0
 8006fac:	605a      	str	r2, [r3, #4]
 8006fae:	e00f      	b.n	8006fd0 <_malloc_r+0xb0>
 8006fb0:	6822      	ldr	r2, [r4, #0]
 8006fb2:	1b52      	subs	r2, r2, r5
 8006fb4:	d41f      	bmi.n	8006ff6 <_malloc_r+0xd6>
 8006fb6:	2a0b      	cmp	r2, #11
 8006fb8:	d917      	bls.n	8006fea <_malloc_r+0xca>
 8006fba:	1961      	adds	r1, r4, r5
 8006fbc:	42a3      	cmp	r3, r4
 8006fbe:	6025      	str	r5, [r4, #0]
 8006fc0:	bf18      	it	ne
 8006fc2:	6059      	strne	r1, [r3, #4]
 8006fc4:	6863      	ldr	r3, [r4, #4]
 8006fc6:	bf08      	it	eq
 8006fc8:	f8c8 1000 	streq.w	r1, [r8]
 8006fcc:	5162      	str	r2, [r4, r5]
 8006fce:	604b      	str	r3, [r1, #4]
 8006fd0:	4638      	mov	r0, r7
 8006fd2:	f104 060b 	add.w	r6, r4, #11
 8006fd6:	f000 fa67 	bl	80074a8 <__malloc_unlock>
 8006fda:	f026 0607 	bic.w	r6, r6, #7
 8006fde:	1d23      	adds	r3, r4, #4
 8006fe0:	1af2      	subs	r2, r6, r3
 8006fe2:	d0ae      	beq.n	8006f42 <_malloc_r+0x22>
 8006fe4:	1b9b      	subs	r3, r3, r6
 8006fe6:	50a3      	str	r3, [r4, r2]
 8006fe8:	e7ab      	b.n	8006f42 <_malloc_r+0x22>
 8006fea:	42a3      	cmp	r3, r4
 8006fec:	6862      	ldr	r2, [r4, #4]
 8006fee:	d1dd      	bne.n	8006fac <_malloc_r+0x8c>
 8006ff0:	f8c8 2000 	str.w	r2, [r8]
 8006ff4:	e7ec      	b.n	8006fd0 <_malloc_r+0xb0>
 8006ff6:	4623      	mov	r3, r4
 8006ff8:	6864      	ldr	r4, [r4, #4]
 8006ffa:	e7ac      	b.n	8006f56 <_malloc_r+0x36>
 8006ffc:	4634      	mov	r4, r6
 8006ffe:	6876      	ldr	r6, [r6, #4]
 8007000:	e7b4      	b.n	8006f6c <_malloc_r+0x4c>
 8007002:	4613      	mov	r3, r2
 8007004:	e7cc      	b.n	8006fa0 <_malloc_r+0x80>
 8007006:	230c      	movs	r3, #12
 8007008:	603b      	str	r3, [r7, #0]
 800700a:	4638      	mov	r0, r7
 800700c:	f000 fa4c 	bl	80074a8 <__malloc_unlock>
 8007010:	e797      	b.n	8006f42 <_malloc_r+0x22>
 8007012:	6025      	str	r5, [r4, #0]
 8007014:	e7dc      	b.n	8006fd0 <_malloc_r+0xb0>
 8007016:	605b      	str	r3, [r3, #4]
 8007018:	deff      	udf	#255	; 0xff
 800701a:	bf00      	nop
 800701c:	200005c0 	.word	0x200005c0

08007020 <_printf_common>:
 8007020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007024:	4616      	mov	r6, r2
 8007026:	4699      	mov	r9, r3
 8007028:	688a      	ldr	r2, [r1, #8]
 800702a:	690b      	ldr	r3, [r1, #16]
 800702c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007030:	4293      	cmp	r3, r2
 8007032:	bfb8      	it	lt
 8007034:	4613      	movlt	r3, r2
 8007036:	6033      	str	r3, [r6, #0]
 8007038:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800703c:	4607      	mov	r7, r0
 800703e:	460c      	mov	r4, r1
 8007040:	b10a      	cbz	r2, 8007046 <_printf_common+0x26>
 8007042:	3301      	adds	r3, #1
 8007044:	6033      	str	r3, [r6, #0]
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	0699      	lsls	r1, r3, #26
 800704a:	bf42      	ittt	mi
 800704c:	6833      	ldrmi	r3, [r6, #0]
 800704e:	3302      	addmi	r3, #2
 8007050:	6033      	strmi	r3, [r6, #0]
 8007052:	6825      	ldr	r5, [r4, #0]
 8007054:	f015 0506 	ands.w	r5, r5, #6
 8007058:	d106      	bne.n	8007068 <_printf_common+0x48>
 800705a:	f104 0a19 	add.w	sl, r4, #25
 800705e:	68e3      	ldr	r3, [r4, #12]
 8007060:	6832      	ldr	r2, [r6, #0]
 8007062:	1a9b      	subs	r3, r3, r2
 8007064:	42ab      	cmp	r3, r5
 8007066:	dc26      	bgt.n	80070b6 <_printf_common+0x96>
 8007068:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800706c:	1e13      	subs	r3, r2, #0
 800706e:	6822      	ldr	r2, [r4, #0]
 8007070:	bf18      	it	ne
 8007072:	2301      	movne	r3, #1
 8007074:	0692      	lsls	r2, r2, #26
 8007076:	d42b      	bmi.n	80070d0 <_printf_common+0xb0>
 8007078:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800707c:	4649      	mov	r1, r9
 800707e:	4638      	mov	r0, r7
 8007080:	47c0      	blx	r8
 8007082:	3001      	adds	r0, #1
 8007084:	d01e      	beq.n	80070c4 <_printf_common+0xa4>
 8007086:	6823      	ldr	r3, [r4, #0]
 8007088:	6922      	ldr	r2, [r4, #16]
 800708a:	f003 0306 	and.w	r3, r3, #6
 800708e:	2b04      	cmp	r3, #4
 8007090:	bf02      	ittt	eq
 8007092:	68e5      	ldreq	r5, [r4, #12]
 8007094:	6833      	ldreq	r3, [r6, #0]
 8007096:	1aed      	subeq	r5, r5, r3
 8007098:	68a3      	ldr	r3, [r4, #8]
 800709a:	bf0c      	ite	eq
 800709c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070a0:	2500      	movne	r5, #0
 80070a2:	4293      	cmp	r3, r2
 80070a4:	bfc4      	itt	gt
 80070a6:	1a9b      	subgt	r3, r3, r2
 80070a8:	18ed      	addgt	r5, r5, r3
 80070aa:	2600      	movs	r6, #0
 80070ac:	341a      	adds	r4, #26
 80070ae:	42b5      	cmp	r5, r6
 80070b0:	d11a      	bne.n	80070e8 <_printf_common+0xc8>
 80070b2:	2000      	movs	r0, #0
 80070b4:	e008      	b.n	80070c8 <_printf_common+0xa8>
 80070b6:	2301      	movs	r3, #1
 80070b8:	4652      	mov	r2, sl
 80070ba:	4649      	mov	r1, r9
 80070bc:	4638      	mov	r0, r7
 80070be:	47c0      	blx	r8
 80070c0:	3001      	adds	r0, #1
 80070c2:	d103      	bne.n	80070cc <_printf_common+0xac>
 80070c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070cc:	3501      	adds	r5, #1
 80070ce:	e7c6      	b.n	800705e <_printf_common+0x3e>
 80070d0:	18e1      	adds	r1, r4, r3
 80070d2:	1c5a      	adds	r2, r3, #1
 80070d4:	2030      	movs	r0, #48	; 0x30
 80070d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070da:	4422      	add	r2, r4
 80070dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070e4:	3302      	adds	r3, #2
 80070e6:	e7c7      	b.n	8007078 <_printf_common+0x58>
 80070e8:	2301      	movs	r3, #1
 80070ea:	4622      	mov	r2, r4
 80070ec:	4649      	mov	r1, r9
 80070ee:	4638      	mov	r0, r7
 80070f0:	47c0      	blx	r8
 80070f2:	3001      	adds	r0, #1
 80070f4:	d0e6      	beq.n	80070c4 <_printf_common+0xa4>
 80070f6:	3601      	adds	r6, #1
 80070f8:	e7d9      	b.n	80070ae <_printf_common+0x8e>
	...

080070fc <_printf_i>:
 80070fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007100:	7e0f      	ldrb	r7, [r1, #24]
 8007102:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007104:	2f78      	cmp	r7, #120	; 0x78
 8007106:	4691      	mov	r9, r2
 8007108:	4680      	mov	r8, r0
 800710a:	460c      	mov	r4, r1
 800710c:	469a      	mov	sl, r3
 800710e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007112:	d807      	bhi.n	8007124 <_printf_i+0x28>
 8007114:	2f62      	cmp	r7, #98	; 0x62
 8007116:	d80a      	bhi.n	800712e <_printf_i+0x32>
 8007118:	2f00      	cmp	r7, #0
 800711a:	f000 80d4 	beq.w	80072c6 <_printf_i+0x1ca>
 800711e:	2f58      	cmp	r7, #88	; 0x58
 8007120:	f000 80c0 	beq.w	80072a4 <_printf_i+0x1a8>
 8007124:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007128:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800712c:	e03a      	b.n	80071a4 <_printf_i+0xa8>
 800712e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007132:	2b15      	cmp	r3, #21
 8007134:	d8f6      	bhi.n	8007124 <_printf_i+0x28>
 8007136:	a101      	add	r1, pc, #4	; (adr r1, 800713c <_printf_i+0x40>)
 8007138:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800713c:	08007195 	.word	0x08007195
 8007140:	080071a9 	.word	0x080071a9
 8007144:	08007125 	.word	0x08007125
 8007148:	08007125 	.word	0x08007125
 800714c:	08007125 	.word	0x08007125
 8007150:	08007125 	.word	0x08007125
 8007154:	080071a9 	.word	0x080071a9
 8007158:	08007125 	.word	0x08007125
 800715c:	08007125 	.word	0x08007125
 8007160:	08007125 	.word	0x08007125
 8007164:	08007125 	.word	0x08007125
 8007168:	080072ad 	.word	0x080072ad
 800716c:	080071d5 	.word	0x080071d5
 8007170:	08007267 	.word	0x08007267
 8007174:	08007125 	.word	0x08007125
 8007178:	08007125 	.word	0x08007125
 800717c:	080072cf 	.word	0x080072cf
 8007180:	08007125 	.word	0x08007125
 8007184:	080071d5 	.word	0x080071d5
 8007188:	08007125 	.word	0x08007125
 800718c:	08007125 	.word	0x08007125
 8007190:	0800726f 	.word	0x0800726f
 8007194:	682b      	ldr	r3, [r5, #0]
 8007196:	1d1a      	adds	r2, r3, #4
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	602a      	str	r2, [r5, #0]
 800719c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071a4:	2301      	movs	r3, #1
 80071a6:	e09f      	b.n	80072e8 <_printf_i+0x1ec>
 80071a8:	6820      	ldr	r0, [r4, #0]
 80071aa:	682b      	ldr	r3, [r5, #0]
 80071ac:	0607      	lsls	r7, r0, #24
 80071ae:	f103 0104 	add.w	r1, r3, #4
 80071b2:	6029      	str	r1, [r5, #0]
 80071b4:	d501      	bpl.n	80071ba <_printf_i+0xbe>
 80071b6:	681e      	ldr	r6, [r3, #0]
 80071b8:	e003      	b.n	80071c2 <_printf_i+0xc6>
 80071ba:	0646      	lsls	r6, r0, #25
 80071bc:	d5fb      	bpl.n	80071b6 <_printf_i+0xba>
 80071be:	f9b3 6000 	ldrsh.w	r6, [r3]
 80071c2:	2e00      	cmp	r6, #0
 80071c4:	da03      	bge.n	80071ce <_printf_i+0xd2>
 80071c6:	232d      	movs	r3, #45	; 0x2d
 80071c8:	4276      	negs	r6, r6
 80071ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071ce:	485a      	ldr	r0, [pc, #360]	; (8007338 <_printf_i+0x23c>)
 80071d0:	230a      	movs	r3, #10
 80071d2:	e012      	b.n	80071fa <_printf_i+0xfe>
 80071d4:	682b      	ldr	r3, [r5, #0]
 80071d6:	6820      	ldr	r0, [r4, #0]
 80071d8:	1d19      	adds	r1, r3, #4
 80071da:	6029      	str	r1, [r5, #0]
 80071dc:	0605      	lsls	r5, r0, #24
 80071de:	d501      	bpl.n	80071e4 <_printf_i+0xe8>
 80071e0:	681e      	ldr	r6, [r3, #0]
 80071e2:	e002      	b.n	80071ea <_printf_i+0xee>
 80071e4:	0641      	lsls	r1, r0, #25
 80071e6:	d5fb      	bpl.n	80071e0 <_printf_i+0xe4>
 80071e8:	881e      	ldrh	r6, [r3, #0]
 80071ea:	4853      	ldr	r0, [pc, #332]	; (8007338 <_printf_i+0x23c>)
 80071ec:	2f6f      	cmp	r7, #111	; 0x6f
 80071ee:	bf0c      	ite	eq
 80071f0:	2308      	moveq	r3, #8
 80071f2:	230a      	movne	r3, #10
 80071f4:	2100      	movs	r1, #0
 80071f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071fa:	6865      	ldr	r5, [r4, #4]
 80071fc:	60a5      	str	r5, [r4, #8]
 80071fe:	2d00      	cmp	r5, #0
 8007200:	bfa2      	ittt	ge
 8007202:	6821      	ldrge	r1, [r4, #0]
 8007204:	f021 0104 	bicge.w	r1, r1, #4
 8007208:	6021      	strge	r1, [r4, #0]
 800720a:	b90e      	cbnz	r6, 8007210 <_printf_i+0x114>
 800720c:	2d00      	cmp	r5, #0
 800720e:	d04b      	beq.n	80072a8 <_printf_i+0x1ac>
 8007210:	4615      	mov	r5, r2
 8007212:	fbb6 f1f3 	udiv	r1, r6, r3
 8007216:	fb03 6711 	mls	r7, r3, r1, r6
 800721a:	5dc7      	ldrb	r7, [r0, r7]
 800721c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007220:	4637      	mov	r7, r6
 8007222:	42bb      	cmp	r3, r7
 8007224:	460e      	mov	r6, r1
 8007226:	d9f4      	bls.n	8007212 <_printf_i+0x116>
 8007228:	2b08      	cmp	r3, #8
 800722a:	d10b      	bne.n	8007244 <_printf_i+0x148>
 800722c:	6823      	ldr	r3, [r4, #0]
 800722e:	07de      	lsls	r6, r3, #31
 8007230:	d508      	bpl.n	8007244 <_printf_i+0x148>
 8007232:	6923      	ldr	r3, [r4, #16]
 8007234:	6861      	ldr	r1, [r4, #4]
 8007236:	4299      	cmp	r1, r3
 8007238:	bfde      	ittt	le
 800723a:	2330      	movle	r3, #48	; 0x30
 800723c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007240:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007244:	1b52      	subs	r2, r2, r5
 8007246:	6122      	str	r2, [r4, #16]
 8007248:	f8cd a000 	str.w	sl, [sp]
 800724c:	464b      	mov	r3, r9
 800724e:	aa03      	add	r2, sp, #12
 8007250:	4621      	mov	r1, r4
 8007252:	4640      	mov	r0, r8
 8007254:	f7ff fee4 	bl	8007020 <_printf_common>
 8007258:	3001      	adds	r0, #1
 800725a:	d14a      	bne.n	80072f2 <_printf_i+0x1f6>
 800725c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007260:	b004      	add	sp, #16
 8007262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007266:	6823      	ldr	r3, [r4, #0]
 8007268:	f043 0320 	orr.w	r3, r3, #32
 800726c:	6023      	str	r3, [r4, #0]
 800726e:	4833      	ldr	r0, [pc, #204]	; (800733c <_printf_i+0x240>)
 8007270:	2778      	movs	r7, #120	; 0x78
 8007272:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007276:	6823      	ldr	r3, [r4, #0]
 8007278:	6829      	ldr	r1, [r5, #0]
 800727a:	061f      	lsls	r7, r3, #24
 800727c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007280:	d402      	bmi.n	8007288 <_printf_i+0x18c>
 8007282:	065f      	lsls	r7, r3, #25
 8007284:	bf48      	it	mi
 8007286:	b2b6      	uxthmi	r6, r6
 8007288:	07df      	lsls	r7, r3, #31
 800728a:	bf48      	it	mi
 800728c:	f043 0320 	orrmi.w	r3, r3, #32
 8007290:	6029      	str	r1, [r5, #0]
 8007292:	bf48      	it	mi
 8007294:	6023      	strmi	r3, [r4, #0]
 8007296:	b91e      	cbnz	r6, 80072a0 <_printf_i+0x1a4>
 8007298:	6823      	ldr	r3, [r4, #0]
 800729a:	f023 0320 	bic.w	r3, r3, #32
 800729e:	6023      	str	r3, [r4, #0]
 80072a0:	2310      	movs	r3, #16
 80072a2:	e7a7      	b.n	80071f4 <_printf_i+0xf8>
 80072a4:	4824      	ldr	r0, [pc, #144]	; (8007338 <_printf_i+0x23c>)
 80072a6:	e7e4      	b.n	8007272 <_printf_i+0x176>
 80072a8:	4615      	mov	r5, r2
 80072aa:	e7bd      	b.n	8007228 <_printf_i+0x12c>
 80072ac:	682b      	ldr	r3, [r5, #0]
 80072ae:	6826      	ldr	r6, [r4, #0]
 80072b0:	6961      	ldr	r1, [r4, #20]
 80072b2:	1d18      	adds	r0, r3, #4
 80072b4:	6028      	str	r0, [r5, #0]
 80072b6:	0635      	lsls	r5, r6, #24
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	d501      	bpl.n	80072c0 <_printf_i+0x1c4>
 80072bc:	6019      	str	r1, [r3, #0]
 80072be:	e002      	b.n	80072c6 <_printf_i+0x1ca>
 80072c0:	0670      	lsls	r0, r6, #25
 80072c2:	d5fb      	bpl.n	80072bc <_printf_i+0x1c0>
 80072c4:	8019      	strh	r1, [r3, #0]
 80072c6:	2300      	movs	r3, #0
 80072c8:	6123      	str	r3, [r4, #16]
 80072ca:	4615      	mov	r5, r2
 80072cc:	e7bc      	b.n	8007248 <_printf_i+0x14c>
 80072ce:	682b      	ldr	r3, [r5, #0]
 80072d0:	1d1a      	adds	r2, r3, #4
 80072d2:	602a      	str	r2, [r5, #0]
 80072d4:	681d      	ldr	r5, [r3, #0]
 80072d6:	6862      	ldr	r2, [r4, #4]
 80072d8:	2100      	movs	r1, #0
 80072da:	4628      	mov	r0, r5
 80072dc:	f7f8 ff98 	bl	8000210 <memchr>
 80072e0:	b108      	cbz	r0, 80072e6 <_printf_i+0x1ea>
 80072e2:	1b40      	subs	r0, r0, r5
 80072e4:	6060      	str	r0, [r4, #4]
 80072e6:	6863      	ldr	r3, [r4, #4]
 80072e8:	6123      	str	r3, [r4, #16]
 80072ea:	2300      	movs	r3, #0
 80072ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072f0:	e7aa      	b.n	8007248 <_printf_i+0x14c>
 80072f2:	6923      	ldr	r3, [r4, #16]
 80072f4:	462a      	mov	r2, r5
 80072f6:	4649      	mov	r1, r9
 80072f8:	4640      	mov	r0, r8
 80072fa:	47d0      	blx	sl
 80072fc:	3001      	adds	r0, #1
 80072fe:	d0ad      	beq.n	800725c <_printf_i+0x160>
 8007300:	6823      	ldr	r3, [r4, #0]
 8007302:	079b      	lsls	r3, r3, #30
 8007304:	d413      	bmi.n	800732e <_printf_i+0x232>
 8007306:	68e0      	ldr	r0, [r4, #12]
 8007308:	9b03      	ldr	r3, [sp, #12]
 800730a:	4298      	cmp	r0, r3
 800730c:	bfb8      	it	lt
 800730e:	4618      	movlt	r0, r3
 8007310:	e7a6      	b.n	8007260 <_printf_i+0x164>
 8007312:	2301      	movs	r3, #1
 8007314:	4632      	mov	r2, r6
 8007316:	4649      	mov	r1, r9
 8007318:	4640      	mov	r0, r8
 800731a:	47d0      	blx	sl
 800731c:	3001      	adds	r0, #1
 800731e:	d09d      	beq.n	800725c <_printf_i+0x160>
 8007320:	3501      	adds	r5, #1
 8007322:	68e3      	ldr	r3, [r4, #12]
 8007324:	9903      	ldr	r1, [sp, #12]
 8007326:	1a5b      	subs	r3, r3, r1
 8007328:	42ab      	cmp	r3, r5
 800732a:	dcf2      	bgt.n	8007312 <_printf_i+0x216>
 800732c:	e7eb      	b.n	8007306 <_printf_i+0x20a>
 800732e:	2500      	movs	r5, #0
 8007330:	f104 0619 	add.w	r6, r4, #25
 8007334:	e7f5      	b.n	8007322 <_printf_i+0x226>
 8007336:	bf00      	nop
 8007338:	080078f9 	.word	0x080078f9
 800733c:	0800790a 	.word	0x0800790a

08007340 <__sflush_r>:
 8007340:	898a      	ldrh	r2, [r1, #12]
 8007342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007346:	4605      	mov	r5, r0
 8007348:	0710      	lsls	r0, r2, #28
 800734a:	460c      	mov	r4, r1
 800734c:	d458      	bmi.n	8007400 <__sflush_r+0xc0>
 800734e:	684b      	ldr	r3, [r1, #4]
 8007350:	2b00      	cmp	r3, #0
 8007352:	dc05      	bgt.n	8007360 <__sflush_r+0x20>
 8007354:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007356:	2b00      	cmp	r3, #0
 8007358:	dc02      	bgt.n	8007360 <__sflush_r+0x20>
 800735a:	2000      	movs	r0, #0
 800735c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007360:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007362:	2e00      	cmp	r6, #0
 8007364:	d0f9      	beq.n	800735a <__sflush_r+0x1a>
 8007366:	2300      	movs	r3, #0
 8007368:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800736c:	682f      	ldr	r7, [r5, #0]
 800736e:	6a21      	ldr	r1, [r4, #32]
 8007370:	602b      	str	r3, [r5, #0]
 8007372:	d032      	beq.n	80073da <__sflush_r+0x9a>
 8007374:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007376:	89a3      	ldrh	r3, [r4, #12]
 8007378:	075a      	lsls	r2, r3, #29
 800737a:	d505      	bpl.n	8007388 <__sflush_r+0x48>
 800737c:	6863      	ldr	r3, [r4, #4]
 800737e:	1ac0      	subs	r0, r0, r3
 8007380:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007382:	b10b      	cbz	r3, 8007388 <__sflush_r+0x48>
 8007384:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007386:	1ac0      	subs	r0, r0, r3
 8007388:	2300      	movs	r3, #0
 800738a:	4602      	mov	r2, r0
 800738c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800738e:	6a21      	ldr	r1, [r4, #32]
 8007390:	4628      	mov	r0, r5
 8007392:	47b0      	blx	r6
 8007394:	1c43      	adds	r3, r0, #1
 8007396:	89a3      	ldrh	r3, [r4, #12]
 8007398:	d106      	bne.n	80073a8 <__sflush_r+0x68>
 800739a:	6829      	ldr	r1, [r5, #0]
 800739c:	291d      	cmp	r1, #29
 800739e:	d82b      	bhi.n	80073f8 <__sflush_r+0xb8>
 80073a0:	4a29      	ldr	r2, [pc, #164]	; (8007448 <__sflush_r+0x108>)
 80073a2:	410a      	asrs	r2, r1
 80073a4:	07d6      	lsls	r6, r2, #31
 80073a6:	d427      	bmi.n	80073f8 <__sflush_r+0xb8>
 80073a8:	2200      	movs	r2, #0
 80073aa:	6062      	str	r2, [r4, #4]
 80073ac:	04d9      	lsls	r1, r3, #19
 80073ae:	6922      	ldr	r2, [r4, #16]
 80073b0:	6022      	str	r2, [r4, #0]
 80073b2:	d504      	bpl.n	80073be <__sflush_r+0x7e>
 80073b4:	1c42      	adds	r2, r0, #1
 80073b6:	d101      	bne.n	80073bc <__sflush_r+0x7c>
 80073b8:	682b      	ldr	r3, [r5, #0]
 80073ba:	b903      	cbnz	r3, 80073be <__sflush_r+0x7e>
 80073bc:	6560      	str	r0, [r4, #84]	; 0x54
 80073be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073c0:	602f      	str	r7, [r5, #0]
 80073c2:	2900      	cmp	r1, #0
 80073c4:	d0c9      	beq.n	800735a <__sflush_r+0x1a>
 80073c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073ca:	4299      	cmp	r1, r3
 80073cc:	d002      	beq.n	80073d4 <__sflush_r+0x94>
 80073ce:	4628      	mov	r0, r5
 80073d0:	f000 fa22 	bl	8007818 <_free_r>
 80073d4:	2000      	movs	r0, #0
 80073d6:	6360      	str	r0, [r4, #52]	; 0x34
 80073d8:	e7c0      	b.n	800735c <__sflush_r+0x1c>
 80073da:	2301      	movs	r3, #1
 80073dc:	4628      	mov	r0, r5
 80073de:	47b0      	blx	r6
 80073e0:	1c41      	adds	r1, r0, #1
 80073e2:	d1c8      	bne.n	8007376 <__sflush_r+0x36>
 80073e4:	682b      	ldr	r3, [r5, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d0c5      	beq.n	8007376 <__sflush_r+0x36>
 80073ea:	2b1d      	cmp	r3, #29
 80073ec:	d001      	beq.n	80073f2 <__sflush_r+0xb2>
 80073ee:	2b16      	cmp	r3, #22
 80073f0:	d101      	bne.n	80073f6 <__sflush_r+0xb6>
 80073f2:	602f      	str	r7, [r5, #0]
 80073f4:	e7b1      	b.n	800735a <__sflush_r+0x1a>
 80073f6:	89a3      	ldrh	r3, [r4, #12]
 80073f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073fc:	81a3      	strh	r3, [r4, #12]
 80073fe:	e7ad      	b.n	800735c <__sflush_r+0x1c>
 8007400:	690f      	ldr	r7, [r1, #16]
 8007402:	2f00      	cmp	r7, #0
 8007404:	d0a9      	beq.n	800735a <__sflush_r+0x1a>
 8007406:	0793      	lsls	r3, r2, #30
 8007408:	680e      	ldr	r6, [r1, #0]
 800740a:	bf08      	it	eq
 800740c:	694b      	ldreq	r3, [r1, #20]
 800740e:	600f      	str	r7, [r1, #0]
 8007410:	bf18      	it	ne
 8007412:	2300      	movne	r3, #0
 8007414:	eba6 0807 	sub.w	r8, r6, r7
 8007418:	608b      	str	r3, [r1, #8]
 800741a:	f1b8 0f00 	cmp.w	r8, #0
 800741e:	dd9c      	ble.n	800735a <__sflush_r+0x1a>
 8007420:	6a21      	ldr	r1, [r4, #32]
 8007422:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007424:	4643      	mov	r3, r8
 8007426:	463a      	mov	r2, r7
 8007428:	4628      	mov	r0, r5
 800742a:	47b0      	blx	r6
 800742c:	2800      	cmp	r0, #0
 800742e:	dc06      	bgt.n	800743e <__sflush_r+0xfe>
 8007430:	89a3      	ldrh	r3, [r4, #12]
 8007432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007436:	81a3      	strh	r3, [r4, #12]
 8007438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800743c:	e78e      	b.n	800735c <__sflush_r+0x1c>
 800743e:	4407      	add	r7, r0
 8007440:	eba8 0800 	sub.w	r8, r8, r0
 8007444:	e7e9      	b.n	800741a <__sflush_r+0xda>
 8007446:	bf00      	nop
 8007448:	dfbffffe 	.word	0xdfbffffe

0800744c <_fflush_r>:
 800744c:	b538      	push	{r3, r4, r5, lr}
 800744e:	690b      	ldr	r3, [r1, #16]
 8007450:	4605      	mov	r5, r0
 8007452:	460c      	mov	r4, r1
 8007454:	b913      	cbnz	r3, 800745c <_fflush_r+0x10>
 8007456:	2500      	movs	r5, #0
 8007458:	4628      	mov	r0, r5
 800745a:	bd38      	pop	{r3, r4, r5, pc}
 800745c:	b118      	cbz	r0, 8007466 <_fflush_r+0x1a>
 800745e:	6a03      	ldr	r3, [r0, #32]
 8007460:	b90b      	cbnz	r3, 8007466 <_fflush_r+0x1a>
 8007462:	f7ff fb7d 	bl	8006b60 <__sinit>
 8007466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d0f3      	beq.n	8007456 <_fflush_r+0xa>
 800746e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007470:	07d0      	lsls	r0, r2, #31
 8007472:	d404      	bmi.n	800747e <_fflush_r+0x32>
 8007474:	0599      	lsls	r1, r3, #22
 8007476:	d402      	bmi.n	800747e <_fflush_r+0x32>
 8007478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800747a:	f7ff fbec 	bl	8006c56 <__retarget_lock_acquire_recursive>
 800747e:	4628      	mov	r0, r5
 8007480:	4621      	mov	r1, r4
 8007482:	f7ff ff5d 	bl	8007340 <__sflush_r>
 8007486:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007488:	07da      	lsls	r2, r3, #31
 800748a:	4605      	mov	r5, r0
 800748c:	d4e4      	bmi.n	8007458 <_fflush_r+0xc>
 800748e:	89a3      	ldrh	r3, [r4, #12]
 8007490:	059b      	lsls	r3, r3, #22
 8007492:	d4e1      	bmi.n	8007458 <_fflush_r+0xc>
 8007494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007496:	f7ff fbdf 	bl	8006c58 <__retarget_lock_release_recursive>
 800749a:	e7dd      	b.n	8007458 <_fflush_r+0xc>

0800749c <__malloc_lock>:
 800749c:	4801      	ldr	r0, [pc, #4]	; (80074a4 <__malloc_lock+0x8>)
 800749e:	f7ff bbda 	b.w	8006c56 <__retarget_lock_acquire_recursive>
 80074a2:	bf00      	nop
 80074a4:	200005bc 	.word	0x200005bc

080074a8 <__malloc_unlock>:
 80074a8:	4801      	ldr	r0, [pc, #4]	; (80074b0 <__malloc_unlock+0x8>)
 80074aa:	f7ff bbd5 	b.w	8006c58 <__retarget_lock_release_recursive>
 80074ae:	bf00      	nop
 80074b0:	200005bc 	.word	0x200005bc

080074b4 <__sread>:
 80074b4:	b510      	push	{r4, lr}
 80074b6:	460c      	mov	r4, r1
 80074b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074bc:	f000 f978 	bl	80077b0 <_read_r>
 80074c0:	2800      	cmp	r0, #0
 80074c2:	bfab      	itete	ge
 80074c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80074c6:	89a3      	ldrhlt	r3, [r4, #12]
 80074c8:	181b      	addge	r3, r3, r0
 80074ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80074ce:	bfac      	ite	ge
 80074d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80074d2:	81a3      	strhlt	r3, [r4, #12]
 80074d4:	bd10      	pop	{r4, pc}

080074d6 <__swrite>:
 80074d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074da:	461f      	mov	r7, r3
 80074dc:	898b      	ldrh	r3, [r1, #12]
 80074de:	05db      	lsls	r3, r3, #23
 80074e0:	4605      	mov	r5, r0
 80074e2:	460c      	mov	r4, r1
 80074e4:	4616      	mov	r6, r2
 80074e6:	d505      	bpl.n	80074f4 <__swrite+0x1e>
 80074e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ec:	2302      	movs	r3, #2
 80074ee:	2200      	movs	r2, #0
 80074f0:	f000 f94c 	bl	800778c <_lseek_r>
 80074f4:	89a3      	ldrh	r3, [r4, #12]
 80074f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074fe:	81a3      	strh	r3, [r4, #12]
 8007500:	4632      	mov	r2, r6
 8007502:	463b      	mov	r3, r7
 8007504:	4628      	mov	r0, r5
 8007506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800750a:	f000 b973 	b.w	80077f4 <_write_r>

0800750e <__sseek>:
 800750e:	b510      	push	{r4, lr}
 8007510:	460c      	mov	r4, r1
 8007512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007516:	f000 f939 	bl	800778c <_lseek_r>
 800751a:	1c43      	adds	r3, r0, #1
 800751c:	89a3      	ldrh	r3, [r4, #12]
 800751e:	bf15      	itete	ne
 8007520:	6560      	strne	r0, [r4, #84]	; 0x54
 8007522:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007526:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800752a:	81a3      	strheq	r3, [r4, #12]
 800752c:	bf18      	it	ne
 800752e:	81a3      	strhne	r3, [r4, #12]
 8007530:	bd10      	pop	{r4, pc}

08007532 <__sclose>:
 8007532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007536:	f000 b8f7 	b.w	8007728 <_close_r>

0800753a <__swbuf_r>:
 800753a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800753c:	460e      	mov	r6, r1
 800753e:	4614      	mov	r4, r2
 8007540:	4605      	mov	r5, r0
 8007542:	b118      	cbz	r0, 800754c <__swbuf_r+0x12>
 8007544:	6a03      	ldr	r3, [r0, #32]
 8007546:	b90b      	cbnz	r3, 800754c <__swbuf_r+0x12>
 8007548:	f7ff fb0a 	bl	8006b60 <__sinit>
 800754c:	69a3      	ldr	r3, [r4, #24]
 800754e:	60a3      	str	r3, [r4, #8]
 8007550:	89a3      	ldrh	r3, [r4, #12]
 8007552:	071a      	lsls	r2, r3, #28
 8007554:	d525      	bpl.n	80075a2 <__swbuf_r+0x68>
 8007556:	6923      	ldr	r3, [r4, #16]
 8007558:	b31b      	cbz	r3, 80075a2 <__swbuf_r+0x68>
 800755a:	6823      	ldr	r3, [r4, #0]
 800755c:	6922      	ldr	r2, [r4, #16]
 800755e:	1a98      	subs	r0, r3, r2
 8007560:	6963      	ldr	r3, [r4, #20]
 8007562:	b2f6      	uxtb	r6, r6
 8007564:	4283      	cmp	r3, r0
 8007566:	4637      	mov	r7, r6
 8007568:	dc04      	bgt.n	8007574 <__swbuf_r+0x3a>
 800756a:	4621      	mov	r1, r4
 800756c:	4628      	mov	r0, r5
 800756e:	f7ff ff6d 	bl	800744c <_fflush_r>
 8007572:	b9e0      	cbnz	r0, 80075ae <__swbuf_r+0x74>
 8007574:	68a3      	ldr	r3, [r4, #8]
 8007576:	3b01      	subs	r3, #1
 8007578:	60a3      	str	r3, [r4, #8]
 800757a:	6823      	ldr	r3, [r4, #0]
 800757c:	1c5a      	adds	r2, r3, #1
 800757e:	6022      	str	r2, [r4, #0]
 8007580:	701e      	strb	r6, [r3, #0]
 8007582:	6962      	ldr	r2, [r4, #20]
 8007584:	1c43      	adds	r3, r0, #1
 8007586:	429a      	cmp	r2, r3
 8007588:	d004      	beq.n	8007594 <__swbuf_r+0x5a>
 800758a:	89a3      	ldrh	r3, [r4, #12]
 800758c:	07db      	lsls	r3, r3, #31
 800758e:	d506      	bpl.n	800759e <__swbuf_r+0x64>
 8007590:	2e0a      	cmp	r6, #10
 8007592:	d104      	bne.n	800759e <__swbuf_r+0x64>
 8007594:	4621      	mov	r1, r4
 8007596:	4628      	mov	r0, r5
 8007598:	f7ff ff58 	bl	800744c <_fflush_r>
 800759c:	b938      	cbnz	r0, 80075ae <__swbuf_r+0x74>
 800759e:	4638      	mov	r0, r7
 80075a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075a2:	4621      	mov	r1, r4
 80075a4:	4628      	mov	r0, r5
 80075a6:	f000 f805 	bl	80075b4 <__swsetup_r>
 80075aa:	2800      	cmp	r0, #0
 80075ac:	d0d5      	beq.n	800755a <__swbuf_r+0x20>
 80075ae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80075b2:	e7f4      	b.n	800759e <__swbuf_r+0x64>

080075b4 <__swsetup_r>:
 80075b4:	b538      	push	{r3, r4, r5, lr}
 80075b6:	4b2a      	ldr	r3, [pc, #168]	; (8007660 <__swsetup_r+0xac>)
 80075b8:	4605      	mov	r5, r0
 80075ba:	6818      	ldr	r0, [r3, #0]
 80075bc:	460c      	mov	r4, r1
 80075be:	b118      	cbz	r0, 80075c8 <__swsetup_r+0x14>
 80075c0:	6a03      	ldr	r3, [r0, #32]
 80075c2:	b90b      	cbnz	r3, 80075c8 <__swsetup_r+0x14>
 80075c4:	f7ff facc 	bl	8006b60 <__sinit>
 80075c8:	89a3      	ldrh	r3, [r4, #12]
 80075ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075ce:	0718      	lsls	r0, r3, #28
 80075d0:	d422      	bmi.n	8007618 <__swsetup_r+0x64>
 80075d2:	06d9      	lsls	r1, r3, #27
 80075d4:	d407      	bmi.n	80075e6 <__swsetup_r+0x32>
 80075d6:	2309      	movs	r3, #9
 80075d8:	602b      	str	r3, [r5, #0]
 80075da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80075de:	81a3      	strh	r3, [r4, #12]
 80075e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075e4:	e034      	b.n	8007650 <__swsetup_r+0x9c>
 80075e6:	0758      	lsls	r0, r3, #29
 80075e8:	d512      	bpl.n	8007610 <__swsetup_r+0x5c>
 80075ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075ec:	b141      	cbz	r1, 8007600 <__swsetup_r+0x4c>
 80075ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075f2:	4299      	cmp	r1, r3
 80075f4:	d002      	beq.n	80075fc <__swsetup_r+0x48>
 80075f6:	4628      	mov	r0, r5
 80075f8:	f000 f90e 	bl	8007818 <_free_r>
 80075fc:	2300      	movs	r3, #0
 80075fe:	6363      	str	r3, [r4, #52]	; 0x34
 8007600:	89a3      	ldrh	r3, [r4, #12]
 8007602:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007606:	81a3      	strh	r3, [r4, #12]
 8007608:	2300      	movs	r3, #0
 800760a:	6063      	str	r3, [r4, #4]
 800760c:	6923      	ldr	r3, [r4, #16]
 800760e:	6023      	str	r3, [r4, #0]
 8007610:	89a3      	ldrh	r3, [r4, #12]
 8007612:	f043 0308 	orr.w	r3, r3, #8
 8007616:	81a3      	strh	r3, [r4, #12]
 8007618:	6923      	ldr	r3, [r4, #16]
 800761a:	b94b      	cbnz	r3, 8007630 <__swsetup_r+0x7c>
 800761c:	89a3      	ldrh	r3, [r4, #12]
 800761e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007622:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007626:	d003      	beq.n	8007630 <__swsetup_r+0x7c>
 8007628:	4621      	mov	r1, r4
 800762a:	4628      	mov	r0, r5
 800762c:	f000 f840 	bl	80076b0 <__smakebuf_r>
 8007630:	89a0      	ldrh	r0, [r4, #12]
 8007632:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007636:	f010 0301 	ands.w	r3, r0, #1
 800763a:	d00a      	beq.n	8007652 <__swsetup_r+0x9e>
 800763c:	2300      	movs	r3, #0
 800763e:	60a3      	str	r3, [r4, #8]
 8007640:	6963      	ldr	r3, [r4, #20]
 8007642:	425b      	negs	r3, r3
 8007644:	61a3      	str	r3, [r4, #24]
 8007646:	6923      	ldr	r3, [r4, #16]
 8007648:	b943      	cbnz	r3, 800765c <__swsetup_r+0xa8>
 800764a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800764e:	d1c4      	bne.n	80075da <__swsetup_r+0x26>
 8007650:	bd38      	pop	{r3, r4, r5, pc}
 8007652:	0781      	lsls	r1, r0, #30
 8007654:	bf58      	it	pl
 8007656:	6963      	ldrpl	r3, [r4, #20]
 8007658:	60a3      	str	r3, [r4, #8]
 800765a:	e7f4      	b.n	8007646 <__swsetup_r+0x92>
 800765c:	2000      	movs	r0, #0
 800765e:	e7f7      	b.n	8007650 <__swsetup_r+0x9c>
 8007660:	20000064 	.word	0x20000064

08007664 <__swhatbuf_r>:
 8007664:	b570      	push	{r4, r5, r6, lr}
 8007666:	460c      	mov	r4, r1
 8007668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800766c:	2900      	cmp	r1, #0
 800766e:	b096      	sub	sp, #88	; 0x58
 8007670:	4615      	mov	r5, r2
 8007672:	461e      	mov	r6, r3
 8007674:	da0d      	bge.n	8007692 <__swhatbuf_r+0x2e>
 8007676:	89a3      	ldrh	r3, [r4, #12]
 8007678:	f013 0f80 	tst.w	r3, #128	; 0x80
 800767c:	f04f 0100 	mov.w	r1, #0
 8007680:	bf0c      	ite	eq
 8007682:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007686:	2340      	movne	r3, #64	; 0x40
 8007688:	2000      	movs	r0, #0
 800768a:	6031      	str	r1, [r6, #0]
 800768c:	602b      	str	r3, [r5, #0]
 800768e:	b016      	add	sp, #88	; 0x58
 8007690:	bd70      	pop	{r4, r5, r6, pc}
 8007692:	466a      	mov	r2, sp
 8007694:	f000 f858 	bl	8007748 <_fstat_r>
 8007698:	2800      	cmp	r0, #0
 800769a:	dbec      	blt.n	8007676 <__swhatbuf_r+0x12>
 800769c:	9901      	ldr	r1, [sp, #4]
 800769e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80076a2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80076a6:	4259      	negs	r1, r3
 80076a8:	4159      	adcs	r1, r3
 80076aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076ae:	e7eb      	b.n	8007688 <__swhatbuf_r+0x24>

080076b0 <__smakebuf_r>:
 80076b0:	898b      	ldrh	r3, [r1, #12]
 80076b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076b4:	079d      	lsls	r5, r3, #30
 80076b6:	4606      	mov	r6, r0
 80076b8:	460c      	mov	r4, r1
 80076ba:	d507      	bpl.n	80076cc <__smakebuf_r+0x1c>
 80076bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80076c0:	6023      	str	r3, [r4, #0]
 80076c2:	6123      	str	r3, [r4, #16]
 80076c4:	2301      	movs	r3, #1
 80076c6:	6163      	str	r3, [r4, #20]
 80076c8:	b002      	add	sp, #8
 80076ca:	bd70      	pop	{r4, r5, r6, pc}
 80076cc:	ab01      	add	r3, sp, #4
 80076ce:	466a      	mov	r2, sp
 80076d0:	f7ff ffc8 	bl	8007664 <__swhatbuf_r>
 80076d4:	9900      	ldr	r1, [sp, #0]
 80076d6:	4605      	mov	r5, r0
 80076d8:	4630      	mov	r0, r6
 80076da:	f7ff fc21 	bl	8006f20 <_malloc_r>
 80076de:	b948      	cbnz	r0, 80076f4 <__smakebuf_r+0x44>
 80076e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076e4:	059a      	lsls	r2, r3, #22
 80076e6:	d4ef      	bmi.n	80076c8 <__smakebuf_r+0x18>
 80076e8:	f023 0303 	bic.w	r3, r3, #3
 80076ec:	f043 0302 	orr.w	r3, r3, #2
 80076f0:	81a3      	strh	r3, [r4, #12]
 80076f2:	e7e3      	b.n	80076bc <__smakebuf_r+0xc>
 80076f4:	89a3      	ldrh	r3, [r4, #12]
 80076f6:	6020      	str	r0, [r4, #0]
 80076f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076fc:	81a3      	strh	r3, [r4, #12]
 80076fe:	9b00      	ldr	r3, [sp, #0]
 8007700:	6163      	str	r3, [r4, #20]
 8007702:	9b01      	ldr	r3, [sp, #4]
 8007704:	6120      	str	r0, [r4, #16]
 8007706:	b15b      	cbz	r3, 8007720 <__smakebuf_r+0x70>
 8007708:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800770c:	4630      	mov	r0, r6
 800770e:	f000 f82d 	bl	800776c <_isatty_r>
 8007712:	b128      	cbz	r0, 8007720 <__smakebuf_r+0x70>
 8007714:	89a3      	ldrh	r3, [r4, #12]
 8007716:	f023 0303 	bic.w	r3, r3, #3
 800771a:	f043 0301 	orr.w	r3, r3, #1
 800771e:	81a3      	strh	r3, [r4, #12]
 8007720:	89a3      	ldrh	r3, [r4, #12]
 8007722:	431d      	orrs	r5, r3
 8007724:	81a5      	strh	r5, [r4, #12]
 8007726:	e7cf      	b.n	80076c8 <__smakebuf_r+0x18>

08007728 <_close_r>:
 8007728:	b538      	push	{r3, r4, r5, lr}
 800772a:	4d06      	ldr	r5, [pc, #24]	; (8007744 <_close_r+0x1c>)
 800772c:	2300      	movs	r3, #0
 800772e:	4604      	mov	r4, r0
 8007730:	4608      	mov	r0, r1
 8007732:	602b      	str	r3, [r5, #0]
 8007734:	f7fa fcfd 	bl	8002132 <_close>
 8007738:	1c43      	adds	r3, r0, #1
 800773a:	d102      	bne.n	8007742 <_close_r+0x1a>
 800773c:	682b      	ldr	r3, [r5, #0]
 800773e:	b103      	cbz	r3, 8007742 <_close_r+0x1a>
 8007740:	6023      	str	r3, [r4, #0]
 8007742:	bd38      	pop	{r3, r4, r5, pc}
 8007744:	200005c8 	.word	0x200005c8

08007748 <_fstat_r>:
 8007748:	b538      	push	{r3, r4, r5, lr}
 800774a:	4d07      	ldr	r5, [pc, #28]	; (8007768 <_fstat_r+0x20>)
 800774c:	2300      	movs	r3, #0
 800774e:	4604      	mov	r4, r0
 8007750:	4608      	mov	r0, r1
 8007752:	4611      	mov	r1, r2
 8007754:	602b      	str	r3, [r5, #0]
 8007756:	f7fa fcf8 	bl	800214a <_fstat>
 800775a:	1c43      	adds	r3, r0, #1
 800775c:	d102      	bne.n	8007764 <_fstat_r+0x1c>
 800775e:	682b      	ldr	r3, [r5, #0]
 8007760:	b103      	cbz	r3, 8007764 <_fstat_r+0x1c>
 8007762:	6023      	str	r3, [r4, #0]
 8007764:	bd38      	pop	{r3, r4, r5, pc}
 8007766:	bf00      	nop
 8007768:	200005c8 	.word	0x200005c8

0800776c <_isatty_r>:
 800776c:	b538      	push	{r3, r4, r5, lr}
 800776e:	4d06      	ldr	r5, [pc, #24]	; (8007788 <_isatty_r+0x1c>)
 8007770:	2300      	movs	r3, #0
 8007772:	4604      	mov	r4, r0
 8007774:	4608      	mov	r0, r1
 8007776:	602b      	str	r3, [r5, #0]
 8007778:	f7fa fcf7 	bl	800216a <_isatty>
 800777c:	1c43      	adds	r3, r0, #1
 800777e:	d102      	bne.n	8007786 <_isatty_r+0x1a>
 8007780:	682b      	ldr	r3, [r5, #0]
 8007782:	b103      	cbz	r3, 8007786 <_isatty_r+0x1a>
 8007784:	6023      	str	r3, [r4, #0]
 8007786:	bd38      	pop	{r3, r4, r5, pc}
 8007788:	200005c8 	.word	0x200005c8

0800778c <_lseek_r>:
 800778c:	b538      	push	{r3, r4, r5, lr}
 800778e:	4d07      	ldr	r5, [pc, #28]	; (80077ac <_lseek_r+0x20>)
 8007790:	4604      	mov	r4, r0
 8007792:	4608      	mov	r0, r1
 8007794:	4611      	mov	r1, r2
 8007796:	2200      	movs	r2, #0
 8007798:	602a      	str	r2, [r5, #0]
 800779a:	461a      	mov	r2, r3
 800779c:	f7fa fcf0 	bl	8002180 <_lseek>
 80077a0:	1c43      	adds	r3, r0, #1
 80077a2:	d102      	bne.n	80077aa <_lseek_r+0x1e>
 80077a4:	682b      	ldr	r3, [r5, #0]
 80077a6:	b103      	cbz	r3, 80077aa <_lseek_r+0x1e>
 80077a8:	6023      	str	r3, [r4, #0]
 80077aa:	bd38      	pop	{r3, r4, r5, pc}
 80077ac:	200005c8 	.word	0x200005c8

080077b0 <_read_r>:
 80077b0:	b538      	push	{r3, r4, r5, lr}
 80077b2:	4d07      	ldr	r5, [pc, #28]	; (80077d0 <_read_r+0x20>)
 80077b4:	4604      	mov	r4, r0
 80077b6:	4608      	mov	r0, r1
 80077b8:	4611      	mov	r1, r2
 80077ba:	2200      	movs	r2, #0
 80077bc:	602a      	str	r2, [r5, #0]
 80077be:	461a      	mov	r2, r3
 80077c0:	f7fa fc7e 	bl	80020c0 <_read>
 80077c4:	1c43      	adds	r3, r0, #1
 80077c6:	d102      	bne.n	80077ce <_read_r+0x1e>
 80077c8:	682b      	ldr	r3, [r5, #0]
 80077ca:	b103      	cbz	r3, 80077ce <_read_r+0x1e>
 80077cc:	6023      	str	r3, [r4, #0]
 80077ce:	bd38      	pop	{r3, r4, r5, pc}
 80077d0:	200005c8 	.word	0x200005c8

080077d4 <_sbrk_r>:
 80077d4:	b538      	push	{r3, r4, r5, lr}
 80077d6:	4d06      	ldr	r5, [pc, #24]	; (80077f0 <_sbrk_r+0x1c>)
 80077d8:	2300      	movs	r3, #0
 80077da:	4604      	mov	r4, r0
 80077dc:	4608      	mov	r0, r1
 80077de:	602b      	str	r3, [r5, #0]
 80077e0:	f7fa fcdc 	bl	800219c <_sbrk>
 80077e4:	1c43      	adds	r3, r0, #1
 80077e6:	d102      	bne.n	80077ee <_sbrk_r+0x1a>
 80077e8:	682b      	ldr	r3, [r5, #0]
 80077ea:	b103      	cbz	r3, 80077ee <_sbrk_r+0x1a>
 80077ec:	6023      	str	r3, [r4, #0]
 80077ee:	bd38      	pop	{r3, r4, r5, pc}
 80077f0:	200005c8 	.word	0x200005c8

080077f4 <_write_r>:
 80077f4:	b538      	push	{r3, r4, r5, lr}
 80077f6:	4d07      	ldr	r5, [pc, #28]	; (8007814 <_write_r+0x20>)
 80077f8:	4604      	mov	r4, r0
 80077fa:	4608      	mov	r0, r1
 80077fc:	4611      	mov	r1, r2
 80077fe:	2200      	movs	r2, #0
 8007800:	602a      	str	r2, [r5, #0]
 8007802:	461a      	mov	r2, r3
 8007804:	f7fa fc79 	bl	80020fa <_write>
 8007808:	1c43      	adds	r3, r0, #1
 800780a:	d102      	bne.n	8007812 <_write_r+0x1e>
 800780c:	682b      	ldr	r3, [r5, #0]
 800780e:	b103      	cbz	r3, 8007812 <_write_r+0x1e>
 8007810:	6023      	str	r3, [r4, #0]
 8007812:	bd38      	pop	{r3, r4, r5, pc}
 8007814:	200005c8 	.word	0x200005c8

08007818 <_free_r>:
 8007818:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800781a:	2900      	cmp	r1, #0
 800781c:	d044      	beq.n	80078a8 <_free_r+0x90>
 800781e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007822:	9001      	str	r0, [sp, #4]
 8007824:	2b00      	cmp	r3, #0
 8007826:	f1a1 0404 	sub.w	r4, r1, #4
 800782a:	bfb8      	it	lt
 800782c:	18e4      	addlt	r4, r4, r3
 800782e:	f7ff fe35 	bl	800749c <__malloc_lock>
 8007832:	4a1e      	ldr	r2, [pc, #120]	; (80078ac <_free_r+0x94>)
 8007834:	9801      	ldr	r0, [sp, #4]
 8007836:	6813      	ldr	r3, [r2, #0]
 8007838:	b933      	cbnz	r3, 8007848 <_free_r+0x30>
 800783a:	6063      	str	r3, [r4, #4]
 800783c:	6014      	str	r4, [r2, #0]
 800783e:	b003      	add	sp, #12
 8007840:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007844:	f7ff be30 	b.w	80074a8 <__malloc_unlock>
 8007848:	42a3      	cmp	r3, r4
 800784a:	d908      	bls.n	800785e <_free_r+0x46>
 800784c:	6825      	ldr	r5, [r4, #0]
 800784e:	1961      	adds	r1, r4, r5
 8007850:	428b      	cmp	r3, r1
 8007852:	bf01      	itttt	eq
 8007854:	6819      	ldreq	r1, [r3, #0]
 8007856:	685b      	ldreq	r3, [r3, #4]
 8007858:	1949      	addeq	r1, r1, r5
 800785a:	6021      	streq	r1, [r4, #0]
 800785c:	e7ed      	b.n	800783a <_free_r+0x22>
 800785e:	461a      	mov	r2, r3
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	b10b      	cbz	r3, 8007868 <_free_r+0x50>
 8007864:	42a3      	cmp	r3, r4
 8007866:	d9fa      	bls.n	800785e <_free_r+0x46>
 8007868:	6811      	ldr	r1, [r2, #0]
 800786a:	1855      	adds	r5, r2, r1
 800786c:	42a5      	cmp	r5, r4
 800786e:	d10b      	bne.n	8007888 <_free_r+0x70>
 8007870:	6824      	ldr	r4, [r4, #0]
 8007872:	4421      	add	r1, r4
 8007874:	1854      	adds	r4, r2, r1
 8007876:	42a3      	cmp	r3, r4
 8007878:	6011      	str	r1, [r2, #0]
 800787a:	d1e0      	bne.n	800783e <_free_r+0x26>
 800787c:	681c      	ldr	r4, [r3, #0]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	6053      	str	r3, [r2, #4]
 8007882:	440c      	add	r4, r1
 8007884:	6014      	str	r4, [r2, #0]
 8007886:	e7da      	b.n	800783e <_free_r+0x26>
 8007888:	d902      	bls.n	8007890 <_free_r+0x78>
 800788a:	230c      	movs	r3, #12
 800788c:	6003      	str	r3, [r0, #0]
 800788e:	e7d6      	b.n	800783e <_free_r+0x26>
 8007890:	6825      	ldr	r5, [r4, #0]
 8007892:	1961      	adds	r1, r4, r5
 8007894:	428b      	cmp	r3, r1
 8007896:	bf04      	itt	eq
 8007898:	6819      	ldreq	r1, [r3, #0]
 800789a:	685b      	ldreq	r3, [r3, #4]
 800789c:	6063      	str	r3, [r4, #4]
 800789e:	bf04      	itt	eq
 80078a0:	1949      	addeq	r1, r1, r5
 80078a2:	6021      	streq	r1, [r4, #0]
 80078a4:	6054      	str	r4, [r2, #4]
 80078a6:	e7ca      	b.n	800783e <_free_r+0x26>
 80078a8:	b003      	add	sp, #12
 80078aa:	bd30      	pop	{r4, r5, pc}
 80078ac:	200005c0 	.word	0x200005c0

080078b0 <_init>:
 80078b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b2:	bf00      	nop
 80078b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078b6:	bc08      	pop	{r3}
 80078b8:	469e      	mov	lr, r3
 80078ba:	4770      	bx	lr

080078bc <_fini>:
 80078bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078be:	bf00      	nop
 80078c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078c2:	bc08      	pop	{r3}
 80078c4:	469e      	mov	lr, r3
 80078c6:	4770      	bx	lr
