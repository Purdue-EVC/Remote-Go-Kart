
RCGoKart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3b4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  0800a588  0800a588  0001a588  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a914  0800a914  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a914  0800a914  0001a914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a91c  0800a91c  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a91c  0800a91c  0001a91c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a920  0800a920  0001a920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800a924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000053c  200001fc  0800ab20  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000738  0800ab20  00020738  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000086  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015646  00000000  00000000  000202b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002baf  00000000  00000000  000358f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001488  00000000  00000000  000384a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001036  00000000  00000000  00039930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025a31  00000000  00000000  0003a966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018b12  00000000  00000000  00060397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e93f7  00000000  00000000  00078ea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006878  00000000  00000000  001622a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00168b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a56c 	.word	0x0800a56c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000200 	.word	0x20000200
 800020c:	0800a56c 	.word	0x0800a56c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <HAL_TIM_IC_CaptureCallback>:

uint32_t ICValue = 0;
uint32_t Frequency = 0;
float Duty = 0;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // If the interrupt is triggered by channel 1
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	7f1b      	ldrb	r3, [r3, #28]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d124      	bne.n	8000fde <HAL_TIM_IC_CaptureCallback+0x5a>
	{
		// Read the IC value
		ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000f94:	2100      	movs	r1, #0
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f005 fca0 	bl	80068dc <HAL_TIM_ReadCapturedValue>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000fa0:	6013      	str	r3, [r2, #0]

		if (ICValue != 0)
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d019      	beq.n	8000fde <HAL_TIM_IC_CaptureCallback+0x5a>
		{
			// calculate the Duty Cycle
			Duty = (HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) *100)/ICValue;
 8000faa:	2104      	movs	r1, #4
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f005 fc95 	bl	80068dc <HAL_TIM_ReadCapturedValue>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2264      	movs	r2, #100	; 0x64
 8000fb6:	fb03 f202 	mul.w	r2, r3, r2
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc2:	ee07 3a90 	vmov	s15, r3
 8000fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <HAL_TIM_IC_CaptureCallback+0x68>)
 8000fcc:	edc3 7a00 	vstr	s15, [r3]

			Frequency = 90000000/ICValue;
 8000fd0:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a06      	ldr	r2, [pc, #24]	; (8000ff0 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fda:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000fdc:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200005c8 	.word	0x200005c8
 8000fec:	200005d0 	.word	0x200005d0
 8000ff0:	055d4a80 	.word	0x055d4a80
 8000ff4:	200005cc 	.word	0x200005cc

08000ff8 <steeringInput>:
const float steeringInputAbsoluteMax = 180000;
const float steeringInputAbsoluteMin = 80000;
const float drivingInputAbsoluteMax = 180000;
const float drivingInputAbsoluteMin = 80000;

float steeringInput(uint32_t rawSteeringInput){
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	if(rawSteeringInput > currentSteeringInputMax && rawSteeringInput < steeringInputAbsoluteMax){
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	ee07 3a90 	vmov	s15, r3
 8001006:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800100a:	4b2d      	ldr	r3, [pc, #180]	; (80010c0 <steeringInput+0xc8>)
 800100c:	edd3 7a00 	vldr	s15, [r3]
 8001010:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001018:	dd13      	ble.n	8001042 <steeringInput+0x4a>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	ee07 3a90 	vmov	s15, r3
 8001020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001024:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80010c4 <steeringInput+0xcc>
 8001028:	eef4 7ac7 	vcmpe.f32	s15, s14
 800102c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001030:	d507      	bpl.n	8001042 <steeringInput+0x4a>
		currentSteeringInputMax = rawSteeringInput;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	ee07 3a90 	vmov	s15, r3
 8001038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800103c:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <steeringInput+0xc8>)
 800103e:	edc3 7a00 	vstr	s15, [r3]
	}
	if(rawSteeringInput < currentSteeringInputMin && rawSteeringInput > steeringInputAbsoluteMin){
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	ee07 3a90 	vmov	s15, r3
 8001048:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800104c:	4b1e      	ldr	r3, [pc, #120]	; (80010c8 <steeringInput+0xd0>)
 800104e:	edd3 7a00 	vldr	s15, [r3]
 8001052:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800105a:	d513      	bpl.n	8001084 <steeringInput+0x8c>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	ee07 3a90 	vmov	s15, r3
 8001062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001066:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80010cc <steeringInput+0xd4>
 800106a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800106e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001072:	dd07      	ble.n	8001084 <steeringInput+0x8c>
		currentSteeringInputMin = rawSteeringInput;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	ee07 3a90 	vmov	s15, r3
 800107a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800107e:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <steeringInput+0xd0>)
 8001080:	edc3 7a00 	vstr	s15, [r3]
	}
	return (float)(rawSteeringInput-currentSteeringInputMin)/(currentSteeringInputMax-currentSteeringInputMin);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	ee07 3a90 	vmov	s15, r3
 800108a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <steeringInput+0xd0>)
 8001090:	edd3 7a00 	vldr	s15, [r3]
 8001094:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <steeringInput+0xc8>)
 800109a:	edd3 6a00 	vldr	s13, [r3]
 800109e:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <steeringInput+0xd0>)
 80010a0:	edd3 7a00 	vldr	s15, [r3]
 80010a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80010a8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010ac:	eef0 7a66 	vmov.f32	s15, s13
}
 80010b0:	eeb0 0a67 	vmov.f32	s0, s15
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000014 	.word	0x20000014
 80010c4:	482fc800 	.word	0x482fc800
 80010c8:	20000018 	.word	0x20000018
 80010cc:	479c4000 	.word	0x479c4000

080010d0 <drivingInput>:

float drivingInput(uint32_t rawDrivingInput){
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	if(rawDrivingInput > currentDrivingInputMax && rawDrivingInput < drivingInputAbsoluteMax){
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	ee07 3a90 	vmov	s15, r3
 80010de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010e2:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <drivingInput+0xc8>)
 80010e4:	edd3 7a00 	vldr	s15, [r3]
 80010e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f0:	dd13      	ble.n	800111a <drivingInput+0x4a>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	ee07 3a90 	vmov	s15, r3
 80010f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010fc:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800119c <drivingInput+0xcc>
 8001100:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001108:	d507      	bpl.n	800111a <drivingInput+0x4a>
		currentDrivingInputMax = rawDrivingInput;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	ee07 3a90 	vmov	s15, r3
 8001110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001114:	4b20      	ldr	r3, [pc, #128]	; (8001198 <drivingInput+0xc8>)
 8001116:	edc3 7a00 	vstr	s15, [r3]
	}
	if(rawDrivingInput < currentDrivingInputMin && rawDrivingInput > drivingInputAbsoluteMin){
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	ee07 3a90 	vmov	s15, r3
 8001120:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001124:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <drivingInput+0xd0>)
 8001126:	edd3 7a00 	vldr	s15, [r3]
 800112a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800112e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001132:	d513      	bpl.n	800115c <drivingInput+0x8c>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	ee07 3a90 	vmov	s15, r3
 800113a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800113e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80011a4 <drivingInput+0xd4>
 8001142:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114a:	dd07      	ble.n	800115c <drivingInput+0x8c>
		currentDrivingInputMin = rawDrivingInput;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	ee07 3a90 	vmov	s15, r3
 8001152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001156:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <drivingInput+0xd0>)
 8001158:	edc3 7a00 	vstr	s15, [r3]
	}
	return (float)(rawDrivingInput-currentDrivingInputMin)/(currentDrivingInputMax-currentDrivingInputMin);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	ee07 3a90 	vmov	s15, r3
 8001162:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <drivingInput+0xd0>)
 8001168:	edd3 7a00 	vldr	s15, [r3]
 800116c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <drivingInput+0xc8>)
 8001172:	edd3 6a00 	vldr	s13, [r3]
 8001176:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <drivingInput+0xd0>)
 8001178:	edd3 7a00 	vldr	s15, [r3]
 800117c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001180:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001184:	eef0 7a66 	vmov.f32	s15, s13
}
 8001188:	eeb0 0a67 	vmov.f32	s0, s15
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	2000001c 	.word	0x2000001c
 800119c:	482fc800 	.word	0x482fc800
 80011a0:	20000020 	.word	0x20000020
 80011a4:	479c4000 	.word	0x479c4000

080011a8 <getPIDPower>:
////	}
//}


//TODO: Yet to be tested:
float getPIDPower(float currentPosition, float requestPosition, float cycleTime){//New version:
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80011b2:	edc7 0a02 	vstr	s1, [r7, #8]
 80011b6:	ed87 1a01 	vstr	s2, [r7, #4]
	if(currentPosition<110){
 80011ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80011be:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8001340 <getPIDPower+0x198>
 80011c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ca:	d507      	bpl.n	80011dc <getPIDPower+0x34>
		currentPosition = currentPosition+360;
 80011cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80011d0:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8001344 <getPIDPower+0x19c>
 80011d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011d8:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	error = requestPosition-currentPosition;
 80011dc:	ed97 7a02 	vldr	s14, [r7, #8]
 80011e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80011e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e8:	4b57      	ldr	r3, [pc, #348]	; (8001348 <getPIDPower+0x1a0>)
 80011ea:	edc3 7a00 	vstr	s15, [r3]
	if((error>minError||-minError>error)||(pastError>minError||-minError>pastError)){
 80011ee:	4b56      	ldr	r3, [pc, #344]	; (8001348 <getPIDPower+0x1a0>)
 80011f0:	ed93 7a00 	vldr	s14, [r3]
 80011f4:	4b55      	ldr	r3, [pc, #340]	; (800134c <getPIDPower+0x1a4>)
 80011f6:	edd3 7a00 	vldr	s15, [r3]
 80011fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001202:	dc24      	bgt.n	800124e <getPIDPower+0xa6>
 8001204:	4b51      	ldr	r3, [pc, #324]	; (800134c <getPIDPower+0x1a4>)
 8001206:	edd3 7a00 	vldr	s15, [r3]
 800120a:	eeb1 7a67 	vneg.f32	s14, s15
 800120e:	4b4e      	ldr	r3, [pc, #312]	; (8001348 <getPIDPower+0x1a0>)
 8001210:	edd3 7a00 	vldr	s15, [r3]
 8001214:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121c:	dc17      	bgt.n	800124e <getPIDPower+0xa6>
 800121e:	4b4c      	ldr	r3, [pc, #304]	; (8001350 <getPIDPower+0x1a8>)
 8001220:	ed93 7a00 	vldr	s14, [r3]
 8001224:	4b49      	ldr	r3, [pc, #292]	; (800134c <getPIDPower+0x1a4>)
 8001226:	edd3 7a00 	vldr	s15, [r3]
 800122a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800122e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001232:	dc0c      	bgt.n	800124e <getPIDPower+0xa6>
 8001234:	4b45      	ldr	r3, [pc, #276]	; (800134c <getPIDPower+0x1a4>)
 8001236:	edd3 7a00 	vldr	s15, [r3]
 800123a:	eeb1 7a67 	vneg.f32	s14, s15
 800123e:	4b44      	ldr	r3, [pc, #272]	; (8001350 <getPIDPower+0x1a8>)
 8001240:	edd3 7a00 	vldr	s15, [r3]
 8001244:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124c:	dd6a      	ble.n	8001324 <getPIDPower+0x17c>
		integral = integral + (error * cycleTime);
 800124e:	4b3e      	ldr	r3, [pc, #248]	; (8001348 <getPIDPower+0x1a0>)
 8001250:	ed93 7a00 	vldr	s14, [r3]
 8001254:	edd7 7a01 	vldr	s15, [r7, #4]
 8001258:	ee27 7a27 	vmul.f32	s14, s14, s15
 800125c:	4b3d      	ldr	r3, [pc, #244]	; (8001354 <getPIDPower+0x1ac>)
 800125e:	edd3 7a00 	vldr	s15, [r3]
 8001262:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001266:	4b3b      	ldr	r3, [pc, #236]	; (8001354 <getPIDPower+0x1ac>)
 8001268:	edc3 7a00 	vstr	s15, [r3]
		derivative = (error-pastError)/cycleTime;
 800126c:	4b36      	ldr	r3, [pc, #216]	; (8001348 <getPIDPower+0x1a0>)
 800126e:	ed93 7a00 	vldr	s14, [r3]
 8001272:	4b37      	ldr	r3, [pc, #220]	; (8001350 <getPIDPower+0x1a8>)
 8001274:	edd3 7a00 	vldr	s15, [r3]
 8001278:	ee77 6a67 	vsub.f32	s13, s14, s15
 800127c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001280:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001284:	4b34      	ldr	r3, [pc, #208]	; (8001358 <getPIDPower+0x1b0>)
 8001286:	edc3 7a00 	vstr	s15, [r3]
		pastError = error;
 800128a:	4b2f      	ldr	r3, [pc, #188]	; (8001348 <getPIDPower+0x1a0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a30      	ldr	r2, [pc, #192]	; (8001350 <getPIDPower+0x1a8>)
 8001290:	6013      	str	r3, [r2, #0]
		pos = kP*error+kI*integral+kD*derivative+kOffset;
 8001292:	4b32      	ldr	r3, [pc, #200]	; (800135c <getPIDPower+0x1b4>)
 8001294:	ed93 7a00 	vldr	s14, [r3]
 8001298:	4b2b      	ldr	r3, [pc, #172]	; (8001348 <getPIDPower+0x1a0>)
 800129a:	edd3 7a00 	vldr	s15, [r3]
 800129e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012a2:	4b2f      	ldr	r3, [pc, #188]	; (8001360 <getPIDPower+0x1b8>)
 80012a4:	edd3 6a00 	vldr	s13, [r3]
 80012a8:	4b2a      	ldr	r3, [pc, #168]	; (8001354 <getPIDPower+0x1ac>)
 80012aa:	edd3 7a00 	vldr	s15, [r3]
 80012ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012b6:	4b2b      	ldr	r3, [pc, #172]	; (8001364 <getPIDPower+0x1bc>)
 80012b8:	edd3 6a00 	vldr	s13, [r3]
 80012bc:	4b26      	ldr	r3, [pc, #152]	; (8001358 <getPIDPower+0x1b0>)
 80012be:	edd3 7a00 	vldr	s15, [r3]
 80012c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ca:	ee17 0a90 	vmov	r0, s15
 80012ce:	f7ff f95b 	bl	8000588 <__aeabi_f2d>
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	4b24      	ldr	r3, [pc, #144]	; (8001368 <getPIDPower+0x1c0>)
 80012d8:	f7fe fff8 	bl	80002cc <__adddf3>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	4610      	mov	r0, r2
 80012e2:	4619      	mov	r1, r3
 80012e4:	f7ff fc80 	bl	8000be8 <__aeabi_d2f>
 80012e8:	4603      	mov	r3, r0
 80012ea:	4a20      	ldr	r2, [pc, #128]	; (800136c <getPIDPower+0x1c4>)
 80012ec:	6013      	str	r3, [r2, #0]
		if(pos>1){
 80012ee:	4b1f      	ldr	r3, [pc, #124]	; (800136c <getPIDPower+0x1c4>)
 80012f0:	edd3 7a00 	vldr	s15, [r3]
 80012f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001300:	dd02      	ble.n	8001308 <getPIDPower+0x160>
			return 1;
 8001302:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001306:	e013      	b.n	8001330 <getPIDPower+0x188>
		}
		else if(pos<0){
 8001308:	4b18      	ldr	r3, [pc, #96]	; (800136c <getPIDPower+0x1c4>)
 800130a:	edd3 7a00 	vldr	s15, [r3]
 800130e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001316:	d502      	bpl.n	800131e <getPIDPower+0x176>
			return 0;
 8001318:	f04f 0300 	mov.w	r3, #0
 800131c:	e008      	b.n	8001330 <getPIDPower+0x188>
		}
		else{
			return pos;
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <getPIDPower+0x1c4>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	e005      	b.n	8001330 <getPIDPower+0x188>
		}
	}
	else{
		integral = 0;
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <getPIDPower+0x1ac>)
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
		return .5;
 800132c:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
	}
}
 8001330:	ee07 3a90 	vmov	s15, r3
 8001334:	eeb0 0a67 	vmov.f32	s0, s15
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	42dc0000 	.word	0x42dc0000
 8001344:	43b40000 	.word	0x43b40000
 8001348:	200005b4 	.word	0x200005b4
 800134c:	20000010 	.word	0x20000010
 8001350:	200005c4 	.word	0x200005c4
 8001354:	200005bc 	.word	0x200005bc
 8001358:	200005b8 	.word	0x200005b8
 800135c:	20000004 	.word	0x20000004
 8001360:	20000008 	.word	0x20000008
 8001364:	2000000c 	.word	0x2000000c
 8001368:	3fe00000 	.word	0x3fe00000
 800136c:	200005c0 	.word	0x200005c0

08001370 <getEncoderAngle>:

float getEncoderAngle(){
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
	return (((int)(36000*((TIM3->CCR2-kSteeringEncoderMin)/(kSteeringEncoderRange)))+18000)%36000)/100;
 8001374:	4b19      	ldr	r3, [pc, #100]	; (80013dc <getEncoderAngle+0x6c>)
 8001376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001378:	ee07 3a90 	vmov	s15, r3
 800137c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001380:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80013e0 <getEncoderAngle+0x70>
 8001384:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001388:	eddf 6a16 	vldr	s13, [pc, #88]	; 80013e4 <getEncoderAngle+0x74>
 800138c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001390:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80013e8 <getEncoderAngle+0x78>
 8001394:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001398:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800139c:	ee17 3a90 	vmov	r3, s15
 80013a0:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 80013a4:	3350      	adds	r3, #80	; 0x50
 80013a6:	4a11      	ldr	r2, [pc, #68]	; (80013ec <getEncoderAngle+0x7c>)
 80013a8:	fb82 1203 	smull	r1, r2, r2, r3
 80013ac:	1391      	asrs	r1, r2, #14
 80013ae:	17da      	asrs	r2, r3, #31
 80013b0:	1a8a      	subs	r2, r1, r2
 80013b2:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 80013b6:	fb01 f202 	mul.w	r2, r1, r2
 80013ba:	1a9a      	subs	r2, r3, r2
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <getEncoderAngle+0x80>)
 80013be:	fb83 1302 	smull	r1, r3, r3, r2
 80013c2:	1159      	asrs	r1, r3, #5
 80013c4:	17d3      	asrs	r3, r2, #31
 80013c6:	1acb      	subs	r3, r1, r3
 80013c8:	ee07 3a90 	vmov	s15, r3
 80013cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80013d0:	eeb0 0a67 	vmov.f32	s0, s15
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	40000400 	.word	0x40000400
 80013e0:	465ac000 	.word	0x465ac000
 80013e4:	477a0000 	.word	0x477a0000
 80013e8:	470ca000 	.word	0x470ca000
 80013ec:	7482296b 	.word	0x7482296b
 80013f0:	51eb851f 	.word	0x51eb851f

080013f4 <rawSteeringToAngle>:

float rawSteeringToAngle(float steerInput){
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	ed87 0a01 	vstr	s0, [r7, #4]
	return (steerInput*EncoderRange)+minEncoderAngle;
 80013fe:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8001428 <rawSteeringToAngle+0x34>
 8001402:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001406:	edd7 7a01 	vldr	s15, [r7, #4]
 800140a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800140e:	eddf 7a07 	vldr	s15, [pc, #28]	; 800142c <rawSteeringToAngle+0x38>
 8001412:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001416:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800141a:	eeb0 0a67 	vmov.f32	s0, s15
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	000000b4 	.word	0x000000b4
 800142c:	000000a7 	.word	0x000000a7

08001430 <setSteeringMotor>:

/**
 * Sets the brake motors power
 * @power value from -1.0 to 1.0
 */
void setSteeringMotor(float power){//+-1.0
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	ed87 0a01 	vstr	s0, [r7, #4]
		short int out = (((power)+1)/2)*180;//Converts the range 0 to 1, to 90 to 180 //Dont ask why its that range it just works
 800143a:	edd7 7a01 	vldr	s15, [r7, #4]
 800143e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001442:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001446:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800144a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800144e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001474 <setSteeringMotor+0x44>
 8001452:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001456:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800145a:	ee17 3a90 	vmov	r3, s15
 800145e:	81fb      	strh	r3, [r7, #14]
		TIM10->CCR1 = out;
 8001460:	4a05      	ldr	r2, [pc, #20]	; (8001478 <setSteeringMotor+0x48>)
 8001462:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001466:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001468:	bf00      	nop
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	43340000 	.word	0x43340000
 8001478:	40014400 	.word	0x40014400

0800147c <setDrivingMotor>:

/**
 * Sets the driving motors power
 * @power value from 0 to 1.0
 */
void setDrivingMotor(float power){//0 to 1.0
 800147c:	b5b0      	push	{r4, r5, r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	ed87 0a01 	vstr	s0, [r7, #4]
	short int out = ((power-0.25)/0.75)*kDrivingMotorMax;//Converts the range 0.25 to 1, to 0v to 3.3v which is 0 to 4096(kDrivingMotorMax)
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff f87e 	bl	8000588 <__aeabi_f2d>
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	4b31      	ldr	r3, [pc, #196]	; (8001558 <setDrivingMotor+0xdc>)
 8001492:	f7fe ff19 	bl	80002c8 <__aeabi_dsub>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4610      	mov	r0, r2
 800149c:	4619      	mov	r1, r3
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	4b2e      	ldr	r3, [pc, #184]	; (800155c <setDrivingMotor+0xe0>)
 80014a4:	f7ff f9f2 	bl	800088c <__aeabi_ddiv>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4614      	mov	r4, r2
 80014ae:	461d      	mov	r5, r3
 80014b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff f855 	bl	8000564 <__aeabi_i2d>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4620      	mov	r0, r4
 80014c0:	4629      	mov	r1, r5
 80014c2:	f7ff f8b9 	bl	8000638 <__aeabi_dmul>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f7ff fb63 	bl	8000b98 <__aeabi_d2iz>
 80014d2:	4603      	mov	r3, r0
 80014d4:	81fb      	strh	r3, [r7, #14]
	o = out;
 80014d6:	4a22      	ldr	r2, [pc, #136]	; (8001560 <setDrivingMotor+0xe4>)
 80014d8:	89fb      	ldrh	r3, [r7, #14]
 80014da:	8013      	strh	r3, [r2, #0]
	if(power<=.25){
 80014dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80014e0:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80014e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ec:	d829      	bhi.n	8001542 <setDrivingMotor+0xc6>
		setBrakes((float)((.25-power)/0.25));//Brakes on
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff f84a 	bl	8000588 <__aeabi_f2d>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	f04f 0000 	mov.w	r0, #0
 80014fc:	4916      	ldr	r1, [pc, #88]	; (8001558 <setDrivingMotor+0xdc>)
 80014fe:	f7fe fee3 	bl	80002c8 <__aeabi_dsub>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4610      	mov	r0, r2
 8001508:	4619      	mov	r1, r3
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	4b12      	ldr	r3, [pc, #72]	; (8001558 <setDrivingMotor+0xdc>)
 8001510:	f7ff f9bc 	bl	800088c <__aeabi_ddiv>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4610      	mov	r0, r2
 800151a:	4619      	mov	r1, r3
 800151c:	f7ff fb64 	bl	8000be8 <__aeabi_d2f>
 8001520:	4603      	mov	r3, r0
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff f830 	bl	8000588 <__aeabi_f2d>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	ec43 2b10 	vmov	d0, r2, r3
 8001530:	f000 f830 	bl	8001594 <setBrakes>
		 HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1,
 8001534:	2300      	movs	r3, #0
 8001536:	2200      	movs	r2, #0
 8001538:	2100      	movs	r1, #0
 800153a:	480a      	ldr	r0, [pc, #40]	; (8001564 <setDrivingMotor+0xe8>)
 800153c:	f002 faff 	bl	8003b3e <HAL_DAC_SetValue>
	else{
		 HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1,
		 DAC_ALIGN_12B_R, out);//Motor on
//		setBrakes(0.0);//Brakes off
	}
}
 8001540:	e006      	b.n	8001550 <setDrivingMotor+0xd4>
		 HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1,
 8001542:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001546:	2200      	movs	r2, #0
 8001548:	2100      	movs	r1, #0
 800154a:	4806      	ldr	r0, [pc, #24]	; (8001564 <setDrivingMotor+0xe8>)
 800154c:	f002 faf7 	bl	8003b3e <HAL_DAC_SetValue>
}
 8001550:	bf00      	nop
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bdb0      	pop	{r4, r5, r7, pc}
 8001558:	3fd00000 	.word	0x3fd00000
 800155c:	3fe80000 	.word	0x3fe80000
 8001560:	200005d4 	.word	0x200005d4
 8001564:	20000260 	.word	0x20000260

08001568 <setMotor>:


void setMotor(float power){//0 to 1.0
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	ed87 0a01 	vstr	s0, [r7, #4]
		 HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1,
 8001572:	edd7 7a01 	vldr	s15, [r7, #4]
 8001576:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800157a:	ee17 3a90 	vmov	r3, s15
 800157e:	2200      	movs	r2, #0
 8001580:	2100      	movs	r1, #0
 8001582:	4803      	ldr	r0, [pc, #12]	; (8001590 <setMotor+0x28>)
 8001584:	f002 fadb 	bl	8003b3e <HAL_DAC_SetValue>
		 DAC_ALIGN_12B_R, power);
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000260 	.word	0x20000260

08001594 <setBrakes>:

float const maxBrake = 100000;
float const minBrake = 10000;
float brakeRange = (maxBrake-minBrake);
void setBrakes(float power){//range from 1.0 to 0.0
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	ed87 0a01 	vstr	s0, [r7, #4]
	float goToPos = power;//for negative logic if needed
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	60fb      	str	r3, [r7, #12]
//	}
//	else{//STOP - Error
//		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
//		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
//	}
	if(power>.75){
 80015a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80015a6:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 80015aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b2:	dd0a      	ble.n	80015ca <setBrakes+0x36>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80015b4:	2201      	movs	r2, #1
 80015b6:	2102      	movs	r1, #2
 80015b8:	4815      	ldr	r0, [pc, #84]	; (8001610 <setBrakes+0x7c>)
 80015ba:	f002 fcc9 	bl	8003f50 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	2104      	movs	r1, #4
 80015c2:	4813      	ldr	r0, [pc, #76]	; (8001610 <setBrakes+0x7c>)
 80015c4:	f002 fcc4 	bl	8003f50 <HAL_GPIO_WritePin>
	else{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);

	}
}
 80015c8:	e01d      	b.n	8001606 <setBrakes+0x72>
	else if(power<.25){
 80015ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80015ce:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80015d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015da:	d50a      	bpl.n	80015f2 <setBrakes+0x5e>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80015dc:	2200      	movs	r2, #0
 80015de:	2102      	movs	r1, #2
 80015e0:	480b      	ldr	r0, [pc, #44]	; (8001610 <setBrakes+0x7c>)
 80015e2:	f002 fcb5 	bl	8003f50 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80015e6:	2201      	movs	r2, #1
 80015e8:	2104      	movs	r1, #4
 80015ea:	4809      	ldr	r0, [pc, #36]	; (8001610 <setBrakes+0x7c>)
 80015ec:	f002 fcb0 	bl	8003f50 <HAL_GPIO_WritePin>
}
 80015f0:	e009      	b.n	8001606 <setBrakes+0x72>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2102      	movs	r1, #2
 80015f6:	4806      	ldr	r0, [pc, #24]	; (8001610 <setBrakes+0x7c>)
 80015f8:	f002 fcaa 	bl	8003f50 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2104      	movs	r1, #4
 8001600:	4803      	ldr	r0, [pc, #12]	; (8001610 <setBrakes+0x7c>)
 8001602:	f002 fca5 	bl	8003f50 <HAL_GPIO_WritePin>
}
 8001606:	bf00      	nop
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40020800 	.word	0x40020800

08001614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	ed2d 8b02 	vpush	{d8}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	hdac.State = HAL_DAC_STATE_RESET;
 800161e:	4b90      	ldr	r3, [pc, #576]	; (8001860 <main+0x24c>)
 8001620:	2200      	movs	r2, #0
 8001622:	711a      	strb	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001624:	f001 fd20 	bl	8003068 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint16_t pwmBottomState = 5000;
 8001628:	f241 3388 	movw	r3, #5000	; 0x1388
 800162c:	80fb      	strh	r3, [r7, #6]
  uint16_t pwmLowState = 25000;
 800162e:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8001632:	80bb      	strh	r3, [r7, #4]
  uint16_t pwmHighState = 45000;
 8001634:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 8001638:	807b      	strh	r3, [r7, #2]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800163a:	f000 f941 	bl	80018c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800163e:	f000 ff8f 	bl	8002560 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001642:	f000 f9b3 	bl	80019ac <MX_ADC1_Init>
  MX_TIM1_Init();
 8001646:	f000 fabf 	bl	8001bc8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800164a:	f000 fb41 	bl	8001cd0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800164e:	f000 fbbf 	bl	8001dd0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001652:	f000 fc5b 	bl	8001f0c <MX_TIM4_Init>
  MX_TIM5_Init();
 8001656:	f000 fcf7 	bl	8002048 <MX_TIM5_Init>
  MX_TIM8_Init();
 800165a:	f000 fd93 	bl	8002184 <MX_TIM8_Init>
  MX_TIM10_Init();
 800165e:	f000 fe31 	bl	80022c4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001662:	f000 fe7d 	bl	8002360 <MX_TIM11_Init>
  MX_TIM12_Init();
 8001666:	f000 fec9 	bl	80023fc <MX_TIM12_Init>
  MX_RTC_Init();
 800166a:	f000 fa49 	bl	8001b00 <MX_RTC_Init>
  MX_I2C2_Init();
 800166e:	f000 fa19 	bl	8001aa4 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8001672:	f000 ff4b 	bl	800250c <MX_USART2_UART_Init>
  MX_DAC_Init();
 8001676:	f000 f9eb 	bl	8001a50 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  //Starts HAL timing for input capture
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 800167a:	2100      	movs	r1, #0
 800167c:	4879      	ldr	r0, [pc, #484]	; (8001864 <main+0x250>)
 800167e:	f004 fc95 	bl	8005fac <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 8001682:	2104      	movs	r1, #4
 8001684:	4877      	ldr	r0, [pc, #476]	; (8001864 <main+0x250>)
 8001686:	f004 fbb5 	bl	8005df4 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800168a:	2100      	movs	r1, #0
 800168c:	4876      	ldr	r0, [pc, #472]	; (8001868 <main+0x254>)
 800168e:	f004 fc8d 	bl	8005fac <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8001692:	2104      	movs	r1, #4
 8001694:	4874      	ldr	r0, [pc, #464]	; (8001868 <main+0x254>)
 8001696:	f004 fbad 	bl	8005df4 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800169a:	2100      	movs	r1, #0
 800169c:	4873      	ldr	r0, [pc, #460]	; (800186c <main+0x258>)
 800169e:	f004 fc85 	bl	8005fac <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 80016a2:	2104      	movs	r1, #4
 80016a4:	4871      	ldr	r0, [pc, #452]	; (800186c <main+0x258>)
 80016a6:	f004 fba5 	bl	8005df4 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80016aa:	2100      	movs	r1, #0
 80016ac:	4870      	ldr	r0, [pc, #448]	; (8001870 <main+0x25c>)
 80016ae:	f004 fc7d 	bl	8005fac <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2);
 80016b2:	2104      	movs	r1, #4
 80016b4:	486e      	ldr	r0, [pc, #440]	; (8001870 <main+0x25c>)
 80016b6:	f004 fb9d 	bl	8005df4 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 80016ba:	2100      	movs	r1, #0
 80016bc:	486d      	ldr	r0, [pc, #436]	; (8001874 <main+0x260>)
 80016be:	f004 fc75 	bl	8005fac <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 80016c2:	2104      	movs	r1, #4
 80016c4:	486b      	ldr	r0, [pc, #428]	; (8001874 <main+0x260>)
 80016c6:	f004 fb95 	bl	8005df4 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_1);
 80016ca:	2100      	movs	r1, #0
 80016cc:	486a      	ldr	r0, [pc, #424]	; (8001878 <main+0x264>)
 80016ce:	f004 fc6d 	bl	8005fac <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_2);
 80016d2:	2104      	movs	r1, #4
 80016d4:	4868      	ldr	r0, [pc, #416]	; (8001878 <main+0x264>)
 80016d6:	f004 fb8d 	bl	8005df4 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_1);
 80016da:	2100      	movs	r1, #0
 80016dc:	4866      	ldr	r0, [pc, #408]	; (8001878 <main+0x264>)
 80016de:	f004 fc65 	bl	8005fac <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_2);
 80016e2:	2104      	movs	r1, #4
 80016e4:	4864      	ldr	r0, [pc, #400]	; (8001878 <main+0x264>)
 80016e6:	f004 fb85 	bl	8005df4 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim12, TIM_CHANNEL_1);
 80016ea:	2100      	movs	r1, #0
 80016ec:	4863      	ldr	r0, [pc, #396]	; (800187c <main+0x268>)
 80016ee:	f004 fc5d 	bl	8005fac <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim12, TIM_CHANNEL_2);
 80016f2:	2104      	movs	r1, #4
 80016f4:	4861      	ldr	r0, [pc, #388]	; (800187c <main+0x268>)
 80016f6:	f004 fb7d 	bl	8005df4 <HAL_TIM_IC_Start>


  HAL_ADC_Start_IT(&hadc1);
 80016fa:	4861      	ldr	r0, [pc, #388]	; (8001880 <main+0x26c>)
 80016fc:	f001 fd8e 	bl	800321c <HAL_ADC_Start_IT>

  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001700:	2100      	movs	r1, #0
 8001702:	4860      	ldr	r0, [pc, #384]	; (8001884 <main+0x270>)
 8001704:	f004 fa5e 	bl	8005bc4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8001708:	2100      	movs	r1, #0
 800170a:	485f      	ldr	r0, [pc, #380]	; (8001888 <main+0x274>)
 800170c:	f004 fa5a 	bl	8005bc4 <HAL_TIM_PWM_Start>
  TIM10->CCR1 = 135; //Sets the PWM output of tim1 channel 1 to 450
 8001710:	4b5e      	ldr	r3, [pc, #376]	; (800188c <main+0x278>)
 8001712:	2287      	movs	r2, #135	; 0x87
 8001714:	635a      	str	r2, [r3, #52]	; 0x34
  TIM11->CCR1 = 0; //Sets the PWM output of tim1 channel 1 to 450
 8001716:	4b5e      	ldr	r3, [pc, #376]	; (8001890 <main+0x27c>)
 8001718:	2200      	movs	r2, #0
 800171a:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800171c:	2100      	movs	r1, #0
 800171e:	4850      	ldr	r0, [pc, #320]	; (8001860 <main+0x24c>)
 8001720:	f002 f9bb 	bl	8003a9a <HAL_DAC_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //E-STOP
	  if(TIM4->CCR2>pwmLowState){//Checking if E-Stop is switched to the high state, forces user on RC controller to switch the e-stop switch to start it
 8001724:	4b5b      	ldr	r3, [pc, #364]	; (8001894 <main+0x280>)
 8001726:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001728:	88bb      	ldrh	r3, [r7, #4]
 800172a:	429a      	cmp	r2, r3
 800172c:	f240 8082 	bls.w	8001834 <main+0x220>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001730:	2200      	movs	r2, #0
 8001732:	2101      	movs	r1, #1
 8001734:	4858      	ldr	r0, [pc, #352]	; (8001898 <main+0x284>)
 8001736:	f002 fc0b 	bl	8003f50 <HAL_GPIO_WritePin>
		  //Inputs
		  steeringRequest = TIM2->CCR2;
 800173a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800173e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001740:	4a56      	ldr	r2, [pc, #344]	; (800189c <main+0x288>)
 8001742:	6013      	str	r3, [r2, #0]
		  drivingRequest = TIM5->CCR2;
 8001744:	4b56      	ldr	r3, [pc, #344]	; (80018a0 <main+0x28c>)
 8001746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001748:	4a56      	ldr	r2, [pc, #344]	; (80018a4 <main+0x290>)
 800174a:	6013      	str	r3, [r2, #0]
		  a = getEncoderAngle();
 800174c:	f7ff fe10 	bl	8001370 <getEncoderAngle>
 8001750:	eef0 7a40 	vmov.f32	s15, s0
 8001754:	4b54      	ldr	r3, [pc, #336]	; (80018a8 <main+0x294>)
 8001756:	edc3 7a00 	vstr	s15, [r3]
		  b = steeringInput(steeringRequest);
 800175a:	4b50      	ldr	r3, [pc, #320]	; (800189c <main+0x288>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fc4a 	bl	8000ff8 <steeringInput>
 8001764:	eef0 7a40 	vmov.f32	s15, s0
 8001768:	4b50      	ldr	r3, [pc, #320]	; (80018ac <main+0x298>)
 800176a:	edc3 7a00 	vstr	s15, [r3]
		  //State management
		  if(TIM1->CCR2<pwmBottomState){//Switch to RC mode, middle switch state
 800176e:	4b50      	ldr	r3, [pc, #320]	; (80018b0 <main+0x29c>)
 8001770:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001772:	88fb      	ldrh	r3, [r7, #6]
 8001774:	429a      	cmp	r2, r3
 8001776:	d22d      	bcs.n	80017d4 <main+0x1c0>
			  setSteeringMotor(getPIDPower(getEncoderAngle(), rawSteeringToAngle(steeringInput(steeringRequest)), (float)kHalDelay));
 8001778:	f7ff fdfa 	bl	8001370 <getEncoderAngle>
 800177c:	eeb0 8a40 	vmov.f32	s16, s0
 8001780:	4b46      	ldr	r3, [pc, #280]	; (800189c <main+0x288>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fc37 	bl	8000ff8 <steeringInput>
 800178a:	eef0 7a40 	vmov.f32	s15, s0
 800178e:	eeb0 0a67 	vmov.f32	s0, s15
 8001792:	f7ff fe2f 	bl	80013f4 <rawSteeringToAngle>
 8001796:	eeb0 7a40 	vmov.f32	s14, s0
 800179a:	4b46      	ldr	r3, [pc, #280]	; (80018b4 <main+0x2a0>)
 800179c:	edd3 7a00 	vldr	s15, [r3]
 80017a0:	eeb0 1a67 	vmov.f32	s2, s15
 80017a4:	eef0 0a47 	vmov.f32	s1, s14
 80017a8:	eeb0 0a48 	vmov.f32	s0, s16
 80017ac:	f7ff fcfc 	bl	80011a8 <getPIDPower>
 80017b0:	eef0 7a40 	vmov.f32	s15, s0
 80017b4:	eeb0 0a67 	vmov.f32	s0, s15
 80017b8:	f7ff fe3a 	bl	8001430 <setSteeringMotor>
			  setDrivingMotor(drivingInput(drivingRequest));
 80017bc:	4b39      	ldr	r3, [pc, #228]	; (80018a4 <main+0x290>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fc85 	bl	80010d0 <drivingInput>
 80017c6:	eef0 7a40 	vmov.f32	s15, s0
 80017ca:	eeb0 0a67 	vmov.f32	s0, s15
 80017ce:	f7ff fe55 	bl	800147c <setDrivingMotor>
 80017d2:	e02b      	b.n	800182c <main+0x218>
//			  else{
//				  cycle++;
//			  }

		  }
		  else if(TIM1->CCR2>pwmHighState){//Switch to auto mode, high switch state
 80017d4:	4b36      	ldr	r3, [pc, #216]	; (80018b0 <main+0x29c>)
 80017d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017d8:	887b      	ldrh	r3, [r7, #2]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d916      	bls.n	800180c <main+0x1f8>
//			  Manual RC Control
			  setSteeringMotor(steeringInput(steeringRequest));
 80017de:	4b2f      	ldr	r3, [pc, #188]	; (800189c <main+0x288>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fc08 	bl	8000ff8 <steeringInput>
 80017e8:	eef0 7a40 	vmov.f32	s15, s0
 80017ec:	eeb0 0a67 	vmov.f32	s0, s15
 80017f0:	f7ff fe1e 	bl	8001430 <setSteeringMotor>
			  setDrivingMotor(drivingInput(drivingRequest));
 80017f4:	4b2b      	ldr	r3, [pc, #172]	; (80018a4 <main+0x290>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fc69 	bl	80010d0 <drivingInput>
 80017fe:	eef0 7a40 	vmov.f32	s15, s0
 8001802:	eeb0 0a67 	vmov.f32	s0, s15
 8001806:	f7ff fe39 	bl	800147c <setDrivingMotor>
 800180a:	e00f      	b.n	800182c <main+0x218>
			  //TODO: Auto Code
//			  setSteeringMotor(0.5);
		  }
		  else{
			  //off state, low switch state
			  setSteeringMotor(kOffset);
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	4b29      	ldr	r3, [pc, #164]	; (80018b8 <main+0x2a4>)
 8001812:	4610      	mov	r0, r2
 8001814:	4619      	mov	r1, r3
 8001816:	f7ff f9e7 	bl	8000be8 <__aeabi_d2f>
 800181a:	4603      	mov	r3, r0
 800181c:	ee00 3a10 	vmov	s0, r3
 8001820:	f7ff fe06 	bl	8001430 <setSteeringMotor>
			  setMotor(0.0);
 8001824:	ed9f 0a25 	vldr	s0, [pc, #148]	; 80018bc <main+0x2a8>
 8001828:	f7ff fe9e 	bl	8001568 <setMotor>
//			  setBrakes(1.0);
//			  TIM10->CCR2 = pwmOutMax/2;//Sets steering motor power to 0
		  }

		  HAL_Delay(1);//For faster response decrease delay
 800182c:	2001      	movs	r0, #1
 800182e:	f001 fc8d 	bl	800314c <HAL_Delay>
 8001832:	e777      	b.n	8001724 <main+0x110>
	  }
	  else{
		  setMotor(0.0);
 8001834:	ed9f 0a21 	vldr	s0, [pc, #132]	; 80018bc <main+0x2a8>
 8001838:	f7ff fe96 	bl	8001568 <setMotor>
//		  setBrakes(1.0);
		  setSteeringMotor(kOffset);
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <main+0x2a4>)
 8001842:	4610      	mov	r0, r2
 8001844:	4619      	mov	r1, r3
 8001846:	f7ff f9cf 	bl	8000be8 <__aeabi_d2f>
 800184a:	4603      	mov	r3, r0
 800184c:	ee00 3a10 	vmov	s0, r3
 8001850:	f7ff fdee 	bl	8001430 <setSteeringMotor>

		  //TODO: Debug Relay
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001854:	2201      	movs	r2, #1
 8001856:	2101      	movs	r1, #1
 8001858:	480f      	ldr	r0, [pc, #60]	; (8001898 <main+0x284>)
 800185a:	f002 fb79 	bl	8003f50 <HAL_GPIO_WritePin>
	  if(TIM4->CCR2>pwmLowState){//Checking if E-Stop is switched to the high state, forces user on RC controller to switch the e-stop switch to start it
 800185e:	e761      	b.n	8001724 <main+0x110>
 8001860:	20000260 	.word	0x20000260
 8001864:	200002e8 	.word	0x200002e8
 8001868:	20000330 	.word	0x20000330
 800186c:	20000378 	.word	0x20000378
 8001870:	200003c0 	.word	0x200003c0
 8001874:	20000408 	.word	0x20000408
 8001878:	20000450 	.word	0x20000450
 800187c:	20000528 	.word	0x20000528
 8001880:	20000218 	.word	0x20000218
 8001884:	20000498 	.word	0x20000498
 8001888:	200004e0 	.word	0x200004e0
 800188c:	40014400 	.word	0x40014400
 8001890:	40014800 	.word	0x40014800
 8001894:	40000800 	.word	0x40000800
 8001898:	40020800 	.word	0x40020800
 800189c:	20000024 	.word	0x20000024
 80018a0:	40000c00 	.word	0x40000c00
 80018a4:	200005e0 	.word	0x200005e0
 80018a8:	200005d8 	.word	0x200005d8
 80018ac:	200005dc 	.word	0x200005dc
 80018b0:	40010000 	.word	0x40010000
 80018b4:	20000000 	.word	0x20000000
 80018b8:	3fe00000 	.word	0x3fe00000
 80018bc:	00000000 	.word	0x00000000

080018c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b094      	sub	sp, #80	; 0x50
 80018c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018c6:	f107 031c 	add.w	r3, r7, #28
 80018ca:	2234      	movs	r2, #52	; 0x34
 80018cc:	2100      	movs	r1, #0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f006 feb6 	bl	8008640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018d4:	f107 0308 	add.w	r3, r7, #8
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e4:	2300      	movs	r3, #0
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	4b2e      	ldr	r3, [pc, #184]	; (80019a4 <SystemClock_Config+0xe4>)
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	4a2d      	ldr	r2, [pc, #180]	; (80019a4 <SystemClock_Config+0xe4>)
 80018ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f2:	6413      	str	r3, [r2, #64]	; 0x40
 80018f4:	4b2b      	ldr	r3, [pc, #172]	; (80019a4 <SystemClock_Config+0xe4>)
 80018f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001900:	2300      	movs	r3, #0
 8001902:	603b      	str	r3, [r7, #0]
 8001904:	4b28      	ldr	r3, [pc, #160]	; (80019a8 <SystemClock_Config+0xe8>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a27      	ldr	r2, [pc, #156]	; (80019a8 <SystemClock_Config+0xe8>)
 800190a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800190e:	6013      	str	r3, [r2, #0]
 8001910:	4b25      	ldr	r3, [pc, #148]	; (80019a8 <SystemClock_Config+0xe8>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001918:	603b      	str	r3, [r7, #0]
 800191a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800191c:	2309      	movs	r3, #9
 800191e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001920:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001924:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001926:	2301      	movs	r3, #1
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800192a:	2301      	movs	r3, #1
 800192c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800192e:	2302      	movs	r3, #2
 8001930:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001932:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001936:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001938:	2304      	movs	r3, #4
 800193a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800193c:	23b4      	movs	r3, #180	; 0xb4
 800193e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001940:	2302      	movs	r3, #2
 8001942:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001944:	2302      	movs	r3, #2
 8001946:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001948:	2302      	movs	r3, #2
 800194a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800194c:	f107 031c 	add.w	r3, r7, #28
 8001950:	4618      	mov	r0, r3
 8001952:	f003 fb1f 	bl	8004f94 <HAL_RCC_OscConfig>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800195c:	f000 fe7e 	bl	800265c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001960:	f002 fc54 	bl	800420c <HAL_PWREx_EnableOverDrive>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800196a:	f000 fe77 	bl	800265c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800196e:	230f      	movs	r3, #15
 8001970:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001972:	2302      	movs	r3, #2
 8001974:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800197a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800197e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001980:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001984:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001986:	f107 0308 	add.w	r3, r7, #8
 800198a:	2105      	movs	r1, #5
 800198c:	4618      	mov	r0, r3
 800198e:	f002 fc8d 	bl	80042ac <HAL_RCC_ClockConfig>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8001998:	f000 fe60 	bl	800265c <Error_Handler>
  }
}
 800199c:	bf00      	nop
 800199e:	3750      	adds	r7, #80	; 0x50
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40007000 	.word	0x40007000

080019ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019b2:	463b      	mov	r3, r7
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019be:	4b21      	ldr	r3, [pc, #132]	; (8001a44 <MX_ADC1_Init+0x98>)
 80019c0:	4a21      	ldr	r2, [pc, #132]	; (8001a48 <MX_ADC1_Init+0x9c>)
 80019c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80019c4:	4b1f      	ldr	r3, [pc, #124]	; (8001a44 <MX_ADC1_Init+0x98>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019ca:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <MX_ADC1_Init+0x98>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80019d0:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <MX_ADC1_Init+0x98>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019d6:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <MX_ADC1_Init+0x98>)
 80019d8:	2200      	movs	r2, #0
 80019da:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019dc:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <MX_ADC1_Init+0x98>)
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019e4:	4b17      	ldr	r3, [pc, #92]	; (8001a44 <MX_ADC1_Init+0x98>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019ea:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <MX_ADC1_Init+0x98>)
 80019ec:	4a17      	ldr	r2, [pc, #92]	; (8001a4c <MX_ADC1_Init+0xa0>)
 80019ee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019f0:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <MX_ADC1_Init+0x98>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80019f6:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <MX_ADC1_Init+0x98>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <MX_ADC1_Init+0x98>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <MX_ADC1_Init+0x98>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a0a:	480e      	ldr	r0, [pc, #56]	; (8001a44 <MX_ADC1_Init+0x98>)
 8001a0c:	f001 fbc2 	bl	8003194 <HAL_ADC_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001a16:	f000 fe21 	bl	800265c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001a1a:	2307      	movs	r3, #7
 8001a1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a26:	463b      	mov	r3, r7
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4806      	ldr	r0, [pc, #24]	; (8001a44 <MX_ADC1_Init+0x98>)
 8001a2c:	f001 fcd4 	bl	80033d8 <HAL_ADC_ConfigChannel>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001a36:	f000 fe11 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000218 	.word	0x20000218
 8001a48:	40012000 	.word	0x40012000
 8001a4c:	0f000001 	.word	0x0f000001

08001a50 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001a56:	463b      	mov	r3, r7
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001a5e:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <MX_DAC_Init+0x4c>)
 8001a60:	4a0f      	ldr	r2, [pc, #60]	; (8001aa0 <MX_DAC_Init+0x50>)
 8001a62:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001a64:	480d      	ldr	r0, [pc, #52]	; (8001a9c <MX_DAC_Init+0x4c>)
 8001a66:	f001 fff6 	bl	8003a56 <HAL_DAC_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001a70:	f000 fdf4 	bl	800265c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001a7c:	463b      	mov	r3, r7
 8001a7e:	2200      	movs	r2, #0
 8001a80:	4619      	mov	r1, r3
 8001a82:	4806      	ldr	r0, [pc, #24]	; (8001a9c <MX_DAC_Init+0x4c>)
 8001a84:	f002 f880 	bl	8003b88 <HAL_DAC_ConfigChannel>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001a8e:	f000 fde5 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000260 	.word	0x20000260
 8001aa0:	40007400 	.word	0x40007400

08001aa4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001aa8:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <MX_I2C2_Init+0x50>)
 8001aaa:	4a13      	ldr	r2, [pc, #76]	; (8001af8 <MX_I2C2_Init+0x54>)
 8001aac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001aae:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <MX_I2C2_Init+0x50>)
 8001ab0:	4a12      	ldr	r2, [pc, #72]	; (8001afc <MX_I2C2_Init+0x58>)
 8001ab2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ab4:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <MX_I2C2_Init+0x50>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001aba:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <MX_I2C2_Init+0x50>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <MX_I2C2_Init+0x50>)
 8001ac2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ac6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ac8:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <MX_I2C2_Init+0x50>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <MX_I2C2_Init+0x50>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ad4:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <MX_I2C2_Init+0x50>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ada:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <MX_I2C2_Init+0x50>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ae0:	4804      	ldr	r0, [pc, #16]	; (8001af4 <MX_I2C2_Init+0x50>)
 8001ae2:	f002 fa4f 	bl	8003f84 <HAL_I2C_Init>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001aec:	f000 fdb6 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000274 	.word	0x20000274
 8001af8:	40005800 	.word	0x40005800
 8001afc:	000186a0 	.word	0x000186a0

08001b00 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001b06:	1d3b      	adds	r3, r7, #4
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001b14:	2300      	movs	r3, #0
 8001b16:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b18:	4b29      	ldr	r3, [pc, #164]	; (8001bc0 <MX_RTC_Init+0xc0>)
 8001b1a:	4a2a      	ldr	r2, [pc, #168]	; (8001bc4 <MX_RTC_Init+0xc4>)
 8001b1c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b1e:	4b28      	ldr	r3, [pc, #160]	; (8001bc0 <MX_RTC_Init+0xc0>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001b24:	4b26      	ldr	r3, [pc, #152]	; (8001bc0 <MX_RTC_Init+0xc0>)
 8001b26:	227f      	movs	r2, #127	; 0x7f
 8001b28:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001b2a:	4b25      	ldr	r3, [pc, #148]	; (8001bc0 <MX_RTC_Init+0xc0>)
 8001b2c:	22ff      	movs	r2, #255	; 0xff
 8001b2e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b30:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <MX_RTC_Init+0xc0>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b36:	4b22      	ldr	r3, [pc, #136]	; (8001bc0 <MX_RTC_Init+0xc0>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b3c:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <MX_RTC_Init+0xc0>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b42:	481f      	ldr	r0, [pc, #124]	; (8001bc0 <MX_RTC_Init+0xc0>)
 8001b44:	f003 fcc4 	bl	80054d0 <HAL_RTC_Init>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001b4e:	f000 fd85 	bl	800265c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	2201      	movs	r2, #1
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4814      	ldr	r0, [pc, #80]	; (8001bc0 <MX_RTC_Init+0xc0>)
 8001b6e:	f003 fd25 	bl	80055bc <HAL_RTC_SetTime>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001b78:	f000 fd70 	bl	800265c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001b80:	2301      	movs	r3, #1
 8001b82:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001b84:	2301      	movs	r3, #1
 8001b86:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001b8c:	463b      	mov	r3, r7
 8001b8e:	2201      	movs	r2, #1
 8001b90:	4619      	mov	r1, r3
 8001b92:	480b      	ldr	r0, [pc, #44]	; (8001bc0 <MX_RTC_Init+0xc0>)
 8001b94:	f003 fdac 	bl	80056f0 <HAL_RTC_SetDate>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001b9e:	f000 fd5d 	bl	800265c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4806      	ldr	r0, [pc, #24]	; (8001bc0 <MX_RTC_Init+0xc0>)
 8001ba8:	f003 fec7 	bl	800593a <HAL_RTCEx_SetWakeUpTimer>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 8001bb2:	f000 fd53 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001bb6:	bf00      	nop
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	200002c8 	.word	0x200002c8
 8001bc4:	40002800 	.word	0x40002800

08001bc8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08c      	sub	sp, #48	; 0x30
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001bce:	f107 031c 	add.w	r3, r7, #28
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
 8001bda:	60da      	str	r2, [r3, #12]
 8001bdc:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001bde:	f107 030c 	add.w	r3, r7, #12
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bf4:	4b34      	ldr	r3, [pc, #208]	; (8001cc8 <MX_TIM1_Init+0x100>)
 8001bf6:	4a35      	ldr	r2, [pc, #212]	; (8001ccc <MX_TIM1_Init+0x104>)
 8001bf8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001bfa:	4b33      	ldr	r3, [pc, #204]	; (8001cc8 <MX_TIM1_Init+0x100>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c00:	4b31      	ldr	r3, [pc, #196]	; (8001cc8 <MX_TIM1_Init+0x100>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c06:	4b30      	ldr	r3, [pc, #192]	; (8001cc8 <MX_TIM1_Init+0x100>)
 8001c08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c0c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c0e:	4b2e      	ldr	r3, [pc, #184]	; (8001cc8 <MX_TIM1_Init+0x100>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c14:	4b2c      	ldr	r3, [pc, #176]	; (8001cc8 <MX_TIM1_Init+0x100>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c1a:	4b2b      	ldr	r3, [pc, #172]	; (8001cc8 <MX_TIM1_Init+0x100>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001c20:	4829      	ldr	r0, [pc, #164]	; (8001cc8 <MX_TIM1_Init+0x100>)
 8001c22:	f004 f897 	bl	8005d54 <HAL_TIM_IC_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001c2c:	f000 fd16 	bl	800265c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001c30:	2304      	movs	r3, #4
 8001c32:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001c34:	2350      	movs	r3, #80	; 0x50
 8001c36:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001c44:	f107 031c 	add.w	r3, r7, #28
 8001c48:	4619      	mov	r1, r3
 8001c4a:	481f      	ldr	r0, [pc, #124]	; (8001cc8 <MX_TIM1_Init+0x100>)
 8001c4c:	f004 fe03 	bl	8006856 <HAL_TIM_SlaveConfigSynchro>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001c56:	f000 fd01 	bl	800265c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c6a:	f107 030c 	add.w	r3, r7, #12
 8001c6e:	2200      	movs	r2, #0
 8001c70:	4619      	mov	r1, r3
 8001c72:	4815      	ldr	r0, [pc, #84]	; (8001cc8 <MX_TIM1_Init+0x100>)
 8001c74:	f004 fbca 	bl	800640c <HAL_TIM_IC_ConfigChannel>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8001c7e:	f000 fced 	bl	800265c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001c82:	2302      	movs	r3, #2
 8001c84:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001c86:	2302      	movs	r3, #2
 8001c88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c8a:	f107 030c 	add.w	r3, r7, #12
 8001c8e:	2204      	movs	r2, #4
 8001c90:	4619      	mov	r1, r3
 8001c92:	480d      	ldr	r0, [pc, #52]	; (8001cc8 <MX_TIM1_Init+0x100>)
 8001c94:	f004 fbba 	bl	800640c <HAL_TIM_IC_ConfigChannel>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8001c9e:	f000 fcdd 	bl	800265c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001caa:	1d3b      	adds	r3, r7, #4
 8001cac:	4619      	mov	r1, r3
 8001cae:	4806      	ldr	r0, [pc, #24]	; (8001cc8 <MX_TIM1_Init+0x100>)
 8001cb0:	f005 fb4c 	bl	800734c <HAL_TIMEx_MasterConfigSynchronization>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001cba:	f000 fccf 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001cbe:	bf00      	nop
 8001cc0:	3730      	adds	r7, #48	; 0x30
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200002e8 	.word	0x200002e8
 8001ccc:	40010000 	.word	0x40010000

08001cd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08c      	sub	sp, #48	; 0x30
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001cd6:	f107 031c 	add.w	r3, r7, #28
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	60da      	str	r2, [r3, #12]
 8001ce4:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ce6:	f107 030c 	add.w	r3, r7, #12
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf4:	1d3b      	adds	r3, r7, #4
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cfc:	4b33      	ldr	r3, [pc, #204]	; (8001dcc <MX_TIM2_Init+0xfc>)
 8001cfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d04:	4b31      	ldr	r3, [pc, #196]	; (8001dcc <MX_TIM2_Init+0xfc>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0a:	4b30      	ldr	r3, [pc, #192]	; (8001dcc <MX_TIM2_Init+0xfc>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001d10:	4b2e      	ldr	r3, [pc, #184]	; (8001dcc <MX_TIM2_Init+0xfc>)
 8001d12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d18:	4b2c      	ldr	r3, [pc, #176]	; (8001dcc <MX_TIM2_Init+0xfc>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d1e:	4b2b      	ldr	r3, [pc, #172]	; (8001dcc <MX_TIM2_Init+0xfc>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001d24:	4829      	ldr	r0, [pc, #164]	; (8001dcc <MX_TIM2_Init+0xfc>)
 8001d26:	f004 f815 	bl	8005d54 <HAL_TIM_IC_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001d30:	f000 fc94 	bl	800265c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001d34:	2304      	movs	r3, #4
 8001d36:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001d38:	2350      	movs	r3, #80	; 0x50
 8001d3a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001d40:	2300      	movs	r3, #0
 8001d42:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001d48:	f107 031c 	add.w	r3, r7, #28
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	481f      	ldr	r0, [pc, #124]	; (8001dcc <MX_TIM2_Init+0xfc>)
 8001d50:	f004 fd81 	bl	8006856 <HAL_TIM_SlaveConfigSynchro>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001d5a:	f000 fc7f 	bl	800265c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d62:	2301      	movs	r3, #1
 8001d64:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001d6e:	f107 030c 	add.w	r3, r7, #12
 8001d72:	2200      	movs	r2, #0
 8001d74:	4619      	mov	r1, r3
 8001d76:	4815      	ldr	r0, [pc, #84]	; (8001dcc <MX_TIM2_Init+0xfc>)
 8001d78:	f004 fb48 	bl	800640c <HAL_TIM_IC_ConfigChannel>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001d82:	f000 fc6b 	bl	800265c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001d86:	2302      	movs	r3, #2
 8001d88:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001d8e:	f107 030c 	add.w	r3, r7, #12
 8001d92:	2204      	movs	r2, #4
 8001d94:	4619      	mov	r1, r3
 8001d96:	480d      	ldr	r0, [pc, #52]	; (8001dcc <MX_TIM2_Init+0xfc>)
 8001d98:	f004 fb38 	bl	800640c <HAL_TIM_IC_ConfigChannel>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001da2:	f000 fc5b 	bl	800265c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da6:	2300      	movs	r3, #0
 8001da8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001daa:	2300      	movs	r3, #0
 8001dac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dae:	1d3b      	adds	r3, r7, #4
 8001db0:	4619      	mov	r1, r3
 8001db2:	4806      	ldr	r0, [pc, #24]	; (8001dcc <MX_TIM2_Init+0xfc>)
 8001db4:	f005 faca 	bl	800734c <HAL_TIMEx_MasterConfigSynchronization>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8001dbe:	f000 fc4d 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001dc2:	bf00      	nop
 8001dc4:	3730      	adds	r7, #48	; 0x30
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000330 	.word	0x20000330

08001dd0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b090      	sub	sp, #64	; 0x40
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dd6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	609a      	str	r2, [r3, #8]
 8001de2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001de4:	f107 031c 	add.w	r3, r7, #28
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001df4:	f107 030c 	add.w	r3, r7, #12
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e0a:	4b3e      	ldr	r3, [pc, #248]	; (8001f04 <MX_TIM3_Init+0x134>)
 8001e0c:	4a3e      	ldr	r2, [pc, #248]	; (8001f08 <MX_TIM3_Init+0x138>)
 8001e0e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e10:	4b3c      	ldr	r3, [pc, #240]	; (8001f04 <MX_TIM3_Init+0x134>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e16:	4b3b      	ldr	r3, [pc, #236]	; (8001f04 <MX_TIM3_Init+0x134>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e1c:	4b39      	ldr	r3, [pc, #228]	; (8001f04 <MX_TIM3_Init+0x134>)
 8001e1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e22:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e24:	4b37      	ldr	r3, [pc, #220]	; (8001f04 <MX_TIM3_Init+0x134>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e2a:	4b36      	ldr	r3, [pc, #216]	; (8001f04 <MX_TIM3_Init+0x134>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e30:	4834      	ldr	r0, [pc, #208]	; (8001f04 <MX_TIM3_Init+0x134>)
 8001e32:	f003 fe1f 	bl	8005a74 <HAL_TIM_Base_Init>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001e3c:	f000 fc0e 	bl	800265c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e44:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	482d      	ldr	r0, [pc, #180]	; (8001f04 <MX_TIM3_Init+0x134>)
 8001e4e:	f004 fc3b 	bl	80066c8 <HAL_TIM_ConfigClockSource>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001e58:	f000 fc00 	bl	800265c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001e5c:	4829      	ldr	r0, [pc, #164]	; (8001f04 <MX_TIM3_Init+0x134>)
 8001e5e:	f003 ff79 	bl	8005d54 <HAL_TIM_IC_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001e68:	f000 fbf8 	bl	800265c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001e6c:	2304      	movs	r3, #4
 8001e6e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001e70:	2350      	movs	r3, #80	; 0x50
 8001e72:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e74:	2300      	movs	r3, #0
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001e80:	f107 031c 	add.w	r3, r7, #28
 8001e84:	4619      	mov	r1, r3
 8001e86:	481f      	ldr	r0, [pc, #124]	; (8001f04 <MX_TIM3_Init+0x134>)
 8001e88:	f004 fce5 	bl	8006856 <HAL_TIM_SlaveConfigSynchro>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8001e92:	f000 fbe3 	bl	800265c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ea6:	f107 030c 	add.w	r3, r7, #12
 8001eaa:	2200      	movs	r2, #0
 8001eac:	4619      	mov	r1, r3
 8001eae:	4815      	ldr	r0, [pc, #84]	; (8001f04 <MX_TIM3_Init+0x134>)
 8001eb0:	f004 faac 	bl	800640c <HAL_TIM_IC_ConfigChannel>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001eba:	f000 fbcf 	bl	800265c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001ec6:	f107 030c 	add.w	r3, r7, #12
 8001eca:	2204      	movs	r2, #4
 8001ecc:	4619      	mov	r1, r3
 8001ece:	480d      	ldr	r0, [pc, #52]	; (8001f04 <MX_TIM3_Init+0x134>)
 8001ed0:	f004 fa9c 	bl	800640c <HAL_TIM_IC_ConfigChannel>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 8001eda:	f000 fbbf 	bl	800265c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4806      	ldr	r0, [pc, #24]	; (8001f04 <MX_TIM3_Init+0x134>)
 8001eec:	f005 fa2e 	bl	800734c <HAL_TIMEx_MasterConfigSynchronization>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_TIM3_Init+0x12a>
  {
    Error_Handler();
 8001ef6:	f000 fbb1 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001efa:	bf00      	nop
 8001efc:	3740      	adds	r7, #64	; 0x40
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000378 	.word	0x20000378
 8001f08:	40000400 	.word	0x40000400

08001f0c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b090      	sub	sp, #64	; 0x40
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
 8001f1e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001f20:	f107 031c 	add.w	r3, r7, #28
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f30:	f107 030c 	add.w	r3, r7, #12
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f46:	4b3e      	ldr	r3, [pc, #248]	; (8002040 <MX_TIM4_Init+0x134>)
 8001f48:	4a3e      	ldr	r2, [pc, #248]	; (8002044 <MX_TIM4_Init+0x138>)
 8001f4a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001f4c:	4b3c      	ldr	r3, [pc, #240]	; (8002040 <MX_TIM4_Init+0x134>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f52:	4b3b      	ldr	r3, [pc, #236]	; (8002040 <MX_TIM4_Init+0x134>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001f58:	4b39      	ldr	r3, [pc, #228]	; (8002040 <MX_TIM4_Init+0x134>)
 8001f5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f5e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f60:	4b37      	ldr	r3, [pc, #220]	; (8002040 <MX_TIM4_Init+0x134>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f66:	4b36      	ldr	r3, [pc, #216]	; (8002040 <MX_TIM4_Init+0x134>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f6c:	4834      	ldr	r0, [pc, #208]	; (8002040 <MX_TIM4_Init+0x134>)
 8001f6e:	f003 fd81 	bl	8005a74 <HAL_TIM_Base_Init>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001f78:	f000 fb70 	bl	800265c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f80:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f86:	4619      	mov	r1, r3
 8001f88:	482d      	ldr	r0, [pc, #180]	; (8002040 <MX_TIM4_Init+0x134>)
 8001f8a:	f004 fb9d 	bl	80066c8 <HAL_TIM_ConfigClockSource>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001f94:	f000 fb62 	bl	800265c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001f98:	4829      	ldr	r0, [pc, #164]	; (8002040 <MX_TIM4_Init+0x134>)
 8001f9a:	f003 fedb 	bl	8005d54 <HAL_TIM_IC_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001fa4:	f000 fb5a 	bl	800265c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001fa8:	2304      	movs	r3, #4
 8001faa:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001fac:	2350      	movs	r3, #80	; 0x50
 8001fae:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001fbc:	f107 031c 	add.w	r3, r7, #28
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	481f      	ldr	r0, [pc, #124]	; (8002040 <MX_TIM4_Init+0x134>)
 8001fc4:	f004 fc47 	bl	8006856 <HAL_TIM_SlaveConfigSynchro>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 8001fce:	f000 fb45 	bl	800265c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001fe2:	f107 030c 	add.w	r3, r7, #12
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4815      	ldr	r0, [pc, #84]	; (8002040 <MX_TIM4_Init+0x134>)
 8001fec:	f004 fa0e 	bl	800640c <HAL_TIM_IC_ConfigChannel>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8001ff6:	f000 fb31 	bl	800265c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001ffe:	2302      	movs	r3, #2
 8002000:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002002:	f107 030c 	add.w	r3, r7, #12
 8002006:	2204      	movs	r2, #4
 8002008:	4619      	mov	r1, r3
 800200a:	480d      	ldr	r0, [pc, #52]	; (8002040 <MX_TIM4_Init+0x134>)
 800200c:	f004 f9fe 	bl	800640c <HAL_TIM_IC_ConfigChannel>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM4_Init+0x10e>
  {
    Error_Handler();
 8002016:	f000 fb21 	bl	800265c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800201a:	2300      	movs	r3, #0
 800201c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800201e:	2300      	movs	r3, #0
 8002020:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002022:	1d3b      	adds	r3, r7, #4
 8002024:	4619      	mov	r1, r3
 8002026:	4806      	ldr	r0, [pc, #24]	; (8002040 <MX_TIM4_Init+0x134>)
 8002028:	f005 f990 	bl	800734c <HAL_TIMEx_MasterConfigSynchronization>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_TIM4_Init+0x12a>
  {
    Error_Handler();
 8002032:	f000 fb13 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002036:	bf00      	nop
 8002038:	3740      	adds	r7, #64	; 0x40
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	200003c0 	.word	0x200003c0
 8002044:	40000800 	.word	0x40000800

08002048 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b090      	sub	sp, #64	; 0x40
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800204e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	605a      	str	r2, [r3, #4]
 8002058:	609a      	str	r2, [r3, #8]
 800205a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800205c:	f107 031c 	add.w	r3, r7, #28
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800206c:	f107 030c 	add.w	r3, r7, #12
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800207a:	1d3b      	adds	r3, r7, #4
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002082:	4b3e      	ldr	r3, [pc, #248]	; (800217c <MX_TIM5_Init+0x134>)
 8002084:	4a3e      	ldr	r2, [pc, #248]	; (8002180 <MX_TIM5_Init+0x138>)
 8002086:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002088:	4b3c      	ldr	r3, [pc, #240]	; (800217c <MX_TIM5_Init+0x134>)
 800208a:	2200      	movs	r2, #0
 800208c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800208e:	4b3b      	ldr	r3, [pc, #236]	; (800217c <MX_TIM5_Init+0x134>)
 8002090:	2200      	movs	r2, #0
 8002092:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002094:	4b39      	ldr	r3, [pc, #228]	; (800217c <MX_TIM5_Init+0x134>)
 8002096:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800209a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800209c:	4b37      	ldr	r3, [pc, #220]	; (800217c <MX_TIM5_Init+0x134>)
 800209e:	2200      	movs	r2, #0
 80020a0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020a2:	4b36      	ldr	r3, [pc, #216]	; (800217c <MX_TIM5_Init+0x134>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80020a8:	4834      	ldr	r0, [pc, #208]	; (800217c <MX_TIM5_Init+0x134>)
 80020aa:	f003 fce3 	bl	8005a74 <HAL_TIM_Base_Init>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80020b4:	f000 fad2 	bl	800265c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020bc:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80020be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020c2:	4619      	mov	r1, r3
 80020c4:	482d      	ldr	r0, [pc, #180]	; (800217c <MX_TIM5_Init+0x134>)
 80020c6:	f004 faff 	bl	80066c8 <HAL_TIM_ConfigClockSource>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80020d0:	f000 fac4 	bl	800265c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80020d4:	4829      	ldr	r0, [pc, #164]	; (800217c <MX_TIM5_Init+0x134>)
 80020d6:	f003 fe3d 	bl	8005d54 <HAL_TIM_IC_Init>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80020e0:	f000 fabc 	bl	800265c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80020e4:	2304      	movs	r3, #4
 80020e6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80020e8:	2350      	movs	r3, #80	; 0x50
 80020ea:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80020ec:	2300      	movs	r3, #0
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80020f0:	2300      	movs	r3, #0
 80020f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 80020f8:	f107 031c 	add.w	r3, r7, #28
 80020fc:	4619      	mov	r1, r3
 80020fe:	481f      	ldr	r0, [pc, #124]	; (800217c <MX_TIM5_Init+0x134>)
 8002100:	f004 fba9 	bl	8006856 <HAL_TIM_SlaveConfigSynchro>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_TIM5_Init+0xc6>
  {
    Error_Handler();
 800210a:	f000 faa7 	bl	800265c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002112:	2301      	movs	r3, #1
 8002114:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800211e:	f107 030c 	add.w	r3, r7, #12
 8002122:	2200      	movs	r2, #0
 8002124:	4619      	mov	r1, r3
 8002126:	4815      	ldr	r0, [pc, #84]	; (800217c <MX_TIM5_Init+0x134>)
 8002128:	f004 f970 	bl	800640c <HAL_TIM_IC_ConfigChannel>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 8002132:	f000 fa93 	bl	800265c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002136:	2302      	movs	r3, #2
 8002138:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800213a:	2302      	movs	r3, #2
 800213c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800213e:	f107 030c 	add.w	r3, r7, #12
 8002142:	2204      	movs	r2, #4
 8002144:	4619      	mov	r1, r3
 8002146:	480d      	ldr	r0, [pc, #52]	; (800217c <MX_TIM5_Init+0x134>)
 8002148:	f004 f960 	bl	800640c <HAL_TIM_IC_ConfigChannel>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_TIM5_Init+0x10e>
  {
    Error_Handler();
 8002152:	f000 fa83 	bl	800265c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002156:	2300      	movs	r3, #0
 8002158:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800215a:	2300      	movs	r3, #0
 800215c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800215e:	1d3b      	adds	r3, r7, #4
 8002160:	4619      	mov	r1, r3
 8002162:	4806      	ldr	r0, [pc, #24]	; (800217c <MX_TIM5_Init+0x134>)
 8002164:	f005 f8f2 	bl	800734c <HAL_TIMEx_MasterConfigSynchronization>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_TIM5_Init+0x12a>
  {
    Error_Handler();
 800216e:	f000 fa75 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002172:	bf00      	nop
 8002174:	3740      	adds	r7, #64	; 0x40
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000408 	.word	0x20000408
 8002180:	40000c00 	.word	0x40000c00

08002184 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b090      	sub	sp, #64	; 0x40
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800218a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	605a      	str	r2, [r3, #4]
 8002194:	609a      	str	r2, [r3, #8]
 8002196:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002198:	f107 031c 	add.w	r3, r7, #28
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80021a8:	f107 030c 	add.w	r3, r7, #12
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b6:	1d3b      	adds	r3, r7, #4
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80021be:	4b3f      	ldr	r3, [pc, #252]	; (80022bc <MX_TIM8_Init+0x138>)
 80021c0:	4a3f      	ldr	r2, [pc, #252]	; (80022c0 <MX_TIM8_Init+0x13c>)
 80021c2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80021c4:	4b3d      	ldr	r3, [pc, #244]	; (80022bc <MX_TIM8_Init+0x138>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ca:	4b3c      	ldr	r3, [pc, #240]	; (80022bc <MX_TIM8_Init+0x138>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80021d0:	4b3a      	ldr	r3, [pc, #232]	; (80022bc <MX_TIM8_Init+0x138>)
 80021d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021d6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021d8:	4b38      	ldr	r3, [pc, #224]	; (80022bc <MX_TIM8_Init+0x138>)
 80021da:	2200      	movs	r2, #0
 80021dc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80021de:	4b37      	ldr	r3, [pc, #220]	; (80022bc <MX_TIM8_Init+0x138>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021e4:	4b35      	ldr	r3, [pc, #212]	; (80022bc <MX_TIM8_Init+0x138>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80021ea:	4834      	ldr	r0, [pc, #208]	; (80022bc <MX_TIM8_Init+0x138>)
 80021ec:	f003 fc42 	bl	8005a74 <HAL_TIM_Base_Init>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80021f6:	f000 fa31 	bl	800265c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021fe:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002200:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002204:	4619      	mov	r1, r3
 8002206:	482d      	ldr	r0, [pc, #180]	; (80022bc <MX_TIM8_Init+0x138>)
 8002208:	f004 fa5e 	bl	80066c8 <HAL_TIM_ConfigClockSource>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8002212:	f000 fa23 	bl	800265c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8002216:	4829      	ldr	r0, [pc, #164]	; (80022bc <MX_TIM8_Init+0x138>)
 8002218:	f003 fd9c 	bl	8005d54 <HAL_TIM_IC_Init>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_TIM8_Init+0xa2>
  {
    Error_Handler();
 8002222:	f000 fa1b 	bl	800265c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002226:	2304      	movs	r3, #4
 8002228:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 800222a:	2360      	movs	r3, #96	; 0x60
 800222c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800222e:	2302      	movs	r3, #2
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002232:	2300      	movs	r3, #0
 8002234:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8002236:	2300      	movs	r3, #0
 8002238:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 800223a:	f107 031c 	add.w	r3, r7, #28
 800223e:	4619      	mov	r1, r3
 8002240:	481e      	ldr	r0, [pc, #120]	; (80022bc <MX_TIM8_Init+0x138>)
 8002242:	f004 fb08 	bl	8006856 <HAL_TIM_SlaveConfigSynchro>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 800224c:	f000 fa06 	bl	800265c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002250:	2300      	movs	r3, #0
 8002252:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002254:	2302      	movs	r3, #2
 8002256:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	2200      	movs	r2, #0
 8002266:	4619      	mov	r1, r3
 8002268:	4814      	ldr	r0, [pc, #80]	; (80022bc <MX_TIM8_Init+0x138>)
 800226a:	f004 f8cf 	bl	800640c <HAL_TIM_IC_ConfigChannel>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8002274:	f000 f9f2 	bl	800265c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002278:	2302      	movs	r3, #2
 800227a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800227c:	2301      	movs	r3, #1
 800227e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002280:	f107 030c 	add.w	r3, r7, #12
 8002284:	2204      	movs	r2, #4
 8002286:	4619      	mov	r1, r3
 8002288:	480c      	ldr	r0, [pc, #48]	; (80022bc <MX_TIM8_Init+0x138>)
 800228a:	f004 f8bf 	bl	800640c <HAL_TIM_IC_ConfigChannel>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_TIM8_Init+0x114>
  {
    Error_Handler();
 8002294:	f000 f9e2 	bl	800265c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002298:	2300      	movs	r3, #0
 800229a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800229c:	2300      	movs	r3, #0
 800229e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80022a0:	1d3b      	adds	r3, r7, #4
 80022a2:	4619      	mov	r1, r3
 80022a4:	4805      	ldr	r0, [pc, #20]	; (80022bc <MX_TIM8_Init+0x138>)
 80022a6:	f005 f851 	bl	800734c <HAL_TIMEx_MasterConfigSynchronization>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 80022b0:	f000 f9d4 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80022b4:	bf00      	nop
 80022b6:	3740      	adds	r7, #64	; 0x40
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	20000450 	.word	0x20000450
 80022c0:	40010400 	.word	0x40010400

080022c4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b088      	sub	sp, #32
 80022c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80022ca:	1d3b      	adds	r3, r7, #4
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
 80022d8:	615a      	str	r2, [r3, #20]
 80022da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80022dc:	4b1e      	ldr	r3, [pc, #120]	; (8002358 <MX_TIM10_Init+0x94>)
 80022de:	4a1f      	ldr	r2, [pc, #124]	; (800235c <MX_TIM10_Init+0x98>)
 80022e0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 999;
 80022e2:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <MX_TIM10_Init+0x94>)
 80022e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022e8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ea:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <MX_TIM10_Init+0x94>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1800-1;
 80022f0:	4b19      	ldr	r3, [pc, #100]	; (8002358 <MX_TIM10_Init+0x94>)
 80022f2:	f240 7207 	movw	r2, #1799	; 0x707
 80022f6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022f8:	4b17      	ldr	r3, [pc, #92]	; (8002358 <MX_TIM10_Init+0x94>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022fe:	4b16      	ldr	r3, [pc, #88]	; (8002358 <MX_TIM10_Init+0x94>)
 8002300:	2200      	movs	r2, #0
 8002302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002304:	4814      	ldr	r0, [pc, #80]	; (8002358 <MX_TIM10_Init+0x94>)
 8002306:	f003 fbb5 	bl	8005a74 <HAL_TIM_Base_Init>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 8002310:	f000 f9a4 	bl	800265c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002314:	4810      	ldr	r0, [pc, #64]	; (8002358 <MX_TIM10_Init+0x94>)
 8002316:	f003 fbfc 	bl	8005b12 <HAL_TIM_PWM_Init>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 8002320:	f000 f99c 	bl	800265c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002324:	2360      	movs	r3, #96	; 0x60
 8002326:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800232c:	2300      	movs	r3, #0
 800232e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002334:	1d3b      	adds	r3, r7, #4
 8002336:	2200      	movs	r2, #0
 8002338:	4619      	mov	r1, r3
 800233a:	4807      	ldr	r0, [pc, #28]	; (8002358 <MX_TIM10_Init+0x94>)
 800233c:	f004 f902 	bl	8006544 <HAL_TIM_PWM_ConfigChannel>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 8002346:	f000 f989 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800234a:	4803      	ldr	r0, [pc, #12]	; (8002358 <MX_TIM10_Init+0x94>)
 800234c:	f000 fca2 	bl	8002c94 <HAL_TIM_MspPostInit>

}
 8002350:	bf00      	nop
 8002352:	3720      	adds	r7, #32
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	20000498 	.word	0x20000498
 800235c:	40014400 	.word	0x40014400

08002360 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002366:	1d3b      	adds	r3, r7, #4
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	611a      	str	r2, [r3, #16]
 8002374:	615a      	str	r2, [r3, #20]
 8002376:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002378:	4b1e      	ldr	r3, [pc, #120]	; (80023f4 <MX_TIM11_Init+0x94>)
 800237a:	4a1f      	ldr	r2, [pc, #124]	; (80023f8 <MX_TIM11_Init+0x98>)
 800237c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800237e:	4b1d      	ldr	r3, [pc, #116]	; (80023f4 <MX_TIM11_Init+0x94>)
 8002380:	2200      	movs	r2, #0
 8002382:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002384:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <MX_TIM11_Init+0x94>)
 8002386:	2200      	movs	r2, #0
 8002388:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1800-1;
 800238a:	4b1a      	ldr	r3, [pc, #104]	; (80023f4 <MX_TIM11_Init+0x94>)
 800238c:	f240 7207 	movw	r2, #1799	; 0x707
 8002390:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002392:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <MX_TIM11_Init+0x94>)
 8002394:	2200      	movs	r2, #0
 8002396:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002398:	4b16      	ldr	r3, [pc, #88]	; (80023f4 <MX_TIM11_Init+0x94>)
 800239a:	2200      	movs	r2, #0
 800239c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800239e:	4815      	ldr	r0, [pc, #84]	; (80023f4 <MX_TIM11_Init+0x94>)
 80023a0:	f003 fb68 	bl	8005a74 <HAL_TIM_Base_Init>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80023aa:	f000 f957 	bl	800265c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80023ae:	4811      	ldr	r0, [pc, #68]	; (80023f4 <MX_TIM11_Init+0x94>)
 80023b0:	f003 fbaf 	bl	8005b12 <HAL_TIM_PWM_Init>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80023ba:	f000 f94f 	bl	800265c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023be:	2360      	movs	r3, #96	; 0x60
 80023c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023ce:	1d3b      	adds	r3, r7, #4
 80023d0:	2200      	movs	r2, #0
 80023d2:	4619      	mov	r1, r3
 80023d4:	4807      	ldr	r0, [pc, #28]	; (80023f4 <MX_TIM11_Init+0x94>)
 80023d6:	f004 f8b5 	bl	8006544 <HAL_TIM_PWM_ConfigChannel>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80023e0:	f000 f93c 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80023e4:	4803      	ldr	r0, [pc, #12]	; (80023f4 <MX_TIM11_Init+0x94>)
 80023e6:	f000 fc55 	bl	8002c94 <HAL_TIM_MspPostInit>

}
 80023ea:	bf00      	nop
 80023ec:	3720      	adds	r7, #32
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	200004e0 	.word	0x200004e0
 80023f8:	40014800 	.word	0x40014800

080023fc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08e      	sub	sp, #56	; 0x38
 8002400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002402:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	605a      	str	r2, [r3, #4]
 800240c:	609a      	str	r2, [r3, #8]
 800240e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002410:	f107 0314 	add.w	r3, r7, #20
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002420:	1d3b      	adds	r3, r7, #4
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	605a      	str	r2, [r3, #4]
 8002428:	609a      	str	r2, [r3, #8]
 800242a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800242c:	4b35      	ldr	r3, [pc, #212]	; (8002504 <MX_TIM12_Init+0x108>)
 800242e:	4a36      	ldr	r2, [pc, #216]	; (8002508 <MX_TIM12_Init+0x10c>)
 8002430:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002432:	4b34      	ldr	r3, [pc, #208]	; (8002504 <MX_TIM12_Init+0x108>)
 8002434:	2200      	movs	r2, #0
 8002436:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002438:	4b32      	ldr	r3, [pc, #200]	; (8002504 <MX_TIM12_Init+0x108>)
 800243a:	2200      	movs	r2, #0
 800243c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800243e:	4b31      	ldr	r3, [pc, #196]	; (8002504 <MX_TIM12_Init+0x108>)
 8002440:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002444:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002446:	4b2f      	ldr	r3, [pc, #188]	; (8002504 <MX_TIM12_Init+0x108>)
 8002448:	2200      	movs	r2, #0
 800244a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800244c:	4b2d      	ldr	r3, [pc, #180]	; (8002504 <MX_TIM12_Init+0x108>)
 800244e:	2200      	movs	r2, #0
 8002450:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002452:	482c      	ldr	r0, [pc, #176]	; (8002504 <MX_TIM12_Init+0x108>)
 8002454:	f003 fb0e 	bl	8005a74 <HAL_TIM_Base_Init>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <MX_TIM12_Init+0x66>
  {
    Error_Handler();
 800245e:	f000 f8fd 	bl	800265c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002466:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002468:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800246c:	4619      	mov	r1, r3
 800246e:	4825      	ldr	r0, [pc, #148]	; (8002504 <MX_TIM12_Init+0x108>)
 8002470:	f004 f92a 	bl	80066c8 <HAL_TIM_ConfigClockSource>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_TIM12_Init+0x82>
  {
    Error_Handler();
 800247a:	f000 f8ef 	bl	800265c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 800247e:	4821      	ldr	r0, [pc, #132]	; (8002504 <MX_TIM12_Init+0x108>)
 8002480:	f003 fc68 	bl	8005d54 <HAL_TIM_IC_Init>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_TIM12_Init+0x92>
  {
    Error_Handler();
 800248a:	f000 f8e7 	bl	800265c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800248e:	2304      	movs	r3, #4
 8002490:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002492:	2350      	movs	r3, #80	; 0x50
 8002494:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800249a:	2300      	movs	r3, #0
 800249c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 800249e:	2300      	movs	r3, #0
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim12, &sSlaveConfig) != HAL_OK)
 80024a2:	f107 0314 	add.w	r3, r7, #20
 80024a6:	4619      	mov	r1, r3
 80024a8:	4816      	ldr	r0, [pc, #88]	; (8002504 <MX_TIM12_Init+0x108>)
 80024aa:	f004 f9d4 	bl	8006856 <HAL_TIM_SlaveConfigSynchro>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_TIM12_Init+0xbc>
  {
    Error_Handler();
 80024b4:	f000 f8d2 	bl	800265c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80024b8:	2300      	movs	r3, #0
 80024ba:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80024bc:	2301      	movs	r3, #1
 80024be:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80024c0:	2300      	movs	r3, #0
 80024c2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80024c8:	1d3b      	adds	r3, r7, #4
 80024ca:	2200      	movs	r2, #0
 80024cc:	4619      	mov	r1, r3
 80024ce:	480d      	ldr	r0, [pc, #52]	; (8002504 <MX_TIM12_Init+0x108>)
 80024d0:	f003 ff9c 	bl	800640c <HAL_TIM_IC_ConfigChannel>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <MX_TIM12_Init+0xe2>
  {
    Error_Handler();
 80024da:	f000 f8bf 	bl	800265c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80024de:	2302      	movs	r3, #2
 80024e0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80024e2:	2302      	movs	r3, #2
 80024e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80024e6:	1d3b      	adds	r3, r7, #4
 80024e8:	2204      	movs	r2, #4
 80024ea:	4619      	mov	r1, r3
 80024ec:	4805      	ldr	r0, [pc, #20]	; (8002504 <MX_TIM12_Init+0x108>)
 80024ee:	f003 ff8d 	bl	800640c <HAL_TIM_IC_ConfigChannel>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_TIM12_Init+0x100>
  {
    Error_Handler();
 80024f8:	f000 f8b0 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80024fc:	bf00      	nop
 80024fe:	3738      	adds	r7, #56	; 0x38
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20000528 	.word	0x20000528
 8002508:	40001800 	.word	0x40001800

0800250c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002510:	4b11      	ldr	r3, [pc, #68]	; (8002558 <MX_USART2_UART_Init+0x4c>)
 8002512:	4a12      	ldr	r2, [pc, #72]	; (800255c <MX_USART2_UART_Init+0x50>)
 8002514:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002516:	4b10      	ldr	r3, [pc, #64]	; (8002558 <MX_USART2_UART_Init+0x4c>)
 8002518:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800251c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800251e:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <MX_USART2_UART_Init+0x4c>)
 8002520:	2200      	movs	r2, #0
 8002522:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002524:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <MX_USART2_UART_Init+0x4c>)
 8002526:	2200      	movs	r2, #0
 8002528:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800252a:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <MX_USART2_UART_Init+0x4c>)
 800252c:	2200      	movs	r2, #0
 800252e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002530:	4b09      	ldr	r3, [pc, #36]	; (8002558 <MX_USART2_UART_Init+0x4c>)
 8002532:	220c      	movs	r2, #12
 8002534:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002536:	4b08      	ldr	r3, [pc, #32]	; (8002558 <MX_USART2_UART_Init+0x4c>)
 8002538:	2200      	movs	r2, #0
 800253a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <MX_USART2_UART_Init+0x4c>)
 800253e:	2200      	movs	r2, #0
 8002540:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002542:	4805      	ldr	r0, [pc, #20]	; (8002558 <MX_USART2_UART_Init+0x4c>)
 8002544:	f004 ff92 	bl	800746c <HAL_UART_Init>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800254e:	f000 f885 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000570 	.word	0x20000570
 800255c:	40004400 	.word	0x40004400

08002560 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08a      	sub	sp, #40	; 0x28
 8002564:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002566:	f107 0314 	add.w	r3, r7, #20
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	605a      	str	r2, [r3, #4]
 8002570:	609a      	str	r2, [r3, #8]
 8002572:	60da      	str	r2, [r3, #12]
 8002574:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	4b2d      	ldr	r3, [pc, #180]	; (8002630 <MX_GPIO_Init+0xd0>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	4a2c      	ldr	r2, [pc, #176]	; (8002630 <MX_GPIO_Init+0xd0>)
 8002580:	f043 0304 	orr.w	r3, r3, #4
 8002584:	6313      	str	r3, [r2, #48]	; 0x30
 8002586:	4b2a      	ldr	r3, [pc, #168]	; (8002630 <MX_GPIO_Init+0xd0>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	4b26      	ldr	r3, [pc, #152]	; (8002630 <MX_GPIO_Init+0xd0>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	4a25      	ldr	r2, [pc, #148]	; (8002630 <MX_GPIO_Init+0xd0>)
 800259c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025a0:	6313      	str	r3, [r2, #48]	; 0x30
 80025a2:	4b23      	ldr	r3, [pc, #140]	; (8002630 <MX_GPIO_Init+0xd0>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	4b1f      	ldr	r3, [pc, #124]	; (8002630 <MX_GPIO_Init+0xd0>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	4a1e      	ldr	r2, [pc, #120]	; (8002630 <MX_GPIO_Init+0xd0>)
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	6313      	str	r3, [r2, #48]	; 0x30
 80025be:	4b1c      	ldr	r3, [pc, #112]	; (8002630 <MX_GPIO_Init+0xd0>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	60bb      	str	r3, [r7, #8]
 80025c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	607b      	str	r3, [r7, #4]
 80025ce:	4b18      	ldr	r3, [pc, #96]	; (8002630 <MX_GPIO_Init+0xd0>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	4a17      	ldr	r2, [pc, #92]	; (8002630 <MX_GPIO_Init+0xd0>)
 80025d4:	f043 0302 	orr.w	r3, r3, #2
 80025d8:	6313      	str	r3, [r2, #48]	; 0x30
 80025da:	4b15      	ldr	r3, [pc, #84]	; (8002630 <MX_GPIO_Init+0xd0>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	607b      	str	r3, [r7, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80025e6:	2200      	movs	r2, #0
 80025e8:	2107      	movs	r1, #7
 80025ea:	4812      	ldr	r0, [pc, #72]	; (8002634 <MX_GPIO_Init+0xd4>)
 80025ec:	f001 fcb0 	bl	8003f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80025f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025f6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80025fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002600:	f107 0314 	add.w	r3, r7, #20
 8002604:	4619      	mov	r1, r3
 8002606:	480b      	ldr	r0, [pc, #44]	; (8002634 <MX_GPIO_Init+0xd4>)
 8002608:	f001 fb0e 	bl	8003c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800260c:	2307      	movs	r3, #7
 800260e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002610:	2301      	movs	r3, #1
 8002612:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002618:	2303      	movs	r3, #3
 800261a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800261c:	f107 0314 	add.w	r3, r7, #20
 8002620:	4619      	mov	r1, r3
 8002622:	4804      	ldr	r0, [pc, #16]	; (8002634 <MX_GPIO_Init+0xd4>)
 8002624:	f001 fb00 	bl	8003c28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002628:	bf00      	nop
 800262a:	3728      	adds	r7, #40	; 0x28
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40023800 	.word	0x40023800
 8002634:	40020800 	.word	0x40020800

08002638 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002640:	1d39      	adds	r1, r7, #4
 8002642:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002646:	2201      	movs	r2, #1
 8002648:	4803      	ldr	r0, [pc, #12]	; (8002658 <__io_putchar+0x20>)
 800264a:	f004 ff5c 	bl	8007506 <HAL_UART_Transmit>

  return ch;
 800264e:	687b      	ldr	r3, [r7, #4]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	20000570 	.word	0x20000570

0800265c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002660:	b672      	cpsid	i
}
 8002662:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002664:	e7fe      	b.n	8002664 <Error_Handler+0x8>
	...

08002668 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	607b      	str	r3, [r7, #4]
 8002672:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <HAL_MspInit+0x4c>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002676:	4a0f      	ldr	r2, [pc, #60]	; (80026b4 <HAL_MspInit+0x4c>)
 8002678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800267c:	6453      	str	r3, [r2, #68]	; 0x44
 800267e:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <HAL_MspInit+0x4c>)
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002686:	607b      	str	r3, [r7, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	603b      	str	r3, [r7, #0]
 800268e:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <HAL_MspInit+0x4c>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	4a08      	ldr	r2, [pc, #32]	; (80026b4 <HAL_MspInit+0x4c>)
 8002694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002698:	6413      	str	r3, [r2, #64]	; 0x40
 800269a:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <HAL_MspInit+0x4c>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a2:	603b      	str	r3, [r7, #0]
 80026a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80026a6:	2007      	movs	r0, #7
 80026a8:	f001 f994 	bl	80039d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026ac:	bf00      	nop
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40023800 	.word	0x40023800

080026b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08a      	sub	sp, #40	; 0x28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c0:	f107 0314 	add.w	r3, r7, #20
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
 80026ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a17      	ldr	r2, [pc, #92]	; (8002734 <HAL_ADC_MspInit+0x7c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d127      	bne.n	800272a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	4b16      	ldr	r3, [pc, #88]	; (8002738 <HAL_ADC_MspInit+0x80>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	4a15      	ldr	r2, [pc, #84]	; (8002738 <HAL_ADC_MspInit+0x80>)
 80026e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ea:	4b13      	ldr	r3, [pc, #76]	; (8002738 <HAL_ADC_MspInit+0x80>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	4b0f      	ldr	r3, [pc, #60]	; (8002738 <HAL_ADC_MspInit+0x80>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	4a0e      	ldr	r2, [pc, #56]	; (8002738 <HAL_ADC_MspInit+0x80>)
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	6313      	str	r3, [r2, #48]	; 0x30
 8002706:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <HAL_ADC_MspInit+0x80>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002712:	2380      	movs	r3, #128	; 0x80
 8002714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002716:	2303      	movs	r3, #3
 8002718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271e:	f107 0314 	add.w	r3, r7, #20
 8002722:	4619      	mov	r1, r3
 8002724:	4805      	ldr	r0, [pc, #20]	; (800273c <HAL_ADC_MspInit+0x84>)
 8002726:	f001 fa7f 	bl	8003c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800272a:	bf00      	nop
 800272c:	3728      	adds	r7, #40	; 0x28
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40012000 	.word	0x40012000
 8002738:	40023800 	.word	0x40023800
 800273c:	40020000 	.word	0x40020000

08002740 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b08a      	sub	sp, #40	; 0x28
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002748:	f107 0314 	add.w	r3, r7, #20
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a17      	ldr	r2, [pc, #92]	; (80027bc <HAL_DAC_MspInit+0x7c>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d127      	bne.n	80027b2 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	613b      	str	r3, [r7, #16]
 8002766:	4b16      	ldr	r3, [pc, #88]	; (80027c0 <HAL_DAC_MspInit+0x80>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	4a15      	ldr	r2, [pc, #84]	; (80027c0 <HAL_DAC_MspInit+0x80>)
 800276c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002770:	6413      	str	r3, [r2, #64]	; 0x40
 8002772:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <HAL_DAC_MspInit+0x80>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <HAL_DAC_MspInit+0x80>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	4a0e      	ldr	r2, [pc, #56]	; (80027c0 <HAL_DAC_MspInit+0x80>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	6313      	str	r3, [r2, #48]	; 0x30
 800278e:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <HAL_DAC_MspInit+0x80>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800279a:	2310      	movs	r3, #16
 800279c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800279e:	2303      	movs	r3, #3
 80027a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a6:	f107 0314 	add.w	r3, r7, #20
 80027aa:	4619      	mov	r1, r3
 80027ac:	4805      	ldr	r0, [pc, #20]	; (80027c4 <HAL_DAC_MspInit+0x84>)
 80027ae:	f001 fa3b 	bl	8003c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80027b2:	bf00      	nop
 80027b4:	3728      	adds	r7, #40	; 0x28
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40007400 	.word	0x40007400
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40020000 	.word	0x40020000

080027c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08a      	sub	sp, #40	; 0x28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d0:	f107 0314 	add.w	r3, r7, #20
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a29      	ldr	r2, [pc, #164]	; (800288c <HAL_I2C_MspInit+0xc4>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d14b      	bne.n	8002882 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	613b      	str	r3, [r7, #16]
 80027ee:	4b28      	ldr	r3, [pc, #160]	; (8002890 <HAL_I2C_MspInit+0xc8>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	4a27      	ldr	r2, [pc, #156]	; (8002890 <HAL_I2C_MspInit+0xc8>)
 80027f4:	f043 0302 	orr.w	r3, r3, #2
 80027f8:	6313      	str	r3, [r2, #48]	; 0x30
 80027fa:	4b25      	ldr	r3, [pc, #148]	; (8002890 <HAL_I2C_MspInit+0xc8>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	4b21      	ldr	r3, [pc, #132]	; (8002890 <HAL_I2C_MspInit+0xc8>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	4a20      	ldr	r2, [pc, #128]	; (8002890 <HAL_I2C_MspInit+0xc8>)
 8002810:	f043 0304 	orr.w	r3, r3, #4
 8002814:	6313      	str	r3, [r2, #48]	; 0x30
 8002816:	4b1e      	ldr	r3, [pc, #120]	; (8002890 <HAL_I2C_MspInit+0xc8>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002828:	2312      	movs	r3, #18
 800282a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282c:	2300      	movs	r3, #0
 800282e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002830:	2303      	movs	r3, #3
 8002832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002834:	2304      	movs	r3, #4
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002838:	f107 0314 	add.w	r3, r7, #20
 800283c:	4619      	mov	r1, r3
 800283e:	4815      	ldr	r0, [pc, #84]	; (8002894 <HAL_I2C_MspInit+0xcc>)
 8002840:	f001 f9f2 	bl	8003c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800284a:	2312      	movs	r3, #18
 800284c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002852:	2303      	movs	r3, #3
 8002854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002856:	2304      	movs	r3, #4
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800285a:	f107 0314 	add.w	r3, r7, #20
 800285e:	4619      	mov	r1, r3
 8002860:	480d      	ldr	r0, [pc, #52]	; (8002898 <HAL_I2C_MspInit+0xd0>)
 8002862:	f001 f9e1 	bl	8003c28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	60bb      	str	r3, [r7, #8]
 800286a:	4b09      	ldr	r3, [pc, #36]	; (8002890 <HAL_I2C_MspInit+0xc8>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	4a08      	ldr	r2, [pc, #32]	; (8002890 <HAL_I2C_MspInit+0xc8>)
 8002870:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002874:	6413      	str	r3, [r2, #64]	; 0x40
 8002876:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_I2C_MspInit+0xc8>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800287e:	60bb      	str	r3, [r7, #8]
 8002880:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002882:	bf00      	nop
 8002884:	3728      	adds	r7, #40	; 0x28
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40005800 	.word	0x40005800
 8002890:	40023800 	.word	0x40023800
 8002894:	40020400 	.word	0x40020400
 8002898:	40020800 	.word	0x40020800

0800289c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b09a      	sub	sp, #104	; 0x68
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028a4:	f107 030c 	add.w	r3, r7, #12
 80028a8:	225c      	movs	r2, #92	; 0x5c
 80028aa:	2100      	movs	r1, #0
 80028ac:	4618      	mov	r0, r3
 80028ae:	f005 fec7 	bl	8008640 <memset>
  if(hrtc->Instance==RTC)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a0c      	ldr	r2, [pc, #48]	; (80028e8 <HAL_RTC_MspInit+0x4c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d111      	bne.n	80028e0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80028bc:	2320      	movs	r3, #32
 80028be:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80028c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028c4:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028c6:	f107 030c 	add.w	r3, r7, #12
 80028ca:	4618      	mov	r0, r3
 80028cc:	f001 fe08 	bl	80044e0 <HAL_RCCEx_PeriphCLKConfig>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80028d6:	f7ff fec1 	bl	800265c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80028da:	4b04      	ldr	r3, [pc, #16]	; (80028ec <HAL_RTC_MspInit+0x50>)
 80028dc:	2201      	movs	r2, #1
 80028de:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80028e0:	bf00      	nop
 80028e2:	3768      	adds	r7, #104	; 0x68
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40002800 	.word	0x40002800
 80028ec:	42470e3c 	.word	0x42470e3c

080028f0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08c      	sub	sp, #48	; 0x30
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f8:	f107 031c 	add.w	r3, r7, #28
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	605a      	str	r2, [r3, #4]
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	60da      	str	r2, [r3, #12]
 8002906:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a36      	ldr	r2, [pc, #216]	; (80029e8 <HAL_TIM_IC_MspInit+0xf8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d12d      	bne.n	800296e <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	61bb      	str	r3, [r7, #24]
 8002916:	4b35      	ldr	r3, [pc, #212]	; (80029ec <HAL_TIM_IC_MspInit+0xfc>)
 8002918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291a:	4a34      	ldr	r2, [pc, #208]	; (80029ec <HAL_TIM_IC_MspInit+0xfc>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6453      	str	r3, [r2, #68]	; 0x44
 8002922:	4b32      	ldr	r3, [pc, #200]	; (80029ec <HAL_TIM_IC_MspInit+0xfc>)
 8002924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	61bb      	str	r3, [r7, #24]
 800292c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	4b2e      	ldr	r3, [pc, #184]	; (80029ec <HAL_TIM_IC_MspInit+0xfc>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	4a2d      	ldr	r2, [pc, #180]	; (80029ec <HAL_TIM_IC_MspInit+0xfc>)
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	6313      	str	r3, [r2, #48]	; 0x30
 800293e:	4b2b      	ldr	r3, [pc, #172]	; (80029ec <HAL_TIM_IC_MspInit+0xfc>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800294a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800294e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002950:	2302      	movs	r3, #2
 8002952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	2300      	movs	r3, #0
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002958:	2300      	movs	r3, #0
 800295a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800295c:	2301      	movs	r3, #1
 800295e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002960:	f107 031c 	add.w	r3, r7, #28
 8002964:	4619      	mov	r1, r3
 8002966:	4822      	ldr	r0, [pc, #136]	; (80029f0 <HAL_TIM_IC_MspInit+0x100>)
 8002968:	f001 f95e 	bl	8003c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800296c:	e038      	b.n	80029e0 <HAL_TIM_IC_MspInit+0xf0>
  else if(htim_ic->Instance==TIM2)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002976:	d133      	bne.n	80029e0 <HAL_TIM_IC_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002978:	2300      	movs	r3, #0
 800297a:	613b      	str	r3, [r7, #16]
 800297c:	4b1b      	ldr	r3, [pc, #108]	; (80029ec <HAL_TIM_IC_MspInit+0xfc>)
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	4a1a      	ldr	r2, [pc, #104]	; (80029ec <HAL_TIM_IC_MspInit+0xfc>)
 8002982:	f043 0301 	orr.w	r3, r3, #1
 8002986:	6413      	str	r3, [r2, #64]	; 0x40
 8002988:	4b18      	ldr	r3, [pc, #96]	; (80029ec <HAL_TIM_IC_MspInit+0xfc>)
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002994:	2300      	movs	r3, #0
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	4b14      	ldr	r3, [pc, #80]	; (80029ec <HAL_TIM_IC_MspInit+0xfc>)
 800299a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299c:	4a13      	ldr	r2, [pc, #76]	; (80029ec <HAL_TIM_IC_MspInit+0xfc>)
 800299e:	f043 0301 	orr.w	r3, r3, #1
 80029a2:	6313      	str	r3, [r2, #48]	; 0x30
 80029a4:	4b11      	ldr	r3, [pc, #68]	; (80029ec <HAL_TIM_IC_MspInit+0xfc>)
 80029a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80029b0:	2320      	movs	r3, #32
 80029b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b4:	2302      	movs	r3, #2
 80029b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029bc:	2300      	movs	r3, #0
 80029be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029c0:	2301      	movs	r3, #1
 80029c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c4:	f107 031c 	add.w	r3, r7, #28
 80029c8:	4619      	mov	r1, r3
 80029ca:	4809      	ldr	r0, [pc, #36]	; (80029f0 <HAL_TIM_IC_MspInit+0x100>)
 80029cc:	f001 f92c 	bl	8003c28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029d0:	2200      	movs	r2, #0
 80029d2:	2100      	movs	r1, #0
 80029d4:	201c      	movs	r0, #28
 80029d6:	f001 f808 	bl	80039ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029da:	201c      	movs	r0, #28
 80029dc:	f001 f821 	bl	8003a22 <HAL_NVIC_EnableIRQ>
}
 80029e0:	bf00      	nop
 80029e2:	3730      	adds	r7, #48	; 0x30
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40010000 	.word	0x40010000
 80029ec:	40023800 	.word	0x40023800
 80029f0:	40020000 	.word	0x40020000

080029f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b094      	sub	sp, #80	; 0x50
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	60da      	str	r2, [r3, #12]
 8002a0a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a95      	ldr	r2, [pc, #596]	; (8002c68 <HAL_TIM_Base_MspInit+0x274>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d134      	bne.n	8002a80 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a1a:	4b94      	ldr	r3, [pc, #592]	; (8002c6c <HAL_TIM_Base_MspInit+0x278>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	4a93      	ldr	r2, [pc, #588]	; (8002c6c <HAL_TIM_Base_MspInit+0x278>)
 8002a20:	f043 0302 	orr.w	r3, r3, #2
 8002a24:	6413      	str	r3, [r2, #64]	; 0x40
 8002a26:	4b91      	ldr	r3, [pc, #580]	; (8002c6c <HAL_TIM_Base_MspInit+0x278>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	637b      	str	r3, [r7, #52]	; 0x34
 8002a36:	4b8d      	ldr	r3, [pc, #564]	; (8002c6c <HAL_TIM_Base_MspInit+0x278>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	4a8c      	ldr	r2, [pc, #560]	; (8002c6c <HAL_TIM_Base_MspInit+0x278>)
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	6313      	str	r3, [r2, #48]	; 0x30
 8002a42:	4b8a      	ldr	r3, [pc, #552]	; (8002c6c <HAL_TIM_Base_MspInit+0x278>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	637b      	str	r3, [r7, #52]	; 0x34
 8002a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a4e:	2340      	movs	r3, #64	; 0x40
 8002a50:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a52:	2302      	movs	r3, #2
 8002a54:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a56:	2300      	movs	r3, #0
 8002a58:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a62:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a66:	4619      	mov	r1, r3
 8002a68:	4881      	ldr	r0, [pc, #516]	; (8002c70 <HAL_TIM_Base_MspInit+0x27c>)
 8002a6a:	f001 f8dd 	bl	8003c28 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2100      	movs	r1, #0
 8002a72:	201d      	movs	r0, #29
 8002a74:	f000 ffb9 	bl	80039ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a78:	201d      	movs	r0, #29
 8002a7a:	f000 ffd2 	bl	8003a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002a7e:	e0ef      	b.n	8002c60 <HAL_TIM_Base_MspInit+0x26c>
  else if(htim_base->Instance==TIM4)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a7b      	ldr	r2, [pc, #492]	; (8002c74 <HAL_TIM_Base_MspInit+0x280>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d12c      	bne.n	8002ae4 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	633b      	str	r3, [r7, #48]	; 0x30
 8002a8e:	4b77      	ldr	r3, [pc, #476]	; (8002c6c <HAL_TIM_Base_MspInit+0x278>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	4a76      	ldr	r2, [pc, #472]	; (8002c6c <HAL_TIM_Base_MspInit+0x278>)
 8002a94:	f043 0304 	orr.w	r3, r3, #4
 8002a98:	6413      	str	r3, [r2, #64]	; 0x40
 8002a9a:	4b74      	ldr	r3, [pc, #464]	; (8002c6c <HAL_TIM_Base_MspInit+0x278>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	633b      	str	r3, [r7, #48]	; 0x30
 8002aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aaa:	4b70      	ldr	r3, [pc, #448]	; (8002c6c <HAL_TIM_Base_MspInit+0x278>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	4a6f      	ldr	r2, [pc, #444]	; (8002c6c <HAL_TIM_Base_MspInit+0x278>)
 8002ab0:	f043 0302 	orr.w	r3, r3, #2
 8002ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab6:	4b6d      	ldr	r3, [pc, #436]	; (8002c6c <HAL_TIM_Base_MspInit+0x278>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ac2:	2340      	movs	r3, #64	; 0x40
 8002ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ad6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ada:	4619      	mov	r1, r3
 8002adc:	4866      	ldr	r0, [pc, #408]	; (8002c78 <HAL_TIM_Base_MspInit+0x284>)
 8002ade:	f001 f8a3 	bl	8003c28 <HAL_GPIO_Init>
}
 8002ae2:	e0bd      	b.n	8002c60 <HAL_TIM_Base_MspInit+0x26c>
  else if(htim_base->Instance==TIM5)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a64      	ldr	r2, [pc, #400]	; (8002c7c <HAL_TIM_Base_MspInit+0x288>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d12c      	bne.n	8002b48 <HAL_TIM_Base_MspInit+0x154>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002af2:	4b5e      	ldr	r3, [pc, #376]	; (8002c6c <HAL_TIM_Base_MspInit+0x278>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	4a5d      	ldr	r2, [pc, #372]	; (8002c6c <HAL_TIM_Base_MspInit+0x278>)
 8002af8:	f043 0308 	orr.w	r3, r3, #8
 8002afc:	6413      	str	r3, [r2, #64]	; 0x40
 8002afe:	4b5b      	ldr	r3, [pc, #364]	; (8002c6c <HAL_TIM_Base_MspInit+0x278>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b0e:	4b57      	ldr	r3, [pc, #348]	; (8002c6c <HAL_TIM_Base_MspInit+0x278>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	4a56      	ldr	r2, [pc, #344]	; (8002c6c <HAL_TIM_Base_MspInit+0x278>)
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1a:	4b54      	ldr	r3, [pc, #336]	; (8002c6c <HAL_TIM_Base_MspInit+0x278>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b26:	2301      	movs	r3, #1
 8002b28:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b32:	2300      	movs	r3, #0
 8002b34:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002b36:	2302      	movs	r3, #2
 8002b38:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b3e:	4619      	mov	r1, r3
 8002b40:	484b      	ldr	r0, [pc, #300]	; (8002c70 <HAL_TIM_Base_MspInit+0x27c>)
 8002b42:	f001 f871 	bl	8003c28 <HAL_GPIO_Init>
}
 8002b46:	e08b      	b.n	8002c60 <HAL_TIM_Base_MspInit+0x26c>
  else if(htim_base->Instance==TIM8)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a4c      	ldr	r2, [pc, #304]	; (8002c80 <HAL_TIM_Base_MspInit+0x28c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d12c      	bne.n	8002bac <HAL_TIM_Base_MspInit+0x1b8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	623b      	str	r3, [r7, #32]
 8002b56:	4b45      	ldr	r3, [pc, #276]	; (8002c6c <HAL_TIM_Base_MspInit+0x278>)
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	4a44      	ldr	r2, [pc, #272]	; (8002c6c <HAL_TIM_Base_MspInit+0x278>)
 8002b5c:	f043 0302 	orr.w	r3, r3, #2
 8002b60:	6453      	str	r3, [r2, #68]	; 0x44
 8002b62:	4b42      	ldr	r3, [pc, #264]	; (8002c6c <HAL_TIM_Base_MspInit+0x278>)
 8002b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	623b      	str	r3, [r7, #32]
 8002b6c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61fb      	str	r3, [r7, #28]
 8002b72:	4b3e      	ldr	r3, [pc, #248]	; (8002c6c <HAL_TIM_Base_MspInit+0x278>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	4a3d      	ldr	r2, [pc, #244]	; (8002c6c <HAL_TIM_Base_MspInit+0x278>)
 8002b78:	f043 0304 	orr.w	r3, r3, #4
 8002b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7e:	4b3b      	ldr	r3, [pc, #236]	; (8002c6c <HAL_TIM_Base_MspInit+0x278>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	f003 0304 	and.w	r3, r3, #4
 8002b86:	61fb      	str	r3, [r7, #28]
 8002b88:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b8a:	2380      	movs	r3, #128	; 0x80
 8002b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b92:	2300      	movs	r3, #0
 8002b94:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b96:	2300      	movs	r3, #0
 8002b98:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4837      	ldr	r0, [pc, #220]	; (8002c84 <HAL_TIM_Base_MspInit+0x290>)
 8002ba6:	f001 f83f 	bl	8003c28 <HAL_GPIO_Init>
}
 8002baa:	e059      	b.n	8002c60 <HAL_TIM_Base_MspInit+0x26c>
  else if(htim_base->Instance==TIM10)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a35      	ldr	r2, [pc, #212]	; (8002c88 <HAL_TIM_Base_MspInit+0x294>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d10e      	bne.n	8002bd4 <HAL_TIM_Base_MspInit+0x1e0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61bb      	str	r3, [r7, #24]
 8002bba:	4b2c      	ldr	r3, [pc, #176]	; (8002c6c <HAL_TIM_Base_MspInit+0x278>)
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbe:	4a2b      	ldr	r2, [pc, #172]	; (8002c6c <HAL_TIM_Base_MspInit+0x278>)
 8002bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bc6:	4b29      	ldr	r3, [pc, #164]	; (8002c6c <HAL_TIM_Base_MspInit+0x278>)
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bce:	61bb      	str	r3, [r7, #24]
 8002bd0:	69bb      	ldr	r3, [r7, #24]
}
 8002bd2:	e045      	b.n	8002c60 <HAL_TIM_Base_MspInit+0x26c>
  else if(htim_base->Instance==TIM11)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a2c      	ldr	r2, [pc, #176]	; (8002c8c <HAL_TIM_Base_MspInit+0x298>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d10e      	bne.n	8002bfc <HAL_TIM_Base_MspInit+0x208>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]
 8002be2:	4b22      	ldr	r3, [pc, #136]	; (8002c6c <HAL_TIM_Base_MspInit+0x278>)
 8002be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be6:	4a21      	ldr	r2, [pc, #132]	; (8002c6c <HAL_TIM_Base_MspInit+0x278>)
 8002be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bec:	6453      	str	r3, [r2, #68]	; 0x44
 8002bee:	4b1f      	ldr	r3, [pc, #124]	; (8002c6c <HAL_TIM_Base_MspInit+0x278>)
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	697b      	ldr	r3, [r7, #20]
}
 8002bfa:	e031      	b.n	8002c60 <HAL_TIM_Base_MspInit+0x26c>
  else if(htim_base->Instance==TIM12)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a23      	ldr	r2, [pc, #140]	; (8002c90 <HAL_TIM_Base_MspInit+0x29c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d12c      	bne.n	8002c60 <HAL_TIM_Base_MspInit+0x26c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	613b      	str	r3, [r7, #16]
 8002c0a:	4b18      	ldr	r3, [pc, #96]	; (8002c6c <HAL_TIM_Base_MspInit+0x278>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	4a17      	ldr	r2, [pc, #92]	; (8002c6c <HAL_TIM_Base_MspInit+0x278>)
 8002c10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c14:	6413      	str	r3, [r2, #64]	; 0x40
 8002c16:	4b15      	ldr	r3, [pc, #84]	; (8002c6c <HAL_TIM_Base_MspInit+0x278>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1e:	613b      	str	r3, [r7, #16]
 8002c20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <HAL_TIM_Base_MspInit+0x278>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	4a10      	ldr	r2, [pc, #64]	; (8002c6c <HAL_TIM_Base_MspInit+0x278>)
 8002c2c:	f043 0302 	orr.w	r3, r3, #2
 8002c30:	6313      	str	r3, [r2, #48]	; 0x30
 8002c32:	4b0e      	ldr	r3, [pc, #56]	; (8002c6c <HAL_TIM_Base_MspInit+0x278>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002c3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c42:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c44:	2302      	movs	r3, #2
 8002c46:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002c50:	2309      	movs	r3, #9
 8002c52:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4807      	ldr	r0, [pc, #28]	; (8002c78 <HAL_TIM_Base_MspInit+0x284>)
 8002c5c:	f000 ffe4 	bl	8003c28 <HAL_GPIO_Init>
}
 8002c60:	bf00      	nop
 8002c62:	3750      	adds	r7, #80	; 0x50
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40000400 	.word	0x40000400
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	40020000 	.word	0x40020000
 8002c74:	40000800 	.word	0x40000800
 8002c78:	40020400 	.word	0x40020400
 8002c7c:	40000c00 	.word	0x40000c00
 8002c80:	40010400 	.word	0x40010400
 8002c84:	40020800 	.word	0x40020800
 8002c88:	40014400 	.word	0x40014400
 8002c8c:	40014800 	.word	0x40014800
 8002c90:	40001800 	.word	0x40001800

08002c94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08a      	sub	sp, #40	; 0x28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c9c:	f107 0314 	add.w	r3, r7, #20
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	605a      	str	r2, [r3, #4]
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	60da      	str	r2, [r3, #12]
 8002caa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM10)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a25      	ldr	r2, [pc, #148]	; (8002d48 <HAL_TIM_MspPostInit+0xb4>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d11f      	bne.n	8002cf6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	613b      	str	r3, [r7, #16]
 8002cba:	4b24      	ldr	r3, [pc, #144]	; (8002d4c <HAL_TIM_MspPostInit+0xb8>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	4a23      	ldr	r2, [pc, #140]	; (8002d4c <HAL_TIM_MspPostInit+0xb8>)
 8002cc0:	f043 0302 	orr.w	r3, r3, #2
 8002cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc6:	4b21      	ldr	r3, [pc, #132]	; (8002d4c <HAL_TIM_MspPostInit+0xb8>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	613b      	str	r3, [r7, #16]
 8002cd0:	693b      	ldr	r3, [r7, #16]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002cd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd8:	2302      	movs	r3, #2
 8002cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce8:	f107 0314 	add.w	r3, r7, #20
 8002cec:	4619      	mov	r1, r3
 8002cee:	4818      	ldr	r0, [pc, #96]	; (8002d50 <HAL_TIM_MspPostInit+0xbc>)
 8002cf0:	f000 ff9a 	bl	8003c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8002cf4:	e023      	b.n	8002d3e <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM11)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a16      	ldr	r2, [pc, #88]	; (8002d54 <HAL_TIM_MspPostInit+0xc0>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d11e      	bne.n	8002d3e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d00:	2300      	movs	r3, #0
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	4b11      	ldr	r3, [pc, #68]	; (8002d4c <HAL_TIM_MspPostInit+0xb8>)
 8002d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d08:	4a10      	ldr	r2, [pc, #64]	; (8002d4c <HAL_TIM_MspPostInit+0xb8>)
 8002d0a:	f043 0302 	orr.w	r3, r3, #2
 8002d0e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d10:	4b0e      	ldr	r3, [pc, #56]	; (8002d4c <HAL_TIM_MspPostInit+0xb8>)
 8002d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d22:	2302      	movs	r3, #2
 8002d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d32:	f107 0314 	add.w	r3, r7, #20
 8002d36:	4619      	mov	r1, r3
 8002d38:	4805      	ldr	r0, [pc, #20]	; (8002d50 <HAL_TIM_MspPostInit+0xbc>)
 8002d3a:	f000 ff75 	bl	8003c28 <HAL_GPIO_Init>
}
 8002d3e:	bf00      	nop
 8002d40:	3728      	adds	r7, #40	; 0x28
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40014400 	.word	0x40014400
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	40020400 	.word	0x40020400
 8002d54:	40014800 	.word	0x40014800

08002d58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b08a      	sub	sp, #40	; 0x28
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d60:	f107 0314 	add.w	r3, r7, #20
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	605a      	str	r2, [r3, #4]
 8002d6a:	609a      	str	r2, [r3, #8]
 8002d6c:	60da      	str	r2, [r3, #12]
 8002d6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a19      	ldr	r2, [pc, #100]	; (8002ddc <HAL_UART_MspInit+0x84>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d12b      	bne.n	8002dd2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <HAL_UART_MspInit+0x88>)
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	4a17      	ldr	r2, [pc, #92]	; (8002de0 <HAL_UART_MspInit+0x88>)
 8002d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d88:	6413      	str	r3, [r2, #64]	; 0x40
 8002d8a:	4b15      	ldr	r3, [pc, #84]	; (8002de0 <HAL_UART_MspInit+0x88>)
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d92:	613b      	str	r3, [r7, #16]
 8002d94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d96:	2300      	movs	r3, #0
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <HAL_UART_MspInit+0x88>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	4a10      	ldr	r2, [pc, #64]	; (8002de0 <HAL_UART_MspInit+0x88>)
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	6313      	str	r3, [r2, #48]	; 0x30
 8002da6:	4b0e      	ldr	r3, [pc, #56]	; (8002de0 <HAL_UART_MspInit+0x88>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002db2:	230c      	movs	r3, #12
 8002db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db6:	2302      	movs	r3, #2
 8002db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002dc2:	2307      	movs	r3, #7
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc6:	f107 0314 	add.w	r3, r7, #20
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4805      	ldr	r0, [pc, #20]	; (8002de4 <HAL_UART_MspInit+0x8c>)
 8002dce:	f000 ff2b 	bl	8003c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002dd2:	bf00      	nop
 8002dd4:	3728      	adds	r7, #40	; 0x28
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40004400 	.word	0x40004400
 8002de0:	40023800 	.word	0x40023800
 8002de4:	40020000 	.word	0x40020000

08002de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dec:	e7fe      	b.n	8002dec <NMI_Handler+0x4>

08002dee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dee:	b480      	push	{r7}
 8002df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002df2:	e7fe      	b.n	8002df2 <HardFault_Handler+0x4>

08002df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002df8:	e7fe      	b.n	8002df8 <MemManage_Handler+0x4>

08002dfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dfe:	e7fe      	b.n	8002dfe <BusFault_Handler+0x4>

08002e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e04:	e7fe      	b.n	8002e04 <UsageFault_Handler+0x4>

08002e06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e06:	b480      	push	{r7}
 8002e08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e0a:	bf00      	nop
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e18:	bf00      	nop
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e22:	b480      	push	{r7}
 8002e24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e26:	bf00      	nop
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e34:	f000 f96a 	bl	800310c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e38:	bf00      	nop
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e40:	4802      	ldr	r0, [pc, #8]	; (8002e4c <TIM2_IRQHandler+0x10>)
 8002e42:	f003 f9db 	bl	80061fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20000330 	.word	0x20000330

08002e50 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e54:	4802      	ldr	r0, [pc, #8]	; (8002e60 <TIM3_IRQHandler+0x10>)
 8002e56:	f003 f9d1 	bl	80061fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e5a:	bf00      	nop
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000378 	.word	0x20000378

08002e64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  return 1;
 8002e68:	2301      	movs	r3, #1
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <_kill>:

int _kill(int pid, int sig)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e7e:	f005 fbeb 	bl	8008658 <__errno>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2216      	movs	r2, #22
 8002e86:	601a      	str	r2, [r3, #0]
  return -1;
 8002e88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <_exit>:

void _exit (int status)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7ff ffe7 	bl	8002e74 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ea6:	e7fe      	b.n	8002ea6 <_exit+0x12>

08002ea8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	e00a      	b.n	8002ed0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002eba:	f3af 8000 	nop.w
 8002ebe:	4601      	mov	r1, r0
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	60ba      	str	r2, [r7, #8]
 8002ec6:	b2ca      	uxtb	r2, r1
 8002ec8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	dbf0      	blt.n	8002eba <_read+0x12>
  }

  return len;
 8002ed8:	687b      	ldr	r3, [r7, #4]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b086      	sub	sp, #24
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	60f8      	str	r0, [r7, #12]
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eee:	2300      	movs	r3, #0
 8002ef0:	617b      	str	r3, [r7, #20]
 8002ef2:	e009      	b.n	8002f08 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	60ba      	str	r2, [r7, #8]
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff fb9b 	bl	8002638 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	3301      	adds	r3, #1
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	dbf1      	blt.n	8002ef4 <_write+0x12>
  }
  return len;
 8002f10:	687b      	ldr	r3, [r7, #4]
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <_close>:

int _close(int file)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f42:	605a      	str	r2, [r3, #4]
  return 0;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <_isatty>:

int _isatty(int file)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f5a:	2301      	movs	r3, #1
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3714      	adds	r7, #20
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
	...

08002f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f8c:	4a14      	ldr	r2, [pc, #80]	; (8002fe0 <_sbrk+0x5c>)
 8002f8e:	4b15      	ldr	r3, [pc, #84]	; (8002fe4 <_sbrk+0x60>)
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f98:	4b13      	ldr	r3, [pc, #76]	; (8002fe8 <_sbrk+0x64>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d102      	bne.n	8002fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fa0:	4b11      	ldr	r3, [pc, #68]	; (8002fe8 <_sbrk+0x64>)
 8002fa2:	4a12      	ldr	r2, [pc, #72]	; (8002fec <_sbrk+0x68>)
 8002fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fa6:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <_sbrk+0x64>)
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4413      	add	r3, r2
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d207      	bcs.n	8002fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fb4:	f005 fb50 	bl	8008658 <__errno>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	220c      	movs	r2, #12
 8002fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fc2:	e009      	b.n	8002fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fc4:	4b08      	ldr	r3, [pc, #32]	; (8002fe8 <_sbrk+0x64>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fca:	4b07      	ldr	r3, [pc, #28]	; (8002fe8 <_sbrk+0x64>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	4a05      	ldr	r2, [pc, #20]	; (8002fe8 <_sbrk+0x64>)
 8002fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3718      	adds	r7, #24
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	20020000 	.word	0x20020000
 8002fe4:	00000400 	.word	0x00000400
 8002fe8:	200005e4 	.word	0x200005e4
 8002fec:	20000738 	.word	0x20000738

08002ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ff4:	4b06      	ldr	r3, [pc, #24]	; (8003010 <SystemInit+0x20>)
 8002ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffa:	4a05      	ldr	r2, [pc, #20]	; (8003010 <SystemInit+0x20>)
 8002ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003004:	bf00      	nop
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	e000ed00 	.word	0xe000ed00

08003014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003014:	f8df d034 	ldr.w	sp, [pc, #52]	; 800304c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003018:	480d      	ldr	r0, [pc, #52]	; (8003050 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800301a:	490e      	ldr	r1, [pc, #56]	; (8003054 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800301c:	4a0e      	ldr	r2, [pc, #56]	; (8003058 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800301e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003020:	e002      	b.n	8003028 <LoopCopyDataInit>

08003022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003026:	3304      	adds	r3, #4

08003028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800302a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800302c:	d3f9      	bcc.n	8003022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800302e:	4a0b      	ldr	r2, [pc, #44]	; (800305c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003030:	4c0b      	ldr	r4, [pc, #44]	; (8003060 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003034:	e001      	b.n	800303a <LoopFillZerobss>

08003036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003038:	3204      	adds	r2, #4

0800303a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800303a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800303c:	d3fb      	bcc.n	8003036 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800303e:	f7ff ffd7 	bl	8002ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003042:	f005 fb0f 	bl	8008664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003046:	f7fe fae5 	bl	8001614 <main>
  bx  lr    
 800304a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800304c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003054:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8003058:	0800a924 	.word	0x0800a924
  ldr r2, =_sbss
 800305c:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8003060:	20000738 	.word	0x20000738

08003064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003064:	e7fe      	b.n	8003064 <ADC_IRQHandler>
	...

08003068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800306c:	4b0e      	ldr	r3, [pc, #56]	; (80030a8 <HAL_Init+0x40>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a0d      	ldr	r2, [pc, #52]	; (80030a8 <HAL_Init+0x40>)
 8003072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003076:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003078:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <HAL_Init+0x40>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a0a      	ldr	r2, [pc, #40]	; (80030a8 <HAL_Init+0x40>)
 800307e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003082:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003084:	4b08      	ldr	r3, [pc, #32]	; (80030a8 <HAL_Init+0x40>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a07      	ldr	r2, [pc, #28]	; (80030a8 <HAL_Init+0x40>)
 800308a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800308e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003090:	2003      	movs	r0, #3
 8003092:	f000 fc9f 	bl	80039d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003096:	2000      	movs	r0, #0
 8003098:	f000 f808 	bl	80030ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800309c:	f7ff fae4 	bl	8002668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40023c00 	.word	0x40023c00

080030ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030b4:	4b12      	ldr	r3, [pc, #72]	; (8003100 <HAL_InitTick+0x54>)
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	4b12      	ldr	r3, [pc, #72]	; (8003104 <HAL_InitTick+0x58>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	4619      	mov	r1, r3
 80030be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80030c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 fcb7 	bl	8003a3e <HAL_SYSTICK_Config>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e00e      	b.n	80030f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b0f      	cmp	r3, #15
 80030de:	d80a      	bhi.n	80030f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030e0:	2200      	movs	r2, #0
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030e8:	f000 fc7f 	bl	80039ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030ec:	4a06      	ldr	r2, [pc, #24]	; (8003108 <HAL_InitTick+0x5c>)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	e000      	b.n	80030f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	20000028 	.word	0x20000028
 8003104:	20000030 	.word	0x20000030
 8003108:	2000002c 	.word	0x2000002c

0800310c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003110:	4b06      	ldr	r3, [pc, #24]	; (800312c <HAL_IncTick+0x20>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	461a      	mov	r2, r3
 8003116:	4b06      	ldr	r3, [pc, #24]	; (8003130 <HAL_IncTick+0x24>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4413      	add	r3, r2
 800311c:	4a04      	ldr	r2, [pc, #16]	; (8003130 <HAL_IncTick+0x24>)
 800311e:	6013      	str	r3, [r2, #0]
}
 8003120:	bf00      	nop
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	20000030 	.word	0x20000030
 8003130:	200005e8 	.word	0x200005e8

08003134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  return uwTick;
 8003138:	4b03      	ldr	r3, [pc, #12]	; (8003148 <HAL_GetTick+0x14>)
 800313a:	681b      	ldr	r3, [r3, #0]
}
 800313c:	4618      	mov	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	200005e8 	.word	0x200005e8

0800314c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003154:	f7ff ffee 	bl	8003134 <HAL_GetTick>
 8003158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003164:	d005      	beq.n	8003172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003166:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <HAL_Delay+0x44>)
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	461a      	mov	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4413      	add	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003172:	bf00      	nop
 8003174:	f7ff ffde 	bl	8003134 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	429a      	cmp	r2, r3
 8003182:	d8f7      	bhi.n	8003174 <HAL_Delay+0x28>
  {
  }
}
 8003184:	bf00      	nop
 8003186:	bf00      	nop
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	20000030 	.word	0x20000030

08003194 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800319c:	2300      	movs	r3, #0
 800319e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e033      	b.n	8003212 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d109      	bne.n	80031c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7ff fa80 	bl	80026b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	f003 0310 	and.w	r3, r3, #16
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d118      	bne.n	8003204 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031da:	f023 0302 	bic.w	r3, r3, #2
 80031de:	f043 0202 	orr.w	r2, r3, #2
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 fa28 	bl	800363c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	f023 0303 	bic.w	r3, r3, #3
 80031fa:	f043 0201 	orr.w	r2, r3, #1
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	641a      	str	r2, [r3, #64]	; 0x40
 8003202:	e001      	b.n	8003208 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003210:	7bfb      	ldrb	r3, [r7, #15]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_ADC_Start_IT+0x1a>
 8003232:	2302      	movs	r3, #2
 8003234:	e0bd      	b.n	80033b2 <HAL_ADC_Start_IT+0x196>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b01      	cmp	r3, #1
 800324a:	d018      	beq.n	800327e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0201 	orr.w	r2, r2, #1
 800325a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800325c:	4b58      	ldr	r3, [pc, #352]	; (80033c0 <HAL_ADC_Start_IT+0x1a4>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a58      	ldr	r2, [pc, #352]	; (80033c4 <HAL_ADC_Start_IT+0x1a8>)
 8003262:	fba2 2303 	umull	r2, r3, r2, r3
 8003266:	0c9a      	lsrs	r2, r3, #18
 8003268:	4613      	mov	r3, r2
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	4413      	add	r3, r2
 800326e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003270:	e002      	b.n	8003278 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	3b01      	subs	r3, #1
 8003276:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f9      	bne.n	8003272 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b01      	cmp	r3, #1
 800328a:	f040 8085 	bne.w	8003398 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003296:	f023 0301 	bic.w	r3, r3, #1
 800329a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d007      	beq.n	80032c0 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032cc:	d106      	bne.n	80032dc <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d2:	f023 0206 	bic.w	r2, r3, #6
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	645a      	str	r2, [r3, #68]	; 0x44
 80032da:	e002      	b.n	80032e2 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032ea:	4b37      	ldr	r3, [pc, #220]	; (80033c8 <HAL_ADC_Start_IT+0x1ac>)
 80032ec:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80032f6:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6812      	ldr	r2, [r2, #0]
 8003302:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003306:	f043 0320 	orr.w	r3, r3, #32
 800330a:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 031f 	and.w	r3, r3, #31
 8003314:	2b00      	cmp	r3, #0
 8003316:	d12a      	bne.n	800336e <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a2b      	ldr	r2, [pc, #172]	; (80033cc <HAL_ADC_Start_IT+0x1b0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d015      	beq.n	800334e <HAL_ADC_Start_IT+0x132>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a2a      	ldr	r2, [pc, #168]	; (80033d0 <HAL_ADC_Start_IT+0x1b4>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d105      	bne.n	8003338 <HAL_ADC_Start_IT+0x11c>
 800332c:	4b26      	ldr	r3, [pc, #152]	; (80033c8 <HAL_ADC_Start_IT+0x1ac>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f003 031f 	and.w	r3, r3, #31
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00a      	beq.n	800334e <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a25      	ldr	r2, [pc, #148]	; (80033d4 <HAL_ADC_Start_IT+0x1b8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d136      	bne.n	80033b0 <HAL_ADC_Start_IT+0x194>
 8003342:	4b21      	ldr	r3, [pc, #132]	; (80033c8 <HAL_ADC_Start_IT+0x1ac>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f003 0310 	and.w	r3, r3, #16
 800334a:	2b00      	cmp	r3, #0
 800334c:	d130      	bne.n	80033b0 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d129      	bne.n	80033b0 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800336a:	609a      	str	r2, [r3, #8]
 800336c:	e020      	b.n	80033b0 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a16      	ldr	r2, [pc, #88]	; (80033cc <HAL_ADC_Start_IT+0x1b0>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d11b      	bne.n	80033b0 <HAL_ADC_Start_IT+0x194>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d114      	bne.n	80033b0 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003394:	609a      	str	r2, [r3, #8]
 8003396:	e00b      	b.n	80033b0 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339c:	f043 0210 	orr.w	r2, r3, #16
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a8:	f043 0201 	orr.w	r2, r3, #1
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	20000028 	.word	0x20000028
 80033c4:	431bde83 	.word	0x431bde83
 80033c8:	40012300 	.word	0x40012300
 80033cc:	40012000 	.word	0x40012000
 80033d0:	40012100 	.word	0x40012100
 80033d4:	40012200 	.word	0x40012200

080033d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <HAL_ADC_ConfigChannel+0x1c>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e113      	b.n	800361c <HAL_ADC_ConfigChannel+0x244>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2b09      	cmp	r3, #9
 8003402:	d925      	bls.n	8003450 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68d9      	ldr	r1, [r3, #12]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	b29b      	uxth	r3, r3
 8003410:	461a      	mov	r2, r3
 8003412:	4613      	mov	r3, r2
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	4413      	add	r3, r2
 8003418:	3b1e      	subs	r3, #30
 800341a:	2207      	movs	r2, #7
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43da      	mvns	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	400a      	ands	r2, r1
 8003428:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68d9      	ldr	r1, [r3, #12]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	b29b      	uxth	r3, r3
 800343a:	4618      	mov	r0, r3
 800343c:	4603      	mov	r3, r0
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	4403      	add	r3, r0
 8003442:	3b1e      	subs	r3, #30
 8003444:	409a      	lsls	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	60da      	str	r2, [r3, #12]
 800344e:	e022      	b.n	8003496 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6919      	ldr	r1, [r3, #16]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	b29b      	uxth	r3, r3
 800345c:	461a      	mov	r2, r3
 800345e:	4613      	mov	r3, r2
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	4413      	add	r3, r2
 8003464:	2207      	movs	r2, #7
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43da      	mvns	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	400a      	ands	r2, r1
 8003472:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6919      	ldr	r1, [r3, #16]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	b29b      	uxth	r3, r3
 8003484:	4618      	mov	r0, r3
 8003486:	4603      	mov	r3, r0
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	4403      	add	r3, r0
 800348c:	409a      	lsls	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	2b06      	cmp	r3, #6
 800349c:	d824      	bhi.n	80034e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	3b05      	subs	r3, #5
 80034b0:	221f      	movs	r2, #31
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43da      	mvns	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	400a      	ands	r2, r1
 80034be:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	4618      	mov	r0, r3
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	3b05      	subs	r3, #5
 80034da:	fa00 f203 	lsl.w	r2, r0, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	635a      	str	r2, [r3, #52]	; 0x34
 80034e6:	e04c      	b.n	8003582 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b0c      	cmp	r3, #12
 80034ee:	d824      	bhi.n	800353a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	4613      	mov	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	3b23      	subs	r3, #35	; 0x23
 8003502:	221f      	movs	r2, #31
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	43da      	mvns	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	400a      	ands	r2, r1
 8003510:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	b29b      	uxth	r3, r3
 800351e:	4618      	mov	r0, r3
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	3b23      	subs	r3, #35	; 0x23
 800352c:	fa00 f203 	lsl.w	r2, r0, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	631a      	str	r2, [r3, #48]	; 0x30
 8003538:	e023      	b.n	8003582 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	4613      	mov	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	3b41      	subs	r3, #65	; 0x41
 800354c:	221f      	movs	r2, #31
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	43da      	mvns	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	400a      	ands	r2, r1
 800355a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	b29b      	uxth	r3, r3
 8003568:	4618      	mov	r0, r3
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	3b41      	subs	r3, #65	; 0x41
 8003576:	fa00 f203 	lsl.w	r2, r0, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003582:	4b29      	ldr	r3, [pc, #164]	; (8003628 <HAL_ADC_ConfigChannel+0x250>)
 8003584:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a28      	ldr	r2, [pc, #160]	; (800362c <HAL_ADC_ConfigChannel+0x254>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d10f      	bne.n	80035b0 <HAL_ADC_ConfigChannel+0x1d8>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b12      	cmp	r3, #18
 8003596:	d10b      	bne.n	80035b0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a1d      	ldr	r2, [pc, #116]	; (800362c <HAL_ADC_ConfigChannel+0x254>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d12b      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x23a>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a1c      	ldr	r2, [pc, #112]	; (8003630 <HAL_ADC_ConfigChannel+0x258>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d003      	beq.n	80035cc <HAL_ADC_ConfigChannel+0x1f4>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b11      	cmp	r3, #17
 80035ca:	d122      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a11      	ldr	r2, [pc, #68]	; (8003630 <HAL_ADC_ConfigChannel+0x258>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d111      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035ee:	4b11      	ldr	r3, [pc, #68]	; (8003634 <HAL_ADC_ConfigChannel+0x25c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a11      	ldr	r2, [pc, #68]	; (8003638 <HAL_ADC_ConfigChannel+0x260>)
 80035f4:	fba2 2303 	umull	r2, r3, r2, r3
 80035f8:	0c9a      	lsrs	r2, r3, #18
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003604:	e002      	b.n	800360c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	3b01      	subs	r3, #1
 800360a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f9      	bne.n	8003606 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	40012300 	.word	0x40012300
 800362c:	40012000 	.word	0x40012000
 8003630:	10000012 	.word	0x10000012
 8003634:	20000028 	.word	0x20000028
 8003638:	431bde83 	.word	0x431bde83

0800363c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003644:	4b79      	ldr	r3, [pc, #484]	; (800382c <ADC_Init+0x1f0>)
 8003646:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	431a      	orrs	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003670:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6859      	ldr	r1, [r3, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	021a      	lsls	r2, r3, #8
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003694:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6859      	ldr	r1, [r3, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6899      	ldr	r1, [r3, #8]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ce:	4a58      	ldr	r2, [pc, #352]	; (8003830 <ADC_Init+0x1f4>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d022      	beq.n	800371a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6899      	ldr	r1, [r3, #8]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003704:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6899      	ldr	r1, [r3, #8]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	609a      	str	r2, [r3, #8]
 8003718:	e00f      	b.n	800373a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003728:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003738:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0202 	bic.w	r2, r2, #2
 8003748:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6899      	ldr	r1, [r3, #8]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	7e1b      	ldrb	r3, [r3, #24]
 8003754:	005a      	lsls	r2, r3, #1
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d01b      	beq.n	80037a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003776:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003786:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6859      	ldr	r1, [r3, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	3b01      	subs	r3, #1
 8003794:	035a      	lsls	r2, r3, #13
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	605a      	str	r2, [r3, #4]
 800379e:	e007      	b.n	80037b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80037be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	3b01      	subs	r3, #1
 80037cc:	051a      	lsls	r2, r3, #20
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6899      	ldr	r1, [r3, #8]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037f2:	025a      	lsls	r2, r3, #9
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689a      	ldr	r2, [r3, #8]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800380a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6899      	ldr	r1, [r3, #8]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	029a      	lsls	r2, r3, #10
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	609a      	str	r2, [r3, #8]
}
 8003820:	bf00      	nop
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	40012300 	.word	0x40012300
 8003830:	0f000001 	.word	0x0f000001

08003834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003844:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <__NVIC_SetPriorityGrouping+0x44>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003850:	4013      	ands	r3, r2
 8003852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800385c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003866:	4a04      	ldr	r2, [pc, #16]	; (8003878 <__NVIC_SetPriorityGrouping+0x44>)
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	60d3      	str	r3, [r2, #12]
}
 800386c:	bf00      	nop
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	e000ed00 	.word	0xe000ed00

0800387c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003880:	4b04      	ldr	r3, [pc, #16]	; (8003894 <__NVIC_GetPriorityGrouping+0x18>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	0a1b      	lsrs	r3, r3, #8
 8003886:	f003 0307 	and.w	r3, r3, #7
}
 800388a:	4618      	mov	r0, r3
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	e000ed00 	.word	0xe000ed00

08003898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	4603      	mov	r3, r0
 80038a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	db0b      	blt.n	80038c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038aa:	79fb      	ldrb	r3, [r7, #7]
 80038ac:	f003 021f 	and.w	r2, r3, #31
 80038b0:	4907      	ldr	r1, [pc, #28]	; (80038d0 <__NVIC_EnableIRQ+0x38>)
 80038b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b6:	095b      	lsrs	r3, r3, #5
 80038b8:	2001      	movs	r0, #1
 80038ba:	fa00 f202 	lsl.w	r2, r0, r2
 80038be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	e000e100 	.word	0xe000e100

080038d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	4603      	mov	r3, r0
 80038dc:	6039      	str	r1, [r7, #0]
 80038de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	db0a      	blt.n	80038fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	490c      	ldr	r1, [pc, #48]	; (8003920 <__NVIC_SetPriority+0x4c>)
 80038ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f2:	0112      	lsls	r2, r2, #4
 80038f4:	b2d2      	uxtb	r2, r2
 80038f6:	440b      	add	r3, r1
 80038f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038fc:	e00a      	b.n	8003914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	b2da      	uxtb	r2, r3
 8003902:	4908      	ldr	r1, [pc, #32]	; (8003924 <__NVIC_SetPriority+0x50>)
 8003904:	79fb      	ldrb	r3, [r7, #7]
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	3b04      	subs	r3, #4
 800390c:	0112      	lsls	r2, r2, #4
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	440b      	add	r3, r1
 8003912:	761a      	strb	r2, [r3, #24]
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	e000e100 	.word	0xe000e100
 8003924:	e000ed00 	.word	0xe000ed00

08003928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003928:	b480      	push	{r7}
 800392a:	b089      	sub	sp, #36	; 0x24
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f1c3 0307 	rsb	r3, r3, #7
 8003942:	2b04      	cmp	r3, #4
 8003944:	bf28      	it	cs
 8003946:	2304      	movcs	r3, #4
 8003948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	3304      	adds	r3, #4
 800394e:	2b06      	cmp	r3, #6
 8003950:	d902      	bls.n	8003958 <NVIC_EncodePriority+0x30>
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	3b03      	subs	r3, #3
 8003956:	e000      	b.n	800395a <NVIC_EncodePriority+0x32>
 8003958:	2300      	movs	r3, #0
 800395a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800395c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	fa02 f303 	lsl.w	r3, r2, r3
 8003966:	43da      	mvns	r2, r3
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	401a      	ands	r2, r3
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003970:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	fa01 f303 	lsl.w	r3, r1, r3
 800397a:	43d9      	mvns	r1, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003980:	4313      	orrs	r3, r2
         );
}
 8003982:	4618      	mov	r0, r3
 8003984:	3724      	adds	r7, #36	; 0x24
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
	...

08003990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3b01      	subs	r3, #1
 800399c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039a0:	d301      	bcc.n	80039a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039a2:	2301      	movs	r3, #1
 80039a4:	e00f      	b.n	80039c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039a6:	4a0a      	ldr	r2, [pc, #40]	; (80039d0 <SysTick_Config+0x40>)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039ae:	210f      	movs	r1, #15
 80039b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039b4:	f7ff ff8e 	bl	80038d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <SysTick_Config+0x40>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039be:	4b04      	ldr	r3, [pc, #16]	; (80039d0 <SysTick_Config+0x40>)
 80039c0:	2207      	movs	r2, #7
 80039c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	e000e010 	.word	0xe000e010

080039d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7ff ff29 	bl	8003834 <__NVIC_SetPriorityGrouping>
}
 80039e2:	bf00      	nop
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b086      	sub	sp, #24
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	4603      	mov	r3, r0
 80039f2:	60b9      	str	r1, [r7, #8]
 80039f4:	607a      	str	r2, [r7, #4]
 80039f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039fc:	f7ff ff3e 	bl	800387c <__NVIC_GetPriorityGrouping>
 8003a00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	68b9      	ldr	r1, [r7, #8]
 8003a06:	6978      	ldr	r0, [r7, #20]
 8003a08:	f7ff ff8e 	bl	8003928 <NVIC_EncodePriority>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a12:	4611      	mov	r1, r2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff ff5d 	bl	80038d4 <__NVIC_SetPriority>
}
 8003a1a:	bf00      	nop
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b082      	sub	sp, #8
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	4603      	mov	r3, r0
 8003a2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff ff31 	bl	8003898 <__NVIC_EnableIRQ>
}
 8003a36:	bf00      	nop
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b082      	sub	sp, #8
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7ff ffa2 	bl	8003990 <SysTick_Config>
 8003a4c:	4603      	mov	r3, r0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b082      	sub	sp, #8
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e014      	b.n	8003a92 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	791b      	ldrb	r3, [r3, #4]
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d105      	bne.n	8003a7e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7fe fe61 	bl	8002740 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2202      	movs	r2, #2
 8003a82:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
 8003aa2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	795b      	ldrb	r3, [r3, #5]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d101      	bne.n	8003ab0 <HAL_DAC_Start+0x16>
 8003aac:	2302      	movs	r3, #2
 8003aae:	e040      	b.n	8003b32 <HAL_DAC_Start+0x98>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2202      	movs	r2, #2
 8003aba:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6819      	ldr	r1, [r3, #0]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	2201      	movs	r2, #1
 8003aca:	409a      	lsls	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10f      	bne.n	8003afa <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003ae4:	2b3c      	cmp	r3, #60	; 0x3c
 8003ae6:	d11d      	bne.n	8003b24 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0201 	orr.w	r2, r2, #1
 8003af6:	605a      	str	r2, [r3, #4]
 8003af8:	e014      	b.n	8003b24 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	f003 0310 	and.w	r3, r3, #16
 8003b0a:	213c      	movs	r1, #60	; 0x3c
 8003b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d107      	bne.n	8003b24 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0202 	orr.w	r2, r2, #2
 8003b22:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b087      	sub	sp, #28
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	60f8      	str	r0, [r7, #12]
 8003b46:	60b9      	str	r1, [r7, #8]
 8003b48:	607a      	str	r2, [r7, #4]
 8003b4a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d105      	bne.n	8003b68 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4413      	add	r3, r2
 8003b62:	3308      	adds	r3, #8
 8003b64:	617b      	str	r3, [r7, #20]
 8003b66:	e004      	b.n	8003b72 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	3314      	adds	r3, #20
 8003b70:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	461a      	mov	r2, r3
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	371c      	adds	r7, #28
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	795b      	ldrb	r3, [r3, #5]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d101      	bne.n	8003ba0 <HAL_DAC_ConfigChannel+0x18>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	e03c      	b.n	8003c1a <HAL_DAC_ConfigChannel+0x92>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2202      	movs	r2, #2
 8003baa:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f003 0310 	and.w	r3, r3, #16
 8003bba:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	43db      	mvns	r3, r3
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f003 0310 	and.w	r3, r3, #16
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	fa02 f303 	lsl.w	r3, r2, r3
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6819      	ldr	r1, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f003 0310 	and.w	r3, r3, #16
 8003bfc:	22c0      	movs	r2, #192	; 0xc0
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	43da      	mvns	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	400a      	ands	r2, r1
 8003c0a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	371c      	adds	r7, #28
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
	...

08003c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b089      	sub	sp, #36	; 0x24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c3e:	2300      	movs	r3, #0
 8003c40:	61fb      	str	r3, [r7, #28]
 8003c42:	e165      	b.n	8003f10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c44:	2201      	movs	r2, #1
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	4013      	ands	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	f040 8154 	bne.w	8003f0a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d005      	beq.n	8003c7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d130      	bne.n	8003cdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	2203      	movs	r2, #3
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	43db      	mvns	r3, r3
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	091b      	lsrs	r3, r3, #4
 8003cc6:	f003 0201 	and.w	r2, r3, #1
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f003 0303 	and.w	r3, r3, #3
 8003ce4:	2b03      	cmp	r3, #3
 8003ce6:	d017      	beq.n	8003d18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	2203      	movs	r2, #3
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f003 0303 	and.w	r3, r3, #3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d123      	bne.n	8003d6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	08da      	lsrs	r2, r3, #3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3208      	adds	r2, #8
 8003d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	220f      	movs	r2, #15
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	43db      	mvns	r3, r3
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4013      	ands	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	691a      	ldr	r2, [r3, #16]
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	08da      	lsrs	r2, r3, #3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	3208      	adds	r2, #8
 8003d66:	69b9      	ldr	r1, [r7, #24]
 8003d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	2203      	movs	r2, #3
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	4013      	ands	r3, r2
 8003d82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f003 0203 	and.w	r2, r3, #3
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 80ae 	beq.w	8003f0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dae:	2300      	movs	r3, #0
 8003db0:	60fb      	str	r3, [r7, #12]
 8003db2:	4b5d      	ldr	r3, [pc, #372]	; (8003f28 <HAL_GPIO_Init+0x300>)
 8003db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db6:	4a5c      	ldr	r2, [pc, #368]	; (8003f28 <HAL_GPIO_Init+0x300>)
 8003db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8003dbe:	4b5a      	ldr	r3, [pc, #360]	; (8003f28 <HAL_GPIO_Init+0x300>)
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dca:	4a58      	ldr	r2, [pc, #352]	; (8003f2c <HAL_GPIO_Init+0x304>)
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	089b      	lsrs	r3, r3, #2
 8003dd0:	3302      	adds	r3, #2
 8003dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	220f      	movs	r2, #15
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	43db      	mvns	r3, r3
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	4013      	ands	r3, r2
 8003dec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a4f      	ldr	r2, [pc, #316]	; (8003f30 <HAL_GPIO_Init+0x308>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d025      	beq.n	8003e42 <HAL_GPIO_Init+0x21a>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a4e      	ldr	r2, [pc, #312]	; (8003f34 <HAL_GPIO_Init+0x30c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d01f      	beq.n	8003e3e <HAL_GPIO_Init+0x216>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a4d      	ldr	r2, [pc, #308]	; (8003f38 <HAL_GPIO_Init+0x310>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d019      	beq.n	8003e3a <HAL_GPIO_Init+0x212>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a4c      	ldr	r2, [pc, #304]	; (8003f3c <HAL_GPIO_Init+0x314>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d013      	beq.n	8003e36 <HAL_GPIO_Init+0x20e>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a4b      	ldr	r2, [pc, #300]	; (8003f40 <HAL_GPIO_Init+0x318>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d00d      	beq.n	8003e32 <HAL_GPIO_Init+0x20a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a4a      	ldr	r2, [pc, #296]	; (8003f44 <HAL_GPIO_Init+0x31c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d007      	beq.n	8003e2e <HAL_GPIO_Init+0x206>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a49      	ldr	r2, [pc, #292]	; (8003f48 <HAL_GPIO_Init+0x320>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d101      	bne.n	8003e2a <HAL_GPIO_Init+0x202>
 8003e26:	2306      	movs	r3, #6
 8003e28:	e00c      	b.n	8003e44 <HAL_GPIO_Init+0x21c>
 8003e2a:	2307      	movs	r3, #7
 8003e2c:	e00a      	b.n	8003e44 <HAL_GPIO_Init+0x21c>
 8003e2e:	2305      	movs	r3, #5
 8003e30:	e008      	b.n	8003e44 <HAL_GPIO_Init+0x21c>
 8003e32:	2304      	movs	r3, #4
 8003e34:	e006      	b.n	8003e44 <HAL_GPIO_Init+0x21c>
 8003e36:	2303      	movs	r3, #3
 8003e38:	e004      	b.n	8003e44 <HAL_GPIO_Init+0x21c>
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	e002      	b.n	8003e44 <HAL_GPIO_Init+0x21c>
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e000      	b.n	8003e44 <HAL_GPIO_Init+0x21c>
 8003e42:	2300      	movs	r3, #0
 8003e44:	69fa      	ldr	r2, [r7, #28]
 8003e46:	f002 0203 	and.w	r2, r2, #3
 8003e4a:	0092      	lsls	r2, r2, #2
 8003e4c:	4093      	lsls	r3, r2
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e54:	4935      	ldr	r1, [pc, #212]	; (8003f2c <HAL_GPIO_Init+0x304>)
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	089b      	lsrs	r3, r3, #2
 8003e5a:	3302      	adds	r3, #2
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e62:	4b3a      	ldr	r3, [pc, #232]	; (8003f4c <HAL_GPIO_Init+0x324>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e86:	4a31      	ldr	r2, [pc, #196]	; (8003f4c <HAL_GPIO_Init+0x324>)
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e8c:	4b2f      	ldr	r3, [pc, #188]	; (8003f4c <HAL_GPIO_Init+0x324>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	43db      	mvns	r3, r3
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d003      	beq.n	8003eb0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003eb0:	4a26      	ldr	r2, [pc, #152]	; (8003f4c <HAL_GPIO_Init+0x324>)
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003eb6:	4b25      	ldr	r3, [pc, #148]	; (8003f4c <HAL_GPIO_Init+0x324>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003eda:	4a1c      	ldr	r2, [pc, #112]	; (8003f4c <HAL_GPIO_Init+0x324>)
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ee0:	4b1a      	ldr	r3, [pc, #104]	; (8003f4c <HAL_GPIO_Init+0x324>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	43db      	mvns	r3, r3
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	4013      	ands	r3, r2
 8003eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f04:	4a11      	ldr	r2, [pc, #68]	; (8003f4c <HAL_GPIO_Init+0x324>)
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	61fb      	str	r3, [r7, #28]
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	2b0f      	cmp	r3, #15
 8003f14:	f67f ae96 	bls.w	8003c44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f18:	bf00      	nop
 8003f1a:	bf00      	nop
 8003f1c:	3724      	adds	r7, #36	; 0x24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40023800 	.word	0x40023800
 8003f2c:	40013800 	.word	0x40013800
 8003f30:	40020000 	.word	0x40020000
 8003f34:	40020400 	.word	0x40020400
 8003f38:	40020800 	.word	0x40020800
 8003f3c:	40020c00 	.word	0x40020c00
 8003f40:	40021000 	.word	0x40021000
 8003f44:	40021400 	.word	0x40021400
 8003f48:	40021800 	.word	0x40021800
 8003f4c:	40013c00 	.word	0x40013c00

08003f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	460b      	mov	r3, r1
 8003f5a:	807b      	strh	r3, [r7, #2]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f60:	787b      	ldrb	r3, [r7, #1]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f66:	887a      	ldrh	r2, [r7, #2]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f6c:	e003      	b.n	8003f76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f6e:	887b      	ldrh	r3, [r7, #2]
 8003f70:	041a      	lsls	r2, r3, #16
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	619a      	str	r2, [r3, #24]
}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
	...

08003f84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e12b      	b.n	80041ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d106      	bne.n	8003fb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7fe fc0c 	bl	80027c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2224      	movs	r2, #36	; 0x24
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0201 	bic.w	r2, r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fe6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fe8:	f000 fa52 	bl	8004490 <HAL_RCC_GetPCLK1Freq>
 8003fec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	4a81      	ldr	r2, [pc, #516]	; (80041f8 <HAL_I2C_Init+0x274>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d807      	bhi.n	8004008 <HAL_I2C_Init+0x84>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4a80      	ldr	r2, [pc, #512]	; (80041fc <HAL_I2C_Init+0x278>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	bf94      	ite	ls
 8004000:	2301      	movls	r3, #1
 8004002:	2300      	movhi	r3, #0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	e006      	b.n	8004016 <HAL_I2C_Init+0x92>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	4a7d      	ldr	r2, [pc, #500]	; (8004200 <HAL_I2C_Init+0x27c>)
 800400c:	4293      	cmp	r3, r2
 800400e:	bf94      	ite	ls
 8004010:	2301      	movls	r3, #1
 8004012:	2300      	movhi	r3, #0
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e0e7      	b.n	80041ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	4a78      	ldr	r2, [pc, #480]	; (8004204 <HAL_I2C_Init+0x280>)
 8004022:	fba2 2303 	umull	r2, r3, r2, r3
 8004026:	0c9b      	lsrs	r3, r3, #18
 8004028:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	430a      	orrs	r2, r1
 800403c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	4a6a      	ldr	r2, [pc, #424]	; (80041f8 <HAL_I2C_Init+0x274>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d802      	bhi.n	8004058 <HAL_I2C_Init+0xd4>
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	3301      	adds	r3, #1
 8004056:	e009      	b.n	800406c <HAL_I2C_Init+0xe8>
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800405e:	fb02 f303 	mul.w	r3, r2, r3
 8004062:	4a69      	ldr	r2, [pc, #420]	; (8004208 <HAL_I2C_Init+0x284>)
 8004064:	fba2 2303 	umull	r2, r3, r2, r3
 8004068:	099b      	lsrs	r3, r3, #6
 800406a:	3301      	adds	r3, #1
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6812      	ldr	r2, [r2, #0]
 8004070:	430b      	orrs	r3, r1
 8004072:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800407e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	495c      	ldr	r1, [pc, #368]	; (80041f8 <HAL_I2C_Init+0x274>)
 8004088:	428b      	cmp	r3, r1
 800408a:	d819      	bhi.n	80040c0 <HAL_I2C_Init+0x13c>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	1e59      	subs	r1, r3, #1
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	fbb1 f3f3 	udiv	r3, r1, r3
 800409a:	1c59      	adds	r1, r3, #1
 800409c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80040a0:	400b      	ands	r3, r1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00a      	beq.n	80040bc <HAL_I2C_Init+0x138>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	1e59      	subs	r1, r3, #1
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80040b4:	3301      	adds	r3, #1
 80040b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ba:	e051      	b.n	8004160 <HAL_I2C_Init+0x1dc>
 80040bc:	2304      	movs	r3, #4
 80040be:	e04f      	b.n	8004160 <HAL_I2C_Init+0x1dc>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d111      	bne.n	80040ec <HAL_I2C_Init+0x168>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	1e58      	subs	r0, r3, #1
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6859      	ldr	r1, [r3, #4]
 80040d0:	460b      	mov	r3, r1
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	440b      	add	r3, r1
 80040d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80040da:	3301      	adds	r3, #1
 80040dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	bf0c      	ite	eq
 80040e4:	2301      	moveq	r3, #1
 80040e6:	2300      	movne	r3, #0
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	e012      	b.n	8004112 <HAL_I2C_Init+0x18e>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	1e58      	subs	r0, r3, #1
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6859      	ldr	r1, [r3, #4]
 80040f4:	460b      	mov	r3, r1
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	440b      	add	r3, r1
 80040fa:	0099      	lsls	r1, r3, #2
 80040fc:	440b      	add	r3, r1
 80040fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004102:	3301      	adds	r3, #1
 8004104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004108:	2b00      	cmp	r3, #0
 800410a:	bf0c      	ite	eq
 800410c:	2301      	moveq	r3, #1
 800410e:	2300      	movne	r3, #0
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <HAL_I2C_Init+0x196>
 8004116:	2301      	movs	r3, #1
 8004118:	e022      	b.n	8004160 <HAL_I2C_Init+0x1dc>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10e      	bne.n	8004140 <HAL_I2C_Init+0x1bc>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	1e58      	subs	r0, r3, #1
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6859      	ldr	r1, [r3, #4]
 800412a:	460b      	mov	r3, r1
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	440b      	add	r3, r1
 8004130:	fbb0 f3f3 	udiv	r3, r0, r3
 8004134:	3301      	adds	r3, #1
 8004136:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800413a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800413e:	e00f      	b.n	8004160 <HAL_I2C_Init+0x1dc>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	1e58      	subs	r0, r3, #1
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6859      	ldr	r1, [r3, #4]
 8004148:	460b      	mov	r3, r1
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	0099      	lsls	r1, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	fbb0 f3f3 	udiv	r3, r0, r3
 8004156:	3301      	adds	r3, #1
 8004158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800415c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004160:	6879      	ldr	r1, [r7, #4]
 8004162:	6809      	ldr	r1, [r1, #0]
 8004164:	4313      	orrs	r3, r2
 8004166:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69da      	ldr	r2, [r3, #28]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	431a      	orrs	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800418e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6911      	ldr	r1, [r2, #16]
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	68d2      	ldr	r2, [r2, #12]
 800419a:	4311      	orrs	r1, r2
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6812      	ldr	r2, [r2, #0]
 80041a0:	430b      	orrs	r3, r1
 80041a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	695a      	ldr	r2, [r3, #20]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	430a      	orrs	r2, r1
 80041be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 0201 	orr.w	r2, r2, #1
 80041ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2220      	movs	r2, #32
 80041da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	000186a0 	.word	0x000186a0
 80041fc:	001e847f 	.word	0x001e847f
 8004200:	003d08ff 	.word	0x003d08ff
 8004204:	431bde83 	.word	0x431bde83
 8004208:	10624dd3 	.word	0x10624dd3

0800420c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004216:	2300      	movs	r3, #0
 8004218:	603b      	str	r3, [r7, #0]
 800421a:	4b20      	ldr	r3, [pc, #128]	; (800429c <HAL_PWREx_EnableOverDrive+0x90>)
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	4a1f      	ldr	r2, [pc, #124]	; (800429c <HAL_PWREx_EnableOverDrive+0x90>)
 8004220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004224:	6413      	str	r3, [r2, #64]	; 0x40
 8004226:	4b1d      	ldr	r3, [pc, #116]	; (800429c <HAL_PWREx_EnableOverDrive+0x90>)
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422e:	603b      	str	r3, [r7, #0]
 8004230:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004232:	4b1b      	ldr	r3, [pc, #108]	; (80042a0 <HAL_PWREx_EnableOverDrive+0x94>)
 8004234:	2201      	movs	r2, #1
 8004236:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004238:	f7fe ff7c 	bl	8003134 <HAL_GetTick>
 800423c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800423e:	e009      	b.n	8004254 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004240:	f7fe ff78 	bl	8003134 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800424e:	d901      	bls.n	8004254 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e01f      	b.n	8004294 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004254:	4b13      	ldr	r3, [pc, #76]	; (80042a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800425c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004260:	d1ee      	bne.n	8004240 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004262:	4b11      	ldr	r3, [pc, #68]	; (80042a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004264:	2201      	movs	r2, #1
 8004266:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004268:	f7fe ff64 	bl	8003134 <HAL_GetTick>
 800426c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800426e:	e009      	b.n	8004284 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004270:	f7fe ff60 	bl	8003134 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800427e:	d901      	bls.n	8004284 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e007      	b.n	8004294 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004284:	4b07      	ldr	r3, [pc, #28]	; (80042a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004290:	d1ee      	bne.n	8004270 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	40023800 	.word	0x40023800
 80042a0:	420e0040 	.word	0x420e0040
 80042a4:	40007000 	.word	0x40007000
 80042a8:	420e0044 	.word	0x420e0044

080042ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e0cc      	b.n	800445a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042c0:	4b68      	ldr	r3, [pc, #416]	; (8004464 <HAL_RCC_ClockConfig+0x1b8>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 030f 	and.w	r3, r3, #15
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d90c      	bls.n	80042e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ce:	4b65      	ldr	r3, [pc, #404]	; (8004464 <HAL_RCC_ClockConfig+0x1b8>)
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	b2d2      	uxtb	r2, r2
 80042d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042d6:	4b63      	ldr	r3, [pc, #396]	; (8004464 <HAL_RCC_ClockConfig+0x1b8>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d001      	beq.n	80042e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e0b8      	b.n	800445a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d020      	beq.n	8004336 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0304 	and.w	r3, r3, #4
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d005      	beq.n	800430c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004300:	4b59      	ldr	r3, [pc, #356]	; (8004468 <HAL_RCC_ClockConfig+0x1bc>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	4a58      	ldr	r2, [pc, #352]	; (8004468 <HAL_RCC_ClockConfig+0x1bc>)
 8004306:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800430a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0308 	and.w	r3, r3, #8
 8004314:	2b00      	cmp	r3, #0
 8004316:	d005      	beq.n	8004324 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004318:	4b53      	ldr	r3, [pc, #332]	; (8004468 <HAL_RCC_ClockConfig+0x1bc>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	4a52      	ldr	r2, [pc, #328]	; (8004468 <HAL_RCC_ClockConfig+0x1bc>)
 800431e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004322:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004324:	4b50      	ldr	r3, [pc, #320]	; (8004468 <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	494d      	ldr	r1, [pc, #308]	; (8004468 <HAL_RCC_ClockConfig+0x1bc>)
 8004332:	4313      	orrs	r3, r2
 8004334:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d044      	beq.n	80043cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d107      	bne.n	800435a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434a:	4b47      	ldr	r3, [pc, #284]	; (8004468 <HAL_RCC_ClockConfig+0x1bc>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d119      	bne.n	800438a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e07f      	b.n	800445a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2b02      	cmp	r3, #2
 8004360:	d003      	beq.n	800436a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004366:	2b03      	cmp	r3, #3
 8004368:	d107      	bne.n	800437a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800436a:	4b3f      	ldr	r3, [pc, #252]	; (8004468 <HAL_RCC_ClockConfig+0x1bc>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d109      	bne.n	800438a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e06f      	b.n	800445a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800437a:	4b3b      	ldr	r3, [pc, #236]	; (8004468 <HAL_RCC_ClockConfig+0x1bc>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e067      	b.n	800445a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800438a:	4b37      	ldr	r3, [pc, #220]	; (8004468 <HAL_RCC_ClockConfig+0x1bc>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f023 0203 	bic.w	r2, r3, #3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	4934      	ldr	r1, [pc, #208]	; (8004468 <HAL_RCC_ClockConfig+0x1bc>)
 8004398:	4313      	orrs	r3, r2
 800439a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800439c:	f7fe feca 	bl	8003134 <HAL_GetTick>
 80043a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a2:	e00a      	b.n	80043ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043a4:	f7fe fec6 	bl	8003134 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e04f      	b.n	800445a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ba:	4b2b      	ldr	r3, [pc, #172]	; (8004468 <HAL_RCC_ClockConfig+0x1bc>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 020c 	and.w	r2, r3, #12
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d1eb      	bne.n	80043a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043cc:	4b25      	ldr	r3, [pc, #148]	; (8004464 <HAL_RCC_ClockConfig+0x1b8>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 030f 	and.w	r3, r3, #15
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d20c      	bcs.n	80043f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043da:	4b22      	ldr	r3, [pc, #136]	; (8004464 <HAL_RCC_ClockConfig+0x1b8>)
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	b2d2      	uxtb	r2, r2
 80043e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e2:	4b20      	ldr	r3, [pc, #128]	; (8004464 <HAL_RCC_ClockConfig+0x1b8>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 030f 	and.w	r3, r3, #15
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d001      	beq.n	80043f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e032      	b.n	800445a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0304 	and.w	r3, r3, #4
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d008      	beq.n	8004412 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004400:	4b19      	ldr	r3, [pc, #100]	; (8004468 <HAL_RCC_ClockConfig+0x1bc>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	4916      	ldr	r1, [pc, #88]	; (8004468 <HAL_RCC_ClockConfig+0x1bc>)
 800440e:	4313      	orrs	r3, r2
 8004410:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0308 	and.w	r3, r3, #8
 800441a:	2b00      	cmp	r3, #0
 800441c:	d009      	beq.n	8004432 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800441e:	4b12      	ldr	r3, [pc, #72]	; (8004468 <HAL_RCC_ClockConfig+0x1bc>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	490e      	ldr	r1, [pc, #56]	; (8004468 <HAL_RCC_ClockConfig+0x1bc>)
 800442e:	4313      	orrs	r3, r2
 8004430:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004432:	f000 fb7f 	bl	8004b34 <HAL_RCC_GetSysClockFreq>
 8004436:	4602      	mov	r2, r0
 8004438:	4b0b      	ldr	r3, [pc, #44]	; (8004468 <HAL_RCC_ClockConfig+0x1bc>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	091b      	lsrs	r3, r3, #4
 800443e:	f003 030f 	and.w	r3, r3, #15
 8004442:	490a      	ldr	r1, [pc, #40]	; (800446c <HAL_RCC_ClockConfig+0x1c0>)
 8004444:	5ccb      	ldrb	r3, [r1, r3]
 8004446:	fa22 f303 	lsr.w	r3, r2, r3
 800444a:	4a09      	ldr	r2, [pc, #36]	; (8004470 <HAL_RCC_ClockConfig+0x1c4>)
 800444c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800444e:	4b09      	ldr	r3, [pc, #36]	; (8004474 <HAL_RCC_ClockConfig+0x1c8>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4618      	mov	r0, r3
 8004454:	f7fe fe2a 	bl	80030ac <HAL_InitTick>

  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	40023c00 	.word	0x40023c00
 8004468:	40023800 	.word	0x40023800
 800446c:	0800a588 	.word	0x0800a588
 8004470:	20000028 	.word	0x20000028
 8004474:	2000002c 	.word	0x2000002c

08004478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800447c:	4b03      	ldr	r3, [pc, #12]	; (800448c <HAL_RCC_GetHCLKFreq+0x14>)
 800447e:	681b      	ldr	r3, [r3, #0]
}
 8004480:	4618      	mov	r0, r3
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	20000028 	.word	0x20000028

08004490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004494:	f7ff fff0 	bl	8004478 <HAL_RCC_GetHCLKFreq>
 8004498:	4602      	mov	r2, r0
 800449a:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	0a9b      	lsrs	r3, r3, #10
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	4903      	ldr	r1, [pc, #12]	; (80044b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044a6:	5ccb      	ldrb	r3, [r1, r3]
 80044a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	40023800 	.word	0x40023800
 80044b4:	0800a598 	.word	0x0800a598

080044b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044bc:	f7ff ffdc 	bl	8004478 <HAL_RCC_GetHCLKFreq>
 80044c0:	4602      	mov	r2, r0
 80044c2:	4b05      	ldr	r3, [pc, #20]	; (80044d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	0b5b      	lsrs	r3, r3, #13
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	4903      	ldr	r1, [pc, #12]	; (80044dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80044ce:	5ccb      	ldrb	r3, [r1, r3]
 80044d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40023800 	.word	0x40023800
 80044dc:	0800a598 	.word	0x0800a598

080044e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b08c      	sub	sp, #48	; 0x30
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004500:	2300      	movs	r3, #0
 8004502:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004508:	2300      	movs	r3, #0
 800450a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	2b00      	cmp	r3, #0
 8004516:	d010      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004518:	4b6f      	ldr	r3, [pc, #444]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800451a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800451e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	496c      	ldr	r1, [pc, #432]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004528:	4313      	orrs	r3, r2
 800452a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004536:	2301      	movs	r3, #1
 8004538:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d010      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004546:	4b64      	ldr	r3, [pc, #400]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800454c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004554:	4960      	ldr	r1, [pc, #384]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004556:	4313      	orrs	r3, r2
 8004558:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004564:	2301      	movs	r3, #1
 8004566:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b00      	cmp	r3, #0
 8004572:	d017      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004574:	4b58      	ldr	r3, [pc, #352]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004576:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800457a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004582:	4955      	ldr	r1, [pc, #340]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004584:	4313      	orrs	r3, r2
 8004586:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004592:	d101      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004594:	2301      	movs	r3, #1
 8004596:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80045a0:	2301      	movs	r3, #1
 80045a2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d017      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045b0:	4b49      	ldr	r3, [pc, #292]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80045b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045be:	4946      	ldr	r1, [pc, #280]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045ce:	d101      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80045d0:	2301      	movs	r3, #1
 80045d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80045dc:	2301      	movs	r3, #1
 80045de:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0320 	and.w	r3, r3, #32
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 808a 	beq.w	8004702 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80045ee:	2300      	movs	r3, #0
 80045f0:	60bb      	str	r3, [r7, #8]
 80045f2:	4b39      	ldr	r3, [pc, #228]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	4a38      	ldr	r2, [pc, #224]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80045f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045fc:	6413      	str	r3, [r2, #64]	; 0x40
 80045fe:	4b36      	ldr	r3, [pc, #216]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004606:	60bb      	str	r3, [r7, #8]
 8004608:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800460a:	4b34      	ldr	r3, [pc, #208]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a33      	ldr	r2, [pc, #204]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004614:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004616:	f7fe fd8d 	bl	8003134 <HAL_GetTick>
 800461a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800461c:	e008      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800461e:	f7fe fd89 	bl	8003134 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e278      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004630:	4b2a      	ldr	r3, [pc, #168]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0f0      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800463c:	4b26      	ldr	r3, [pc, #152]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800463e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004640:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004644:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d02f      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004650:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004654:	6a3a      	ldr	r2, [r7, #32]
 8004656:	429a      	cmp	r2, r3
 8004658:	d028      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800465a:	4b1f      	ldr	r3, [pc, #124]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800465c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004662:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004664:	4b1e      	ldr	r3, [pc, #120]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004666:	2201      	movs	r2, #1
 8004668:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800466a:	4b1d      	ldr	r3, [pc, #116]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800466c:	2200      	movs	r2, #0
 800466e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004670:	4a19      	ldr	r2, [pc, #100]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004676:	4b18      	ldr	r3, [pc, #96]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b01      	cmp	r3, #1
 8004680:	d114      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004682:	f7fe fd57 	bl	8003134 <HAL_GetTick>
 8004686:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004688:	e00a      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800468a:	f7fe fd53 	bl	8003134 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	f241 3288 	movw	r2, #5000	; 0x1388
 8004698:	4293      	cmp	r3, r2
 800469a:	d901      	bls.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e240      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a0:	4b0d      	ldr	r3, [pc, #52]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80046a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d0ee      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046b8:	d114      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80046ba:	4b07      	ldr	r3, [pc, #28]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80046ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ce:	4902      	ldr	r1, [pc, #8]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	608b      	str	r3, [r1, #8]
 80046d4:	e00c      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80046d6:	bf00      	nop
 80046d8:	40023800 	.word	0x40023800
 80046dc:	40007000 	.word	0x40007000
 80046e0:	42470e40 	.word	0x42470e40
 80046e4:	4b4a      	ldr	r3, [pc, #296]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	4a49      	ldr	r2, [pc, #292]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80046ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80046ee:	6093      	str	r3, [r2, #8]
 80046f0:	4b47      	ldr	r3, [pc, #284]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80046f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046fc:	4944      	ldr	r1, [pc, #272]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0310 	and.w	r3, r3, #16
 800470a:	2b00      	cmp	r3, #0
 800470c:	d004      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004714:	4b3f      	ldr	r3, [pc, #252]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004716:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00a      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004724:	4b3a      	ldr	r3, [pc, #232]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800472a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004732:	4937      	ldr	r1, [pc, #220]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004734:	4313      	orrs	r3, r2
 8004736:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00a      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004746:	4b32      	ldr	r3, [pc, #200]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800474c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004754:	492e      	ldr	r1, [pc, #184]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004756:	4313      	orrs	r3, r2
 8004758:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004764:	2b00      	cmp	r3, #0
 8004766:	d011      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004768:	4b29      	ldr	r3, [pc, #164]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800476a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800476e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004776:	4926      	ldr	r1, [pc, #152]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004778:	4313      	orrs	r3, r2
 800477a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004782:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004786:	d101      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004788:	2301      	movs	r3, #1
 800478a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00a      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004798:	4b1d      	ldr	r3, [pc, #116]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800479a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800479e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a6:	491a      	ldr	r1, [pc, #104]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d011      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80047ba:	4b15      	ldr	r3, [pc, #84]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80047bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047c0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c8:	4911      	ldr	r1, [pc, #68]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047d8:	d101      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80047da:	2301      	movs	r3, #1
 80047dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80047de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d005      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047ec:	f040 80ff 	bne.w	80049ee <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80047f0:	4b09      	ldr	r3, [pc, #36]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047f6:	f7fe fc9d 	bl	8003134 <HAL_GetTick>
 80047fa:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047fc:	e00e      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80047fe:	f7fe fc99 	bl	8003134 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d907      	bls.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e188      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004810:	40023800 	.word	0x40023800
 8004814:	424711e0 	.word	0x424711e0
 8004818:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800481c:	4b7e      	ldr	r3, [pc, #504]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1ea      	bne.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	2b00      	cmp	r3, #0
 8004832:	d003      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004838:	2b00      	cmp	r3, #0
 800483a:	d009      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004844:	2b00      	cmp	r3, #0
 8004846:	d028      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484c:	2b00      	cmp	r3, #0
 800484e:	d124      	bne.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004850:	4b71      	ldr	r3, [pc, #452]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004856:	0c1b      	lsrs	r3, r3, #16
 8004858:	f003 0303 	and.w	r3, r3, #3
 800485c:	3301      	adds	r3, #1
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004862:	4b6d      	ldr	r3, [pc, #436]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004868:	0e1b      	lsrs	r3, r3, #24
 800486a:	f003 030f 	and.w	r3, r3, #15
 800486e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	019b      	lsls	r3, r3, #6
 800487a:	431a      	orrs	r2, r3
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	085b      	lsrs	r3, r3, #1
 8004880:	3b01      	subs	r3, #1
 8004882:	041b      	lsls	r3, r3, #16
 8004884:	431a      	orrs	r2, r3
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	061b      	lsls	r3, r3, #24
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	071b      	lsls	r3, r3, #28
 8004892:	4961      	ldr	r1, [pc, #388]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004894:	4313      	orrs	r3, r2
 8004896:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0304 	and.w	r3, r3, #4
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d004      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048ae:	d00a      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d035      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048c4:	d130      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80048c6:	4b54      	ldr	r3, [pc, #336]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80048c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048cc:	0c1b      	lsrs	r3, r3, #16
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	3301      	adds	r3, #1
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048d8:	4b4f      	ldr	r3, [pc, #316]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80048da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048de:	0f1b      	lsrs	r3, r3, #28
 80048e0:	f003 0307 	and.w	r3, r3, #7
 80048e4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	019b      	lsls	r3, r3, #6
 80048f0:	431a      	orrs	r2, r3
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	085b      	lsrs	r3, r3, #1
 80048f6:	3b01      	subs	r3, #1
 80048f8:	041b      	lsls	r3, r3, #16
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	061b      	lsls	r3, r3, #24
 8004902:	431a      	orrs	r2, r3
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	071b      	lsls	r3, r3, #28
 8004908:	4943      	ldr	r1, [pc, #268]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800490a:	4313      	orrs	r3, r2
 800490c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004910:	4b41      	ldr	r3, [pc, #260]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004912:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004916:	f023 021f 	bic.w	r2, r3, #31
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491e:	3b01      	subs	r3, #1
 8004920:	493d      	ldr	r1, [pc, #244]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004930:	2b00      	cmp	r3, #0
 8004932:	d029      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004938:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800493c:	d124      	bne.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800493e:	4b36      	ldr	r3, [pc, #216]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004940:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004944:	0c1b      	lsrs	r3, r3, #16
 8004946:	f003 0303 	and.w	r3, r3, #3
 800494a:	3301      	adds	r3, #1
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004950:	4b31      	ldr	r3, [pc, #196]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004956:	0f1b      	lsrs	r3, r3, #28
 8004958:	f003 0307 	and.w	r3, r3, #7
 800495c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	019b      	lsls	r3, r3, #6
 8004968:	431a      	orrs	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	085b      	lsrs	r3, r3, #1
 8004970:	3b01      	subs	r3, #1
 8004972:	041b      	lsls	r3, r3, #16
 8004974:	431a      	orrs	r2, r3
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	061b      	lsls	r3, r3, #24
 800497a:	431a      	orrs	r2, r3
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	071b      	lsls	r3, r3, #28
 8004980:	4925      	ldr	r1, [pc, #148]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004982:	4313      	orrs	r3, r2
 8004984:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004990:	2b00      	cmp	r3, #0
 8004992:	d016      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	019b      	lsls	r3, r3, #6
 800499e:	431a      	orrs	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	085b      	lsrs	r3, r3, #1
 80049a6:	3b01      	subs	r3, #1
 80049a8:	041b      	lsls	r3, r3, #16
 80049aa:	431a      	orrs	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	061b      	lsls	r3, r3, #24
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	071b      	lsls	r3, r3, #28
 80049ba:	4917      	ldr	r1, [pc, #92]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049c2:	4b16      	ldr	r3, [pc, #88]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80049c4:	2201      	movs	r2, #1
 80049c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049c8:	f7fe fbb4 	bl	8003134 <HAL_GetTick>
 80049cc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049ce:	e008      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80049d0:	f7fe fbb0 	bl	8003134 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e09f      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049e2:	4b0d      	ldr	r3, [pc, #52]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0f0      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80049ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	f040 8095 	bne.w	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80049f6:	4b0a      	ldr	r3, [pc, #40]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049fc:	f7fe fb9a 	bl	8003134 <HAL_GetTick>
 8004a00:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a02:	e00f      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004a04:	f7fe fb96 	bl	8003134 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d908      	bls.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e085      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004a16:	bf00      	nop
 8004a18:	40023800 	.word	0x40023800
 8004a1c:	42470068 	.word	0x42470068
 8004a20:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a24:	4b41      	ldr	r3, [pc, #260]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a30:	d0e8      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0304 	and.w	r3, r3, #4
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d009      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d02b      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d127      	bne.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004a5a:	4b34      	ldr	r3, [pc, #208]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a60:	0c1b      	lsrs	r3, r3, #16
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	3301      	adds	r3, #1
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	699a      	ldr	r2, [r3, #24]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	69db      	ldr	r3, [r3, #28]
 8004a74:	019b      	lsls	r3, r3, #6
 8004a76:	431a      	orrs	r2, r3
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	085b      	lsrs	r3, r3, #1
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	041b      	lsls	r3, r3, #16
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	061b      	lsls	r3, r3, #24
 8004a88:	4928      	ldr	r1, [pc, #160]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a90:	4b26      	ldr	r3, [pc, #152]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004a92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a96:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	021b      	lsls	r3, r3, #8
 8004aa2:	4922      	ldr	r1, [pc, #136]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d01d      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004abe:	d118      	bne.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ac0:	4b1a      	ldr	r3, [pc, #104]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac6:	0e1b      	lsrs	r3, r3, #24
 8004ac8:	f003 030f 	and.w	r3, r3, #15
 8004acc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	699a      	ldr	r2, [r3, #24]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	019b      	lsls	r3, r3, #6
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	085b      	lsrs	r3, r3, #1
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	041b      	lsls	r3, r3, #16
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	061b      	lsls	r3, r3, #24
 8004aea:	4910      	ldr	r1, [pc, #64]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004af2:	4b0f      	ldr	r3, [pc, #60]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004af4:	2201      	movs	r2, #1
 8004af6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004af8:	f7fe fb1c 	bl	8003134 <HAL_GetTick>
 8004afc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004afe:	e008      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004b00:	f7fe fb18 	bl	8003134 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e007      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b12:	4b06      	ldr	r3, [pc, #24]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b1e:	d1ef      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3730      	adds	r7, #48	; 0x30
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	40023800 	.word	0x40023800
 8004b30:	42470070 	.word	0x42470070

08004b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b38:	b0ae      	sub	sp, #184	; 0xb8
 8004b3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004b42:	2300      	movs	r3, #0
 8004b44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b5a:	4bcb      	ldr	r3, [pc, #812]	; (8004e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 030c 	and.w	r3, r3, #12
 8004b62:	2b0c      	cmp	r3, #12
 8004b64:	f200 8206 	bhi.w	8004f74 <HAL_RCC_GetSysClockFreq+0x440>
 8004b68:	a201      	add	r2, pc, #4	; (adr r2, 8004b70 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6e:	bf00      	nop
 8004b70:	08004ba5 	.word	0x08004ba5
 8004b74:	08004f75 	.word	0x08004f75
 8004b78:	08004f75 	.word	0x08004f75
 8004b7c:	08004f75 	.word	0x08004f75
 8004b80:	08004bad 	.word	0x08004bad
 8004b84:	08004f75 	.word	0x08004f75
 8004b88:	08004f75 	.word	0x08004f75
 8004b8c:	08004f75 	.word	0x08004f75
 8004b90:	08004bb5 	.word	0x08004bb5
 8004b94:	08004f75 	.word	0x08004f75
 8004b98:	08004f75 	.word	0x08004f75
 8004b9c:	08004f75 	.word	0x08004f75
 8004ba0:	08004da5 	.word	0x08004da5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ba4:	4bb9      	ldr	r3, [pc, #740]	; (8004e8c <HAL_RCC_GetSysClockFreq+0x358>)
 8004ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004baa:	e1e7      	b.n	8004f7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bac:	4bb8      	ldr	r3, [pc, #736]	; (8004e90 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004bae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004bb2:	e1e3      	b.n	8004f7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bb4:	4bb4      	ldr	r3, [pc, #720]	; (8004e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bc0:	4bb1      	ldr	r3, [pc, #708]	; (8004e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d071      	beq.n	8004cb0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bcc:	4bae      	ldr	r3, [pc, #696]	; (8004e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	099b      	lsrs	r3, r3, #6
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004bd8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004bdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004be8:	2300      	movs	r3, #0
 8004bea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004bee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004bf2:	4622      	mov	r2, r4
 8004bf4:	462b      	mov	r3, r5
 8004bf6:	f04f 0000 	mov.w	r0, #0
 8004bfa:	f04f 0100 	mov.w	r1, #0
 8004bfe:	0159      	lsls	r1, r3, #5
 8004c00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c04:	0150      	lsls	r0, r2, #5
 8004c06:	4602      	mov	r2, r0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	4621      	mov	r1, r4
 8004c0c:	1a51      	subs	r1, r2, r1
 8004c0e:	6439      	str	r1, [r7, #64]	; 0x40
 8004c10:	4629      	mov	r1, r5
 8004c12:	eb63 0301 	sbc.w	r3, r3, r1
 8004c16:	647b      	str	r3, [r7, #68]	; 0x44
 8004c18:	f04f 0200 	mov.w	r2, #0
 8004c1c:	f04f 0300 	mov.w	r3, #0
 8004c20:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004c24:	4649      	mov	r1, r9
 8004c26:	018b      	lsls	r3, r1, #6
 8004c28:	4641      	mov	r1, r8
 8004c2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c2e:	4641      	mov	r1, r8
 8004c30:	018a      	lsls	r2, r1, #6
 8004c32:	4641      	mov	r1, r8
 8004c34:	1a51      	subs	r1, r2, r1
 8004c36:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c38:	4649      	mov	r1, r9
 8004c3a:	eb63 0301 	sbc.w	r3, r3, r1
 8004c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c40:	f04f 0200 	mov.w	r2, #0
 8004c44:	f04f 0300 	mov.w	r3, #0
 8004c48:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004c4c:	4649      	mov	r1, r9
 8004c4e:	00cb      	lsls	r3, r1, #3
 8004c50:	4641      	mov	r1, r8
 8004c52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c56:	4641      	mov	r1, r8
 8004c58:	00ca      	lsls	r2, r1, #3
 8004c5a:	4610      	mov	r0, r2
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	4603      	mov	r3, r0
 8004c60:	4622      	mov	r2, r4
 8004c62:	189b      	adds	r3, r3, r2
 8004c64:	633b      	str	r3, [r7, #48]	; 0x30
 8004c66:	462b      	mov	r3, r5
 8004c68:	460a      	mov	r2, r1
 8004c6a:	eb42 0303 	adc.w	r3, r2, r3
 8004c6e:	637b      	str	r3, [r7, #52]	; 0x34
 8004c70:	f04f 0200 	mov.w	r2, #0
 8004c74:	f04f 0300 	mov.w	r3, #0
 8004c78:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c7c:	4629      	mov	r1, r5
 8004c7e:	024b      	lsls	r3, r1, #9
 8004c80:	4621      	mov	r1, r4
 8004c82:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c86:	4621      	mov	r1, r4
 8004c88:	024a      	lsls	r2, r1, #9
 8004c8a:	4610      	mov	r0, r2
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c92:	2200      	movs	r2, #0
 8004c94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c9c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004ca0:	f7fb fff2 	bl	8000c88 <__aeabi_uldivmod>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	4613      	mov	r3, r2
 8004caa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004cae:	e067      	b.n	8004d80 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cb0:	4b75      	ldr	r3, [pc, #468]	; (8004e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	099b      	lsrs	r3, r3, #6
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004cbc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004cc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cc8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cca:	2300      	movs	r3, #0
 8004ccc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004cce:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004cd2:	4622      	mov	r2, r4
 8004cd4:	462b      	mov	r3, r5
 8004cd6:	f04f 0000 	mov.w	r0, #0
 8004cda:	f04f 0100 	mov.w	r1, #0
 8004cde:	0159      	lsls	r1, r3, #5
 8004ce0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ce4:	0150      	lsls	r0, r2, #5
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	460b      	mov	r3, r1
 8004cea:	4621      	mov	r1, r4
 8004cec:	1a51      	subs	r1, r2, r1
 8004cee:	62b9      	str	r1, [r7, #40]	; 0x28
 8004cf0:	4629      	mov	r1, r5
 8004cf2:	eb63 0301 	sbc.w	r3, r3, r1
 8004cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	f04f 0300 	mov.w	r3, #0
 8004d00:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004d04:	4649      	mov	r1, r9
 8004d06:	018b      	lsls	r3, r1, #6
 8004d08:	4641      	mov	r1, r8
 8004d0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d0e:	4641      	mov	r1, r8
 8004d10:	018a      	lsls	r2, r1, #6
 8004d12:	4641      	mov	r1, r8
 8004d14:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d18:	4649      	mov	r1, r9
 8004d1a:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d1e:	f04f 0200 	mov.w	r2, #0
 8004d22:	f04f 0300 	mov.w	r3, #0
 8004d26:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d2a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d32:	4692      	mov	sl, r2
 8004d34:	469b      	mov	fp, r3
 8004d36:	4623      	mov	r3, r4
 8004d38:	eb1a 0303 	adds.w	r3, sl, r3
 8004d3c:	623b      	str	r3, [r7, #32]
 8004d3e:	462b      	mov	r3, r5
 8004d40:	eb4b 0303 	adc.w	r3, fp, r3
 8004d44:	627b      	str	r3, [r7, #36]	; 0x24
 8004d46:	f04f 0200 	mov.w	r2, #0
 8004d4a:	f04f 0300 	mov.w	r3, #0
 8004d4e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004d52:	4629      	mov	r1, r5
 8004d54:	028b      	lsls	r3, r1, #10
 8004d56:	4621      	mov	r1, r4
 8004d58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d5c:	4621      	mov	r1, r4
 8004d5e:	028a      	lsls	r2, r1, #10
 8004d60:	4610      	mov	r0, r2
 8004d62:	4619      	mov	r1, r3
 8004d64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d68:	2200      	movs	r2, #0
 8004d6a:	673b      	str	r3, [r7, #112]	; 0x70
 8004d6c:	677a      	str	r2, [r7, #116]	; 0x74
 8004d6e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004d72:	f7fb ff89 	bl	8000c88 <__aeabi_uldivmod>
 8004d76:	4602      	mov	r2, r0
 8004d78:	460b      	mov	r3, r1
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d80:	4b41      	ldr	r3, [pc, #260]	; (8004e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	0c1b      	lsrs	r3, r3, #16
 8004d86:	f003 0303 	and.w	r3, r3, #3
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004d92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004da2:	e0eb      	b.n	8004f7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004da4:	4b38      	ldr	r3, [pc, #224]	; (8004e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004db0:	4b35      	ldr	r3, [pc, #212]	; (8004e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d06b      	beq.n	8004e94 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dbc:	4b32      	ldr	r3, [pc, #200]	; (8004e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	099b      	lsrs	r3, r3, #6
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dc6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004dc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dce:	663b      	str	r3, [r7, #96]	; 0x60
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	667b      	str	r3, [r7, #100]	; 0x64
 8004dd4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004dd8:	4622      	mov	r2, r4
 8004dda:	462b      	mov	r3, r5
 8004ddc:	f04f 0000 	mov.w	r0, #0
 8004de0:	f04f 0100 	mov.w	r1, #0
 8004de4:	0159      	lsls	r1, r3, #5
 8004de6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dea:	0150      	lsls	r0, r2, #5
 8004dec:	4602      	mov	r2, r0
 8004dee:	460b      	mov	r3, r1
 8004df0:	4621      	mov	r1, r4
 8004df2:	1a51      	subs	r1, r2, r1
 8004df4:	61b9      	str	r1, [r7, #24]
 8004df6:	4629      	mov	r1, r5
 8004df8:	eb63 0301 	sbc.w	r3, r3, r1
 8004dfc:	61fb      	str	r3, [r7, #28]
 8004dfe:	f04f 0200 	mov.w	r2, #0
 8004e02:	f04f 0300 	mov.w	r3, #0
 8004e06:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004e0a:	4659      	mov	r1, fp
 8004e0c:	018b      	lsls	r3, r1, #6
 8004e0e:	4651      	mov	r1, sl
 8004e10:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e14:	4651      	mov	r1, sl
 8004e16:	018a      	lsls	r2, r1, #6
 8004e18:	4651      	mov	r1, sl
 8004e1a:	ebb2 0801 	subs.w	r8, r2, r1
 8004e1e:	4659      	mov	r1, fp
 8004e20:	eb63 0901 	sbc.w	r9, r3, r1
 8004e24:	f04f 0200 	mov.w	r2, #0
 8004e28:	f04f 0300 	mov.w	r3, #0
 8004e2c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e30:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e34:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e38:	4690      	mov	r8, r2
 8004e3a:	4699      	mov	r9, r3
 8004e3c:	4623      	mov	r3, r4
 8004e3e:	eb18 0303 	adds.w	r3, r8, r3
 8004e42:	613b      	str	r3, [r7, #16]
 8004e44:	462b      	mov	r3, r5
 8004e46:	eb49 0303 	adc.w	r3, r9, r3
 8004e4a:	617b      	str	r3, [r7, #20]
 8004e4c:	f04f 0200 	mov.w	r2, #0
 8004e50:	f04f 0300 	mov.w	r3, #0
 8004e54:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004e58:	4629      	mov	r1, r5
 8004e5a:	024b      	lsls	r3, r1, #9
 8004e5c:	4621      	mov	r1, r4
 8004e5e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e62:	4621      	mov	r1, r4
 8004e64:	024a      	lsls	r2, r1, #9
 8004e66:	4610      	mov	r0, r2
 8004e68:	4619      	mov	r1, r3
 8004e6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e6e:	2200      	movs	r2, #0
 8004e70:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e72:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004e74:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e78:	f7fb ff06 	bl	8000c88 <__aeabi_uldivmod>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	460b      	mov	r3, r1
 8004e80:	4613      	mov	r3, r2
 8004e82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e86:	e065      	b.n	8004f54 <HAL_RCC_GetSysClockFreq+0x420>
 8004e88:	40023800 	.word	0x40023800
 8004e8c:	00f42400 	.word	0x00f42400
 8004e90:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e94:	4b3d      	ldr	r3, [pc, #244]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x458>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	099b      	lsrs	r3, r3, #6
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	4611      	mov	r1, r2
 8004ea0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ea4:	653b      	str	r3, [r7, #80]	; 0x50
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	657b      	str	r3, [r7, #84]	; 0x54
 8004eaa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004eae:	4642      	mov	r2, r8
 8004eb0:	464b      	mov	r3, r9
 8004eb2:	f04f 0000 	mov.w	r0, #0
 8004eb6:	f04f 0100 	mov.w	r1, #0
 8004eba:	0159      	lsls	r1, r3, #5
 8004ebc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ec0:	0150      	lsls	r0, r2, #5
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	4641      	mov	r1, r8
 8004ec8:	1a51      	subs	r1, r2, r1
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	4649      	mov	r1, r9
 8004ece:	eb63 0301 	sbc.w	r3, r3, r1
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	f04f 0300 	mov.w	r3, #0
 8004edc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004ee0:	4659      	mov	r1, fp
 8004ee2:	018b      	lsls	r3, r1, #6
 8004ee4:	4651      	mov	r1, sl
 8004ee6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004eea:	4651      	mov	r1, sl
 8004eec:	018a      	lsls	r2, r1, #6
 8004eee:	4651      	mov	r1, sl
 8004ef0:	1a54      	subs	r4, r2, r1
 8004ef2:	4659      	mov	r1, fp
 8004ef4:	eb63 0501 	sbc.w	r5, r3, r1
 8004ef8:	f04f 0200 	mov.w	r2, #0
 8004efc:	f04f 0300 	mov.w	r3, #0
 8004f00:	00eb      	lsls	r3, r5, #3
 8004f02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f06:	00e2      	lsls	r2, r4, #3
 8004f08:	4614      	mov	r4, r2
 8004f0a:	461d      	mov	r5, r3
 8004f0c:	4643      	mov	r3, r8
 8004f0e:	18e3      	adds	r3, r4, r3
 8004f10:	603b      	str	r3, [r7, #0]
 8004f12:	464b      	mov	r3, r9
 8004f14:	eb45 0303 	adc.w	r3, r5, r3
 8004f18:	607b      	str	r3, [r7, #4]
 8004f1a:	f04f 0200 	mov.w	r2, #0
 8004f1e:	f04f 0300 	mov.w	r3, #0
 8004f22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f26:	4629      	mov	r1, r5
 8004f28:	028b      	lsls	r3, r1, #10
 8004f2a:	4621      	mov	r1, r4
 8004f2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f30:	4621      	mov	r1, r4
 8004f32:	028a      	lsls	r2, r1, #10
 8004f34:	4610      	mov	r0, r2
 8004f36:	4619      	mov	r1, r3
 8004f38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f40:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004f42:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f46:	f7fb fe9f 	bl	8000c88 <__aeabi_uldivmod>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	4613      	mov	r3, r2
 8004f50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004f54:	4b0d      	ldr	r3, [pc, #52]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x458>)
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	0f1b      	lsrs	r3, r3, #28
 8004f5a:	f003 0307 	and.w	r3, r3, #7
 8004f5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004f62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004f66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004f72:	e003      	b.n	8004f7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f74:	4b06      	ldr	r3, [pc, #24]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004f76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004f7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	37b8      	adds	r7, #184	; 0xb8
 8004f84:	46bd      	mov	sp, r7
 8004f86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f8a:	bf00      	nop
 8004f8c:	40023800 	.word	0x40023800
 8004f90:	00f42400 	.word	0x00f42400

08004f94 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e28d      	b.n	80054c2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f000 8083 	beq.w	80050ba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004fb4:	4b94      	ldr	r3, [pc, #592]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f003 030c 	and.w	r3, r3, #12
 8004fbc:	2b04      	cmp	r3, #4
 8004fbe:	d019      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004fc0:	4b91      	ldr	r3, [pc, #580]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	d106      	bne.n	8004fda <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004fcc:	4b8e      	ldr	r3, [pc, #568]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fd8:	d00c      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fda:	4b8b      	ldr	r3, [pc, #556]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004fe2:	2b0c      	cmp	r3, #12
 8004fe4:	d112      	bne.n	800500c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fe6:	4b88      	ldr	r3, [pc, #544]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ff2:	d10b      	bne.n	800500c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ff4:	4b84      	ldr	r3, [pc, #528]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d05b      	beq.n	80050b8 <HAL_RCC_OscConfig+0x124>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d157      	bne.n	80050b8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e25a      	b.n	80054c2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005014:	d106      	bne.n	8005024 <HAL_RCC_OscConfig+0x90>
 8005016:	4b7c      	ldr	r3, [pc, #496]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a7b      	ldr	r2, [pc, #492]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 800501c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005020:	6013      	str	r3, [r2, #0]
 8005022:	e01d      	b.n	8005060 <HAL_RCC_OscConfig+0xcc>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800502c:	d10c      	bne.n	8005048 <HAL_RCC_OscConfig+0xb4>
 800502e:	4b76      	ldr	r3, [pc, #472]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a75      	ldr	r2, [pc, #468]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 8005034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005038:	6013      	str	r3, [r2, #0]
 800503a:	4b73      	ldr	r3, [pc, #460]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a72      	ldr	r2, [pc, #456]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 8005040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005044:	6013      	str	r3, [r2, #0]
 8005046:	e00b      	b.n	8005060 <HAL_RCC_OscConfig+0xcc>
 8005048:	4b6f      	ldr	r3, [pc, #444]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a6e      	ldr	r2, [pc, #440]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 800504e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005052:	6013      	str	r3, [r2, #0]
 8005054:	4b6c      	ldr	r3, [pc, #432]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a6b      	ldr	r2, [pc, #428]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 800505a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800505e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d013      	beq.n	8005090 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005068:	f7fe f864 	bl	8003134 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005070:	f7fe f860 	bl	8003134 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b64      	cmp	r3, #100	; 0x64
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e21f      	b.n	80054c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005082:	4b61      	ldr	r3, [pc, #388]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0f0      	beq.n	8005070 <HAL_RCC_OscConfig+0xdc>
 800508e:	e014      	b.n	80050ba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005090:	f7fe f850 	bl	8003134 <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005096:	e008      	b.n	80050aa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005098:	f7fe f84c 	bl	8003134 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b64      	cmp	r3, #100	; 0x64
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e20b      	b.n	80054c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050aa:	4b57      	ldr	r3, [pc, #348]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1f0      	bne.n	8005098 <HAL_RCC_OscConfig+0x104>
 80050b6:	e000      	b.n	80050ba <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d06f      	beq.n	80051a6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80050c6:	4b50      	ldr	r3, [pc, #320]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 030c 	and.w	r3, r3, #12
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d017      	beq.n	8005102 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80050d2:	4b4d      	ldr	r3, [pc, #308]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80050da:	2b08      	cmp	r3, #8
 80050dc:	d105      	bne.n	80050ea <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80050de:	4b4a      	ldr	r3, [pc, #296]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00b      	beq.n	8005102 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050ea:	4b47      	ldr	r3, [pc, #284]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80050f2:	2b0c      	cmp	r3, #12
 80050f4:	d11c      	bne.n	8005130 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050f6:	4b44      	ldr	r3, [pc, #272]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d116      	bne.n	8005130 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005102:	4b41      	ldr	r3, [pc, #260]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d005      	beq.n	800511a <HAL_RCC_OscConfig+0x186>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d001      	beq.n	800511a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e1d3      	b.n	80054c2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800511a:	4b3b      	ldr	r3, [pc, #236]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	00db      	lsls	r3, r3, #3
 8005128:	4937      	ldr	r1, [pc, #220]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 800512a:	4313      	orrs	r3, r2
 800512c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800512e:	e03a      	b.n	80051a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d020      	beq.n	800517a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005138:	4b34      	ldr	r3, [pc, #208]	; (800520c <HAL_RCC_OscConfig+0x278>)
 800513a:	2201      	movs	r2, #1
 800513c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800513e:	f7fd fff9 	bl	8003134 <HAL_GetTick>
 8005142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005144:	e008      	b.n	8005158 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005146:	f7fd fff5 	bl	8003134 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b02      	cmp	r3, #2
 8005152:	d901      	bls.n	8005158 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e1b4      	b.n	80054c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005158:	4b2b      	ldr	r3, [pc, #172]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d0f0      	beq.n	8005146 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005164:	4b28      	ldr	r3, [pc, #160]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	00db      	lsls	r3, r3, #3
 8005172:	4925      	ldr	r1, [pc, #148]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 8005174:	4313      	orrs	r3, r2
 8005176:	600b      	str	r3, [r1, #0]
 8005178:	e015      	b.n	80051a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800517a:	4b24      	ldr	r3, [pc, #144]	; (800520c <HAL_RCC_OscConfig+0x278>)
 800517c:	2200      	movs	r2, #0
 800517e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005180:	f7fd ffd8 	bl	8003134 <HAL_GetTick>
 8005184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005188:	f7fd ffd4 	bl	8003134 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b02      	cmp	r3, #2
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e193      	b.n	80054c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800519a:	4b1b      	ldr	r3, [pc, #108]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1f0      	bne.n	8005188 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0308 	and.w	r3, r3, #8
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d036      	beq.n	8005220 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d016      	beq.n	80051e8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051ba:	4b15      	ldr	r3, [pc, #84]	; (8005210 <HAL_RCC_OscConfig+0x27c>)
 80051bc:	2201      	movs	r2, #1
 80051be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c0:	f7fd ffb8 	bl	8003134 <HAL_GetTick>
 80051c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051c8:	f7fd ffb4 	bl	8003134 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e173      	b.n	80054c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051da:	4b0b      	ldr	r3, [pc, #44]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 80051dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0f0      	beq.n	80051c8 <HAL_RCC_OscConfig+0x234>
 80051e6:	e01b      	b.n	8005220 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051e8:	4b09      	ldr	r3, [pc, #36]	; (8005210 <HAL_RCC_OscConfig+0x27c>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ee:	f7fd ffa1 	bl	8003134 <HAL_GetTick>
 80051f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051f4:	e00e      	b.n	8005214 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051f6:	f7fd ff9d 	bl	8003134 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d907      	bls.n	8005214 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e15c      	b.n	80054c2 <HAL_RCC_OscConfig+0x52e>
 8005208:	40023800 	.word	0x40023800
 800520c:	42470000 	.word	0x42470000
 8005210:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005214:	4b8a      	ldr	r3, [pc, #552]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 8005216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1ea      	bne.n	80051f6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0304 	and.w	r3, r3, #4
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 8097 	beq.w	800535c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800522e:	2300      	movs	r3, #0
 8005230:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005232:	4b83      	ldr	r3, [pc, #524]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10f      	bne.n	800525e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800523e:	2300      	movs	r3, #0
 8005240:	60bb      	str	r3, [r7, #8]
 8005242:	4b7f      	ldr	r3, [pc, #508]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	4a7e      	ldr	r2, [pc, #504]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 8005248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800524c:	6413      	str	r3, [r2, #64]	; 0x40
 800524e:	4b7c      	ldr	r3, [pc, #496]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 8005250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005256:	60bb      	str	r3, [r7, #8]
 8005258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800525a:	2301      	movs	r3, #1
 800525c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800525e:	4b79      	ldr	r3, [pc, #484]	; (8005444 <HAL_RCC_OscConfig+0x4b0>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005266:	2b00      	cmp	r3, #0
 8005268:	d118      	bne.n	800529c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800526a:	4b76      	ldr	r3, [pc, #472]	; (8005444 <HAL_RCC_OscConfig+0x4b0>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a75      	ldr	r2, [pc, #468]	; (8005444 <HAL_RCC_OscConfig+0x4b0>)
 8005270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005274:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005276:	f7fd ff5d 	bl	8003134 <HAL_GetTick>
 800527a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800527c:	e008      	b.n	8005290 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800527e:	f7fd ff59 	bl	8003134 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	2b02      	cmp	r3, #2
 800528a:	d901      	bls.n	8005290 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e118      	b.n	80054c2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005290:	4b6c      	ldr	r3, [pc, #432]	; (8005444 <HAL_RCC_OscConfig+0x4b0>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005298:	2b00      	cmp	r3, #0
 800529a:	d0f0      	beq.n	800527e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d106      	bne.n	80052b2 <HAL_RCC_OscConfig+0x31e>
 80052a4:	4b66      	ldr	r3, [pc, #408]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 80052a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a8:	4a65      	ldr	r2, [pc, #404]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 80052aa:	f043 0301 	orr.w	r3, r3, #1
 80052ae:	6713      	str	r3, [r2, #112]	; 0x70
 80052b0:	e01c      	b.n	80052ec <HAL_RCC_OscConfig+0x358>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	2b05      	cmp	r3, #5
 80052b8:	d10c      	bne.n	80052d4 <HAL_RCC_OscConfig+0x340>
 80052ba:	4b61      	ldr	r3, [pc, #388]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 80052bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052be:	4a60      	ldr	r2, [pc, #384]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 80052c0:	f043 0304 	orr.w	r3, r3, #4
 80052c4:	6713      	str	r3, [r2, #112]	; 0x70
 80052c6:	4b5e      	ldr	r3, [pc, #376]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 80052c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ca:	4a5d      	ldr	r2, [pc, #372]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 80052cc:	f043 0301 	orr.w	r3, r3, #1
 80052d0:	6713      	str	r3, [r2, #112]	; 0x70
 80052d2:	e00b      	b.n	80052ec <HAL_RCC_OscConfig+0x358>
 80052d4:	4b5a      	ldr	r3, [pc, #360]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 80052d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d8:	4a59      	ldr	r2, [pc, #356]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 80052da:	f023 0301 	bic.w	r3, r3, #1
 80052de:	6713      	str	r3, [r2, #112]	; 0x70
 80052e0:	4b57      	ldr	r3, [pc, #348]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 80052e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e4:	4a56      	ldr	r2, [pc, #344]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 80052e6:	f023 0304 	bic.w	r3, r3, #4
 80052ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d015      	beq.n	8005320 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f4:	f7fd ff1e 	bl	8003134 <HAL_GetTick>
 80052f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052fa:	e00a      	b.n	8005312 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052fc:	f7fd ff1a 	bl	8003134 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	f241 3288 	movw	r2, #5000	; 0x1388
 800530a:	4293      	cmp	r3, r2
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e0d7      	b.n	80054c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005312:	4b4b      	ldr	r3, [pc, #300]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 8005314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	2b00      	cmp	r3, #0
 800531c:	d0ee      	beq.n	80052fc <HAL_RCC_OscConfig+0x368>
 800531e:	e014      	b.n	800534a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005320:	f7fd ff08 	bl	8003134 <HAL_GetTick>
 8005324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005326:	e00a      	b.n	800533e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005328:	f7fd ff04 	bl	8003134 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	f241 3288 	movw	r2, #5000	; 0x1388
 8005336:	4293      	cmp	r3, r2
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e0c1      	b.n	80054c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800533e:	4b40      	ldr	r3, [pc, #256]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 8005340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1ee      	bne.n	8005328 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800534a:	7dfb      	ldrb	r3, [r7, #23]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d105      	bne.n	800535c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005350:	4b3b      	ldr	r3, [pc, #236]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 8005352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005354:	4a3a      	ldr	r2, [pc, #232]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 8005356:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800535a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	2b00      	cmp	r3, #0
 8005362:	f000 80ad 	beq.w	80054c0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005366:	4b36      	ldr	r3, [pc, #216]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 030c 	and.w	r3, r3, #12
 800536e:	2b08      	cmp	r3, #8
 8005370:	d060      	beq.n	8005434 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	2b02      	cmp	r3, #2
 8005378:	d145      	bne.n	8005406 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800537a:	4b33      	ldr	r3, [pc, #204]	; (8005448 <HAL_RCC_OscConfig+0x4b4>)
 800537c:	2200      	movs	r2, #0
 800537e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005380:	f7fd fed8 	bl	8003134 <HAL_GetTick>
 8005384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005386:	e008      	b.n	800539a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005388:	f7fd fed4 	bl	8003134 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	2b02      	cmp	r3, #2
 8005394:	d901      	bls.n	800539a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e093      	b.n	80054c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800539a:	4b29      	ldr	r3, [pc, #164]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1f0      	bne.n	8005388 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	69da      	ldr	r2, [r3, #28]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	431a      	orrs	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b4:	019b      	lsls	r3, r3, #6
 80053b6:	431a      	orrs	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053bc:	085b      	lsrs	r3, r3, #1
 80053be:	3b01      	subs	r3, #1
 80053c0:	041b      	lsls	r3, r3, #16
 80053c2:	431a      	orrs	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c8:	061b      	lsls	r3, r3, #24
 80053ca:	431a      	orrs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d0:	071b      	lsls	r3, r3, #28
 80053d2:	491b      	ldr	r1, [pc, #108]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053d8:	4b1b      	ldr	r3, [pc, #108]	; (8005448 <HAL_RCC_OscConfig+0x4b4>)
 80053da:	2201      	movs	r2, #1
 80053dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053de:	f7fd fea9 	bl	8003134 <HAL_GetTick>
 80053e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053e4:	e008      	b.n	80053f8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053e6:	f7fd fea5 	bl	8003134 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d901      	bls.n	80053f8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e064      	b.n	80054c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053f8:	4b11      	ldr	r3, [pc, #68]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d0f0      	beq.n	80053e6 <HAL_RCC_OscConfig+0x452>
 8005404:	e05c      	b.n	80054c0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005406:	4b10      	ldr	r3, [pc, #64]	; (8005448 <HAL_RCC_OscConfig+0x4b4>)
 8005408:	2200      	movs	r2, #0
 800540a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540c:	f7fd fe92 	bl	8003134 <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005414:	f7fd fe8e 	bl	8003134 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e04d      	b.n	80054c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005426:	4b06      	ldr	r3, [pc, #24]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1f0      	bne.n	8005414 <HAL_RCC_OscConfig+0x480>
 8005432:	e045      	b.n	80054c0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d107      	bne.n	800544c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e040      	b.n	80054c2 <HAL_RCC_OscConfig+0x52e>
 8005440:	40023800 	.word	0x40023800
 8005444:	40007000 	.word	0x40007000
 8005448:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800544c:	4b1f      	ldr	r3, [pc, #124]	; (80054cc <HAL_RCC_OscConfig+0x538>)
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d030      	beq.n	80054bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005464:	429a      	cmp	r2, r3
 8005466:	d129      	bne.n	80054bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005472:	429a      	cmp	r2, r3
 8005474:	d122      	bne.n	80054bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800547c:	4013      	ands	r3, r2
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005482:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005484:	4293      	cmp	r3, r2
 8005486:	d119      	bne.n	80054bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005492:	085b      	lsrs	r3, r3, #1
 8005494:	3b01      	subs	r3, #1
 8005496:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005498:	429a      	cmp	r2, r3
 800549a:	d10f      	bne.n	80054bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d107      	bne.n	80054bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d001      	beq.n	80054c0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e000      	b.n	80054c2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	40023800 	.word	0x40023800

080054d0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e066      	b.n	80055b4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	7f5b      	ldrb	r3, [r3, #29]
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d105      	bne.n	80054fc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f7fd f9d0 	bl	800289c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2202      	movs	r2, #2
 8005500:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	22ca      	movs	r2, #202	; 0xca
 8005508:	625a      	str	r2, [r3, #36]	; 0x24
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2253      	movs	r2, #83	; 0x53
 8005510:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f998 	bl	8005848 <RTC_EnterInitMode>
 8005518:	4603      	mov	r3, r0
 800551a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800551c:	7bfb      	ldrb	r3, [r7, #15]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d12c      	bne.n	800557c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	6812      	ldr	r2, [r2, #0]
 800552c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005530:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005534:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6899      	ldr	r1, [r3, #8]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	431a      	orrs	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	431a      	orrs	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	68d2      	ldr	r2, [r2, #12]
 800555c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	6919      	ldr	r1, [r3, #16]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	041a      	lsls	r2, r3, #16
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f99f 	bl	80058b6 <RTC_ExitInitMode>
 8005578:	4603      	mov	r3, r0
 800557a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800557c:	7bfb      	ldrb	r3, [r7, #15]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d113      	bne.n	80055aa <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005590:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	699a      	ldr	r2, [r3, #24]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	430a      	orrs	r2, r1
 80055a2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	22ff      	movs	r2, #255	; 0xff
 80055b0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80055b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80055bc:	b590      	push	{r4, r7, lr}
 80055be:	b087      	sub	sp, #28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80055c8:	2300      	movs	r3, #0
 80055ca:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	7f1b      	ldrb	r3, [r3, #28]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d101      	bne.n	80055d8 <HAL_RTC_SetTime+0x1c>
 80055d4:	2302      	movs	r3, #2
 80055d6:	e087      	b.n	80056e8 <HAL_RTC_SetTime+0x12c>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2201      	movs	r2, #1
 80055dc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2202      	movs	r2, #2
 80055e2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d126      	bne.n	8005638 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d102      	bne.n	80055fe <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	2200      	movs	r2, #0
 80055fc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	4618      	mov	r0, r3
 8005604:	f000 f97c 	bl	8005900 <RTC_ByteToBcd2>
 8005608:	4603      	mov	r3, r0
 800560a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	785b      	ldrb	r3, [r3, #1]
 8005610:	4618      	mov	r0, r3
 8005612:	f000 f975 	bl	8005900 <RTC_ByteToBcd2>
 8005616:	4603      	mov	r3, r0
 8005618:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800561a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	789b      	ldrb	r3, [r3, #2]
 8005620:	4618      	mov	r0, r3
 8005622:	f000 f96d 	bl	8005900 <RTC_ByteToBcd2>
 8005626:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005628:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	78db      	ldrb	r3, [r3, #3]
 8005630:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005632:	4313      	orrs	r3, r2
 8005634:	617b      	str	r3, [r7, #20]
 8005636:	e018      	b.n	800566a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005642:	2b00      	cmp	r3, #0
 8005644:	d102      	bne.n	800564c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	2200      	movs	r2, #0
 800564a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	785b      	ldrb	r3, [r3, #1]
 8005656:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005658:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800565e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	78db      	ldrb	r3, [r3, #3]
 8005664:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005666:	4313      	orrs	r3, r2
 8005668:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	22ca      	movs	r2, #202	; 0xca
 8005670:	625a      	str	r2, [r3, #36]	; 0x24
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2253      	movs	r2, #83	; 0x53
 8005678:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f000 f8e4 	bl	8005848 <RTC_EnterInitMode>
 8005680:	4603      	mov	r3, r0
 8005682:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005684:	7cfb      	ldrb	r3, [r7, #19]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d120      	bne.n	80056cc <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005694:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005698:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689a      	ldr	r2, [r3, #8]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80056a8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6899      	ldr	r1, [r3, #8]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	68da      	ldr	r2, [r3, #12]
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	431a      	orrs	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f000 f8f7 	bl	80058b6 <RTC_ExitInitMode>
 80056c8:	4603      	mov	r3, r0
 80056ca:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80056cc:	7cfb      	ldrb	r3, [r7, #19]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d102      	bne.n	80056d8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2201      	movs	r2, #1
 80056d6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	22ff      	movs	r2, #255	; 0xff
 80056de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	771a      	strb	r2, [r3, #28]

  return status;
 80056e6:	7cfb      	ldrb	r3, [r7, #19]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	371c      	adds	r7, #28
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd90      	pop	{r4, r7, pc}

080056f0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80056f0:	b590      	push	{r4, r7, lr}
 80056f2:	b087      	sub	sp, #28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	7f1b      	ldrb	r3, [r3, #28]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d101      	bne.n	800570c <HAL_RTC_SetDate+0x1c>
 8005708:	2302      	movs	r3, #2
 800570a:	e071      	b.n	80057f0 <HAL_RTC_SetDate+0x100>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2201      	movs	r2, #1
 8005710:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2202      	movs	r2, #2
 8005716:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10e      	bne.n	800573c <HAL_RTC_SetDate+0x4c>
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	785b      	ldrb	r3, [r3, #1]
 8005722:	f003 0310 	and.w	r3, r3, #16
 8005726:	2b00      	cmp	r3, #0
 8005728:	d008      	beq.n	800573c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	785b      	ldrb	r3, [r3, #1]
 800572e:	f023 0310 	bic.w	r3, r3, #16
 8005732:	b2db      	uxtb	r3, r3
 8005734:	330a      	adds	r3, #10
 8005736:	b2da      	uxtb	r2, r3
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d11c      	bne.n	800577c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	78db      	ldrb	r3, [r3, #3]
 8005746:	4618      	mov	r0, r3
 8005748:	f000 f8da 	bl	8005900 <RTC_ByteToBcd2>
 800574c:	4603      	mov	r3, r0
 800574e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	785b      	ldrb	r3, [r3, #1]
 8005754:	4618      	mov	r0, r3
 8005756:	f000 f8d3 	bl	8005900 <RTC_ByteToBcd2>
 800575a:	4603      	mov	r3, r0
 800575c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800575e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	789b      	ldrb	r3, [r3, #2]
 8005764:	4618      	mov	r0, r3
 8005766:	f000 f8cb 	bl	8005900 <RTC_ByteToBcd2>
 800576a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800576c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005776:	4313      	orrs	r3, r2
 8005778:	617b      	str	r3, [r7, #20]
 800577a:	e00e      	b.n	800579a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	78db      	ldrb	r3, [r3, #3]
 8005780:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	785b      	ldrb	r3, [r3, #1]
 8005786:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005788:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800578e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005796:	4313      	orrs	r3, r2
 8005798:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	22ca      	movs	r2, #202	; 0xca
 80057a0:	625a      	str	r2, [r3, #36]	; 0x24
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2253      	movs	r2, #83	; 0x53
 80057a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f000 f84c 	bl	8005848 <RTC_EnterInitMode>
 80057b0:	4603      	mov	r3, r0
 80057b2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80057b4:	7cfb      	ldrb	r3, [r7, #19]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10c      	bne.n	80057d4 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80057c4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80057c8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f000 f873 	bl	80058b6 <RTC_ExitInitMode>
 80057d0:	4603      	mov	r3, r0
 80057d2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80057d4:	7cfb      	ldrb	r3, [r7, #19]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d102      	bne.n	80057e0 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2201      	movs	r2, #1
 80057de:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	22ff      	movs	r2, #255	; 0xff
 80057e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	771a      	strb	r2, [r3, #28]

  return status;
 80057ee:	7cfb      	ldrb	r3, [r7, #19]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	371c      	adds	r7, #28
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd90      	pop	{r4, r7, pc}

080057f8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005800:	2300      	movs	r3, #0
 8005802:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68da      	ldr	r2, [r3, #12]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005812:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005814:	f7fd fc8e 	bl	8003134 <HAL_GetTick>
 8005818:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800581a:	e009      	b.n	8005830 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800581c:	f7fd fc8a 	bl	8003134 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800582a:	d901      	bls.n	8005830 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e007      	b.n	8005840 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	f003 0320 	and.w	r3, r3, #32
 800583a:	2b00      	cmp	r3, #0
 800583c:	d0ee      	beq.n	800581c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005850:	2300      	movs	r3, #0
 8005852:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005854:	2300      	movs	r3, #0
 8005856:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005862:	2b00      	cmp	r3, #0
 8005864:	d122      	bne.n	80058ac <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68da      	ldr	r2, [r3, #12]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005874:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005876:	f7fd fc5d 	bl	8003134 <HAL_GetTick>
 800587a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800587c:	e00c      	b.n	8005898 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800587e:	f7fd fc59 	bl	8003134 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800588c:	d904      	bls.n	8005898 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2204      	movs	r2, #4
 8005892:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d102      	bne.n	80058ac <RTC_EnterInitMode+0x64>
 80058a6:	7bfb      	ldrb	r3, [r7, #15]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d1e8      	bne.n	800587e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80058ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b084      	sub	sp, #16
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058be:	2300      	movs	r3, #0
 80058c0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058d0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f003 0320 	and.w	r3, r3, #32
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10a      	bne.n	80058f6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f7ff ff89 	bl	80057f8 <HAL_RTC_WaitForSynchro>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d004      	beq.n	80058f6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2204      	movs	r2, #4
 80058f0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80058f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	4603      	mov	r3, r0
 8005908:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800590a:	2300      	movs	r3, #0
 800590c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800590e:	e005      	b.n	800591c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005910:	7bfb      	ldrb	r3, [r7, #15]
 8005912:	3301      	adds	r3, #1
 8005914:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005916:	79fb      	ldrb	r3, [r7, #7]
 8005918:	3b0a      	subs	r3, #10
 800591a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800591c:	79fb      	ldrb	r3, [r7, #7]
 800591e:	2b09      	cmp	r3, #9
 8005920:	d8f6      	bhi.n	8005910 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005922:	7bfb      	ldrb	r3, [r7, #15]
 8005924:	011b      	lsls	r3, r3, #4
 8005926:	b2da      	uxtb	r2, r3
 8005928:	79fb      	ldrb	r3, [r7, #7]
 800592a:	4313      	orrs	r3, r2
 800592c:	b2db      	uxtb	r3, r3
}
 800592e:	4618      	mov	r0, r3
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr

0800593a <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b086      	sub	sp, #24
 800593e:	af00      	add	r7, sp, #0
 8005940:	60f8      	str	r0, [r7, #12]
 8005942:	60b9      	str	r1, [r7, #8]
 8005944:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8005946:	2300      	movs	r3, #0
 8005948:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	7f1b      	ldrb	r3, [r3, #28]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d101      	bne.n	8005956 <HAL_RTCEx_SetWakeUpTimer+0x1c>
 8005952:	2302      	movs	r3, #2
 8005954:	e08a      	b.n	8005a6c <HAL_RTCEx_SetWakeUpTimer+0x132>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2201      	movs	r2, #1
 800595a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2202      	movs	r2, #2
 8005960:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	22ca      	movs	r2, #202	; 0xca
 8005968:	625a      	str	r2, [r3, #36]	; 0x24
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2253      	movs	r2, #83	; 0x53
 8005970:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800597c:	2b00      	cmp	r3, #0
 800597e:	d01e      	beq.n	80059be <HAL_RTCEx_SetWakeUpTimer+0x84>
  {
    tickstart = HAL_GetTick();
 8005980:	f7fd fbd8 	bl	8003134 <HAL_GetTick>
 8005984:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8005986:	e013      	b.n	80059b0 <HAL_RTCEx_SetWakeUpTimer+0x76>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005988:	f7fd fbd4 	bl	8003134 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005996:	d90b      	bls.n	80059b0 <HAL_RTCEx_SetWakeUpTimer+0x76>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	22ff      	movs	r2, #255	; 0xff
 800599e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2203      	movs	r2, #3
 80059a4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e05d      	b.n	8005a6c <HAL_RTCEx_SetWakeUpTimer+0x132>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	f003 0304 	and.w	r3, r3, #4
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1e4      	bne.n	8005988 <HAL_RTCEx_SetWakeUpTimer+0x4e>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689a      	ldr	r2, [r3, #8]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059cc:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	b2da      	uxtb	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80059de:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80059e0:	f7fd fba8 	bl	8003134 <HAL_GetTick>
 80059e4:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80059e6:	e013      	b.n	8005a10 <HAL_RTCEx_SetWakeUpTimer+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80059e8:	f7fd fba4 	bl	8003134 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059f6:	d90b      	bls.n	8005a10 <HAL_RTCEx_SetWakeUpTimer+0xd6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	22ff      	movs	r2, #255	; 0xff
 80059fe:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2203      	movs	r2, #3
 8005a04:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e02d      	b.n	8005a6c <HAL_RTCEx_SetWakeUpTimer+0x132>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	f003 0304 	and.w	r3, r3, #4
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d0e4      	beq.n	80059e8 <HAL_RTCEx_SetWakeUpTimer+0xae>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	689a      	ldr	r2, [r3, #8]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f022 0207 	bic.w	r2, r2, #7
 8005a2c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	6899      	ldr	r1, [r3, #8]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a54:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	22ff      	movs	r2, #255	; 0xff
 8005a5c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2201      	movs	r2, #1
 8005a62:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3718      	adds	r7, #24
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e041      	b.n	8005b0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d106      	bne.n	8005aa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7fc ffaa 	bl	80029f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	3304      	adds	r3, #4
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	4610      	mov	r0, r2
 8005ab4:	f000 ff7e 	bl	80069b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b082      	sub	sp, #8
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d101      	bne.n	8005b24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e041      	b.n	8005ba8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d106      	bne.n	8005b3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 f839 	bl	8005bb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2202      	movs	r2, #2
 8005b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	4619      	mov	r1, r3
 8005b50:	4610      	mov	r0, r2
 8005b52:	f000 ff2f 	bl	80069b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3708      	adds	r7, #8
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d109      	bne.n	8005be8 <HAL_TIM_PWM_Start+0x24>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	bf14      	ite	ne
 8005be0:	2301      	movne	r3, #1
 8005be2:	2300      	moveq	r3, #0
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	e022      	b.n	8005c2e <HAL_TIM_PWM_Start+0x6a>
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	d109      	bne.n	8005c02 <HAL_TIM_PWM_Start+0x3e>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	bf14      	ite	ne
 8005bfa:	2301      	movne	r3, #1
 8005bfc:	2300      	moveq	r3, #0
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	e015      	b.n	8005c2e <HAL_TIM_PWM_Start+0x6a>
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b08      	cmp	r3, #8
 8005c06:	d109      	bne.n	8005c1c <HAL_TIM_PWM_Start+0x58>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	bf14      	ite	ne
 8005c14:	2301      	movne	r3, #1
 8005c16:	2300      	moveq	r3, #0
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	e008      	b.n	8005c2e <HAL_TIM_PWM_Start+0x6a>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	bf14      	ite	ne
 8005c28:	2301      	movne	r3, #1
 8005c2a:	2300      	moveq	r3, #0
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e07c      	b.n	8005d30 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d104      	bne.n	8005c46 <HAL_TIM_PWM_Start+0x82>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c44:	e013      	b.n	8005c6e <HAL_TIM_PWM_Start+0xaa>
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	2b04      	cmp	r3, #4
 8005c4a:	d104      	bne.n	8005c56 <HAL_TIM_PWM_Start+0x92>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c54:	e00b      	b.n	8005c6e <HAL_TIM_PWM_Start+0xaa>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b08      	cmp	r3, #8
 8005c5a:	d104      	bne.n	8005c66 <HAL_TIM_PWM_Start+0xa2>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c64:	e003      	b.n	8005c6e <HAL_TIM_PWM_Start+0xaa>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2202      	movs	r2, #2
 8005c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2201      	movs	r2, #1
 8005c74:	6839      	ldr	r1, [r7, #0]
 8005c76:	4618      	mov	r0, r3
 8005c78:	f001 fb42 	bl	8007300 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a2d      	ldr	r2, [pc, #180]	; (8005d38 <HAL_TIM_PWM_Start+0x174>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d004      	beq.n	8005c90 <HAL_TIM_PWM_Start+0xcc>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a2c      	ldr	r2, [pc, #176]	; (8005d3c <HAL_TIM_PWM_Start+0x178>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d101      	bne.n	8005c94 <HAL_TIM_PWM_Start+0xd0>
 8005c90:	2301      	movs	r3, #1
 8005c92:	e000      	b.n	8005c96 <HAL_TIM_PWM_Start+0xd2>
 8005c94:	2300      	movs	r3, #0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d007      	beq.n	8005caa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ca8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a22      	ldr	r2, [pc, #136]	; (8005d38 <HAL_TIM_PWM_Start+0x174>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d022      	beq.n	8005cfa <HAL_TIM_PWM_Start+0x136>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cbc:	d01d      	beq.n	8005cfa <HAL_TIM_PWM_Start+0x136>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a1f      	ldr	r2, [pc, #124]	; (8005d40 <HAL_TIM_PWM_Start+0x17c>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d018      	beq.n	8005cfa <HAL_TIM_PWM_Start+0x136>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a1d      	ldr	r2, [pc, #116]	; (8005d44 <HAL_TIM_PWM_Start+0x180>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d013      	beq.n	8005cfa <HAL_TIM_PWM_Start+0x136>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a1c      	ldr	r2, [pc, #112]	; (8005d48 <HAL_TIM_PWM_Start+0x184>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d00e      	beq.n	8005cfa <HAL_TIM_PWM_Start+0x136>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a16      	ldr	r2, [pc, #88]	; (8005d3c <HAL_TIM_PWM_Start+0x178>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d009      	beq.n	8005cfa <HAL_TIM_PWM_Start+0x136>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a18      	ldr	r2, [pc, #96]	; (8005d4c <HAL_TIM_PWM_Start+0x188>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d004      	beq.n	8005cfa <HAL_TIM_PWM_Start+0x136>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a16      	ldr	r2, [pc, #88]	; (8005d50 <HAL_TIM_PWM_Start+0x18c>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d111      	bne.n	8005d1e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f003 0307 	and.w	r3, r3, #7
 8005d04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2b06      	cmp	r3, #6
 8005d0a:	d010      	beq.n	8005d2e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f042 0201 	orr.w	r2, r2, #1
 8005d1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d1c:	e007      	b.n	8005d2e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f042 0201 	orr.w	r2, r2, #1
 8005d2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	40010000 	.word	0x40010000
 8005d3c:	40010400 	.word	0x40010400
 8005d40:	40000400 	.word	0x40000400
 8005d44:	40000800 	.word	0x40000800
 8005d48:	40000c00 	.word	0x40000c00
 8005d4c:	40014000 	.word	0x40014000
 8005d50:	40001800 	.word	0x40001800

08005d54 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e041      	b.n	8005dea <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d106      	bne.n	8005d80 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7fc fdb8 	bl	80028f0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2202      	movs	r2, #2
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	3304      	adds	r3, #4
 8005d90:	4619      	mov	r1, r3
 8005d92:	4610      	mov	r0, r2
 8005d94:	f000 fe0e 	bl	80069b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
	...

08005df4 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d104      	bne.n	8005e0e <HAL_TIM_IC_Start+0x1a>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	e013      	b.n	8005e36 <HAL_TIM_IC_Start+0x42>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b04      	cmp	r3, #4
 8005e12:	d104      	bne.n	8005e1e <HAL_TIM_IC_Start+0x2a>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	e00b      	b.n	8005e36 <HAL_TIM_IC_Start+0x42>
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b08      	cmp	r3, #8
 8005e22:	d104      	bne.n	8005e2e <HAL_TIM_IC_Start+0x3a>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	e003      	b.n	8005e36 <HAL_TIM_IC_Start+0x42>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d104      	bne.n	8005e48 <HAL_TIM_IC_Start+0x54>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	e013      	b.n	8005e70 <HAL_TIM_IC_Start+0x7c>
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	2b04      	cmp	r3, #4
 8005e4c:	d104      	bne.n	8005e58 <HAL_TIM_IC_Start+0x64>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	e00b      	b.n	8005e70 <HAL_TIM_IC_Start+0x7c>
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	2b08      	cmp	r3, #8
 8005e5c:	d104      	bne.n	8005e68 <HAL_TIM_IC_Start+0x74>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	e003      	b.n	8005e70 <HAL_TIM_IC_Start+0x7c>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d102      	bne.n	8005e7e <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e78:	7bbb      	ldrb	r3, [r7, #14]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d001      	beq.n	8005e82 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e081      	b.n	8005f86 <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d104      	bne.n	8005e92 <HAL_TIM_IC_Start+0x9e>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e90:	e013      	b.n	8005eba <HAL_TIM_IC_Start+0xc6>
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2b04      	cmp	r3, #4
 8005e96:	d104      	bne.n	8005ea2 <HAL_TIM_IC_Start+0xae>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ea0:	e00b      	b.n	8005eba <HAL_TIM_IC_Start+0xc6>
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2b08      	cmp	r3, #8
 8005ea6:	d104      	bne.n	8005eb2 <HAL_TIM_IC_Start+0xbe>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005eb0:	e003      	b.n	8005eba <HAL_TIM_IC_Start+0xc6>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2202      	movs	r2, #2
 8005eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d104      	bne.n	8005eca <HAL_TIM_IC_Start+0xd6>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ec8:	e013      	b.n	8005ef2 <HAL_TIM_IC_Start+0xfe>
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b04      	cmp	r3, #4
 8005ece:	d104      	bne.n	8005eda <HAL_TIM_IC_Start+0xe6>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ed8:	e00b      	b.n	8005ef2 <HAL_TIM_IC_Start+0xfe>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b08      	cmp	r3, #8
 8005ede:	d104      	bne.n	8005eea <HAL_TIM_IC_Start+0xf6>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ee8:	e003      	b.n	8005ef2 <HAL_TIM_IC_Start+0xfe>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2202      	movs	r2, #2
 8005eee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	6839      	ldr	r1, [r7, #0]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f001 fa00 	bl	8007300 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a22      	ldr	r2, [pc, #136]	; (8005f90 <HAL_TIM_IC_Start+0x19c>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d022      	beq.n	8005f50 <HAL_TIM_IC_Start+0x15c>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f12:	d01d      	beq.n	8005f50 <HAL_TIM_IC_Start+0x15c>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a1e      	ldr	r2, [pc, #120]	; (8005f94 <HAL_TIM_IC_Start+0x1a0>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d018      	beq.n	8005f50 <HAL_TIM_IC_Start+0x15c>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a1d      	ldr	r2, [pc, #116]	; (8005f98 <HAL_TIM_IC_Start+0x1a4>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d013      	beq.n	8005f50 <HAL_TIM_IC_Start+0x15c>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a1b      	ldr	r2, [pc, #108]	; (8005f9c <HAL_TIM_IC_Start+0x1a8>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d00e      	beq.n	8005f50 <HAL_TIM_IC_Start+0x15c>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a1a      	ldr	r2, [pc, #104]	; (8005fa0 <HAL_TIM_IC_Start+0x1ac>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d009      	beq.n	8005f50 <HAL_TIM_IC_Start+0x15c>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a18      	ldr	r2, [pc, #96]	; (8005fa4 <HAL_TIM_IC_Start+0x1b0>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d004      	beq.n	8005f50 <HAL_TIM_IC_Start+0x15c>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a17      	ldr	r2, [pc, #92]	; (8005fa8 <HAL_TIM_IC_Start+0x1b4>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d111      	bne.n	8005f74 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f003 0307 	and.w	r3, r3, #7
 8005f5a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	2b06      	cmp	r3, #6
 8005f60:	d010      	beq.n	8005f84 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f042 0201 	orr.w	r2, r2, #1
 8005f70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f72:	e007      	b.n	8005f84 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f042 0201 	orr.w	r2, r2, #1
 8005f82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	40010000 	.word	0x40010000
 8005f94:	40000400 	.word	0x40000400
 8005f98:	40000800 	.word	0x40000800
 8005f9c:	40000c00 	.word	0x40000c00
 8005fa0:	40010400 	.word	0x40010400
 8005fa4:	40014000 	.word	0x40014000
 8005fa8:	40001800 	.word	0x40001800

08005fac <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d104      	bne.n	8005fca <HAL_TIM_IC_Start_IT+0x1e>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	e013      	b.n	8005ff2 <HAL_TIM_IC_Start_IT+0x46>
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	2b04      	cmp	r3, #4
 8005fce:	d104      	bne.n	8005fda <HAL_TIM_IC_Start_IT+0x2e>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	e00b      	b.n	8005ff2 <HAL_TIM_IC_Start_IT+0x46>
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2b08      	cmp	r3, #8
 8005fde:	d104      	bne.n	8005fea <HAL_TIM_IC_Start_IT+0x3e>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	e003      	b.n	8005ff2 <HAL_TIM_IC_Start_IT+0x46>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d104      	bne.n	8006004 <HAL_TIM_IC_Start_IT+0x58>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006000:	b2db      	uxtb	r3, r3
 8006002:	e013      	b.n	800602c <HAL_TIM_IC_Start_IT+0x80>
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	2b04      	cmp	r3, #4
 8006008:	d104      	bne.n	8006014 <HAL_TIM_IC_Start_IT+0x68>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006010:	b2db      	uxtb	r3, r3
 8006012:	e00b      	b.n	800602c <HAL_TIM_IC_Start_IT+0x80>
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	2b08      	cmp	r3, #8
 8006018:	d104      	bne.n	8006024 <HAL_TIM_IC_Start_IT+0x78>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006020:	b2db      	uxtb	r3, r3
 8006022:	e003      	b.n	800602c <HAL_TIM_IC_Start_IT+0x80>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800602a:	b2db      	uxtb	r3, r3
 800602c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800602e:	7bbb      	ldrb	r3, [r7, #14]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d102      	bne.n	800603a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006034:	7b7b      	ldrb	r3, [r7, #13]
 8006036:	2b01      	cmp	r3, #1
 8006038:	d001      	beq.n	800603e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e0cc      	b.n	80061d8 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d104      	bne.n	800604e <HAL_TIM_IC_Start_IT+0xa2>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2202      	movs	r2, #2
 8006048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800604c:	e013      	b.n	8006076 <HAL_TIM_IC_Start_IT+0xca>
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	2b04      	cmp	r3, #4
 8006052:	d104      	bne.n	800605e <HAL_TIM_IC_Start_IT+0xb2>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2202      	movs	r2, #2
 8006058:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800605c:	e00b      	b.n	8006076 <HAL_TIM_IC_Start_IT+0xca>
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	2b08      	cmp	r3, #8
 8006062:	d104      	bne.n	800606e <HAL_TIM_IC_Start_IT+0xc2>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2202      	movs	r2, #2
 8006068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800606c:	e003      	b.n	8006076 <HAL_TIM_IC_Start_IT+0xca>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2202      	movs	r2, #2
 8006072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d104      	bne.n	8006086 <HAL_TIM_IC_Start_IT+0xda>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2202      	movs	r2, #2
 8006080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006084:	e013      	b.n	80060ae <HAL_TIM_IC_Start_IT+0x102>
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b04      	cmp	r3, #4
 800608a:	d104      	bne.n	8006096 <HAL_TIM_IC_Start_IT+0xea>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2202      	movs	r2, #2
 8006090:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006094:	e00b      	b.n	80060ae <HAL_TIM_IC_Start_IT+0x102>
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2b08      	cmp	r3, #8
 800609a:	d104      	bne.n	80060a6 <HAL_TIM_IC_Start_IT+0xfa>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2202      	movs	r2, #2
 80060a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060a4:	e003      	b.n	80060ae <HAL_TIM_IC_Start_IT+0x102>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2202      	movs	r2, #2
 80060aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	2b0c      	cmp	r3, #12
 80060b2:	d841      	bhi.n	8006138 <HAL_TIM_IC_Start_IT+0x18c>
 80060b4:	a201      	add	r2, pc, #4	; (adr r2, 80060bc <HAL_TIM_IC_Start_IT+0x110>)
 80060b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ba:	bf00      	nop
 80060bc:	080060f1 	.word	0x080060f1
 80060c0:	08006139 	.word	0x08006139
 80060c4:	08006139 	.word	0x08006139
 80060c8:	08006139 	.word	0x08006139
 80060cc:	08006103 	.word	0x08006103
 80060d0:	08006139 	.word	0x08006139
 80060d4:	08006139 	.word	0x08006139
 80060d8:	08006139 	.word	0x08006139
 80060dc:	08006115 	.word	0x08006115
 80060e0:	08006139 	.word	0x08006139
 80060e4:	08006139 	.word	0x08006139
 80060e8:	08006139 	.word	0x08006139
 80060ec:	08006127 	.word	0x08006127
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68da      	ldr	r2, [r3, #12]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f042 0202 	orr.w	r2, r2, #2
 80060fe:	60da      	str	r2, [r3, #12]
      break;
 8006100:	e01d      	b.n	800613e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68da      	ldr	r2, [r3, #12]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f042 0204 	orr.w	r2, r2, #4
 8006110:	60da      	str	r2, [r3, #12]
      break;
 8006112:	e014      	b.n	800613e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68da      	ldr	r2, [r3, #12]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f042 0208 	orr.w	r2, r2, #8
 8006122:	60da      	str	r2, [r3, #12]
      break;
 8006124:	e00b      	b.n	800613e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68da      	ldr	r2, [r3, #12]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f042 0210 	orr.w	r2, r2, #16
 8006134:	60da      	str	r2, [r3, #12]
      break;
 8006136:	e002      	b.n	800613e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	73fb      	strb	r3, [r7, #15]
      break;
 800613c:	bf00      	nop
  }

  if (status == HAL_OK)
 800613e:	7bfb      	ldrb	r3, [r7, #15]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d148      	bne.n	80061d6 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2201      	movs	r2, #1
 800614a:	6839      	ldr	r1, [r7, #0]
 800614c:	4618      	mov	r0, r3
 800614e:	f001 f8d7 	bl	8007300 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a22      	ldr	r2, [pc, #136]	; (80061e0 <HAL_TIM_IC_Start_IT+0x234>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d022      	beq.n	80061a2 <HAL_TIM_IC_Start_IT+0x1f6>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006164:	d01d      	beq.n	80061a2 <HAL_TIM_IC_Start_IT+0x1f6>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a1e      	ldr	r2, [pc, #120]	; (80061e4 <HAL_TIM_IC_Start_IT+0x238>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d018      	beq.n	80061a2 <HAL_TIM_IC_Start_IT+0x1f6>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a1c      	ldr	r2, [pc, #112]	; (80061e8 <HAL_TIM_IC_Start_IT+0x23c>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d013      	beq.n	80061a2 <HAL_TIM_IC_Start_IT+0x1f6>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a1b      	ldr	r2, [pc, #108]	; (80061ec <HAL_TIM_IC_Start_IT+0x240>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d00e      	beq.n	80061a2 <HAL_TIM_IC_Start_IT+0x1f6>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a19      	ldr	r2, [pc, #100]	; (80061f0 <HAL_TIM_IC_Start_IT+0x244>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d009      	beq.n	80061a2 <HAL_TIM_IC_Start_IT+0x1f6>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a18      	ldr	r2, [pc, #96]	; (80061f4 <HAL_TIM_IC_Start_IT+0x248>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d004      	beq.n	80061a2 <HAL_TIM_IC_Start_IT+0x1f6>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a16      	ldr	r2, [pc, #88]	; (80061f8 <HAL_TIM_IC_Start_IT+0x24c>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d111      	bne.n	80061c6 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f003 0307 	and.w	r3, r3, #7
 80061ac:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2b06      	cmp	r3, #6
 80061b2:	d010      	beq.n	80061d6 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f042 0201 	orr.w	r2, r2, #1
 80061c2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061c4:	e007      	b.n	80061d6 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f042 0201 	orr.w	r2, r2, #1
 80061d4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80061d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	40010000 	.word	0x40010000
 80061e4:	40000400 	.word	0x40000400
 80061e8:	40000800 	.word	0x40000800
 80061ec:	40000c00 	.word	0x40000c00
 80061f0:	40010400 	.word	0x40010400
 80061f4:	40014000 	.word	0x40014000
 80061f8:	40001800 	.word	0x40001800

080061fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	2b02      	cmp	r3, #2
 8006210:	d122      	bne.n	8006258 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b02      	cmp	r3, #2
 800621e:	d11b      	bne.n	8006258 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f06f 0202 	mvn.w	r2, #2
 8006228:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	f003 0303 	and.w	r3, r3, #3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7fa fea0 	bl	8000f84 <HAL_TIM_IC_CaptureCallback>
 8006244:	e005      	b.n	8006252 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fb96 	bl	8006978 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 fb9d 	bl	800698c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	f003 0304 	and.w	r3, r3, #4
 8006262:	2b04      	cmp	r3, #4
 8006264:	d122      	bne.n	80062ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f003 0304 	and.w	r3, r3, #4
 8006270:	2b04      	cmp	r3, #4
 8006272:	d11b      	bne.n	80062ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f06f 0204 	mvn.w	r2, #4
 800627c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2202      	movs	r2, #2
 8006282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7fa fe76 	bl	8000f84 <HAL_TIM_IC_CaptureCallback>
 8006298:	e005      	b.n	80062a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fb6c 	bl	8006978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 fb73 	bl	800698c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	f003 0308 	and.w	r3, r3, #8
 80062b6:	2b08      	cmp	r3, #8
 80062b8:	d122      	bne.n	8006300 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	f003 0308 	and.w	r3, r3, #8
 80062c4:	2b08      	cmp	r3, #8
 80062c6:	d11b      	bne.n	8006300 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f06f 0208 	mvn.w	r2, #8
 80062d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2204      	movs	r2, #4
 80062d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	69db      	ldr	r3, [r3, #28]
 80062de:	f003 0303 	and.w	r3, r3, #3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d003      	beq.n	80062ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7fa fe4c 	bl	8000f84 <HAL_TIM_IC_CaptureCallback>
 80062ec:	e005      	b.n	80062fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fb42 	bl	8006978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 fb49 	bl	800698c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	f003 0310 	and.w	r3, r3, #16
 800630a:	2b10      	cmp	r3, #16
 800630c:	d122      	bne.n	8006354 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f003 0310 	and.w	r3, r3, #16
 8006318:	2b10      	cmp	r3, #16
 800631a:	d11b      	bne.n	8006354 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f06f 0210 	mvn.w	r2, #16
 8006324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2208      	movs	r2, #8
 800632a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006336:	2b00      	cmp	r3, #0
 8006338:	d003      	beq.n	8006342 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7fa fe22 	bl	8000f84 <HAL_TIM_IC_CaptureCallback>
 8006340:	e005      	b.n	800634e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fb18 	bl	8006978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 fb1f 	bl	800698c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b01      	cmp	r3, #1
 8006360:	d10e      	bne.n	8006380 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	f003 0301 	and.w	r3, r3, #1
 800636c:	2b01      	cmp	r3, #1
 800636e:	d107      	bne.n	8006380 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f06f 0201 	mvn.w	r2, #1
 8006378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 faf2 	bl	8006964 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800638a:	2b80      	cmp	r3, #128	; 0x80
 800638c:	d10e      	bne.n	80063ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006398:	2b80      	cmp	r3, #128	; 0x80
 800639a:	d107      	bne.n	80063ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f001 f856 	bl	8007458 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b6:	2b40      	cmp	r3, #64	; 0x40
 80063b8:	d10e      	bne.n	80063d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c4:	2b40      	cmp	r3, #64	; 0x40
 80063c6:	d107      	bne.n	80063d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fae4 	bl	80069a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	f003 0320 	and.w	r3, r3, #32
 80063e2:	2b20      	cmp	r3, #32
 80063e4:	d10e      	bne.n	8006404 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	f003 0320 	and.w	r3, r3, #32
 80063f0:	2b20      	cmp	r3, #32
 80063f2:	d107      	bne.n	8006404 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f06f 0220 	mvn.w	r2, #32
 80063fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f001 f820 	bl	8007444 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006404:	bf00      	nop
 8006406:	3708      	adds	r7, #8
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006418:	2300      	movs	r3, #0
 800641a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006422:	2b01      	cmp	r3, #1
 8006424:	d101      	bne.n	800642a <HAL_TIM_IC_ConfigChannel+0x1e>
 8006426:	2302      	movs	r3, #2
 8006428:	e088      	b.n	800653c <HAL_TIM_IC_ConfigChannel+0x130>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d11b      	bne.n	8006470 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6818      	ldr	r0, [r3, #0]
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	6819      	ldr	r1, [r3, #0]
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	685a      	ldr	r2, [r3, #4]
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	f000 fd96 	bl	8006f78 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	699a      	ldr	r2, [r3, #24]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f022 020c 	bic.w	r2, r2, #12
 800645a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6999      	ldr	r1, [r3, #24]
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	689a      	ldr	r2, [r3, #8]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	430a      	orrs	r2, r1
 800646c:	619a      	str	r2, [r3, #24]
 800646e:	e060      	b.n	8006532 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b04      	cmp	r3, #4
 8006474:	d11c      	bne.n	80064b0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6818      	ldr	r0, [r3, #0]
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	6819      	ldr	r1, [r3, #0]
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	f000 fe1a 	bl	80070be <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	699a      	ldr	r2, [r3, #24]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006498:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6999      	ldr	r1, [r3, #24]
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	021a      	lsls	r2, r3, #8
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	619a      	str	r2, [r3, #24]
 80064ae:	e040      	b.n	8006532 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b08      	cmp	r3, #8
 80064b4:	d11b      	bne.n	80064ee <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6818      	ldr	r0, [r3, #0]
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	6819      	ldr	r1, [r3, #0]
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	685a      	ldr	r2, [r3, #4]
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	f000 fe67 	bl	8007198 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	69da      	ldr	r2, [r3, #28]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f022 020c 	bic.w	r2, r2, #12
 80064d8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	69d9      	ldr	r1, [r3, #28]
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	689a      	ldr	r2, [r3, #8]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	430a      	orrs	r2, r1
 80064ea:	61da      	str	r2, [r3, #28]
 80064ec:	e021      	b.n	8006532 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2b0c      	cmp	r3, #12
 80064f2:	d11c      	bne.n	800652e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6818      	ldr	r0, [r3, #0]
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	6819      	ldr	r1, [r3, #0]
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	685a      	ldr	r2, [r3, #4]
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f000 fe84 	bl	8007210 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	69da      	ldr	r2, [r3, #28]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006516:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	69d9      	ldr	r1, [r3, #28]
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	021a      	lsls	r2, r3, #8
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	430a      	orrs	r2, r1
 800652a:	61da      	str	r2, [r3, #28]
 800652c:	e001      	b.n	8006532 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800653a:	7dfb      	ldrb	r3, [r7, #23]
}
 800653c:	4618      	mov	r0, r3
 800653e:	3718      	adds	r7, #24
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006550:	2300      	movs	r3, #0
 8006552:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800655a:	2b01      	cmp	r3, #1
 800655c:	d101      	bne.n	8006562 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800655e:	2302      	movs	r3, #2
 8006560:	e0ae      	b.n	80066c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b0c      	cmp	r3, #12
 800656e:	f200 809f 	bhi.w	80066b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006572:	a201      	add	r2, pc, #4	; (adr r2, 8006578 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006578:	080065ad 	.word	0x080065ad
 800657c:	080066b1 	.word	0x080066b1
 8006580:	080066b1 	.word	0x080066b1
 8006584:	080066b1 	.word	0x080066b1
 8006588:	080065ed 	.word	0x080065ed
 800658c:	080066b1 	.word	0x080066b1
 8006590:	080066b1 	.word	0x080066b1
 8006594:	080066b1 	.word	0x080066b1
 8006598:	0800662f 	.word	0x0800662f
 800659c:	080066b1 	.word	0x080066b1
 80065a0:	080066b1 	.word	0x080066b1
 80065a4:	080066b1 	.word	0x080066b1
 80065a8:	0800666f 	.word	0x0800666f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68b9      	ldr	r1, [r7, #8]
 80065b2:	4618      	mov	r0, r3
 80065b4:	f000 fa9e 	bl	8006af4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	699a      	ldr	r2, [r3, #24]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f042 0208 	orr.w	r2, r2, #8
 80065c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	699a      	ldr	r2, [r3, #24]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f022 0204 	bic.w	r2, r2, #4
 80065d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	6999      	ldr	r1, [r3, #24]
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	691a      	ldr	r2, [r3, #16]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	430a      	orrs	r2, r1
 80065e8:	619a      	str	r2, [r3, #24]
      break;
 80065ea:	e064      	b.n	80066b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68b9      	ldr	r1, [r7, #8]
 80065f2:	4618      	mov	r0, r3
 80065f4:	f000 faee 	bl	8006bd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	699a      	ldr	r2, [r3, #24]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006606:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	699a      	ldr	r2, [r3, #24]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006616:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	6999      	ldr	r1, [r3, #24]
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	021a      	lsls	r2, r3, #8
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	430a      	orrs	r2, r1
 800662a:	619a      	str	r2, [r3, #24]
      break;
 800662c:	e043      	b.n	80066b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68b9      	ldr	r1, [r7, #8]
 8006634:	4618      	mov	r0, r3
 8006636:	f000 fb43 	bl	8006cc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	69da      	ldr	r2, [r3, #28]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f042 0208 	orr.w	r2, r2, #8
 8006648:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	69da      	ldr	r2, [r3, #28]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f022 0204 	bic.w	r2, r2, #4
 8006658:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	69d9      	ldr	r1, [r3, #28]
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	691a      	ldr	r2, [r3, #16]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	430a      	orrs	r2, r1
 800666a:	61da      	str	r2, [r3, #28]
      break;
 800666c:	e023      	b.n	80066b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68b9      	ldr	r1, [r7, #8]
 8006674:	4618      	mov	r0, r3
 8006676:	f000 fb97 	bl	8006da8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	69da      	ldr	r2, [r3, #28]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006688:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	69da      	ldr	r2, [r3, #28]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006698:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	69d9      	ldr	r1, [r3, #28]
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	021a      	lsls	r2, r3, #8
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	61da      	str	r2, [r3, #28]
      break;
 80066ae:	e002      	b.n	80066b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	75fb      	strb	r3, [r7, #23]
      break;
 80066b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066be:	7dfb      	ldrb	r3, [r7, #23]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3718      	adds	r7, #24
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066d2:	2300      	movs	r3, #0
 80066d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d101      	bne.n	80066e4 <HAL_TIM_ConfigClockSource+0x1c>
 80066e0:	2302      	movs	r3, #2
 80066e2:	e0b4      	b.n	800684e <HAL_TIM_ConfigClockSource+0x186>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2202      	movs	r2, #2
 80066f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006702:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800670a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68ba      	ldr	r2, [r7, #8]
 8006712:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800671c:	d03e      	beq.n	800679c <HAL_TIM_ConfigClockSource+0xd4>
 800671e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006722:	f200 8087 	bhi.w	8006834 <HAL_TIM_ConfigClockSource+0x16c>
 8006726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800672a:	f000 8086 	beq.w	800683a <HAL_TIM_ConfigClockSource+0x172>
 800672e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006732:	d87f      	bhi.n	8006834 <HAL_TIM_ConfigClockSource+0x16c>
 8006734:	2b70      	cmp	r3, #112	; 0x70
 8006736:	d01a      	beq.n	800676e <HAL_TIM_ConfigClockSource+0xa6>
 8006738:	2b70      	cmp	r3, #112	; 0x70
 800673a:	d87b      	bhi.n	8006834 <HAL_TIM_ConfigClockSource+0x16c>
 800673c:	2b60      	cmp	r3, #96	; 0x60
 800673e:	d050      	beq.n	80067e2 <HAL_TIM_ConfigClockSource+0x11a>
 8006740:	2b60      	cmp	r3, #96	; 0x60
 8006742:	d877      	bhi.n	8006834 <HAL_TIM_ConfigClockSource+0x16c>
 8006744:	2b50      	cmp	r3, #80	; 0x50
 8006746:	d03c      	beq.n	80067c2 <HAL_TIM_ConfigClockSource+0xfa>
 8006748:	2b50      	cmp	r3, #80	; 0x50
 800674a:	d873      	bhi.n	8006834 <HAL_TIM_ConfigClockSource+0x16c>
 800674c:	2b40      	cmp	r3, #64	; 0x40
 800674e:	d058      	beq.n	8006802 <HAL_TIM_ConfigClockSource+0x13a>
 8006750:	2b40      	cmp	r3, #64	; 0x40
 8006752:	d86f      	bhi.n	8006834 <HAL_TIM_ConfigClockSource+0x16c>
 8006754:	2b30      	cmp	r3, #48	; 0x30
 8006756:	d064      	beq.n	8006822 <HAL_TIM_ConfigClockSource+0x15a>
 8006758:	2b30      	cmp	r3, #48	; 0x30
 800675a:	d86b      	bhi.n	8006834 <HAL_TIM_ConfigClockSource+0x16c>
 800675c:	2b20      	cmp	r3, #32
 800675e:	d060      	beq.n	8006822 <HAL_TIM_ConfigClockSource+0x15a>
 8006760:	2b20      	cmp	r3, #32
 8006762:	d867      	bhi.n	8006834 <HAL_TIM_ConfigClockSource+0x16c>
 8006764:	2b00      	cmp	r3, #0
 8006766:	d05c      	beq.n	8006822 <HAL_TIM_ConfigClockSource+0x15a>
 8006768:	2b10      	cmp	r3, #16
 800676a:	d05a      	beq.n	8006822 <HAL_TIM_ConfigClockSource+0x15a>
 800676c:	e062      	b.n	8006834 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6818      	ldr	r0, [r3, #0]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	6899      	ldr	r1, [r3, #8]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	685a      	ldr	r2, [r3, #4]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	f000 fd9f 	bl	80072c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006790:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	609a      	str	r2, [r3, #8]
      break;
 800679a:	e04f      	b.n	800683c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6818      	ldr	r0, [r3, #0]
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	6899      	ldr	r1, [r3, #8]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	685a      	ldr	r2, [r3, #4]
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	f000 fd88 	bl	80072c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	689a      	ldr	r2, [r3, #8]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067be:	609a      	str	r2, [r3, #8]
      break;
 80067c0:	e03c      	b.n	800683c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6818      	ldr	r0, [r3, #0]
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	6859      	ldr	r1, [r3, #4]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	461a      	mov	r2, r3
 80067d0:	f000 fc46 	bl	8007060 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2150      	movs	r1, #80	; 0x50
 80067da:	4618      	mov	r0, r3
 80067dc:	f000 fd55 	bl	800728a <TIM_ITRx_SetConfig>
      break;
 80067e0:	e02c      	b.n	800683c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6818      	ldr	r0, [r3, #0]
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	6859      	ldr	r1, [r3, #4]
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	461a      	mov	r2, r3
 80067f0:	f000 fca2 	bl	8007138 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2160      	movs	r1, #96	; 0x60
 80067fa:	4618      	mov	r0, r3
 80067fc:	f000 fd45 	bl	800728a <TIM_ITRx_SetConfig>
      break;
 8006800:	e01c      	b.n	800683c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6818      	ldr	r0, [r3, #0]
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	6859      	ldr	r1, [r3, #4]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	461a      	mov	r2, r3
 8006810:	f000 fc26 	bl	8007060 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2140      	movs	r1, #64	; 0x40
 800681a:	4618      	mov	r0, r3
 800681c:	f000 fd35 	bl	800728a <TIM_ITRx_SetConfig>
      break;
 8006820:	e00c      	b.n	800683c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4619      	mov	r1, r3
 800682c:	4610      	mov	r0, r2
 800682e:	f000 fd2c 	bl	800728a <TIM_ITRx_SetConfig>
      break;
 8006832:	e003      	b.n	800683c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	73fb      	strb	r3, [r7, #15]
      break;
 8006838:	e000      	b.n	800683c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800683a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800684c:	7bfb      	ldrb	r3, [r7, #15]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b082      	sub	sp, #8
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006866:	2b01      	cmp	r3, #1
 8006868:	d101      	bne.n	800686e <HAL_TIM_SlaveConfigSynchro+0x18>
 800686a:	2302      	movs	r3, #2
 800686c:	e031      	b.n	80068d2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2202      	movs	r2, #2
 800687a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800687e:	6839      	ldr	r1, [r7, #0]
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 fae7 	bl	8006e54 <TIM_SlaveTimer_SetConfig>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d009      	beq.n	80068a0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e018      	b.n	80068d2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68da      	ldr	r2, [r3, #12]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068ae:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68da      	ldr	r2, [r3, #12]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80068be:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
	...

080068dc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80068e6:	2300      	movs	r3, #0
 80068e8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	2b0c      	cmp	r3, #12
 80068ee:	d831      	bhi.n	8006954 <HAL_TIM_ReadCapturedValue+0x78>
 80068f0:	a201      	add	r2, pc, #4	; (adr r2, 80068f8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80068f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f6:	bf00      	nop
 80068f8:	0800692d 	.word	0x0800692d
 80068fc:	08006955 	.word	0x08006955
 8006900:	08006955 	.word	0x08006955
 8006904:	08006955 	.word	0x08006955
 8006908:	08006937 	.word	0x08006937
 800690c:	08006955 	.word	0x08006955
 8006910:	08006955 	.word	0x08006955
 8006914:	08006955 	.word	0x08006955
 8006918:	08006941 	.word	0x08006941
 800691c:	08006955 	.word	0x08006955
 8006920:	08006955 	.word	0x08006955
 8006924:	08006955 	.word	0x08006955
 8006928:	0800694b 	.word	0x0800694b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006932:	60fb      	str	r3, [r7, #12]

      break;
 8006934:	e00f      	b.n	8006956 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693c:	60fb      	str	r3, [r7, #12]

      break;
 800693e:	e00a      	b.n	8006956 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006946:	60fb      	str	r3, [r7, #12]

      break;
 8006948:	e005      	b.n	8006956 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006950:	60fb      	str	r3, [r7, #12]

      break;
 8006952:	e000      	b.n	8006956 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006954:	bf00      	nop
  }

  return tmpreg;
 8006956:	68fb      	ldr	r3, [r7, #12]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3714      	adds	r7, #20
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006994:	bf00      	nop
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069a8:	bf00      	nop
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a40      	ldr	r2, [pc, #256]	; (8006ac8 <TIM_Base_SetConfig+0x114>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d013      	beq.n	80069f4 <TIM_Base_SetConfig+0x40>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069d2:	d00f      	beq.n	80069f4 <TIM_Base_SetConfig+0x40>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a3d      	ldr	r2, [pc, #244]	; (8006acc <TIM_Base_SetConfig+0x118>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d00b      	beq.n	80069f4 <TIM_Base_SetConfig+0x40>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a3c      	ldr	r2, [pc, #240]	; (8006ad0 <TIM_Base_SetConfig+0x11c>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d007      	beq.n	80069f4 <TIM_Base_SetConfig+0x40>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a3b      	ldr	r2, [pc, #236]	; (8006ad4 <TIM_Base_SetConfig+0x120>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d003      	beq.n	80069f4 <TIM_Base_SetConfig+0x40>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a3a      	ldr	r2, [pc, #232]	; (8006ad8 <TIM_Base_SetConfig+0x124>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d108      	bne.n	8006a06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a2f      	ldr	r2, [pc, #188]	; (8006ac8 <TIM_Base_SetConfig+0x114>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d02b      	beq.n	8006a66 <TIM_Base_SetConfig+0xb2>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a14:	d027      	beq.n	8006a66 <TIM_Base_SetConfig+0xb2>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a2c      	ldr	r2, [pc, #176]	; (8006acc <TIM_Base_SetConfig+0x118>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d023      	beq.n	8006a66 <TIM_Base_SetConfig+0xb2>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a2b      	ldr	r2, [pc, #172]	; (8006ad0 <TIM_Base_SetConfig+0x11c>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d01f      	beq.n	8006a66 <TIM_Base_SetConfig+0xb2>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a2a      	ldr	r2, [pc, #168]	; (8006ad4 <TIM_Base_SetConfig+0x120>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d01b      	beq.n	8006a66 <TIM_Base_SetConfig+0xb2>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a29      	ldr	r2, [pc, #164]	; (8006ad8 <TIM_Base_SetConfig+0x124>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d017      	beq.n	8006a66 <TIM_Base_SetConfig+0xb2>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a28      	ldr	r2, [pc, #160]	; (8006adc <TIM_Base_SetConfig+0x128>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d013      	beq.n	8006a66 <TIM_Base_SetConfig+0xb2>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a27      	ldr	r2, [pc, #156]	; (8006ae0 <TIM_Base_SetConfig+0x12c>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d00f      	beq.n	8006a66 <TIM_Base_SetConfig+0xb2>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a26      	ldr	r2, [pc, #152]	; (8006ae4 <TIM_Base_SetConfig+0x130>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d00b      	beq.n	8006a66 <TIM_Base_SetConfig+0xb2>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a25      	ldr	r2, [pc, #148]	; (8006ae8 <TIM_Base_SetConfig+0x134>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d007      	beq.n	8006a66 <TIM_Base_SetConfig+0xb2>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a24      	ldr	r2, [pc, #144]	; (8006aec <TIM_Base_SetConfig+0x138>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d003      	beq.n	8006a66 <TIM_Base_SetConfig+0xb2>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a23      	ldr	r2, [pc, #140]	; (8006af0 <TIM_Base_SetConfig+0x13c>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d108      	bne.n	8006a78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	689a      	ldr	r2, [r3, #8]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a0a      	ldr	r2, [pc, #40]	; (8006ac8 <TIM_Base_SetConfig+0x114>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d003      	beq.n	8006aac <TIM_Base_SetConfig+0xf8>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a0c      	ldr	r2, [pc, #48]	; (8006ad8 <TIM_Base_SetConfig+0x124>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d103      	bne.n	8006ab4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	691a      	ldr	r2, [r3, #16]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	615a      	str	r2, [r3, #20]
}
 8006aba:	bf00      	nop
 8006abc:	3714      	adds	r7, #20
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	40010000 	.word	0x40010000
 8006acc:	40000400 	.word	0x40000400
 8006ad0:	40000800 	.word	0x40000800
 8006ad4:	40000c00 	.word	0x40000c00
 8006ad8:	40010400 	.word	0x40010400
 8006adc:	40014000 	.word	0x40014000
 8006ae0:	40014400 	.word	0x40014400
 8006ae4:	40014800 	.word	0x40014800
 8006ae8:	40001800 	.word	0x40001800
 8006aec:	40001c00 	.word	0x40001c00
 8006af0:	40002000 	.word	0x40002000

08006af4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b087      	sub	sp, #28
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	f023 0201 	bic.w	r2, r3, #1
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a1b      	ldr	r3, [r3, #32]
 8006b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f023 0303 	bic.w	r3, r3, #3
 8006b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	f023 0302 	bic.w	r3, r3, #2
 8006b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a20      	ldr	r2, [pc, #128]	; (8006bcc <TIM_OC1_SetConfig+0xd8>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d003      	beq.n	8006b58 <TIM_OC1_SetConfig+0x64>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a1f      	ldr	r2, [pc, #124]	; (8006bd0 <TIM_OC1_SetConfig+0xdc>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d10c      	bne.n	8006b72 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	f023 0308 	bic.w	r3, r3, #8
 8006b5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	f023 0304 	bic.w	r3, r3, #4
 8006b70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a15      	ldr	r2, [pc, #84]	; (8006bcc <TIM_OC1_SetConfig+0xd8>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d003      	beq.n	8006b82 <TIM_OC1_SetConfig+0x8e>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a14      	ldr	r2, [pc, #80]	; (8006bd0 <TIM_OC1_SetConfig+0xdc>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d111      	bne.n	8006ba6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	695b      	ldr	r3, [r3, #20]
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	685a      	ldr	r2, [r3, #4]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	621a      	str	r2, [r3, #32]
}
 8006bc0:	bf00      	nop
 8006bc2:	371c      	adds	r7, #28
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr
 8006bcc:	40010000 	.word	0x40010000
 8006bd0:	40010400 	.word	0x40010400

08006bd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b087      	sub	sp, #28
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	f023 0210 	bic.w	r2, r3, #16
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a1b      	ldr	r3, [r3, #32]
 8006bee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	021b      	lsls	r3, r3, #8
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	f023 0320 	bic.w	r3, r3, #32
 8006c1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	011b      	lsls	r3, r3, #4
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a22      	ldr	r2, [pc, #136]	; (8006cb8 <TIM_OC2_SetConfig+0xe4>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d003      	beq.n	8006c3c <TIM_OC2_SetConfig+0x68>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a21      	ldr	r2, [pc, #132]	; (8006cbc <TIM_OC2_SetConfig+0xe8>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d10d      	bne.n	8006c58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	011b      	lsls	r3, r3, #4
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a17      	ldr	r2, [pc, #92]	; (8006cb8 <TIM_OC2_SetConfig+0xe4>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d003      	beq.n	8006c68 <TIM_OC2_SetConfig+0x94>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a16      	ldr	r2, [pc, #88]	; (8006cbc <TIM_OC2_SetConfig+0xe8>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d113      	bne.n	8006c90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	695b      	ldr	r3, [r3, #20]
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	693a      	ldr	r2, [r7, #16]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	685a      	ldr	r2, [r3, #4]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	621a      	str	r2, [r3, #32]
}
 8006caa:	bf00      	nop
 8006cac:	371c      	adds	r7, #28
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	40010000 	.word	0x40010000
 8006cbc:	40010400 	.word	0x40010400

08006cc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b087      	sub	sp, #28
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a1b      	ldr	r3, [r3, #32]
 8006cce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a1b      	ldr	r3, [r3, #32]
 8006cda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	69db      	ldr	r3, [r3, #28]
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f023 0303 	bic.w	r3, r3, #3
 8006cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	021b      	lsls	r3, r3, #8
 8006d10:	697a      	ldr	r2, [r7, #20]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a21      	ldr	r2, [pc, #132]	; (8006da0 <TIM_OC3_SetConfig+0xe0>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d003      	beq.n	8006d26 <TIM_OC3_SetConfig+0x66>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4a20      	ldr	r2, [pc, #128]	; (8006da4 <TIM_OC3_SetConfig+0xe4>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d10d      	bne.n	8006d42 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	021b      	lsls	r3, r3, #8
 8006d34:	697a      	ldr	r2, [r7, #20]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a16      	ldr	r2, [pc, #88]	; (8006da0 <TIM_OC3_SetConfig+0xe0>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d003      	beq.n	8006d52 <TIM_OC3_SetConfig+0x92>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a15      	ldr	r2, [pc, #84]	; (8006da4 <TIM_OC3_SetConfig+0xe4>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d113      	bne.n	8006d7a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	011b      	lsls	r3, r3, #4
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	011b      	lsls	r3, r3, #4
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	685a      	ldr	r2, [r3, #4]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	621a      	str	r2, [r3, #32]
}
 8006d94:	bf00      	nop
 8006d96:	371c      	adds	r7, #28
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	40010000 	.word	0x40010000
 8006da4:	40010400 	.word	0x40010400

08006da8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b087      	sub	sp, #28
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	021b      	lsls	r3, r3, #8
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006df2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	031b      	lsls	r3, r3, #12
 8006dfa:	693a      	ldr	r2, [r7, #16]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a12      	ldr	r2, [pc, #72]	; (8006e4c <TIM_OC4_SetConfig+0xa4>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d003      	beq.n	8006e10 <TIM_OC4_SetConfig+0x68>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a11      	ldr	r2, [pc, #68]	; (8006e50 <TIM_OC4_SetConfig+0xa8>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d109      	bne.n	8006e24 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	695b      	ldr	r3, [r3, #20]
 8006e1c:	019b      	lsls	r3, r3, #6
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	685a      	ldr	r2, [r3, #4]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	621a      	str	r2, [r3, #32]
}
 8006e3e:	bf00      	nop
 8006e40:	371c      	adds	r7, #28
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	40010000 	.word	0x40010000
 8006e50:	40010400 	.word	0x40010400

08006e54 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b086      	sub	sp, #24
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e70:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	f023 0307 	bic.w	r3, r3, #7
 8006e82:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	693a      	ldr	r2, [r7, #16]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	693a      	ldr	r2, [r7, #16]
 8006e94:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	2b70      	cmp	r3, #112	; 0x70
 8006e9c:	d01a      	beq.n	8006ed4 <TIM_SlaveTimer_SetConfig+0x80>
 8006e9e:	2b70      	cmp	r3, #112	; 0x70
 8006ea0:	d860      	bhi.n	8006f64 <TIM_SlaveTimer_SetConfig+0x110>
 8006ea2:	2b60      	cmp	r3, #96	; 0x60
 8006ea4:	d054      	beq.n	8006f50 <TIM_SlaveTimer_SetConfig+0xfc>
 8006ea6:	2b60      	cmp	r3, #96	; 0x60
 8006ea8:	d85c      	bhi.n	8006f64 <TIM_SlaveTimer_SetConfig+0x110>
 8006eaa:	2b50      	cmp	r3, #80	; 0x50
 8006eac:	d046      	beq.n	8006f3c <TIM_SlaveTimer_SetConfig+0xe8>
 8006eae:	2b50      	cmp	r3, #80	; 0x50
 8006eb0:	d858      	bhi.n	8006f64 <TIM_SlaveTimer_SetConfig+0x110>
 8006eb2:	2b40      	cmp	r3, #64	; 0x40
 8006eb4:	d019      	beq.n	8006eea <TIM_SlaveTimer_SetConfig+0x96>
 8006eb6:	2b40      	cmp	r3, #64	; 0x40
 8006eb8:	d854      	bhi.n	8006f64 <TIM_SlaveTimer_SetConfig+0x110>
 8006eba:	2b30      	cmp	r3, #48	; 0x30
 8006ebc:	d055      	beq.n	8006f6a <TIM_SlaveTimer_SetConfig+0x116>
 8006ebe:	2b30      	cmp	r3, #48	; 0x30
 8006ec0:	d850      	bhi.n	8006f64 <TIM_SlaveTimer_SetConfig+0x110>
 8006ec2:	2b20      	cmp	r3, #32
 8006ec4:	d051      	beq.n	8006f6a <TIM_SlaveTimer_SetConfig+0x116>
 8006ec6:	2b20      	cmp	r3, #32
 8006ec8:	d84c      	bhi.n	8006f64 <TIM_SlaveTimer_SetConfig+0x110>
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d04d      	beq.n	8006f6a <TIM_SlaveTimer_SetConfig+0x116>
 8006ece:	2b10      	cmp	r3, #16
 8006ed0:	d04b      	beq.n	8006f6a <TIM_SlaveTimer_SetConfig+0x116>
 8006ed2:	e047      	b.n	8006f64 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6818      	ldr	r0, [r3, #0]
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	68d9      	ldr	r1, [r3, #12]
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	689a      	ldr	r2, [r3, #8]
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	f000 f9ec 	bl	80072c0 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8006ee8:	e040      	b.n	8006f6c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2b05      	cmp	r3, #5
 8006ef0:	d101      	bne.n	8006ef6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e03b      	b.n	8006f6e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	6a1b      	ldr	r3, [r3, #32]
 8006efc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	6a1a      	ldr	r2, [r3, #32]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f022 0201 	bic.w	r2, r2, #1
 8006f0c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f1c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	011b      	lsls	r3, r3, #4
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	621a      	str	r2, [r3, #32]
      break;
 8006f3a:	e017      	b.n	8006f6c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6818      	ldr	r0, [r3, #0]
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	6899      	ldr	r1, [r3, #8]
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	461a      	mov	r2, r3
 8006f4a:	f000 f889 	bl	8007060 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006f4e:	e00d      	b.n	8006f6c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6818      	ldr	r0, [r3, #0]
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	6899      	ldr	r1, [r3, #8]
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	f000 f8eb 	bl	8007138 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006f62:	e003      	b.n	8006f6c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	75fb      	strb	r3, [r7, #23]
      break;
 8006f68:	e000      	b.n	8006f6c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8006f6a:	bf00      	nop
  }

  return status;
 8006f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3718      	adds	r7, #24
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
	...

08006f78 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b087      	sub	sp, #28
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
 8006f84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	f023 0201 	bic.w	r2, r3, #1
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6a1b      	ldr	r3, [r3, #32]
 8006f9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	4a28      	ldr	r2, [pc, #160]	; (8007044 <TIM_TI1_SetConfig+0xcc>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d01b      	beq.n	8006fde <TIM_TI1_SetConfig+0x66>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fac:	d017      	beq.n	8006fde <TIM_TI1_SetConfig+0x66>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	4a25      	ldr	r2, [pc, #148]	; (8007048 <TIM_TI1_SetConfig+0xd0>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d013      	beq.n	8006fde <TIM_TI1_SetConfig+0x66>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	4a24      	ldr	r2, [pc, #144]	; (800704c <TIM_TI1_SetConfig+0xd4>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d00f      	beq.n	8006fde <TIM_TI1_SetConfig+0x66>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	4a23      	ldr	r2, [pc, #140]	; (8007050 <TIM_TI1_SetConfig+0xd8>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d00b      	beq.n	8006fde <TIM_TI1_SetConfig+0x66>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	4a22      	ldr	r2, [pc, #136]	; (8007054 <TIM_TI1_SetConfig+0xdc>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d007      	beq.n	8006fde <TIM_TI1_SetConfig+0x66>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	4a21      	ldr	r2, [pc, #132]	; (8007058 <TIM_TI1_SetConfig+0xe0>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d003      	beq.n	8006fde <TIM_TI1_SetConfig+0x66>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	4a20      	ldr	r2, [pc, #128]	; (800705c <TIM_TI1_SetConfig+0xe4>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d101      	bne.n	8006fe2 <TIM_TI1_SetConfig+0x6a>
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e000      	b.n	8006fe4 <TIM_TI1_SetConfig+0x6c>
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d008      	beq.n	8006ffa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	f023 0303 	bic.w	r3, r3, #3
 8006fee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006ff0:	697a      	ldr	r2, [r7, #20]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	617b      	str	r3, [r7, #20]
 8006ff8:	e003      	b.n	8007002 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	f043 0301 	orr.w	r3, r3, #1
 8007000:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007008:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	011b      	lsls	r3, r3, #4
 800700e:	b2db      	uxtb	r3, r3
 8007010:	697a      	ldr	r2, [r7, #20]
 8007012:	4313      	orrs	r3, r2
 8007014:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	f023 030a 	bic.w	r3, r3, #10
 800701c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	f003 030a 	and.w	r3, r3, #10
 8007024:	693a      	ldr	r2, [r7, #16]
 8007026:	4313      	orrs	r3, r2
 8007028:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	697a      	ldr	r2, [r7, #20]
 800702e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	621a      	str	r2, [r3, #32]
}
 8007036:	bf00      	nop
 8007038:	371c      	adds	r7, #28
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	40010000 	.word	0x40010000
 8007048:	40000400 	.word	0x40000400
 800704c:	40000800 	.word	0x40000800
 8007050:	40000c00 	.word	0x40000c00
 8007054:	40010400 	.word	0x40010400
 8007058:	40014000 	.word	0x40014000
 800705c:	40001800 	.word	0x40001800

08007060 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007060:	b480      	push	{r7}
 8007062:	b087      	sub	sp, #28
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	f023 0201 	bic.w	r2, r3, #1
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800708a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	011b      	lsls	r3, r3, #4
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	4313      	orrs	r3, r2
 8007094:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	f023 030a 	bic.w	r3, r3, #10
 800709c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	697a      	ldr	r2, [r7, #20]
 80070b0:	621a      	str	r2, [r3, #32]
}
 80070b2:	bf00      	nop
 80070b4:	371c      	adds	r7, #28
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80070be:	b480      	push	{r7}
 80070c0:	b087      	sub	sp, #28
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	60f8      	str	r0, [r7, #12]
 80070c6:	60b9      	str	r1, [r7, #8]
 80070c8:	607a      	str	r2, [r7, #4]
 80070ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6a1b      	ldr	r3, [r3, #32]
 80070d0:	f023 0210 	bic.w	r2, r3, #16
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	699b      	ldr	r3, [r3, #24]
 80070dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	021b      	lsls	r3, r3, #8
 80070f0:	697a      	ldr	r2, [r7, #20]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	031b      	lsls	r3, r3, #12
 8007102:	b29b      	uxth	r3, r3
 8007104:	697a      	ldr	r2, [r7, #20]
 8007106:	4313      	orrs	r3, r2
 8007108:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007110:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	011b      	lsls	r3, r3, #4
 8007116:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	4313      	orrs	r3, r2
 800711e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	697a      	ldr	r2, [r7, #20]
 8007124:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	621a      	str	r2, [r3, #32]
}
 800712c:	bf00      	nop
 800712e:	371c      	adds	r7, #28
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007138:	b480      	push	{r7}
 800713a:	b087      	sub	sp, #28
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6a1b      	ldr	r3, [r3, #32]
 8007148:	f023 0210 	bic.w	r2, r3, #16
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007162:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	031b      	lsls	r3, r3, #12
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	4313      	orrs	r3, r2
 800716c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007174:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	011b      	lsls	r3, r3, #4
 800717a:	693a      	ldr	r2, [r7, #16]
 800717c:	4313      	orrs	r3, r2
 800717e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	697a      	ldr	r2, [r7, #20]
 8007184:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	621a      	str	r2, [r3, #32]
}
 800718c:	bf00      	nop
 800718e:	371c      	adds	r7, #28
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007198:	b480      	push	{r7}
 800719a:	b087      	sub	sp, #28
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]
 80071a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6a1b      	ldr	r3, [r3, #32]
 80071aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	69db      	ldr	r3, [r3, #28]
 80071b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6a1b      	ldr	r3, [r3, #32]
 80071bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	f023 0303 	bic.w	r3, r3, #3
 80071c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	011b      	lsls	r3, r3, #4
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	697a      	ldr	r2, [r7, #20]
 80071de:	4313      	orrs	r3, r2
 80071e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80071e8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	021b      	lsls	r3, r3, #8
 80071ee:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80071f2:	693a      	ldr	r2, [r7, #16]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	693a      	ldr	r2, [r7, #16]
 8007202:	621a      	str	r2, [r3, #32]
}
 8007204:	bf00      	nop
 8007206:	371c      	adds	r7, #28
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007210:	b480      	push	{r7}
 8007212:	b087      	sub	sp, #28
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
 800721c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	69db      	ldr	r3, [r3, #28]
 800722e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6a1b      	ldr	r3, [r3, #32]
 8007234:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800723c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	021b      	lsls	r3, r3, #8
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	4313      	orrs	r3, r2
 8007246:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800724e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	031b      	lsls	r3, r3, #12
 8007254:	b29b      	uxth	r3, r3
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	4313      	orrs	r3, r2
 800725a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007262:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	031b      	lsls	r3, r3, #12
 8007268:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800726c:	693a      	ldr	r2, [r7, #16]
 800726e:	4313      	orrs	r3, r2
 8007270:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	697a      	ldr	r2, [r7, #20]
 8007276:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	693a      	ldr	r2, [r7, #16]
 800727c:	621a      	str	r2, [r3, #32]
}
 800727e:	bf00      	nop
 8007280:	371c      	adds	r7, #28
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr

0800728a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800728a:	b480      	push	{r7}
 800728c:	b085      	sub	sp, #20
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
 8007292:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072a2:	683a      	ldr	r2, [r7, #0]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	f043 0307 	orr.w	r3, r3, #7
 80072ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	609a      	str	r2, [r3, #8]
}
 80072b4:	bf00      	nop
 80072b6:	3714      	adds	r7, #20
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b087      	sub	sp, #28
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
 80072cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	021a      	lsls	r2, r3, #8
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	431a      	orrs	r2, r3
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	697a      	ldr	r2, [r7, #20]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	609a      	str	r2, [r3, #8]
}
 80072f4:	bf00      	nop
 80072f6:	371c      	adds	r7, #28
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007300:	b480      	push	{r7}
 8007302:	b087      	sub	sp, #28
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	f003 031f 	and.w	r3, r3, #31
 8007312:	2201      	movs	r2, #1
 8007314:	fa02 f303 	lsl.w	r3, r2, r3
 8007318:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6a1a      	ldr	r2, [r3, #32]
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	43db      	mvns	r3, r3
 8007322:	401a      	ands	r2, r3
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6a1a      	ldr	r2, [r3, #32]
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	f003 031f 	and.w	r3, r3, #31
 8007332:	6879      	ldr	r1, [r7, #4]
 8007334:	fa01 f303 	lsl.w	r3, r1, r3
 8007338:	431a      	orrs	r2, r3
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	621a      	str	r2, [r3, #32]
}
 800733e:	bf00      	nop
 8007340:	371c      	adds	r7, #28
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
	...

0800734c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800734c:	b480      	push	{r7}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800735c:	2b01      	cmp	r3, #1
 800735e:	d101      	bne.n	8007364 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007360:	2302      	movs	r3, #2
 8007362:	e05a      	b.n	800741a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2202      	movs	r2, #2
 8007370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800738a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	4313      	orrs	r3, r2
 8007394:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a21      	ldr	r2, [pc, #132]	; (8007428 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d022      	beq.n	80073ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073b0:	d01d      	beq.n	80073ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a1d      	ldr	r2, [pc, #116]	; (800742c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d018      	beq.n	80073ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a1b      	ldr	r2, [pc, #108]	; (8007430 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d013      	beq.n	80073ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a1a      	ldr	r2, [pc, #104]	; (8007434 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d00e      	beq.n	80073ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a18      	ldr	r2, [pc, #96]	; (8007438 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d009      	beq.n	80073ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a17      	ldr	r2, [pc, #92]	; (800743c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d004      	beq.n	80073ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a15      	ldr	r2, [pc, #84]	; (8007440 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d10c      	bne.n	8007408 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68ba      	ldr	r2, [r7, #8]
 8007406:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3714      	adds	r7, #20
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	40010000 	.word	0x40010000
 800742c:	40000400 	.word	0x40000400
 8007430:	40000800 	.word	0x40000800
 8007434:	40000c00 	.word	0x40000c00
 8007438:	40010400 	.word	0x40010400
 800743c:	40014000 	.word	0x40014000
 8007440:	40001800 	.word	0x40001800

08007444 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d101      	bne.n	800747e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e03f      	b.n	80074fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b00      	cmp	r3, #0
 8007488:	d106      	bne.n	8007498 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f7fb fc60 	bl	8002d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2224      	movs	r2, #36	; 0x24
 800749c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68da      	ldr	r2, [r3, #12]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 f929 	bl	8007708 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	691a      	ldr	r2, [r3, #16]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	695a      	ldr	r2, [r3, #20]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68da      	ldr	r2, [r3, #12]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2220      	movs	r2, #32
 80074f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2220      	movs	r2, #32
 80074f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b08a      	sub	sp, #40	; 0x28
 800750a:	af02      	add	r7, sp, #8
 800750c:	60f8      	str	r0, [r7, #12]
 800750e:	60b9      	str	r1, [r7, #8]
 8007510:	603b      	str	r3, [r7, #0]
 8007512:	4613      	mov	r3, r2
 8007514:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007516:	2300      	movs	r3, #0
 8007518:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007520:	b2db      	uxtb	r3, r3
 8007522:	2b20      	cmp	r3, #32
 8007524:	d17c      	bne.n	8007620 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d002      	beq.n	8007532 <HAL_UART_Transmit+0x2c>
 800752c:	88fb      	ldrh	r3, [r7, #6]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d101      	bne.n	8007536 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e075      	b.n	8007622 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800753c:	2b01      	cmp	r3, #1
 800753e:	d101      	bne.n	8007544 <HAL_UART_Transmit+0x3e>
 8007540:	2302      	movs	r3, #2
 8007542:	e06e      	b.n	8007622 <HAL_UART_Transmit+0x11c>
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2221      	movs	r2, #33	; 0x21
 8007556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800755a:	f7fb fdeb 	bl	8003134 <HAL_GetTick>
 800755e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	88fa      	ldrh	r2, [r7, #6]
 8007564:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	88fa      	ldrh	r2, [r7, #6]
 800756a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007574:	d108      	bne.n	8007588 <HAL_UART_Transmit+0x82>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d104      	bne.n	8007588 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800757e:	2300      	movs	r3, #0
 8007580:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	61bb      	str	r3, [r7, #24]
 8007586:	e003      	b.n	8007590 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800758c:	2300      	movs	r3, #0
 800758e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007598:	e02a      	b.n	80075f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	2200      	movs	r2, #0
 80075a2:	2180      	movs	r1, #128	; 0x80
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f000 f840 	bl	800762a <UART_WaitOnFlagUntilTimeout>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d001      	beq.n	80075b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e036      	b.n	8007622 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d10b      	bne.n	80075d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	881b      	ldrh	r3, [r3, #0]
 80075be:	461a      	mov	r2, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	3302      	adds	r3, #2
 80075ce:	61bb      	str	r3, [r7, #24]
 80075d0:	e007      	b.n	80075e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	781a      	ldrb	r2, [r3, #0]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	3301      	adds	r3, #1
 80075e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	3b01      	subs	r3, #1
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1cf      	bne.n	800759a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	9300      	str	r3, [sp, #0]
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	2200      	movs	r2, #0
 8007602:	2140      	movs	r1, #64	; 0x40
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f000 f810 	bl	800762a <UART_WaitOnFlagUntilTimeout>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d001      	beq.n	8007614 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007610:	2303      	movs	r3, #3
 8007612:	e006      	b.n	8007622 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2220      	movs	r2, #32
 8007618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800761c:	2300      	movs	r3, #0
 800761e:	e000      	b.n	8007622 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007620:	2302      	movs	r3, #2
  }
}
 8007622:	4618      	mov	r0, r3
 8007624:	3720      	adds	r7, #32
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b090      	sub	sp, #64	; 0x40
 800762e:	af00      	add	r7, sp, #0
 8007630:	60f8      	str	r0, [r7, #12]
 8007632:	60b9      	str	r1, [r7, #8]
 8007634:	603b      	str	r3, [r7, #0]
 8007636:	4613      	mov	r3, r2
 8007638:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800763a:	e050      	b.n	80076de <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800763c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800763e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007642:	d04c      	beq.n	80076de <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007646:	2b00      	cmp	r3, #0
 8007648:	d007      	beq.n	800765a <UART_WaitOnFlagUntilTimeout+0x30>
 800764a:	f7fb fd73 	bl	8003134 <HAL_GetTick>
 800764e:	4602      	mov	r2, r0
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007656:	429a      	cmp	r2, r3
 8007658:	d241      	bcs.n	80076de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	330c      	adds	r3, #12
 8007660:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007664:	e853 3f00 	ldrex	r3, [r3]
 8007668:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007670:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	330c      	adds	r3, #12
 8007678:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800767a:	637a      	str	r2, [r7, #52]	; 0x34
 800767c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007680:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007682:	e841 2300 	strex	r3, r2, [r1]
 8007686:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1e5      	bne.n	800765a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	3314      	adds	r3, #20
 8007694:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	e853 3f00 	ldrex	r3, [r3]
 800769c:	613b      	str	r3, [r7, #16]
   return(result);
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	f023 0301 	bic.w	r3, r3, #1
 80076a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	3314      	adds	r3, #20
 80076ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076ae:	623a      	str	r2, [r7, #32]
 80076b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b2:	69f9      	ldr	r1, [r7, #28]
 80076b4:	6a3a      	ldr	r2, [r7, #32]
 80076b6:	e841 2300 	strex	r3, r2, [r1]
 80076ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1e5      	bne.n	800768e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2220      	movs	r2, #32
 80076c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2220      	movs	r2, #32
 80076ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e00f      	b.n	80076fe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	4013      	ands	r3, r2
 80076e8:	68ba      	ldr	r2, [r7, #8]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	bf0c      	ite	eq
 80076ee:	2301      	moveq	r3, #1
 80076f0:	2300      	movne	r3, #0
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	461a      	mov	r2, r3
 80076f6:	79fb      	ldrb	r3, [r7, #7]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d09f      	beq.n	800763c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3740      	adds	r7, #64	; 0x40
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
	...

08007708 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007708:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800770c:	b0c0      	sub	sp, #256	; 0x100
 800770e:	af00      	add	r7, sp, #0
 8007710:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007724:	68d9      	ldr	r1, [r3, #12]
 8007726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	ea40 0301 	orr.w	r3, r0, r1
 8007730:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007736:	689a      	ldr	r2, [r3, #8]
 8007738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	431a      	orrs	r2, r3
 8007740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	431a      	orrs	r2, r3
 8007748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800774c:	69db      	ldr	r3, [r3, #28]
 800774e:	4313      	orrs	r3, r2
 8007750:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007760:	f021 010c 	bic.w	r1, r1, #12
 8007764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800776e:	430b      	orrs	r3, r1
 8007770:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800777e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007782:	6999      	ldr	r1, [r3, #24]
 8007784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	ea40 0301 	orr.w	r3, r0, r1
 800778e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	4b8f      	ldr	r3, [pc, #572]	; (80079d4 <UART_SetConfig+0x2cc>)
 8007798:	429a      	cmp	r2, r3
 800779a:	d005      	beq.n	80077a8 <UART_SetConfig+0xa0>
 800779c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	4b8d      	ldr	r3, [pc, #564]	; (80079d8 <UART_SetConfig+0x2d0>)
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d104      	bne.n	80077b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80077a8:	f7fc fe86 	bl	80044b8 <HAL_RCC_GetPCLK2Freq>
 80077ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80077b0:	e003      	b.n	80077ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80077b2:	f7fc fe6d 	bl	8004490 <HAL_RCC_GetPCLK1Freq>
 80077b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077be:	69db      	ldr	r3, [r3, #28]
 80077c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077c4:	f040 810c 	bne.w	80079e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80077c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077cc:	2200      	movs	r2, #0
 80077ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80077d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80077d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80077da:	4622      	mov	r2, r4
 80077dc:	462b      	mov	r3, r5
 80077de:	1891      	adds	r1, r2, r2
 80077e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80077e2:	415b      	adcs	r3, r3
 80077e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80077ea:	4621      	mov	r1, r4
 80077ec:	eb12 0801 	adds.w	r8, r2, r1
 80077f0:	4629      	mov	r1, r5
 80077f2:	eb43 0901 	adc.w	r9, r3, r1
 80077f6:	f04f 0200 	mov.w	r2, #0
 80077fa:	f04f 0300 	mov.w	r3, #0
 80077fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007802:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007806:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800780a:	4690      	mov	r8, r2
 800780c:	4699      	mov	r9, r3
 800780e:	4623      	mov	r3, r4
 8007810:	eb18 0303 	adds.w	r3, r8, r3
 8007814:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007818:	462b      	mov	r3, r5
 800781a:	eb49 0303 	adc.w	r3, r9, r3
 800781e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800782e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007832:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007836:	460b      	mov	r3, r1
 8007838:	18db      	adds	r3, r3, r3
 800783a:	653b      	str	r3, [r7, #80]	; 0x50
 800783c:	4613      	mov	r3, r2
 800783e:	eb42 0303 	adc.w	r3, r2, r3
 8007842:	657b      	str	r3, [r7, #84]	; 0x54
 8007844:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007848:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800784c:	f7f9 fa1c 	bl	8000c88 <__aeabi_uldivmod>
 8007850:	4602      	mov	r2, r0
 8007852:	460b      	mov	r3, r1
 8007854:	4b61      	ldr	r3, [pc, #388]	; (80079dc <UART_SetConfig+0x2d4>)
 8007856:	fba3 2302 	umull	r2, r3, r3, r2
 800785a:	095b      	lsrs	r3, r3, #5
 800785c:	011c      	lsls	r4, r3, #4
 800785e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007862:	2200      	movs	r2, #0
 8007864:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007868:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800786c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007870:	4642      	mov	r2, r8
 8007872:	464b      	mov	r3, r9
 8007874:	1891      	adds	r1, r2, r2
 8007876:	64b9      	str	r1, [r7, #72]	; 0x48
 8007878:	415b      	adcs	r3, r3
 800787a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800787c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007880:	4641      	mov	r1, r8
 8007882:	eb12 0a01 	adds.w	sl, r2, r1
 8007886:	4649      	mov	r1, r9
 8007888:	eb43 0b01 	adc.w	fp, r3, r1
 800788c:	f04f 0200 	mov.w	r2, #0
 8007890:	f04f 0300 	mov.w	r3, #0
 8007894:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007898:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800789c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078a0:	4692      	mov	sl, r2
 80078a2:	469b      	mov	fp, r3
 80078a4:	4643      	mov	r3, r8
 80078a6:	eb1a 0303 	adds.w	r3, sl, r3
 80078aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80078ae:	464b      	mov	r3, r9
 80078b0:	eb4b 0303 	adc.w	r3, fp, r3
 80078b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80078b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80078c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80078c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80078cc:	460b      	mov	r3, r1
 80078ce:	18db      	adds	r3, r3, r3
 80078d0:	643b      	str	r3, [r7, #64]	; 0x40
 80078d2:	4613      	mov	r3, r2
 80078d4:	eb42 0303 	adc.w	r3, r2, r3
 80078d8:	647b      	str	r3, [r7, #68]	; 0x44
 80078da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80078de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80078e2:	f7f9 f9d1 	bl	8000c88 <__aeabi_uldivmod>
 80078e6:	4602      	mov	r2, r0
 80078e8:	460b      	mov	r3, r1
 80078ea:	4611      	mov	r1, r2
 80078ec:	4b3b      	ldr	r3, [pc, #236]	; (80079dc <UART_SetConfig+0x2d4>)
 80078ee:	fba3 2301 	umull	r2, r3, r3, r1
 80078f2:	095b      	lsrs	r3, r3, #5
 80078f4:	2264      	movs	r2, #100	; 0x64
 80078f6:	fb02 f303 	mul.w	r3, r2, r3
 80078fa:	1acb      	subs	r3, r1, r3
 80078fc:	00db      	lsls	r3, r3, #3
 80078fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007902:	4b36      	ldr	r3, [pc, #216]	; (80079dc <UART_SetConfig+0x2d4>)
 8007904:	fba3 2302 	umull	r2, r3, r3, r2
 8007908:	095b      	lsrs	r3, r3, #5
 800790a:	005b      	lsls	r3, r3, #1
 800790c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007910:	441c      	add	r4, r3
 8007912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007916:	2200      	movs	r2, #0
 8007918:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800791c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007920:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007924:	4642      	mov	r2, r8
 8007926:	464b      	mov	r3, r9
 8007928:	1891      	adds	r1, r2, r2
 800792a:	63b9      	str	r1, [r7, #56]	; 0x38
 800792c:	415b      	adcs	r3, r3
 800792e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007930:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007934:	4641      	mov	r1, r8
 8007936:	1851      	adds	r1, r2, r1
 8007938:	6339      	str	r1, [r7, #48]	; 0x30
 800793a:	4649      	mov	r1, r9
 800793c:	414b      	adcs	r3, r1
 800793e:	637b      	str	r3, [r7, #52]	; 0x34
 8007940:	f04f 0200 	mov.w	r2, #0
 8007944:	f04f 0300 	mov.w	r3, #0
 8007948:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800794c:	4659      	mov	r1, fp
 800794e:	00cb      	lsls	r3, r1, #3
 8007950:	4651      	mov	r1, sl
 8007952:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007956:	4651      	mov	r1, sl
 8007958:	00ca      	lsls	r2, r1, #3
 800795a:	4610      	mov	r0, r2
 800795c:	4619      	mov	r1, r3
 800795e:	4603      	mov	r3, r0
 8007960:	4642      	mov	r2, r8
 8007962:	189b      	adds	r3, r3, r2
 8007964:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007968:	464b      	mov	r3, r9
 800796a:	460a      	mov	r2, r1
 800796c:	eb42 0303 	adc.w	r3, r2, r3
 8007970:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007980:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007984:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007988:	460b      	mov	r3, r1
 800798a:	18db      	adds	r3, r3, r3
 800798c:	62bb      	str	r3, [r7, #40]	; 0x28
 800798e:	4613      	mov	r3, r2
 8007990:	eb42 0303 	adc.w	r3, r2, r3
 8007994:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007996:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800799a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800799e:	f7f9 f973 	bl	8000c88 <__aeabi_uldivmod>
 80079a2:	4602      	mov	r2, r0
 80079a4:	460b      	mov	r3, r1
 80079a6:	4b0d      	ldr	r3, [pc, #52]	; (80079dc <UART_SetConfig+0x2d4>)
 80079a8:	fba3 1302 	umull	r1, r3, r3, r2
 80079ac:	095b      	lsrs	r3, r3, #5
 80079ae:	2164      	movs	r1, #100	; 0x64
 80079b0:	fb01 f303 	mul.w	r3, r1, r3
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	00db      	lsls	r3, r3, #3
 80079b8:	3332      	adds	r3, #50	; 0x32
 80079ba:	4a08      	ldr	r2, [pc, #32]	; (80079dc <UART_SetConfig+0x2d4>)
 80079bc:	fba2 2303 	umull	r2, r3, r2, r3
 80079c0:	095b      	lsrs	r3, r3, #5
 80079c2:	f003 0207 	and.w	r2, r3, #7
 80079c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4422      	add	r2, r4
 80079ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80079d0:	e106      	b.n	8007be0 <UART_SetConfig+0x4d8>
 80079d2:	bf00      	nop
 80079d4:	40011000 	.word	0x40011000
 80079d8:	40011400 	.word	0x40011400
 80079dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079e4:	2200      	movs	r2, #0
 80079e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80079ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80079ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80079f2:	4642      	mov	r2, r8
 80079f4:	464b      	mov	r3, r9
 80079f6:	1891      	adds	r1, r2, r2
 80079f8:	6239      	str	r1, [r7, #32]
 80079fa:	415b      	adcs	r3, r3
 80079fc:	627b      	str	r3, [r7, #36]	; 0x24
 80079fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007a02:	4641      	mov	r1, r8
 8007a04:	1854      	adds	r4, r2, r1
 8007a06:	4649      	mov	r1, r9
 8007a08:	eb43 0501 	adc.w	r5, r3, r1
 8007a0c:	f04f 0200 	mov.w	r2, #0
 8007a10:	f04f 0300 	mov.w	r3, #0
 8007a14:	00eb      	lsls	r3, r5, #3
 8007a16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a1a:	00e2      	lsls	r2, r4, #3
 8007a1c:	4614      	mov	r4, r2
 8007a1e:	461d      	mov	r5, r3
 8007a20:	4643      	mov	r3, r8
 8007a22:	18e3      	adds	r3, r4, r3
 8007a24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007a28:	464b      	mov	r3, r9
 8007a2a:	eb45 0303 	adc.w	r3, r5, r3
 8007a2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007a42:	f04f 0200 	mov.w	r2, #0
 8007a46:	f04f 0300 	mov.w	r3, #0
 8007a4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007a4e:	4629      	mov	r1, r5
 8007a50:	008b      	lsls	r3, r1, #2
 8007a52:	4621      	mov	r1, r4
 8007a54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a58:	4621      	mov	r1, r4
 8007a5a:	008a      	lsls	r2, r1, #2
 8007a5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007a60:	f7f9 f912 	bl	8000c88 <__aeabi_uldivmod>
 8007a64:	4602      	mov	r2, r0
 8007a66:	460b      	mov	r3, r1
 8007a68:	4b60      	ldr	r3, [pc, #384]	; (8007bec <UART_SetConfig+0x4e4>)
 8007a6a:	fba3 2302 	umull	r2, r3, r3, r2
 8007a6e:	095b      	lsrs	r3, r3, #5
 8007a70:	011c      	lsls	r4, r3, #4
 8007a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a76:	2200      	movs	r2, #0
 8007a78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007a7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007a80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007a84:	4642      	mov	r2, r8
 8007a86:	464b      	mov	r3, r9
 8007a88:	1891      	adds	r1, r2, r2
 8007a8a:	61b9      	str	r1, [r7, #24]
 8007a8c:	415b      	adcs	r3, r3
 8007a8e:	61fb      	str	r3, [r7, #28]
 8007a90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a94:	4641      	mov	r1, r8
 8007a96:	1851      	adds	r1, r2, r1
 8007a98:	6139      	str	r1, [r7, #16]
 8007a9a:	4649      	mov	r1, r9
 8007a9c:	414b      	adcs	r3, r1
 8007a9e:	617b      	str	r3, [r7, #20]
 8007aa0:	f04f 0200 	mov.w	r2, #0
 8007aa4:	f04f 0300 	mov.w	r3, #0
 8007aa8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007aac:	4659      	mov	r1, fp
 8007aae:	00cb      	lsls	r3, r1, #3
 8007ab0:	4651      	mov	r1, sl
 8007ab2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ab6:	4651      	mov	r1, sl
 8007ab8:	00ca      	lsls	r2, r1, #3
 8007aba:	4610      	mov	r0, r2
 8007abc:	4619      	mov	r1, r3
 8007abe:	4603      	mov	r3, r0
 8007ac0:	4642      	mov	r2, r8
 8007ac2:	189b      	adds	r3, r3, r2
 8007ac4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ac8:	464b      	mov	r3, r9
 8007aca:	460a      	mov	r2, r1
 8007acc:	eb42 0303 	adc.w	r3, r2, r3
 8007ad0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ade:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007ae0:	f04f 0200 	mov.w	r2, #0
 8007ae4:	f04f 0300 	mov.w	r3, #0
 8007ae8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007aec:	4649      	mov	r1, r9
 8007aee:	008b      	lsls	r3, r1, #2
 8007af0:	4641      	mov	r1, r8
 8007af2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007af6:	4641      	mov	r1, r8
 8007af8:	008a      	lsls	r2, r1, #2
 8007afa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007afe:	f7f9 f8c3 	bl	8000c88 <__aeabi_uldivmod>
 8007b02:	4602      	mov	r2, r0
 8007b04:	460b      	mov	r3, r1
 8007b06:	4611      	mov	r1, r2
 8007b08:	4b38      	ldr	r3, [pc, #224]	; (8007bec <UART_SetConfig+0x4e4>)
 8007b0a:	fba3 2301 	umull	r2, r3, r3, r1
 8007b0e:	095b      	lsrs	r3, r3, #5
 8007b10:	2264      	movs	r2, #100	; 0x64
 8007b12:	fb02 f303 	mul.w	r3, r2, r3
 8007b16:	1acb      	subs	r3, r1, r3
 8007b18:	011b      	lsls	r3, r3, #4
 8007b1a:	3332      	adds	r3, #50	; 0x32
 8007b1c:	4a33      	ldr	r2, [pc, #204]	; (8007bec <UART_SetConfig+0x4e4>)
 8007b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b22:	095b      	lsrs	r3, r3, #5
 8007b24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b28:	441c      	add	r4, r3
 8007b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b2e:	2200      	movs	r2, #0
 8007b30:	673b      	str	r3, [r7, #112]	; 0x70
 8007b32:	677a      	str	r2, [r7, #116]	; 0x74
 8007b34:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007b38:	4642      	mov	r2, r8
 8007b3a:	464b      	mov	r3, r9
 8007b3c:	1891      	adds	r1, r2, r2
 8007b3e:	60b9      	str	r1, [r7, #8]
 8007b40:	415b      	adcs	r3, r3
 8007b42:	60fb      	str	r3, [r7, #12]
 8007b44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b48:	4641      	mov	r1, r8
 8007b4a:	1851      	adds	r1, r2, r1
 8007b4c:	6039      	str	r1, [r7, #0]
 8007b4e:	4649      	mov	r1, r9
 8007b50:	414b      	adcs	r3, r1
 8007b52:	607b      	str	r3, [r7, #4]
 8007b54:	f04f 0200 	mov.w	r2, #0
 8007b58:	f04f 0300 	mov.w	r3, #0
 8007b5c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007b60:	4659      	mov	r1, fp
 8007b62:	00cb      	lsls	r3, r1, #3
 8007b64:	4651      	mov	r1, sl
 8007b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b6a:	4651      	mov	r1, sl
 8007b6c:	00ca      	lsls	r2, r1, #3
 8007b6e:	4610      	mov	r0, r2
 8007b70:	4619      	mov	r1, r3
 8007b72:	4603      	mov	r3, r0
 8007b74:	4642      	mov	r2, r8
 8007b76:	189b      	adds	r3, r3, r2
 8007b78:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b7a:	464b      	mov	r3, r9
 8007b7c:	460a      	mov	r2, r1
 8007b7e:	eb42 0303 	adc.w	r3, r2, r3
 8007b82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	663b      	str	r3, [r7, #96]	; 0x60
 8007b8e:	667a      	str	r2, [r7, #100]	; 0x64
 8007b90:	f04f 0200 	mov.w	r2, #0
 8007b94:	f04f 0300 	mov.w	r3, #0
 8007b98:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007b9c:	4649      	mov	r1, r9
 8007b9e:	008b      	lsls	r3, r1, #2
 8007ba0:	4641      	mov	r1, r8
 8007ba2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ba6:	4641      	mov	r1, r8
 8007ba8:	008a      	lsls	r2, r1, #2
 8007baa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007bae:	f7f9 f86b 	bl	8000c88 <__aeabi_uldivmod>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	4b0d      	ldr	r3, [pc, #52]	; (8007bec <UART_SetConfig+0x4e4>)
 8007bb8:	fba3 1302 	umull	r1, r3, r3, r2
 8007bbc:	095b      	lsrs	r3, r3, #5
 8007bbe:	2164      	movs	r1, #100	; 0x64
 8007bc0:	fb01 f303 	mul.w	r3, r1, r3
 8007bc4:	1ad3      	subs	r3, r2, r3
 8007bc6:	011b      	lsls	r3, r3, #4
 8007bc8:	3332      	adds	r3, #50	; 0x32
 8007bca:	4a08      	ldr	r2, [pc, #32]	; (8007bec <UART_SetConfig+0x4e4>)
 8007bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd0:	095b      	lsrs	r3, r3, #5
 8007bd2:	f003 020f 	and.w	r2, r3, #15
 8007bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4422      	add	r2, r4
 8007bde:	609a      	str	r2, [r3, #8]
}
 8007be0:	bf00      	nop
 8007be2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007be6:	46bd      	mov	sp, r7
 8007be8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bec:	51eb851f 	.word	0x51eb851f

08007bf0 <__cvt>:
 8007bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bf4:	ec55 4b10 	vmov	r4, r5, d0
 8007bf8:	2d00      	cmp	r5, #0
 8007bfa:	460e      	mov	r6, r1
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	462b      	mov	r3, r5
 8007c00:	bfbb      	ittet	lt
 8007c02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007c06:	461d      	movlt	r5, r3
 8007c08:	2300      	movge	r3, #0
 8007c0a:	232d      	movlt	r3, #45	; 0x2d
 8007c0c:	700b      	strb	r3, [r1, #0]
 8007c0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c10:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007c14:	4691      	mov	r9, r2
 8007c16:	f023 0820 	bic.w	r8, r3, #32
 8007c1a:	bfbc      	itt	lt
 8007c1c:	4622      	movlt	r2, r4
 8007c1e:	4614      	movlt	r4, r2
 8007c20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c24:	d005      	beq.n	8007c32 <__cvt+0x42>
 8007c26:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007c2a:	d100      	bne.n	8007c2e <__cvt+0x3e>
 8007c2c:	3601      	adds	r6, #1
 8007c2e:	2102      	movs	r1, #2
 8007c30:	e000      	b.n	8007c34 <__cvt+0x44>
 8007c32:	2103      	movs	r1, #3
 8007c34:	ab03      	add	r3, sp, #12
 8007c36:	9301      	str	r3, [sp, #4]
 8007c38:	ab02      	add	r3, sp, #8
 8007c3a:	9300      	str	r3, [sp, #0]
 8007c3c:	ec45 4b10 	vmov	d0, r4, r5
 8007c40:	4653      	mov	r3, sl
 8007c42:	4632      	mov	r2, r6
 8007c44:	f000 fdc0 	bl	80087c8 <_dtoa_r>
 8007c48:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007c4c:	4607      	mov	r7, r0
 8007c4e:	d102      	bne.n	8007c56 <__cvt+0x66>
 8007c50:	f019 0f01 	tst.w	r9, #1
 8007c54:	d022      	beq.n	8007c9c <__cvt+0xac>
 8007c56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c5a:	eb07 0906 	add.w	r9, r7, r6
 8007c5e:	d110      	bne.n	8007c82 <__cvt+0x92>
 8007c60:	783b      	ldrb	r3, [r7, #0]
 8007c62:	2b30      	cmp	r3, #48	; 0x30
 8007c64:	d10a      	bne.n	8007c7c <__cvt+0x8c>
 8007c66:	2200      	movs	r2, #0
 8007c68:	2300      	movs	r3, #0
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	4629      	mov	r1, r5
 8007c6e:	f7f8 ff4b 	bl	8000b08 <__aeabi_dcmpeq>
 8007c72:	b918      	cbnz	r0, 8007c7c <__cvt+0x8c>
 8007c74:	f1c6 0601 	rsb	r6, r6, #1
 8007c78:	f8ca 6000 	str.w	r6, [sl]
 8007c7c:	f8da 3000 	ldr.w	r3, [sl]
 8007c80:	4499      	add	r9, r3
 8007c82:	2200      	movs	r2, #0
 8007c84:	2300      	movs	r3, #0
 8007c86:	4620      	mov	r0, r4
 8007c88:	4629      	mov	r1, r5
 8007c8a:	f7f8 ff3d 	bl	8000b08 <__aeabi_dcmpeq>
 8007c8e:	b108      	cbz	r0, 8007c94 <__cvt+0xa4>
 8007c90:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c94:	2230      	movs	r2, #48	; 0x30
 8007c96:	9b03      	ldr	r3, [sp, #12]
 8007c98:	454b      	cmp	r3, r9
 8007c9a:	d307      	bcc.n	8007cac <__cvt+0xbc>
 8007c9c:	9b03      	ldr	r3, [sp, #12]
 8007c9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ca0:	1bdb      	subs	r3, r3, r7
 8007ca2:	4638      	mov	r0, r7
 8007ca4:	6013      	str	r3, [r2, #0]
 8007ca6:	b004      	add	sp, #16
 8007ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cac:	1c59      	adds	r1, r3, #1
 8007cae:	9103      	str	r1, [sp, #12]
 8007cb0:	701a      	strb	r2, [r3, #0]
 8007cb2:	e7f0      	b.n	8007c96 <__cvt+0xa6>

08007cb4 <__exponent>:
 8007cb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2900      	cmp	r1, #0
 8007cba:	bfb8      	it	lt
 8007cbc:	4249      	neglt	r1, r1
 8007cbe:	f803 2b02 	strb.w	r2, [r3], #2
 8007cc2:	bfb4      	ite	lt
 8007cc4:	222d      	movlt	r2, #45	; 0x2d
 8007cc6:	222b      	movge	r2, #43	; 0x2b
 8007cc8:	2909      	cmp	r1, #9
 8007cca:	7042      	strb	r2, [r0, #1]
 8007ccc:	dd2a      	ble.n	8007d24 <__exponent+0x70>
 8007cce:	f10d 0207 	add.w	r2, sp, #7
 8007cd2:	4617      	mov	r7, r2
 8007cd4:	260a      	movs	r6, #10
 8007cd6:	4694      	mov	ip, r2
 8007cd8:	fb91 f5f6 	sdiv	r5, r1, r6
 8007cdc:	fb06 1415 	mls	r4, r6, r5, r1
 8007ce0:	3430      	adds	r4, #48	; 0x30
 8007ce2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007ce6:	460c      	mov	r4, r1
 8007ce8:	2c63      	cmp	r4, #99	; 0x63
 8007cea:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8007cee:	4629      	mov	r1, r5
 8007cf0:	dcf1      	bgt.n	8007cd6 <__exponent+0x22>
 8007cf2:	3130      	adds	r1, #48	; 0x30
 8007cf4:	f1ac 0402 	sub.w	r4, ip, #2
 8007cf8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007cfc:	1c41      	adds	r1, r0, #1
 8007cfe:	4622      	mov	r2, r4
 8007d00:	42ba      	cmp	r2, r7
 8007d02:	d30a      	bcc.n	8007d1a <__exponent+0x66>
 8007d04:	f10d 0209 	add.w	r2, sp, #9
 8007d08:	eba2 020c 	sub.w	r2, r2, ip
 8007d0c:	42bc      	cmp	r4, r7
 8007d0e:	bf88      	it	hi
 8007d10:	2200      	movhi	r2, #0
 8007d12:	4413      	add	r3, r2
 8007d14:	1a18      	subs	r0, r3, r0
 8007d16:	b003      	add	sp, #12
 8007d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d1a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007d1e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007d22:	e7ed      	b.n	8007d00 <__exponent+0x4c>
 8007d24:	2330      	movs	r3, #48	; 0x30
 8007d26:	3130      	adds	r1, #48	; 0x30
 8007d28:	7083      	strb	r3, [r0, #2]
 8007d2a:	70c1      	strb	r1, [r0, #3]
 8007d2c:	1d03      	adds	r3, r0, #4
 8007d2e:	e7f1      	b.n	8007d14 <__exponent+0x60>

08007d30 <_printf_float>:
 8007d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d34:	ed2d 8b02 	vpush	{d8}
 8007d38:	b08d      	sub	sp, #52	; 0x34
 8007d3a:	460c      	mov	r4, r1
 8007d3c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007d40:	4616      	mov	r6, r2
 8007d42:	461f      	mov	r7, r3
 8007d44:	4605      	mov	r5, r0
 8007d46:	f000 fc83 	bl	8008650 <_localeconv_r>
 8007d4a:	f8d0 a000 	ldr.w	sl, [r0]
 8007d4e:	4650      	mov	r0, sl
 8007d50:	f7f8 faae 	bl	80002b0 <strlen>
 8007d54:	2300      	movs	r3, #0
 8007d56:	930a      	str	r3, [sp, #40]	; 0x28
 8007d58:	6823      	ldr	r3, [r4, #0]
 8007d5a:	9305      	str	r3, [sp, #20]
 8007d5c:	f8d8 3000 	ldr.w	r3, [r8]
 8007d60:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007d64:	3307      	adds	r3, #7
 8007d66:	f023 0307 	bic.w	r3, r3, #7
 8007d6a:	f103 0208 	add.w	r2, r3, #8
 8007d6e:	f8c8 2000 	str.w	r2, [r8]
 8007d72:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007d7a:	9307      	str	r3, [sp, #28]
 8007d7c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d80:	ee08 0a10 	vmov	s16, r0
 8007d84:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007d88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d8c:	4b9e      	ldr	r3, [pc, #632]	; (8008008 <_printf_float+0x2d8>)
 8007d8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d92:	f7f8 feeb 	bl	8000b6c <__aeabi_dcmpun>
 8007d96:	bb88      	cbnz	r0, 8007dfc <_printf_float+0xcc>
 8007d98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d9c:	4b9a      	ldr	r3, [pc, #616]	; (8008008 <_printf_float+0x2d8>)
 8007d9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007da2:	f7f8 fec5 	bl	8000b30 <__aeabi_dcmple>
 8007da6:	bb48      	cbnz	r0, 8007dfc <_printf_float+0xcc>
 8007da8:	2200      	movs	r2, #0
 8007daa:	2300      	movs	r3, #0
 8007dac:	4640      	mov	r0, r8
 8007dae:	4649      	mov	r1, r9
 8007db0:	f7f8 feb4 	bl	8000b1c <__aeabi_dcmplt>
 8007db4:	b110      	cbz	r0, 8007dbc <_printf_float+0x8c>
 8007db6:	232d      	movs	r3, #45	; 0x2d
 8007db8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dbc:	4a93      	ldr	r2, [pc, #588]	; (800800c <_printf_float+0x2dc>)
 8007dbe:	4b94      	ldr	r3, [pc, #592]	; (8008010 <_printf_float+0x2e0>)
 8007dc0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007dc4:	bf94      	ite	ls
 8007dc6:	4690      	movls	r8, r2
 8007dc8:	4698      	movhi	r8, r3
 8007dca:	2303      	movs	r3, #3
 8007dcc:	6123      	str	r3, [r4, #16]
 8007dce:	9b05      	ldr	r3, [sp, #20]
 8007dd0:	f023 0304 	bic.w	r3, r3, #4
 8007dd4:	6023      	str	r3, [r4, #0]
 8007dd6:	f04f 0900 	mov.w	r9, #0
 8007dda:	9700      	str	r7, [sp, #0]
 8007ddc:	4633      	mov	r3, r6
 8007dde:	aa0b      	add	r2, sp, #44	; 0x2c
 8007de0:	4621      	mov	r1, r4
 8007de2:	4628      	mov	r0, r5
 8007de4:	f000 f9da 	bl	800819c <_printf_common>
 8007de8:	3001      	adds	r0, #1
 8007dea:	f040 8090 	bne.w	8007f0e <_printf_float+0x1de>
 8007dee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007df2:	b00d      	add	sp, #52	; 0x34
 8007df4:	ecbd 8b02 	vpop	{d8}
 8007df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dfc:	4642      	mov	r2, r8
 8007dfe:	464b      	mov	r3, r9
 8007e00:	4640      	mov	r0, r8
 8007e02:	4649      	mov	r1, r9
 8007e04:	f7f8 feb2 	bl	8000b6c <__aeabi_dcmpun>
 8007e08:	b140      	cbz	r0, 8007e1c <_printf_float+0xec>
 8007e0a:	464b      	mov	r3, r9
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	bfbc      	itt	lt
 8007e10:	232d      	movlt	r3, #45	; 0x2d
 8007e12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007e16:	4a7f      	ldr	r2, [pc, #508]	; (8008014 <_printf_float+0x2e4>)
 8007e18:	4b7f      	ldr	r3, [pc, #508]	; (8008018 <_printf_float+0x2e8>)
 8007e1a:	e7d1      	b.n	8007dc0 <_printf_float+0x90>
 8007e1c:	6863      	ldr	r3, [r4, #4]
 8007e1e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007e22:	9206      	str	r2, [sp, #24]
 8007e24:	1c5a      	adds	r2, r3, #1
 8007e26:	d13f      	bne.n	8007ea8 <_printf_float+0x178>
 8007e28:	2306      	movs	r3, #6
 8007e2a:	6063      	str	r3, [r4, #4]
 8007e2c:	9b05      	ldr	r3, [sp, #20]
 8007e2e:	6861      	ldr	r1, [r4, #4]
 8007e30:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007e34:	2300      	movs	r3, #0
 8007e36:	9303      	str	r3, [sp, #12]
 8007e38:	ab0a      	add	r3, sp, #40	; 0x28
 8007e3a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007e3e:	ab09      	add	r3, sp, #36	; 0x24
 8007e40:	ec49 8b10 	vmov	d0, r8, r9
 8007e44:	9300      	str	r3, [sp, #0]
 8007e46:	6022      	str	r2, [r4, #0]
 8007e48:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	f7ff fecf 	bl	8007bf0 <__cvt>
 8007e52:	9b06      	ldr	r3, [sp, #24]
 8007e54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e56:	2b47      	cmp	r3, #71	; 0x47
 8007e58:	4680      	mov	r8, r0
 8007e5a:	d108      	bne.n	8007e6e <_printf_float+0x13e>
 8007e5c:	1cc8      	adds	r0, r1, #3
 8007e5e:	db02      	blt.n	8007e66 <_printf_float+0x136>
 8007e60:	6863      	ldr	r3, [r4, #4]
 8007e62:	4299      	cmp	r1, r3
 8007e64:	dd41      	ble.n	8007eea <_printf_float+0x1ba>
 8007e66:	f1ab 0302 	sub.w	r3, fp, #2
 8007e6a:	fa5f fb83 	uxtb.w	fp, r3
 8007e6e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e72:	d820      	bhi.n	8007eb6 <_printf_float+0x186>
 8007e74:	3901      	subs	r1, #1
 8007e76:	465a      	mov	r2, fp
 8007e78:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007e7c:	9109      	str	r1, [sp, #36]	; 0x24
 8007e7e:	f7ff ff19 	bl	8007cb4 <__exponent>
 8007e82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e84:	1813      	adds	r3, r2, r0
 8007e86:	2a01      	cmp	r2, #1
 8007e88:	4681      	mov	r9, r0
 8007e8a:	6123      	str	r3, [r4, #16]
 8007e8c:	dc02      	bgt.n	8007e94 <_printf_float+0x164>
 8007e8e:	6822      	ldr	r2, [r4, #0]
 8007e90:	07d2      	lsls	r2, r2, #31
 8007e92:	d501      	bpl.n	8007e98 <_printf_float+0x168>
 8007e94:	3301      	adds	r3, #1
 8007e96:	6123      	str	r3, [r4, #16]
 8007e98:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d09c      	beq.n	8007dda <_printf_float+0xaa>
 8007ea0:	232d      	movs	r3, #45	; 0x2d
 8007ea2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ea6:	e798      	b.n	8007dda <_printf_float+0xaa>
 8007ea8:	9a06      	ldr	r2, [sp, #24]
 8007eaa:	2a47      	cmp	r2, #71	; 0x47
 8007eac:	d1be      	bne.n	8007e2c <_printf_float+0xfc>
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d1bc      	bne.n	8007e2c <_printf_float+0xfc>
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e7b9      	b.n	8007e2a <_printf_float+0xfa>
 8007eb6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007eba:	d118      	bne.n	8007eee <_printf_float+0x1be>
 8007ebc:	2900      	cmp	r1, #0
 8007ebe:	6863      	ldr	r3, [r4, #4]
 8007ec0:	dd0b      	ble.n	8007eda <_printf_float+0x1aa>
 8007ec2:	6121      	str	r1, [r4, #16]
 8007ec4:	b913      	cbnz	r3, 8007ecc <_printf_float+0x19c>
 8007ec6:	6822      	ldr	r2, [r4, #0]
 8007ec8:	07d0      	lsls	r0, r2, #31
 8007eca:	d502      	bpl.n	8007ed2 <_printf_float+0x1a2>
 8007ecc:	3301      	adds	r3, #1
 8007ece:	440b      	add	r3, r1
 8007ed0:	6123      	str	r3, [r4, #16]
 8007ed2:	65a1      	str	r1, [r4, #88]	; 0x58
 8007ed4:	f04f 0900 	mov.w	r9, #0
 8007ed8:	e7de      	b.n	8007e98 <_printf_float+0x168>
 8007eda:	b913      	cbnz	r3, 8007ee2 <_printf_float+0x1b2>
 8007edc:	6822      	ldr	r2, [r4, #0]
 8007ede:	07d2      	lsls	r2, r2, #31
 8007ee0:	d501      	bpl.n	8007ee6 <_printf_float+0x1b6>
 8007ee2:	3302      	adds	r3, #2
 8007ee4:	e7f4      	b.n	8007ed0 <_printf_float+0x1a0>
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e7f2      	b.n	8007ed0 <_printf_float+0x1a0>
 8007eea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ef0:	4299      	cmp	r1, r3
 8007ef2:	db05      	blt.n	8007f00 <_printf_float+0x1d0>
 8007ef4:	6823      	ldr	r3, [r4, #0]
 8007ef6:	6121      	str	r1, [r4, #16]
 8007ef8:	07d8      	lsls	r0, r3, #31
 8007efa:	d5ea      	bpl.n	8007ed2 <_printf_float+0x1a2>
 8007efc:	1c4b      	adds	r3, r1, #1
 8007efe:	e7e7      	b.n	8007ed0 <_printf_float+0x1a0>
 8007f00:	2900      	cmp	r1, #0
 8007f02:	bfd4      	ite	le
 8007f04:	f1c1 0202 	rsble	r2, r1, #2
 8007f08:	2201      	movgt	r2, #1
 8007f0a:	4413      	add	r3, r2
 8007f0c:	e7e0      	b.n	8007ed0 <_printf_float+0x1a0>
 8007f0e:	6823      	ldr	r3, [r4, #0]
 8007f10:	055a      	lsls	r2, r3, #21
 8007f12:	d407      	bmi.n	8007f24 <_printf_float+0x1f4>
 8007f14:	6923      	ldr	r3, [r4, #16]
 8007f16:	4642      	mov	r2, r8
 8007f18:	4631      	mov	r1, r6
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	47b8      	blx	r7
 8007f1e:	3001      	adds	r0, #1
 8007f20:	d12c      	bne.n	8007f7c <_printf_float+0x24c>
 8007f22:	e764      	b.n	8007dee <_printf_float+0xbe>
 8007f24:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f28:	f240 80e0 	bls.w	80080ec <_printf_float+0x3bc>
 8007f2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f30:	2200      	movs	r2, #0
 8007f32:	2300      	movs	r3, #0
 8007f34:	f7f8 fde8 	bl	8000b08 <__aeabi_dcmpeq>
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	d034      	beq.n	8007fa6 <_printf_float+0x276>
 8007f3c:	4a37      	ldr	r2, [pc, #220]	; (800801c <_printf_float+0x2ec>)
 8007f3e:	2301      	movs	r3, #1
 8007f40:	4631      	mov	r1, r6
 8007f42:	4628      	mov	r0, r5
 8007f44:	47b8      	blx	r7
 8007f46:	3001      	adds	r0, #1
 8007f48:	f43f af51 	beq.w	8007dee <_printf_float+0xbe>
 8007f4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f50:	429a      	cmp	r2, r3
 8007f52:	db02      	blt.n	8007f5a <_printf_float+0x22a>
 8007f54:	6823      	ldr	r3, [r4, #0]
 8007f56:	07d8      	lsls	r0, r3, #31
 8007f58:	d510      	bpl.n	8007f7c <_printf_float+0x24c>
 8007f5a:	ee18 3a10 	vmov	r3, s16
 8007f5e:	4652      	mov	r2, sl
 8007f60:	4631      	mov	r1, r6
 8007f62:	4628      	mov	r0, r5
 8007f64:	47b8      	blx	r7
 8007f66:	3001      	adds	r0, #1
 8007f68:	f43f af41 	beq.w	8007dee <_printf_float+0xbe>
 8007f6c:	f04f 0800 	mov.w	r8, #0
 8007f70:	f104 091a 	add.w	r9, r4, #26
 8007f74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f76:	3b01      	subs	r3, #1
 8007f78:	4543      	cmp	r3, r8
 8007f7a:	dc09      	bgt.n	8007f90 <_printf_float+0x260>
 8007f7c:	6823      	ldr	r3, [r4, #0]
 8007f7e:	079b      	lsls	r3, r3, #30
 8007f80:	f100 8107 	bmi.w	8008192 <_printf_float+0x462>
 8007f84:	68e0      	ldr	r0, [r4, #12]
 8007f86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f88:	4298      	cmp	r0, r3
 8007f8a:	bfb8      	it	lt
 8007f8c:	4618      	movlt	r0, r3
 8007f8e:	e730      	b.n	8007df2 <_printf_float+0xc2>
 8007f90:	2301      	movs	r3, #1
 8007f92:	464a      	mov	r2, r9
 8007f94:	4631      	mov	r1, r6
 8007f96:	4628      	mov	r0, r5
 8007f98:	47b8      	blx	r7
 8007f9a:	3001      	adds	r0, #1
 8007f9c:	f43f af27 	beq.w	8007dee <_printf_float+0xbe>
 8007fa0:	f108 0801 	add.w	r8, r8, #1
 8007fa4:	e7e6      	b.n	8007f74 <_printf_float+0x244>
 8007fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	dc39      	bgt.n	8008020 <_printf_float+0x2f0>
 8007fac:	4a1b      	ldr	r2, [pc, #108]	; (800801c <_printf_float+0x2ec>)
 8007fae:	2301      	movs	r3, #1
 8007fb0:	4631      	mov	r1, r6
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	47b8      	blx	r7
 8007fb6:	3001      	adds	r0, #1
 8007fb8:	f43f af19 	beq.w	8007dee <_printf_float+0xbe>
 8007fbc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	d102      	bne.n	8007fca <_printf_float+0x29a>
 8007fc4:	6823      	ldr	r3, [r4, #0]
 8007fc6:	07d9      	lsls	r1, r3, #31
 8007fc8:	d5d8      	bpl.n	8007f7c <_printf_float+0x24c>
 8007fca:	ee18 3a10 	vmov	r3, s16
 8007fce:	4652      	mov	r2, sl
 8007fd0:	4631      	mov	r1, r6
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	47b8      	blx	r7
 8007fd6:	3001      	adds	r0, #1
 8007fd8:	f43f af09 	beq.w	8007dee <_printf_float+0xbe>
 8007fdc:	f04f 0900 	mov.w	r9, #0
 8007fe0:	f104 0a1a 	add.w	sl, r4, #26
 8007fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe6:	425b      	negs	r3, r3
 8007fe8:	454b      	cmp	r3, r9
 8007fea:	dc01      	bgt.n	8007ff0 <_printf_float+0x2c0>
 8007fec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fee:	e792      	b.n	8007f16 <_printf_float+0x1e6>
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	4652      	mov	r2, sl
 8007ff4:	4631      	mov	r1, r6
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	47b8      	blx	r7
 8007ffa:	3001      	adds	r0, #1
 8007ffc:	f43f aef7 	beq.w	8007dee <_printf_float+0xbe>
 8008000:	f109 0901 	add.w	r9, r9, #1
 8008004:	e7ee      	b.n	8007fe4 <_printf_float+0x2b4>
 8008006:	bf00      	nop
 8008008:	7fefffff 	.word	0x7fefffff
 800800c:	0800a5a0 	.word	0x0800a5a0
 8008010:	0800a5a4 	.word	0x0800a5a4
 8008014:	0800a5a8 	.word	0x0800a5a8
 8008018:	0800a5ac 	.word	0x0800a5ac
 800801c:	0800a5b0 	.word	0x0800a5b0
 8008020:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008022:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008024:	429a      	cmp	r2, r3
 8008026:	bfa8      	it	ge
 8008028:	461a      	movge	r2, r3
 800802a:	2a00      	cmp	r2, #0
 800802c:	4691      	mov	r9, r2
 800802e:	dc37      	bgt.n	80080a0 <_printf_float+0x370>
 8008030:	f04f 0b00 	mov.w	fp, #0
 8008034:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008038:	f104 021a 	add.w	r2, r4, #26
 800803c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800803e:	9305      	str	r3, [sp, #20]
 8008040:	eba3 0309 	sub.w	r3, r3, r9
 8008044:	455b      	cmp	r3, fp
 8008046:	dc33      	bgt.n	80080b0 <_printf_float+0x380>
 8008048:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800804c:	429a      	cmp	r2, r3
 800804e:	db3b      	blt.n	80080c8 <_printf_float+0x398>
 8008050:	6823      	ldr	r3, [r4, #0]
 8008052:	07da      	lsls	r2, r3, #31
 8008054:	d438      	bmi.n	80080c8 <_printf_float+0x398>
 8008056:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800805a:	eba2 0903 	sub.w	r9, r2, r3
 800805e:	9b05      	ldr	r3, [sp, #20]
 8008060:	1ad2      	subs	r2, r2, r3
 8008062:	4591      	cmp	r9, r2
 8008064:	bfa8      	it	ge
 8008066:	4691      	movge	r9, r2
 8008068:	f1b9 0f00 	cmp.w	r9, #0
 800806c:	dc35      	bgt.n	80080da <_printf_float+0x3aa>
 800806e:	f04f 0800 	mov.w	r8, #0
 8008072:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008076:	f104 0a1a 	add.w	sl, r4, #26
 800807a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800807e:	1a9b      	subs	r3, r3, r2
 8008080:	eba3 0309 	sub.w	r3, r3, r9
 8008084:	4543      	cmp	r3, r8
 8008086:	f77f af79 	ble.w	8007f7c <_printf_float+0x24c>
 800808a:	2301      	movs	r3, #1
 800808c:	4652      	mov	r2, sl
 800808e:	4631      	mov	r1, r6
 8008090:	4628      	mov	r0, r5
 8008092:	47b8      	blx	r7
 8008094:	3001      	adds	r0, #1
 8008096:	f43f aeaa 	beq.w	8007dee <_printf_float+0xbe>
 800809a:	f108 0801 	add.w	r8, r8, #1
 800809e:	e7ec      	b.n	800807a <_printf_float+0x34a>
 80080a0:	4613      	mov	r3, r2
 80080a2:	4631      	mov	r1, r6
 80080a4:	4642      	mov	r2, r8
 80080a6:	4628      	mov	r0, r5
 80080a8:	47b8      	blx	r7
 80080aa:	3001      	adds	r0, #1
 80080ac:	d1c0      	bne.n	8008030 <_printf_float+0x300>
 80080ae:	e69e      	b.n	8007dee <_printf_float+0xbe>
 80080b0:	2301      	movs	r3, #1
 80080b2:	4631      	mov	r1, r6
 80080b4:	4628      	mov	r0, r5
 80080b6:	9205      	str	r2, [sp, #20]
 80080b8:	47b8      	blx	r7
 80080ba:	3001      	adds	r0, #1
 80080bc:	f43f ae97 	beq.w	8007dee <_printf_float+0xbe>
 80080c0:	9a05      	ldr	r2, [sp, #20]
 80080c2:	f10b 0b01 	add.w	fp, fp, #1
 80080c6:	e7b9      	b.n	800803c <_printf_float+0x30c>
 80080c8:	ee18 3a10 	vmov	r3, s16
 80080cc:	4652      	mov	r2, sl
 80080ce:	4631      	mov	r1, r6
 80080d0:	4628      	mov	r0, r5
 80080d2:	47b8      	blx	r7
 80080d4:	3001      	adds	r0, #1
 80080d6:	d1be      	bne.n	8008056 <_printf_float+0x326>
 80080d8:	e689      	b.n	8007dee <_printf_float+0xbe>
 80080da:	9a05      	ldr	r2, [sp, #20]
 80080dc:	464b      	mov	r3, r9
 80080de:	4442      	add	r2, r8
 80080e0:	4631      	mov	r1, r6
 80080e2:	4628      	mov	r0, r5
 80080e4:	47b8      	blx	r7
 80080e6:	3001      	adds	r0, #1
 80080e8:	d1c1      	bne.n	800806e <_printf_float+0x33e>
 80080ea:	e680      	b.n	8007dee <_printf_float+0xbe>
 80080ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080ee:	2a01      	cmp	r2, #1
 80080f0:	dc01      	bgt.n	80080f6 <_printf_float+0x3c6>
 80080f2:	07db      	lsls	r3, r3, #31
 80080f4:	d53a      	bpl.n	800816c <_printf_float+0x43c>
 80080f6:	2301      	movs	r3, #1
 80080f8:	4642      	mov	r2, r8
 80080fa:	4631      	mov	r1, r6
 80080fc:	4628      	mov	r0, r5
 80080fe:	47b8      	blx	r7
 8008100:	3001      	adds	r0, #1
 8008102:	f43f ae74 	beq.w	8007dee <_printf_float+0xbe>
 8008106:	ee18 3a10 	vmov	r3, s16
 800810a:	4652      	mov	r2, sl
 800810c:	4631      	mov	r1, r6
 800810e:	4628      	mov	r0, r5
 8008110:	47b8      	blx	r7
 8008112:	3001      	adds	r0, #1
 8008114:	f43f ae6b 	beq.w	8007dee <_printf_float+0xbe>
 8008118:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800811c:	2200      	movs	r2, #0
 800811e:	2300      	movs	r3, #0
 8008120:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008124:	f7f8 fcf0 	bl	8000b08 <__aeabi_dcmpeq>
 8008128:	b9d8      	cbnz	r0, 8008162 <_printf_float+0x432>
 800812a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800812e:	f108 0201 	add.w	r2, r8, #1
 8008132:	4631      	mov	r1, r6
 8008134:	4628      	mov	r0, r5
 8008136:	47b8      	blx	r7
 8008138:	3001      	adds	r0, #1
 800813a:	d10e      	bne.n	800815a <_printf_float+0x42a>
 800813c:	e657      	b.n	8007dee <_printf_float+0xbe>
 800813e:	2301      	movs	r3, #1
 8008140:	4652      	mov	r2, sl
 8008142:	4631      	mov	r1, r6
 8008144:	4628      	mov	r0, r5
 8008146:	47b8      	blx	r7
 8008148:	3001      	adds	r0, #1
 800814a:	f43f ae50 	beq.w	8007dee <_printf_float+0xbe>
 800814e:	f108 0801 	add.w	r8, r8, #1
 8008152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008154:	3b01      	subs	r3, #1
 8008156:	4543      	cmp	r3, r8
 8008158:	dcf1      	bgt.n	800813e <_printf_float+0x40e>
 800815a:	464b      	mov	r3, r9
 800815c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008160:	e6da      	b.n	8007f18 <_printf_float+0x1e8>
 8008162:	f04f 0800 	mov.w	r8, #0
 8008166:	f104 0a1a 	add.w	sl, r4, #26
 800816a:	e7f2      	b.n	8008152 <_printf_float+0x422>
 800816c:	2301      	movs	r3, #1
 800816e:	4642      	mov	r2, r8
 8008170:	e7df      	b.n	8008132 <_printf_float+0x402>
 8008172:	2301      	movs	r3, #1
 8008174:	464a      	mov	r2, r9
 8008176:	4631      	mov	r1, r6
 8008178:	4628      	mov	r0, r5
 800817a:	47b8      	blx	r7
 800817c:	3001      	adds	r0, #1
 800817e:	f43f ae36 	beq.w	8007dee <_printf_float+0xbe>
 8008182:	f108 0801 	add.w	r8, r8, #1
 8008186:	68e3      	ldr	r3, [r4, #12]
 8008188:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800818a:	1a5b      	subs	r3, r3, r1
 800818c:	4543      	cmp	r3, r8
 800818e:	dcf0      	bgt.n	8008172 <_printf_float+0x442>
 8008190:	e6f8      	b.n	8007f84 <_printf_float+0x254>
 8008192:	f04f 0800 	mov.w	r8, #0
 8008196:	f104 0919 	add.w	r9, r4, #25
 800819a:	e7f4      	b.n	8008186 <_printf_float+0x456>

0800819c <_printf_common>:
 800819c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081a0:	4616      	mov	r6, r2
 80081a2:	4699      	mov	r9, r3
 80081a4:	688a      	ldr	r2, [r1, #8]
 80081a6:	690b      	ldr	r3, [r1, #16]
 80081a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081ac:	4293      	cmp	r3, r2
 80081ae:	bfb8      	it	lt
 80081b0:	4613      	movlt	r3, r2
 80081b2:	6033      	str	r3, [r6, #0]
 80081b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081b8:	4607      	mov	r7, r0
 80081ba:	460c      	mov	r4, r1
 80081bc:	b10a      	cbz	r2, 80081c2 <_printf_common+0x26>
 80081be:	3301      	adds	r3, #1
 80081c0:	6033      	str	r3, [r6, #0]
 80081c2:	6823      	ldr	r3, [r4, #0]
 80081c4:	0699      	lsls	r1, r3, #26
 80081c6:	bf42      	ittt	mi
 80081c8:	6833      	ldrmi	r3, [r6, #0]
 80081ca:	3302      	addmi	r3, #2
 80081cc:	6033      	strmi	r3, [r6, #0]
 80081ce:	6825      	ldr	r5, [r4, #0]
 80081d0:	f015 0506 	ands.w	r5, r5, #6
 80081d4:	d106      	bne.n	80081e4 <_printf_common+0x48>
 80081d6:	f104 0a19 	add.w	sl, r4, #25
 80081da:	68e3      	ldr	r3, [r4, #12]
 80081dc:	6832      	ldr	r2, [r6, #0]
 80081de:	1a9b      	subs	r3, r3, r2
 80081e0:	42ab      	cmp	r3, r5
 80081e2:	dc26      	bgt.n	8008232 <_printf_common+0x96>
 80081e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80081e8:	1e13      	subs	r3, r2, #0
 80081ea:	6822      	ldr	r2, [r4, #0]
 80081ec:	bf18      	it	ne
 80081ee:	2301      	movne	r3, #1
 80081f0:	0692      	lsls	r2, r2, #26
 80081f2:	d42b      	bmi.n	800824c <_printf_common+0xb0>
 80081f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081f8:	4649      	mov	r1, r9
 80081fa:	4638      	mov	r0, r7
 80081fc:	47c0      	blx	r8
 80081fe:	3001      	adds	r0, #1
 8008200:	d01e      	beq.n	8008240 <_printf_common+0xa4>
 8008202:	6823      	ldr	r3, [r4, #0]
 8008204:	6922      	ldr	r2, [r4, #16]
 8008206:	f003 0306 	and.w	r3, r3, #6
 800820a:	2b04      	cmp	r3, #4
 800820c:	bf02      	ittt	eq
 800820e:	68e5      	ldreq	r5, [r4, #12]
 8008210:	6833      	ldreq	r3, [r6, #0]
 8008212:	1aed      	subeq	r5, r5, r3
 8008214:	68a3      	ldr	r3, [r4, #8]
 8008216:	bf0c      	ite	eq
 8008218:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800821c:	2500      	movne	r5, #0
 800821e:	4293      	cmp	r3, r2
 8008220:	bfc4      	itt	gt
 8008222:	1a9b      	subgt	r3, r3, r2
 8008224:	18ed      	addgt	r5, r5, r3
 8008226:	2600      	movs	r6, #0
 8008228:	341a      	adds	r4, #26
 800822a:	42b5      	cmp	r5, r6
 800822c:	d11a      	bne.n	8008264 <_printf_common+0xc8>
 800822e:	2000      	movs	r0, #0
 8008230:	e008      	b.n	8008244 <_printf_common+0xa8>
 8008232:	2301      	movs	r3, #1
 8008234:	4652      	mov	r2, sl
 8008236:	4649      	mov	r1, r9
 8008238:	4638      	mov	r0, r7
 800823a:	47c0      	blx	r8
 800823c:	3001      	adds	r0, #1
 800823e:	d103      	bne.n	8008248 <_printf_common+0xac>
 8008240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008248:	3501      	adds	r5, #1
 800824a:	e7c6      	b.n	80081da <_printf_common+0x3e>
 800824c:	18e1      	adds	r1, r4, r3
 800824e:	1c5a      	adds	r2, r3, #1
 8008250:	2030      	movs	r0, #48	; 0x30
 8008252:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008256:	4422      	add	r2, r4
 8008258:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800825c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008260:	3302      	adds	r3, #2
 8008262:	e7c7      	b.n	80081f4 <_printf_common+0x58>
 8008264:	2301      	movs	r3, #1
 8008266:	4622      	mov	r2, r4
 8008268:	4649      	mov	r1, r9
 800826a:	4638      	mov	r0, r7
 800826c:	47c0      	blx	r8
 800826e:	3001      	adds	r0, #1
 8008270:	d0e6      	beq.n	8008240 <_printf_common+0xa4>
 8008272:	3601      	adds	r6, #1
 8008274:	e7d9      	b.n	800822a <_printf_common+0x8e>
	...

08008278 <_printf_i>:
 8008278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800827c:	7e0f      	ldrb	r7, [r1, #24]
 800827e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008280:	2f78      	cmp	r7, #120	; 0x78
 8008282:	4691      	mov	r9, r2
 8008284:	4680      	mov	r8, r0
 8008286:	460c      	mov	r4, r1
 8008288:	469a      	mov	sl, r3
 800828a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800828e:	d807      	bhi.n	80082a0 <_printf_i+0x28>
 8008290:	2f62      	cmp	r7, #98	; 0x62
 8008292:	d80a      	bhi.n	80082aa <_printf_i+0x32>
 8008294:	2f00      	cmp	r7, #0
 8008296:	f000 80d4 	beq.w	8008442 <_printf_i+0x1ca>
 800829a:	2f58      	cmp	r7, #88	; 0x58
 800829c:	f000 80c0 	beq.w	8008420 <_printf_i+0x1a8>
 80082a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80082a8:	e03a      	b.n	8008320 <_printf_i+0xa8>
 80082aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80082ae:	2b15      	cmp	r3, #21
 80082b0:	d8f6      	bhi.n	80082a0 <_printf_i+0x28>
 80082b2:	a101      	add	r1, pc, #4	; (adr r1, 80082b8 <_printf_i+0x40>)
 80082b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082b8:	08008311 	.word	0x08008311
 80082bc:	08008325 	.word	0x08008325
 80082c0:	080082a1 	.word	0x080082a1
 80082c4:	080082a1 	.word	0x080082a1
 80082c8:	080082a1 	.word	0x080082a1
 80082cc:	080082a1 	.word	0x080082a1
 80082d0:	08008325 	.word	0x08008325
 80082d4:	080082a1 	.word	0x080082a1
 80082d8:	080082a1 	.word	0x080082a1
 80082dc:	080082a1 	.word	0x080082a1
 80082e0:	080082a1 	.word	0x080082a1
 80082e4:	08008429 	.word	0x08008429
 80082e8:	08008351 	.word	0x08008351
 80082ec:	080083e3 	.word	0x080083e3
 80082f0:	080082a1 	.word	0x080082a1
 80082f4:	080082a1 	.word	0x080082a1
 80082f8:	0800844b 	.word	0x0800844b
 80082fc:	080082a1 	.word	0x080082a1
 8008300:	08008351 	.word	0x08008351
 8008304:	080082a1 	.word	0x080082a1
 8008308:	080082a1 	.word	0x080082a1
 800830c:	080083eb 	.word	0x080083eb
 8008310:	682b      	ldr	r3, [r5, #0]
 8008312:	1d1a      	adds	r2, r3, #4
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	602a      	str	r2, [r5, #0]
 8008318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800831c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008320:	2301      	movs	r3, #1
 8008322:	e09f      	b.n	8008464 <_printf_i+0x1ec>
 8008324:	6820      	ldr	r0, [r4, #0]
 8008326:	682b      	ldr	r3, [r5, #0]
 8008328:	0607      	lsls	r7, r0, #24
 800832a:	f103 0104 	add.w	r1, r3, #4
 800832e:	6029      	str	r1, [r5, #0]
 8008330:	d501      	bpl.n	8008336 <_printf_i+0xbe>
 8008332:	681e      	ldr	r6, [r3, #0]
 8008334:	e003      	b.n	800833e <_printf_i+0xc6>
 8008336:	0646      	lsls	r6, r0, #25
 8008338:	d5fb      	bpl.n	8008332 <_printf_i+0xba>
 800833a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800833e:	2e00      	cmp	r6, #0
 8008340:	da03      	bge.n	800834a <_printf_i+0xd2>
 8008342:	232d      	movs	r3, #45	; 0x2d
 8008344:	4276      	negs	r6, r6
 8008346:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800834a:	485a      	ldr	r0, [pc, #360]	; (80084b4 <_printf_i+0x23c>)
 800834c:	230a      	movs	r3, #10
 800834e:	e012      	b.n	8008376 <_printf_i+0xfe>
 8008350:	682b      	ldr	r3, [r5, #0]
 8008352:	6820      	ldr	r0, [r4, #0]
 8008354:	1d19      	adds	r1, r3, #4
 8008356:	6029      	str	r1, [r5, #0]
 8008358:	0605      	lsls	r5, r0, #24
 800835a:	d501      	bpl.n	8008360 <_printf_i+0xe8>
 800835c:	681e      	ldr	r6, [r3, #0]
 800835e:	e002      	b.n	8008366 <_printf_i+0xee>
 8008360:	0641      	lsls	r1, r0, #25
 8008362:	d5fb      	bpl.n	800835c <_printf_i+0xe4>
 8008364:	881e      	ldrh	r6, [r3, #0]
 8008366:	4853      	ldr	r0, [pc, #332]	; (80084b4 <_printf_i+0x23c>)
 8008368:	2f6f      	cmp	r7, #111	; 0x6f
 800836a:	bf0c      	ite	eq
 800836c:	2308      	moveq	r3, #8
 800836e:	230a      	movne	r3, #10
 8008370:	2100      	movs	r1, #0
 8008372:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008376:	6865      	ldr	r5, [r4, #4]
 8008378:	60a5      	str	r5, [r4, #8]
 800837a:	2d00      	cmp	r5, #0
 800837c:	bfa2      	ittt	ge
 800837e:	6821      	ldrge	r1, [r4, #0]
 8008380:	f021 0104 	bicge.w	r1, r1, #4
 8008384:	6021      	strge	r1, [r4, #0]
 8008386:	b90e      	cbnz	r6, 800838c <_printf_i+0x114>
 8008388:	2d00      	cmp	r5, #0
 800838a:	d04b      	beq.n	8008424 <_printf_i+0x1ac>
 800838c:	4615      	mov	r5, r2
 800838e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008392:	fb03 6711 	mls	r7, r3, r1, r6
 8008396:	5dc7      	ldrb	r7, [r0, r7]
 8008398:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800839c:	4637      	mov	r7, r6
 800839e:	42bb      	cmp	r3, r7
 80083a0:	460e      	mov	r6, r1
 80083a2:	d9f4      	bls.n	800838e <_printf_i+0x116>
 80083a4:	2b08      	cmp	r3, #8
 80083a6:	d10b      	bne.n	80083c0 <_printf_i+0x148>
 80083a8:	6823      	ldr	r3, [r4, #0]
 80083aa:	07de      	lsls	r6, r3, #31
 80083ac:	d508      	bpl.n	80083c0 <_printf_i+0x148>
 80083ae:	6923      	ldr	r3, [r4, #16]
 80083b0:	6861      	ldr	r1, [r4, #4]
 80083b2:	4299      	cmp	r1, r3
 80083b4:	bfde      	ittt	le
 80083b6:	2330      	movle	r3, #48	; 0x30
 80083b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80083bc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80083c0:	1b52      	subs	r2, r2, r5
 80083c2:	6122      	str	r2, [r4, #16]
 80083c4:	f8cd a000 	str.w	sl, [sp]
 80083c8:	464b      	mov	r3, r9
 80083ca:	aa03      	add	r2, sp, #12
 80083cc:	4621      	mov	r1, r4
 80083ce:	4640      	mov	r0, r8
 80083d0:	f7ff fee4 	bl	800819c <_printf_common>
 80083d4:	3001      	adds	r0, #1
 80083d6:	d14a      	bne.n	800846e <_printf_i+0x1f6>
 80083d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083dc:	b004      	add	sp, #16
 80083de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e2:	6823      	ldr	r3, [r4, #0]
 80083e4:	f043 0320 	orr.w	r3, r3, #32
 80083e8:	6023      	str	r3, [r4, #0]
 80083ea:	4833      	ldr	r0, [pc, #204]	; (80084b8 <_printf_i+0x240>)
 80083ec:	2778      	movs	r7, #120	; 0x78
 80083ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80083f2:	6823      	ldr	r3, [r4, #0]
 80083f4:	6829      	ldr	r1, [r5, #0]
 80083f6:	061f      	lsls	r7, r3, #24
 80083f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80083fc:	d402      	bmi.n	8008404 <_printf_i+0x18c>
 80083fe:	065f      	lsls	r7, r3, #25
 8008400:	bf48      	it	mi
 8008402:	b2b6      	uxthmi	r6, r6
 8008404:	07df      	lsls	r7, r3, #31
 8008406:	bf48      	it	mi
 8008408:	f043 0320 	orrmi.w	r3, r3, #32
 800840c:	6029      	str	r1, [r5, #0]
 800840e:	bf48      	it	mi
 8008410:	6023      	strmi	r3, [r4, #0]
 8008412:	b91e      	cbnz	r6, 800841c <_printf_i+0x1a4>
 8008414:	6823      	ldr	r3, [r4, #0]
 8008416:	f023 0320 	bic.w	r3, r3, #32
 800841a:	6023      	str	r3, [r4, #0]
 800841c:	2310      	movs	r3, #16
 800841e:	e7a7      	b.n	8008370 <_printf_i+0xf8>
 8008420:	4824      	ldr	r0, [pc, #144]	; (80084b4 <_printf_i+0x23c>)
 8008422:	e7e4      	b.n	80083ee <_printf_i+0x176>
 8008424:	4615      	mov	r5, r2
 8008426:	e7bd      	b.n	80083a4 <_printf_i+0x12c>
 8008428:	682b      	ldr	r3, [r5, #0]
 800842a:	6826      	ldr	r6, [r4, #0]
 800842c:	6961      	ldr	r1, [r4, #20]
 800842e:	1d18      	adds	r0, r3, #4
 8008430:	6028      	str	r0, [r5, #0]
 8008432:	0635      	lsls	r5, r6, #24
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	d501      	bpl.n	800843c <_printf_i+0x1c4>
 8008438:	6019      	str	r1, [r3, #0]
 800843a:	e002      	b.n	8008442 <_printf_i+0x1ca>
 800843c:	0670      	lsls	r0, r6, #25
 800843e:	d5fb      	bpl.n	8008438 <_printf_i+0x1c0>
 8008440:	8019      	strh	r1, [r3, #0]
 8008442:	2300      	movs	r3, #0
 8008444:	6123      	str	r3, [r4, #16]
 8008446:	4615      	mov	r5, r2
 8008448:	e7bc      	b.n	80083c4 <_printf_i+0x14c>
 800844a:	682b      	ldr	r3, [r5, #0]
 800844c:	1d1a      	adds	r2, r3, #4
 800844e:	602a      	str	r2, [r5, #0]
 8008450:	681d      	ldr	r5, [r3, #0]
 8008452:	6862      	ldr	r2, [r4, #4]
 8008454:	2100      	movs	r1, #0
 8008456:	4628      	mov	r0, r5
 8008458:	f7f7 feda 	bl	8000210 <memchr>
 800845c:	b108      	cbz	r0, 8008462 <_printf_i+0x1ea>
 800845e:	1b40      	subs	r0, r0, r5
 8008460:	6060      	str	r0, [r4, #4]
 8008462:	6863      	ldr	r3, [r4, #4]
 8008464:	6123      	str	r3, [r4, #16]
 8008466:	2300      	movs	r3, #0
 8008468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800846c:	e7aa      	b.n	80083c4 <_printf_i+0x14c>
 800846e:	6923      	ldr	r3, [r4, #16]
 8008470:	462a      	mov	r2, r5
 8008472:	4649      	mov	r1, r9
 8008474:	4640      	mov	r0, r8
 8008476:	47d0      	blx	sl
 8008478:	3001      	adds	r0, #1
 800847a:	d0ad      	beq.n	80083d8 <_printf_i+0x160>
 800847c:	6823      	ldr	r3, [r4, #0]
 800847e:	079b      	lsls	r3, r3, #30
 8008480:	d413      	bmi.n	80084aa <_printf_i+0x232>
 8008482:	68e0      	ldr	r0, [r4, #12]
 8008484:	9b03      	ldr	r3, [sp, #12]
 8008486:	4298      	cmp	r0, r3
 8008488:	bfb8      	it	lt
 800848a:	4618      	movlt	r0, r3
 800848c:	e7a6      	b.n	80083dc <_printf_i+0x164>
 800848e:	2301      	movs	r3, #1
 8008490:	4632      	mov	r2, r6
 8008492:	4649      	mov	r1, r9
 8008494:	4640      	mov	r0, r8
 8008496:	47d0      	blx	sl
 8008498:	3001      	adds	r0, #1
 800849a:	d09d      	beq.n	80083d8 <_printf_i+0x160>
 800849c:	3501      	adds	r5, #1
 800849e:	68e3      	ldr	r3, [r4, #12]
 80084a0:	9903      	ldr	r1, [sp, #12]
 80084a2:	1a5b      	subs	r3, r3, r1
 80084a4:	42ab      	cmp	r3, r5
 80084a6:	dcf2      	bgt.n	800848e <_printf_i+0x216>
 80084a8:	e7eb      	b.n	8008482 <_printf_i+0x20a>
 80084aa:	2500      	movs	r5, #0
 80084ac:	f104 0619 	add.w	r6, r4, #25
 80084b0:	e7f5      	b.n	800849e <_printf_i+0x226>
 80084b2:	bf00      	nop
 80084b4:	0800a5b2 	.word	0x0800a5b2
 80084b8:	0800a5c3 	.word	0x0800a5c3

080084bc <std>:
 80084bc:	2300      	movs	r3, #0
 80084be:	b510      	push	{r4, lr}
 80084c0:	4604      	mov	r4, r0
 80084c2:	e9c0 3300 	strd	r3, r3, [r0]
 80084c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084ca:	6083      	str	r3, [r0, #8]
 80084cc:	8181      	strh	r1, [r0, #12]
 80084ce:	6643      	str	r3, [r0, #100]	; 0x64
 80084d0:	81c2      	strh	r2, [r0, #14]
 80084d2:	6183      	str	r3, [r0, #24]
 80084d4:	4619      	mov	r1, r3
 80084d6:	2208      	movs	r2, #8
 80084d8:	305c      	adds	r0, #92	; 0x5c
 80084da:	f000 f8b1 	bl	8008640 <memset>
 80084de:	4b0d      	ldr	r3, [pc, #52]	; (8008514 <std+0x58>)
 80084e0:	6263      	str	r3, [r4, #36]	; 0x24
 80084e2:	4b0d      	ldr	r3, [pc, #52]	; (8008518 <std+0x5c>)
 80084e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80084e6:	4b0d      	ldr	r3, [pc, #52]	; (800851c <std+0x60>)
 80084e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084ea:	4b0d      	ldr	r3, [pc, #52]	; (8008520 <std+0x64>)
 80084ec:	6323      	str	r3, [r4, #48]	; 0x30
 80084ee:	4b0d      	ldr	r3, [pc, #52]	; (8008524 <std+0x68>)
 80084f0:	6224      	str	r4, [r4, #32]
 80084f2:	429c      	cmp	r4, r3
 80084f4:	d006      	beq.n	8008504 <std+0x48>
 80084f6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80084fa:	4294      	cmp	r4, r2
 80084fc:	d002      	beq.n	8008504 <std+0x48>
 80084fe:	33d0      	adds	r3, #208	; 0xd0
 8008500:	429c      	cmp	r4, r3
 8008502:	d105      	bne.n	8008510 <std+0x54>
 8008504:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800850c:	f000 b8ce 	b.w	80086ac <__retarget_lock_init_recursive>
 8008510:	bd10      	pop	{r4, pc}
 8008512:	bf00      	nop
 8008514:	08009d69 	.word	0x08009d69
 8008518:	08009d8b 	.word	0x08009d8b
 800851c:	08009dc3 	.word	0x08009dc3
 8008520:	08009de7 	.word	0x08009de7
 8008524:	200005ec 	.word	0x200005ec

08008528 <stdio_exit_handler>:
 8008528:	4a02      	ldr	r2, [pc, #8]	; (8008534 <stdio_exit_handler+0xc>)
 800852a:	4903      	ldr	r1, [pc, #12]	; (8008538 <stdio_exit_handler+0x10>)
 800852c:	4803      	ldr	r0, [pc, #12]	; (800853c <stdio_exit_handler+0x14>)
 800852e:	f000 b869 	b.w	8008604 <_fwalk_sglue>
 8008532:	bf00      	nop
 8008534:	20000034 	.word	0x20000034
 8008538:	08009609 	.word	0x08009609
 800853c:	20000040 	.word	0x20000040

08008540 <cleanup_stdio>:
 8008540:	6841      	ldr	r1, [r0, #4]
 8008542:	4b0c      	ldr	r3, [pc, #48]	; (8008574 <cleanup_stdio+0x34>)
 8008544:	4299      	cmp	r1, r3
 8008546:	b510      	push	{r4, lr}
 8008548:	4604      	mov	r4, r0
 800854a:	d001      	beq.n	8008550 <cleanup_stdio+0x10>
 800854c:	f001 f85c 	bl	8009608 <_fflush_r>
 8008550:	68a1      	ldr	r1, [r4, #8]
 8008552:	4b09      	ldr	r3, [pc, #36]	; (8008578 <cleanup_stdio+0x38>)
 8008554:	4299      	cmp	r1, r3
 8008556:	d002      	beq.n	800855e <cleanup_stdio+0x1e>
 8008558:	4620      	mov	r0, r4
 800855a:	f001 f855 	bl	8009608 <_fflush_r>
 800855e:	68e1      	ldr	r1, [r4, #12]
 8008560:	4b06      	ldr	r3, [pc, #24]	; (800857c <cleanup_stdio+0x3c>)
 8008562:	4299      	cmp	r1, r3
 8008564:	d004      	beq.n	8008570 <cleanup_stdio+0x30>
 8008566:	4620      	mov	r0, r4
 8008568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800856c:	f001 b84c 	b.w	8009608 <_fflush_r>
 8008570:	bd10      	pop	{r4, pc}
 8008572:	bf00      	nop
 8008574:	200005ec 	.word	0x200005ec
 8008578:	20000654 	.word	0x20000654
 800857c:	200006bc 	.word	0x200006bc

08008580 <global_stdio_init.part.0>:
 8008580:	b510      	push	{r4, lr}
 8008582:	4b0b      	ldr	r3, [pc, #44]	; (80085b0 <global_stdio_init.part.0+0x30>)
 8008584:	4c0b      	ldr	r4, [pc, #44]	; (80085b4 <global_stdio_init.part.0+0x34>)
 8008586:	4a0c      	ldr	r2, [pc, #48]	; (80085b8 <global_stdio_init.part.0+0x38>)
 8008588:	601a      	str	r2, [r3, #0]
 800858a:	4620      	mov	r0, r4
 800858c:	2200      	movs	r2, #0
 800858e:	2104      	movs	r1, #4
 8008590:	f7ff ff94 	bl	80084bc <std>
 8008594:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008598:	2201      	movs	r2, #1
 800859a:	2109      	movs	r1, #9
 800859c:	f7ff ff8e 	bl	80084bc <std>
 80085a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80085a4:	2202      	movs	r2, #2
 80085a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085aa:	2112      	movs	r1, #18
 80085ac:	f7ff bf86 	b.w	80084bc <std>
 80085b0:	20000724 	.word	0x20000724
 80085b4:	200005ec 	.word	0x200005ec
 80085b8:	08008529 	.word	0x08008529

080085bc <__sfp_lock_acquire>:
 80085bc:	4801      	ldr	r0, [pc, #4]	; (80085c4 <__sfp_lock_acquire+0x8>)
 80085be:	f000 b876 	b.w	80086ae <__retarget_lock_acquire_recursive>
 80085c2:	bf00      	nop
 80085c4:	20000729 	.word	0x20000729

080085c8 <__sfp_lock_release>:
 80085c8:	4801      	ldr	r0, [pc, #4]	; (80085d0 <__sfp_lock_release+0x8>)
 80085ca:	f000 b871 	b.w	80086b0 <__retarget_lock_release_recursive>
 80085ce:	bf00      	nop
 80085d0:	20000729 	.word	0x20000729

080085d4 <__sinit>:
 80085d4:	b510      	push	{r4, lr}
 80085d6:	4604      	mov	r4, r0
 80085d8:	f7ff fff0 	bl	80085bc <__sfp_lock_acquire>
 80085dc:	6a23      	ldr	r3, [r4, #32]
 80085de:	b11b      	cbz	r3, 80085e8 <__sinit+0x14>
 80085e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085e4:	f7ff bff0 	b.w	80085c8 <__sfp_lock_release>
 80085e8:	4b04      	ldr	r3, [pc, #16]	; (80085fc <__sinit+0x28>)
 80085ea:	6223      	str	r3, [r4, #32]
 80085ec:	4b04      	ldr	r3, [pc, #16]	; (8008600 <__sinit+0x2c>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1f5      	bne.n	80085e0 <__sinit+0xc>
 80085f4:	f7ff ffc4 	bl	8008580 <global_stdio_init.part.0>
 80085f8:	e7f2      	b.n	80085e0 <__sinit+0xc>
 80085fa:	bf00      	nop
 80085fc:	08008541 	.word	0x08008541
 8008600:	20000724 	.word	0x20000724

08008604 <_fwalk_sglue>:
 8008604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008608:	4607      	mov	r7, r0
 800860a:	4688      	mov	r8, r1
 800860c:	4614      	mov	r4, r2
 800860e:	2600      	movs	r6, #0
 8008610:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008614:	f1b9 0901 	subs.w	r9, r9, #1
 8008618:	d505      	bpl.n	8008626 <_fwalk_sglue+0x22>
 800861a:	6824      	ldr	r4, [r4, #0]
 800861c:	2c00      	cmp	r4, #0
 800861e:	d1f7      	bne.n	8008610 <_fwalk_sglue+0xc>
 8008620:	4630      	mov	r0, r6
 8008622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008626:	89ab      	ldrh	r3, [r5, #12]
 8008628:	2b01      	cmp	r3, #1
 800862a:	d907      	bls.n	800863c <_fwalk_sglue+0x38>
 800862c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008630:	3301      	adds	r3, #1
 8008632:	d003      	beq.n	800863c <_fwalk_sglue+0x38>
 8008634:	4629      	mov	r1, r5
 8008636:	4638      	mov	r0, r7
 8008638:	47c0      	blx	r8
 800863a:	4306      	orrs	r6, r0
 800863c:	3568      	adds	r5, #104	; 0x68
 800863e:	e7e9      	b.n	8008614 <_fwalk_sglue+0x10>

08008640 <memset>:
 8008640:	4402      	add	r2, r0
 8008642:	4603      	mov	r3, r0
 8008644:	4293      	cmp	r3, r2
 8008646:	d100      	bne.n	800864a <memset+0xa>
 8008648:	4770      	bx	lr
 800864a:	f803 1b01 	strb.w	r1, [r3], #1
 800864e:	e7f9      	b.n	8008644 <memset+0x4>

08008650 <_localeconv_r>:
 8008650:	4800      	ldr	r0, [pc, #0]	; (8008654 <_localeconv_r+0x4>)
 8008652:	4770      	bx	lr
 8008654:	20000180 	.word	0x20000180

08008658 <__errno>:
 8008658:	4b01      	ldr	r3, [pc, #4]	; (8008660 <__errno+0x8>)
 800865a:	6818      	ldr	r0, [r3, #0]
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop
 8008660:	2000008c 	.word	0x2000008c

08008664 <__libc_init_array>:
 8008664:	b570      	push	{r4, r5, r6, lr}
 8008666:	4d0d      	ldr	r5, [pc, #52]	; (800869c <__libc_init_array+0x38>)
 8008668:	4c0d      	ldr	r4, [pc, #52]	; (80086a0 <__libc_init_array+0x3c>)
 800866a:	1b64      	subs	r4, r4, r5
 800866c:	10a4      	asrs	r4, r4, #2
 800866e:	2600      	movs	r6, #0
 8008670:	42a6      	cmp	r6, r4
 8008672:	d109      	bne.n	8008688 <__libc_init_array+0x24>
 8008674:	4d0b      	ldr	r5, [pc, #44]	; (80086a4 <__libc_init_array+0x40>)
 8008676:	4c0c      	ldr	r4, [pc, #48]	; (80086a8 <__libc_init_array+0x44>)
 8008678:	f001 ff78 	bl	800a56c <_init>
 800867c:	1b64      	subs	r4, r4, r5
 800867e:	10a4      	asrs	r4, r4, #2
 8008680:	2600      	movs	r6, #0
 8008682:	42a6      	cmp	r6, r4
 8008684:	d105      	bne.n	8008692 <__libc_init_array+0x2e>
 8008686:	bd70      	pop	{r4, r5, r6, pc}
 8008688:	f855 3b04 	ldr.w	r3, [r5], #4
 800868c:	4798      	blx	r3
 800868e:	3601      	adds	r6, #1
 8008690:	e7ee      	b.n	8008670 <__libc_init_array+0xc>
 8008692:	f855 3b04 	ldr.w	r3, [r5], #4
 8008696:	4798      	blx	r3
 8008698:	3601      	adds	r6, #1
 800869a:	e7f2      	b.n	8008682 <__libc_init_array+0x1e>
 800869c:	0800a91c 	.word	0x0800a91c
 80086a0:	0800a91c 	.word	0x0800a91c
 80086a4:	0800a91c 	.word	0x0800a91c
 80086a8:	0800a920 	.word	0x0800a920

080086ac <__retarget_lock_init_recursive>:
 80086ac:	4770      	bx	lr

080086ae <__retarget_lock_acquire_recursive>:
 80086ae:	4770      	bx	lr

080086b0 <__retarget_lock_release_recursive>:
 80086b0:	4770      	bx	lr

080086b2 <quorem>:
 80086b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086b6:	6903      	ldr	r3, [r0, #16]
 80086b8:	690c      	ldr	r4, [r1, #16]
 80086ba:	42a3      	cmp	r3, r4
 80086bc:	4607      	mov	r7, r0
 80086be:	db7e      	blt.n	80087be <quorem+0x10c>
 80086c0:	3c01      	subs	r4, #1
 80086c2:	f101 0814 	add.w	r8, r1, #20
 80086c6:	f100 0514 	add.w	r5, r0, #20
 80086ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80086ce:	9301      	str	r3, [sp, #4]
 80086d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80086d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80086d8:	3301      	adds	r3, #1
 80086da:	429a      	cmp	r2, r3
 80086dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80086e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80086e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80086e8:	d331      	bcc.n	800874e <quorem+0x9c>
 80086ea:	f04f 0e00 	mov.w	lr, #0
 80086ee:	4640      	mov	r0, r8
 80086f0:	46ac      	mov	ip, r5
 80086f2:	46f2      	mov	sl, lr
 80086f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80086f8:	b293      	uxth	r3, r2
 80086fa:	fb06 e303 	mla	r3, r6, r3, lr
 80086fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008702:	0c1a      	lsrs	r2, r3, #16
 8008704:	b29b      	uxth	r3, r3
 8008706:	ebaa 0303 	sub.w	r3, sl, r3
 800870a:	f8dc a000 	ldr.w	sl, [ip]
 800870e:	fa13 f38a 	uxtah	r3, r3, sl
 8008712:	fb06 220e 	mla	r2, r6, lr, r2
 8008716:	9300      	str	r3, [sp, #0]
 8008718:	9b00      	ldr	r3, [sp, #0]
 800871a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800871e:	b292      	uxth	r2, r2
 8008720:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008724:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008728:	f8bd 3000 	ldrh.w	r3, [sp]
 800872c:	4581      	cmp	r9, r0
 800872e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008732:	f84c 3b04 	str.w	r3, [ip], #4
 8008736:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800873a:	d2db      	bcs.n	80086f4 <quorem+0x42>
 800873c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008740:	b92b      	cbnz	r3, 800874e <quorem+0x9c>
 8008742:	9b01      	ldr	r3, [sp, #4]
 8008744:	3b04      	subs	r3, #4
 8008746:	429d      	cmp	r5, r3
 8008748:	461a      	mov	r2, r3
 800874a:	d32c      	bcc.n	80087a6 <quorem+0xf4>
 800874c:	613c      	str	r4, [r7, #16]
 800874e:	4638      	mov	r0, r7
 8008750:	f001 fa0a 	bl	8009b68 <__mcmp>
 8008754:	2800      	cmp	r0, #0
 8008756:	db22      	blt.n	800879e <quorem+0xec>
 8008758:	3601      	adds	r6, #1
 800875a:	4629      	mov	r1, r5
 800875c:	2000      	movs	r0, #0
 800875e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008762:	f8d1 c000 	ldr.w	ip, [r1]
 8008766:	b293      	uxth	r3, r2
 8008768:	1ac3      	subs	r3, r0, r3
 800876a:	0c12      	lsrs	r2, r2, #16
 800876c:	fa13 f38c 	uxtah	r3, r3, ip
 8008770:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008774:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008778:	b29b      	uxth	r3, r3
 800877a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800877e:	45c1      	cmp	r9, r8
 8008780:	f841 3b04 	str.w	r3, [r1], #4
 8008784:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008788:	d2e9      	bcs.n	800875e <quorem+0xac>
 800878a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800878e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008792:	b922      	cbnz	r2, 800879e <quorem+0xec>
 8008794:	3b04      	subs	r3, #4
 8008796:	429d      	cmp	r5, r3
 8008798:	461a      	mov	r2, r3
 800879a:	d30a      	bcc.n	80087b2 <quorem+0x100>
 800879c:	613c      	str	r4, [r7, #16]
 800879e:	4630      	mov	r0, r6
 80087a0:	b003      	add	sp, #12
 80087a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087a6:	6812      	ldr	r2, [r2, #0]
 80087a8:	3b04      	subs	r3, #4
 80087aa:	2a00      	cmp	r2, #0
 80087ac:	d1ce      	bne.n	800874c <quorem+0x9a>
 80087ae:	3c01      	subs	r4, #1
 80087b0:	e7c9      	b.n	8008746 <quorem+0x94>
 80087b2:	6812      	ldr	r2, [r2, #0]
 80087b4:	3b04      	subs	r3, #4
 80087b6:	2a00      	cmp	r2, #0
 80087b8:	d1f0      	bne.n	800879c <quorem+0xea>
 80087ba:	3c01      	subs	r4, #1
 80087bc:	e7eb      	b.n	8008796 <quorem+0xe4>
 80087be:	2000      	movs	r0, #0
 80087c0:	e7ee      	b.n	80087a0 <quorem+0xee>
 80087c2:	0000      	movs	r0, r0
 80087c4:	0000      	movs	r0, r0
	...

080087c8 <_dtoa_r>:
 80087c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087cc:	ed2d 8b04 	vpush	{d8-d9}
 80087d0:	69c5      	ldr	r5, [r0, #28]
 80087d2:	b093      	sub	sp, #76	; 0x4c
 80087d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80087d8:	ec57 6b10 	vmov	r6, r7, d0
 80087dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80087e0:	9107      	str	r1, [sp, #28]
 80087e2:	4604      	mov	r4, r0
 80087e4:	920a      	str	r2, [sp, #40]	; 0x28
 80087e6:	930d      	str	r3, [sp, #52]	; 0x34
 80087e8:	b975      	cbnz	r5, 8008808 <_dtoa_r+0x40>
 80087ea:	2010      	movs	r0, #16
 80087ec:	f000 fdde 	bl	80093ac <malloc>
 80087f0:	4602      	mov	r2, r0
 80087f2:	61e0      	str	r0, [r4, #28]
 80087f4:	b920      	cbnz	r0, 8008800 <_dtoa_r+0x38>
 80087f6:	4bae      	ldr	r3, [pc, #696]	; (8008ab0 <_dtoa_r+0x2e8>)
 80087f8:	21ef      	movs	r1, #239	; 0xef
 80087fa:	48ae      	ldr	r0, [pc, #696]	; (8008ab4 <_dtoa_r+0x2ec>)
 80087fc:	f001 fb5c 	bl	8009eb8 <__assert_func>
 8008800:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008804:	6005      	str	r5, [r0, #0]
 8008806:	60c5      	str	r5, [r0, #12]
 8008808:	69e3      	ldr	r3, [r4, #28]
 800880a:	6819      	ldr	r1, [r3, #0]
 800880c:	b151      	cbz	r1, 8008824 <_dtoa_r+0x5c>
 800880e:	685a      	ldr	r2, [r3, #4]
 8008810:	604a      	str	r2, [r1, #4]
 8008812:	2301      	movs	r3, #1
 8008814:	4093      	lsls	r3, r2
 8008816:	608b      	str	r3, [r1, #8]
 8008818:	4620      	mov	r0, r4
 800881a:	f000 ff69 	bl	80096f0 <_Bfree>
 800881e:	69e3      	ldr	r3, [r4, #28]
 8008820:	2200      	movs	r2, #0
 8008822:	601a      	str	r2, [r3, #0]
 8008824:	1e3b      	subs	r3, r7, #0
 8008826:	bfbb      	ittet	lt
 8008828:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800882c:	9303      	strlt	r3, [sp, #12]
 800882e:	2300      	movge	r3, #0
 8008830:	2201      	movlt	r2, #1
 8008832:	bfac      	ite	ge
 8008834:	f8c8 3000 	strge.w	r3, [r8]
 8008838:	f8c8 2000 	strlt.w	r2, [r8]
 800883c:	4b9e      	ldr	r3, [pc, #632]	; (8008ab8 <_dtoa_r+0x2f0>)
 800883e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008842:	ea33 0308 	bics.w	r3, r3, r8
 8008846:	d11b      	bne.n	8008880 <_dtoa_r+0xb8>
 8008848:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800884a:	f242 730f 	movw	r3, #9999	; 0x270f
 800884e:	6013      	str	r3, [r2, #0]
 8008850:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008854:	4333      	orrs	r3, r6
 8008856:	f000 8593 	beq.w	8009380 <_dtoa_r+0xbb8>
 800885a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800885c:	b963      	cbnz	r3, 8008878 <_dtoa_r+0xb0>
 800885e:	4b97      	ldr	r3, [pc, #604]	; (8008abc <_dtoa_r+0x2f4>)
 8008860:	e027      	b.n	80088b2 <_dtoa_r+0xea>
 8008862:	4b97      	ldr	r3, [pc, #604]	; (8008ac0 <_dtoa_r+0x2f8>)
 8008864:	9300      	str	r3, [sp, #0]
 8008866:	3308      	adds	r3, #8
 8008868:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800886a:	6013      	str	r3, [r2, #0]
 800886c:	9800      	ldr	r0, [sp, #0]
 800886e:	b013      	add	sp, #76	; 0x4c
 8008870:	ecbd 8b04 	vpop	{d8-d9}
 8008874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008878:	4b90      	ldr	r3, [pc, #576]	; (8008abc <_dtoa_r+0x2f4>)
 800887a:	9300      	str	r3, [sp, #0]
 800887c:	3303      	adds	r3, #3
 800887e:	e7f3      	b.n	8008868 <_dtoa_r+0xa0>
 8008880:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008884:	2200      	movs	r2, #0
 8008886:	ec51 0b17 	vmov	r0, r1, d7
 800888a:	eeb0 8a47 	vmov.f32	s16, s14
 800888e:	eef0 8a67 	vmov.f32	s17, s15
 8008892:	2300      	movs	r3, #0
 8008894:	f7f8 f938 	bl	8000b08 <__aeabi_dcmpeq>
 8008898:	4681      	mov	r9, r0
 800889a:	b160      	cbz	r0, 80088b6 <_dtoa_r+0xee>
 800889c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800889e:	2301      	movs	r3, #1
 80088a0:	6013      	str	r3, [r2, #0]
 80088a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f000 8568 	beq.w	800937a <_dtoa_r+0xbb2>
 80088aa:	4b86      	ldr	r3, [pc, #536]	; (8008ac4 <_dtoa_r+0x2fc>)
 80088ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80088ae:	6013      	str	r3, [r2, #0]
 80088b0:	3b01      	subs	r3, #1
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	e7da      	b.n	800886c <_dtoa_r+0xa4>
 80088b6:	aa10      	add	r2, sp, #64	; 0x40
 80088b8:	a911      	add	r1, sp, #68	; 0x44
 80088ba:	4620      	mov	r0, r4
 80088bc:	eeb0 0a48 	vmov.f32	s0, s16
 80088c0:	eef0 0a68 	vmov.f32	s1, s17
 80088c4:	f001 f9f6 	bl	8009cb4 <__d2b>
 80088c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80088cc:	4682      	mov	sl, r0
 80088ce:	2d00      	cmp	r5, #0
 80088d0:	d07f      	beq.n	80089d2 <_dtoa_r+0x20a>
 80088d2:	ee18 3a90 	vmov	r3, s17
 80088d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088da:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80088de:	ec51 0b18 	vmov	r0, r1, d8
 80088e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80088e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80088ea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80088ee:	4619      	mov	r1, r3
 80088f0:	2200      	movs	r2, #0
 80088f2:	4b75      	ldr	r3, [pc, #468]	; (8008ac8 <_dtoa_r+0x300>)
 80088f4:	f7f7 fce8 	bl	80002c8 <__aeabi_dsub>
 80088f8:	a367      	add	r3, pc, #412	; (adr r3, 8008a98 <_dtoa_r+0x2d0>)
 80088fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fe:	f7f7 fe9b 	bl	8000638 <__aeabi_dmul>
 8008902:	a367      	add	r3, pc, #412	; (adr r3, 8008aa0 <_dtoa_r+0x2d8>)
 8008904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008908:	f7f7 fce0 	bl	80002cc <__adddf3>
 800890c:	4606      	mov	r6, r0
 800890e:	4628      	mov	r0, r5
 8008910:	460f      	mov	r7, r1
 8008912:	f7f7 fe27 	bl	8000564 <__aeabi_i2d>
 8008916:	a364      	add	r3, pc, #400	; (adr r3, 8008aa8 <_dtoa_r+0x2e0>)
 8008918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891c:	f7f7 fe8c 	bl	8000638 <__aeabi_dmul>
 8008920:	4602      	mov	r2, r0
 8008922:	460b      	mov	r3, r1
 8008924:	4630      	mov	r0, r6
 8008926:	4639      	mov	r1, r7
 8008928:	f7f7 fcd0 	bl	80002cc <__adddf3>
 800892c:	4606      	mov	r6, r0
 800892e:	460f      	mov	r7, r1
 8008930:	f7f8 f932 	bl	8000b98 <__aeabi_d2iz>
 8008934:	2200      	movs	r2, #0
 8008936:	4683      	mov	fp, r0
 8008938:	2300      	movs	r3, #0
 800893a:	4630      	mov	r0, r6
 800893c:	4639      	mov	r1, r7
 800893e:	f7f8 f8ed 	bl	8000b1c <__aeabi_dcmplt>
 8008942:	b148      	cbz	r0, 8008958 <_dtoa_r+0x190>
 8008944:	4658      	mov	r0, fp
 8008946:	f7f7 fe0d 	bl	8000564 <__aeabi_i2d>
 800894a:	4632      	mov	r2, r6
 800894c:	463b      	mov	r3, r7
 800894e:	f7f8 f8db 	bl	8000b08 <__aeabi_dcmpeq>
 8008952:	b908      	cbnz	r0, 8008958 <_dtoa_r+0x190>
 8008954:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008958:	f1bb 0f16 	cmp.w	fp, #22
 800895c:	d857      	bhi.n	8008a0e <_dtoa_r+0x246>
 800895e:	4b5b      	ldr	r3, [pc, #364]	; (8008acc <_dtoa_r+0x304>)
 8008960:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008968:	ec51 0b18 	vmov	r0, r1, d8
 800896c:	f7f8 f8d6 	bl	8000b1c <__aeabi_dcmplt>
 8008970:	2800      	cmp	r0, #0
 8008972:	d04e      	beq.n	8008a12 <_dtoa_r+0x24a>
 8008974:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008978:	2300      	movs	r3, #0
 800897a:	930c      	str	r3, [sp, #48]	; 0x30
 800897c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800897e:	1b5b      	subs	r3, r3, r5
 8008980:	1e5a      	subs	r2, r3, #1
 8008982:	bf45      	ittet	mi
 8008984:	f1c3 0301 	rsbmi	r3, r3, #1
 8008988:	9305      	strmi	r3, [sp, #20]
 800898a:	2300      	movpl	r3, #0
 800898c:	2300      	movmi	r3, #0
 800898e:	9206      	str	r2, [sp, #24]
 8008990:	bf54      	ite	pl
 8008992:	9305      	strpl	r3, [sp, #20]
 8008994:	9306      	strmi	r3, [sp, #24]
 8008996:	f1bb 0f00 	cmp.w	fp, #0
 800899a:	db3c      	blt.n	8008a16 <_dtoa_r+0x24e>
 800899c:	9b06      	ldr	r3, [sp, #24]
 800899e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80089a2:	445b      	add	r3, fp
 80089a4:	9306      	str	r3, [sp, #24]
 80089a6:	2300      	movs	r3, #0
 80089a8:	9308      	str	r3, [sp, #32]
 80089aa:	9b07      	ldr	r3, [sp, #28]
 80089ac:	2b09      	cmp	r3, #9
 80089ae:	d868      	bhi.n	8008a82 <_dtoa_r+0x2ba>
 80089b0:	2b05      	cmp	r3, #5
 80089b2:	bfc4      	itt	gt
 80089b4:	3b04      	subgt	r3, #4
 80089b6:	9307      	strgt	r3, [sp, #28]
 80089b8:	9b07      	ldr	r3, [sp, #28]
 80089ba:	f1a3 0302 	sub.w	r3, r3, #2
 80089be:	bfcc      	ite	gt
 80089c0:	2500      	movgt	r5, #0
 80089c2:	2501      	movle	r5, #1
 80089c4:	2b03      	cmp	r3, #3
 80089c6:	f200 8085 	bhi.w	8008ad4 <_dtoa_r+0x30c>
 80089ca:	e8df f003 	tbb	[pc, r3]
 80089ce:	3b2e      	.short	0x3b2e
 80089d0:	5839      	.short	0x5839
 80089d2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80089d6:	441d      	add	r5, r3
 80089d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80089dc:	2b20      	cmp	r3, #32
 80089de:	bfc1      	itttt	gt
 80089e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80089e4:	fa08 f803 	lslgt.w	r8, r8, r3
 80089e8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80089ec:	fa26 f303 	lsrgt.w	r3, r6, r3
 80089f0:	bfd6      	itet	le
 80089f2:	f1c3 0320 	rsble	r3, r3, #32
 80089f6:	ea48 0003 	orrgt.w	r0, r8, r3
 80089fa:	fa06 f003 	lslle.w	r0, r6, r3
 80089fe:	f7f7 fda1 	bl	8000544 <__aeabi_ui2d>
 8008a02:	2201      	movs	r2, #1
 8008a04:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008a08:	3d01      	subs	r5, #1
 8008a0a:	920e      	str	r2, [sp, #56]	; 0x38
 8008a0c:	e76f      	b.n	80088ee <_dtoa_r+0x126>
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e7b3      	b.n	800897a <_dtoa_r+0x1b2>
 8008a12:	900c      	str	r0, [sp, #48]	; 0x30
 8008a14:	e7b2      	b.n	800897c <_dtoa_r+0x1b4>
 8008a16:	9b05      	ldr	r3, [sp, #20]
 8008a18:	eba3 030b 	sub.w	r3, r3, fp
 8008a1c:	9305      	str	r3, [sp, #20]
 8008a1e:	f1cb 0300 	rsb	r3, fp, #0
 8008a22:	9308      	str	r3, [sp, #32]
 8008a24:	2300      	movs	r3, #0
 8008a26:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a28:	e7bf      	b.n	80089aa <_dtoa_r+0x1e2>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	dc52      	bgt.n	8008ada <_dtoa_r+0x312>
 8008a34:	2301      	movs	r3, #1
 8008a36:	9301      	str	r3, [sp, #4]
 8008a38:	9304      	str	r3, [sp, #16]
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	920a      	str	r2, [sp, #40]	; 0x28
 8008a3e:	e00b      	b.n	8008a58 <_dtoa_r+0x290>
 8008a40:	2301      	movs	r3, #1
 8008a42:	e7f3      	b.n	8008a2c <_dtoa_r+0x264>
 8008a44:	2300      	movs	r3, #0
 8008a46:	9309      	str	r3, [sp, #36]	; 0x24
 8008a48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a4a:	445b      	add	r3, fp
 8008a4c:	9301      	str	r3, [sp, #4]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	9304      	str	r3, [sp, #16]
 8008a54:	bfb8      	it	lt
 8008a56:	2301      	movlt	r3, #1
 8008a58:	69e0      	ldr	r0, [r4, #28]
 8008a5a:	2100      	movs	r1, #0
 8008a5c:	2204      	movs	r2, #4
 8008a5e:	f102 0614 	add.w	r6, r2, #20
 8008a62:	429e      	cmp	r6, r3
 8008a64:	d93d      	bls.n	8008ae2 <_dtoa_r+0x31a>
 8008a66:	6041      	str	r1, [r0, #4]
 8008a68:	4620      	mov	r0, r4
 8008a6a:	f000 fe01 	bl	8009670 <_Balloc>
 8008a6e:	9000      	str	r0, [sp, #0]
 8008a70:	2800      	cmp	r0, #0
 8008a72:	d139      	bne.n	8008ae8 <_dtoa_r+0x320>
 8008a74:	4b16      	ldr	r3, [pc, #88]	; (8008ad0 <_dtoa_r+0x308>)
 8008a76:	4602      	mov	r2, r0
 8008a78:	f240 11af 	movw	r1, #431	; 0x1af
 8008a7c:	e6bd      	b.n	80087fa <_dtoa_r+0x32>
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e7e1      	b.n	8008a46 <_dtoa_r+0x27e>
 8008a82:	2501      	movs	r5, #1
 8008a84:	2300      	movs	r3, #0
 8008a86:	9307      	str	r3, [sp, #28]
 8008a88:	9509      	str	r5, [sp, #36]	; 0x24
 8008a8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a8e:	9301      	str	r3, [sp, #4]
 8008a90:	9304      	str	r3, [sp, #16]
 8008a92:	2200      	movs	r2, #0
 8008a94:	2312      	movs	r3, #18
 8008a96:	e7d1      	b.n	8008a3c <_dtoa_r+0x274>
 8008a98:	636f4361 	.word	0x636f4361
 8008a9c:	3fd287a7 	.word	0x3fd287a7
 8008aa0:	8b60c8b3 	.word	0x8b60c8b3
 8008aa4:	3fc68a28 	.word	0x3fc68a28
 8008aa8:	509f79fb 	.word	0x509f79fb
 8008aac:	3fd34413 	.word	0x3fd34413
 8008ab0:	0800a5e1 	.word	0x0800a5e1
 8008ab4:	0800a5f8 	.word	0x0800a5f8
 8008ab8:	7ff00000 	.word	0x7ff00000
 8008abc:	0800a5dd 	.word	0x0800a5dd
 8008ac0:	0800a5d4 	.word	0x0800a5d4
 8008ac4:	0800a5b1 	.word	0x0800a5b1
 8008ac8:	3ff80000 	.word	0x3ff80000
 8008acc:	0800a6e8 	.word	0x0800a6e8
 8008ad0:	0800a650 	.word	0x0800a650
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ad8:	e7d7      	b.n	8008a8a <_dtoa_r+0x2c2>
 8008ada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008adc:	9301      	str	r3, [sp, #4]
 8008ade:	9304      	str	r3, [sp, #16]
 8008ae0:	e7ba      	b.n	8008a58 <_dtoa_r+0x290>
 8008ae2:	3101      	adds	r1, #1
 8008ae4:	0052      	lsls	r2, r2, #1
 8008ae6:	e7ba      	b.n	8008a5e <_dtoa_r+0x296>
 8008ae8:	69e3      	ldr	r3, [r4, #28]
 8008aea:	9a00      	ldr	r2, [sp, #0]
 8008aec:	601a      	str	r2, [r3, #0]
 8008aee:	9b04      	ldr	r3, [sp, #16]
 8008af0:	2b0e      	cmp	r3, #14
 8008af2:	f200 80a8 	bhi.w	8008c46 <_dtoa_r+0x47e>
 8008af6:	2d00      	cmp	r5, #0
 8008af8:	f000 80a5 	beq.w	8008c46 <_dtoa_r+0x47e>
 8008afc:	f1bb 0f00 	cmp.w	fp, #0
 8008b00:	dd38      	ble.n	8008b74 <_dtoa_r+0x3ac>
 8008b02:	4bc0      	ldr	r3, [pc, #768]	; (8008e04 <_dtoa_r+0x63c>)
 8008b04:	f00b 020f 	and.w	r2, fp, #15
 8008b08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b0c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008b10:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008b14:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008b18:	d019      	beq.n	8008b4e <_dtoa_r+0x386>
 8008b1a:	4bbb      	ldr	r3, [pc, #748]	; (8008e08 <_dtoa_r+0x640>)
 8008b1c:	ec51 0b18 	vmov	r0, r1, d8
 8008b20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b24:	f7f7 feb2 	bl	800088c <__aeabi_ddiv>
 8008b28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b2c:	f008 080f 	and.w	r8, r8, #15
 8008b30:	2503      	movs	r5, #3
 8008b32:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008e08 <_dtoa_r+0x640>
 8008b36:	f1b8 0f00 	cmp.w	r8, #0
 8008b3a:	d10a      	bne.n	8008b52 <_dtoa_r+0x38a>
 8008b3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b40:	4632      	mov	r2, r6
 8008b42:	463b      	mov	r3, r7
 8008b44:	f7f7 fea2 	bl	800088c <__aeabi_ddiv>
 8008b48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b4c:	e02b      	b.n	8008ba6 <_dtoa_r+0x3de>
 8008b4e:	2502      	movs	r5, #2
 8008b50:	e7ef      	b.n	8008b32 <_dtoa_r+0x36a>
 8008b52:	f018 0f01 	tst.w	r8, #1
 8008b56:	d008      	beq.n	8008b6a <_dtoa_r+0x3a2>
 8008b58:	4630      	mov	r0, r6
 8008b5a:	4639      	mov	r1, r7
 8008b5c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008b60:	f7f7 fd6a 	bl	8000638 <__aeabi_dmul>
 8008b64:	3501      	adds	r5, #1
 8008b66:	4606      	mov	r6, r0
 8008b68:	460f      	mov	r7, r1
 8008b6a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008b6e:	f109 0908 	add.w	r9, r9, #8
 8008b72:	e7e0      	b.n	8008b36 <_dtoa_r+0x36e>
 8008b74:	f000 809f 	beq.w	8008cb6 <_dtoa_r+0x4ee>
 8008b78:	f1cb 0600 	rsb	r6, fp, #0
 8008b7c:	4ba1      	ldr	r3, [pc, #644]	; (8008e04 <_dtoa_r+0x63c>)
 8008b7e:	4fa2      	ldr	r7, [pc, #648]	; (8008e08 <_dtoa_r+0x640>)
 8008b80:	f006 020f 	and.w	r2, r6, #15
 8008b84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8c:	ec51 0b18 	vmov	r0, r1, d8
 8008b90:	f7f7 fd52 	bl	8000638 <__aeabi_dmul>
 8008b94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b98:	1136      	asrs	r6, r6, #4
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	2502      	movs	r5, #2
 8008b9e:	2e00      	cmp	r6, #0
 8008ba0:	d17e      	bne.n	8008ca0 <_dtoa_r+0x4d8>
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1d0      	bne.n	8008b48 <_dtoa_r+0x380>
 8008ba6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ba8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	f000 8084 	beq.w	8008cba <_dtoa_r+0x4f2>
 8008bb2:	4b96      	ldr	r3, [pc, #600]	; (8008e0c <_dtoa_r+0x644>)
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	4640      	mov	r0, r8
 8008bb8:	4649      	mov	r1, r9
 8008bba:	f7f7 ffaf 	bl	8000b1c <__aeabi_dcmplt>
 8008bbe:	2800      	cmp	r0, #0
 8008bc0:	d07b      	beq.n	8008cba <_dtoa_r+0x4f2>
 8008bc2:	9b04      	ldr	r3, [sp, #16]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d078      	beq.n	8008cba <_dtoa_r+0x4f2>
 8008bc8:	9b01      	ldr	r3, [sp, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	dd39      	ble.n	8008c42 <_dtoa_r+0x47a>
 8008bce:	4b90      	ldr	r3, [pc, #576]	; (8008e10 <_dtoa_r+0x648>)
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	4640      	mov	r0, r8
 8008bd4:	4649      	mov	r1, r9
 8008bd6:	f7f7 fd2f 	bl	8000638 <__aeabi_dmul>
 8008bda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bde:	9e01      	ldr	r6, [sp, #4]
 8008be0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8008be4:	3501      	adds	r5, #1
 8008be6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008bea:	4628      	mov	r0, r5
 8008bec:	f7f7 fcba 	bl	8000564 <__aeabi_i2d>
 8008bf0:	4642      	mov	r2, r8
 8008bf2:	464b      	mov	r3, r9
 8008bf4:	f7f7 fd20 	bl	8000638 <__aeabi_dmul>
 8008bf8:	4b86      	ldr	r3, [pc, #536]	; (8008e14 <_dtoa_r+0x64c>)
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f7f7 fb66 	bl	80002cc <__adddf3>
 8008c00:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008c04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c08:	9303      	str	r3, [sp, #12]
 8008c0a:	2e00      	cmp	r6, #0
 8008c0c:	d158      	bne.n	8008cc0 <_dtoa_r+0x4f8>
 8008c0e:	4b82      	ldr	r3, [pc, #520]	; (8008e18 <_dtoa_r+0x650>)
 8008c10:	2200      	movs	r2, #0
 8008c12:	4640      	mov	r0, r8
 8008c14:	4649      	mov	r1, r9
 8008c16:	f7f7 fb57 	bl	80002c8 <__aeabi_dsub>
 8008c1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c1e:	4680      	mov	r8, r0
 8008c20:	4689      	mov	r9, r1
 8008c22:	f7f7 ff99 	bl	8000b58 <__aeabi_dcmpgt>
 8008c26:	2800      	cmp	r0, #0
 8008c28:	f040 8296 	bne.w	8009158 <_dtoa_r+0x990>
 8008c2c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008c30:	4640      	mov	r0, r8
 8008c32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c36:	4649      	mov	r1, r9
 8008c38:	f7f7 ff70 	bl	8000b1c <__aeabi_dcmplt>
 8008c3c:	2800      	cmp	r0, #0
 8008c3e:	f040 8289 	bne.w	8009154 <_dtoa_r+0x98c>
 8008c42:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008c46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f2c0 814e 	blt.w	8008eea <_dtoa_r+0x722>
 8008c4e:	f1bb 0f0e 	cmp.w	fp, #14
 8008c52:	f300 814a 	bgt.w	8008eea <_dtoa_r+0x722>
 8008c56:	4b6b      	ldr	r3, [pc, #428]	; (8008e04 <_dtoa_r+0x63c>)
 8008c58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008c5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	f280 80dc 	bge.w	8008e20 <_dtoa_r+0x658>
 8008c68:	9b04      	ldr	r3, [sp, #16]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f300 80d8 	bgt.w	8008e20 <_dtoa_r+0x658>
 8008c70:	f040 826f 	bne.w	8009152 <_dtoa_r+0x98a>
 8008c74:	4b68      	ldr	r3, [pc, #416]	; (8008e18 <_dtoa_r+0x650>)
 8008c76:	2200      	movs	r2, #0
 8008c78:	4640      	mov	r0, r8
 8008c7a:	4649      	mov	r1, r9
 8008c7c:	f7f7 fcdc 	bl	8000638 <__aeabi_dmul>
 8008c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c84:	f7f7 ff5e 	bl	8000b44 <__aeabi_dcmpge>
 8008c88:	9e04      	ldr	r6, [sp, #16]
 8008c8a:	4637      	mov	r7, r6
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	f040 8245 	bne.w	800911c <_dtoa_r+0x954>
 8008c92:	9d00      	ldr	r5, [sp, #0]
 8008c94:	2331      	movs	r3, #49	; 0x31
 8008c96:	f805 3b01 	strb.w	r3, [r5], #1
 8008c9a:	f10b 0b01 	add.w	fp, fp, #1
 8008c9e:	e241      	b.n	8009124 <_dtoa_r+0x95c>
 8008ca0:	07f2      	lsls	r2, r6, #31
 8008ca2:	d505      	bpl.n	8008cb0 <_dtoa_r+0x4e8>
 8008ca4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ca8:	f7f7 fcc6 	bl	8000638 <__aeabi_dmul>
 8008cac:	3501      	adds	r5, #1
 8008cae:	2301      	movs	r3, #1
 8008cb0:	1076      	asrs	r6, r6, #1
 8008cb2:	3708      	adds	r7, #8
 8008cb4:	e773      	b.n	8008b9e <_dtoa_r+0x3d6>
 8008cb6:	2502      	movs	r5, #2
 8008cb8:	e775      	b.n	8008ba6 <_dtoa_r+0x3de>
 8008cba:	9e04      	ldr	r6, [sp, #16]
 8008cbc:	465f      	mov	r7, fp
 8008cbe:	e792      	b.n	8008be6 <_dtoa_r+0x41e>
 8008cc0:	9900      	ldr	r1, [sp, #0]
 8008cc2:	4b50      	ldr	r3, [pc, #320]	; (8008e04 <_dtoa_r+0x63c>)
 8008cc4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008cc8:	4431      	add	r1, r6
 8008cca:	9102      	str	r1, [sp, #8]
 8008ccc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008cce:	eeb0 9a47 	vmov.f32	s18, s14
 8008cd2:	eef0 9a67 	vmov.f32	s19, s15
 8008cd6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008cda:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008cde:	2900      	cmp	r1, #0
 8008ce0:	d044      	beq.n	8008d6c <_dtoa_r+0x5a4>
 8008ce2:	494e      	ldr	r1, [pc, #312]	; (8008e1c <_dtoa_r+0x654>)
 8008ce4:	2000      	movs	r0, #0
 8008ce6:	f7f7 fdd1 	bl	800088c <__aeabi_ddiv>
 8008cea:	ec53 2b19 	vmov	r2, r3, d9
 8008cee:	f7f7 faeb 	bl	80002c8 <__aeabi_dsub>
 8008cf2:	9d00      	ldr	r5, [sp, #0]
 8008cf4:	ec41 0b19 	vmov	d9, r0, r1
 8008cf8:	4649      	mov	r1, r9
 8008cfa:	4640      	mov	r0, r8
 8008cfc:	f7f7 ff4c 	bl	8000b98 <__aeabi_d2iz>
 8008d00:	4606      	mov	r6, r0
 8008d02:	f7f7 fc2f 	bl	8000564 <__aeabi_i2d>
 8008d06:	4602      	mov	r2, r0
 8008d08:	460b      	mov	r3, r1
 8008d0a:	4640      	mov	r0, r8
 8008d0c:	4649      	mov	r1, r9
 8008d0e:	f7f7 fadb 	bl	80002c8 <__aeabi_dsub>
 8008d12:	3630      	adds	r6, #48	; 0x30
 8008d14:	f805 6b01 	strb.w	r6, [r5], #1
 8008d18:	ec53 2b19 	vmov	r2, r3, d9
 8008d1c:	4680      	mov	r8, r0
 8008d1e:	4689      	mov	r9, r1
 8008d20:	f7f7 fefc 	bl	8000b1c <__aeabi_dcmplt>
 8008d24:	2800      	cmp	r0, #0
 8008d26:	d164      	bne.n	8008df2 <_dtoa_r+0x62a>
 8008d28:	4642      	mov	r2, r8
 8008d2a:	464b      	mov	r3, r9
 8008d2c:	4937      	ldr	r1, [pc, #220]	; (8008e0c <_dtoa_r+0x644>)
 8008d2e:	2000      	movs	r0, #0
 8008d30:	f7f7 faca 	bl	80002c8 <__aeabi_dsub>
 8008d34:	ec53 2b19 	vmov	r2, r3, d9
 8008d38:	f7f7 fef0 	bl	8000b1c <__aeabi_dcmplt>
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	f040 80b6 	bne.w	8008eae <_dtoa_r+0x6e6>
 8008d42:	9b02      	ldr	r3, [sp, #8]
 8008d44:	429d      	cmp	r5, r3
 8008d46:	f43f af7c 	beq.w	8008c42 <_dtoa_r+0x47a>
 8008d4a:	4b31      	ldr	r3, [pc, #196]	; (8008e10 <_dtoa_r+0x648>)
 8008d4c:	ec51 0b19 	vmov	r0, r1, d9
 8008d50:	2200      	movs	r2, #0
 8008d52:	f7f7 fc71 	bl	8000638 <__aeabi_dmul>
 8008d56:	4b2e      	ldr	r3, [pc, #184]	; (8008e10 <_dtoa_r+0x648>)
 8008d58:	ec41 0b19 	vmov	d9, r0, r1
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	4640      	mov	r0, r8
 8008d60:	4649      	mov	r1, r9
 8008d62:	f7f7 fc69 	bl	8000638 <__aeabi_dmul>
 8008d66:	4680      	mov	r8, r0
 8008d68:	4689      	mov	r9, r1
 8008d6a:	e7c5      	b.n	8008cf8 <_dtoa_r+0x530>
 8008d6c:	ec51 0b17 	vmov	r0, r1, d7
 8008d70:	f7f7 fc62 	bl	8000638 <__aeabi_dmul>
 8008d74:	9b02      	ldr	r3, [sp, #8]
 8008d76:	9d00      	ldr	r5, [sp, #0]
 8008d78:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d7a:	ec41 0b19 	vmov	d9, r0, r1
 8008d7e:	4649      	mov	r1, r9
 8008d80:	4640      	mov	r0, r8
 8008d82:	f7f7 ff09 	bl	8000b98 <__aeabi_d2iz>
 8008d86:	4606      	mov	r6, r0
 8008d88:	f7f7 fbec 	bl	8000564 <__aeabi_i2d>
 8008d8c:	3630      	adds	r6, #48	; 0x30
 8008d8e:	4602      	mov	r2, r0
 8008d90:	460b      	mov	r3, r1
 8008d92:	4640      	mov	r0, r8
 8008d94:	4649      	mov	r1, r9
 8008d96:	f7f7 fa97 	bl	80002c8 <__aeabi_dsub>
 8008d9a:	f805 6b01 	strb.w	r6, [r5], #1
 8008d9e:	9b02      	ldr	r3, [sp, #8]
 8008da0:	429d      	cmp	r5, r3
 8008da2:	4680      	mov	r8, r0
 8008da4:	4689      	mov	r9, r1
 8008da6:	f04f 0200 	mov.w	r2, #0
 8008daa:	d124      	bne.n	8008df6 <_dtoa_r+0x62e>
 8008dac:	4b1b      	ldr	r3, [pc, #108]	; (8008e1c <_dtoa_r+0x654>)
 8008dae:	ec51 0b19 	vmov	r0, r1, d9
 8008db2:	f7f7 fa8b 	bl	80002cc <__adddf3>
 8008db6:	4602      	mov	r2, r0
 8008db8:	460b      	mov	r3, r1
 8008dba:	4640      	mov	r0, r8
 8008dbc:	4649      	mov	r1, r9
 8008dbe:	f7f7 fecb 	bl	8000b58 <__aeabi_dcmpgt>
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	d173      	bne.n	8008eae <_dtoa_r+0x6e6>
 8008dc6:	ec53 2b19 	vmov	r2, r3, d9
 8008dca:	4914      	ldr	r1, [pc, #80]	; (8008e1c <_dtoa_r+0x654>)
 8008dcc:	2000      	movs	r0, #0
 8008dce:	f7f7 fa7b 	bl	80002c8 <__aeabi_dsub>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	4640      	mov	r0, r8
 8008dd8:	4649      	mov	r1, r9
 8008dda:	f7f7 fe9f 	bl	8000b1c <__aeabi_dcmplt>
 8008dde:	2800      	cmp	r0, #0
 8008de0:	f43f af2f 	beq.w	8008c42 <_dtoa_r+0x47a>
 8008de4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008de6:	1e6b      	subs	r3, r5, #1
 8008de8:	930f      	str	r3, [sp, #60]	; 0x3c
 8008dea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008dee:	2b30      	cmp	r3, #48	; 0x30
 8008df0:	d0f8      	beq.n	8008de4 <_dtoa_r+0x61c>
 8008df2:	46bb      	mov	fp, r7
 8008df4:	e04a      	b.n	8008e8c <_dtoa_r+0x6c4>
 8008df6:	4b06      	ldr	r3, [pc, #24]	; (8008e10 <_dtoa_r+0x648>)
 8008df8:	f7f7 fc1e 	bl	8000638 <__aeabi_dmul>
 8008dfc:	4680      	mov	r8, r0
 8008dfe:	4689      	mov	r9, r1
 8008e00:	e7bd      	b.n	8008d7e <_dtoa_r+0x5b6>
 8008e02:	bf00      	nop
 8008e04:	0800a6e8 	.word	0x0800a6e8
 8008e08:	0800a6c0 	.word	0x0800a6c0
 8008e0c:	3ff00000 	.word	0x3ff00000
 8008e10:	40240000 	.word	0x40240000
 8008e14:	401c0000 	.word	0x401c0000
 8008e18:	40140000 	.word	0x40140000
 8008e1c:	3fe00000 	.word	0x3fe00000
 8008e20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008e24:	9d00      	ldr	r5, [sp, #0]
 8008e26:	4642      	mov	r2, r8
 8008e28:	464b      	mov	r3, r9
 8008e2a:	4630      	mov	r0, r6
 8008e2c:	4639      	mov	r1, r7
 8008e2e:	f7f7 fd2d 	bl	800088c <__aeabi_ddiv>
 8008e32:	f7f7 feb1 	bl	8000b98 <__aeabi_d2iz>
 8008e36:	9001      	str	r0, [sp, #4]
 8008e38:	f7f7 fb94 	bl	8000564 <__aeabi_i2d>
 8008e3c:	4642      	mov	r2, r8
 8008e3e:	464b      	mov	r3, r9
 8008e40:	f7f7 fbfa 	bl	8000638 <__aeabi_dmul>
 8008e44:	4602      	mov	r2, r0
 8008e46:	460b      	mov	r3, r1
 8008e48:	4630      	mov	r0, r6
 8008e4a:	4639      	mov	r1, r7
 8008e4c:	f7f7 fa3c 	bl	80002c8 <__aeabi_dsub>
 8008e50:	9e01      	ldr	r6, [sp, #4]
 8008e52:	9f04      	ldr	r7, [sp, #16]
 8008e54:	3630      	adds	r6, #48	; 0x30
 8008e56:	f805 6b01 	strb.w	r6, [r5], #1
 8008e5a:	9e00      	ldr	r6, [sp, #0]
 8008e5c:	1bae      	subs	r6, r5, r6
 8008e5e:	42b7      	cmp	r7, r6
 8008e60:	4602      	mov	r2, r0
 8008e62:	460b      	mov	r3, r1
 8008e64:	d134      	bne.n	8008ed0 <_dtoa_r+0x708>
 8008e66:	f7f7 fa31 	bl	80002cc <__adddf3>
 8008e6a:	4642      	mov	r2, r8
 8008e6c:	464b      	mov	r3, r9
 8008e6e:	4606      	mov	r6, r0
 8008e70:	460f      	mov	r7, r1
 8008e72:	f7f7 fe71 	bl	8000b58 <__aeabi_dcmpgt>
 8008e76:	b9c8      	cbnz	r0, 8008eac <_dtoa_r+0x6e4>
 8008e78:	4642      	mov	r2, r8
 8008e7a:	464b      	mov	r3, r9
 8008e7c:	4630      	mov	r0, r6
 8008e7e:	4639      	mov	r1, r7
 8008e80:	f7f7 fe42 	bl	8000b08 <__aeabi_dcmpeq>
 8008e84:	b110      	cbz	r0, 8008e8c <_dtoa_r+0x6c4>
 8008e86:	9b01      	ldr	r3, [sp, #4]
 8008e88:	07db      	lsls	r3, r3, #31
 8008e8a:	d40f      	bmi.n	8008eac <_dtoa_r+0x6e4>
 8008e8c:	4651      	mov	r1, sl
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f000 fc2e 	bl	80096f0 <_Bfree>
 8008e94:	2300      	movs	r3, #0
 8008e96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e98:	702b      	strb	r3, [r5, #0]
 8008e9a:	f10b 0301 	add.w	r3, fp, #1
 8008e9e:	6013      	str	r3, [r2, #0]
 8008ea0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	f43f ace2 	beq.w	800886c <_dtoa_r+0xa4>
 8008ea8:	601d      	str	r5, [r3, #0]
 8008eaa:	e4df      	b.n	800886c <_dtoa_r+0xa4>
 8008eac:	465f      	mov	r7, fp
 8008eae:	462b      	mov	r3, r5
 8008eb0:	461d      	mov	r5, r3
 8008eb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008eb6:	2a39      	cmp	r2, #57	; 0x39
 8008eb8:	d106      	bne.n	8008ec8 <_dtoa_r+0x700>
 8008eba:	9a00      	ldr	r2, [sp, #0]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d1f7      	bne.n	8008eb0 <_dtoa_r+0x6e8>
 8008ec0:	9900      	ldr	r1, [sp, #0]
 8008ec2:	2230      	movs	r2, #48	; 0x30
 8008ec4:	3701      	adds	r7, #1
 8008ec6:	700a      	strb	r2, [r1, #0]
 8008ec8:	781a      	ldrb	r2, [r3, #0]
 8008eca:	3201      	adds	r2, #1
 8008ecc:	701a      	strb	r2, [r3, #0]
 8008ece:	e790      	b.n	8008df2 <_dtoa_r+0x62a>
 8008ed0:	4ba3      	ldr	r3, [pc, #652]	; (8009160 <_dtoa_r+0x998>)
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f7f7 fbb0 	bl	8000638 <__aeabi_dmul>
 8008ed8:	2200      	movs	r2, #0
 8008eda:	2300      	movs	r3, #0
 8008edc:	4606      	mov	r6, r0
 8008ede:	460f      	mov	r7, r1
 8008ee0:	f7f7 fe12 	bl	8000b08 <__aeabi_dcmpeq>
 8008ee4:	2800      	cmp	r0, #0
 8008ee6:	d09e      	beq.n	8008e26 <_dtoa_r+0x65e>
 8008ee8:	e7d0      	b.n	8008e8c <_dtoa_r+0x6c4>
 8008eea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008eec:	2a00      	cmp	r2, #0
 8008eee:	f000 80ca 	beq.w	8009086 <_dtoa_r+0x8be>
 8008ef2:	9a07      	ldr	r2, [sp, #28]
 8008ef4:	2a01      	cmp	r2, #1
 8008ef6:	f300 80ad 	bgt.w	8009054 <_dtoa_r+0x88c>
 8008efa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008efc:	2a00      	cmp	r2, #0
 8008efe:	f000 80a5 	beq.w	800904c <_dtoa_r+0x884>
 8008f02:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008f06:	9e08      	ldr	r6, [sp, #32]
 8008f08:	9d05      	ldr	r5, [sp, #20]
 8008f0a:	9a05      	ldr	r2, [sp, #20]
 8008f0c:	441a      	add	r2, r3
 8008f0e:	9205      	str	r2, [sp, #20]
 8008f10:	9a06      	ldr	r2, [sp, #24]
 8008f12:	2101      	movs	r1, #1
 8008f14:	441a      	add	r2, r3
 8008f16:	4620      	mov	r0, r4
 8008f18:	9206      	str	r2, [sp, #24]
 8008f1a:	f000 fc9f 	bl	800985c <__i2b>
 8008f1e:	4607      	mov	r7, r0
 8008f20:	b165      	cbz	r5, 8008f3c <_dtoa_r+0x774>
 8008f22:	9b06      	ldr	r3, [sp, #24]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	dd09      	ble.n	8008f3c <_dtoa_r+0x774>
 8008f28:	42ab      	cmp	r3, r5
 8008f2a:	9a05      	ldr	r2, [sp, #20]
 8008f2c:	bfa8      	it	ge
 8008f2e:	462b      	movge	r3, r5
 8008f30:	1ad2      	subs	r2, r2, r3
 8008f32:	9205      	str	r2, [sp, #20]
 8008f34:	9a06      	ldr	r2, [sp, #24]
 8008f36:	1aed      	subs	r5, r5, r3
 8008f38:	1ad3      	subs	r3, r2, r3
 8008f3a:	9306      	str	r3, [sp, #24]
 8008f3c:	9b08      	ldr	r3, [sp, #32]
 8008f3e:	b1f3      	cbz	r3, 8008f7e <_dtoa_r+0x7b6>
 8008f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	f000 80a3 	beq.w	800908e <_dtoa_r+0x8c6>
 8008f48:	2e00      	cmp	r6, #0
 8008f4a:	dd10      	ble.n	8008f6e <_dtoa_r+0x7a6>
 8008f4c:	4639      	mov	r1, r7
 8008f4e:	4632      	mov	r2, r6
 8008f50:	4620      	mov	r0, r4
 8008f52:	f000 fd43 	bl	80099dc <__pow5mult>
 8008f56:	4652      	mov	r2, sl
 8008f58:	4601      	mov	r1, r0
 8008f5a:	4607      	mov	r7, r0
 8008f5c:	4620      	mov	r0, r4
 8008f5e:	f000 fc93 	bl	8009888 <__multiply>
 8008f62:	4651      	mov	r1, sl
 8008f64:	4680      	mov	r8, r0
 8008f66:	4620      	mov	r0, r4
 8008f68:	f000 fbc2 	bl	80096f0 <_Bfree>
 8008f6c:	46c2      	mov	sl, r8
 8008f6e:	9b08      	ldr	r3, [sp, #32]
 8008f70:	1b9a      	subs	r2, r3, r6
 8008f72:	d004      	beq.n	8008f7e <_dtoa_r+0x7b6>
 8008f74:	4651      	mov	r1, sl
 8008f76:	4620      	mov	r0, r4
 8008f78:	f000 fd30 	bl	80099dc <__pow5mult>
 8008f7c:	4682      	mov	sl, r0
 8008f7e:	2101      	movs	r1, #1
 8008f80:	4620      	mov	r0, r4
 8008f82:	f000 fc6b 	bl	800985c <__i2b>
 8008f86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	4606      	mov	r6, r0
 8008f8c:	f340 8081 	ble.w	8009092 <_dtoa_r+0x8ca>
 8008f90:	461a      	mov	r2, r3
 8008f92:	4601      	mov	r1, r0
 8008f94:	4620      	mov	r0, r4
 8008f96:	f000 fd21 	bl	80099dc <__pow5mult>
 8008f9a:	9b07      	ldr	r3, [sp, #28]
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	4606      	mov	r6, r0
 8008fa0:	dd7a      	ble.n	8009098 <_dtoa_r+0x8d0>
 8008fa2:	f04f 0800 	mov.w	r8, #0
 8008fa6:	6933      	ldr	r3, [r6, #16]
 8008fa8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008fac:	6918      	ldr	r0, [r3, #16]
 8008fae:	f000 fc07 	bl	80097c0 <__hi0bits>
 8008fb2:	f1c0 0020 	rsb	r0, r0, #32
 8008fb6:	9b06      	ldr	r3, [sp, #24]
 8008fb8:	4418      	add	r0, r3
 8008fba:	f010 001f 	ands.w	r0, r0, #31
 8008fbe:	f000 8094 	beq.w	80090ea <_dtoa_r+0x922>
 8008fc2:	f1c0 0320 	rsb	r3, r0, #32
 8008fc6:	2b04      	cmp	r3, #4
 8008fc8:	f340 8085 	ble.w	80090d6 <_dtoa_r+0x90e>
 8008fcc:	9b05      	ldr	r3, [sp, #20]
 8008fce:	f1c0 001c 	rsb	r0, r0, #28
 8008fd2:	4403      	add	r3, r0
 8008fd4:	9305      	str	r3, [sp, #20]
 8008fd6:	9b06      	ldr	r3, [sp, #24]
 8008fd8:	4403      	add	r3, r0
 8008fda:	4405      	add	r5, r0
 8008fdc:	9306      	str	r3, [sp, #24]
 8008fde:	9b05      	ldr	r3, [sp, #20]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	dd05      	ble.n	8008ff0 <_dtoa_r+0x828>
 8008fe4:	4651      	mov	r1, sl
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	4620      	mov	r0, r4
 8008fea:	f000 fd51 	bl	8009a90 <__lshift>
 8008fee:	4682      	mov	sl, r0
 8008ff0:	9b06      	ldr	r3, [sp, #24]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	dd05      	ble.n	8009002 <_dtoa_r+0x83a>
 8008ff6:	4631      	mov	r1, r6
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	f000 fd48 	bl	8009a90 <__lshift>
 8009000:	4606      	mov	r6, r0
 8009002:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009004:	2b00      	cmp	r3, #0
 8009006:	d072      	beq.n	80090ee <_dtoa_r+0x926>
 8009008:	4631      	mov	r1, r6
 800900a:	4650      	mov	r0, sl
 800900c:	f000 fdac 	bl	8009b68 <__mcmp>
 8009010:	2800      	cmp	r0, #0
 8009012:	da6c      	bge.n	80090ee <_dtoa_r+0x926>
 8009014:	2300      	movs	r3, #0
 8009016:	4651      	mov	r1, sl
 8009018:	220a      	movs	r2, #10
 800901a:	4620      	mov	r0, r4
 800901c:	f000 fb8a 	bl	8009734 <__multadd>
 8009020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009022:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009026:	4682      	mov	sl, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	f000 81b0 	beq.w	800938e <_dtoa_r+0xbc6>
 800902e:	2300      	movs	r3, #0
 8009030:	4639      	mov	r1, r7
 8009032:	220a      	movs	r2, #10
 8009034:	4620      	mov	r0, r4
 8009036:	f000 fb7d 	bl	8009734 <__multadd>
 800903a:	9b01      	ldr	r3, [sp, #4]
 800903c:	2b00      	cmp	r3, #0
 800903e:	4607      	mov	r7, r0
 8009040:	f300 8096 	bgt.w	8009170 <_dtoa_r+0x9a8>
 8009044:	9b07      	ldr	r3, [sp, #28]
 8009046:	2b02      	cmp	r3, #2
 8009048:	dc59      	bgt.n	80090fe <_dtoa_r+0x936>
 800904a:	e091      	b.n	8009170 <_dtoa_r+0x9a8>
 800904c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800904e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009052:	e758      	b.n	8008f06 <_dtoa_r+0x73e>
 8009054:	9b04      	ldr	r3, [sp, #16]
 8009056:	1e5e      	subs	r6, r3, #1
 8009058:	9b08      	ldr	r3, [sp, #32]
 800905a:	42b3      	cmp	r3, r6
 800905c:	bfbf      	itttt	lt
 800905e:	9b08      	ldrlt	r3, [sp, #32]
 8009060:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009062:	9608      	strlt	r6, [sp, #32]
 8009064:	1af3      	sublt	r3, r6, r3
 8009066:	bfb4      	ite	lt
 8009068:	18d2      	addlt	r2, r2, r3
 800906a:	1b9e      	subge	r6, r3, r6
 800906c:	9b04      	ldr	r3, [sp, #16]
 800906e:	bfbc      	itt	lt
 8009070:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009072:	2600      	movlt	r6, #0
 8009074:	2b00      	cmp	r3, #0
 8009076:	bfb7      	itett	lt
 8009078:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800907c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009080:	1a9d      	sublt	r5, r3, r2
 8009082:	2300      	movlt	r3, #0
 8009084:	e741      	b.n	8008f0a <_dtoa_r+0x742>
 8009086:	9e08      	ldr	r6, [sp, #32]
 8009088:	9d05      	ldr	r5, [sp, #20]
 800908a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800908c:	e748      	b.n	8008f20 <_dtoa_r+0x758>
 800908e:	9a08      	ldr	r2, [sp, #32]
 8009090:	e770      	b.n	8008f74 <_dtoa_r+0x7ac>
 8009092:	9b07      	ldr	r3, [sp, #28]
 8009094:	2b01      	cmp	r3, #1
 8009096:	dc19      	bgt.n	80090cc <_dtoa_r+0x904>
 8009098:	9b02      	ldr	r3, [sp, #8]
 800909a:	b9bb      	cbnz	r3, 80090cc <_dtoa_r+0x904>
 800909c:	9b03      	ldr	r3, [sp, #12]
 800909e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090a2:	b99b      	cbnz	r3, 80090cc <_dtoa_r+0x904>
 80090a4:	9b03      	ldr	r3, [sp, #12]
 80090a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80090aa:	0d1b      	lsrs	r3, r3, #20
 80090ac:	051b      	lsls	r3, r3, #20
 80090ae:	b183      	cbz	r3, 80090d2 <_dtoa_r+0x90a>
 80090b0:	9b05      	ldr	r3, [sp, #20]
 80090b2:	3301      	adds	r3, #1
 80090b4:	9305      	str	r3, [sp, #20]
 80090b6:	9b06      	ldr	r3, [sp, #24]
 80090b8:	3301      	adds	r3, #1
 80090ba:	9306      	str	r3, [sp, #24]
 80090bc:	f04f 0801 	mov.w	r8, #1
 80090c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	f47f af6f 	bne.w	8008fa6 <_dtoa_r+0x7de>
 80090c8:	2001      	movs	r0, #1
 80090ca:	e774      	b.n	8008fb6 <_dtoa_r+0x7ee>
 80090cc:	f04f 0800 	mov.w	r8, #0
 80090d0:	e7f6      	b.n	80090c0 <_dtoa_r+0x8f8>
 80090d2:	4698      	mov	r8, r3
 80090d4:	e7f4      	b.n	80090c0 <_dtoa_r+0x8f8>
 80090d6:	d082      	beq.n	8008fde <_dtoa_r+0x816>
 80090d8:	9a05      	ldr	r2, [sp, #20]
 80090da:	331c      	adds	r3, #28
 80090dc:	441a      	add	r2, r3
 80090de:	9205      	str	r2, [sp, #20]
 80090e0:	9a06      	ldr	r2, [sp, #24]
 80090e2:	441a      	add	r2, r3
 80090e4:	441d      	add	r5, r3
 80090e6:	9206      	str	r2, [sp, #24]
 80090e8:	e779      	b.n	8008fde <_dtoa_r+0x816>
 80090ea:	4603      	mov	r3, r0
 80090ec:	e7f4      	b.n	80090d8 <_dtoa_r+0x910>
 80090ee:	9b04      	ldr	r3, [sp, #16]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	dc37      	bgt.n	8009164 <_dtoa_r+0x99c>
 80090f4:	9b07      	ldr	r3, [sp, #28]
 80090f6:	2b02      	cmp	r3, #2
 80090f8:	dd34      	ble.n	8009164 <_dtoa_r+0x99c>
 80090fa:	9b04      	ldr	r3, [sp, #16]
 80090fc:	9301      	str	r3, [sp, #4]
 80090fe:	9b01      	ldr	r3, [sp, #4]
 8009100:	b963      	cbnz	r3, 800911c <_dtoa_r+0x954>
 8009102:	4631      	mov	r1, r6
 8009104:	2205      	movs	r2, #5
 8009106:	4620      	mov	r0, r4
 8009108:	f000 fb14 	bl	8009734 <__multadd>
 800910c:	4601      	mov	r1, r0
 800910e:	4606      	mov	r6, r0
 8009110:	4650      	mov	r0, sl
 8009112:	f000 fd29 	bl	8009b68 <__mcmp>
 8009116:	2800      	cmp	r0, #0
 8009118:	f73f adbb 	bgt.w	8008c92 <_dtoa_r+0x4ca>
 800911c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800911e:	9d00      	ldr	r5, [sp, #0]
 8009120:	ea6f 0b03 	mvn.w	fp, r3
 8009124:	f04f 0800 	mov.w	r8, #0
 8009128:	4631      	mov	r1, r6
 800912a:	4620      	mov	r0, r4
 800912c:	f000 fae0 	bl	80096f0 <_Bfree>
 8009130:	2f00      	cmp	r7, #0
 8009132:	f43f aeab 	beq.w	8008e8c <_dtoa_r+0x6c4>
 8009136:	f1b8 0f00 	cmp.w	r8, #0
 800913a:	d005      	beq.n	8009148 <_dtoa_r+0x980>
 800913c:	45b8      	cmp	r8, r7
 800913e:	d003      	beq.n	8009148 <_dtoa_r+0x980>
 8009140:	4641      	mov	r1, r8
 8009142:	4620      	mov	r0, r4
 8009144:	f000 fad4 	bl	80096f0 <_Bfree>
 8009148:	4639      	mov	r1, r7
 800914a:	4620      	mov	r0, r4
 800914c:	f000 fad0 	bl	80096f0 <_Bfree>
 8009150:	e69c      	b.n	8008e8c <_dtoa_r+0x6c4>
 8009152:	2600      	movs	r6, #0
 8009154:	4637      	mov	r7, r6
 8009156:	e7e1      	b.n	800911c <_dtoa_r+0x954>
 8009158:	46bb      	mov	fp, r7
 800915a:	4637      	mov	r7, r6
 800915c:	e599      	b.n	8008c92 <_dtoa_r+0x4ca>
 800915e:	bf00      	nop
 8009160:	40240000 	.word	0x40240000
 8009164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009166:	2b00      	cmp	r3, #0
 8009168:	f000 80c8 	beq.w	80092fc <_dtoa_r+0xb34>
 800916c:	9b04      	ldr	r3, [sp, #16]
 800916e:	9301      	str	r3, [sp, #4]
 8009170:	2d00      	cmp	r5, #0
 8009172:	dd05      	ble.n	8009180 <_dtoa_r+0x9b8>
 8009174:	4639      	mov	r1, r7
 8009176:	462a      	mov	r2, r5
 8009178:	4620      	mov	r0, r4
 800917a:	f000 fc89 	bl	8009a90 <__lshift>
 800917e:	4607      	mov	r7, r0
 8009180:	f1b8 0f00 	cmp.w	r8, #0
 8009184:	d05b      	beq.n	800923e <_dtoa_r+0xa76>
 8009186:	6879      	ldr	r1, [r7, #4]
 8009188:	4620      	mov	r0, r4
 800918a:	f000 fa71 	bl	8009670 <_Balloc>
 800918e:	4605      	mov	r5, r0
 8009190:	b928      	cbnz	r0, 800919e <_dtoa_r+0x9d6>
 8009192:	4b83      	ldr	r3, [pc, #524]	; (80093a0 <_dtoa_r+0xbd8>)
 8009194:	4602      	mov	r2, r0
 8009196:	f240 21ef 	movw	r1, #751	; 0x2ef
 800919a:	f7ff bb2e 	b.w	80087fa <_dtoa_r+0x32>
 800919e:	693a      	ldr	r2, [r7, #16]
 80091a0:	3202      	adds	r2, #2
 80091a2:	0092      	lsls	r2, r2, #2
 80091a4:	f107 010c 	add.w	r1, r7, #12
 80091a8:	300c      	adds	r0, #12
 80091aa:	f000 fe77 	bl	8009e9c <memcpy>
 80091ae:	2201      	movs	r2, #1
 80091b0:	4629      	mov	r1, r5
 80091b2:	4620      	mov	r0, r4
 80091b4:	f000 fc6c 	bl	8009a90 <__lshift>
 80091b8:	9b00      	ldr	r3, [sp, #0]
 80091ba:	3301      	adds	r3, #1
 80091bc:	9304      	str	r3, [sp, #16]
 80091be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091c2:	4413      	add	r3, r2
 80091c4:	9308      	str	r3, [sp, #32]
 80091c6:	9b02      	ldr	r3, [sp, #8]
 80091c8:	f003 0301 	and.w	r3, r3, #1
 80091cc:	46b8      	mov	r8, r7
 80091ce:	9306      	str	r3, [sp, #24]
 80091d0:	4607      	mov	r7, r0
 80091d2:	9b04      	ldr	r3, [sp, #16]
 80091d4:	4631      	mov	r1, r6
 80091d6:	3b01      	subs	r3, #1
 80091d8:	4650      	mov	r0, sl
 80091da:	9301      	str	r3, [sp, #4]
 80091dc:	f7ff fa69 	bl	80086b2 <quorem>
 80091e0:	4641      	mov	r1, r8
 80091e2:	9002      	str	r0, [sp, #8]
 80091e4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80091e8:	4650      	mov	r0, sl
 80091ea:	f000 fcbd 	bl	8009b68 <__mcmp>
 80091ee:	463a      	mov	r2, r7
 80091f0:	9005      	str	r0, [sp, #20]
 80091f2:	4631      	mov	r1, r6
 80091f4:	4620      	mov	r0, r4
 80091f6:	f000 fcd3 	bl	8009ba0 <__mdiff>
 80091fa:	68c2      	ldr	r2, [r0, #12]
 80091fc:	4605      	mov	r5, r0
 80091fe:	bb02      	cbnz	r2, 8009242 <_dtoa_r+0xa7a>
 8009200:	4601      	mov	r1, r0
 8009202:	4650      	mov	r0, sl
 8009204:	f000 fcb0 	bl	8009b68 <__mcmp>
 8009208:	4602      	mov	r2, r0
 800920a:	4629      	mov	r1, r5
 800920c:	4620      	mov	r0, r4
 800920e:	9209      	str	r2, [sp, #36]	; 0x24
 8009210:	f000 fa6e 	bl	80096f0 <_Bfree>
 8009214:	9b07      	ldr	r3, [sp, #28]
 8009216:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009218:	9d04      	ldr	r5, [sp, #16]
 800921a:	ea43 0102 	orr.w	r1, r3, r2
 800921e:	9b06      	ldr	r3, [sp, #24]
 8009220:	4319      	orrs	r1, r3
 8009222:	d110      	bne.n	8009246 <_dtoa_r+0xa7e>
 8009224:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009228:	d029      	beq.n	800927e <_dtoa_r+0xab6>
 800922a:	9b05      	ldr	r3, [sp, #20]
 800922c:	2b00      	cmp	r3, #0
 800922e:	dd02      	ble.n	8009236 <_dtoa_r+0xa6e>
 8009230:	9b02      	ldr	r3, [sp, #8]
 8009232:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009236:	9b01      	ldr	r3, [sp, #4]
 8009238:	f883 9000 	strb.w	r9, [r3]
 800923c:	e774      	b.n	8009128 <_dtoa_r+0x960>
 800923e:	4638      	mov	r0, r7
 8009240:	e7ba      	b.n	80091b8 <_dtoa_r+0x9f0>
 8009242:	2201      	movs	r2, #1
 8009244:	e7e1      	b.n	800920a <_dtoa_r+0xa42>
 8009246:	9b05      	ldr	r3, [sp, #20]
 8009248:	2b00      	cmp	r3, #0
 800924a:	db04      	blt.n	8009256 <_dtoa_r+0xa8e>
 800924c:	9907      	ldr	r1, [sp, #28]
 800924e:	430b      	orrs	r3, r1
 8009250:	9906      	ldr	r1, [sp, #24]
 8009252:	430b      	orrs	r3, r1
 8009254:	d120      	bne.n	8009298 <_dtoa_r+0xad0>
 8009256:	2a00      	cmp	r2, #0
 8009258:	dded      	ble.n	8009236 <_dtoa_r+0xa6e>
 800925a:	4651      	mov	r1, sl
 800925c:	2201      	movs	r2, #1
 800925e:	4620      	mov	r0, r4
 8009260:	f000 fc16 	bl	8009a90 <__lshift>
 8009264:	4631      	mov	r1, r6
 8009266:	4682      	mov	sl, r0
 8009268:	f000 fc7e 	bl	8009b68 <__mcmp>
 800926c:	2800      	cmp	r0, #0
 800926e:	dc03      	bgt.n	8009278 <_dtoa_r+0xab0>
 8009270:	d1e1      	bne.n	8009236 <_dtoa_r+0xa6e>
 8009272:	f019 0f01 	tst.w	r9, #1
 8009276:	d0de      	beq.n	8009236 <_dtoa_r+0xa6e>
 8009278:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800927c:	d1d8      	bne.n	8009230 <_dtoa_r+0xa68>
 800927e:	9a01      	ldr	r2, [sp, #4]
 8009280:	2339      	movs	r3, #57	; 0x39
 8009282:	7013      	strb	r3, [r2, #0]
 8009284:	462b      	mov	r3, r5
 8009286:	461d      	mov	r5, r3
 8009288:	3b01      	subs	r3, #1
 800928a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800928e:	2a39      	cmp	r2, #57	; 0x39
 8009290:	d06c      	beq.n	800936c <_dtoa_r+0xba4>
 8009292:	3201      	adds	r2, #1
 8009294:	701a      	strb	r2, [r3, #0]
 8009296:	e747      	b.n	8009128 <_dtoa_r+0x960>
 8009298:	2a00      	cmp	r2, #0
 800929a:	dd07      	ble.n	80092ac <_dtoa_r+0xae4>
 800929c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80092a0:	d0ed      	beq.n	800927e <_dtoa_r+0xab6>
 80092a2:	9a01      	ldr	r2, [sp, #4]
 80092a4:	f109 0301 	add.w	r3, r9, #1
 80092a8:	7013      	strb	r3, [r2, #0]
 80092aa:	e73d      	b.n	8009128 <_dtoa_r+0x960>
 80092ac:	9b04      	ldr	r3, [sp, #16]
 80092ae:	9a08      	ldr	r2, [sp, #32]
 80092b0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d043      	beq.n	8009340 <_dtoa_r+0xb78>
 80092b8:	4651      	mov	r1, sl
 80092ba:	2300      	movs	r3, #0
 80092bc:	220a      	movs	r2, #10
 80092be:	4620      	mov	r0, r4
 80092c0:	f000 fa38 	bl	8009734 <__multadd>
 80092c4:	45b8      	cmp	r8, r7
 80092c6:	4682      	mov	sl, r0
 80092c8:	f04f 0300 	mov.w	r3, #0
 80092cc:	f04f 020a 	mov.w	r2, #10
 80092d0:	4641      	mov	r1, r8
 80092d2:	4620      	mov	r0, r4
 80092d4:	d107      	bne.n	80092e6 <_dtoa_r+0xb1e>
 80092d6:	f000 fa2d 	bl	8009734 <__multadd>
 80092da:	4680      	mov	r8, r0
 80092dc:	4607      	mov	r7, r0
 80092de:	9b04      	ldr	r3, [sp, #16]
 80092e0:	3301      	adds	r3, #1
 80092e2:	9304      	str	r3, [sp, #16]
 80092e4:	e775      	b.n	80091d2 <_dtoa_r+0xa0a>
 80092e6:	f000 fa25 	bl	8009734 <__multadd>
 80092ea:	4639      	mov	r1, r7
 80092ec:	4680      	mov	r8, r0
 80092ee:	2300      	movs	r3, #0
 80092f0:	220a      	movs	r2, #10
 80092f2:	4620      	mov	r0, r4
 80092f4:	f000 fa1e 	bl	8009734 <__multadd>
 80092f8:	4607      	mov	r7, r0
 80092fa:	e7f0      	b.n	80092de <_dtoa_r+0xb16>
 80092fc:	9b04      	ldr	r3, [sp, #16]
 80092fe:	9301      	str	r3, [sp, #4]
 8009300:	9d00      	ldr	r5, [sp, #0]
 8009302:	4631      	mov	r1, r6
 8009304:	4650      	mov	r0, sl
 8009306:	f7ff f9d4 	bl	80086b2 <quorem>
 800930a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800930e:	9b00      	ldr	r3, [sp, #0]
 8009310:	f805 9b01 	strb.w	r9, [r5], #1
 8009314:	1aea      	subs	r2, r5, r3
 8009316:	9b01      	ldr	r3, [sp, #4]
 8009318:	4293      	cmp	r3, r2
 800931a:	dd07      	ble.n	800932c <_dtoa_r+0xb64>
 800931c:	4651      	mov	r1, sl
 800931e:	2300      	movs	r3, #0
 8009320:	220a      	movs	r2, #10
 8009322:	4620      	mov	r0, r4
 8009324:	f000 fa06 	bl	8009734 <__multadd>
 8009328:	4682      	mov	sl, r0
 800932a:	e7ea      	b.n	8009302 <_dtoa_r+0xb3a>
 800932c:	9b01      	ldr	r3, [sp, #4]
 800932e:	2b00      	cmp	r3, #0
 8009330:	bfc8      	it	gt
 8009332:	461d      	movgt	r5, r3
 8009334:	9b00      	ldr	r3, [sp, #0]
 8009336:	bfd8      	it	le
 8009338:	2501      	movle	r5, #1
 800933a:	441d      	add	r5, r3
 800933c:	f04f 0800 	mov.w	r8, #0
 8009340:	4651      	mov	r1, sl
 8009342:	2201      	movs	r2, #1
 8009344:	4620      	mov	r0, r4
 8009346:	f000 fba3 	bl	8009a90 <__lshift>
 800934a:	4631      	mov	r1, r6
 800934c:	4682      	mov	sl, r0
 800934e:	f000 fc0b 	bl	8009b68 <__mcmp>
 8009352:	2800      	cmp	r0, #0
 8009354:	dc96      	bgt.n	8009284 <_dtoa_r+0xabc>
 8009356:	d102      	bne.n	800935e <_dtoa_r+0xb96>
 8009358:	f019 0f01 	tst.w	r9, #1
 800935c:	d192      	bne.n	8009284 <_dtoa_r+0xabc>
 800935e:	462b      	mov	r3, r5
 8009360:	461d      	mov	r5, r3
 8009362:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009366:	2a30      	cmp	r2, #48	; 0x30
 8009368:	d0fa      	beq.n	8009360 <_dtoa_r+0xb98>
 800936a:	e6dd      	b.n	8009128 <_dtoa_r+0x960>
 800936c:	9a00      	ldr	r2, [sp, #0]
 800936e:	429a      	cmp	r2, r3
 8009370:	d189      	bne.n	8009286 <_dtoa_r+0xabe>
 8009372:	f10b 0b01 	add.w	fp, fp, #1
 8009376:	2331      	movs	r3, #49	; 0x31
 8009378:	e796      	b.n	80092a8 <_dtoa_r+0xae0>
 800937a:	4b0a      	ldr	r3, [pc, #40]	; (80093a4 <_dtoa_r+0xbdc>)
 800937c:	f7ff ba99 	b.w	80088b2 <_dtoa_r+0xea>
 8009380:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009382:	2b00      	cmp	r3, #0
 8009384:	f47f aa6d 	bne.w	8008862 <_dtoa_r+0x9a>
 8009388:	4b07      	ldr	r3, [pc, #28]	; (80093a8 <_dtoa_r+0xbe0>)
 800938a:	f7ff ba92 	b.w	80088b2 <_dtoa_r+0xea>
 800938e:	9b01      	ldr	r3, [sp, #4]
 8009390:	2b00      	cmp	r3, #0
 8009392:	dcb5      	bgt.n	8009300 <_dtoa_r+0xb38>
 8009394:	9b07      	ldr	r3, [sp, #28]
 8009396:	2b02      	cmp	r3, #2
 8009398:	f73f aeb1 	bgt.w	80090fe <_dtoa_r+0x936>
 800939c:	e7b0      	b.n	8009300 <_dtoa_r+0xb38>
 800939e:	bf00      	nop
 80093a0:	0800a650 	.word	0x0800a650
 80093a4:	0800a5b0 	.word	0x0800a5b0
 80093a8:	0800a5d4 	.word	0x0800a5d4

080093ac <malloc>:
 80093ac:	4b02      	ldr	r3, [pc, #8]	; (80093b8 <malloc+0xc>)
 80093ae:	4601      	mov	r1, r0
 80093b0:	6818      	ldr	r0, [r3, #0]
 80093b2:	f000 b823 	b.w	80093fc <_malloc_r>
 80093b6:	bf00      	nop
 80093b8:	2000008c 	.word	0x2000008c

080093bc <sbrk_aligned>:
 80093bc:	b570      	push	{r4, r5, r6, lr}
 80093be:	4e0e      	ldr	r6, [pc, #56]	; (80093f8 <sbrk_aligned+0x3c>)
 80093c0:	460c      	mov	r4, r1
 80093c2:	6831      	ldr	r1, [r6, #0]
 80093c4:	4605      	mov	r5, r0
 80093c6:	b911      	cbnz	r1, 80093ce <sbrk_aligned+0x12>
 80093c8:	f000 fd46 	bl	8009e58 <_sbrk_r>
 80093cc:	6030      	str	r0, [r6, #0]
 80093ce:	4621      	mov	r1, r4
 80093d0:	4628      	mov	r0, r5
 80093d2:	f000 fd41 	bl	8009e58 <_sbrk_r>
 80093d6:	1c43      	adds	r3, r0, #1
 80093d8:	d00a      	beq.n	80093f0 <sbrk_aligned+0x34>
 80093da:	1cc4      	adds	r4, r0, #3
 80093dc:	f024 0403 	bic.w	r4, r4, #3
 80093e0:	42a0      	cmp	r0, r4
 80093e2:	d007      	beq.n	80093f4 <sbrk_aligned+0x38>
 80093e4:	1a21      	subs	r1, r4, r0
 80093e6:	4628      	mov	r0, r5
 80093e8:	f000 fd36 	bl	8009e58 <_sbrk_r>
 80093ec:	3001      	adds	r0, #1
 80093ee:	d101      	bne.n	80093f4 <sbrk_aligned+0x38>
 80093f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80093f4:	4620      	mov	r0, r4
 80093f6:	bd70      	pop	{r4, r5, r6, pc}
 80093f8:	20000730 	.word	0x20000730

080093fc <_malloc_r>:
 80093fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009400:	1ccd      	adds	r5, r1, #3
 8009402:	f025 0503 	bic.w	r5, r5, #3
 8009406:	3508      	adds	r5, #8
 8009408:	2d0c      	cmp	r5, #12
 800940a:	bf38      	it	cc
 800940c:	250c      	movcc	r5, #12
 800940e:	2d00      	cmp	r5, #0
 8009410:	4607      	mov	r7, r0
 8009412:	db01      	blt.n	8009418 <_malloc_r+0x1c>
 8009414:	42a9      	cmp	r1, r5
 8009416:	d905      	bls.n	8009424 <_malloc_r+0x28>
 8009418:	230c      	movs	r3, #12
 800941a:	603b      	str	r3, [r7, #0]
 800941c:	2600      	movs	r6, #0
 800941e:	4630      	mov	r0, r6
 8009420:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009424:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80094f8 <_malloc_r+0xfc>
 8009428:	f000 f916 	bl	8009658 <__malloc_lock>
 800942c:	f8d8 3000 	ldr.w	r3, [r8]
 8009430:	461c      	mov	r4, r3
 8009432:	bb5c      	cbnz	r4, 800948c <_malloc_r+0x90>
 8009434:	4629      	mov	r1, r5
 8009436:	4638      	mov	r0, r7
 8009438:	f7ff ffc0 	bl	80093bc <sbrk_aligned>
 800943c:	1c43      	adds	r3, r0, #1
 800943e:	4604      	mov	r4, r0
 8009440:	d155      	bne.n	80094ee <_malloc_r+0xf2>
 8009442:	f8d8 4000 	ldr.w	r4, [r8]
 8009446:	4626      	mov	r6, r4
 8009448:	2e00      	cmp	r6, #0
 800944a:	d145      	bne.n	80094d8 <_malloc_r+0xdc>
 800944c:	2c00      	cmp	r4, #0
 800944e:	d048      	beq.n	80094e2 <_malloc_r+0xe6>
 8009450:	6823      	ldr	r3, [r4, #0]
 8009452:	4631      	mov	r1, r6
 8009454:	4638      	mov	r0, r7
 8009456:	eb04 0903 	add.w	r9, r4, r3
 800945a:	f000 fcfd 	bl	8009e58 <_sbrk_r>
 800945e:	4581      	cmp	r9, r0
 8009460:	d13f      	bne.n	80094e2 <_malloc_r+0xe6>
 8009462:	6821      	ldr	r1, [r4, #0]
 8009464:	1a6d      	subs	r5, r5, r1
 8009466:	4629      	mov	r1, r5
 8009468:	4638      	mov	r0, r7
 800946a:	f7ff ffa7 	bl	80093bc <sbrk_aligned>
 800946e:	3001      	adds	r0, #1
 8009470:	d037      	beq.n	80094e2 <_malloc_r+0xe6>
 8009472:	6823      	ldr	r3, [r4, #0]
 8009474:	442b      	add	r3, r5
 8009476:	6023      	str	r3, [r4, #0]
 8009478:	f8d8 3000 	ldr.w	r3, [r8]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d038      	beq.n	80094f2 <_malloc_r+0xf6>
 8009480:	685a      	ldr	r2, [r3, #4]
 8009482:	42a2      	cmp	r2, r4
 8009484:	d12b      	bne.n	80094de <_malloc_r+0xe2>
 8009486:	2200      	movs	r2, #0
 8009488:	605a      	str	r2, [r3, #4]
 800948a:	e00f      	b.n	80094ac <_malloc_r+0xb0>
 800948c:	6822      	ldr	r2, [r4, #0]
 800948e:	1b52      	subs	r2, r2, r5
 8009490:	d41f      	bmi.n	80094d2 <_malloc_r+0xd6>
 8009492:	2a0b      	cmp	r2, #11
 8009494:	d917      	bls.n	80094c6 <_malloc_r+0xca>
 8009496:	1961      	adds	r1, r4, r5
 8009498:	42a3      	cmp	r3, r4
 800949a:	6025      	str	r5, [r4, #0]
 800949c:	bf18      	it	ne
 800949e:	6059      	strne	r1, [r3, #4]
 80094a0:	6863      	ldr	r3, [r4, #4]
 80094a2:	bf08      	it	eq
 80094a4:	f8c8 1000 	streq.w	r1, [r8]
 80094a8:	5162      	str	r2, [r4, r5]
 80094aa:	604b      	str	r3, [r1, #4]
 80094ac:	4638      	mov	r0, r7
 80094ae:	f104 060b 	add.w	r6, r4, #11
 80094b2:	f000 f8d7 	bl	8009664 <__malloc_unlock>
 80094b6:	f026 0607 	bic.w	r6, r6, #7
 80094ba:	1d23      	adds	r3, r4, #4
 80094bc:	1af2      	subs	r2, r6, r3
 80094be:	d0ae      	beq.n	800941e <_malloc_r+0x22>
 80094c0:	1b9b      	subs	r3, r3, r6
 80094c2:	50a3      	str	r3, [r4, r2]
 80094c4:	e7ab      	b.n	800941e <_malloc_r+0x22>
 80094c6:	42a3      	cmp	r3, r4
 80094c8:	6862      	ldr	r2, [r4, #4]
 80094ca:	d1dd      	bne.n	8009488 <_malloc_r+0x8c>
 80094cc:	f8c8 2000 	str.w	r2, [r8]
 80094d0:	e7ec      	b.n	80094ac <_malloc_r+0xb0>
 80094d2:	4623      	mov	r3, r4
 80094d4:	6864      	ldr	r4, [r4, #4]
 80094d6:	e7ac      	b.n	8009432 <_malloc_r+0x36>
 80094d8:	4634      	mov	r4, r6
 80094da:	6876      	ldr	r6, [r6, #4]
 80094dc:	e7b4      	b.n	8009448 <_malloc_r+0x4c>
 80094de:	4613      	mov	r3, r2
 80094e0:	e7cc      	b.n	800947c <_malloc_r+0x80>
 80094e2:	230c      	movs	r3, #12
 80094e4:	603b      	str	r3, [r7, #0]
 80094e6:	4638      	mov	r0, r7
 80094e8:	f000 f8bc 	bl	8009664 <__malloc_unlock>
 80094ec:	e797      	b.n	800941e <_malloc_r+0x22>
 80094ee:	6025      	str	r5, [r4, #0]
 80094f0:	e7dc      	b.n	80094ac <_malloc_r+0xb0>
 80094f2:	605b      	str	r3, [r3, #4]
 80094f4:	deff      	udf	#255	; 0xff
 80094f6:	bf00      	nop
 80094f8:	2000072c 	.word	0x2000072c

080094fc <__sflush_r>:
 80094fc:	898a      	ldrh	r2, [r1, #12]
 80094fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009502:	4605      	mov	r5, r0
 8009504:	0710      	lsls	r0, r2, #28
 8009506:	460c      	mov	r4, r1
 8009508:	d458      	bmi.n	80095bc <__sflush_r+0xc0>
 800950a:	684b      	ldr	r3, [r1, #4]
 800950c:	2b00      	cmp	r3, #0
 800950e:	dc05      	bgt.n	800951c <__sflush_r+0x20>
 8009510:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009512:	2b00      	cmp	r3, #0
 8009514:	dc02      	bgt.n	800951c <__sflush_r+0x20>
 8009516:	2000      	movs	r0, #0
 8009518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800951c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800951e:	2e00      	cmp	r6, #0
 8009520:	d0f9      	beq.n	8009516 <__sflush_r+0x1a>
 8009522:	2300      	movs	r3, #0
 8009524:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009528:	682f      	ldr	r7, [r5, #0]
 800952a:	6a21      	ldr	r1, [r4, #32]
 800952c:	602b      	str	r3, [r5, #0]
 800952e:	d032      	beq.n	8009596 <__sflush_r+0x9a>
 8009530:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009532:	89a3      	ldrh	r3, [r4, #12]
 8009534:	075a      	lsls	r2, r3, #29
 8009536:	d505      	bpl.n	8009544 <__sflush_r+0x48>
 8009538:	6863      	ldr	r3, [r4, #4]
 800953a:	1ac0      	subs	r0, r0, r3
 800953c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800953e:	b10b      	cbz	r3, 8009544 <__sflush_r+0x48>
 8009540:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009542:	1ac0      	subs	r0, r0, r3
 8009544:	2300      	movs	r3, #0
 8009546:	4602      	mov	r2, r0
 8009548:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800954a:	6a21      	ldr	r1, [r4, #32]
 800954c:	4628      	mov	r0, r5
 800954e:	47b0      	blx	r6
 8009550:	1c43      	adds	r3, r0, #1
 8009552:	89a3      	ldrh	r3, [r4, #12]
 8009554:	d106      	bne.n	8009564 <__sflush_r+0x68>
 8009556:	6829      	ldr	r1, [r5, #0]
 8009558:	291d      	cmp	r1, #29
 800955a:	d82b      	bhi.n	80095b4 <__sflush_r+0xb8>
 800955c:	4a29      	ldr	r2, [pc, #164]	; (8009604 <__sflush_r+0x108>)
 800955e:	410a      	asrs	r2, r1
 8009560:	07d6      	lsls	r6, r2, #31
 8009562:	d427      	bmi.n	80095b4 <__sflush_r+0xb8>
 8009564:	2200      	movs	r2, #0
 8009566:	6062      	str	r2, [r4, #4]
 8009568:	04d9      	lsls	r1, r3, #19
 800956a:	6922      	ldr	r2, [r4, #16]
 800956c:	6022      	str	r2, [r4, #0]
 800956e:	d504      	bpl.n	800957a <__sflush_r+0x7e>
 8009570:	1c42      	adds	r2, r0, #1
 8009572:	d101      	bne.n	8009578 <__sflush_r+0x7c>
 8009574:	682b      	ldr	r3, [r5, #0]
 8009576:	b903      	cbnz	r3, 800957a <__sflush_r+0x7e>
 8009578:	6560      	str	r0, [r4, #84]	; 0x54
 800957a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800957c:	602f      	str	r7, [r5, #0]
 800957e:	2900      	cmp	r1, #0
 8009580:	d0c9      	beq.n	8009516 <__sflush_r+0x1a>
 8009582:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009586:	4299      	cmp	r1, r3
 8009588:	d002      	beq.n	8009590 <__sflush_r+0x94>
 800958a:	4628      	mov	r0, r5
 800958c:	f000 fcc8 	bl	8009f20 <_free_r>
 8009590:	2000      	movs	r0, #0
 8009592:	6360      	str	r0, [r4, #52]	; 0x34
 8009594:	e7c0      	b.n	8009518 <__sflush_r+0x1c>
 8009596:	2301      	movs	r3, #1
 8009598:	4628      	mov	r0, r5
 800959a:	47b0      	blx	r6
 800959c:	1c41      	adds	r1, r0, #1
 800959e:	d1c8      	bne.n	8009532 <__sflush_r+0x36>
 80095a0:	682b      	ldr	r3, [r5, #0]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d0c5      	beq.n	8009532 <__sflush_r+0x36>
 80095a6:	2b1d      	cmp	r3, #29
 80095a8:	d001      	beq.n	80095ae <__sflush_r+0xb2>
 80095aa:	2b16      	cmp	r3, #22
 80095ac:	d101      	bne.n	80095b2 <__sflush_r+0xb6>
 80095ae:	602f      	str	r7, [r5, #0]
 80095b0:	e7b1      	b.n	8009516 <__sflush_r+0x1a>
 80095b2:	89a3      	ldrh	r3, [r4, #12]
 80095b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095b8:	81a3      	strh	r3, [r4, #12]
 80095ba:	e7ad      	b.n	8009518 <__sflush_r+0x1c>
 80095bc:	690f      	ldr	r7, [r1, #16]
 80095be:	2f00      	cmp	r7, #0
 80095c0:	d0a9      	beq.n	8009516 <__sflush_r+0x1a>
 80095c2:	0793      	lsls	r3, r2, #30
 80095c4:	680e      	ldr	r6, [r1, #0]
 80095c6:	bf08      	it	eq
 80095c8:	694b      	ldreq	r3, [r1, #20]
 80095ca:	600f      	str	r7, [r1, #0]
 80095cc:	bf18      	it	ne
 80095ce:	2300      	movne	r3, #0
 80095d0:	eba6 0807 	sub.w	r8, r6, r7
 80095d4:	608b      	str	r3, [r1, #8]
 80095d6:	f1b8 0f00 	cmp.w	r8, #0
 80095da:	dd9c      	ble.n	8009516 <__sflush_r+0x1a>
 80095dc:	6a21      	ldr	r1, [r4, #32]
 80095de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80095e0:	4643      	mov	r3, r8
 80095e2:	463a      	mov	r2, r7
 80095e4:	4628      	mov	r0, r5
 80095e6:	47b0      	blx	r6
 80095e8:	2800      	cmp	r0, #0
 80095ea:	dc06      	bgt.n	80095fa <__sflush_r+0xfe>
 80095ec:	89a3      	ldrh	r3, [r4, #12]
 80095ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095f2:	81a3      	strh	r3, [r4, #12]
 80095f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095f8:	e78e      	b.n	8009518 <__sflush_r+0x1c>
 80095fa:	4407      	add	r7, r0
 80095fc:	eba8 0800 	sub.w	r8, r8, r0
 8009600:	e7e9      	b.n	80095d6 <__sflush_r+0xda>
 8009602:	bf00      	nop
 8009604:	dfbffffe 	.word	0xdfbffffe

08009608 <_fflush_r>:
 8009608:	b538      	push	{r3, r4, r5, lr}
 800960a:	690b      	ldr	r3, [r1, #16]
 800960c:	4605      	mov	r5, r0
 800960e:	460c      	mov	r4, r1
 8009610:	b913      	cbnz	r3, 8009618 <_fflush_r+0x10>
 8009612:	2500      	movs	r5, #0
 8009614:	4628      	mov	r0, r5
 8009616:	bd38      	pop	{r3, r4, r5, pc}
 8009618:	b118      	cbz	r0, 8009622 <_fflush_r+0x1a>
 800961a:	6a03      	ldr	r3, [r0, #32]
 800961c:	b90b      	cbnz	r3, 8009622 <_fflush_r+0x1a>
 800961e:	f7fe ffd9 	bl	80085d4 <__sinit>
 8009622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d0f3      	beq.n	8009612 <_fflush_r+0xa>
 800962a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800962c:	07d0      	lsls	r0, r2, #31
 800962e:	d404      	bmi.n	800963a <_fflush_r+0x32>
 8009630:	0599      	lsls	r1, r3, #22
 8009632:	d402      	bmi.n	800963a <_fflush_r+0x32>
 8009634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009636:	f7ff f83a 	bl	80086ae <__retarget_lock_acquire_recursive>
 800963a:	4628      	mov	r0, r5
 800963c:	4621      	mov	r1, r4
 800963e:	f7ff ff5d 	bl	80094fc <__sflush_r>
 8009642:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009644:	07da      	lsls	r2, r3, #31
 8009646:	4605      	mov	r5, r0
 8009648:	d4e4      	bmi.n	8009614 <_fflush_r+0xc>
 800964a:	89a3      	ldrh	r3, [r4, #12]
 800964c:	059b      	lsls	r3, r3, #22
 800964e:	d4e1      	bmi.n	8009614 <_fflush_r+0xc>
 8009650:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009652:	f7ff f82d 	bl	80086b0 <__retarget_lock_release_recursive>
 8009656:	e7dd      	b.n	8009614 <_fflush_r+0xc>

08009658 <__malloc_lock>:
 8009658:	4801      	ldr	r0, [pc, #4]	; (8009660 <__malloc_lock+0x8>)
 800965a:	f7ff b828 	b.w	80086ae <__retarget_lock_acquire_recursive>
 800965e:	bf00      	nop
 8009660:	20000728 	.word	0x20000728

08009664 <__malloc_unlock>:
 8009664:	4801      	ldr	r0, [pc, #4]	; (800966c <__malloc_unlock+0x8>)
 8009666:	f7ff b823 	b.w	80086b0 <__retarget_lock_release_recursive>
 800966a:	bf00      	nop
 800966c:	20000728 	.word	0x20000728

08009670 <_Balloc>:
 8009670:	b570      	push	{r4, r5, r6, lr}
 8009672:	69c6      	ldr	r6, [r0, #28]
 8009674:	4604      	mov	r4, r0
 8009676:	460d      	mov	r5, r1
 8009678:	b976      	cbnz	r6, 8009698 <_Balloc+0x28>
 800967a:	2010      	movs	r0, #16
 800967c:	f7ff fe96 	bl	80093ac <malloc>
 8009680:	4602      	mov	r2, r0
 8009682:	61e0      	str	r0, [r4, #28]
 8009684:	b920      	cbnz	r0, 8009690 <_Balloc+0x20>
 8009686:	4b18      	ldr	r3, [pc, #96]	; (80096e8 <_Balloc+0x78>)
 8009688:	4818      	ldr	r0, [pc, #96]	; (80096ec <_Balloc+0x7c>)
 800968a:	216b      	movs	r1, #107	; 0x6b
 800968c:	f000 fc14 	bl	8009eb8 <__assert_func>
 8009690:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009694:	6006      	str	r6, [r0, #0]
 8009696:	60c6      	str	r6, [r0, #12]
 8009698:	69e6      	ldr	r6, [r4, #28]
 800969a:	68f3      	ldr	r3, [r6, #12]
 800969c:	b183      	cbz	r3, 80096c0 <_Balloc+0x50>
 800969e:	69e3      	ldr	r3, [r4, #28]
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80096a6:	b9b8      	cbnz	r0, 80096d8 <_Balloc+0x68>
 80096a8:	2101      	movs	r1, #1
 80096aa:	fa01 f605 	lsl.w	r6, r1, r5
 80096ae:	1d72      	adds	r2, r6, #5
 80096b0:	0092      	lsls	r2, r2, #2
 80096b2:	4620      	mov	r0, r4
 80096b4:	f000 fc1e 	bl	8009ef4 <_calloc_r>
 80096b8:	b160      	cbz	r0, 80096d4 <_Balloc+0x64>
 80096ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80096be:	e00e      	b.n	80096de <_Balloc+0x6e>
 80096c0:	2221      	movs	r2, #33	; 0x21
 80096c2:	2104      	movs	r1, #4
 80096c4:	4620      	mov	r0, r4
 80096c6:	f000 fc15 	bl	8009ef4 <_calloc_r>
 80096ca:	69e3      	ldr	r3, [r4, #28]
 80096cc:	60f0      	str	r0, [r6, #12]
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1e4      	bne.n	800969e <_Balloc+0x2e>
 80096d4:	2000      	movs	r0, #0
 80096d6:	bd70      	pop	{r4, r5, r6, pc}
 80096d8:	6802      	ldr	r2, [r0, #0]
 80096da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80096de:	2300      	movs	r3, #0
 80096e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80096e4:	e7f7      	b.n	80096d6 <_Balloc+0x66>
 80096e6:	bf00      	nop
 80096e8:	0800a5e1 	.word	0x0800a5e1
 80096ec:	0800a661 	.word	0x0800a661

080096f0 <_Bfree>:
 80096f0:	b570      	push	{r4, r5, r6, lr}
 80096f2:	69c6      	ldr	r6, [r0, #28]
 80096f4:	4605      	mov	r5, r0
 80096f6:	460c      	mov	r4, r1
 80096f8:	b976      	cbnz	r6, 8009718 <_Bfree+0x28>
 80096fa:	2010      	movs	r0, #16
 80096fc:	f7ff fe56 	bl	80093ac <malloc>
 8009700:	4602      	mov	r2, r0
 8009702:	61e8      	str	r0, [r5, #28]
 8009704:	b920      	cbnz	r0, 8009710 <_Bfree+0x20>
 8009706:	4b09      	ldr	r3, [pc, #36]	; (800972c <_Bfree+0x3c>)
 8009708:	4809      	ldr	r0, [pc, #36]	; (8009730 <_Bfree+0x40>)
 800970a:	218f      	movs	r1, #143	; 0x8f
 800970c:	f000 fbd4 	bl	8009eb8 <__assert_func>
 8009710:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009714:	6006      	str	r6, [r0, #0]
 8009716:	60c6      	str	r6, [r0, #12]
 8009718:	b13c      	cbz	r4, 800972a <_Bfree+0x3a>
 800971a:	69eb      	ldr	r3, [r5, #28]
 800971c:	6862      	ldr	r2, [r4, #4]
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009724:	6021      	str	r1, [r4, #0]
 8009726:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800972a:	bd70      	pop	{r4, r5, r6, pc}
 800972c:	0800a5e1 	.word	0x0800a5e1
 8009730:	0800a661 	.word	0x0800a661

08009734 <__multadd>:
 8009734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009738:	690d      	ldr	r5, [r1, #16]
 800973a:	4607      	mov	r7, r0
 800973c:	460c      	mov	r4, r1
 800973e:	461e      	mov	r6, r3
 8009740:	f101 0c14 	add.w	ip, r1, #20
 8009744:	2000      	movs	r0, #0
 8009746:	f8dc 3000 	ldr.w	r3, [ip]
 800974a:	b299      	uxth	r1, r3
 800974c:	fb02 6101 	mla	r1, r2, r1, r6
 8009750:	0c1e      	lsrs	r6, r3, #16
 8009752:	0c0b      	lsrs	r3, r1, #16
 8009754:	fb02 3306 	mla	r3, r2, r6, r3
 8009758:	b289      	uxth	r1, r1
 800975a:	3001      	adds	r0, #1
 800975c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009760:	4285      	cmp	r5, r0
 8009762:	f84c 1b04 	str.w	r1, [ip], #4
 8009766:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800976a:	dcec      	bgt.n	8009746 <__multadd+0x12>
 800976c:	b30e      	cbz	r6, 80097b2 <__multadd+0x7e>
 800976e:	68a3      	ldr	r3, [r4, #8]
 8009770:	42ab      	cmp	r3, r5
 8009772:	dc19      	bgt.n	80097a8 <__multadd+0x74>
 8009774:	6861      	ldr	r1, [r4, #4]
 8009776:	4638      	mov	r0, r7
 8009778:	3101      	adds	r1, #1
 800977a:	f7ff ff79 	bl	8009670 <_Balloc>
 800977e:	4680      	mov	r8, r0
 8009780:	b928      	cbnz	r0, 800978e <__multadd+0x5a>
 8009782:	4602      	mov	r2, r0
 8009784:	4b0c      	ldr	r3, [pc, #48]	; (80097b8 <__multadd+0x84>)
 8009786:	480d      	ldr	r0, [pc, #52]	; (80097bc <__multadd+0x88>)
 8009788:	21ba      	movs	r1, #186	; 0xba
 800978a:	f000 fb95 	bl	8009eb8 <__assert_func>
 800978e:	6922      	ldr	r2, [r4, #16]
 8009790:	3202      	adds	r2, #2
 8009792:	f104 010c 	add.w	r1, r4, #12
 8009796:	0092      	lsls	r2, r2, #2
 8009798:	300c      	adds	r0, #12
 800979a:	f000 fb7f 	bl	8009e9c <memcpy>
 800979e:	4621      	mov	r1, r4
 80097a0:	4638      	mov	r0, r7
 80097a2:	f7ff ffa5 	bl	80096f0 <_Bfree>
 80097a6:	4644      	mov	r4, r8
 80097a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80097ac:	3501      	adds	r5, #1
 80097ae:	615e      	str	r6, [r3, #20]
 80097b0:	6125      	str	r5, [r4, #16]
 80097b2:	4620      	mov	r0, r4
 80097b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097b8:	0800a650 	.word	0x0800a650
 80097bc:	0800a661 	.word	0x0800a661

080097c0 <__hi0bits>:
 80097c0:	0c03      	lsrs	r3, r0, #16
 80097c2:	041b      	lsls	r3, r3, #16
 80097c4:	b9d3      	cbnz	r3, 80097fc <__hi0bits+0x3c>
 80097c6:	0400      	lsls	r0, r0, #16
 80097c8:	2310      	movs	r3, #16
 80097ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80097ce:	bf04      	itt	eq
 80097d0:	0200      	lsleq	r0, r0, #8
 80097d2:	3308      	addeq	r3, #8
 80097d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80097d8:	bf04      	itt	eq
 80097da:	0100      	lsleq	r0, r0, #4
 80097dc:	3304      	addeq	r3, #4
 80097de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80097e2:	bf04      	itt	eq
 80097e4:	0080      	lsleq	r0, r0, #2
 80097e6:	3302      	addeq	r3, #2
 80097e8:	2800      	cmp	r0, #0
 80097ea:	db05      	blt.n	80097f8 <__hi0bits+0x38>
 80097ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80097f0:	f103 0301 	add.w	r3, r3, #1
 80097f4:	bf08      	it	eq
 80097f6:	2320      	moveq	r3, #32
 80097f8:	4618      	mov	r0, r3
 80097fa:	4770      	bx	lr
 80097fc:	2300      	movs	r3, #0
 80097fe:	e7e4      	b.n	80097ca <__hi0bits+0xa>

08009800 <__lo0bits>:
 8009800:	6803      	ldr	r3, [r0, #0]
 8009802:	f013 0207 	ands.w	r2, r3, #7
 8009806:	d00c      	beq.n	8009822 <__lo0bits+0x22>
 8009808:	07d9      	lsls	r1, r3, #31
 800980a:	d422      	bmi.n	8009852 <__lo0bits+0x52>
 800980c:	079a      	lsls	r2, r3, #30
 800980e:	bf49      	itett	mi
 8009810:	085b      	lsrmi	r3, r3, #1
 8009812:	089b      	lsrpl	r3, r3, #2
 8009814:	6003      	strmi	r3, [r0, #0]
 8009816:	2201      	movmi	r2, #1
 8009818:	bf5c      	itt	pl
 800981a:	6003      	strpl	r3, [r0, #0]
 800981c:	2202      	movpl	r2, #2
 800981e:	4610      	mov	r0, r2
 8009820:	4770      	bx	lr
 8009822:	b299      	uxth	r1, r3
 8009824:	b909      	cbnz	r1, 800982a <__lo0bits+0x2a>
 8009826:	0c1b      	lsrs	r3, r3, #16
 8009828:	2210      	movs	r2, #16
 800982a:	b2d9      	uxtb	r1, r3
 800982c:	b909      	cbnz	r1, 8009832 <__lo0bits+0x32>
 800982e:	3208      	adds	r2, #8
 8009830:	0a1b      	lsrs	r3, r3, #8
 8009832:	0719      	lsls	r1, r3, #28
 8009834:	bf04      	itt	eq
 8009836:	091b      	lsreq	r3, r3, #4
 8009838:	3204      	addeq	r2, #4
 800983a:	0799      	lsls	r1, r3, #30
 800983c:	bf04      	itt	eq
 800983e:	089b      	lsreq	r3, r3, #2
 8009840:	3202      	addeq	r2, #2
 8009842:	07d9      	lsls	r1, r3, #31
 8009844:	d403      	bmi.n	800984e <__lo0bits+0x4e>
 8009846:	085b      	lsrs	r3, r3, #1
 8009848:	f102 0201 	add.w	r2, r2, #1
 800984c:	d003      	beq.n	8009856 <__lo0bits+0x56>
 800984e:	6003      	str	r3, [r0, #0]
 8009850:	e7e5      	b.n	800981e <__lo0bits+0x1e>
 8009852:	2200      	movs	r2, #0
 8009854:	e7e3      	b.n	800981e <__lo0bits+0x1e>
 8009856:	2220      	movs	r2, #32
 8009858:	e7e1      	b.n	800981e <__lo0bits+0x1e>
	...

0800985c <__i2b>:
 800985c:	b510      	push	{r4, lr}
 800985e:	460c      	mov	r4, r1
 8009860:	2101      	movs	r1, #1
 8009862:	f7ff ff05 	bl	8009670 <_Balloc>
 8009866:	4602      	mov	r2, r0
 8009868:	b928      	cbnz	r0, 8009876 <__i2b+0x1a>
 800986a:	4b05      	ldr	r3, [pc, #20]	; (8009880 <__i2b+0x24>)
 800986c:	4805      	ldr	r0, [pc, #20]	; (8009884 <__i2b+0x28>)
 800986e:	f240 1145 	movw	r1, #325	; 0x145
 8009872:	f000 fb21 	bl	8009eb8 <__assert_func>
 8009876:	2301      	movs	r3, #1
 8009878:	6144      	str	r4, [r0, #20]
 800987a:	6103      	str	r3, [r0, #16]
 800987c:	bd10      	pop	{r4, pc}
 800987e:	bf00      	nop
 8009880:	0800a650 	.word	0x0800a650
 8009884:	0800a661 	.word	0x0800a661

08009888 <__multiply>:
 8009888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800988c:	4691      	mov	r9, r2
 800988e:	690a      	ldr	r2, [r1, #16]
 8009890:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009894:	429a      	cmp	r2, r3
 8009896:	bfb8      	it	lt
 8009898:	460b      	movlt	r3, r1
 800989a:	460c      	mov	r4, r1
 800989c:	bfbc      	itt	lt
 800989e:	464c      	movlt	r4, r9
 80098a0:	4699      	movlt	r9, r3
 80098a2:	6927      	ldr	r7, [r4, #16]
 80098a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80098a8:	68a3      	ldr	r3, [r4, #8]
 80098aa:	6861      	ldr	r1, [r4, #4]
 80098ac:	eb07 060a 	add.w	r6, r7, sl
 80098b0:	42b3      	cmp	r3, r6
 80098b2:	b085      	sub	sp, #20
 80098b4:	bfb8      	it	lt
 80098b6:	3101      	addlt	r1, #1
 80098b8:	f7ff feda 	bl	8009670 <_Balloc>
 80098bc:	b930      	cbnz	r0, 80098cc <__multiply+0x44>
 80098be:	4602      	mov	r2, r0
 80098c0:	4b44      	ldr	r3, [pc, #272]	; (80099d4 <__multiply+0x14c>)
 80098c2:	4845      	ldr	r0, [pc, #276]	; (80099d8 <__multiply+0x150>)
 80098c4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80098c8:	f000 faf6 	bl	8009eb8 <__assert_func>
 80098cc:	f100 0514 	add.w	r5, r0, #20
 80098d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80098d4:	462b      	mov	r3, r5
 80098d6:	2200      	movs	r2, #0
 80098d8:	4543      	cmp	r3, r8
 80098da:	d321      	bcc.n	8009920 <__multiply+0x98>
 80098dc:	f104 0314 	add.w	r3, r4, #20
 80098e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80098e4:	f109 0314 	add.w	r3, r9, #20
 80098e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80098ec:	9202      	str	r2, [sp, #8]
 80098ee:	1b3a      	subs	r2, r7, r4
 80098f0:	3a15      	subs	r2, #21
 80098f2:	f022 0203 	bic.w	r2, r2, #3
 80098f6:	3204      	adds	r2, #4
 80098f8:	f104 0115 	add.w	r1, r4, #21
 80098fc:	428f      	cmp	r7, r1
 80098fe:	bf38      	it	cc
 8009900:	2204      	movcc	r2, #4
 8009902:	9201      	str	r2, [sp, #4]
 8009904:	9a02      	ldr	r2, [sp, #8]
 8009906:	9303      	str	r3, [sp, #12]
 8009908:	429a      	cmp	r2, r3
 800990a:	d80c      	bhi.n	8009926 <__multiply+0x9e>
 800990c:	2e00      	cmp	r6, #0
 800990e:	dd03      	ble.n	8009918 <__multiply+0x90>
 8009910:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009914:	2b00      	cmp	r3, #0
 8009916:	d05b      	beq.n	80099d0 <__multiply+0x148>
 8009918:	6106      	str	r6, [r0, #16]
 800991a:	b005      	add	sp, #20
 800991c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009920:	f843 2b04 	str.w	r2, [r3], #4
 8009924:	e7d8      	b.n	80098d8 <__multiply+0x50>
 8009926:	f8b3 a000 	ldrh.w	sl, [r3]
 800992a:	f1ba 0f00 	cmp.w	sl, #0
 800992e:	d024      	beq.n	800997a <__multiply+0xf2>
 8009930:	f104 0e14 	add.w	lr, r4, #20
 8009934:	46a9      	mov	r9, r5
 8009936:	f04f 0c00 	mov.w	ip, #0
 800993a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800993e:	f8d9 1000 	ldr.w	r1, [r9]
 8009942:	fa1f fb82 	uxth.w	fp, r2
 8009946:	b289      	uxth	r1, r1
 8009948:	fb0a 110b 	mla	r1, sl, fp, r1
 800994c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009950:	f8d9 2000 	ldr.w	r2, [r9]
 8009954:	4461      	add	r1, ip
 8009956:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800995a:	fb0a c20b 	mla	r2, sl, fp, ip
 800995e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009962:	b289      	uxth	r1, r1
 8009964:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009968:	4577      	cmp	r7, lr
 800996a:	f849 1b04 	str.w	r1, [r9], #4
 800996e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009972:	d8e2      	bhi.n	800993a <__multiply+0xb2>
 8009974:	9a01      	ldr	r2, [sp, #4]
 8009976:	f845 c002 	str.w	ip, [r5, r2]
 800997a:	9a03      	ldr	r2, [sp, #12]
 800997c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009980:	3304      	adds	r3, #4
 8009982:	f1b9 0f00 	cmp.w	r9, #0
 8009986:	d021      	beq.n	80099cc <__multiply+0x144>
 8009988:	6829      	ldr	r1, [r5, #0]
 800998a:	f104 0c14 	add.w	ip, r4, #20
 800998e:	46ae      	mov	lr, r5
 8009990:	f04f 0a00 	mov.w	sl, #0
 8009994:	f8bc b000 	ldrh.w	fp, [ip]
 8009998:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800999c:	fb09 220b 	mla	r2, r9, fp, r2
 80099a0:	4452      	add	r2, sl
 80099a2:	b289      	uxth	r1, r1
 80099a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80099a8:	f84e 1b04 	str.w	r1, [lr], #4
 80099ac:	f85c 1b04 	ldr.w	r1, [ip], #4
 80099b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80099b4:	f8be 1000 	ldrh.w	r1, [lr]
 80099b8:	fb09 110a 	mla	r1, r9, sl, r1
 80099bc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80099c0:	4567      	cmp	r7, ip
 80099c2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80099c6:	d8e5      	bhi.n	8009994 <__multiply+0x10c>
 80099c8:	9a01      	ldr	r2, [sp, #4]
 80099ca:	50a9      	str	r1, [r5, r2]
 80099cc:	3504      	adds	r5, #4
 80099ce:	e799      	b.n	8009904 <__multiply+0x7c>
 80099d0:	3e01      	subs	r6, #1
 80099d2:	e79b      	b.n	800990c <__multiply+0x84>
 80099d4:	0800a650 	.word	0x0800a650
 80099d8:	0800a661 	.word	0x0800a661

080099dc <__pow5mult>:
 80099dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099e0:	4615      	mov	r5, r2
 80099e2:	f012 0203 	ands.w	r2, r2, #3
 80099e6:	4606      	mov	r6, r0
 80099e8:	460f      	mov	r7, r1
 80099ea:	d007      	beq.n	80099fc <__pow5mult+0x20>
 80099ec:	4c25      	ldr	r4, [pc, #148]	; (8009a84 <__pow5mult+0xa8>)
 80099ee:	3a01      	subs	r2, #1
 80099f0:	2300      	movs	r3, #0
 80099f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099f6:	f7ff fe9d 	bl	8009734 <__multadd>
 80099fa:	4607      	mov	r7, r0
 80099fc:	10ad      	asrs	r5, r5, #2
 80099fe:	d03d      	beq.n	8009a7c <__pow5mult+0xa0>
 8009a00:	69f4      	ldr	r4, [r6, #28]
 8009a02:	b97c      	cbnz	r4, 8009a24 <__pow5mult+0x48>
 8009a04:	2010      	movs	r0, #16
 8009a06:	f7ff fcd1 	bl	80093ac <malloc>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	61f0      	str	r0, [r6, #28]
 8009a0e:	b928      	cbnz	r0, 8009a1c <__pow5mult+0x40>
 8009a10:	4b1d      	ldr	r3, [pc, #116]	; (8009a88 <__pow5mult+0xac>)
 8009a12:	481e      	ldr	r0, [pc, #120]	; (8009a8c <__pow5mult+0xb0>)
 8009a14:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009a18:	f000 fa4e 	bl	8009eb8 <__assert_func>
 8009a1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a20:	6004      	str	r4, [r0, #0]
 8009a22:	60c4      	str	r4, [r0, #12]
 8009a24:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009a28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a2c:	b94c      	cbnz	r4, 8009a42 <__pow5mult+0x66>
 8009a2e:	f240 2171 	movw	r1, #625	; 0x271
 8009a32:	4630      	mov	r0, r6
 8009a34:	f7ff ff12 	bl	800985c <__i2b>
 8009a38:	2300      	movs	r3, #0
 8009a3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a3e:	4604      	mov	r4, r0
 8009a40:	6003      	str	r3, [r0, #0]
 8009a42:	f04f 0900 	mov.w	r9, #0
 8009a46:	07eb      	lsls	r3, r5, #31
 8009a48:	d50a      	bpl.n	8009a60 <__pow5mult+0x84>
 8009a4a:	4639      	mov	r1, r7
 8009a4c:	4622      	mov	r2, r4
 8009a4e:	4630      	mov	r0, r6
 8009a50:	f7ff ff1a 	bl	8009888 <__multiply>
 8009a54:	4639      	mov	r1, r7
 8009a56:	4680      	mov	r8, r0
 8009a58:	4630      	mov	r0, r6
 8009a5a:	f7ff fe49 	bl	80096f0 <_Bfree>
 8009a5e:	4647      	mov	r7, r8
 8009a60:	106d      	asrs	r5, r5, #1
 8009a62:	d00b      	beq.n	8009a7c <__pow5mult+0xa0>
 8009a64:	6820      	ldr	r0, [r4, #0]
 8009a66:	b938      	cbnz	r0, 8009a78 <__pow5mult+0x9c>
 8009a68:	4622      	mov	r2, r4
 8009a6a:	4621      	mov	r1, r4
 8009a6c:	4630      	mov	r0, r6
 8009a6e:	f7ff ff0b 	bl	8009888 <__multiply>
 8009a72:	6020      	str	r0, [r4, #0]
 8009a74:	f8c0 9000 	str.w	r9, [r0]
 8009a78:	4604      	mov	r4, r0
 8009a7a:	e7e4      	b.n	8009a46 <__pow5mult+0x6a>
 8009a7c:	4638      	mov	r0, r7
 8009a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a82:	bf00      	nop
 8009a84:	0800a7b0 	.word	0x0800a7b0
 8009a88:	0800a5e1 	.word	0x0800a5e1
 8009a8c:	0800a661 	.word	0x0800a661

08009a90 <__lshift>:
 8009a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a94:	460c      	mov	r4, r1
 8009a96:	6849      	ldr	r1, [r1, #4]
 8009a98:	6923      	ldr	r3, [r4, #16]
 8009a9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a9e:	68a3      	ldr	r3, [r4, #8]
 8009aa0:	4607      	mov	r7, r0
 8009aa2:	4691      	mov	r9, r2
 8009aa4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009aa8:	f108 0601 	add.w	r6, r8, #1
 8009aac:	42b3      	cmp	r3, r6
 8009aae:	db0b      	blt.n	8009ac8 <__lshift+0x38>
 8009ab0:	4638      	mov	r0, r7
 8009ab2:	f7ff fddd 	bl	8009670 <_Balloc>
 8009ab6:	4605      	mov	r5, r0
 8009ab8:	b948      	cbnz	r0, 8009ace <__lshift+0x3e>
 8009aba:	4602      	mov	r2, r0
 8009abc:	4b28      	ldr	r3, [pc, #160]	; (8009b60 <__lshift+0xd0>)
 8009abe:	4829      	ldr	r0, [pc, #164]	; (8009b64 <__lshift+0xd4>)
 8009ac0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009ac4:	f000 f9f8 	bl	8009eb8 <__assert_func>
 8009ac8:	3101      	adds	r1, #1
 8009aca:	005b      	lsls	r3, r3, #1
 8009acc:	e7ee      	b.n	8009aac <__lshift+0x1c>
 8009ace:	2300      	movs	r3, #0
 8009ad0:	f100 0114 	add.w	r1, r0, #20
 8009ad4:	f100 0210 	add.w	r2, r0, #16
 8009ad8:	4618      	mov	r0, r3
 8009ada:	4553      	cmp	r3, sl
 8009adc:	db33      	blt.n	8009b46 <__lshift+0xb6>
 8009ade:	6920      	ldr	r0, [r4, #16]
 8009ae0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ae4:	f104 0314 	add.w	r3, r4, #20
 8009ae8:	f019 091f 	ands.w	r9, r9, #31
 8009aec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009af0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009af4:	d02b      	beq.n	8009b4e <__lshift+0xbe>
 8009af6:	f1c9 0e20 	rsb	lr, r9, #32
 8009afa:	468a      	mov	sl, r1
 8009afc:	2200      	movs	r2, #0
 8009afe:	6818      	ldr	r0, [r3, #0]
 8009b00:	fa00 f009 	lsl.w	r0, r0, r9
 8009b04:	4310      	orrs	r0, r2
 8009b06:	f84a 0b04 	str.w	r0, [sl], #4
 8009b0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b0e:	459c      	cmp	ip, r3
 8009b10:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b14:	d8f3      	bhi.n	8009afe <__lshift+0x6e>
 8009b16:	ebac 0304 	sub.w	r3, ip, r4
 8009b1a:	3b15      	subs	r3, #21
 8009b1c:	f023 0303 	bic.w	r3, r3, #3
 8009b20:	3304      	adds	r3, #4
 8009b22:	f104 0015 	add.w	r0, r4, #21
 8009b26:	4584      	cmp	ip, r0
 8009b28:	bf38      	it	cc
 8009b2a:	2304      	movcc	r3, #4
 8009b2c:	50ca      	str	r2, [r1, r3]
 8009b2e:	b10a      	cbz	r2, 8009b34 <__lshift+0xa4>
 8009b30:	f108 0602 	add.w	r6, r8, #2
 8009b34:	3e01      	subs	r6, #1
 8009b36:	4638      	mov	r0, r7
 8009b38:	612e      	str	r6, [r5, #16]
 8009b3a:	4621      	mov	r1, r4
 8009b3c:	f7ff fdd8 	bl	80096f0 <_Bfree>
 8009b40:	4628      	mov	r0, r5
 8009b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b46:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	e7c5      	b.n	8009ada <__lshift+0x4a>
 8009b4e:	3904      	subs	r1, #4
 8009b50:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b54:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b58:	459c      	cmp	ip, r3
 8009b5a:	d8f9      	bhi.n	8009b50 <__lshift+0xc0>
 8009b5c:	e7ea      	b.n	8009b34 <__lshift+0xa4>
 8009b5e:	bf00      	nop
 8009b60:	0800a650 	.word	0x0800a650
 8009b64:	0800a661 	.word	0x0800a661

08009b68 <__mcmp>:
 8009b68:	b530      	push	{r4, r5, lr}
 8009b6a:	6902      	ldr	r2, [r0, #16]
 8009b6c:	690c      	ldr	r4, [r1, #16]
 8009b6e:	1b12      	subs	r2, r2, r4
 8009b70:	d10e      	bne.n	8009b90 <__mcmp+0x28>
 8009b72:	f100 0314 	add.w	r3, r0, #20
 8009b76:	3114      	adds	r1, #20
 8009b78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009b7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009b80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009b84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009b88:	42a5      	cmp	r5, r4
 8009b8a:	d003      	beq.n	8009b94 <__mcmp+0x2c>
 8009b8c:	d305      	bcc.n	8009b9a <__mcmp+0x32>
 8009b8e:	2201      	movs	r2, #1
 8009b90:	4610      	mov	r0, r2
 8009b92:	bd30      	pop	{r4, r5, pc}
 8009b94:	4283      	cmp	r3, r0
 8009b96:	d3f3      	bcc.n	8009b80 <__mcmp+0x18>
 8009b98:	e7fa      	b.n	8009b90 <__mcmp+0x28>
 8009b9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b9e:	e7f7      	b.n	8009b90 <__mcmp+0x28>

08009ba0 <__mdiff>:
 8009ba0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ba4:	460c      	mov	r4, r1
 8009ba6:	4606      	mov	r6, r0
 8009ba8:	4611      	mov	r1, r2
 8009baa:	4620      	mov	r0, r4
 8009bac:	4690      	mov	r8, r2
 8009bae:	f7ff ffdb 	bl	8009b68 <__mcmp>
 8009bb2:	1e05      	subs	r5, r0, #0
 8009bb4:	d110      	bne.n	8009bd8 <__mdiff+0x38>
 8009bb6:	4629      	mov	r1, r5
 8009bb8:	4630      	mov	r0, r6
 8009bba:	f7ff fd59 	bl	8009670 <_Balloc>
 8009bbe:	b930      	cbnz	r0, 8009bce <__mdiff+0x2e>
 8009bc0:	4b3a      	ldr	r3, [pc, #232]	; (8009cac <__mdiff+0x10c>)
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	f240 2137 	movw	r1, #567	; 0x237
 8009bc8:	4839      	ldr	r0, [pc, #228]	; (8009cb0 <__mdiff+0x110>)
 8009bca:	f000 f975 	bl	8009eb8 <__assert_func>
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009bd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bd8:	bfa4      	itt	ge
 8009bda:	4643      	movge	r3, r8
 8009bdc:	46a0      	movge	r8, r4
 8009bde:	4630      	mov	r0, r6
 8009be0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009be4:	bfa6      	itte	ge
 8009be6:	461c      	movge	r4, r3
 8009be8:	2500      	movge	r5, #0
 8009bea:	2501      	movlt	r5, #1
 8009bec:	f7ff fd40 	bl	8009670 <_Balloc>
 8009bf0:	b920      	cbnz	r0, 8009bfc <__mdiff+0x5c>
 8009bf2:	4b2e      	ldr	r3, [pc, #184]	; (8009cac <__mdiff+0x10c>)
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	f240 2145 	movw	r1, #581	; 0x245
 8009bfa:	e7e5      	b.n	8009bc8 <__mdiff+0x28>
 8009bfc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009c00:	6926      	ldr	r6, [r4, #16]
 8009c02:	60c5      	str	r5, [r0, #12]
 8009c04:	f104 0914 	add.w	r9, r4, #20
 8009c08:	f108 0514 	add.w	r5, r8, #20
 8009c0c:	f100 0e14 	add.w	lr, r0, #20
 8009c10:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009c14:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009c18:	f108 0210 	add.w	r2, r8, #16
 8009c1c:	46f2      	mov	sl, lr
 8009c1e:	2100      	movs	r1, #0
 8009c20:	f859 3b04 	ldr.w	r3, [r9], #4
 8009c24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009c28:	fa11 f88b 	uxtah	r8, r1, fp
 8009c2c:	b299      	uxth	r1, r3
 8009c2e:	0c1b      	lsrs	r3, r3, #16
 8009c30:	eba8 0801 	sub.w	r8, r8, r1
 8009c34:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009c38:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009c3c:	fa1f f888 	uxth.w	r8, r8
 8009c40:	1419      	asrs	r1, r3, #16
 8009c42:	454e      	cmp	r6, r9
 8009c44:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009c48:	f84a 3b04 	str.w	r3, [sl], #4
 8009c4c:	d8e8      	bhi.n	8009c20 <__mdiff+0x80>
 8009c4e:	1b33      	subs	r3, r6, r4
 8009c50:	3b15      	subs	r3, #21
 8009c52:	f023 0303 	bic.w	r3, r3, #3
 8009c56:	3304      	adds	r3, #4
 8009c58:	3415      	adds	r4, #21
 8009c5a:	42a6      	cmp	r6, r4
 8009c5c:	bf38      	it	cc
 8009c5e:	2304      	movcc	r3, #4
 8009c60:	441d      	add	r5, r3
 8009c62:	4473      	add	r3, lr
 8009c64:	469e      	mov	lr, r3
 8009c66:	462e      	mov	r6, r5
 8009c68:	4566      	cmp	r6, ip
 8009c6a:	d30e      	bcc.n	8009c8a <__mdiff+0xea>
 8009c6c:	f10c 0203 	add.w	r2, ip, #3
 8009c70:	1b52      	subs	r2, r2, r5
 8009c72:	f022 0203 	bic.w	r2, r2, #3
 8009c76:	3d03      	subs	r5, #3
 8009c78:	45ac      	cmp	ip, r5
 8009c7a:	bf38      	it	cc
 8009c7c:	2200      	movcc	r2, #0
 8009c7e:	4413      	add	r3, r2
 8009c80:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009c84:	b17a      	cbz	r2, 8009ca6 <__mdiff+0x106>
 8009c86:	6107      	str	r7, [r0, #16]
 8009c88:	e7a4      	b.n	8009bd4 <__mdiff+0x34>
 8009c8a:	f856 8b04 	ldr.w	r8, [r6], #4
 8009c8e:	fa11 f288 	uxtah	r2, r1, r8
 8009c92:	1414      	asrs	r4, r2, #16
 8009c94:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009c98:	b292      	uxth	r2, r2
 8009c9a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009c9e:	f84e 2b04 	str.w	r2, [lr], #4
 8009ca2:	1421      	asrs	r1, r4, #16
 8009ca4:	e7e0      	b.n	8009c68 <__mdiff+0xc8>
 8009ca6:	3f01      	subs	r7, #1
 8009ca8:	e7ea      	b.n	8009c80 <__mdiff+0xe0>
 8009caa:	bf00      	nop
 8009cac:	0800a650 	.word	0x0800a650
 8009cb0:	0800a661 	.word	0x0800a661

08009cb4 <__d2b>:
 8009cb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009cb8:	460f      	mov	r7, r1
 8009cba:	2101      	movs	r1, #1
 8009cbc:	ec59 8b10 	vmov	r8, r9, d0
 8009cc0:	4616      	mov	r6, r2
 8009cc2:	f7ff fcd5 	bl	8009670 <_Balloc>
 8009cc6:	4604      	mov	r4, r0
 8009cc8:	b930      	cbnz	r0, 8009cd8 <__d2b+0x24>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	4b24      	ldr	r3, [pc, #144]	; (8009d60 <__d2b+0xac>)
 8009cce:	4825      	ldr	r0, [pc, #148]	; (8009d64 <__d2b+0xb0>)
 8009cd0:	f240 310f 	movw	r1, #783	; 0x30f
 8009cd4:	f000 f8f0 	bl	8009eb8 <__assert_func>
 8009cd8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009cdc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ce0:	bb2d      	cbnz	r5, 8009d2e <__d2b+0x7a>
 8009ce2:	9301      	str	r3, [sp, #4]
 8009ce4:	f1b8 0300 	subs.w	r3, r8, #0
 8009ce8:	d026      	beq.n	8009d38 <__d2b+0x84>
 8009cea:	4668      	mov	r0, sp
 8009cec:	9300      	str	r3, [sp, #0]
 8009cee:	f7ff fd87 	bl	8009800 <__lo0bits>
 8009cf2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009cf6:	b1e8      	cbz	r0, 8009d34 <__d2b+0x80>
 8009cf8:	f1c0 0320 	rsb	r3, r0, #32
 8009cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8009d00:	430b      	orrs	r3, r1
 8009d02:	40c2      	lsrs	r2, r0
 8009d04:	6163      	str	r3, [r4, #20]
 8009d06:	9201      	str	r2, [sp, #4]
 8009d08:	9b01      	ldr	r3, [sp, #4]
 8009d0a:	61a3      	str	r3, [r4, #24]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	bf14      	ite	ne
 8009d10:	2202      	movne	r2, #2
 8009d12:	2201      	moveq	r2, #1
 8009d14:	6122      	str	r2, [r4, #16]
 8009d16:	b1bd      	cbz	r5, 8009d48 <__d2b+0x94>
 8009d18:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009d1c:	4405      	add	r5, r0
 8009d1e:	603d      	str	r5, [r7, #0]
 8009d20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009d24:	6030      	str	r0, [r6, #0]
 8009d26:	4620      	mov	r0, r4
 8009d28:	b003      	add	sp, #12
 8009d2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d32:	e7d6      	b.n	8009ce2 <__d2b+0x2e>
 8009d34:	6161      	str	r1, [r4, #20]
 8009d36:	e7e7      	b.n	8009d08 <__d2b+0x54>
 8009d38:	a801      	add	r0, sp, #4
 8009d3a:	f7ff fd61 	bl	8009800 <__lo0bits>
 8009d3e:	9b01      	ldr	r3, [sp, #4]
 8009d40:	6163      	str	r3, [r4, #20]
 8009d42:	3020      	adds	r0, #32
 8009d44:	2201      	movs	r2, #1
 8009d46:	e7e5      	b.n	8009d14 <__d2b+0x60>
 8009d48:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009d4c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009d50:	6038      	str	r0, [r7, #0]
 8009d52:	6918      	ldr	r0, [r3, #16]
 8009d54:	f7ff fd34 	bl	80097c0 <__hi0bits>
 8009d58:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009d5c:	e7e2      	b.n	8009d24 <__d2b+0x70>
 8009d5e:	bf00      	nop
 8009d60:	0800a650 	.word	0x0800a650
 8009d64:	0800a661 	.word	0x0800a661

08009d68 <__sread>:
 8009d68:	b510      	push	{r4, lr}
 8009d6a:	460c      	mov	r4, r1
 8009d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d70:	f000 f860 	bl	8009e34 <_read_r>
 8009d74:	2800      	cmp	r0, #0
 8009d76:	bfab      	itete	ge
 8009d78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d7a:	89a3      	ldrhlt	r3, [r4, #12]
 8009d7c:	181b      	addge	r3, r3, r0
 8009d7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d82:	bfac      	ite	ge
 8009d84:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d86:	81a3      	strhlt	r3, [r4, #12]
 8009d88:	bd10      	pop	{r4, pc}

08009d8a <__swrite>:
 8009d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d8e:	461f      	mov	r7, r3
 8009d90:	898b      	ldrh	r3, [r1, #12]
 8009d92:	05db      	lsls	r3, r3, #23
 8009d94:	4605      	mov	r5, r0
 8009d96:	460c      	mov	r4, r1
 8009d98:	4616      	mov	r6, r2
 8009d9a:	d505      	bpl.n	8009da8 <__swrite+0x1e>
 8009d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009da0:	2302      	movs	r3, #2
 8009da2:	2200      	movs	r2, #0
 8009da4:	f000 f834 	bl	8009e10 <_lseek_r>
 8009da8:	89a3      	ldrh	r3, [r4, #12]
 8009daa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009db2:	81a3      	strh	r3, [r4, #12]
 8009db4:	4632      	mov	r2, r6
 8009db6:	463b      	mov	r3, r7
 8009db8:	4628      	mov	r0, r5
 8009dba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dbe:	f000 b85b 	b.w	8009e78 <_write_r>

08009dc2 <__sseek>:
 8009dc2:	b510      	push	{r4, lr}
 8009dc4:	460c      	mov	r4, r1
 8009dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dca:	f000 f821 	bl	8009e10 <_lseek_r>
 8009dce:	1c43      	adds	r3, r0, #1
 8009dd0:	89a3      	ldrh	r3, [r4, #12]
 8009dd2:	bf15      	itete	ne
 8009dd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009dd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009dda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009dde:	81a3      	strheq	r3, [r4, #12]
 8009de0:	bf18      	it	ne
 8009de2:	81a3      	strhne	r3, [r4, #12]
 8009de4:	bd10      	pop	{r4, pc}

08009de6 <__sclose>:
 8009de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dea:	f000 b801 	b.w	8009df0 <_close_r>
	...

08009df0 <_close_r>:
 8009df0:	b538      	push	{r3, r4, r5, lr}
 8009df2:	4d06      	ldr	r5, [pc, #24]	; (8009e0c <_close_r+0x1c>)
 8009df4:	2300      	movs	r3, #0
 8009df6:	4604      	mov	r4, r0
 8009df8:	4608      	mov	r0, r1
 8009dfa:	602b      	str	r3, [r5, #0]
 8009dfc:	f7f9 f88d 	bl	8002f1a <_close>
 8009e00:	1c43      	adds	r3, r0, #1
 8009e02:	d102      	bne.n	8009e0a <_close_r+0x1a>
 8009e04:	682b      	ldr	r3, [r5, #0]
 8009e06:	b103      	cbz	r3, 8009e0a <_close_r+0x1a>
 8009e08:	6023      	str	r3, [r4, #0]
 8009e0a:	bd38      	pop	{r3, r4, r5, pc}
 8009e0c:	20000734 	.word	0x20000734

08009e10 <_lseek_r>:
 8009e10:	b538      	push	{r3, r4, r5, lr}
 8009e12:	4d07      	ldr	r5, [pc, #28]	; (8009e30 <_lseek_r+0x20>)
 8009e14:	4604      	mov	r4, r0
 8009e16:	4608      	mov	r0, r1
 8009e18:	4611      	mov	r1, r2
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	602a      	str	r2, [r5, #0]
 8009e1e:	461a      	mov	r2, r3
 8009e20:	f7f9 f8a2 	bl	8002f68 <_lseek>
 8009e24:	1c43      	adds	r3, r0, #1
 8009e26:	d102      	bne.n	8009e2e <_lseek_r+0x1e>
 8009e28:	682b      	ldr	r3, [r5, #0]
 8009e2a:	b103      	cbz	r3, 8009e2e <_lseek_r+0x1e>
 8009e2c:	6023      	str	r3, [r4, #0]
 8009e2e:	bd38      	pop	{r3, r4, r5, pc}
 8009e30:	20000734 	.word	0x20000734

08009e34 <_read_r>:
 8009e34:	b538      	push	{r3, r4, r5, lr}
 8009e36:	4d07      	ldr	r5, [pc, #28]	; (8009e54 <_read_r+0x20>)
 8009e38:	4604      	mov	r4, r0
 8009e3a:	4608      	mov	r0, r1
 8009e3c:	4611      	mov	r1, r2
 8009e3e:	2200      	movs	r2, #0
 8009e40:	602a      	str	r2, [r5, #0]
 8009e42:	461a      	mov	r2, r3
 8009e44:	f7f9 f830 	bl	8002ea8 <_read>
 8009e48:	1c43      	adds	r3, r0, #1
 8009e4a:	d102      	bne.n	8009e52 <_read_r+0x1e>
 8009e4c:	682b      	ldr	r3, [r5, #0]
 8009e4e:	b103      	cbz	r3, 8009e52 <_read_r+0x1e>
 8009e50:	6023      	str	r3, [r4, #0]
 8009e52:	bd38      	pop	{r3, r4, r5, pc}
 8009e54:	20000734 	.word	0x20000734

08009e58 <_sbrk_r>:
 8009e58:	b538      	push	{r3, r4, r5, lr}
 8009e5a:	4d06      	ldr	r5, [pc, #24]	; (8009e74 <_sbrk_r+0x1c>)
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	4604      	mov	r4, r0
 8009e60:	4608      	mov	r0, r1
 8009e62:	602b      	str	r3, [r5, #0]
 8009e64:	f7f9 f88e 	bl	8002f84 <_sbrk>
 8009e68:	1c43      	adds	r3, r0, #1
 8009e6a:	d102      	bne.n	8009e72 <_sbrk_r+0x1a>
 8009e6c:	682b      	ldr	r3, [r5, #0]
 8009e6e:	b103      	cbz	r3, 8009e72 <_sbrk_r+0x1a>
 8009e70:	6023      	str	r3, [r4, #0]
 8009e72:	bd38      	pop	{r3, r4, r5, pc}
 8009e74:	20000734 	.word	0x20000734

08009e78 <_write_r>:
 8009e78:	b538      	push	{r3, r4, r5, lr}
 8009e7a:	4d07      	ldr	r5, [pc, #28]	; (8009e98 <_write_r+0x20>)
 8009e7c:	4604      	mov	r4, r0
 8009e7e:	4608      	mov	r0, r1
 8009e80:	4611      	mov	r1, r2
 8009e82:	2200      	movs	r2, #0
 8009e84:	602a      	str	r2, [r5, #0]
 8009e86:	461a      	mov	r2, r3
 8009e88:	f7f9 f82b 	bl	8002ee2 <_write>
 8009e8c:	1c43      	adds	r3, r0, #1
 8009e8e:	d102      	bne.n	8009e96 <_write_r+0x1e>
 8009e90:	682b      	ldr	r3, [r5, #0]
 8009e92:	b103      	cbz	r3, 8009e96 <_write_r+0x1e>
 8009e94:	6023      	str	r3, [r4, #0]
 8009e96:	bd38      	pop	{r3, r4, r5, pc}
 8009e98:	20000734 	.word	0x20000734

08009e9c <memcpy>:
 8009e9c:	440a      	add	r2, r1
 8009e9e:	4291      	cmp	r1, r2
 8009ea0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009ea4:	d100      	bne.n	8009ea8 <memcpy+0xc>
 8009ea6:	4770      	bx	lr
 8009ea8:	b510      	push	{r4, lr}
 8009eaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009eae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009eb2:	4291      	cmp	r1, r2
 8009eb4:	d1f9      	bne.n	8009eaa <memcpy+0xe>
 8009eb6:	bd10      	pop	{r4, pc}

08009eb8 <__assert_func>:
 8009eb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009eba:	4614      	mov	r4, r2
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	4b09      	ldr	r3, [pc, #36]	; (8009ee4 <__assert_func+0x2c>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4605      	mov	r5, r0
 8009ec4:	68d8      	ldr	r0, [r3, #12]
 8009ec6:	b14c      	cbz	r4, 8009edc <__assert_func+0x24>
 8009ec8:	4b07      	ldr	r3, [pc, #28]	; (8009ee8 <__assert_func+0x30>)
 8009eca:	9100      	str	r1, [sp, #0]
 8009ecc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ed0:	4906      	ldr	r1, [pc, #24]	; (8009eec <__assert_func+0x34>)
 8009ed2:	462b      	mov	r3, r5
 8009ed4:	f000 f882 	bl	8009fdc <fiprintf>
 8009ed8:	f000 f89f 	bl	800a01a <abort>
 8009edc:	4b04      	ldr	r3, [pc, #16]	; (8009ef0 <__assert_func+0x38>)
 8009ede:	461c      	mov	r4, r3
 8009ee0:	e7f3      	b.n	8009eca <__assert_func+0x12>
 8009ee2:	bf00      	nop
 8009ee4:	2000008c 	.word	0x2000008c
 8009ee8:	0800a8c7 	.word	0x0800a8c7
 8009eec:	0800a8d4 	.word	0x0800a8d4
 8009ef0:	0800a902 	.word	0x0800a902

08009ef4 <_calloc_r>:
 8009ef4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ef6:	fba1 2402 	umull	r2, r4, r1, r2
 8009efa:	b94c      	cbnz	r4, 8009f10 <_calloc_r+0x1c>
 8009efc:	4611      	mov	r1, r2
 8009efe:	9201      	str	r2, [sp, #4]
 8009f00:	f7ff fa7c 	bl	80093fc <_malloc_r>
 8009f04:	9a01      	ldr	r2, [sp, #4]
 8009f06:	4605      	mov	r5, r0
 8009f08:	b930      	cbnz	r0, 8009f18 <_calloc_r+0x24>
 8009f0a:	4628      	mov	r0, r5
 8009f0c:	b003      	add	sp, #12
 8009f0e:	bd30      	pop	{r4, r5, pc}
 8009f10:	220c      	movs	r2, #12
 8009f12:	6002      	str	r2, [r0, #0]
 8009f14:	2500      	movs	r5, #0
 8009f16:	e7f8      	b.n	8009f0a <_calloc_r+0x16>
 8009f18:	4621      	mov	r1, r4
 8009f1a:	f7fe fb91 	bl	8008640 <memset>
 8009f1e:	e7f4      	b.n	8009f0a <_calloc_r+0x16>

08009f20 <_free_r>:
 8009f20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f22:	2900      	cmp	r1, #0
 8009f24:	d044      	beq.n	8009fb0 <_free_r+0x90>
 8009f26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f2a:	9001      	str	r0, [sp, #4]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	f1a1 0404 	sub.w	r4, r1, #4
 8009f32:	bfb8      	it	lt
 8009f34:	18e4      	addlt	r4, r4, r3
 8009f36:	f7ff fb8f 	bl	8009658 <__malloc_lock>
 8009f3a:	4a1e      	ldr	r2, [pc, #120]	; (8009fb4 <_free_r+0x94>)
 8009f3c:	9801      	ldr	r0, [sp, #4]
 8009f3e:	6813      	ldr	r3, [r2, #0]
 8009f40:	b933      	cbnz	r3, 8009f50 <_free_r+0x30>
 8009f42:	6063      	str	r3, [r4, #4]
 8009f44:	6014      	str	r4, [r2, #0]
 8009f46:	b003      	add	sp, #12
 8009f48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f4c:	f7ff bb8a 	b.w	8009664 <__malloc_unlock>
 8009f50:	42a3      	cmp	r3, r4
 8009f52:	d908      	bls.n	8009f66 <_free_r+0x46>
 8009f54:	6825      	ldr	r5, [r4, #0]
 8009f56:	1961      	adds	r1, r4, r5
 8009f58:	428b      	cmp	r3, r1
 8009f5a:	bf01      	itttt	eq
 8009f5c:	6819      	ldreq	r1, [r3, #0]
 8009f5e:	685b      	ldreq	r3, [r3, #4]
 8009f60:	1949      	addeq	r1, r1, r5
 8009f62:	6021      	streq	r1, [r4, #0]
 8009f64:	e7ed      	b.n	8009f42 <_free_r+0x22>
 8009f66:	461a      	mov	r2, r3
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	b10b      	cbz	r3, 8009f70 <_free_r+0x50>
 8009f6c:	42a3      	cmp	r3, r4
 8009f6e:	d9fa      	bls.n	8009f66 <_free_r+0x46>
 8009f70:	6811      	ldr	r1, [r2, #0]
 8009f72:	1855      	adds	r5, r2, r1
 8009f74:	42a5      	cmp	r5, r4
 8009f76:	d10b      	bne.n	8009f90 <_free_r+0x70>
 8009f78:	6824      	ldr	r4, [r4, #0]
 8009f7a:	4421      	add	r1, r4
 8009f7c:	1854      	adds	r4, r2, r1
 8009f7e:	42a3      	cmp	r3, r4
 8009f80:	6011      	str	r1, [r2, #0]
 8009f82:	d1e0      	bne.n	8009f46 <_free_r+0x26>
 8009f84:	681c      	ldr	r4, [r3, #0]
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	6053      	str	r3, [r2, #4]
 8009f8a:	440c      	add	r4, r1
 8009f8c:	6014      	str	r4, [r2, #0]
 8009f8e:	e7da      	b.n	8009f46 <_free_r+0x26>
 8009f90:	d902      	bls.n	8009f98 <_free_r+0x78>
 8009f92:	230c      	movs	r3, #12
 8009f94:	6003      	str	r3, [r0, #0]
 8009f96:	e7d6      	b.n	8009f46 <_free_r+0x26>
 8009f98:	6825      	ldr	r5, [r4, #0]
 8009f9a:	1961      	adds	r1, r4, r5
 8009f9c:	428b      	cmp	r3, r1
 8009f9e:	bf04      	itt	eq
 8009fa0:	6819      	ldreq	r1, [r3, #0]
 8009fa2:	685b      	ldreq	r3, [r3, #4]
 8009fa4:	6063      	str	r3, [r4, #4]
 8009fa6:	bf04      	itt	eq
 8009fa8:	1949      	addeq	r1, r1, r5
 8009faa:	6021      	streq	r1, [r4, #0]
 8009fac:	6054      	str	r4, [r2, #4]
 8009fae:	e7ca      	b.n	8009f46 <_free_r+0x26>
 8009fb0:	b003      	add	sp, #12
 8009fb2:	bd30      	pop	{r4, r5, pc}
 8009fb4:	2000072c 	.word	0x2000072c

08009fb8 <__ascii_mbtowc>:
 8009fb8:	b082      	sub	sp, #8
 8009fba:	b901      	cbnz	r1, 8009fbe <__ascii_mbtowc+0x6>
 8009fbc:	a901      	add	r1, sp, #4
 8009fbe:	b142      	cbz	r2, 8009fd2 <__ascii_mbtowc+0x1a>
 8009fc0:	b14b      	cbz	r3, 8009fd6 <__ascii_mbtowc+0x1e>
 8009fc2:	7813      	ldrb	r3, [r2, #0]
 8009fc4:	600b      	str	r3, [r1, #0]
 8009fc6:	7812      	ldrb	r2, [r2, #0]
 8009fc8:	1e10      	subs	r0, r2, #0
 8009fca:	bf18      	it	ne
 8009fcc:	2001      	movne	r0, #1
 8009fce:	b002      	add	sp, #8
 8009fd0:	4770      	bx	lr
 8009fd2:	4610      	mov	r0, r2
 8009fd4:	e7fb      	b.n	8009fce <__ascii_mbtowc+0x16>
 8009fd6:	f06f 0001 	mvn.w	r0, #1
 8009fda:	e7f8      	b.n	8009fce <__ascii_mbtowc+0x16>

08009fdc <fiprintf>:
 8009fdc:	b40e      	push	{r1, r2, r3}
 8009fde:	b503      	push	{r0, r1, lr}
 8009fe0:	4601      	mov	r1, r0
 8009fe2:	ab03      	add	r3, sp, #12
 8009fe4:	4805      	ldr	r0, [pc, #20]	; (8009ffc <fiprintf+0x20>)
 8009fe6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fea:	6800      	ldr	r0, [r0, #0]
 8009fec:	9301      	str	r3, [sp, #4]
 8009fee:	f000 f845 	bl	800a07c <_vfiprintf_r>
 8009ff2:	b002      	add	sp, #8
 8009ff4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ff8:	b003      	add	sp, #12
 8009ffa:	4770      	bx	lr
 8009ffc:	2000008c 	.word	0x2000008c

0800a000 <__ascii_wctomb>:
 800a000:	b149      	cbz	r1, 800a016 <__ascii_wctomb+0x16>
 800a002:	2aff      	cmp	r2, #255	; 0xff
 800a004:	bf85      	ittet	hi
 800a006:	238a      	movhi	r3, #138	; 0x8a
 800a008:	6003      	strhi	r3, [r0, #0]
 800a00a:	700a      	strbls	r2, [r1, #0]
 800a00c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a010:	bf98      	it	ls
 800a012:	2001      	movls	r0, #1
 800a014:	4770      	bx	lr
 800a016:	4608      	mov	r0, r1
 800a018:	4770      	bx	lr

0800a01a <abort>:
 800a01a:	b508      	push	{r3, lr}
 800a01c:	2006      	movs	r0, #6
 800a01e:	f000 fa89 	bl	800a534 <raise>
 800a022:	2001      	movs	r0, #1
 800a024:	f7f8 ff36 	bl	8002e94 <_exit>

0800a028 <__sfputc_r>:
 800a028:	6893      	ldr	r3, [r2, #8]
 800a02a:	3b01      	subs	r3, #1
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	b410      	push	{r4}
 800a030:	6093      	str	r3, [r2, #8]
 800a032:	da08      	bge.n	800a046 <__sfputc_r+0x1e>
 800a034:	6994      	ldr	r4, [r2, #24]
 800a036:	42a3      	cmp	r3, r4
 800a038:	db01      	blt.n	800a03e <__sfputc_r+0x16>
 800a03a:	290a      	cmp	r1, #10
 800a03c:	d103      	bne.n	800a046 <__sfputc_r+0x1e>
 800a03e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a042:	f000 b935 	b.w	800a2b0 <__swbuf_r>
 800a046:	6813      	ldr	r3, [r2, #0]
 800a048:	1c58      	adds	r0, r3, #1
 800a04a:	6010      	str	r0, [r2, #0]
 800a04c:	7019      	strb	r1, [r3, #0]
 800a04e:	4608      	mov	r0, r1
 800a050:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a054:	4770      	bx	lr

0800a056 <__sfputs_r>:
 800a056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a058:	4606      	mov	r6, r0
 800a05a:	460f      	mov	r7, r1
 800a05c:	4614      	mov	r4, r2
 800a05e:	18d5      	adds	r5, r2, r3
 800a060:	42ac      	cmp	r4, r5
 800a062:	d101      	bne.n	800a068 <__sfputs_r+0x12>
 800a064:	2000      	movs	r0, #0
 800a066:	e007      	b.n	800a078 <__sfputs_r+0x22>
 800a068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a06c:	463a      	mov	r2, r7
 800a06e:	4630      	mov	r0, r6
 800a070:	f7ff ffda 	bl	800a028 <__sfputc_r>
 800a074:	1c43      	adds	r3, r0, #1
 800a076:	d1f3      	bne.n	800a060 <__sfputs_r+0xa>
 800a078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a07c <_vfiprintf_r>:
 800a07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a080:	460d      	mov	r5, r1
 800a082:	b09d      	sub	sp, #116	; 0x74
 800a084:	4614      	mov	r4, r2
 800a086:	4698      	mov	r8, r3
 800a088:	4606      	mov	r6, r0
 800a08a:	b118      	cbz	r0, 800a094 <_vfiprintf_r+0x18>
 800a08c:	6a03      	ldr	r3, [r0, #32]
 800a08e:	b90b      	cbnz	r3, 800a094 <_vfiprintf_r+0x18>
 800a090:	f7fe faa0 	bl	80085d4 <__sinit>
 800a094:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a096:	07d9      	lsls	r1, r3, #31
 800a098:	d405      	bmi.n	800a0a6 <_vfiprintf_r+0x2a>
 800a09a:	89ab      	ldrh	r3, [r5, #12]
 800a09c:	059a      	lsls	r2, r3, #22
 800a09e:	d402      	bmi.n	800a0a6 <_vfiprintf_r+0x2a>
 800a0a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0a2:	f7fe fb04 	bl	80086ae <__retarget_lock_acquire_recursive>
 800a0a6:	89ab      	ldrh	r3, [r5, #12]
 800a0a8:	071b      	lsls	r3, r3, #28
 800a0aa:	d501      	bpl.n	800a0b0 <_vfiprintf_r+0x34>
 800a0ac:	692b      	ldr	r3, [r5, #16]
 800a0ae:	b99b      	cbnz	r3, 800a0d8 <_vfiprintf_r+0x5c>
 800a0b0:	4629      	mov	r1, r5
 800a0b2:	4630      	mov	r0, r6
 800a0b4:	f000 f93a 	bl	800a32c <__swsetup_r>
 800a0b8:	b170      	cbz	r0, 800a0d8 <_vfiprintf_r+0x5c>
 800a0ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0bc:	07dc      	lsls	r4, r3, #31
 800a0be:	d504      	bpl.n	800a0ca <_vfiprintf_r+0x4e>
 800a0c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0c4:	b01d      	add	sp, #116	; 0x74
 800a0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ca:	89ab      	ldrh	r3, [r5, #12]
 800a0cc:	0598      	lsls	r0, r3, #22
 800a0ce:	d4f7      	bmi.n	800a0c0 <_vfiprintf_r+0x44>
 800a0d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0d2:	f7fe faed 	bl	80086b0 <__retarget_lock_release_recursive>
 800a0d6:	e7f3      	b.n	800a0c0 <_vfiprintf_r+0x44>
 800a0d8:	2300      	movs	r3, #0
 800a0da:	9309      	str	r3, [sp, #36]	; 0x24
 800a0dc:	2320      	movs	r3, #32
 800a0de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0e6:	2330      	movs	r3, #48	; 0x30
 800a0e8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a29c <_vfiprintf_r+0x220>
 800a0ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0f0:	f04f 0901 	mov.w	r9, #1
 800a0f4:	4623      	mov	r3, r4
 800a0f6:	469a      	mov	sl, r3
 800a0f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0fc:	b10a      	cbz	r2, 800a102 <_vfiprintf_r+0x86>
 800a0fe:	2a25      	cmp	r2, #37	; 0x25
 800a100:	d1f9      	bne.n	800a0f6 <_vfiprintf_r+0x7a>
 800a102:	ebba 0b04 	subs.w	fp, sl, r4
 800a106:	d00b      	beq.n	800a120 <_vfiprintf_r+0xa4>
 800a108:	465b      	mov	r3, fp
 800a10a:	4622      	mov	r2, r4
 800a10c:	4629      	mov	r1, r5
 800a10e:	4630      	mov	r0, r6
 800a110:	f7ff ffa1 	bl	800a056 <__sfputs_r>
 800a114:	3001      	adds	r0, #1
 800a116:	f000 80a9 	beq.w	800a26c <_vfiprintf_r+0x1f0>
 800a11a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a11c:	445a      	add	r2, fp
 800a11e:	9209      	str	r2, [sp, #36]	; 0x24
 800a120:	f89a 3000 	ldrb.w	r3, [sl]
 800a124:	2b00      	cmp	r3, #0
 800a126:	f000 80a1 	beq.w	800a26c <_vfiprintf_r+0x1f0>
 800a12a:	2300      	movs	r3, #0
 800a12c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a130:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a134:	f10a 0a01 	add.w	sl, sl, #1
 800a138:	9304      	str	r3, [sp, #16]
 800a13a:	9307      	str	r3, [sp, #28]
 800a13c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a140:	931a      	str	r3, [sp, #104]	; 0x68
 800a142:	4654      	mov	r4, sl
 800a144:	2205      	movs	r2, #5
 800a146:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a14a:	4854      	ldr	r0, [pc, #336]	; (800a29c <_vfiprintf_r+0x220>)
 800a14c:	f7f6 f860 	bl	8000210 <memchr>
 800a150:	9a04      	ldr	r2, [sp, #16]
 800a152:	b9d8      	cbnz	r0, 800a18c <_vfiprintf_r+0x110>
 800a154:	06d1      	lsls	r1, r2, #27
 800a156:	bf44      	itt	mi
 800a158:	2320      	movmi	r3, #32
 800a15a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a15e:	0713      	lsls	r3, r2, #28
 800a160:	bf44      	itt	mi
 800a162:	232b      	movmi	r3, #43	; 0x2b
 800a164:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a168:	f89a 3000 	ldrb.w	r3, [sl]
 800a16c:	2b2a      	cmp	r3, #42	; 0x2a
 800a16e:	d015      	beq.n	800a19c <_vfiprintf_r+0x120>
 800a170:	9a07      	ldr	r2, [sp, #28]
 800a172:	4654      	mov	r4, sl
 800a174:	2000      	movs	r0, #0
 800a176:	f04f 0c0a 	mov.w	ip, #10
 800a17a:	4621      	mov	r1, r4
 800a17c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a180:	3b30      	subs	r3, #48	; 0x30
 800a182:	2b09      	cmp	r3, #9
 800a184:	d94d      	bls.n	800a222 <_vfiprintf_r+0x1a6>
 800a186:	b1b0      	cbz	r0, 800a1b6 <_vfiprintf_r+0x13a>
 800a188:	9207      	str	r2, [sp, #28]
 800a18a:	e014      	b.n	800a1b6 <_vfiprintf_r+0x13a>
 800a18c:	eba0 0308 	sub.w	r3, r0, r8
 800a190:	fa09 f303 	lsl.w	r3, r9, r3
 800a194:	4313      	orrs	r3, r2
 800a196:	9304      	str	r3, [sp, #16]
 800a198:	46a2      	mov	sl, r4
 800a19a:	e7d2      	b.n	800a142 <_vfiprintf_r+0xc6>
 800a19c:	9b03      	ldr	r3, [sp, #12]
 800a19e:	1d19      	adds	r1, r3, #4
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	9103      	str	r1, [sp, #12]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	bfbb      	ittet	lt
 800a1a8:	425b      	neglt	r3, r3
 800a1aa:	f042 0202 	orrlt.w	r2, r2, #2
 800a1ae:	9307      	strge	r3, [sp, #28]
 800a1b0:	9307      	strlt	r3, [sp, #28]
 800a1b2:	bfb8      	it	lt
 800a1b4:	9204      	strlt	r2, [sp, #16]
 800a1b6:	7823      	ldrb	r3, [r4, #0]
 800a1b8:	2b2e      	cmp	r3, #46	; 0x2e
 800a1ba:	d10c      	bne.n	800a1d6 <_vfiprintf_r+0x15a>
 800a1bc:	7863      	ldrb	r3, [r4, #1]
 800a1be:	2b2a      	cmp	r3, #42	; 0x2a
 800a1c0:	d134      	bne.n	800a22c <_vfiprintf_r+0x1b0>
 800a1c2:	9b03      	ldr	r3, [sp, #12]
 800a1c4:	1d1a      	adds	r2, r3, #4
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	9203      	str	r2, [sp, #12]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	bfb8      	it	lt
 800a1ce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a1d2:	3402      	adds	r4, #2
 800a1d4:	9305      	str	r3, [sp, #20]
 800a1d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a2ac <_vfiprintf_r+0x230>
 800a1da:	7821      	ldrb	r1, [r4, #0]
 800a1dc:	2203      	movs	r2, #3
 800a1de:	4650      	mov	r0, sl
 800a1e0:	f7f6 f816 	bl	8000210 <memchr>
 800a1e4:	b138      	cbz	r0, 800a1f6 <_vfiprintf_r+0x17a>
 800a1e6:	9b04      	ldr	r3, [sp, #16]
 800a1e8:	eba0 000a 	sub.w	r0, r0, sl
 800a1ec:	2240      	movs	r2, #64	; 0x40
 800a1ee:	4082      	lsls	r2, r0
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	3401      	adds	r4, #1
 800a1f4:	9304      	str	r3, [sp, #16]
 800a1f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1fa:	4829      	ldr	r0, [pc, #164]	; (800a2a0 <_vfiprintf_r+0x224>)
 800a1fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a200:	2206      	movs	r2, #6
 800a202:	f7f6 f805 	bl	8000210 <memchr>
 800a206:	2800      	cmp	r0, #0
 800a208:	d03f      	beq.n	800a28a <_vfiprintf_r+0x20e>
 800a20a:	4b26      	ldr	r3, [pc, #152]	; (800a2a4 <_vfiprintf_r+0x228>)
 800a20c:	bb1b      	cbnz	r3, 800a256 <_vfiprintf_r+0x1da>
 800a20e:	9b03      	ldr	r3, [sp, #12]
 800a210:	3307      	adds	r3, #7
 800a212:	f023 0307 	bic.w	r3, r3, #7
 800a216:	3308      	adds	r3, #8
 800a218:	9303      	str	r3, [sp, #12]
 800a21a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a21c:	443b      	add	r3, r7
 800a21e:	9309      	str	r3, [sp, #36]	; 0x24
 800a220:	e768      	b.n	800a0f4 <_vfiprintf_r+0x78>
 800a222:	fb0c 3202 	mla	r2, ip, r2, r3
 800a226:	460c      	mov	r4, r1
 800a228:	2001      	movs	r0, #1
 800a22a:	e7a6      	b.n	800a17a <_vfiprintf_r+0xfe>
 800a22c:	2300      	movs	r3, #0
 800a22e:	3401      	adds	r4, #1
 800a230:	9305      	str	r3, [sp, #20]
 800a232:	4619      	mov	r1, r3
 800a234:	f04f 0c0a 	mov.w	ip, #10
 800a238:	4620      	mov	r0, r4
 800a23a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a23e:	3a30      	subs	r2, #48	; 0x30
 800a240:	2a09      	cmp	r2, #9
 800a242:	d903      	bls.n	800a24c <_vfiprintf_r+0x1d0>
 800a244:	2b00      	cmp	r3, #0
 800a246:	d0c6      	beq.n	800a1d6 <_vfiprintf_r+0x15a>
 800a248:	9105      	str	r1, [sp, #20]
 800a24a:	e7c4      	b.n	800a1d6 <_vfiprintf_r+0x15a>
 800a24c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a250:	4604      	mov	r4, r0
 800a252:	2301      	movs	r3, #1
 800a254:	e7f0      	b.n	800a238 <_vfiprintf_r+0x1bc>
 800a256:	ab03      	add	r3, sp, #12
 800a258:	9300      	str	r3, [sp, #0]
 800a25a:	462a      	mov	r2, r5
 800a25c:	4b12      	ldr	r3, [pc, #72]	; (800a2a8 <_vfiprintf_r+0x22c>)
 800a25e:	a904      	add	r1, sp, #16
 800a260:	4630      	mov	r0, r6
 800a262:	f7fd fd65 	bl	8007d30 <_printf_float>
 800a266:	4607      	mov	r7, r0
 800a268:	1c78      	adds	r0, r7, #1
 800a26a:	d1d6      	bne.n	800a21a <_vfiprintf_r+0x19e>
 800a26c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a26e:	07d9      	lsls	r1, r3, #31
 800a270:	d405      	bmi.n	800a27e <_vfiprintf_r+0x202>
 800a272:	89ab      	ldrh	r3, [r5, #12]
 800a274:	059a      	lsls	r2, r3, #22
 800a276:	d402      	bmi.n	800a27e <_vfiprintf_r+0x202>
 800a278:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a27a:	f7fe fa19 	bl	80086b0 <__retarget_lock_release_recursive>
 800a27e:	89ab      	ldrh	r3, [r5, #12]
 800a280:	065b      	lsls	r3, r3, #25
 800a282:	f53f af1d 	bmi.w	800a0c0 <_vfiprintf_r+0x44>
 800a286:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a288:	e71c      	b.n	800a0c4 <_vfiprintf_r+0x48>
 800a28a:	ab03      	add	r3, sp, #12
 800a28c:	9300      	str	r3, [sp, #0]
 800a28e:	462a      	mov	r2, r5
 800a290:	4b05      	ldr	r3, [pc, #20]	; (800a2a8 <_vfiprintf_r+0x22c>)
 800a292:	a904      	add	r1, sp, #16
 800a294:	4630      	mov	r0, r6
 800a296:	f7fd ffef 	bl	8008278 <_printf_i>
 800a29a:	e7e4      	b.n	800a266 <_vfiprintf_r+0x1ea>
 800a29c:	0800a903 	.word	0x0800a903
 800a2a0:	0800a90d 	.word	0x0800a90d
 800a2a4:	08007d31 	.word	0x08007d31
 800a2a8:	0800a057 	.word	0x0800a057
 800a2ac:	0800a909 	.word	0x0800a909

0800a2b0 <__swbuf_r>:
 800a2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2b2:	460e      	mov	r6, r1
 800a2b4:	4614      	mov	r4, r2
 800a2b6:	4605      	mov	r5, r0
 800a2b8:	b118      	cbz	r0, 800a2c2 <__swbuf_r+0x12>
 800a2ba:	6a03      	ldr	r3, [r0, #32]
 800a2bc:	b90b      	cbnz	r3, 800a2c2 <__swbuf_r+0x12>
 800a2be:	f7fe f989 	bl	80085d4 <__sinit>
 800a2c2:	69a3      	ldr	r3, [r4, #24]
 800a2c4:	60a3      	str	r3, [r4, #8]
 800a2c6:	89a3      	ldrh	r3, [r4, #12]
 800a2c8:	071a      	lsls	r2, r3, #28
 800a2ca:	d525      	bpl.n	800a318 <__swbuf_r+0x68>
 800a2cc:	6923      	ldr	r3, [r4, #16]
 800a2ce:	b31b      	cbz	r3, 800a318 <__swbuf_r+0x68>
 800a2d0:	6823      	ldr	r3, [r4, #0]
 800a2d2:	6922      	ldr	r2, [r4, #16]
 800a2d4:	1a98      	subs	r0, r3, r2
 800a2d6:	6963      	ldr	r3, [r4, #20]
 800a2d8:	b2f6      	uxtb	r6, r6
 800a2da:	4283      	cmp	r3, r0
 800a2dc:	4637      	mov	r7, r6
 800a2de:	dc04      	bgt.n	800a2ea <__swbuf_r+0x3a>
 800a2e0:	4621      	mov	r1, r4
 800a2e2:	4628      	mov	r0, r5
 800a2e4:	f7ff f990 	bl	8009608 <_fflush_r>
 800a2e8:	b9e0      	cbnz	r0, 800a324 <__swbuf_r+0x74>
 800a2ea:	68a3      	ldr	r3, [r4, #8]
 800a2ec:	3b01      	subs	r3, #1
 800a2ee:	60a3      	str	r3, [r4, #8]
 800a2f0:	6823      	ldr	r3, [r4, #0]
 800a2f2:	1c5a      	adds	r2, r3, #1
 800a2f4:	6022      	str	r2, [r4, #0]
 800a2f6:	701e      	strb	r6, [r3, #0]
 800a2f8:	6962      	ldr	r2, [r4, #20]
 800a2fa:	1c43      	adds	r3, r0, #1
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d004      	beq.n	800a30a <__swbuf_r+0x5a>
 800a300:	89a3      	ldrh	r3, [r4, #12]
 800a302:	07db      	lsls	r3, r3, #31
 800a304:	d506      	bpl.n	800a314 <__swbuf_r+0x64>
 800a306:	2e0a      	cmp	r6, #10
 800a308:	d104      	bne.n	800a314 <__swbuf_r+0x64>
 800a30a:	4621      	mov	r1, r4
 800a30c:	4628      	mov	r0, r5
 800a30e:	f7ff f97b 	bl	8009608 <_fflush_r>
 800a312:	b938      	cbnz	r0, 800a324 <__swbuf_r+0x74>
 800a314:	4638      	mov	r0, r7
 800a316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a318:	4621      	mov	r1, r4
 800a31a:	4628      	mov	r0, r5
 800a31c:	f000 f806 	bl	800a32c <__swsetup_r>
 800a320:	2800      	cmp	r0, #0
 800a322:	d0d5      	beq.n	800a2d0 <__swbuf_r+0x20>
 800a324:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a328:	e7f4      	b.n	800a314 <__swbuf_r+0x64>
	...

0800a32c <__swsetup_r>:
 800a32c:	b538      	push	{r3, r4, r5, lr}
 800a32e:	4b2a      	ldr	r3, [pc, #168]	; (800a3d8 <__swsetup_r+0xac>)
 800a330:	4605      	mov	r5, r0
 800a332:	6818      	ldr	r0, [r3, #0]
 800a334:	460c      	mov	r4, r1
 800a336:	b118      	cbz	r0, 800a340 <__swsetup_r+0x14>
 800a338:	6a03      	ldr	r3, [r0, #32]
 800a33a:	b90b      	cbnz	r3, 800a340 <__swsetup_r+0x14>
 800a33c:	f7fe f94a 	bl	80085d4 <__sinit>
 800a340:	89a3      	ldrh	r3, [r4, #12]
 800a342:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a346:	0718      	lsls	r0, r3, #28
 800a348:	d422      	bmi.n	800a390 <__swsetup_r+0x64>
 800a34a:	06d9      	lsls	r1, r3, #27
 800a34c:	d407      	bmi.n	800a35e <__swsetup_r+0x32>
 800a34e:	2309      	movs	r3, #9
 800a350:	602b      	str	r3, [r5, #0]
 800a352:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a356:	81a3      	strh	r3, [r4, #12]
 800a358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a35c:	e034      	b.n	800a3c8 <__swsetup_r+0x9c>
 800a35e:	0758      	lsls	r0, r3, #29
 800a360:	d512      	bpl.n	800a388 <__swsetup_r+0x5c>
 800a362:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a364:	b141      	cbz	r1, 800a378 <__swsetup_r+0x4c>
 800a366:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a36a:	4299      	cmp	r1, r3
 800a36c:	d002      	beq.n	800a374 <__swsetup_r+0x48>
 800a36e:	4628      	mov	r0, r5
 800a370:	f7ff fdd6 	bl	8009f20 <_free_r>
 800a374:	2300      	movs	r3, #0
 800a376:	6363      	str	r3, [r4, #52]	; 0x34
 800a378:	89a3      	ldrh	r3, [r4, #12]
 800a37a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a37e:	81a3      	strh	r3, [r4, #12]
 800a380:	2300      	movs	r3, #0
 800a382:	6063      	str	r3, [r4, #4]
 800a384:	6923      	ldr	r3, [r4, #16]
 800a386:	6023      	str	r3, [r4, #0]
 800a388:	89a3      	ldrh	r3, [r4, #12]
 800a38a:	f043 0308 	orr.w	r3, r3, #8
 800a38e:	81a3      	strh	r3, [r4, #12]
 800a390:	6923      	ldr	r3, [r4, #16]
 800a392:	b94b      	cbnz	r3, 800a3a8 <__swsetup_r+0x7c>
 800a394:	89a3      	ldrh	r3, [r4, #12]
 800a396:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a39a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a39e:	d003      	beq.n	800a3a8 <__swsetup_r+0x7c>
 800a3a0:	4621      	mov	r1, r4
 800a3a2:	4628      	mov	r0, r5
 800a3a4:	f000 f840 	bl	800a428 <__smakebuf_r>
 800a3a8:	89a0      	ldrh	r0, [r4, #12]
 800a3aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3ae:	f010 0301 	ands.w	r3, r0, #1
 800a3b2:	d00a      	beq.n	800a3ca <__swsetup_r+0x9e>
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	60a3      	str	r3, [r4, #8]
 800a3b8:	6963      	ldr	r3, [r4, #20]
 800a3ba:	425b      	negs	r3, r3
 800a3bc:	61a3      	str	r3, [r4, #24]
 800a3be:	6923      	ldr	r3, [r4, #16]
 800a3c0:	b943      	cbnz	r3, 800a3d4 <__swsetup_r+0xa8>
 800a3c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a3c6:	d1c4      	bne.n	800a352 <__swsetup_r+0x26>
 800a3c8:	bd38      	pop	{r3, r4, r5, pc}
 800a3ca:	0781      	lsls	r1, r0, #30
 800a3cc:	bf58      	it	pl
 800a3ce:	6963      	ldrpl	r3, [r4, #20]
 800a3d0:	60a3      	str	r3, [r4, #8]
 800a3d2:	e7f4      	b.n	800a3be <__swsetup_r+0x92>
 800a3d4:	2000      	movs	r0, #0
 800a3d6:	e7f7      	b.n	800a3c8 <__swsetup_r+0x9c>
 800a3d8:	2000008c 	.word	0x2000008c

0800a3dc <__swhatbuf_r>:
 800a3dc:	b570      	push	{r4, r5, r6, lr}
 800a3de:	460c      	mov	r4, r1
 800a3e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3e4:	2900      	cmp	r1, #0
 800a3e6:	b096      	sub	sp, #88	; 0x58
 800a3e8:	4615      	mov	r5, r2
 800a3ea:	461e      	mov	r6, r3
 800a3ec:	da0d      	bge.n	800a40a <__swhatbuf_r+0x2e>
 800a3ee:	89a3      	ldrh	r3, [r4, #12]
 800a3f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a3f4:	f04f 0100 	mov.w	r1, #0
 800a3f8:	bf0c      	ite	eq
 800a3fa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a3fe:	2340      	movne	r3, #64	; 0x40
 800a400:	2000      	movs	r0, #0
 800a402:	6031      	str	r1, [r6, #0]
 800a404:	602b      	str	r3, [r5, #0]
 800a406:	b016      	add	sp, #88	; 0x58
 800a408:	bd70      	pop	{r4, r5, r6, pc}
 800a40a:	466a      	mov	r2, sp
 800a40c:	f000 f848 	bl	800a4a0 <_fstat_r>
 800a410:	2800      	cmp	r0, #0
 800a412:	dbec      	blt.n	800a3ee <__swhatbuf_r+0x12>
 800a414:	9901      	ldr	r1, [sp, #4]
 800a416:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a41a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a41e:	4259      	negs	r1, r3
 800a420:	4159      	adcs	r1, r3
 800a422:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a426:	e7eb      	b.n	800a400 <__swhatbuf_r+0x24>

0800a428 <__smakebuf_r>:
 800a428:	898b      	ldrh	r3, [r1, #12]
 800a42a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a42c:	079d      	lsls	r5, r3, #30
 800a42e:	4606      	mov	r6, r0
 800a430:	460c      	mov	r4, r1
 800a432:	d507      	bpl.n	800a444 <__smakebuf_r+0x1c>
 800a434:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a438:	6023      	str	r3, [r4, #0]
 800a43a:	6123      	str	r3, [r4, #16]
 800a43c:	2301      	movs	r3, #1
 800a43e:	6163      	str	r3, [r4, #20]
 800a440:	b002      	add	sp, #8
 800a442:	bd70      	pop	{r4, r5, r6, pc}
 800a444:	ab01      	add	r3, sp, #4
 800a446:	466a      	mov	r2, sp
 800a448:	f7ff ffc8 	bl	800a3dc <__swhatbuf_r>
 800a44c:	9900      	ldr	r1, [sp, #0]
 800a44e:	4605      	mov	r5, r0
 800a450:	4630      	mov	r0, r6
 800a452:	f7fe ffd3 	bl	80093fc <_malloc_r>
 800a456:	b948      	cbnz	r0, 800a46c <__smakebuf_r+0x44>
 800a458:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a45c:	059a      	lsls	r2, r3, #22
 800a45e:	d4ef      	bmi.n	800a440 <__smakebuf_r+0x18>
 800a460:	f023 0303 	bic.w	r3, r3, #3
 800a464:	f043 0302 	orr.w	r3, r3, #2
 800a468:	81a3      	strh	r3, [r4, #12]
 800a46a:	e7e3      	b.n	800a434 <__smakebuf_r+0xc>
 800a46c:	89a3      	ldrh	r3, [r4, #12]
 800a46e:	6020      	str	r0, [r4, #0]
 800a470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a474:	81a3      	strh	r3, [r4, #12]
 800a476:	9b00      	ldr	r3, [sp, #0]
 800a478:	6163      	str	r3, [r4, #20]
 800a47a:	9b01      	ldr	r3, [sp, #4]
 800a47c:	6120      	str	r0, [r4, #16]
 800a47e:	b15b      	cbz	r3, 800a498 <__smakebuf_r+0x70>
 800a480:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a484:	4630      	mov	r0, r6
 800a486:	f000 f81d 	bl	800a4c4 <_isatty_r>
 800a48a:	b128      	cbz	r0, 800a498 <__smakebuf_r+0x70>
 800a48c:	89a3      	ldrh	r3, [r4, #12]
 800a48e:	f023 0303 	bic.w	r3, r3, #3
 800a492:	f043 0301 	orr.w	r3, r3, #1
 800a496:	81a3      	strh	r3, [r4, #12]
 800a498:	89a3      	ldrh	r3, [r4, #12]
 800a49a:	431d      	orrs	r5, r3
 800a49c:	81a5      	strh	r5, [r4, #12]
 800a49e:	e7cf      	b.n	800a440 <__smakebuf_r+0x18>

0800a4a0 <_fstat_r>:
 800a4a0:	b538      	push	{r3, r4, r5, lr}
 800a4a2:	4d07      	ldr	r5, [pc, #28]	; (800a4c0 <_fstat_r+0x20>)
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	4604      	mov	r4, r0
 800a4a8:	4608      	mov	r0, r1
 800a4aa:	4611      	mov	r1, r2
 800a4ac:	602b      	str	r3, [r5, #0]
 800a4ae:	f7f8 fd40 	bl	8002f32 <_fstat>
 800a4b2:	1c43      	adds	r3, r0, #1
 800a4b4:	d102      	bne.n	800a4bc <_fstat_r+0x1c>
 800a4b6:	682b      	ldr	r3, [r5, #0]
 800a4b8:	b103      	cbz	r3, 800a4bc <_fstat_r+0x1c>
 800a4ba:	6023      	str	r3, [r4, #0]
 800a4bc:	bd38      	pop	{r3, r4, r5, pc}
 800a4be:	bf00      	nop
 800a4c0:	20000734 	.word	0x20000734

0800a4c4 <_isatty_r>:
 800a4c4:	b538      	push	{r3, r4, r5, lr}
 800a4c6:	4d06      	ldr	r5, [pc, #24]	; (800a4e0 <_isatty_r+0x1c>)
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	4604      	mov	r4, r0
 800a4cc:	4608      	mov	r0, r1
 800a4ce:	602b      	str	r3, [r5, #0]
 800a4d0:	f7f8 fd3f 	bl	8002f52 <_isatty>
 800a4d4:	1c43      	adds	r3, r0, #1
 800a4d6:	d102      	bne.n	800a4de <_isatty_r+0x1a>
 800a4d8:	682b      	ldr	r3, [r5, #0]
 800a4da:	b103      	cbz	r3, 800a4de <_isatty_r+0x1a>
 800a4dc:	6023      	str	r3, [r4, #0]
 800a4de:	bd38      	pop	{r3, r4, r5, pc}
 800a4e0:	20000734 	.word	0x20000734

0800a4e4 <_raise_r>:
 800a4e4:	291f      	cmp	r1, #31
 800a4e6:	b538      	push	{r3, r4, r5, lr}
 800a4e8:	4604      	mov	r4, r0
 800a4ea:	460d      	mov	r5, r1
 800a4ec:	d904      	bls.n	800a4f8 <_raise_r+0x14>
 800a4ee:	2316      	movs	r3, #22
 800a4f0:	6003      	str	r3, [r0, #0]
 800a4f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4f6:	bd38      	pop	{r3, r4, r5, pc}
 800a4f8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a4fa:	b112      	cbz	r2, 800a502 <_raise_r+0x1e>
 800a4fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a500:	b94b      	cbnz	r3, 800a516 <_raise_r+0x32>
 800a502:	4620      	mov	r0, r4
 800a504:	f000 f830 	bl	800a568 <_getpid_r>
 800a508:	462a      	mov	r2, r5
 800a50a:	4601      	mov	r1, r0
 800a50c:	4620      	mov	r0, r4
 800a50e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a512:	f000 b817 	b.w	800a544 <_kill_r>
 800a516:	2b01      	cmp	r3, #1
 800a518:	d00a      	beq.n	800a530 <_raise_r+0x4c>
 800a51a:	1c59      	adds	r1, r3, #1
 800a51c:	d103      	bne.n	800a526 <_raise_r+0x42>
 800a51e:	2316      	movs	r3, #22
 800a520:	6003      	str	r3, [r0, #0]
 800a522:	2001      	movs	r0, #1
 800a524:	e7e7      	b.n	800a4f6 <_raise_r+0x12>
 800a526:	2400      	movs	r4, #0
 800a528:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a52c:	4628      	mov	r0, r5
 800a52e:	4798      	blx	r3
 800a530:	2000      	movs	r0, #0
 800a532:	e7e0      	b.n	800a4f6 <_raise_r+0x12>

0800a534 <raise>:
 800a534:	4b02      	ldr	r3, [pc, #8]	; (800a540 <raise+0xc>)
 800a536:	4601      	mov	r1, r0
 800a538:	6818      	ldr	r0, [r3, #0]
 800a53a:	f7ff bfd3 	b.w	800a4e4 <_raise_r>
 800a53e:	bf00      	nop
 800a540:	2000008c 	.word	0x2000008c

0800a544 <_kill_r>:
 800a544:	b538      	push	{r3, r4, r5, lr}
 800a546:	4d07      	ldr	r5, [pc, #28]	; (800a564 <_kill_r+0x20>)
 800a548:	2300      	movs	r3, #0
 800a54a:	4604      	mov	r4, r0
 800a54c:	4608      	mov	r0, r1
 800a54e:	4611      	mov	r1, r2
 800a550:	602b      	str	r3, [r5, #0]
 800a552:	f7f8 fc8f 	bl	8002e74 <_kill>
 800a556:	1c43      	adds	r3, r0, #1
 800a558:	d102      	bne.n	800a560 <_kill_r+0x1c>
 800a55a:	682b      	ldr	r3, [r5, #0]
 800a55c:	b103      	cbz	r3, 800a560 <_kill_r+0x1c>
 800a55e:	6023      	str	r3, [r4, #0]
 800a560:	bd38      	pop	{r3, r4, r5, pc}
 800a562:	bf00      	nop
 800a564:	20000734 	.word	0x20000734

0800a568 <_getpid_r>:
 800a568:	f7f8 bc7c 	b.w	8002e64 <_getpid>

0800a56c <_init>:
 800a56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a56e:	bf00      	nop
 800a570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a572:	bc08      	pop	{r3}
 800a574:	469e      	mov	lr, r3
 800a576:	4770      	bx	lr

0800a578 <_fini>:
 800a578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a57a:	bf00      	nop
 800a57c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a57e:	bc08      	pop	{r3}
 800a580:	469e      	mov	lr, r3
 800a582:	4770      	bx	lr
