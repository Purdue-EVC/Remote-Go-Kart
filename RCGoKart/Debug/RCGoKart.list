
RCGoKart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b60  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08006d24  08006d24  00016d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d3c  08006d3c  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08006d3c  08006d3c  00016d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d44  08006d44  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d44  08006d44  00016d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d48  08006d48  00016d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08006d4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  20000024  08006d70  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000414  08006d70  00020414  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014ca0  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000292a  00000000  00000000  00034d37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a8  00000000  00000000  00037668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f96  00000000  00000000  00038a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a40  00000000  00000000  000399a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017cdb  00000000  00000000  0005e3e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7257  00000000  00000000  000760c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000055cc  00000000  00000000  0015d318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001628e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000024 	.word	0x20000024
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08006d0c 	.word	0x08006d0c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000028 	.word	0x20000028
 8000200:	08006d0c 	.word	0x08006d0c

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	; 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	3c01      	subs	r4, #1
 8000340:	bf28      	it	cs
 8000342:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000346:	d2e9      	bcs.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ee:	bf08      	it	eq
 80004f0:	4770      	bxeq	lr
 80004f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f6:	bf04      	itt	eq
 80004f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000508:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800050c:	e71c      	b.n	8000348 <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_ul2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	e00a      	b.n	8000536 <__aeabi_l2d+0x16>

08000520 <__aeabi_l2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052e:	d502      	bpl.n	8000536 <__aeabi_l2d+0x16>
 8000530:	4240      	negs	r0, r0
 8000532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000536:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000542:	f43f aed8 	beq.w	80002f6 <__adddf3+0xe6>
 8000546:	f04f 0203 	mov.w	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000556:	bf18      	it	ne
 8000558:	3203      	addne	r2, #3
 800055a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055e:	f1c2 0320 	rsb	r3, r2, #32
 8000562:	fa00 fc03 	lsl.w	ip, r0, r3
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 fe03 	lsl.w	lr, r1, r3
 800056e:	ea40 000e 	orr.w	r0, r0, lr
 8000572:	fa21 f102 	lsr.w	r1, r1, r2
 8000576:	4414      	add	r4, r2
 8000578:	e6bd      	b.n	80002f6 <__adddf3+0xe6>
 800057a:	bf00      	nop

0800057c <__aeabi_d2f>:
 800057c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000580:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000584:	bf24      	itt	cs
 8000586:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800058a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800058e:	d90d      	bls.n	80005ac <__aeabi_d2f+0x30>
 8000590:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000594:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000598:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800059c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80005a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005a4:	bf08      	it	eq
 80005a6:	f020 0001 	biceq.w	r0, r0, #1
 80005aa:	4770      	bx	lr
 80005ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80005b0:	d121      	bne.n	80005f6 <__aeabi_d2f+0x7a>
 80005b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80005b6:	bfbc      	itt	lt
 80005b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80005bc:	4770      	bxlt	lr
 80005be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005c6:	f1c2 0218 	rsb	r2, r2, #24
 80005ca:	f1c2 0c20 	rsb	ip, r2, #32
 80005ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	bf18      	it	ne
 80005d8:	f040 0001 	orrne.w	r0, r0, #1
 80005dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005e8:	ea40 000c 	orr.w	r0, r0, ip
 80005ec:	fa23 f302 	lsr.w	r3, r3, r2
 80005f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005f4:	e7cc      	b.n	8000590 <__aeabi_d2f+0x14>
 80005f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005fa:	d107      	bne.n	800060c <__aeabi_d2f+0x90>
 80005fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000600:	bf1e      	ittt	ne
 8000602:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000606:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800060a:	4770      	bxne	lr
 800060c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000610:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000614:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <__aeabi_uldivmod>:
 800061c:	b953      	cbnz	r3, 8000634 <__aeabi_uldivmod+0x18>
 800061e:	b94a      	cbnz	r2, 8000634 <__aeabi_uldivmod+0x18>
 8000620:	2900      	cmp	r1, #0
 8000622:	bf08      	it	eq
 8000624:	2800      	cmpeq	r0, #0
 8000626:	bf1c      	itt	ne
 8000628:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800062c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000630:	f000 b970 	b.w	8000914 <__aeabi_idiv0>
 8000634:	f1ad 0c08 	sub.w	ip, sp, #8
 8000638:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800063c:	f000 f806 	bl	800064c <__udivmoddi4>
 8000640:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000644:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000648:	b004      	add	sp, #16
 800064a:	4770      	bx	lr

0800064c <__udivmoddi4>:
 800064c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000650:	9e08      	ldr	r6, [sp, #32]
 8000652:	460d      	mov	r5, r1
 8000654:	4604      	mov	r4, r0
 8000656:	460f      	mov	r7, r1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d14a      	bne.n	80006f2 <__udivmoddi4+0xa6>
 800065c:	428a      	cmp	r2, r1
 800065e:	4694      	mov	ip, r2
 8000660:	d965      	bls.n	800072e <__udivmoddi4+0xe2>
 8000662:	fab2 f382 	clz	r3, r2
 8000666:	b143      	cbz	r3, 800067a <__udivmoddi4+0x2e>
 8000668:	fa02 fc03 	lsl.w	ip, r2, r3
 800066c:	f1c3 0220 	rsb	r2, r3, #32
 8000670:	409f      	lsls	r7, r3
 8000672:	fa20 f202 	lsr.w	r2, r0, r2
 8000676:	4317      	orrs	r7, r2
 8000678:	409c      	lsls	r4, r3
 800067a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800067e:	fa1f f58c 	uxth.w	r5, ip
 8000682:	fbb7 f1fe 	udiv	r1, r7, lr
 8000686:	0c22      	lsrs	r2, r4, #16
 8000688:	fb0e 7711 	mls	r7, lr, r1, r7
 800068c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000690:	fb01 f005 	mul.w	r0, r1, r5
 8000694:	4290      	cmp	r0, r2
 8000696:	d90a      	bls.n	80006ae <__udivmoddi4+0x62>
 8000698:	eb1c 0202 	adds.w	r2, ip, r2
 800069c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80006a0:	f080 811c 	bcs.w	80008dc <__udivmoddi4+0x290>
 80006a4:	4290      	cmp	r0, r2
 80006a6:	f240 8119 	bls.w	80008dc <__udivmoddi4+0x290>
 80006aa:	3902      	subs	r1, #2
 80006ac:	4462      	add	r2, ip
 80006ae:	1a12      	subs	r2, r2, r0
 80006b0:	b2a4      	uxth	r4, r4
 80006b2:	fbb2 f0fe 	udiv	r0, r2, lr
 80006b6:	fb0e 2210 	mls	r2, lr, r0, r2
 80006ba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80006be:	fb00 f505 	mul.w	r5, r0, r5
 80006c2:	42a5      	cmp	r5, r4
 80006c4:	d90a      	bls.n	80006dc <__udivmoddi4+0x90>
 80006c6:	eb1c 0404 	adds.w	r4, ip, r4
 80006ca:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80006ce:	f080 8107 	bcs.w	80008e0 <__udivmoddi4+0x294>
 80006d2:	42a5      	cmp	r5, r4
 80006d4:	f240 8104 	bls.w	80008e0 <__udivmoddi4+0x294>
 80006d8:	4464      	add	r4, ip
 80006da:	3802      	subs	r0, #2
 80006dc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006e0:	1b64      	subs	r4, r4, r5
 80006e2:	2100      	movs	r1, #0
 80006e4:	b11e      	cbz	r6, 80006ee <__udivmoddi4+0xa2>
 80006e6:	40dc      	lsrs	r4, r3
 80006e8:	2300      	movs	r3, #0
 80006ea:	e9c6 4300 	strd	r4, r3, [r6]
 80006ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006f2:	428b      	cmp	r3, r1
 80006f4:	d908      	bls.n	8000708 <__udivmoddi4+0xbc>
 80006f6:	2e00      	cmp	r6, #0
 80006f8:	f000 80ed 	beq.w	80008d6 <__udivmoddi4+0x28a>
 80006fc:	2100      	movs	r1, #0
 80006fe:	e9c6 0500 	strd	r0, r5, [r6]
 8000702:	4608      	mov	r0, r1
 8000704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000708:	fab3 f183 	clz	r1, r3
 800070c:	2900      	cmp	r1, #0
 800070e:	d149      	bne.n	80007a4 <__udivmoddi4+0x158>
 8000710:	42ab      	cmp	r3, r5
 8000712:	d302      	bcc.n	800071a <__udivmoddi4+0xce>
 8000714:	4282      	cmp	r2, r0
 8000716:	f200 80f8 	bhi.w	800090a <__udivmoddi4+0x2be>
 800071a:	1a84      	subs	r4, r0, r2
 800071c:	eb65 0203 	sbc.w	r2, r5, r3
 8000720:	2001      	movs	r0, #1
 8000722:	4617      	mov	r7, r2
 8000724:	2e00      	cmp	r6, #0
 8000726:	d0e2      	beq.n	80006ee <__udivmoddi4+0xa2>
 8000728:	e9c6 4700 	strd	r4, r7, [r6]
 800072c:	e7df      	b.n	80006ee <__udivmoddi4+0xa2>
 800072e:	b902      	cbnz	r2, 8000732 <__udivmoddi4+0xe6>
 8000730:	deff      	udf	#255	; 0xff
 8000732:	fab2 f382 	clz	r3, r2
 8000736:	2b00      	cmp	r3, #0
 8000738:	f040 8090 	bne.w	800085c <__udivmoddi4+0x210>
 800073c:	1a8a      	subs	r2, r1, r2
 800073e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000742:	fa1f fe8c 	uxth.w	lr, ip
 8000746:	2101      	movs	r1, #1
 8000748:	fbb2 f5f7 	udiv	r5, r2, r7
 800074c:	fb07 2015 	mls	r0, r7, r5, r2
 8000750:	0c22      	lsrs	r2, r4, #16
 8000752:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000756:	fb0e f005 	mul.w	r0, lr, r5
 800075a:	4290      	cmp	r0, r2
 800075c:	d908      	bls.n	8000770 <__udivmoddi4+0x124>
 800075e:	eb1c 0202 	adds.w	r2, ip, r2
 8000762:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000766:	d202      	bcs.n	800076e <__udivmoddi4+0x122>
 8000768:	4290      	cmp	r0, r2
 800076a:	f200 80cb 	bhi.w	8000904 <__udivmoddi4+0x2b8>
 800076e:	4645      	mov	r5, r8
 8000770:	1a12      	subs	r2, r2, r0
 8000772:	b2a4      	uxth	r4, r4
 8000774:	fbb2 f0f7 	udiv	r0, r2, r7
 8000778:	fb07 2210 	mls	r2, r7, r0, r2
 800077c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000780:	fb0e fe00 	mul.w	lr, lr, r0
 8000784:	45a6      	cmp	lr, r4
 8000786:	d908      	bls.n	800079a <__udivmoddi4+0x14e>
 8000788:	eb1c 0404 	adds.w	r4, ip, r4
 800078c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000790:	d202      	bcs.n	8000798 <__udivmoddi4+0x14c>
 8000792:	45a6      	cmp	lr, r4
 8000794:	f200 80bb 	bhi.w	800090e <__udivmoddi4+0x2c2>
 8000798:	4610      	mov	r0, r2
 800079a:	eba4 040e 	sub.w	r4, r4, lr
 800079e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80007a2:	e79f      	b.n	80006e4 <__udivmoddi4+0x98>
 80007a4:	f1c1 0720 	rsb	r7, r1, #32
 80007a8:	408b      	lsls	r3, r1
 80007aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80007ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80007b2:	fa05 f401 	lsl.w	r4, r5, r1
 80007b6:	fa20 f307 	lsr.w	r3, r0, r7
 80007ba:	40fd      	lsrs	r5, r7
 80007bc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007c0:	4323      	orrs	r3, r4
 80007c2:	fbb5 f8f9 	udiv	r8, r5, r9
 80007c6:	fa1f fe8c 	uxth.w	lr, ip
 80007ca:	fb09 5518 	mls	r5, r9, r8, r5
 80007ce:	0c1c      	lsrs	r4, r3, #16
 80007d0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80007d4:	fb08 f50e 	mul.w	r5, r8, lr
 80007d8:	42a5      	cmp	r5, r4
 80007da:	fa02 f201 	lsl.w	r2, r2, r1
 80007de:	fa00 f001 	lsl.w	r0, r0, r1
 80007e2:	d90b      	bls.n	80007fc <__udivmoddi4+0x1b0>
 80007e4:	eb1c 0404 	adds.w	r4, ip, r4
 80007e8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80007ec:	f080 8088 	bcs.w	8000900 <__udivmoddi4+0x2b4>
 80007f0:	42a5      	cmp	r5, r4
 80007f2:	f240 8085 	bls.w	8000900 <__udivmoddi4+0x2b4>
 80007f6:	f1a8 0802 	sub.w	r8, r8, #2
 80007fa:	4464      	add	r4, ip
 80007fc:	1b64      	subs	r4, r4, r5
 80007fe:	b29d      	uxth	r5, r3
 8000800:	fbb4 f3f9 	udiv	r3, r4, r9
 8000804:	fb09 4413 	mls	r4, r9, r3, r4
 8000808:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800080c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000810:	45a6      	cmp	lr, r4
 8000812:	d908      	bls.n	8000826 <__udivmoddi4+0x1da>
 8000814:	eb1c 0404 	adds.w	r4, ip, r4
 8000818:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 800081c:	d26c      	bcs.n	80008f8 <__udivmoddi4+0x2ac>
 800081e:	45a6      	cmp	lr, r4
 8000820:	d96a      	bls.n	80008f8 <__udivmoddi4+0x2ac>
 8000822:	3b02      	subs	r3, #2
 8000824:	4464      	add	r4, ip
 8000826:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800082a:	fba3 9502 	umull	r9, r5, r3, r2
 800082e:	eba4 040e 	sub.w	r4, r4, lr
 8000832:	42ac      	cmp	r4, r5
 8000834:	46c8      	mov	r8, r9
 8000836:	46ae      	mov	lr, r5
 8000838:	d356      	bcc.n	80008e8 <__udivmoddi4+0x29c>
 800083a:	d053      	beq.n	80008e4 <__udivmoddi4+0x298>
 800083c:	b156      	cbz	r6, 8000854 <__udivmoddi4+0x208>
 800083e:	ebb0 0208 	subs.w	r2, r0, r8
 8000842:	eb64 040e 	sbc.w	r4, r4, lr
 8000846:	fa04 f707 	lsl.w	r7, r4, r7
 800084a:	40ca      	lsrs	r2, r1
 800084c:	40cc      	lsrs	r4, r1
 800084e:	4317      	orrs	r7, r2
 8000850:	e9c6 7400 	strd	r7, r4, [r6]
 8000854:	4618      	mov	r0, r3
 8000856:	2100      	movs	r1, #0
 8000858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800085c:	f1c3 0120 	rsb	r1, r3, #32
 8000860:	fa02 fc03 	lsl.w	ip, r2, r3
 8000864:	fa20 f201 	lsr.w	r2, r0, r1
 8000868:	fa25 f101 	lsr.w	r1, r5, r1
 800086c:	409d      	lsls	r5, r3
 800086e:	432a      	orrs	r2, r5
 8000870:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000874:	fa1f fe8c 	uxth.w	lr, ip
 8000878:	fbb1 f0f7 	udiv	r0, r1, r7
 800087c:	fb07 1510 	mls	r5, r7, r0, r1
 8000880:	0c11      	lsrs	r1, r2, #16
 8000882:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000886:	fb00 f50e 	mul.w	r5, r0, lr
 800088a:	428d      	cmp	r5, r1
 800088c:	fa04 f403 	lsl.w	r4, r4, r3
 8000890:	d908      	bls.n	80008a4 <__udivmoddi4+0x258>
 8000892:	eb1c 0101 	adds.w	r1, ip, r1
 8000896:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800089a:	d22f      	bcs.n	80008fc <__udivmoddi4+0x2b0>
 800089c:	428d      	cmp	r5, r1
 800089e:	d92d      	bls.n	80008fc <__udivmoddi4+0x2b0>
 80008a0:	3802      	subs	r0, #2
 80008a2:	4461      	add	r1, ip
 80008a4:	1b49      	subs	r1, r1, r5
 80008a6:	b292      	uxth	r2, r2
 80008a8:	fbb1 f5f7 	udiv	r5, r1, r7
 80008ac:	fb07 1115 	mls	r1, r7, r5, r1
 80008b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008b4:	fb05 f10e 	mul.w	r1, r5, lr
 80008b8:	4291      	cmp	r1, r2
 80008ba:	d908      	bls.n	80008ce <__udivmoddi4+0x282>
 80008bc:	eb1c 0202 	adds.w	r2, ip, r2
 80008c0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80008c4:	d216      	bcs.n	80008f4 <__udivmoddi4+0x2a8>
 80008c6:	4291      	cmp	r1, r2
 80008c8:	d914      	bls.n	80008f4 <__udivmoddi4+0x2a8>
 80008ca:	3d02      	subs	r5, #2
 80008cc:	4462      	add	r2, ip
 80008ce:	1a52      	subs	r2, r2, r1
 80008d0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80008d4:	e738      	b.n	8000748 <__udivmoddi4+0xfc>
 80008d6:	4631      	mov	r1, r6
 80008d8:	4630      	mov	r0, r6
 80008da:	e708      	b.n	80006ee <__udivmoddi4+0xa2>
 80008dc:	4639      	mov	r1, r7
 80008de:	e6e6      	b.n	80006ae <__udivmoddi4+0x62>
 80008e0:	4610      	mov	r0, r2
 80008e2:	e6fb      	b.n	80006dc <__udivmoddi4+0x90>
 80008e4:	4548      	cmp	r0, r9
 80008e6:	d2a9      	bcs.n	800083c <__udivmoddi4+0x1f0>
 80008e8:	ebb9 0802 	subs.w	r8, r9, r2
 80008ec:	eb65 0e0c 	sbc.w	lr, r5, ip
 80008f0:	3b01      	subs	r3, #1
 80008f2:	e7a3      	b.n	800083c <__udivmoddi4+0x1f0>
 80008f4:	4645      	mov	r5, r8
 80008f6:	e7ea      	b.n	80008ce <__udivmoddi4+0x282>
 80008f8:	462b      	mov	r3, r5
 80008fa:	e794      	b.n	8000826 <__udivmoddi4+0x1da>
 80008fc:	4640      	mov	r0, r8
 80008fe:	e7d1      	b.n	80008a4 <__udivmoddi4+0x258>
 8000900:	46d0      	mov	r8, sl
 8000902:	e77b      	b.n	80007fc <__udivmoddi4+0x1b0>
 8000904:	3d02      	subs	r5, #2
 8000906:	4462      	add	r2, ip
 8000908:	e732      	b.n	8000770 <__udivmoddi4+0x124>
 800090a:	4608      	mov	r0, r1
 800090c:	e70a      	b.n	8000724 <__udivmoddi4+0xd8>
 800090e:	4464      	add	r4, ip
 8000910:	3802      	subs	r0, #2
 8000912:	e742      	b.n	800079a <__udivmoddi4+0x14e>

08000914 <__aeabi_idiv0>:
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop

08000918 <HAL_TIM_IC_CaptureCallback>:

uint32_t ICValue = 0;
uint32_t Frequency = 0;
float Duty = 0;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // If the interrupt is triggered by channel 1
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	7f1b      	ldrb	r3, [r3, #28]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d124      	bne.n	8000972 <HAL_TIM_IC_CaptureCallback+0x5a>
	{
		// Read the IC value
		ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000928:	2100      	movs	r1, #0
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f005 f938 	bl	8005ba0 <HAL_TIM_ReadCapturedValue>
 8000930:	4603      	mov	r3, r0
 8000932:	4a12      	ldr	r2, [pc, #72]	; (800097c <HAL_TIM_IC_CaptureCallback+0x64>)
 8000934:	6013      	str	r3, [r2, #0]

		if (ICValue != 0)
 8000936:	4b11      	ldr	r3, [pc, #68]	; (800097c <HAL_TIM_IC_CaptureCallback+0x64>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d019      	beq.n	8000972 <HAL_TIM_IC_CaptureCallback+0x5a>
		{
			// calculate the Duty Cycle
			Duty = (HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) *100)/ICValue;
 800093e:	2104      	movs	r1, #4
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f005 f92d 	bl	8005ba0 <HAL_TIM_ReadCapturedValue>
 8000946:	4603      	mov	r3, r0
 8000948:	2264      	movs	r2, #100	; 0x64
 800094a:	fb03 f202 	mul.w	r2, r3, r2
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <HAL_TIM_IC_CaptureCallback+0x64>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	fbb2 f3f3 	udiv	r3, r2, r3
 8000956:	ee07 3a90 	vmov	s15, r3
 800095a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <HAL_TIM_IC_CaptureCallback+0x68>)
 8000960:	edc3 7a00 	vstr	s15, [r3]

			Frequency = 90000000/ICValue;
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <HAL_TIM_IC_CaptureCallback+0x64>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a06      	ldr	r2, [pc, #24]	; (8000984 <HAL_TIM_IC_CaptureCallback+0x6c>)
 800096a:	fbb2 f3f3 	udiv	r3, r2, r3
 800096e:	4a06      	ldr	r2, [pc, #24]	; (8000988 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000970:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200003dc 	.word	0x200003dc
 8000980:	200003e4 	.word	0x200003e4
 8000984:	055d4a80 	.word	0x055d4a80
 8000988:	200003e0 	.word	0x200003e0

0800098c <steeringInput>:
const uint32_t steeringInputAbsoluteMax = 180000;
const uint32_t steeringInputAbsoluteMin = 80000;
const uint32_t drivingInputAbsoluteMax = 180000;
const uint32_t drivingInputAbsoluteMin = 80000;

float steeringInput(uint32_t rawSteeringInput){
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	if(rawSteeringInput > currentSteeringInputMax && rawSteeringInput < steeringInputAbsoluteMax){
 8000994:	4b19      	ldr	r3, [pc, #100]	; (80009fc <steeringInput+0x70>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	429a      	cmp	r2, r3
 800099c:	d906      	bls.n	80009ac <steeringInput+0x20>
 800099e:	4a18      	ldr	r2, [pc, #96]	; (8000a00 <steeringInput+0x74>)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d202      	bcs.n	80009ac <steeringInput+0x20>
		currentSteeringInputMax = rawSteeringInput;
 80009a6:	4a15      	ldr	r2, [pc, #84]	; (80009fc <steeringInput+0x70>)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6013      	str	r3, [r2, #0]
	}
	if(rawSteeringInput < currentSteeringInputMin && rawSteeringInput > steeringInputAbsoluteMin){
 80009ac:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <steeringInput+0x78>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d206      	bcs.n	80009c4 <steeringInput+0x38>
 80009b6:	4a14      	ldr	r2, [pc, #80]	; (8000a08 <steeringInput+0x7c>)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d902      	bls.n	80009c4 <steeringInput+0x38>
		currentSteeringInputMin = rawSteeringInput;
 80009be:	4a11      	ldr	r2, [pc, #68]	; (8000a04 <steeringInput+0x78>)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6013      	str	r3, [r2, #0]
	}
	return (float)(rawSteeringInput-currentSteeringInputMin)/(currentSteeringInputMax-currentSteeringInputMin);
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <steeringInput+0x78>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	1ad3      	subs	r3, r2, r3
 80009cc:	ee07 3a90 	vmov	s15, r3
 80009d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <steeringInput+0x70>)
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <steeringInput+0x78>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	ee07 3a90 	vmov	s15, r3
 80009e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009e6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80009ea:	eef0 7a66 	vmov.f32	s15, s13
}
 80009ee:	eeb0 0a67 	vmov.f32	s0, s15
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	20000000 	.word	0x20000000
 8000a00:	0002bf20 	.word	0x0002bf20
 8000a04:	20000004 	.word	0x20000004
 8000a08:	00013880 	.word	0x00013880

08000a0c <drivingInput>:

float drivingInput(uint32_t rawDrivingInput){
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	if(rawDrivingInput > currentDrivingInputMax && rawDrivingInput < drivingInputAbsoluteMax){
 8000a14:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <drivingInput+0x70>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d906      	bls.n	8000a2c <drivingInput+0x20>
 8000a1e:	4a18      	ldr	r2, [pc, #96]	; (8000a80 <drivingInput+0x74>)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d202      	bcs.n	8000a2c <drivingInput+0x20>
		currentDrivingInputMax = rawDrivingInput;
 8000a26:	4a15      	ldr	r2, [pc, #84]	; (8000a7c <drivingInput+0x70>)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6013      	str	r3, [r2, #0]
	}
	if(rawDrivingInput < currentDrivingInputMin && rawDrivingInput > drivingInputAbsoluteMin){
 8000a2c:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <drivingInput+0x78>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d206      	bcs.n	8000a44 <drivingInput+0x38>
 8000a36:	4a14      	ldr	r2, [pc, #80]	; (8000a88 <drivingInput+0x7c>)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d902      	bls.n	8000a44 <drivingInput+0x38>
		currentDrivingInputMin = rawDrivingInput;
 8000a3e:	4a11      	ldr	r2, [pc, #68]	; (8000a84 <drivingInput+0x78>)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6013      	str	r3, [r2, #0]
	}
	return (float)(rawDrivingInput-currentDrivingInputMin)/(currentDrivingInputMax-currentDrivingInputMin);
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <drivingInput+0x78>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	1ad3      	subs	r3, r2, r3
 8000a4c:	ee07 3a90 	vmov	s15, r3
 8000a50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a54:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <drivingInput+0x70>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <drivingInput+0x78>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	ee07 3a90 	vmov	s15, r3
 8000a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a66:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000a6a:	eef0 7a66 	vmov.f32	s15, s13
}
 8000a6e:	eeb0 0a67 	vmov.f32	s0, s15
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	20000008 	.word	0x20000008
 8000a80:	0002bf20 	.word	0x0002bf20
 8000a84:	2000000c 	.word	0x2000000c
 8000a88:	00013880 	.word	0x00013880

08000a8c <getPIDPower>:
float integral = 0;
float pos = 0;
float pastError = 0;


float getPIDPower(float currentPosition, float requestPosition, float cycleTime){//New version:
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	ed87 0a03 	vstr	s0, [r7, #12]
 8000a96:	edc7 0a02 	vstr	s1, [r7, #8]
 8000a9a:	ed87 1a01 	vstr	s2, [r7, #4]
	error = requestPosition-currentPosition;
 8000a9e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000aa2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000aa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000aaa:	4b3a      	ldr	r3, [pc, #232]	; (8000b94 <getPIDPower+0x108>)
 8000aac:	edc3 7a00 	vstr	s15, [r3]
	integral = integral + (error * cycleTime);
 8000ab0:	4b38      	ldr	r3, [pc, #224]	; (8000b94 <getPIDPower+0x108>)
 8000ab2:	ed93 7a00 	vldr	s14, [r3]
 8000ab6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000aba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000abe:	4b36      	ldr	r3, [pc, #216]	; (8000b98 <getPIDPower+0x10c>)
 8000ac0:	edd3 7a00 	vldr	s15, [r3]
 8000ac4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ac8:	4b33      	ldr	r3, [pc, #204]	; (8000b98 <getPIDPower+0x10c>)
 8000aca:	edc3 7a00 	vstr	s15, [r3]
	derivative = (error-pastError)/cycleTime;
 8000ace:	4b31      	ldr	r3, [pc, #196]	; (8000b94 <getPIDPower+0x108>)
 8000ad0:	ed93 7a00 	vldr	s14, [r3]
 8000ad4:	4b31      	ldr	r3, [pc, #196]	; (8000b9c <getPIDPower+0x110>)
 8000ad6:	edd3 7a00 	vldr	s15, [r3]
 8000ada:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000ade:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ae2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ae6:	4b2e      	ldr	r3, [pc, #184]	; (8000ba0 <getPIDPower+0x114>)
 8000ae8:	edc3 7a00 	vstr	s15, [r3]
	pastError = error;
 8000aec:	4b29      	ldr	r3, [pc, #164]	; (8000b94 <getPIDPower+0x108>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a2a      	ldr	r2, [pc, #168]	; (8000b9c <getPIDPower+0x110>)
 8000af2:	6013      	str	r3, [r2, #0]
	pos = kP*error+kI*integral+kD*derivative+kOffset;
 8000af4:	4b2b      	ldr	r3, [pc, #172]	; (8000ba4 <getPIDPower+0x118>)
 8000af6:	ed93 7a00 	vldr	s14, [r3]
 8000afa:	4b26      	ldr	r3, [pc, #152]	; (8000b94 <getPIDPower+0x108>)
 8000afc:	edd3 7a00 	vldr	s15, [r3]
 8000b00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b04:	4b28      	ldr	r3, [pc, #160]	; (8000ba8 <getPIDPower+0x11c>)
 8000b06:	edd3 6a00 	vldr	s13, [r3]
 8000b0a:	4b23      	ldr	r3, [pc, #140]	; (8000b98 <getPIDPower+0x10c>)
 8000b0c:	edd3 7a00 	vldr	s15, [r3]
 8000b10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b18:	4b24      	ldr	r3, [pc, #144]	; (8000bac <getPIDPower+0x120>)
 8000b1a:	edd3 6a00 	vldr	s13, [r3]
 8000b1e:	4b20      	ldr	r3, [pc, #128]	; (8000ba0 <getPIDPower+0x114>)
 8000b20:	edd3 7a00 	vldr	s15, [r3]
 8000b24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b2c:	ee17 0a90 	vmov	r0, s15
 8000b30:	f7ff fccc 	bl	80004cc <__aeabi_f2d>
 8000b34:	f04f 0200 	mov.w	r2, #0
 8000b38:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <getPIDPower+0x124>)
 8000b3a:	f7ff fb69 	bl	8000210 <__adddf3>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	460b      	mov	r3, r1
 8000b42:	4610      	mov	r0, r2
 8000b44:	4619      	mov	r1, r3
 8000b46:	f7ff fd19 	bl	800057c <__aeabi_d2f>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	4a19      	ldr	r2, [pc, #100]	; (8000bb4 <getPIDPower+0x128>)
 8000b4e:	6013      	str	r3, [r2, #0]
	if(pos>1){
 8000b50:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <getPIDPower+0x128>)
 8000b52:	edd3 7a00 	vldr	s15, [r3]
 8000b56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000b5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b62:	dd02      	ble.n	8000b6a <getPIDPower+0xde>
		return 1;
 8000b64:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000b68:	e00c      	b.n	8000b84 <getPIDPower+0xf8>
	}
	else if(pos<0){
 8000b6a:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <getPIDPower+0x128>)
 8000b6c:	edd3 7a00 	vldr	s15, [r3]
 8000b70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b78:	d502      	bpl.n	8000b80 <getPIDPower+0xf4>
		return 0;
 8000b7a:	f04f 0300 	mov.w	r3, #0
 8000b7e:	e001      	b.n	8000b84 <getPIDPower+0xf8>
	}
	else{
		return pos;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <getPIDPower+0x128>)
 8000b82:	681b      	ldr	r3, [r3, #0]
	}
}
 8000b84:	ee07 3a90 	vmov	s15, r3
 8000b88:	eeb0 0a67 	vmov.f32	s0, s15
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200003f0 	.word	0x200003f0
 8000b98:	200003f8 	.word	0x200003f8
 8000b9c:	20000400 	.word	0x20000400
 8000ba0:	200003f4 	.word	0x200003f4
 8000ba4:	20000010 	.word	0x20000010
 8000ba8:	200003e8 	.word	0x200003e8
 8000bac:	200003ec 	.word	0x200003ec
 8000bb0:	3fe00000 	.word	0x3fe00000
 8000bb4:	200003fc 	.word	0x200003fc

08000bb8 <getEncoderAngle>:

float getEncoderAngle(){
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
	return (((int)(36000*((TIM3->CCR2-kSteeringEncoderMin)/(kSteeringEncoderRange)))+18000)%36000)/100;
 8000bbc:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <getEncoderAngle+0x6c>)
 8000bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bc0:	ee07 3a90 	vmov	s15, r3
 8000bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bc8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000c28 <getEncoderAngle+0x70>
 8000bcc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000bd0:	eddf 6a16 	vldr	s13, [pc, #88]	; 8000c2c <getEncoderAngle+0x74>
 8000bd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bd8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000c30 <getEncoderAngle+0x78>
 8000bdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000be0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000be4:	ee17 3a90 	vmov	r3, s15
 8000be8:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 8000bec:	3350      	adds	r3, #80	; 0x50
 8000bee:	4a11      	ldr	r2, [pc, #68]	; (8000c34 <getEncoderAngle+0x7c>)
 8000bf0:	fb82 1203 	smull	r1, r2, r2, r3
 8000bf4:	1391      	asrs	r1, r2, #14
 8000bf6:	17da      	asrs	r2, r3, #31
 8000bf8:	1a8a      	subs	r2, r1, r2
 8000bfa:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 8000bfe:	fb01 f202 	mul.w	r2, r1, r2
 8000c02:	1a9a      	subs	r2, r3, r2
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <getEncoderAngle+0x80>)
 8000c06:	fb83 1302 	smull	r1, r3, r3, r2
 8000c0a:	1159      	asrs	r1, r3, #5
 8000c0c:	17d3      	asrs	r3, r2, #31
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	ee07 3a90 	vmov	s15, r3
 8000c14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8000c18:	eeb0 0a67 	vmov.f32	s0, s15
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	40000400 	.word	0x40000400
 8000c28:	465ac000 	.word	0x465ac000
 8000c2c:	477a0000 	.word	0x477a0000
 8000c30:	470ca000 	.word	0x470ca000
 8000c34:	7482296b 	.word	0x7482296b
 8000c38:	51eb851f 	.word	0x51eb851f

08000c3c <rawSteeringToAngle>:

float rawSteeringToAngle(float steerInput){
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	ed87 0a01 	vstr	s0, [r7, #4]
	return (steerInput*EncoderRange)+minEncoderAngle;
 8000c46:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8000c70 <rawSteeringToAngle+0x34>
 8000c4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c56:	eddf 7a07 	vldr	s15, [pc, #28]	; 8000c74 <rawSteeringToAngle+0x38>
 8000c5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c5e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000c62:	eeb0 0a67 	vmov.f32	s0, s15
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	000000b4 	.word	0x000000b4
 8000c74:	000000a7 	.word	0x000000a7

08000c78 <setSteeringMotor>:

/**
 * Sets the steering motors power
 * @power value from -1.0 to 1.0
 */
void setSteeringMotor(float power){//+-1.0
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	ed87 0a01 	vstr	s0, [r7, #4]
	short int out = (((power)+1)/2)*180;//Converts the range 0 to 1, to 90 to 180 //Dont ask why its that range it just works
 8000c82:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000c8e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000c92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c96:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000cbc <setSteeringMotor+0x44>
 8000c9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ca2:	ee17 3a90 	vmov	r3, s15
 8000ca6:	81fb      	strh	r3, [r7, #14]
	TIM10->CCR1 = out;
 8000ca8:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <setSteeringMotor+0x48>)
 8000caa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cae:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000cb0:	bf00      	nop
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	43340000 	.word	0x43340000
 8000cc0:	40014400 	.word	0x40014400

08000cc4 <setDrivingMotor>:

/**
 * Sets the driving motors power
 * @power value from 0 to 1.0
 */
void setDrivingMotor(float power){//0 to 1.0
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	ed87 0a01 	vstr	s0, [r7, #4]
	short int out = (power)*kDrivingMotorMax;//Converts the range 0 to 1, to 0v to 3.3v which is 0 to 4096(kDrivingMotorMax)
 8000cce:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8000d04 <setDrivingMotor+0x40>
 8000cd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ce2:	ee17 3a90 	vmov	r3, s15
 8000ce6:	81fb      	strh	r3, [r7, #14]
	o = out;
 8000ce8:	4a07      	ldr	r2, [pc, #28]	; (8000d08 <setDrivingMotor+0x44>)
 8000cea:	89fb      	ldrh	r3, [r7, #14]
 8000cec:	8013      	strh	r3, [r2, #0]
	 HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1,
 8000cee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <setDrivingMotor+0x48>)
 8000cf8:	f002 f89d 	bl	8002e36 <HAL_DAC_SetValue>
	 DAC_ALIGN_12B_R, out);
}
 8000cfc:	bf00      	nop
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	00001000 	.word	0x00001000
 8000d08:	20000404 	.word	0x20000404
 8000d0c:	20000088 	.word	0x20000088

08000d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	ed2d 8b02 	vpush	{d8}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	hdac.State = HAL_DAC_STATE_RESET;
 8000d1a:	4b79      	ldr	r3, [pc, #484]	; (8000f00 <main+0x1f0>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	711a      	strb	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d20:	f001 fbfc 	bl	800251c <HAL_Init>

  /* USER CODE BEGIN Init */
  uint16_t pwmBottomState = 5000;
 8000d24:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d28:	80fb      	strh	r3, [r7, #6]
  uint16_t pwmLowState = 25000;
 8000d2a:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8000d2e:	80bb      	strh	r3, [r7, #4]
  uint16_t pwmHighState = 45000;
 8000d30:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 8000d34:	807b      	strh	r3, [r7, #2]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d36:	f000 f907 	bl	8000f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d3a:	f000 ff55 	bl	8001be8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d3e:	f000 f979 	bl	8001034 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000d42:	f000 fa85 	bl	8001250 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d46:	f000 fb07 	bl	8001358 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d4a:	f000 fb85 	bl	8001458 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d4e:	f000 fc21 	bl	8001594 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000d52:	f000 fcbd 	bl	80016d0 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000d56:	f000 fd59 	bl	800180c <MX_TIM8_Init>
  MX_TIM10_Init();
 8000d5a:	f000 fdf7 	bl	800194c <MX_TIM10_Init>
  MX_TIM11_Init();
 8000d5e:	f000 fe43 	bl	80019e8 <MX_TIM11_Init>
  MX_TIM12_Init();
 8000d62:	f000 fe8f 	bl	8001a84 <MX_TIM12_Init>
  MX_RTC_Init();
 8000d66:	f000 fa0f 	bl	8001188 <MX_RTC_Init>
  MX_I2C2_Init();
 8000d6a:	f000 f9df 	bl	800112c <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8000d6e:	f000 ff11 	bl	8001b94 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8000d72:	f000 f9b1 	bl	80010d8 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  //Starts HAL timing for input capture
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000d76:	2100      	movs	r1, #0
 8000d78:	4862      	ldr	r0, [pc, #392]	; (8000f04 <main+0x1f4>)
 8000d7a:	f004 fa79 	bl	8005270 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 8000d7e:	2104      	movs	r1, #4
 8000d80:	4860      	ldr	r0, [pc, #384]	; (8000f04 <main+0x1f4>)
 8000d82:	f004 f999 	bl	80050b8 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000d86:	2100      	movs	r1, #0
 8000d88:	485f      	ldr	r0, [pc, #380]	; (8000f08 <main+0x1f8>)
 8000d8a:	f004 fa71 	bl	8005270 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8000d8e:	2104      	movs	r1, #4
 8000d90:	485d      	ldr	r0, [pc, #372]	; (8000f08 <main+0x1f8>)
 8000d92:	f004 f991 	bl	80050b8 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000d96:	2100      	movs	r1, #0
 8000d98:	485c      	ldr	r0, [pc, #368]	; (8000f0c <main+0x1fc>)
 8000d9a:	f004 fa69 	bl	8005270 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 8000d9e:	2104      	movs	r1, #4
 8000da0:	485a      	ldr	r0, [pc, #360]	; (8000f0c <main+0x1fc>)
 8000da2:	f004 f989 	bl	80050b8 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000da6:	2100      	movs	r1, #0
 8000da8:	4859      	ldr	r0, [pc, #356]	; (8000f10 <main+0x200>)
 8000daa:	f004 fa61 	bl	8005270 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2);
 8000dae:	2104      	movs	r1, #4
 8000db0:	4857      	ldr	r0, [pc, #348]	; (8000f10 <main+0x200>)
 8000db2:	f004 f981 	bl	80050b8 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8000db6:	2100      	movs	r1, #0
 8000db8:	4856      	ldr	r0, [pc, #344]	; (8000f14 <main+0x204>)
 8000dba:	f004 fa59 	bl	8005270 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 8000dbe:	2104      	movs	r1, #4
 8000dc0:	4854      	ldr	r0, [pc, #336]	; (8000f14 <main+0x204>)
 8000dc2:	f004 f979 	bl	80050b8 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_1);
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4853      	ldr	r0, [pc, #332]	; (8000f18 <main+0x208>)
 8000dca:	f004 fa51 	bl	8005270 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_2);
 8000dce:	2104      	movs	r1, #4
 8000dd0:	4851      	ldr	r0, [pc, #324]	; (8000f18 <main+0x208>)
 8000dd2:	f004 f971 	bl	80050b8 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_1);
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	484f      	ldr	r0, [pc, #316]	; (8000f18 <main+0x208>)
 8000dda:	f004 fa49 	bl	8005270 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_2);
 8000dde:	2104      	movs	r1, #4
 8000de0:	484d      	ldr	r0, [pc, #308]	; (8000f18 <main+0x208>)
 8000de2:	f004 f969 	bl	80050b8 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim12, TIM_CHANNEL_1);
 8000de6:	2100      	movs	r1, #0
 8000de8:	484c      	ldr	r0, [pc, #304]	; (8000f1c <main+0x20c>)
 8000dea:	f004 fa41 	bl	8005270 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim12, TIM_CHANNEL_2);
 8000dee:	2104      	movs	r1, #4
 8000df0:	484a      	ldr	r0, [pc, #296]	; (8000f1c <main+0x20c>)
 8000df2:	f004 f961 	bl	80050b8 <HAL_TIM_IC_Start>

  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8000df6:	2100      	movs	r1, #0
 8000df8:	4849      	ldr	r0, [pc, #292]	; (8000f20 <main+0x210>)
 8000dfa:	f004 f845 	bl	8004e88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4848      	ldr	r0, [pc, #288]	; (8000f24 <main+0x214>)
 8000e02:	f004 f841 	bl	8004e88 <HAL_TIM_PWM_Start>
  TIM10->CCR1 = 450; //Sets the PWM output of tim1 channel 1 to 450
 8000e06:	4b48      	ldr	r3, [pc, #288]	; (8000f28 <main+0x218>)
 8000e08:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8000e0c:	635a      	str	r2, [r3, #52]	; 0x34
  TIM11->CCR1 = 0; //Sets the PWM output of tim1 channel 1 to 450
 8000e0e:	4b47      	ldr	r3, [pc, #284]	; (8000f2c <main+0x21c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000e14:	2100      	movs	r1, #0
 8000e16:	483a      	ldr	r0, [pc, #232]	; (8000f00 <main+0x1f0>)
 8000e18:	f001 ffbb 	bl	8002d92 <HAL_DAC_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //E-STOP
	  if(TIM4->CCR2>pwmLowState){//Checking if E-Stop is switched to the high state, forces user on RC controller to switch the e-stop switch to start it
 8000e1c:	4b44      	ldr	r3, [pc, #272]	; (8000f30 <main+0x220>)
 8000e1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e20:	88bb      	ldrh	r3, [r7, #4]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d966      	bls.n	8000ef4 <main+0x1e4>
		  //State management
		  steeringRequest = TIM2->CCR2;
 8000e26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e2c:	4a41      	ldr	r2, [pc, #260]	; (8000f34 <main+0x224>)
 8000e2e:	6013      	str	r3, [r2, #0]
		  drivingRequest = TIM5->CCR2;
 8000e30:	4b41      	ldr	r3, [pc, #260]	; (8000f38 <main+0x228>)
 8000e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e34:	4a41      	ldr	r2, [pc, #260]	; (8000f3c <main+0x22c>)
 8000e36:	6013      	str	r3, [r2, #0]
		  a = drivingInput(drivingRequest);
 8000e38:	4b40      	ldr	r3, [pc, #256]	; (8000f3c <main+0x22c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fde5 	bl	8000a0c <drivingInput>
 8000e42:	eef0 7a40 	vmov.f32	s15, s0
 8000e46:	4b3e      	ldr	r3, [pc, #248]	; (8000f40 <main+0x230>)
 8000e48:	edc3 7a00 	vstr	s15, [r3]

		  if(TIM1->CCR2<pwmBottomState){//Switch to RC mode, middle switch state
 8000e4c:	4b3d      	ldr	r3, [pc, #244]	; (8000f44 <main+0x234>)
 8000e4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e50:	88fb      	ldrh	r3, [r7, #6]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d22a      	bcs.n	8000eac <main+0x19c>
			  setSteeringMotor(getPIDPower(getEncoderAngle(), rawSteeringToAngle(steeringInput(steeringRequest)), 10.0));
 8000e56:	f7ff feaf 	bl	8000bb8 <getEncoderAngle>
 8000e5a:	eeb0 8a40 	vmov.f32	s16, s0
 8000e5e:	4b35      	ldr	r3, [pc, #212]	; (8000f34 <main+0x224>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fd92 	bl	800098c <steeringInput>
 8000e68:	eef0 7a40 	vmov.f32	s15, s0
 8000e6c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e70:	f7ff fee4 	bl	8000c3c <rawSteeringToAngle>
 8000e74:	eef0 7a40 	vmov.f32	s15, s0
 8000e78:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 8000e7c:	eef0 0a67 	vmov.f32	s1, s15
 8000e80:	eeb0 0a48 	vmov.f32	s0, s16
 8000e84:	f7ff fe02 	bl	8000a8c <getPIDPower>
 8000e88:	eef0 7a40 	vmov.f32	s15, s0
 8000e8c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e90:	f7ff fef2 	bl	8000c78 <setSteeringMotor>
			  setDrivingMotor(drivingInput(drivingRequest));
 8000e94:	4b29      	ldr	r3, [pc, #164]	; (8000f3c <main+0x22c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fdb7 	bl	8000a0c <drivingInput>
 8000e9e:	eef0 7a40 	vmov.f32	s15, s0
 8000ea2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ea6:	f7ff ff0d 	bl	8000cc4 <setDrivingMotor>
 8000eaa:	e01f      	b.n	8000eec <main+0x1dc>

		  }
		  else if(TIM1->CCR2>pwmHighState){//Switch to auto mode, high switch state
 8000eac:	4b25      	ldr	r3, [pc, #148]	; (8000f44 <main+0x234>)
 8000eae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000eb0:	887b      	ldrh	r3, [r7, #2]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d916      	bls.n	8000ee4 <main+0x1d4>
//			  manual RC Control
			  setSteeringMotor(steeringInput(steeringRequest));
 8000eb6:	4b1f      	ldr	r3, [pc, #124]	; (8000f34 <main+0x224>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fd66 	bl	800098c <steeringInput>
 8000ec0:	eef0 7a40 	vmov.f32	s15, s0
 8000ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ec8:	f7ff fed6 	bl	8000c78 <setSteeringMotor>
			  setDrivingMotor(drivingInput(drivingRequest));
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <main+0x22c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fd9b 	bl	8000a0c <drivingInput>
 8000ed6:	eef0 7a40 	vmov.f32	s15, s0
 8000eda:	eeb0 0a67 	vmov.f32	s0, s15
 8000ede:	f7ff fef1 	bl	8000cc4 <setDrivingMotor>
 8000ee2:	e003      	b.n	8000eec <main+0x1dc>
			  //TODO: Auto Code
//			  setSteeringMotor(0.5);
		  }
		  else{
			  //off state, low switch state
			  setSteeringMotor(0.5);
 8000ee4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8000ee8:	f7ff fec6 	bl	8000c78 <setSteeringMotor>
//			  TIM10->CCR2 = pwmOutMax/2;//Sets steering motor power to 0
		  }

		  HAL_Delay(10);//For faster response decrease delay
 8000eec:	200a      	movs	r0, #10
 8000eee:	f001 fb87 	bl	8002600 <HAL_Delay>
 8000ef2:	e793      	b.n	8000e1c <main+0x10c>
	  }
	  else{
//		  TIM10->CCR2 = pwmOutMax/2;//Sets steering motor power to 0
//		  setSteeringMotor(0);
		  setSteeringMotor(0.5);
 8000ef4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8000ef8:	f7ff febe 	bl	8000c78 <setSteeringMotor>
	  if(TIM4->CCR2>pwmLowState){//Checking if E-Stop is switched to the high state, forces user on RC controller to switch the e-stop switch to start it
 8000efc:	e78e      	b.n	8000e1c <main+0x10c>
 8000efe:	bf00      	nop
 8000f00:	20000088 	.word	0x20000088
 8000f04:	20000110 	.word	0x20000110
 8000f08:	20000158 	.word	0x20000158
 8000f0c:	200001a0 	.word	0x200001a0
 8000f10:	200001e8 	.word	0x200001e8
 8000f14:	20000230 	.word	0x20000230
 8000f18:	20000278 	.word	0x20000278
 8000f1c:	20000350 	.word	0x20000350
 8000f20:	200002c0 	.word	0x200002c0
 8000f24:	20000308 	.word	0x20000308
 8000f28:	40014400 	.word	0x40014400
 8000f2c:	40014800 	.word	0x40014800
 8000f30:	40000800 	.word	0x40000800
 8000f34:	20000014 	.word	0x20000014
 8000f38:	40000c00 	.word	0x40000c00
 8000f3c:	2000040c 	.word	0x2000040c
 8000f40:	20000408 	.word	0x20000408
 8000f44:	40010000 	.word	0x40010000

08000f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b094      	sub	sp, #80	; 0x50
 8000f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4e:	f107 031c 	add.w	r3, r7, #28
 8000f52:	2234      	movs	r2, #52	; 0x34
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f005 feac 	bl	8006cb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5c:	f107 0308 	add.w	r3, r7, #8
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	4b2e      	ldr	r3, [pc, #184]	; (800102c <SystemClock_Config+0xe4>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	4a2d      	ldr	r2, [pc, #180]	; (800102c <SystemClock_Config+0xe4>)
 8000f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7c:	4b2b      	ldr	r3, [pc, #172]	; (800102c <SystemClock_Config+0xe4>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f88:	2300      	movs	r3, #0
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	4b28      	ldr	r3, [pc, #160]	; (8001030 <SystemClock_Config+0xe8>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a27      	ldr	r2, [pc, #156]	; (8001030 <SystemClock_Config+0xe8>)
 8000f92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	4b25      	ldr	r3, [pc, #148]	; (8001030 <SystemClock_Config+0xe8>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fa0:	603b      	str	r3, [r7, #0]
 8000fa2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000fa4:	2309      	movs	r3, #9
 8000fa6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fbe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000fc4:	23b4      	movs	r3, #180	; 0xb4
 8000fc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f003 f93d 	bl	8004258 <HAL_RCC_OscConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000fe4:	f000 fe5a 	bl	8001c9c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fe8:	f002 fa72 	bl	80034d0 <HAL_PWREx_EnableOverDrive>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ff2:	f000 fe53 	bl	8001c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff6:	230f      	movs	r3, #15
 8000ff8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001002:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001006:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001008:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800100c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800100e:	f107 0308 	add.w	r3, r7, #8
 8001012:	2105      	movs	r1, #5
 8001014:	4618      	mov	r0, r3
 8001016:	f002 faab 	bl	8003570 <HAL_RCC_ClockConfig>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8001020:	f000 fe3c 	bl	8001c9c <Error_Handler>
  }
}
 8001024:	bf00      	nop
 8001026:	3750      	adds	r7, #80	; 0x50
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40023800 	.word	0x40023800
 8001030:	40007000 	.word	0x40007000

08001034 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800103a:	463b      	mov	r3, r7
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001046:	4b21      	ldr	r3, [pc, #132]	; (80010cc <MX_ADC1_Init+0x98>)
 8001048:	4a21      	ldr	r2, [pc, #132]	; (80010d0 <MX_ADC1_Init+0x9c>)
 800104a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800104c:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <MX_ADC1_Init+0x98>)
 800104e:	2200      	movs	r2, #0
 8001050:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001052:	4b1e      	ldr	r3, [pc, #120]	; (80010cc <MX_ADC1_Init+0x98>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001058:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <MX_ADC1_Init+0x98>)
 800105a:	2200      	movs	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800105e:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <MX_ADC1_Init+0x98>)
 8001060:	2200      	movs	r2, #0
 8001062:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001064:	4b19      	ldr	r3, [pc, #100]	; (80010cc <MX_ADC1_Init+0x98>)
 8001066:	2200      	movs	r2, #0
 8001068:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800106c:	4b17      	ldr	r3, [pc, #92]	; (80010cc <MX_ADC1_Init+0x98>)
 800106e:	2200      	movs	r2, #0
 8001070:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001072:	4b16      	ldr	r3, [pc, #88]	; (80010cc <MX_ADC1_Init+0x98>)
 8001074:	4a17      	ldr	r2, [pc, #92]	; (80010d4 <MX_ADC1_Init+0xa0>)
 8001076:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <MX_ADC1_Init+0x98>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <MX_ADC1_Init+0x98>)
 8001080:	2201      	movs	r2, #1
 8001082:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MX_ADC1_Init+0x98>)
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <MX_ADC1_Init+0x98>)
 800108e:	2201      	movs	r2, #1
 8001090:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001092:	480e      	ldr	r0, [pc, #56]	; (80010cc <MX_ADC1_Init+0x98>)
 8001094:	f001 fad8 	bl	8002648 <HAL_ADC_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800109e:	f000 fdfd 	bl	8001c9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80010a2:	2307      	movs	r3, #7
 80010a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010a6:	2301      	movs	r3, #1
 80010a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ae:	463b      	mov	r3, r7
 80010b0:	4619      	mov	r1, r3
 80010b2:	4806      	ldr	r0, [pc, #24]	; (80010cc <MX_ADC1_Init+0x98>)
 80010b4:	f001 fb0c 	bl	80026d0 <HAL_ADC_ConfigChannel>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80010be:	f000 fded 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000040 	.word	0x20000040
 80010d0:	40012000 	.word	0x40012000
 80010d4:	0f000001 	.word	0x0f000001

080010d8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80010de:	463b      	mov	r3, r7
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80010e6:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_DAC_Init+0x4c>)
 80010e8:	4a0f      	ldr	r2, [pc, #60]	; (8001128 <MX_DAC_Init+0x50>)
 80010ea:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80010ec:	480d      	ldr	r0, [pc, #52]	; (8001124 <MX_DAC_Init+0x4c>)
 80010ee:	f001 fe2e 	bl	8002d4e <HAL_DAC_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80010f8:	f000 fdd0 	bl	8001c9c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001100:	2300      	movs	r3, #0
 8001102:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001104:	463b      	mov	r3, r7
 8001106:	2200      	movs	r2, #0
 8001108:	4619      	mov	r1, r3
 800110a:	4806      	ldr	r0, [pc, #24]	; (8001124 <MX_DAC_Init+0x4c>)
 800110c:	f001 feb8 	bl	8002e80 <HAL_DAC_ConfigChannel>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001116:	f000 fdc1 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000088 	.word	0x20000088
 8001128:	40007400 	.word	0x40007400

0800112c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <MX_I2C2_Init+0x50>)
 8001132:	4a13      	ldr	r2, [pc, #76]	; (8001180 <MX_I2C2_Init+0x54>)
 8001134:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_I2C2_Init+0x50>)
 8001138:	4a12      	ldr	r2, [pc, #72]	; (8001184 <MX_I2C2_Init+0x58>)
 800113a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_I2C2_Init+0x50>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MX_I2C2_Init+0x50>)
 8001144:	2200      	movs	r2, #0
 8001146:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_I2C2_Init+0x50>)
 800114a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800114e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <MX_I2C2_Init+0x50>)
 8001152:	2200      	movs	r2, #0
 8001154:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_I2C2_Init+0x50>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <MX_I2C2_Init+0x50>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <MX_I2C2_Init+0x50>)
 8001164:	2200      	movs	r2, #0
 8001166:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001168:	4804      	ldr	r0, [pc, #16]	; (800117c <MX_I2C2_Init+0x50>)
 800116a:	f002 f86d 	bl	8003248 <HAL_I2C_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001174:	f000 fd92 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	2000009c 	.word	0x2000009c
 8001180:	40005800 	.word	0x40005800
 8001184:	000186a0 	.word	0x000186a0

08001188 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800119c:	2300      	movs	r3, #0
 800119e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80011a0:	4b29      	ldr	r3, [pc, #164]	; (8001248 <MX_RTC_Init+0xc0>)
 80011a2:	4a2a      	ldr	r2, [pc, #168]	; (800124c <MX_RTC_Init+0xc4>)
 80011a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011a6:	4b28      	ldr	r3, [pc, #160]	; (8001248 <MX_RTC_Init+0xc0>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011ac:	4b26      	ldr	r3, [pc, #152]	; (8001248 <MX_RTC_Init+0xc0>)
 80011ae:	227f      	movs	r2, #127	; 0x7f
 80011b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011b2:	4b25      	ldr	r3, [pc, #148]	; (8001248 <MX_RTC_Init+0xc0>)
 80011b4:	22ff      	movs	r2, #255	; 0xff
 80011b6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011b8:	4b23      	ldr	r3, [pc, #140]	; (8001248 <MX_RTC_Init+0xc0>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011be:	4b22      	ldr	r3, [pc, #136]	; (8001248 <MX_RTC_Init+0xc0>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80011c4:	4b20      	ldr	r3, [pc, #128]	; (8001248 <MX_RTC_Init+0xc0>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80011ca:	481f      	ldr	r0, [pc, #124]	; (8001248 <MX_RTC_Init+0xc0>)
 80011cc:	f003 fae2 	bl	8004794 <HAL_RTC_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80011d6:	f000 fd61 	bl	8001c9c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80011da:	2300      	movs	r3, #0
 80011dc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80011de:	2300      	movs	r3, #0
 80011e0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2201      	movs	r2, #1
 80011f2:	4619      	mov	r1, r3
 80011f4:	4814      	ldr	r0, [pc, #80]	; (8001248 <MX_RTC_Init+0xc0>)
 80011f6:	f003 fb43 	bl	8004880 <HAL_RTC_SetTime>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001200:	f000 fd4c 	bl	8001c9c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001204:	2301      	movs	r3, #1
 8001206:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001208:	2301      	movs	r3, #1
 800120a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800120c:	2301      	movs	r3, #1
 800120e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001210:	2300      	movs	r3, #0
 8001212:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001214:	463b      	mov	r3, r7
 8001216:	2201      	movs	r2, #1
 8001218:	4619      	mov	r1, r3
 800121a:	480b      	ldr	r0, [pc, #44]	; (8001248 <MX_RTC_Init+0xc0>)
 800121c:	f003 fbca 	bl	80049b4 <HAL_RTC_SetDate>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001226:	f000 fd39 	bl	8001c9c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800122a:	2200      	movs	r2, #0
 800122c:	2100      	movs	r1, #0
 800122e:	4806      	ldr	r0, [pc, #24]	; (8001248 <MX_RTC_Init+0xc0>)
 8001230:	f003 fce5 	bl	8004bfe <HAL_RTCEx_SetWakeUpTimer>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 800123a:	f000 fd2f 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200000f0 	.word	0x200000f0
 800124c:	40002800 	.word	0x40002800

08001250 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08c      	sub	sp, #48	; 0x30
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001266:	f107 030c 	add.w	r3, r7, #12
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800127c:	4b34      	ldr	r3, [pc, #208]	; (8001350 <MX_TIM1_Init+0x100>)
 800127e:	4a35      	ldr	r2, [pc, #212]	; (8001354 <MX_TIM1_Init+0x104>)
 8001280:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001282:	4b33      	ldr	r3, [pc, #204]	; (8001350 <MX_TIM1_Init+0x100>)
 8001284:	2200      	movs	r2, #0
 8001286:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001288:	4b31      	ldr	r3, [pc, #196]	; (8001350 <MX_TIM1_Init+0x100>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800128e:	4b30      	ldr	r3, [pc, #192]	; (8001350 <MX_TIM1_Init+0x100>)
 8001290:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001294:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001296:	4b2e      	ldr	r3, [pc, #184]	; (8001350 <MX_TIM1_Init+0x100>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800129c:	4b2c      	ldr	r3, [pc, #176]	; (8001350 <MX_TIM1_Init+0x100>)
 800129e:	2200      	movs	r2, #0
 80012a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a2:	4b2b      	ldr	r3, [pc, #172]	; (8001350 <MX_TIM1_Init+0x100>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80012a8:	4829      	ldr	r0, [pc, #164]	; (8001350 <MX_TIM1_Init+0x100>)
 80012aa:	f003 feb5 	bl	8005018 <HAL_TIM_IC_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 80012b4:	f000 fcf2 	bl	8001c9c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80012b8:	2304      	movs	r3, #4
 80012ba:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80012bc:	2350      	movs	r3, #80	; 0x50
 80012be:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80012cc:	f107 031c 	add.w	r3, r7, #28
 80012d0:	4619      	mov	r1, r3
 80012d2:	481f      	ldr	r0, [pc, #124]	; (8001350 <MX_TIM1_Init+0x100>)
 80012d4:	f004 fc21 	bl	8005b1a <HAL_TIM_SlaveConfigSynchro>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80012de:	f000 fcdd 	bl	8001c9c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012e6:	2301      	movs	r3, #1
 80012e8:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012f2:	f107 030c 	add.w	r3, r7, #12
 80012f6:	2200      	movs	r2, #0
 80012f8:	4619      	mov	r1, r3
 80012fa:	4815      	ldr	r0, [pc, #84]	; (8001350 <MX_TIM1_Init+0x100>)
 80012fc:	f004 f9e8 	bl	80056d0 <HAL_TIM_IC_ConfigChannel>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8001306:	f000 fcc9 	bl	8001c9c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800130a:	2302      	movs	r3, #2
 800130c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800130e:	2302      	movs	r3, #2
 8001310:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	2204      	movs	r2, #4
 8001318:	4619      	mov	r1, r3
 800131a:	480d      	ldr	r0, [pc, #52]	; (8001350 <MX_TIM1_Init+0x100>)
 800131c:	f004 f9d8 	bl	80056d0 <HAL_TIM_IC_ConfigChannel>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8001326:	f000 fcb9 	bl	8001c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	4619      	mov	r1, r3
 8001336:	4806      	ldr	r0, [pc, #24]	; (8001350 <MX_TIM1_Init+0x100>)
 8001338:	f005 f96a 	bl	8006610 <HAL_TIMEx_MasterConfigSynchronization>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001342:	f000 fcab 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	3730      	adds	r7, #48	; 0x30
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000110 	.word	0x20000110
 8001354:	40010000 	.word	0x40010000

08001358 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08c      	sub	sp, #48	; 0x30
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800135e:	f107 031c 	add.w	r3, r7, #28
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800136e:	f107 030c 	add.w	r3, r7, #12
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001384:	4b33      	ldr	r3, [pc, #204]	; (8001454 <MX_TIM2_Init+0xfc>)
 8001386:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800138a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800138c:	4b31      	ldr	r3, [pc, #196]	; (8001454 <MX_TIM2_Init+0xfc>)
 800138e:	2200      	movs	r2, #0
 8001390:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001392:	4b30      	ldr	r3, [pc, #192]	; (8001454 <MX_TIM2_Init+0xfc>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001398:	4b2e      	ldr	r3, [pc, #184]	; (8001454 <MX_TIM2_Init+0xfc>)
 800139a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800139e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a0:	4b2c      	ldr	r3, [pc, #176]	; (8001454 <MX_TIM2_Init+0xfc>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a6:	4b2b      	ldr	r3, [pc, #172]	; (8001454 <MX_TIM2_Init+0xfc>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80013ac:	4829      	ldr	r0, [pc, #164]	; (8001454 <MX_TIM2_Init+0xfc>)
 80013ae:	f003 fe33 	bl	8005018 <HAL_TIM_IC_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80013b8:	f000 fc70 	bl	8001c9c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80013bc:	2304      	movs	r3, #4
 80013be:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80013c0:	2350      	movs	r3, #80	; 0x50
 80013c2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80013d0:	f107 031c 	add.w	r3, r7, #28
 80013d4:	4619      	mov	r1, r3
 80013d6:	481f      	ldr	r0, [pc, #124]	; (8001454 <MX_TIM2_Init+0xfc>)
 80013d8:	f004 fb9f 	bl	8005b1a <HAL_TIM_SlaveConfigSynchro>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80013e2:	f000 fc5b 	bl	8001c9c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013ea:	2301      	movs	r3, #1
 80013ec:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013f6:	f107 030c 	add.w	r3, r7, #12
 80013fa:	2200      	movs	r2, #0
 80013fc:	4619      	mov	r1, r3
 80013fe:	4815      	ldr	r0, [pc, #84]	; (8001454 <MX_TIM2_Init+0xfc>)
 8001400:	f004 f966 	bl	80056d0 <HAL_TIM_IC_ConfigChannel>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800140a:	f000 fc47 	bl	8001c9c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800140e:	2302      	movs	r3, #2
 8001410:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001412:	2302      	movs	r3, #2
 8001414:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001416:	f107 030c 	add.w	r3, r7, #12
 800141a:	2204      	movs	r2, #4
 800141c:	4619      	mov	r1, r3
 800141e:	480d      	ldr	r0, [pc, #52]	; (8001454 <MX_TIM2_Init+0xfc>)
 8001420:	f004 f956 	bl	80056d0 <HAL_TIM_IC_ConfigChannel>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800142a:	f000 fc37 	bl	8001c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	4619      	mov	r1, r3
 800143a:	4806      	ldr	r0, [pc, #24]	; (8001454 <MX_TIM2_Init+0xfc>)
 800143c:	f005 f8e8 	bl	8006610 <HAL_TIMEx_MasterConfigSynchronization>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8001446:	f000 fc29 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	3730      	adds	r7, #48	; 0x30
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000158 	.word	0x20000158

08001458 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b090      	sub	sp, #64	; 0x40
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800145e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800146c:	f107 031c 	add.w	r3, r7, #28
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001492:	4b3e      	ldr	r3, [pc, #248]	; (800158c <MX_TIM3_Init+0x134>)
 8001494:	4a3e      	ldr	r2, [pc, #248]	; (8001590 <MX_TIM3_Init+0x138>)
 8001496:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001498:	4b3c      	ldr	r3, [pc, #240]	; (800158c <MX_TIM3_Init+0x134>)
 800149a:	2200      	movs	r2, #0
 800149c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149e:	4b3b      	ldr	r3, [pc, #236]	; (800158c <MX_TIM3_Init+0x134>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014a4:	4b39      	ldr	r3, [pc, #228]	; (800158c <MX_TIM3_Init+0x134>)
 80014a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ac:	4b37      	ldr	r3, [pc, #220]	; (800158c <MX_TIM3_Init+0x134>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b2:	4b36      	ldr	r3, [pc, #216]	; (800158c <MX_TIM3_Init+0x134>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014b8:	4834      	ldr	r0, [pc, #208]	; (800158c <MX_TIM3_Init+0x134>)
 80014ba:	f003 fc3d 	bl	8004d38 <HAL_TIM_Base_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80014c4:	f000 fbea 	bl	8001c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014cc:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014d2:	4619      	mov	r1, r3
 80014d4:	482d      	ldr	r0, [pc, #180]	; (800158c <MX_TIM3_Init+0x134>)
 80014d6:	f004 fa59 	bl	800598c <HAL_TIM_ConfigClockSource>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80014e0:	f000 fbdc 	bl	8001c9c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80014e4:	4829      	ldr	r0, [pc, #164]	; (800158c <MX_TIM3_Init+0x134>)
 80014e6:	f003 fd97 	bl	8005018 <HAL_TIM_IC_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80014f0:	f000 fbd4 	bl	8001c9c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80014f4:	2304      	movs	r3, #4
 80014f6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80014f8:	2350      	movs	r3, #80	; 0x50
 80014fa:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014fc:	2300      	movs	r3, #0
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001508:	f107 031c 	add.w	r3, r7, #28
 800150c:	4619      	mov	r1, r3
 800150e:	481f      	ldr	r0, [pc, #124]	; (800158c <MX_TIM3_Init+0x134>)
 8001510:	f004 fb03 	bl	8005b1a <HAL_TIM_SlaveConfigSynchro>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 800151a:	f000 fbbf 	bl	8001c9c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001522:	2301      	movs	r3, #1
 8001524:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800152e:	f107 030c 	add.w	r3, r7, #12
 8001532:	2200      	movs	r2, #0
 8001534:	4619      	mov	r1, r3
 8001536:	4815      	ldr	r0, [pc, #84]	; (800158c <MX_TIM3_Init+0x134>)
 8001538:	f004 f8ca 	bl	80056d0 <HAL_TIM_IC_ConfigChannel>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001542:	f000 fbab 	bl	8001c9c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001546:	2302      	movs	r3, #2
 8001548:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800154a:	2302      	movs	r3, #2
 800154c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800154e:	f107 030c 	add.w	r3, r7, #12
 8001552:	2204      	movs	r2, #4
 8001554:	4619      	mov	r1, r3
 8001556:	480d      	ldr	r0, [pc, #52]	; (800158c <MX_TIM3_Init+0x134>)
 8001558:	f004 f8ba 	bl	80056d0 <HAL_TIM_IC_ConfigChannel>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 8001562:	f000 fb9b 	bl	8001c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	4619      	mov	r1, r3
 8001572:	4806      	ldr	r0, [pc, #24]	; (800158c <MX_TIM3_Init+0x134>)
 8001574:	f005 f84c 	bl	8006610 <HAL_TIMEx_MasterConfigSynchronization>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM3_Init+0x12a>
  {
    Error_Handler();
 800157e:	f000 fb8d 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	3740      	adds	r7, #64	; 0x40
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200001a0 	.word	0x200001a0
 8001590:	40000400 	.word	0x40000400

08001594 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b090      	sub	sp, #64	; 0x40
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800159a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80015a8:	f107 031c 	add.w	r3, r7, #28
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015ce:	4b3e      	ldr	r3, [pc, #248]	; (80016c8 <MX_TIM4_Init+0x134>)
 80015d0:	4a3e      	ldr	r2, [pc, #248]	; (80016cc <MX_TIM4_Init+0x138>)
 80015d2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80015d4:	4b3c      	ldr	r3, [pc, #240]	; (80016c8 <MX_TIM4_Init+0x134>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015da:	4b3b      	ldr	r3, [pc, #236]	; (80016c8 <MX_TIM4_Init+0x134>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80015e0:	4b39      	ldr	r3, [pc, #228]	; (80016c8 <MX_TIM4_Init+0x134>)
 80015e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015e6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e8:	4b37      	ldr	r3, [pc, #220]	; (80016c8 <MX_TIM4_Init+0x134>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ee:	4b36      	ldr	r3, [pc, #216]	; (80016c8 <MX_TIM4_Init+0x134>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80015f4:	4834      	ldr	r0, [pc, #208]	; (80016c8 <MX_TIM4_Init+0x134>)
 80015f6:	f003 fb9f 	bl	8004d38 <HAL_TIM_Base_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001600:	f000 fb4c 	bl	8001c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001608:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800160a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800160e:	4619      	mov	r1, r3
 8001610:	482d      	ldr	r0, [pc, #180]	; (80016c8 <MX_TIM4_Init+0x134>)
 8001612:	f004 f9bb 	bl	800598c <HAL_TIM_ConfigClockSource>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800161c:	f000 fb3e 	bl	8001c9c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001620:	4829      	ldr	r0, [pc, #164]	; (80016c8 <MX_TIM4_Init+0x134>)
 8001622:	f003 fcf9 	bl	8005018 <HAL_TIM_IC_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800162c:	f000 fb36 	bl	8001c9c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001630:	2304      	movs	r3, #4
 8001632:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001634:	2350      	movs	r3, #80	; 0x50
 8001636:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001638:	2300      	movs	r3, #0
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800163c:	2300      	movs	r3, #0
 800163e:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	4619      	mov	r1, r3
 800164a:	481f      	ldr	r0, [pc, #124]	; (80016c8 <MX_TIM4_Init+0x134>)
 800164c:	f004 fa65 	bl	8005b1a <HAL_TIM_SlaveConfigSynchro>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 8001656:	f000 fb21 	bl	8001c9c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800165e:	2301      	movs	r3, #1
 8001660:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800166a:	f107 030c 	add.w	r3, r7, #12
 800166e:	2200      	movs	r2, #0
 8001670:	4619      	mov	r1, r3
 8001672:	4815      	ldr	r0, [pc, #84]	; (80016c8 <MX_TIM4_Init+0x134>)
 8001674:	f004 f82c 	bl	80056d0 <HAL_TIM_IC_ConfigChannel>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 800167e:	f000 fb0d 	bl	8001c9c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001682:	2302      	movs	r3, #2
 8001684:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001686:	2302      	movs	r3, #2
 8001688:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800168a:	f107 030c 	add.w	r3, r7, #12
 800168e:	2204      	movs	r2, #4
 8001690:	4619      	mov	r1, r3
 8001692:	480d      	ldr	r0, [pc, #52]	; (80016c8 <MX_TIM4_Init+0x134>)
 8001694:	f004 f81c 	bl	80056d0 <HAL_TIM_IC_ConfigChannel>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM4_Init+0x10e>
  {
    Error_Handler();
 800169e:	f000 fafd 	bl	8001c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	4619      	mov	r1, r3
 80016ae:	4806      	ldr	r0, [pc, #24]	; (80016c8 <MX_TIM4_Init+0x134>)
 80016b0:	f004 ffae 	bl	8006610 <HAL_TIMEx_MasterConfigSynchronization>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM4_Init+0x12a>
  {
    Error_Handler();
 80016ba:	f000 faef 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	3740      	adds	r7, #64	; 0x40
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200001e8 	.word	0x200001e8
 80016cc:	40000800 	.word	0x40000800

080016d0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b090      	sub	sp, #64	; 0x40
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80016e4:	f107 031c 	add.w	r3, r7, #28
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800170a:	4b3e      	ldr	r3, [pc, #248]	; (8001804 <MX_TIM5_Init+0x134>)
 800170c:	4a3e      	ldr	r2, [pc, #248]	; (8001808 <MX_TIM5_Init+0x138>)
 800170e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001710:	4b3c      	ldr	r3, [pc, #240]	; (8001804 <MX_TIM5_Init+0x134>)
 8001712:	2200      	movs	r2, #0
 8001714:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001716:	4b3b      	ldr	r3, [pc, #236]	; (8001804 <MX_TIM5_Init+0x134>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800171c:	4b39      	ldr	r3, [pc, #228]	; (8001804 <MX_TIM5_Init+0x134>)
 800171e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001722:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001724:	4b37      	ldr	r3, [pc, #220]	; (8001804 <MX_TIM5_Init+0x134>)
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172a:	4b36      	ldr	r3, [pc, #216]	; (8001804 <MX_TIM5_Init+0x134>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001730:	4834      	ldr	r0, [pc, #208]	; (8001804 <MX_TIM5_Init+0x134>)
 8001732:	f003 fb01 	bl	8004d38 <HAL_TIM_Base_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800173c:	f000 faae 	bl	8001c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001744:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001746:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800174a:	4619      	mov	r1, r3
 800174c:	482d      	ldr	r0, [pc, #180]	; (8001804 <MX_TIM5_Init+0x134>)
 800174e:	f004 f91d 	bl	800598c <HAL_TIM_ConfigClockSource>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001758:	f000 faa0 	bl	8001c9c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 800175c:	4829      	ldr	r0, [pc, #164]	; (8001804 <MX_TIM5_Init+0x134>)
 800175e:	f003 fc5b 	bl	8005018 <HAL_TIM_IC_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001768:	f000 fa98 	bl	8001c9c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800176c:	2304      	movs	r3, #4
 800176e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001770:	2350      	movs	r3, #80	; 0x50
 8001772:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001774:	2300      	movs	r3, #0
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001778:	2300      	movs	r3, #0
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8001780:	f107 031c 	add.w	r3, r7, #28
 8001784:	4619      	mov	r1, r3
 8001786:	481f      	ldr	r0, [pc, #124]	; (8001804 <MX_TIM5_Init+0x134>)
 8001788:	f004 f9c7 	bl	8005b1a <HAL_TIM_SlaveConfigSynchro>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM5_Init+0xc6>
  {
    Error_Handler();
 8001792:	f000 fa83 	bl	8001c9c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800179a:	2301      	movs	r3, #1
 800179c:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80017a6:	f107 030c 	add.w	r3, r7, #12
 80017aa:	2200      	movs	r2, #0
 80017ac:	4619      	mov	r1, r3
 80017ae:	4815      	ldr	r0, [pc, #84]	; (8001804 <MX_TIM5_Init+0x134>)
 80017b0:	f003 ff8e 	bl	80056d0 <HAL_TIM_IC_ConfigChannel>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 80017ba:	f000 fa6f 	bl	8001c9c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80017be:	2302      	movs	r3, #2
 80017c0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80017c2:	2302      	movs	r3, #2
 80017c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	2204      	movs	r2, #4
 80017cc:	4619      	mov	r1, r3
 80017ce:	480d      	ldr	r0, [pc, #52]	; (8001804 <MX_TIM5_Init+0x134>)
 80017d0:	f003 ff7e 	bl	80056d0 <HAL_TIM_IC_ConfigChannel>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_TIM5_Init+0x10e>
  {
    Error_Handler();
 80017da:	f000 fa5f 	bl	8001c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017de:	2300      	movs	r3, #0
 80017e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	4619      	mov	r1, r3
 80017ea:	4806      	ldr	r0, [pc, #24]	; (8001804 <MX_TIM5_Init+0x134>)
 80017ec:	f004 ff10 	bl	8006610 <HAL_TIMEx_MasterConfigSynchronization>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM5_Init+0x12a>
  {
    Error_Handler();
 80017f6:	f000 fa51 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80017fa:	bf00      	nop
 80017fc:	3740      	adds	r7, #64	; 0x40
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000230 	.word	0x20000230
 8001808:	40000c00 	.word	0x40000c00

0800180c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b090      	sub	sp, #64	; 0x40
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001812:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001820:	f107 031c 	add.w	r3, r7, #28
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800183e:	1d3b      	adds	r3, r7, #4
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001846:	4b3f      	ldr	r3, [pc, #252]	; (8001944 <MX_TIM8_Init+0x138>)
 8001848:	4a3f      	ldr	r2, [pc, #252]	; (8001948 <MX_TIM8_Init+0x13c>)
 800184a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800184c:	4b3d      	ldr	r3, [pc, #244]	; (8001944 <MX_TIM8_Init+0x138>)
 800184e:	2200      	movs	r2, #0
 8001850:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001852:	4b3c      	ldr	r3, [pc, #240]	; (8001944 <MX_TIM8_Init+0x138>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001858:	4b3a      	ldr	r3, [pc, #232]	; (8001944 <MX_TIM8_Init+0x138>)
 800185a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800185e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001860:	4b38      	ldr	r3, [pc, #224]	; (8001944 <MX_TIM8_Init+0x138>)
 8001862:	2200      	movs	r2, #0
 8001864:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001866:	4b37      	ldr	r3, [pc, #220]	; (8001944 <MX_TIM8_Init+0x138>)
 8001868:	2200      	movs	r2, #0
 800186a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186c:	4b35      	ldr	r3, [pc, #212]	; (8001944 <MX_TIM8_Init+0x138>)
 800186e:	2200      	movs	r2, #0
 8001870:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001872:	4834      	ldr	r0, [pc, #208]	; (8001944 <MX_TIM8_Init+0x138>)
 8001874:	f003 fa60 	bl	8004d38 <HAL_TIM_Base_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800187e:	f000 fa0d 	bl	8001c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001882:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001886:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001888:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800188c:	4619      	mov	r1, r3
 800188e:	482d      	ldr	r0, [pc, #180]	; (8001944 <MX_TIM8_Init+0x138>)
 8001890:	f004 f87c 	bl	800598c <HAL_TIM_ConfigClockSource>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 800189a:	f000 f9ff 	bl	8001c9c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 800189e:	4829      	ldr	r0, [pc, #164]	; (8001944 <MX_TIM8_Init+0x138>)
 80018a0:	f003 fbba 	bl	8005018 <HAL_TIM_IC_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM8_Init+0xa2>
  {
    Error_Handler();
 80018aa:	f000 f9f7 	bl	8001c9c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80018ae:	2304      	movs	r3, #4
 80018b0:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80018b2:	2360      	movs	r3, #96	; 0x60
 80018b4:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80018b6:	2302      	movs	r3, #2
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80018ba:	2300      	movs	r3, #0
 80018bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 80018c2:	f107 031c 	add.w	r3, r7, #28
 80018c6:	4619      	mov	r1, r3
 80018c8:	481e      	ldr	r0, [pc, #120]	; (8001944 <MX_TIM8_Init+0x138>)
 80018ca:	f004 f926 	bl	8005b1a <HAL_TIM_SlaveConfigSynchro>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 80018d4:	f000 f9e2 	bl	8001c9c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80018d8:	2300      	movs	r3, #0
 80018da:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80018dc:	2302      	movs	r3, #2
 80018de:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	2200      	movs	r2, #0
 80018ee:	4619      	mov	r1, r3
 80018f0:	4814      	ldr	r0, [pc, #80]	; (8001944 <MX_TIM8_Init+0x138>)
 80018f2:	f003 feed 	bl	80056d0 <HAL_TIM_IC_ConfigChannel>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 80018fc:	f000 f9ce 	bl	8001c9c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001900:	2302      	movs	r3, #2
 8001902:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001904:	2301      	movs	r3, #1
 8001906:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001908:	f107 030c 	add.w	r3, r7, #12
 800190c:	2204      	movs	r2, #4
 800190e:	4619      	mov	r1, r3
 8001910:	480c      	ldr	r0, [pc, #48]	; (8001944 <MX_TIM8_Init+0x138>)
 8001912:	f003 fedd 	bl	80056d0 <HAL_TIM_IC_ConfigChannel>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM8_Init+0x114>
  {
    Error_Handler();
 800191c:	f000 f9be 	bl	8001c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001920:	2300      	movs	r3, #0
 8001922:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001924:	2300      	movs	r3, #0
 8001926:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	4619      	mov	r1, r3
 800192c:	4805      	ldr	r0, [pc, #20]	; (8001944 <MX_TIM8_Init+0x138>)
 800192e:	f004 fe6f 	bl	8006610 <HAL_TIMEx_MasterConfigSynchronization>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8001938:	f000 f9b0 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800193c:	bf00      	nop
 800193e:	3740      	adds	r7, #64	; 0x40
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000278 	.word	0x20000278
 8001948:	40010400 	.word	0x40010400

0800194c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
 8001960:	615a      	str	r2, [r3, #20]
 8001962:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001964:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <MX_TIM10_Init+0x94>)
 8001966:	4a1f      	ldr	r2, [pc, #124]	; (80019e4 <MX_TIM10_Init+0x98>)
 8001968:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 999;
 800196a:	4b1d      	ldr	r3, [pc, #116]	; (80019e0 <MX_TIM10_Init+0x94>)
 800196c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001970:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001972:	4b1b      	ldr	r3, [pc, #108]	; (80019e0 <MX_TIM10_Init+0x94>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1800-1;
 8001978:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <MX_TIM10_Init+0x94>)
 800197a:	f240 7207 	movw	r2, #1799	; 0x707
 800197e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001980:	4b17      	ldr	r3, [pc, #92]	; (80019e0 <MX_TIM10_Init+0x94>)
 8001982:	2200      	movs	r2, #0
 8001984:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001986:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <MX_TIM10_Init+0x94>)
 8001988:	2200      	movs	r2, #0
 800198a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800198c:	4814      	ldr	r0, [pc, #80]	; (80019e0 <MX_TIM10_Init+0x94>)
 800198e:	f003 f9d3 	bl	8004d38 <HAL_TIM_Base_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 8001998:	f000 f980 	bl	8001c9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800199c:	4810      	ldr	r0, [pc, #64]	; (80019e0 <MX_TIM10_Init+0x94>)
 800199e:	f003 fa1a 	bl	8004dd6 <HAL_TIM_PWM_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 80019a8:	f000 f978 	bl	8001c9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ac:	2360      	movs	r3, #96	; 0x60
 80019ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	2200      	movs	r2, #0
 80019c0:	4619      	mov	r1, r3
 80019c2:	4807      	ldr	r0, [pc, #28]	; (80019e0 <MX_TIM10_Init+0x94>)
 80019c4:	f003 ff20 	bl	8005808 <HAL_TIM_PWM_ConfigChannel>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 80019ce:	f000 f965 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80019d2:	4803      	ldr	r0, [pc, #12]	; (80019e0 <MX_TIM10_Init+0x94>)
 80019d4:	f000 fc7e 	bl	80022d4 <HAL_TIM_MspPostInit>

}
 80019d8:	bf00      	nop
 80019da:	3720      	adds	r7, #32
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	200002c0 	.word	0x200002c0
 80019e4:	40014400 	.word	0x40014400

080019e8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b088      	sub	sp, #32
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
 80019fc:	615a      	str	r2, [r3, #20]
 80019fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001a00:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <MX_TIM11_Init+0x94>)
 8001a02:	4a1f      	ldr	r2, [pc, #124]	; (8001a80 <MX_TIM11_Init+0x98>)
 8001a04:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8001a06:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <MX_TIM11_Init+0x94>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0c:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <MX_TIM11_Init+0x94>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1800-1;
 8001a12:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <MX_TIM11_Init+0x94>)
 8001a14:	f240 7207 	movw	r2, #1799	; 0x707
 8001a18:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a1a:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <MX_TIM11_Init+0x94>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a20:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <MX_TIM11_Init+0x94>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001a26:	4815      	ldr	r0, [pc, #84]	; (8001a7c <MX_TIM11_Init+0x94>)
 8001a28:	f003 f986 	bl	8004d38 <HAL_TIM_Base_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001a32:	f000 f933 	bl	8001c9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001a36:	4811      	ldr	r0, [pc, #68]	; (8001a7c <MX_TIM11_Init+0x94>)
 8001a38:	f003 f9cd 	bl	8004dd6 <HAL_TIM_PWM_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001a42:	f000 f92b 	bl	8001c9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a46:	2360      	movs	r3, #96	; 0x60
 8001a48:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a56:	1d3b      	adds	r3, r7, #4
 8001a58:	2200      	movs	r2, #0
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4807      	ldr	r0, [pc, #28]	; (8001a7c <MX_TIM11_Init+0x94>)
 8001a5e:	f003 fed3 	bl	8005808 <HAL_TIM_PWM_ConfigChannel>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001a68:	f000 f918 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001a6c:	4803      	ldr	r0, [pc, #12]	; (8001a7c <MX_TIM11_Init+0x94>)
 8001a6e:	f000 fc31 	bl	80022d4 <HAL_TIM_MspPostInit>

}
 8001a72:	bf00      	nop
 8001a74:	3720      	adds	r7, #32
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000308 	.word	0x20000308
 8001a80:	40014800 	.word	0x40014800

08001a84 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08e      	sub	sp, #56	; 0x38
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]
 8001ab0:	609a      	str	r2, [r3, #8]
 8001ab2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001ab4:	4b35      	ldr	r3, [pc, #212]	; (8001b8c <MX_TIM12_Init+0x108>)
 8001ab6:	4a36      	ldr	r2, [pc, #216]	; (8001b90 <MX_TIM12_Init+0x10c>)
 8001ab8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001aba:	4b34      	ldr	r3, [pc, #208]	; (8001b8c <MX_TIM12_Init+0x108>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac0:	4b32      	ldr	r3, [pc, #200]	; (8001b8c <MX_TIM12_Init+0x108>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001ac6:	4b31      	ldr	r3, [pc, #196]	; (8001b8c <MX_TIM12_Init+0x108>)
 8001ac8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001acc:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ace:	4b2f      	ldr	r3, [pc, #188]	; (8001b8c <MX_TIM12_Init+0x108>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad4:	4b2d      	ldr	r3, [pc, #180]	; (8001b8c <MX_TIM12_Init+0x108>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001ada:	482c      	ldr	r0, [pc, #176]	; (8001b8c <MX_TIM12_Init+0x108>)
 8001adc:	f003 f92c 	bl	8004d38 <HAL_TIM_Base_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM12_Init+0x66>
  {
    Error_Handler();
 8001ae6:	f000 f8d9 	bl	8001c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001af0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001af4:	4619      	mov	r1, r3
 8001af6:	4825      	ldr	r0, [pc, #148]	; (8001b8c <MX_TIM12_Init+0x108>)
 8001af8:	f003 ff48 	bl	800598c <HAL_TIM_ConfigClockSource>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM12_Init+0x82>
  {
    Error_Handler();
 8001b02:	f000 f8cb 	bl	8001c9c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 8001b06:	4821      	ldr	r0, [pc, #132]	; (8001b8c <MX_TIM12_Init+0x108>)
 8001b08:	f003 fa86 	bl	8005018 <HAL_TIM_IC_Init>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM12_Init+0x92>
  {
    Error_Handler();
 8001b12:	f000 f8c3 	bl	8001c9c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001b16:	2304      	movs	r3, #4
 8001b18:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001b1a:	2350      	movs	r3, #80	; 0x50
 8001b1c:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001b22:	2300      	movs	r3, #0
 8001b24:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim12, &sSlaveConfig) != HAL_OK)
 8001b2a:	f107 0314 	add.w	r3, r7, #20
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4816      	ldr	r0, [pc, #88]	; (8001b8c <MX_TIM12_Init+0x108>)
 8001b32:	f003 fff2 	bl	8005b1a <HAL_TIM_SlaveConfigSynchro>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM12_Init+0xbc>
  {
    Error_Handler();
 8001b3c:	f000 f8ae 	bl	8001c9c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b40:	2300      	movs	r3, #0
 8001b42:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b44:	2301      	movs	r3, #1
 8001b46:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	2200      	movs	r2, #0
 8001b54:	4619      	mov	r1, r3
 8001b56:	480d      	ldr	r0, [pc, #52]	; (8001b8c <MX_TIM12_Init+0x108>)
 8001b58:	f003 fdba 	bl	80056d0 <HAL_TIM_IC_ConfigChannel>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM12_Init+0xe2>
  {
    Error_Handler();
 8001b62:	f000 f89b 	bl	8001c9c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001b66:	2302      	movs	r3, #2
 8001b68:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	2204      	movs	r2, #4
 8001b72:	4619      	mov	r1, r3
 8001b74:	4805      	ldr	r0, [pc, #20]	; (8001b8c <MX_TIM12_Init+0x108>)
 8001b76:	f003 fdab 	bl	80056d0 <HAL_TIM_IC_ConfigChannel>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM12_Init+0x100>
  {
    Error_Handler();
 8001b80:	f000 f88c 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8001b84:	bf00      	nop
 8001b86:	3738      	adds	r7, #56	; 0x38
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000350 	.word	0x20000350
 8001b90:	40001800 	.word	0x40001800

08001b94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b98:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <MX_USART2_UART_Init+0x4c>)
 8001b9a:	4a12      	ldr	r2, [pc, #72]	; (8001be4 <MX_USART2_UART_Init+0x50>)
 8001b9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b9e:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <MX_USART2_UART_Init+0x4c>)
 8001ba0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ba4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <MX_USART2_UART_Init+0x4c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <MX_USART2_UART_Init+0x4c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bb2:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <MX_USART2_UART_Init+0x4c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bb8:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <MX_USART2_UART_Init+0x4c>)
 8001bba:	220c      	movs	r2, #12
 8001bbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bbe:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <MX_USART2_UART_Init+0x4c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <MX_USART2_UART_Init+0x4c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bca:	4805      	ldr	r0, [pc, #20]	; (8001be0 <MX_USART2_UART_Init+0x4c>)
 8001bcc:	f004 fdb0 	bl	8006730 <HAL_UART_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bd6:	f000 f861 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000398 	.word	0x20000398
 8001be4:	40004400 	.word	0x40004400

08001be8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08a      	sub	sp, #40	; 0x28
 8001bec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bee:	f107 0314 	add.w	r3, r7, #20
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	605a      	str	r2, [r3, #4]
 8001bf8:	609a      	str	r2, [r3, #8]
 8001bfa:	60da      	str	r2, [r3, #12]
 8001bfc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	4b24      	ldr	r3, [pc, #144]	; (8001c94 <MX_GPIO_Init+0xac>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a23      	ldr	r2, [pc, #140]	; (8001c94 <MX_GPIO_Init+0xac>)
 8001c08:	f043 0304 	orr.w	r3, r3, #4
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <MX_GPIO_Init+0xac>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0304 	and.w	r3, r3, #4
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <MX_GPIO_Init+0xac>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a1c      	ldr	r2, [pc, #112]	; (8001c94 <MX_GPIO_Init+0xac>)
 8001c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <MX_GPIO_Init+0xac>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <MX_GPIO_Init+0xac>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	4a15      	ldr	r2, [pc, #84]	; (8001c94 <MX_GPIO_Init+0xac>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	6313      	str	r3, [r2, #48]	; 0x30
 8001c46:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <MX_GPIO_Init+0xac>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	60bb      	str	r3, [r7, #8]
 8001c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <MX_GPIO_Init+0xac>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	4a0e      	ldr	r2, [pc, #56]	; (8001c94 <MX_GPIO_Init+0xac>)
 8001c5c:	f043 0302 	orr.w	r3, r3, #2
 8001c60:	6313      	str	r3, [r2, #48]	; 0x30
 8001c62:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <MX_GPIO_Init+0xac>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c74:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c7e:	f107 0314 	add.w	r3, r7, #20
 8001c82:	4619      	mov	r1, r3
 8001c84:	4804      	ldr	r0, [pc, #16]	; (8001c98 <MX_GPIO_Init+0xb0>)
 8001c86:	f001 f94b 	bl	8002f20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c8a:	bf00      	nop
 8001c8c:	3728      	adds	r7, #40	; 0x28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40020800 	.word	0x40020800

08001c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca0:	b672      	cpsid	i
}
 8001ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <Error_Handler+0x8>
	...

08001ca8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	607b      	str	r3, [r7, #4]
 8001cb2:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <HAL_MspInit+0x4c>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	4a0f      	ldr	r2, [pc, #60]	; (8001cf4 <HAL_MspInit+0x4c>)
 8001cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cbe:	4b0d      	ldr	r3, [pc, #52]	; (8001cf4 <HAL_MspInit+0x4c>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc6:	607b      	str	r3, [r7, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	603b      	str	r3, [r7, #0]
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <HAL_MspInit+0x4c>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	4a08      	ldr	r2, [pc, #32]	; (8001cf4 <HAL_MspInit+0x4c>)
 8001cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <HAL_MspInit+0x4c>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ce6:	2007      	movs	r0, #7
 8001ce8:	f000 fff0 	bl	8002ccc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40023800 	.word	0x40023800

08001cf8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	; 0x28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a17      	ldr	r2, [pc, #92]	; (8001d74 <HAL_ADC_MspInit+0x7c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d127      	bne.n	8001d6a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	4b16      	ldr	r3, [pc, #88]	; (8001d78 <HAL_ADC_MspInit+0x80>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d22:	4a15      	ldr	r2, [pc, #84]	; (8001d78 <HAL_ADC_MspInit+0x80>)
 8001d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d28:	6453      	str	r3, [r2, #68]	; 0x44
 8001d2a:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <HAL_ADC_MspInit+0x80>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	4b0f      	ldr	r3, [pc, #60]	; (8001d78 <HAL_ADC_MspInit+0x80>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a0e      	ldr	r2, [pc, #56]	; (8001d78 <HAL_ADC_MspInit+0x80>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <HAL_ADC_MspInit+0x80>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d56:	2303      	movs	r3, #3
 8001d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5e:	f107 0314 	add.w	r3, r7, #20
 8001d62:	4619      	mov	r1, r3
 8001d64:	4805      	ldr	r0, [pc, #20]	; (8001d7c <HAL_ADC_MspInit+0x84>)
 8001d66:	f001 f8db 	bl	8002f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d6a:	bf00      	nop
 8001d6c:	3728      	adds	r7, #40	; 0x28
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40012000 	.word	0x40012000
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40020000 	.word	0x40020000

08001d80 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08a      	sub	sp, #40	; 0x28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a17      	ldr	r2, [pc, #92]	; (8001dfc <HAL_DAC_MspInit+0x7c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d127      	bne.n	8001df2 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <HAL_DAC_MspInit+0x80>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	4a15      	ldr	r2, [pc, #84]	; (8001e00 <HAL_DAC_MspInit+0x80>)
 8001dac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001db0:	6413      	str	r3, [r2, #64]	; 0x40
 8001db2:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <HAL_DAC_MspInit+0x80>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <HAL_DAC_MspInit+0x80>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	4a0e      	ldr	r2, [pc, #56]	; (8001e00 <HAL_DAC_MspInit+0x80>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dce:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <HAL_DAC_MspInit+0x80>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001dda:	2310      	movs	r3, #16
 8001ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dde:	2303      	movs	r3, #3
 8001de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de6:	f107 0314 	add.w	r3, r7, #20
 8001dea:	4619      	mov	r1, r3
 8001dec:	4805      	ldr	r0, [pc, #20]	; (8001e04 <HAL_DAC_MspInit+0x84>)
 8001dee:	f001 f897 	bl	8002f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001df2:	bf00      	nop
 8001df4:	3728      	adds	r7, #40	; 0x28
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40007400 	.word	0x40007400
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40020000 	.word	0x40020000

08001e08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08a      	sub	sp, #40	; 0x28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a29      	ldr	r2, [pc, #164]	; (8001ecc <HAL_I2C_MspInit+0xc4>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d14b      	bne.n	8001ec2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	4b28      	ldr	r3, [pc, #160]	; (8001ed0 <HAL_I2C_MspInit+0xc8>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a27      	ldr	r2, [pc, #156]	; (8001ed0 <HAL_I2C_MspInit+0xc8>)
 8001e34:	f043 0302 	orr.w	r3, r3, #2
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b25      	ldr	r3, [pc, #148]	; (8001ed0 <HAL_I2C_MspInit+0xc8>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	4b21      	ldr	r3, [pc, #132]	; (8001ed0 <HAL_I2C_MspInit+0xc8>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a20      	ldr	r2, [pc, #128]	; (8001ed0 <HAL_I2C_MspInit+0xc8>)
 8001e50:	f043 0304 	orr.w	r3, r3, #4
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b1e      	ldr	r3, [pc, #120]	; (8001ed0 <HAL_I2C_MspInit+0xc8>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e68:	2312      	movs	r3, #18
 8001e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e70:	2303      	movs	r3, #3
 8001e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e74:	2304      	movs	r3, #4
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e78:	f107 0314 	add.w	r3, r7, #20
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4815      	ldr	r0, [pc, #84]	; (8001ed4 <HAL_I2C_MspInit+0xcc>)
 8001e80:	f001 f84e 	bl	8002f20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e8a:	2312      	movs	r3, #18
 8001e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e92:	2303      	movs	r3, #3
 8001e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e96:	2304      	movs	r3, #4
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e9a:	f107 0314 	add.w	r3, r7, #20
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	480d      	ldr	r0, [pc, #52]	; (8001ed8 <HAL_I2C_MspInit+0xd0>)
 8001ea2:	f001 f83d 	bl	8002f20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <HAL_I2C_MspInit+0xc8>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	4a08      	ldr	r2, [pc, #32]	; (8001ed0 <HAL_I2C_MspInit+0xc8>)
 8001eb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_I2C_MspInit+0xc8>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ec2:	bf00      	nop
 8001ec4:	3728      	adds	r7, #40	; 0x28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40005800 	.word	0x40005800
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40020400 	.word	0x40020400
 8001ed8:	40020800 	.word	0x40020800

08001edc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b09a      	sub	sp, #104	; 0x68
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ee4:	f107 030c 	add.w	r3, r7, #12
 8001ee8:	225c      	movs	r2, #92	; 0x5c
 8001eea:	2100      	movs	r1, #0
 8001eec:	4618      	mov	r0, r3
 8001eee:	f004 fee1 	bl	8006cb4 <memset>
  if(hrtc->Instance==RTC)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a0c      	ldr	r2, [pc, #48]	; (8001f28 <HAL_RTC_MspInit+0x4c>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d111      	bne.n	8001f20 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001efc:	2320      	movs	r3, #32
 8001efe:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001f00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f04:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f06:	f107 030c 	add.w	r3, r7, #12
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f001 fc4a 	bl	80037a4 <HAL_RCCEx_PeriphCLKConfig>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001f16:	f7ff fec1 	bl	8001c9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f1a:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <HAL_RTC_MspInit+0x50>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001f20:	bf00      	nop
 8001f22:	3768      	adds	r7, #104	; 0x68
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40002800 	.word	0x40002800
 8001f2c:	42470e3c 	.word	0x42470e3c

08001f30 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08c      	sub	sp, #48	; 0x30
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	f107 031c 	add.w	r3, r7, #28
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a36      	ldr	r2, [pc, #216]	; (8002028 <HAL_TIM_IC_MspInit+0xf8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d12d      	bne.n	8001fae <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	61bb      	str	r3, [r7, #24]
 8001f56:	4b35      	ldr	r3, [pc, #212]	; (800202c <HAL_TIM_IC_MspInit+0xfc>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	4a34      	ldr	r2, [pc, #208]	; (800202c <HAL_TIM_IC_MspInit+0xfc>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6453      	str	r3, [r2, #68]	; 0x44
 8001f62:	4b32      	ldr	r3, [pc, #200]	; (800202c <HAL_TIM_IC_MspInit+0xfc>)
 8001f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	61bb      	str	r3, [r7, #24]
 8001f6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
 8001f72:	4b2e      	ldr	r3, [pc, #184]	; (800202c <HAL_TIM_IC_MspInit+0xfc>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	4a2d      	ldr	r2, [pc, #180]	; (800202c <HAL_TIM_IC_MspInit+0xfc>)
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7e:	4b2b      	ldr	r3, [pc, #172]	; (800202c <HAL_TIM_IC_MspInit+0xfc>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f90:	2302      	movs	r3, #2
 8001f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa0:	f107 031c 	add.w	r3, r7, #28
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4822      	ldr	r0, [pc, #136]	; (8002030 <HAL_TIM_IC_MspInit+0x100>)
 8001fa8:	f000 ffba 	bl	8002f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001fac:	e038      	b.n	8002020 <HAL_TIM_IC_MspInit+0xf0>
  else if(htim_ic->Instance==TIM2)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb6:	d133      	bne.n	8002020 <HAL_TIM_IC_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fb8:	2300      	movs	r3, #0
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	4b1b      	ldr	r3, [pc, #108]	; (800202c <HAL_TIM_IC_MspInit+0xfc>)
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	4a1a      	ldr	r2, [pc, #104]	; (800202c <HAL_TIM_IC_MspInit+0xfc>)
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc8:	4b18      	ldr	r3, [pc, #96]	; (800202c <HAL_TIM_IC_MspInit+0xfc>)
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	4b14      	ldr	r3, [pc, #80]	; (800202c <HAL_TIM_IC_MspInit+0xfc>)
 8001fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fdc:	4a13      	ldr	r2, [pc, #76]	; (800202c <HAL_TIM_IC_MspInit+0xfc>)
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe4:	4b11      	ldr	r3, [pc, #68]	; (800202c <HAL_TIM_IC_MspInit+0xfc>)
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ff0:	2320      	movs	r3, #32
 8001ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002000:	2301      	movs	r3, #1
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002004:	f107 031c 	add.w	r3, r7, #28
 8002008:	4619      	mov	r1, r3
 800200a:	4809      	ldr	r0, [pc, #36]	; (8002030 <HAL_TIM_IC_MspInit+0x100>)
 800200c:	f000 ff88 	bl	8002f20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002010:	2200      	movs	r2, #0
 8002012:	2100      	movs	r1, #0
 8002014:	201c      	movs	r0, #28
 8002016:	f000 fe64 	bl	8002ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800201a:	201c      	movs	r0, #28
 800201c:	f000 fe7d 	bl	8002d1a <HAL_NVIC_EnableIRQ>
}
 8002020:	bf00      	nop
 8002022:	3730      	adds	r7, #48	; 0x30
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40010000 	.word	0x40010000
 800202c:	40023800 	.word	0x40023800
 8002030:	40020000 	.word	0x40020000

08002034 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b094      	sub	sp, #80	; 0x50
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a95      	ldr	r2, [pc, #596]	; (80022a8 <HAL_TIM_Base_MspInit+0x274>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d134      	bne.n	80020c0 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	63bb      	str	r3, [r7, #56]	; 0x38
 800205a:	4b94      	ldr	r3, [pc, #592]	; (80022ac <HAL_TIM_Base_MspInit+0x278>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	4a93      	ldr	r2, [pc, #588]	; (80022ac <HAL_TIM_Base_MspInit+0x278>)
 8002060:	f043 0302 	orr.w	r3, r3, #2
 8002064:	6413      	str	r3, [r2, #64]	; 0x40
 8002066:	4b91      	ldr	r3, [pc, #580]	; (80022ac <HAL_TIM_Base_MspInit+0x278>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002070:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	637b      	str	r3, [r7, #52]	; 0x34
 8002076:	4b8d      	ldr	r3, [pc, #564]	; (80022ac <HAL_TIM_Base_MspInit+0x278>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	4a8c      	ldr	r2, [pc, #560]	; (80022ac <HAL_TIM_Base_MspInit+0x278>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	6313      	str	r3, [r2, #48]	; 0x30
 8002082:	4b8a      	ldr	r3, [pc, #552]	; (80022ac <HAL_TIM_Base_MspInit+0x278>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	637b      	str	r3, [r7, #52]	; 0x34
 800208c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800208e:	2340      	movs	r3, #64	; 0x40
 8002090:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002092:	2302      	movs	r3, #2
 8002094:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209a:	2300      	movs	r3, #0
 800209c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800209e:	2302      	movs	r3, #2
 80020a0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020a6:	4619      	mov	r1, r3
 80020a8:	4881      	ldr	r0, [pc, #516]	; (80022b0 <HAL_TIM_Base_MspInit+0x27c>)
 80020aa:	f000 ff39 	bl	8002f20 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020ae:	2200      	movs	r2, #0
 80020b0:	2100      	movs	r1, #0
 80020b2:	201d      	movs	r0, #29
 80020b4:	f000 fe15 	bl	8002ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020b8:	201d      	movs	r0, #29
 80020ba:	f000 fe2e 	bl	8002d1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80020be:	e0ef      	b.n	80022a0 <HAL_TIM_Base_MspInit+0x26c>
  else if(htim_base->Instance==TIM4)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a7b      	ldr	r2, [pc, #492]	; (80022b4 <HAL_TIM_Base_MspInit+0x280>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d12c      	bne.n	8002124 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	633b      	str	r3, [r7, #48]	; 0x30
 80020ce:	4b77      	ldr	r3, [pc, #476]	; (80022ac <HAL_TIM_Base_MspInit+0x278>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	4a76      	ldr	r2, [pc, #472]	; (80022ac <HAL_TIM_Base_MspInit+0x278>)
 80020d4:	f043 0304 	orr.w	r3, r3, #4
 80020d8:	6413      	str	r3, [r2, #64]	; 0x40
 80020da:	4b74      	ldr	r3, [pc, #464]	; (80022ac <HAL_TIM_Base_MspInit+0x278>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	633b      	str	r3, [r7, #48]	; 0x30
 80020e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020ea:	4b70      	ldr	r3, [pc, #448]	; (80022ac <HAL_TIM_Base_MspInit+0x278>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	4a6f      	ldr	r2, [pc, #444]	; (80022ac <HAL_TIM_Base_MspInit+0x278>)
 80020f0:	f043 0302 	orr.w	r3, r3, #2
 80020f4:	6313      	str	r3, [r2, #48]	; 0x30
 80020f6:	4b6d      	ldr	r3, [pc, #436]	; (80022ac <HAL_TIM_Base_MspInit+0x278>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002102:	2340      	movs	r3, #64	; 0x40
 8002104:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210e:	2300      	movs	r3, #0
 8002110:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002112:	2302      	movs	r3, #2
 8002114:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002116:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800211a:	4619      	mov	r1, r3
 800211c:	4866      	ldr	r0, [pc, #408]	; (80022b8 <HAL_TIM_Base_MspInit+0x284>)
 800211e:	f000 feff 	bl	8002f20 <HAL_GPIO_Init>
}
 8002122:	e0bd      	b.n	80022a0 <HAL_TIM_Base_MspInit+0x26c>
  else if(htim_base->Instance==TIM5)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a64      	ldr	r2, [pc, #400]	; (80022bc <HAL_TIM_Base_MspInit+0x288>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d12c      	bne.n	8002188 <HAL_TIM_Base_MspInit+0x154>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	62bb      	str	r3, [r7, #40]	; 0x28
 8002132:	4b5e      	ldr	r3, [pc, #376]	; (80022ac <HAL_TIM_Base_MspInit+0x278>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	4a5d      	ldr	r2, [pc, #372]	; (80022ac <HAL_TIM_Base_MspInit+0x278>)
 8002138:	f043 0308 	orr.w	r3, r3, #8
 800213c:	6413      	str	r3, [r2, #64]	; 0x40
 800213e:	4b5b      	ldr	r3, [pc, #364]	; (80022ac <HAL_TIM_Base_MspInit+0x278>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	62bb      	str	r3, [r7, #40]	; 0x28
 8002148:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
 800214e:	4b57      	ldr	r3, [pc, #348]	; (80022ac <HAL_TIM_Base_MspInit+0x278>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	4a56      	ldr	r2, [pc, #344]	; (80022ac <HAL_TIM_Base_MspInit+0x278>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	6313      	str	r3, [r2, #48]	; 0x30
 800215a:	4b54      	ldr	r3, [pc, #336]	; (80022ac <HAL_TIM_Base_MspInit+0x278>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002166:	2301      	movs	r3, #1
 8002168:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216a:	2302      	movs	r3, #2
 800216c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002172:	2300      	movs	r3, #0
 8002174:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002176:	2302      	movs	r3, #2
 8002178:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800217e:	4619      	mov	r1, r3
 8002180:	484b      	ldr	r0, [pc, #300]	; (80022b0 <HAL_TIM_Base_MspInit+0x27c>)
 8002182:	f000 fecd 	bl	8002f20 <HAL_GPIO_Init>
}
 8002186:	e08b      	b.n	80022a0 <HAL_TIM_Base_MspInit+0x26c>
  else if(htim_base->Instance==TIM8)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a4c      	ldr	r2, [pc, #304]	; (80022c0 <HAL_TIM_Base_MspInit+0x28c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d12c      	bne.n	80021ec <HAL_TIM_Base_MspInit+0x1b8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	623b      	str	r3, [r7, #32]
 8002196:	4b45      	ldr	r3, [pc, #276]	; (80022ac <HAL_TIM_Base_MspInit+0x278>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	4a44      	ldr	r2, [pc, #272]	; (80022ac <HAL_TIM_Base_MspInit+0x278>)
 800219c:	f043 0302 	orr.w	r3, r3, #2
 80021a0:	6453      	str	r3, [r2, #68]	; 0x44
 80021a2:	4b42      	ldr	r3, [pc, #264]	; (80022ac <HAL_TIM_Base_MspInit+0x278>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	623b      	str	r3, [r7, #32]
 80021ac:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
 80021b2:	4b3e      	ldr	r3, [pc, #248]	; (80022ac <HAL_TIM_Base_MspInit+0x278>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	4a3d      	ldr	r2, [pc, #244]	; (80022ac <HAL_TIM_Base_MspInit+0x278>)
 80021b8:	f043 0304 	orr.w	r3, r3, #4
 80021bc:	6313      	str	r3, [r2, #48]	; 0x30
 80021be:	4b3b      	ldr	r3, [pc, #236]	; (80022ac <HAL_TIM_Base_MspInit+0x278>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	f003 0304 	and.w	r3, r3, #4
 80021c6:	61fb      	str	r3, [r7, #28]
 80021c8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80021ca:	2380      	movs	r3, #128	; 0x80
 80021cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ce:	2302      	movs	r3, #2
 80021d0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d6:	2300      	movs	r3, #0
 80021d8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80021da:	2303      	movs	r3, #3
 80021dc:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021e2:	4619      	mov	r1, r3
 80021e4:	4837      	ldr	r0, [pc, #220]	; (80022c4 <HAL_TIM_Base_MspInit+0x290>)
 80021e6:	f000 fe9b 	bl	8002f20 <HAL_GPIO_Init>
}
 80021ea:	e059      	b.n	80022a0 <HAL_TIM_Base_MspInit+0x26c>
  else if(htim_base->Instance==TIM10)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a35      	ldr	r2, [pc, #212]	; (80022c8 <HAL_TIM_Base_MspInit+0x294>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d10e      	bne.n	8002214 <HAL_TIM_Base_MspInit+0x1e0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	61bb      	str	r3, [r7, #24]
 80021fa:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <HAL_TIM_Base_MspInit+0x278>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	4a2b      	ldr	r2, [pc, #172]	; (80022ac <HAL_TIM_Base_MspInit+0x278>)
 8002200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002204:	6453      	str	r3, [r2, #68]	; 0x44
 8002206:	4b29      	ldr	r3, [pc, #164]	; (80022ac <HAL_TIM_Base_MspInit+0x278>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220e:	61bb      	str	r3, [r7, #24]
 8002210:	69bb      	ldr	r3, [r7, #24]
}
 8002212:	e045      	b.n	80022a0 <HAL_TIM_Base_MspInit+0x26c>
  else if(htim_base->Instance==TIM11)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a2c      	ldr	r2, [pc, #176]	; (80022cc <HAL_TIM_Base_MspInit+0x298>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d10e      	bne.n	800223c <HAL_TIM_Base_MspInit+0x208>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	4b22      	ldr	r3, [pc, #136]	; (80022ac <HAL_TIM_Base_MspInit+0x278>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	4a21      	ldr	r2, [pc, #132]	; (80022ac <HAL_TIM_Base_MspInit+0x278>)
 8002228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800222c:	6453      	str	r3, [r2, #68]	; 0x44
 800222e:	4b1f      	ldr	r3, [pc, #124]	; (80022ac <HAL_TIM_Base_MspInit+0x278>)
 8002230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002232:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	697b      	ldr	r3, [r7, #20]
}
 800223a:	e031      	b.n	80022a0 <HAL_TIM_Base_MspInit+0x26c>
  else if(htim_base->Instance==TIM12)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a23      	ldr	r2, [pc, #140]	; (80022d0 <HAL_TIM_Base_MspInit+0x29c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d12c      	bne.n	80022a0 <HAL_TIM_Base_MspInit+0x26c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	4b18      	ldr	r3, [pc, #96]	; (80022ac <HAL_TIM_Base_MspInit+0x278>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	4a17      	ldr	r2, [pc, #92]	; (80022ac <HAL_TIM_Base_MspInit+0x278>)
 8002250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002254:	6413      	str	r3, [r2, #64]	; 0x40
 8002256:	4b15      	ldr	r3, [pc, #84]	; (80022ac <HAL_TIM_Base_MspInit+0x278>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	4b11      	ldr	r3, [pc, #68]	; (80022ac <HAL_TIM_Base_MspInit+0x278>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	4a10      	ldr	r2, [pc, #64]	; (80022ac <HAL_TIM_Base_MspInit+0x278>)
 800226c:	f043 0302 	orr.w	r3, r3, #2
 8002270:	6313      	str	r3, [r2, #48]	; 0x30
 8002272:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <HAL_TIM_Base_MspInit+0x278>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800227e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002282:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002284:	2302      	movs	r3, #2
 8002286:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002288:	2300      	movs	r3, #0
 800228a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228c:	2300      	movs	r3, #0
 800228e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002290:	2309      	movs	r3, #9
 8002292:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002294:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002298:	4619      	mov	r1, r3
 800229a:	4807      	ldr	r0, [pc, #28]	; (80022b8 <HAL_TIM_Base_MspInit+0x284>)
 800229c:	f000 fe40 	bl	8002f20 <HAL_GPIO_Init>
}
 80022a0:	bf00      	nop
 80022a2:	3750      	adds	r7, #80	; 0x50
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40000400 	.word	0x40000400
 80022ac:	40023800 	.word	0x40023800
 80022b0:	40020000 	.word	0x40020000
 80022b4:	40000800 	.word	0x40000800
 80022b8:	40020400 	.word	0x40020400
 80022bc:	40000c00 	.word	0x40000c00
 80022c0:	40010400 	.word	0x40010400
 80022c4:	40020800 	.word	0x40020800
 80022c8:	40014400 	.word	0x40014400
 80022cc:	40014800 	.word	0x40014800
 80022d0:	40001800 	.word	0x40001800

080022d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08a      	sub	sp, #40	; 0x28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	60da      	str	r2, [r3, #12]
 80022ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM10)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a25      	ldr	r2, [pc, #148]	; (8002388 <HAL_TIM_MspPostInit+0xb4>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d11f      	bne.n	8002336 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	613b      	str	r3, [r7, #16]
 80022fa:	4b24      	ldr	r3, [pc, #144]	; (800238c <HAL_TIM_MspPostInit+0xb8>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	4a23      	ldr	r2, [pc, #140]	; (800238c <HAL_TIM_MspPostInit+0xb8>)
 8002300:	f043 0302 	orr.w	r3, r3, #2
 8002304:	6313      	str	r3, [r2, #48]	; 0x30
 8002306:	4b21      	ldr	r3, [pc, #132]	; (800238c <HAL_TIM_MspPostInit+0xb8>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	693b      	ldr	r3, [r7, #16]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002312:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002318:	2302      	movs	r3, #2
 800231a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002320:	2300      	movs	r3, #0
 8002322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002324:	2303      	movs	r3, #3
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	4619      	mov	r1, r3
 800232e:	4818      	ldr	r0, [pc, #96]	; (8002390 <HAL_TIM_MspPostInit+0xbc>)
 8002330:	f000 fdf6 	bl	8002f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8002334:	e023      	b.n	800237e <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM11)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a16      	ldr	r2, [pc, #88]	; (8002394 <HAL_TIM_MspPostInit+0xc0>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d11e      	bne.n	800237e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	4b11      	ldr	r3, [pc, #68]	; (800238c <HAL_TIM_MspPostInit+0xb8>)
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	4a10      	ldr	r2, [pc, #64]	; (800238c <HAL_TIM_MspPostInit+0xb8>)
 800234a:	f043 0302 	orr.w	r3, r3, #2
 800234e:	6313      	str	r3, [r2, #48]	; 0x30
 8002350:	4b0e      	ldr	r3, [pc, #56]	; (800238c <HAL_TIM_MspPostInit+0xb8>)
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800235c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002362:	2302      	movs	r3, #2
 8002364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236a:	2300      	movs	r3, #0
 800236c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800236e:	2303      	movs	r3, #3
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002372:	f107 0314 	add.w	r3, r7, #20
 8002376:	4619      	mov	r1, r3
 8002378:	4805      	ldr	r0, [pc, #20]	; (8002390 <HAL_TIM_MspPostInit+0xbc>)
 800237a:	f000 fdd1 	bl	8002f20 <HAL_GPIO_Init>
}
 800237e:	bf00      	nop
 8002380:	3728      	adds	r7, #40	; 0x28
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40014400 	.word	0x40014400
 800238c:	40023800 	.word	0x40023800
 8002390:	40020400 	.word	0x40020400
 8002394:	40014800 	.word	0x40014800

08002398 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08a      	sub	sp, #40	; 0x28
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a0:	f107 0314 	add.w	r3, r7, #20
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a19      	ldr	r2, [pc, #100]	; (800241c <HAL_UART_MspInit+0x84>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d12b      	bne.n	8002412 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	4b18      	ldr	r3, [pc, #96]	; (8002420 <HAL_UART_MspInit+0x88>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	4a17      	ldr	r2, [pc, #92]	; (8002420 <HAL_UART_MspInit+0x88>)
 80023c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ca:	4b15      	ldr	r3, [pc, #84]	; (8002420 <HAL_UART_MspInit+0x88>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	613b      	str	r3, [r7, #16]
 80023d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	4b11      	ldr	r3, [pc, #68]	; (8002420 <HAL_UART_MspInit+0x88>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	4a10      	ldr	r2, [pc, #64]	; (8002420 <HAL_UART_MspInit+0x88>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	6313      	str	r3, [r2, #48]	; 0x30
 80023e6:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <HAL_UART_MspInit+0x88>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80023f2:	230c      	movs	r3, #12
 80023f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f6:	2302      	movs	r3, #2
 80023f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fe:	2303      	movs	r3, #3
 8002400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002402:	2307      	movs	r3, #7
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002406:	f107 0314 	add.w	r3, r7, #20
 800240a:	4619      	mov	r1, r3
 800240c:	4805      	ldr	r0, [pc, #20]	; (8002424 <HAL_UART_MspInit+0x8c>)
 800240e:	f000 fd87 	bl	8002f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002412:	bf00      	nop
 8002414:	3728      	adds	r7, #40	; 0x28
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40004400 	.word	0x40004400
 8002420:	40023800 	.word	0x40023800
 8002424:	40020000 	.word	0x40020000

08002428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800242c:	e7fe      	b.n	800242c <NMI_Handler+0x4>

0800242e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800242e:	b480      	push	{r7}
 8002430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002432:	e7fe      	b.n	8002432 <HardFault_Handler+0x4>

08002434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002438:	e7fe      	b.n	8002438 <MemManage_Handler+0x4>

0800243a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800243e:	e7fe      	b.n	800243e <BusFault_Handler+0x4>

08002440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002444:	e7fe      	b.n	8002444 <UsageFault_Handler+0x4>

08002446 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002474:	f000 f8a4 	bl	80025c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002478:	bf00      	nop
 800247a:	bd80      	pop	{r7, pc}

0800247c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002480:	4802      	ldr	r0, [pc, #8]	; (800248c <TIM2_IRQHandler+0x10>)
 8002482:	f003 f81d 	bl	80054c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000158 	.word	0x20000158

08002490 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002494:	4802      	ldr	r0, [pc, #8]	; (80024a0 <TIM3_IRQHandler+0x10>)
 8002496:	f003 f813 	bl	80054c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	200001a0 	.word	0x200001a0

080024a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024a8:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <SystemInit+0x20>)
 80024aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ae:	4a05      	ldr	r2, [pc, #20]	; (80024c4 <SystemInit+0x20>)
 80024b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024b8:	bf00      	nop
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80024c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002500 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024cc:	480d      	ldr	r0, [pc, #52]	; (8002504 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024ce:	490e      	ldr	r1, [pc, #56]	; (8002508 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024d0:	4a0e      	ldr	r2, [pc, #56]	; (800250c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024d4:	e002      	b.n	80024dc <LoopCopyDataInit>

080024d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024da:	3304      	adds	r3, #4

080024dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024e0:	d3f9      	bcc.n	80024d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024e2:	4a0b      	ldr	r2, [pc, #44]	; (8002510 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024e4:	4c0b      	ldr	r4, [pc, #44]	; (8002514 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024e8:	e001      	b.n	80024ee <LoopFillZerobss>

080024ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024ec:	3204      	adds	r2, #4

080024ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024f0:	d3fb      	bcc.n	80024ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024f2:	f7ff ffd7 	bl	80024a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024f6:	f004 fbe5 	bl	8006cc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024fa:	f7fe fc09 	bl	8000d10 <main>
  bx  lr    
 80024fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002500:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002508:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 800250c:	08006d4c 	.word	0x08006d4c
  ldr r2, =_sbss
 8002510:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8002514:	20000414 	.word	0x20000414

08002518 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002518:	e7fe      	b.n	8002518 <ADC_IRQHandler>
	...

0800251c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002520:	4b0e      	ldr	r3, [pc, #56]	; (800255c <HAL_Init+0x40>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a0d      	ldr	r2, [pc, #52]	; (800255c <HAL_Init+0x40>)
 8002526:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800252a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800252c:	4b0b      	ldr	r3, [pc, #44]	; (800255c <HAL_Init+0x40>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a0a      	ldr	r2, [pc, #40]	; (800255c <HAL_Init+0x40>)
 8002532:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002536:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002538:	4b08      	ldr	r3, [pc, #32]	; (800255c <HAL_Init+0x40>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a07      	ldr	r2, [pc, #28]	; (800255c <HAL_Init+0x40>)
 800253e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002542:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002544:	2003      	movs	r0, #3
 8002546:	f000 fbc1 	bl	8002ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800254a:	2000      	movs	r0, #0
 800254c:	f000 f808 	bl	8002560 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002550:	f7ff fbaa 	bl	8001ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40023c00 	.word	0x40023c00

08002560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002568:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <HAL_InitTick+0x54>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <HAL_InitTick+0x58>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	4619      	mov	r1, r3
 8002572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002576:	fbb3 f3f1 	udiv	r3, r3, r1
 800257a:	fbb2 f3f3 	udiv	r3, r2, r3
 800257e:	4618      	mov	r0, r3
 8002580:	f000 fbd9 	bl	8002d36 <HAL_SYSTICK_Config>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e00e      	b.n	80025ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b0f      	cmp	r3, #15
 8002592:	d80a      	bhi.n	80025aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002594:	2200      	movs	r2, #0
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800259c:	f000 fba1 	bl	8002ce2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025a0:	4a06      	ldr	r2, [pc, #24]	; (80025bc <HAL_InitTick+0x5c>)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	e000      	b.n	80025ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20000018 	.word	0x20000018
 80025b8:	20000020 	.word	0x20000020
 80025bc:	2000001c 	.word	0x2000001c

080025c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025c4:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <HAL_IncTick+0x20>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	461a      	mov	r2, r3
 80025ca:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <HAL_IncTick+0x24>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4413      	add	r3, r2
 80025d0:	4a04      	ldr	r2, [pc, #16]	; (80025e4 <HAL_IncTick+0x24>)
 80025d2:	6013      	str	r3, [r2, #0]
}
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	20000020 	.word	0x20000020
 80025e4:	20000410 	.word	0x20000410

080025e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  return uwTick;
 80025ec:	4b03      	ldr	r3, [pc, #12]	; (80025fc <HAL_GetTick+0x14>)
 80025ee:	681b      	ldr	r3, [r3, #0]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	20000410 	.word	0x20000410

08002600 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002608:	f7ff ffee 	bl	80025e8 <HAL_GetTick>
 800260c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002618:	d005      	beq.n	8002626 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800261a:	4b0a      	ldr	r3, [pc, #40]	; (8002644 <HAL_Delay+0x44>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	461a      	mov	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4413      	add	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002626:	bf00      	nop
 8002628:	f7ff ffde 	bl	80025e8 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	429a      	cmp	r2, r3
 8002636:	d8f7      	bhi.n	8002628 <HAL_Delay+0x28>
  {
  }
}
 8002638:	bf00      	nop
 800263a:	bf00      	nop
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000020 	.word	0x20000020

08002648 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002650:	2300      	movs	r3, #0
 8002652:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e033      	b.n	80026c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	2b00      	cmp	r3, #0
 8002664:	d109      	bne.n	800267a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff fb46 	bl	8001cf8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f003 0310 	and.w	r3, r3, #16
 8002682:	2b00      	cmp	r3, #0
 8002684:	d118      	bne.n	80026b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800268e:	f023 0302 	bic.w	r3, r3, #2
 8002692:	f043 0202 	orr.w	r2, r3, #2
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f94a 	bl	8002934 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f023 0303 	bic.w	r3, r3, #3
 80026ae:	f043 0201 	orr.w	r2, r3, #1
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	641a      	str	r2, [r3, #64]	; 0x40
 80026b6:	e001      	b.n	80026bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
	...

080026d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026da:	2300      	movs	r3, #0
 80026dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d101      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x1c>
 80026e8:	2302      	movs	r3, #2
 80026ea:	e113      	b.n	8002914 <HAL_ADC_ConfigChannel+0x244>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b09      	cmp	r3, #9
 80026fa:	d925      	bls.n	8002748 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68d9      	ldr	r1, [r3, #12]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	b29b      	uxth	r3, r3
 8002708:	461a      	mov	r2, r3
 800270a:	4613      	mov	r3, r2
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	4413      	add	r3, r2
 8002710:	3b1e      	subs	r3, #30
 8002712:	2207      	movs	r2, #7
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43da      	mvns	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	400a      	ands	r2, r1
 8002720:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68d9      	ldr	r1, [r3, #12]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	b29b      	uxth	r3, r3
 8002732:	4618      	mov	r0, r3
 8002734:	4603      	mov	r3, r0
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	4403      	add	r3, r0
 800273a:	3b1e      	subs	r3, #30
 800273c:	409a      	lsls	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	60da      	str	r2, [r3, #12]
 8002746:	e022      	b.n	800278e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6919      	ldr	r1, [r3, #16]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	b29b      	uxth	r3, r3
 8002754:	461a      	mov	r2, r3
 8002756:	4613      	mov	r3, r2
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	4413      	add	r3, r2
 800275c:	2207      	movs	r2, #7
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43da      	mvns	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	400a      	ands	r2, r1
 800276a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6919      	ldr	r1, [r3, #16]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	b29b      	uxth	r3, r3
 800277c:	4618      	mov	r0, r3
 800277e:	4603      	mov	r3, r0
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	4403      	add	r3, r0
 8002784:	409a      	lsls	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b06      	cmp	r3, #6
 8002794:	d824      	bhi.n	80027e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	3b05      	subs	r3, #5
 80027a8:	221f      	movs	r2, #31
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43da      	mvns	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	400a      	ands	r2, r1
 80027b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	4618      	mov	r0, r3
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	3b05      	subs	r3, #5
 80027d2:	fa00 f203 	lsl.w	r2, r0, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	635a      	str	r2, [r3, #52]	; 0x34
 80027de:	e04c      	b.n	800287a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b0c      	cmp	r3, #12
 80027e6:	d824      	bhi.n	8002832 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	3b23      	subs	r3, #35	; 0x23
 80027fa:	221f      	movs	r2, #31
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43da      	mvns	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	400a      	ands	r2, r1
 8002808:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	b29b      	uxth	r3, r3
 8002816:	4618      	mov	r0, r3
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	3b23      	subs	r3, #35	; 0x23
 8002824:	fa00 f203 	lsl.w	r2, r0, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	631a      	str	r2, [r3, #48]	; 0x30
 8002830:	e023      	b.n	800287a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	3b41      	subs	r3, #65	; 0x41
 8002844:	221f      	movs	r2, #31
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43da      	mvns	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	400a      	ands	r2, r1
 8002852:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	b29b      	uxth	r3, r3
 8002860:	4618      	mov	r0, r3
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	3b41      	subs	r3, #65	; 0x41
 800286e:	fa00 f203 	lsl.w	r2, r0, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800287a:	4b29      	ldr	r3, [pc, #164]	; (8002920 <HAL_ADC_ConfigChannel+0x250>)
 800287c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a28      	ldr	r2, [pc, #160]	; (8002924 <HAL_ADC_ConfigChannel+0x254>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d10f      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x1d8>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b12      	cmp	r3, #18
 800288e:	d10b      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a1d      	ldr	r2, [pc, #116]	; (8002924 <HAL_ADC_ConfigChannel+0x254>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d12b      	bne.n	800290a <HAL_ADC_ConfigChannel+0x23a>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a1c      	ldr	r2, [pc, #112]	; (8002928 <HAL_ADC_ConfigChannel+0x258>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d003      	beq.n	80028c4 <HAL_ADC_ConfigChannel+0x1f4>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b11      	cmp	r3, #17
 80028c2:	d122      	bne.n	800290a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a11      	ldr	r2, [pc, #68]	; (8002928 <HAL_ADC_ConfigChannel+0x258>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d111      	bne.n	800290a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028e6:	4b11      	ldr	r3, [pc, #68]	; (800292c <HAL_ADC_ConfigChannel+0x25c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a11      	ldr	r2, [pc, #68]	; (8002930 <HAL_ADC_ConfigChannel+0x260>)
 80028ec:	fba2 2303 	umull	r2, r3, r2, r3
 80028f0:	0c9a      	lsrs	r2, r3, #18
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028fc:	e002      	b.n	8002904 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	3b01      	subs	r3, #1
 8002902:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f9      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	40012300 	.word	0x40012300
 8002924:	40012000 	.word	0x40012000
 8002928:	10000012 	.word	0x10000012
 800292c:	20000018 	.word	0x20000018
 8002930:	431bde83 	.word	0x431bde83

08002934 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800293c:	4b79      	ldr	r3, [pc, #484]	; (8002b24 <ADC_Init+0x1f0>)
 800293e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	431a      	orrs	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002968:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6859      	ldr	r1, [r3, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	021a      	lsls	r2, r3, #8
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	430a      	orrs	r2, r1
 800297c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800298c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6859      	ldr	r1, [r3, #4]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6899      	ldr	r1, [r3, #8]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c6:	4a58      	ldr	r2, [pc, #352]	; (8002b28 <ADC_Init+0x1f4>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d022      	beq.n	8002a12 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689a      	ldr	r2, [r3, #8]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6899      	ldr	r1, [r3, #8]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6899      	ldr	r1, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	e00f      	b.n	8002a32 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a30:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0202 	bic.w	r2, r2, #2
 8002a40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6899      	ldr	r1, [r3, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	7e1b      	ldrb	r3, [r3, #24]
 8002a4c:	005a      	lsls	r2, r3, #1
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d01b      	beq.n	8002a98 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a6e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6859      	ldr	r1, [r3, #4]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	035a      	lsls	r2, r3, #13
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	e007      	b.n	8002aa8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aa6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	051a      	lsls	r2, r3, #20
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002adc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6899      	ldr	r1, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002aea:	025a      	lsls	r2, r3, #9
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6899      	ldr	r1, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	029a      	lsls	r2, r3, #10
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	609a      	str	r2, [r3, #8]
}
 8002b18:	bf00      	nop
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	40012300 	.word	0x40012300
 8002b28:	0f000001 	.word	0x0f000001

08002b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b3c:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <__NVIC_SetPriorityGrouping+0x44>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b48:	4013      	ands	r3, r2
 8002b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b5e:	4a04      	ldr	r2, [pc, #16]	; (8002b70 <__NVIC_SetPriorityGrouping+0x44>)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	60d3      	str	r3, [r2, #12]
}
 8002b64:	bf00      	nop
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	e000ed00 	.word	0xe000ed00

08002b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b78:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <__NVIC_GetPriorityGrouping+0x18>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	0a1b      	lsrs	r3, r3, #8
 8002b7e:	f003 0307 	and.w	r3, r3, #7
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	e000ed00 	.word	0xe000ed00

08002b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	db0b      	blt.n	8002bba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ba2:	79fb      	ldrb	r3, [r7, #7]
 8002ba4:	f003 021f 	and.w	r2, r3, #31
 8002ba8:	4907      	ldr	r1, [pc, #28]	; (8002bc8 <__NVIC_EnableIRQ+0x38>)
 8002baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bae:	095b      	lsrs	r3, r3, #5
 8002bb0:	2001      	movs	r0, #1
 8002bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	e000e100 	.word	0xe000e100

08002bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	6039      	str	r1, [r7, #0]
 8002bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	db0a      	blt.n	8002bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	490c      	ldr	r1, [pc, #48]	; (8002c18 <__NVIC_SetPriority+0x4c>)
 8002be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bea:	0112      	lsls	r2, r2, #4
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	440b      	add	r3, r1
 8002bf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bf4:	e00a      	b.n	8002c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	4908      	ldr	r1, [pc, #32]	; (8002c1c <__NVIC_SetPriority+0x50>)
 8002bfc:	79fb      	ldrb	r3, [r7, #7]
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	3b04      	subs	r3, #4
 8002c04:	0112      	lsls	r2, r2, #4
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	440b      	add	r3, r1
 8002c0a:	761a      	strb	r2, [r3, #24]
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	e000e100 	.word	0xe000e100
 8002c1c:	e000ed00 	.word	0xe000ed00

08002c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b089      	sub	sp, #36	; 0x24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f1c3 0307 	rsb	r3, r3, #7
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	bf28      	it	cs
 8002c3e:	2304      	movcs	r3, #4
 8002c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	3304      	adds	r3, #4
 8002c46:	2b06      	cmp	r3, #6
 8002c48:	d902      	bls.n	8002c50 <NVIC_EncodePriority+0x30>
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	3b03      	subs	r3, #3
 8002c4e:	e000      	b.n	8002c52 <NVIC_EncodePriority+0x32>
 8002c50:	2300      	movs	r3, #0
 8002c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	43da      	mvns	r2, r3
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	401a      	ands	r2, r3
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c72:	43d9      	mvns	r1, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c78:	4313      	orrs	r3, r2
         );
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3724      	adds	r7, #36	; 0x24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
	...

08002c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3b01      	subs	r3, #1
 8002c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c98:	d301      	bcc.n	8002c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e00f      	b.n	8002cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c9e:	4a0a      	ldr	r2, [pc, #40]	; (8002cc8 <SysTick_Config+0x40>)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ca6:	210f      	movs	r1, #15
 8002ca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cac:	f7ff ff8e 	bl	8002bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cb0:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <SysTick_Config+0x40>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cb6:	4b04      	ldr	r3, [pc, #16]	; (8002cc8 <SysTick_Config+0x40>)
 8002cb8:	2207      	movs	r2, #7
 8002cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	e000e010 	.word	0xe000e010

08002ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7ff ff29 	bl	8002b2c <__NVIC_SetPriorityGrouping>
}
 8002cda:	bf00      	nop
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b086      	sub	sp, #24
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	4603      	mov	r3, r0
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	607a      	str	r2, [r7, #4]
 8002cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cf4:	f7ff ff3e 	bl	8002b74 <__NVIC_GetPriorityGrouping>
 8002cf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	6978      	ldr	r0, [r7, #20]
 8002d00:	f7ff ff8e 	bl	8002c20 <NVIC_EncodePriority>
 8002d04:	4602      	mov	r2, r0
 8002d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff ff5d 	bl	8002bcc <__NVIC_SetPriority>
}
 8002d12:	bf00      	nop
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b082      	sub	sp, #8
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	4603      	mov	r3, r0
 8002d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff ff31 	bl	8002b90 <__NVIC_EnableIRQ>
}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff ffa2 	bl	8002c88 <SysTick_Config>
 8002d44:	4603      	mov	r3, r0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e014      	b.n	8002d8a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	791b      	ldrb	r3, [r3, #4]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d105      	bne.n	8002d76 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7ff f805 	bl	8001d80 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2202      	movs	r2, #2
 8002d7a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
 8002d9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	795b      	ldrb	r3, [r3, #5]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_DAC_Start+0x16>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e040      	b.n	8002e2a <HAL_DAC_Start+0x98>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2202      	movs	r2, #2
 8002db2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6819      	ldr	r1, [r3, #0]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	409a      	lsls	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10f      	bne.n	8002df2 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002ddc:	2b3c      	cmp	r3, #60	; 0x3c
 8002dde:	d11d      	bne.n	8002e1c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0201 	orr.w	r2, r2, #1
 8002dee:	605a      	str	r2, [r3, #4]
 8002df0:	e014      	b.n	8002e1c <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	f003 0310 	and.w	r3, r3, #16
 8002e02:	213c      	movs	r1, #60	; 0x3c
 8002e04:	fa01 f303 	lsl.w	r3, r1, r3
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d107      	bne.n	8002e1c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0202 	orr.w	r2, r2, #2
 8002e1a:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b087      	sub	sp, #28
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	60f8      	str	r0, [r7, #12]
 8002e3e:	60b9      	str	r1, [r7, #8]
 8002e40:	607a      	str	r2, [r7, #4]
 8002e42:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d105      	bne.n	8002e60 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4413      	add	r3, r2
 8002e5a:	3308      	adds	r3, #8
 8002e5c:	617b      	str	r3, [r7, #20]
 8002e5e:	e004      	b.n	8002e6a <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4413      	add	r3, r2
 8002e66:	3314      	adds	r3, #20
 8002e68:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	371c      	adds	r7, #28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b087      	sub	sp, #28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	795b      	ldrb	r3, [r3, #5]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d101      	bne.n	8002e98 <HAL_DAC_ConfigChannel+0x18>
 8002e94:	2302      	movs	r3, #2
 8002e96:	e03c      	b.n	8002f12 <HAL_DAC_ConfigChannel+0x92>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f003 0310 	and.w	r3, r3, #16
 8002eb2:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f003 0310 	and.w	r3, r3, #16
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6819      	ldr	r1, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f003 0310 	and.w	r3, r3, #16
 8002ef4:	22c0      	movs	r2, #192	; 0xc0
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	43da      	mvns	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	400a      	ands	r2, r1
 8002f02:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2201      	movs	r2, #1
 8002f08:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	371c      	adds	r7, #28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
	...

08002f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b089      	sub	sp, #36	; 0x24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f32:	2300      	movs	r3, #0
 8002f34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f36:	2300      	movs	r3, #0
 8002f38:	61fb      	str	r3, [r7, #28]
 8002f3a:	e165      	b.n	8003208 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	f040 8154 	bne.w	8003202 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d005      	beq.n	8002f72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d130      	bne.n	8002fd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	2203      	movs	r2, #3
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43db      	mvns	r3, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4013      	ands	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	68da      	ldr	r2, [r3, #12]
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fa8:	2201      	movs	r2, #1
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	091b      	lsrs	r3, r3, #4
 8002fbe:	f003 0201 	and.w	r2, r3, #1
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 0303 	and.w	r3, r3, #3
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d017      	beq.n	8003010 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	2203      	movs	r2, #3
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4313      	orrs	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f003 0303 	and.w	r3, r3, #3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d123      	bne.n	8003064 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	08da      	lsrs	r2, r3, #3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3208      	adds	r2, #8
 8003024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003028:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	220f      	movs	r2, #15
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	43db      	mvns	r3, r3
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4013      	ands	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	691a      	ldr	r2, [r3, #16]
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	4313      	orrs	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	08da      	lsrs	r2, r3, #3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	3208      	adds	r2, #8
 800305e:	69b9      	ldr	r1, [r7, #24]
 8003060:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	2203      	movs	r2, #3
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	43db      	mvns	r3, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4013      	ands	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f003 0203 	and.w	r2, r3, #3
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	4313      	orrs	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 80ae 	beq.w	8003202 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030a6:	2300      	movs	r3, #0
 80030a8:	60fb      	str	r3, [r7, #12]
 80030aa:	4b5d      	ldr	r3, [pc, #372]	; (8003220 <HAL_GPIO_Init+0x300>)
 80030ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ae:	4a5c      	ldr	r2, [pc, #368]	; (8003220 <HAL_GPIO_Init+0x300>)
 80030b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030b4:	6453      	str	r3, [r2, #68]	; 0x44
 80030b6:	4b5a      	ldr	r3, [pc, #360]	; (8003220 <HAL_GPIO_Init+0x300>)
 80030b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030c2:	4a58      	ldr	r2, [pc, #352]	; (8003224 <HAL_GPIO_Init+0x304>)
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	089b      	lsrs	r3, r3, #2
 80030c8:	3302      	adds	r3, #2
 80030ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	220f      	movs	r2, #15
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	43db      	mvns	r3, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4013      	ands	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a4f      	ldr	r2, [pc, #316]	; (8003228 <HAL_GPIO_Init+0x308>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d025      	beq.n	800313a <HAL_GPIO_Init+0x21a>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a4e      	ldr	r2, [pc, #312]	; (800322c <HAL_GPIO_Init+0x30c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d01f      	beq.n	8003136 <HAL_GPIO_Init+0x216>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a4d      	ldr	r2, [pc, #308]	; (8003230 <HAL_GPIO_Init+0x310>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d019      	beq.n	8003132 <HAL_GPIO_Init+0x212>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a4c      	ldr	r2, [pc, #304]	; (8003234 <HAL_GPIO_Init+0x314>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d013      	beq.n	800312e <HAL_GPIO_Init+0x20e>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a4b      	ldr	r2, [pc, #300]	; (8003238 <HAL_GPIO_Init+0x318>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d00d      	beq.n	800312a <HAL_GPIO_Init+0x20a>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a4a      	ldr	r2, [pc, #296]	; (800323c <HAL_GPIO_Init+0x31c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d007      	beq.n	8003126 <HAL_GPIO_Init+0x206>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a49      	ldr	r2, [pc, #292]	; (8003240 <HAL_GPIO_Init+0x320>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d101      	bne.n	8003122 <HAL_GPIO_Init+0x202>
 800311e:	2306      	movs	r3, #6
 8003120:	e00c      	b.n	800313c <HAL_GPIO_Init+0x21c>
 8003122:	2307      	movs	r3, #7
 8003124:	e00a      	b.n	800313c <HAL_GPIO_Init+0x21c>
 8003126:	2305      	movs	r3, #5
 8003128:	e008      	b.n	800313c <HAL_GPIO_Init+0x21c>
 800312a:	2304      	movs	r3, #4
 800312c:	e006      	b.n	800313c <HAL_GPIO_Init+0x21c>
 800312e:	2303      	movs	r3, #3
 8003130:	e004      	b.n	800313c <HAL_GPIO_Init+0x21c>
 8003132:	2302      	movs	r3, #2
 8003134:	e002      	b.n	800313c <HAL_GPIO_Init+0x21c>
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <HAL_GPIO_Init+0x21c>
 800313a:	2300      	movs	r3, #0
 800313c:	69fa      	ldr	r2, [r7, #28]
 800313e:	f002 0203 	and.w	r2, r2, #3
 8003142:	0092      	lsls	r2, r2, #2
 8003144:	4093      	lsls	r3, r2
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4313      	orrs	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800314c:	4935      	ldr	r1, [pc, #212]	; (8003224 <HAL_GPIO_Init+0x304>)
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	089b      	lsrs	r3, r3, #2
 8003152:	3302      	adds	r3, #2
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800315a:	4b3a      	ldr	r3, [pc, #232]	; (8003244 <HAL_GPIO_Init+0x324>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	43db      	mvns	r3, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4013      	ands	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800317e:	4a31      	ldr	r2, [pc, #196]	; (8003244 <HAL_GPIO_Init+0x324>)
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003184:	4b2f      	ldr	r3, [pc, #188]	; (8003244 <HAL_GPIO_Init+0x324>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	43db      	mvns	r3, r3
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4013      	ands	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031a8:	4a26      	ldr	r2, [pc, #152]	; (8003244 <HAL_GPIO_Init+0x324>)
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031ae:	4b25      	ldr	r3, [pc, #148]	; (8003244 <HAL_GPIO_Init+0x324>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	43db      	mvns	r3, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4013      	ands	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031d2:	4a1c      	ldr	r2, [pc, #112]	; (8003244 <HAL_GPIO_Init+0x324>)
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031d8:	4b1a      	ldr	r3, [pc, #104]	; (8003244 <HAL_GPIO_Init+0x324>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	43db      	mvns	r3, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4013      	ands	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031fc:	4a11      	ldr	r2, [pc, #68]	; (8003244 <HAL_GPIO_Init+0x324>)
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	3301      	adds	r3, #1
 8003206:	61fb      	str	r3, [r7, #28]
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	2b0f      	cmp	r3, #15
 800320c:	f67f ae96 	bls.w	8002f3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003210:	bf00      	nop
 8003212:	bf00      	nop
 8003214:	3724      	adds	r7, #36	; 0x24
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	40023800 	.word	0x40023800
 8003224:	40013800 	.word	0x40013800
 8003228:	40020000 	.word	0x40020000
 800322c:	40020400 	.word	0x40020400
 8003230:	40020800 	.word	0x40020800
 8003234:	40020c00 	.word	0x40020c00
 8003238:	40021000 	.word	0x40021000
 800323c:	40021400 	.word	0x40021400
 8003240:	40021800 	.word	0x40021800
 8003244:	40013c00 	.word	0x40013c00

08003248 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e12b      	b.n	80034b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d106      	bne.n	8003274 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7fe fdca 	bl	8001e08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2224      	movs	r2, #36	; 0x24
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0201 	bic.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800329a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032ac:	f000 fa52 	bl	8003754 <HAL_RCC_GetPCLK1Freq>
 80032b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	4a81      	ldr	r2, [pc, #516]	; (80034bc <HAL_I2C_Init+0x274>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d807      	bhi.n	80032cc <HAL_I2C_Init+0x84>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4a80      	ldr	r2, [pc, #512]	; (80034c0 <HAL_I2C_Init+0x278>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	bf94      	ite	ls
 80032c4:	2301      	movls	r3, #1
 80032c6:	2300      	movhi	r3, #0
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	e006      	b.n	80032da <HAL_I2C_Init+0x92>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4a7d      	ldr	r2, [pc, #500]	; (80034c4 <HAL_I2C_Init+0x27c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	bf94      	ite	ls
 80032d4:	2301      	movls	r3, #1
 80032d6:	2300      	movhi	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e0e7      	b.n	80034b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4a78      	ldr	r2, [pc, #480]	; (80034c8 <HAL_I2C_Init+0x280>)
 80032e6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ea:	0c9b      	lsrs	r3, r3, #18
 80032ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	430a      	orrs	r2, r1
 8003300:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	4a6a      	ldr	r2, [pc, #424]	; (80034bc <HAL_I2C_Init+0x274>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d802      	bhi.n	800331c <HAL_I2C_Init+0xd4>
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	3301      	adds	r3, #1
 800331a:	e009      	b.n	8003330 <HAL_I2C_Init+0xe8>
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003322:	fb02 f303 	mul.w	r3, r2, r3
 8003326:	4a69      	ldr	r2, [pc, #420]	; (80034cc <HAL_I2C_Init+0x284>)
 8003328:	fba2 2303 	umull	r2, r3, r2, r3
 800332c:	099b      	lsrs	r3, r3, #6
 800332e:	3301      	adds	r3, #1
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6812      	ldr	r2, [r2, #0]
 8003334:	430b      	orrs	r3, r1
 8003336:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003342:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	495c      	ldr	r1, [pc, #368]	; (80034bc <HAL_I2C_Init+0x274>)
 800334c:	428b      	cmp	r3, r1
 800334e:	d819      	bhi.n	8003384 <HAL_I2C_Init+0x13c>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	1e59      	subs	r1, r3, #1
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	fbb1 f3f3 	udiv	r3, r1, r3
 800335e:	1c59      	adds	r1, r3, #1
 8003360:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003364:	400b      	ands	r3, r1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00a      	beq.n	8003380 <HAL_I2C_Init+0x138>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	1e59      	subs	r1, r3, #1
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	fbb1 f3f3 	udiv	r3, r1, r3
 8003378:	3301      	adds	r3, #1
 800337a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800337e:	e051      	b.n	8003424 <HAL_I2C_Init+0x1dc>
 8003380:	2304      	movs	r3, #4
 8003382:	e04f      	b.n	8003424 <HAL_I2C_Init+0x1dc>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d111      	bne.n	80033b0 <HAL_I2C_Init+0x168>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	1e58      	subs	r0, r3, #1
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6859      	ldr	r1, [r3, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	440b      	add	r3, r1
 800339a:	fbb0 f3f3 	udiv	r3, r0, r3
 800339e:	3301      	adds	r3, #1
 80033a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	bf0c      	ite	eq
 80033a8:	2301      	moveq	r3, #1
 80033aa:	2300      	movne	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	e012      	b.n	80033d6 <HAL_I2C_Init+0x18e>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	1e58      	subs	r0, r3, #1
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6859      	ldr	r1, [r3, #4]
 80033b8:	460b      	mov	r3, r1
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	440b      	add	r3, r1
 80033be:	0099      	lsls	r1, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033c6:	3301      	adds	r3, #1
 80033c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	bf0c      	ite	eq
 80033d0:	2301      	moveq	r3, #1
 80033d2:	2300      	movne	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <HAL_I2C_Init+0x196>
 80033da:	2301      	movs	r3, #1
 80033dc:	e022      	b.n	8003424 <HAL_I2C_Init+0x1dc>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10e      	bne.n	8003404 <HAL_I2C_Init+0x1bc>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	1e58      	subs	r0, r3, #1
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6859      	ldr	r1, [r3, #4]
 80033ee:	460b      	mov	r3, r1
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	440b      	add	r3, r1
 80033f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80033f8:	3301      	adds	r3, #1
 80033fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003402:	e00f      	b.n	8003424 <HAL_I2C_Init+0x1dc>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	1e58      	subs	r0, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6859      	ldr	r1, [r3, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	0099      	lsls	r1, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	fbb0 f3f3 	udiv	r3, r0, r3
 800341a:	3301      	adds	r3, #1
 800341c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003420:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	6809      	ldr	r1, [r1, #0]
 8003428:	4313      	orrs	r3, r2
 800342a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69da      	ldr	r2, [r3, #28]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003452:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6911      	ldr	r1, [r2, #16]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	68d2      	ldr	r2, [r2, #12]
 800345e:	4311      	orrs	r1, r2
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6812      	ldr	r2, [r2, #0]
 8003464:	430b      	orrs	r3, r1
 8003466:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	695a      	ldr	r2, [r3, #20]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0201 	orr.w	r2, r2, #1
 8003492:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2220      	movs	r2, #32
 800349e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	000186a0 	.word	0x000186a0
 80034c0:	001e847f 	.word	0x001e847f
 80034c4:	003d08ff 	.word	0x003d08ff
 80034c8:	431bde83 	.word	0x431bde83
 80034cc:	10624dd3 	.word	0x10624dd3

080034d0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80034da:	2300      	movs	r3, #0
 80034dc:	603b      	str	r3, [r7, #0]
 80034de:	4b20      	ldr	r3, [pc, #128]	; (8003560 <HAL_PWREx_EnableOverDrive+0x90>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	4a1f      	ldr	r2, [pc, #124]	; (8003560 <HAL_PWREx_EnableOverDrive+0x90>)
 80034e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e8:	6413      	str	r3, [r2, #64]	; 0x40
 80034ea:	4b1d      	ldr	r3, [pc, #116]	; (8003560 <HAL_PWREx_EnableOverDrive+0x90>)
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f2:	603b      	str	r3, [r7, #0]
 80034f4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80034f6:	4b1b      	ldr	r3, [pc, #108]	; (8003564 <HAL_PWREx_EnableOverDrive+0x94>)
 80034f8:	2201      	movs	r2, #1
 80034fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034fc:	f7ff f874 	bl	80025e8 <HAL_GetTick>
 8003500:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003502:	e009      	b.n	8003518 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003504:	f7ff f870 	bl	80025e8 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003512:	d901      	bls.n	8003518 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e01f      	b.n	8003558 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003518:	4b13      	ldr	r3, [pc, #76]	; (8003568 <HAL_PWREx_EnableOverDrive+0x98>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003524:	d1ee      	bne.n	8003504 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003526:	4b11      	ldr	r3, [pc, #68]	; (800356c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003528:	2201      	movs	r2, #1
 800352a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800352c:	f7ff f85c 	bl	80025e8 <HAL_GetTick>
 8003530:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003532:	e009      	b.n	8003548 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003534:	f7ff f858 	bl	80025e8 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003542:	d901      	bls.n	8003548 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e007      	b.n	8003558 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003548:	4b07      	ldr	r3, [pc, #28]	; (8003568 <HAL_PWREx_EnableOverDrive+0x98>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003550:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003554:	d1ee      	bne.n	8003534 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40023800 	.word	0x40023800
 8003564:	420e0040 	.word	0x420e0040
 8003568:	40007000 	.word	0x40007000
 800356c:	420e0044 	.word	0x420e0044

08003570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e0cc      	b.n	800371e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003584:	4b68      	ldr	r3, [pc, #416]	; (8003728 <HAL_RCC_ClockConfig+0x1b8>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 030f 	and.w	r3, r3, #15
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d90c      	bls.n	80035ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003592:	4b65      	ldr	r3, [pc, #404]	; (8003728 <HAL_RCC_ClockConfig+0x1b8>)
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800359a:	4b63      	ldr	r3, [pc, #396]	; (8003728 <HAL_RCC_ClockConfig+0x1b8>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d001      	beq.n	80035ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e0b8      	b.n	800371e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d020      	beq.n	80035fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d005      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035c4:	4b59      	ldr	r3, [pc, #356]	; (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	4a58      	ldr	r2, [pc, #352]	; (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80035ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0308 	and.w	r3, r3, #8
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d005      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035dc:	4b53      	ldr	r3, [pc, #332]	; (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	4a52      	ldr	r2, [pc, #328]	; (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80035e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035e8:	4b50      	ldr	r3, [pc, #320]	; (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	494d      	ldr	r1, [pc, #308]	; (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d044      	beq.n	8003690 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d107      	bne.n	800361e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360e:	4b47      	ldr	r3, [pc, #284]	; (800372c <HAL_RCC_ClockConfig+0x1bc>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d119      	bne.n	800364e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e07f      	b.n	800371e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b02      	cmp	r3, #2
 8003624:	d003      	beq.n	800362e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800362a:	2b03      	cmp	r3, #3
 800362c:	d107      	bne.n	800363e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800362e:	4b3f      	ldr	r3, [pc, #252]	; (800372c <HAL_RCC_ClockConfig+0x1bc>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d109      	bne.n	800364e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e06f      	b.n	800371e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800363e:	4b3b      	ldr	r3, [pc, #236]	; (800372c <HAL_RCC_ClockConfig+0x1bc>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e067      	b.n	800371e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800364e:	4b37      	ldr	r3, [pc, #220]	; (800372c <HAL_RCC_ClockConfig+0x1bc>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f023 0203 	bic.w	r2, r3, #3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	4934      	ldr	r1, [pc, #208]	; (800372c <HAL_RCC_ClockConfig+0x1bc>)
 800365c:	4313      	orrs	r3, r2
 800365e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003660:	f7fe ffc2 	bl	80025e8 <HAL_GetTick>
 8003664:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003666:	e00a      	b.n	800367e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003668:	f7fe ffbe 	bl	80025e8 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	f241 3288 	movw	r2, #5000	; 0x1388
 8003676:	4293      	cmp	r3, r2
 8003678:	d901      	bls.n	800367e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e04f      	b.n	800371e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367e:	4b2b      	ldr	r3, [pc, #172]	; (800372c <HAL_RCC_ClockConfig+0x1bc>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 020c 	and.w	r2, r3, #12
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	429a      	cmp	r2, r3
 800368e:	d1eb      	bne.n	8003668 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003690:	4b25      	ldr	r3, [pc, #148]	; (8003728 <HAL_RCC_ClockConfig+0x1b8>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 030f 	and.w	r3, r3, #15
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d20c      	bcs.n	80036b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369e:	4b22      	ldr	r3, [pc, #136]	; (8003728 <HAL_RCC_ClockConfig+0x1b8>)
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a6:	4b20      	ldr	r3, [pc, #128]	; (8003728 <HAL_RCC_ClockConfig+0x1b8>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d001      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e032      	b.n	800371e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d008      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036c4:	4b19      	ldr	r3, [pc, #100]	; (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	4916      	ldr	r1, [pc, #88]	; (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d009      	beq.n	80036f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036e2:	4b12      	ldr	r3, [pc, #72]	; (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	490e      	ldr	r1, [pc, #56]	; (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036f6:	f000 fb7f 	bl	8003df8 <HAL_RCC_GetSysClockFreq>
 80036fa:	4602      	mov	r2, r0
 80036fc:	4b0b      	ldr	r3, [pc, #44]	; (800372c <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	091b      	lsrs	r3, r3, #4
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	490a      	ldr	r1, [pc, #40]	; (8003730 <HAL_RCC_ClockConfig+0x1c0>)
 8003708:	5ccb      	ldrb	r3, [r1, r3]
 800370a:	fa22 f303 	lsr.w	r3, r2, r3
 800370e:	4a09      	ldr	r2, [pc, #36]	; (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 8003710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003712:	4b09      	ldr	r3, [pc, #36]	; (8003738 <HAL_RCC_ClockConfig+0x1c8>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f7fe ff22 	bl	8002560 <HAL_InitTick>

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	40023c00 	.word	0x40023c00
 800372c:	40023800 	.word	0x40023800
 8003730:	08006d24 	.word	0x08006d24
 8003734:	20000018 	.word	0x20000018
 8003738:	2000001c 	.word	0x2000001c

0800373c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003740:	4b03      	ldr	r3, [pc, #12]	; (8003750 <HAL_RCC_GetHCLKFreq+0x14>)
 8003742:	681b      	ldr	r3, [r3, #0]
}
 8003744:	4618      	mov	r0, r3
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	20000018 	.word	0x20000018

08003754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003758:	f7ff fff0 	bl	800373c <HAL_RCC_GetHCLKFreq>
 800375c:	4602      	mov	r2, r0
 800375e:	4b05      	ldr	r3, [pc, #20]	; (8003774 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	0a9b      	lsrs	r3, r3, #10
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	4903      	ldr	r1, [pc, #12]	; (8003778 <HAL_RCC_GetPCLK1Freq+0x24>)
 800376a:	5ccb      	ldrb	r3, [r1, r3]
 800376c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003770:	4618      	mov	r0, r3
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40023800 	.word	0x40023800
 8003778:	08006d34 	.word	0x08006d34

0800377c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003780:	f7ff ffdc 	bl	800373c <HAL_RCC_GetHCLKFreq>
 8003784:	4602      	mov	r2, r0
 8003786:	4b05      	ldr	r3, [pc, #20]	; (800379c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	0b5b      	lsrs	r3, r3, #13
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	4903      	ldr	r1, [pc, #12]	; (80037a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003792:	5ccb      	ldrb	r3, [r1, r3]
 8003794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003798:	4618      	mov	r0, r3
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40023800 	.word	0x40023800
 80037a0:	08006d34 	.word	0x08006d34

080037a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b08c      	sub	sp, #48	; 0x30
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80037b8:	2300      	movs	r3, #0
 80037ba:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80037bc:	2300      	movs	r3, #0
 80037be:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d010      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80037dc:	4b6f      	ldr	r3, [pc, #444]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037e2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ea:	496c      	ldr	r1, [pc, #432]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80037fa:	2301      	movs	r3, #1
 80037fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d010      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800380a:	4b64      	ldr	r3, [pc, #400]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800380c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003810:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003818:	4960      	ldr	r1, [pc, #384]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800381a:	4313      	orrs	r3, r2
 800381c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003828:	2301      	movs	r3, #1
 800382a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	d017      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003838:	4b58      	ldr	r3, [pc, #352]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800383a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800383e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	4955      	ldr	r1, [pc, #340]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003848:	4313      	orrs	r3, r2
 800384a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003856:	d101      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003858:	2301      	movs	r3, #1
 800385a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003864:	2301      	movs	r3, #1
 8003866:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	2b00      	cmp	r3, #0
 8003872:	d017      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003874:	4b49      	ldr	r3, [pc, #292]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003876:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800387a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003882:	4946      	ldr	r1, [pc, #280]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003884:	4313      	orrs	r3, r2
 8003886:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003892:	d101      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003894:	2301      	movs	r3, #1
 8003896:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80038a0:	2301      	movs	r3, #1
 80038a2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0320 	and.w	r3, r3, #32
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 808a 	beq.w	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038b2:	2300      	movs	r3, #0
 80038b4:	60bb      	str	r3, [r7, #8]
 80038b6:	4b39      	ldr	r3, [pc, #228]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	4a38      	ldr	r2, [pc, #224]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c0:	6413      	str	r3, [r2, #64]	; 0x40
 80038c2:	4b36      	ldr	r3, [pc, #216]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ca:	60bb      	str	r3, [r7, #8]
 80038cc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80038ce:	4b34      	ldr	r3, [pc, #208]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a33      	ldr	r2, [pc, #204]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80038d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80038da:	f7fe fe85 	bl	80025e8 <HAL_GetTick>
 80038de:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80038e0:	e008      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80038e2:	f7fe fe81 	bl	80025e8 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e278      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80038f4:	4b2a      	ldr	r3, [pc, #168]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0f0      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003900:	4b26      	ldr	r3, [pc, #152]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003904:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003908:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800390a:	6a3b      	ldr	r3, [r7, #32]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d02f      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003918:	6a3a      	ldr	r2, [r7, #32]
 800391a:	429a      	cmp	r2, r3
 800391c:	d028      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800391e:	4b1f      	ldr	r3, [pc, #124]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003922:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003926:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003928:	4b1e      	ldr	r3, [pc, #120]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800392a:	2201      	movs	r2, #1
 800392c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800392e:	4b1d      	ldr	r3, [pc, #116]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003934:	4a19      	ldr	r2, [pc, #100]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800393a:	4b18      	ldr	r3, [pc, #96]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800393c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b01      	cmp	r3, #1
 8003944:	d114      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003946:	f7fe fe4f 	bl	80025e8 <HAL_GetTick>
 800394a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800394c:	e00a      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800394e:	f7fe fe4b 	bl	80025e8 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	f241 3288 	movw	r2, #5000	; 0x1388
 800395c:	4293      	cmp	r3, r2
 800395e:	d901      	bls.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e240      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003964:	4b0d      	ldr	r3, [pc, #52]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d0ee      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003978:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800397c:	d114      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800397e:	4b07      	ldr	r3, [pc, #28]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800398e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003992:	4902      	ldr	r1, [pc, #8]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003994:	4313      	orrs	r3, r2
 8003996:	608b      	str	r3, [r1, #8]
 8003998:	e00c      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800399a:	bf00      	nop
 800399c:	40023800 	.word	0x40023800
 80039a0:	40007000 	.word	0x40007000
 80039a4:	42470e40 	.word	0x42470e40
 80039a8:	4b4a      	ldr	r3, [pc, #296]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	4a49      	ldr	r2, [pc, #292]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039ae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80039b2:	6093      	str	r3, [r2, #8]
 80039b4:	4b47      	ldr	r3, [pc, #284]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c0:	4944      	ldr	r1, [pc, #272]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0310 	and.w	r3, r3, #16
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d004      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80039d8:	4b3f      	ldr	r3, [pc, #252]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80039da:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00a      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80039e8:	4b3a      	ldr	r3, [pc, #232]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f6:	4937      	ldr	r1, [pc, #220]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a0a:	4b32      	ldr	r3, [pc, #200]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a10:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a18:	492e      	ldr	r1, [pc, #184]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d011      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a2c:	4b29      	ldr	r3, [pc, #164]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a32:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3a:	4926      	ldr	r1, [pc, #152]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a4a:	d101      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00a      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003a5c:	4b1d      	ldr	r3, [pc, #116]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a62:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6a:	491a      	ldr	r1, [pc, #104]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d011      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003a7e:	4b15      	ldr	r3, [pc, #84]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a84:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a8c:	4911      	ldr	r1, [pc, #68]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a9c:	d101      	bne.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d005      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ab0:	f040 80ff 	bne.w	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ab4:	4b09      	ldr	r3, [pc, #36]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003aba:	f7fe fd95 	bl	80025e8 <HAL_GetTick>
 8003abe:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ac0:	e00e      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ac2:	f7fe fd91 	bl	80025e8 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d907      	bls.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e188      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	424711e0 	.word	0x424711e0
 8003adc:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ae0:	4b7e      	ldr	r3, [pc, #504]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1ea      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d009      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d028      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d124      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003b14:	4b71      	ldr	r3, [pc, #452]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b1a:	0c1b      	lsrs	r3, r3, #16
 8003b1c:	f003 0303 	and.w	r3, r3, #3
 8003b20:	3301      	adds	r3, #1
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b26:	4b6d      	ldr	r3, [pc, #436]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b2c:	0e1b      	lsrs	r3, r3, #24
 8003b2e:	f003 030f 	and.w	r3, r3, #15
 8003b32:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	019b      	lsls	r3, r3, #6
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	085b      	lsrs	r3, r3, #1
 8003b44:	3b01      	subs	r3, #1
 8003b46:	041b      	lsls	r3, r3, #16
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	061b      	lsls	r3, r3, #24
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	071b      	lsls	r3, r3, #28
 8003b56:	4961      	ldr	r1, [pc, #388]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0304 	and.w	r3, r3, #4
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d004      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b72:	d00a      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d035      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b88:	d130      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003b8a:	4b54      	ldr	r3, [pc, #336]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b90:	0c1b      	lsrs	r3, r3, #16
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	3301      	adds	r3, #1
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b9c:	4b4f      	ldr	r3, [pc, #316]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ba2:	0f1b      	lsrs	r3, r3, #28
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	019b      	lsls	r3, r3, #6
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	085b      	lsrs	r3, r3, #1
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	041b      	lsls	r3, r3, #16
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	061b      	lsls	r3, r3, #24
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	071b      	lsls	r3, r3, #28
 8003bcc:	4943      	ldr	r1, [pc, #268]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003bd4:	4b41      	ldr	r3, [pc, #260]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bda:	f023 021f 	bic.w	r2, r3, #31
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be2:	3b01      	subs	r3, #1
 8003be4:	493d      	ldr	r1, [pc, #244]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d029      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c00:	d124      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003c02:	4b36      	ldr	r3, [pc, #216]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c08:	0c1b      	lsrs	r3, r3, #16
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	3301      	adds	r3, #1
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c14:	4b31      	ldr	r3, [pc, #196]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c1a:	0f1b      	lsrs	r3, r3, #28
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	019b      	lsls	r3, r3, #6
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	085b      	lsrs	r3, r3, #1
 8003c34:	3b01      	subs	r3, #1
 8003c36:	041b      	lsls	r3, r3, #16
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	061b      	lsls	r3, r3, #24
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	071b      	lsls	r3, r3, #28
 8003c44:	4925      	ldr	r1, [pc, #148]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d016      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	019b      	lsls	r3, r3, #6
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	085b      	lsrs	r3, r3, #1
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	041b      	lsls	r3, r3, #16
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	061b      	lsls	r3, r3, #24
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	071b      	lsls	r3, r3, #28
 8003c7e:	4917      	ldr	r1, [pc, #92]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c86:	4b16      	ldr	r3, [pc, #88]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003c88:	2201      	movs	r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c8c:	f7fe fcac 	bl	80025e8 <HAL_GetTick>
 8003c90:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c94:	f7fe fca8 	bl	80025e8 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e09f      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ca6:	4b0d      	ldr	r3, [pc, #52]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0f0      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	f040 8095 	bne.w	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003cba:	4b0a      	ldr	r3, [pc, #40]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cc0:	f7fe fc92 	bl	80025e8 <HAL_GetTick>
 8003cc4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003cc6:	e00f      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003cc8:	f7fe fc8e 	bl	80025e8 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d908      	bls.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e085      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003cda:	bf00      	nop
 8003cdc:	40023800 	.word	0x40023800
 8003ce0:	42470068 	.word	0x42470068
 8003ce4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ce8:	4b41      	ldr	r3, [pc, #260]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cf4:	d0e8      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d009      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d02b      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d127      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003d1e:	4b34      	ldr	r3, [pc, #208]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d24:	0c1b      	lsrs	r3, r3, #16
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	699a      	ldr	r2, [r3, #24]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	019b      	lsls	r3, r3, #6
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	085b      	lsrs	r3, r3, #1
 8003d40:	3b01      	subs	r3, #1
 8003d42:	041b      	lsls	r3, r3, #16
 8003d44:	431a      	orrs	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	061b      	lsls	r3, r3, #24
 8003d4c:	4928      	ldr	r1, [pc, #160]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003d54:	4b26      	ldr	r3, [pc, #152]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d5a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d62:	3b01      	subs	r3, #1
 8003d64:	021b      	lsls	r3, r3, #8
 8003d66:	4922      	ldr	r1, [pc, #136]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d01d      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d82:	d118      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d84:	4b1a      	ldr	r3, [pc, #104]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8a:	0e1b      	lsrs	r3, r3, #24
 8003d8c:	f003 030f 	and.w	r3, r3, #15
 8003d90:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699a      	ldr	r2, [r3, #24]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	019b      	lsls	r3, r3, #6
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	085b      	lsrs	r3, r3, #1
 8003da4:	3b01      	subs	r3, #1
 8003da6:	041b      	lsls	r3, r3, #16
 8003da8:	431a      	orrs	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	061b      	lsls	r3, r3, #24
 8003dae:	4910      	ldr	r1, [pc, #64]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003db6:	4b0f      	ldr	r3, [pc, #60]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003db8:	2201      	movs	r2, #1
 8003dba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003dbc:	f7fe fc14 	bl	80025e8 <HAL_GetTick>
 8003dc0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003dc4:	f7fe fc10 	bl	80025e8 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e007      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003dd6:	4b06      	ldr	r3, [pc, #24]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003de2:	d1ef      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3730      	adds	r7, #48	; 0x30
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	40023800 	.word	0x40023800
 8003df4:	42470070 	.word	0x42470070

08003df8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dfc:	b0ae      	sub	sp, #184	; 0xb8
 8003dfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003e06:	2300      	movs	r3, #0
 8003e08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e1e:	4bcb      	ldr	r3, [pc, #812]	; (800414c <HAL_RCC_GetSysClockFreq+0x354>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 030c 	and.w	r3, r3, #12
 8003e26:	2b0c      	cmp	r3, #12
 8003e28:	f200 8206 	bhi.w	8004238 <HAL_RCC_GetSysClockFreq+0x440>
 8003e2c:	a201      	add	r2, pc, #4	; (adr r2, 8003e34 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e32:	bf00      	nop
 8003e34:	08003e69 	.word	0x08003e69
 8003e38:	08004239 	.word	0x08004239
 8003e3c:	08004239 	.word	0x08004239
 8003e40:	08004239 	.word	0x08004239
 8003e44:	08003e71 	.word	0x08003e71
 8003e48:	08004239 	.word	0x08004239
 8003e4c:	08004239 	.word	0x08004239
 8003e50:	08004239 	.word	0x08004239
 8003e54:	08003e79 	.word	0x08003e79
 8003e58:	08004239 	.word	0x08004239
 8003e5c:	08004239 	.word	0x08004239
 8003e60:	08004239 	.word	0x08004239
 8003e64:	08004069 	.word	0x08004069
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e68:	4bb9      	ldr	r3, [pc, #740]	; (8004150 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003e6e:	e1e7      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e70:	4bb8      	ldr	r3, [pc, #736]	; (8004154 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003e72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e76:	e1e3      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e78:	4bb4      	ldr	r3, [pc, #720]	; (800414c <HAL_RCC_GetSysClockFreq+0x354>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e84:	4bb1      	ldr	r3, [pc, #708]	; (800414c <HAL_RCC_GetSysClockFreq+0x354>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d071      	beq.n	8003f74 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e90:	4bae      	ldr	r3, [pc, #696]	; (800414c <HAL_RCC_GetSysClockFreq+0x354>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	099b      	lsrs	r3, r3, #6
 8003e96:	2200      	movs	r2, #0
 8003e98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e9c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003ea0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ea8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003eac:	2300      	movs	r3, #0
 8003eae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003eb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003eb6:	4622      	mov	r2, r4
 8003eb8:	462b      	mov	r3, r5
 8003eba:	f04f 0000 	mov.w	r0, #0
 8003ebe:	f04f 0100 	mov.w	r1, #0
 8003ec2:	0159      	lsls	r1, r3, #5
 8003ec4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ec8:	0150      	lsls	r0, r2, #5
 8003eca:	4602      	mov	r2, r0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	4621      	mov	r1, r4
 8003ed0:	1a51      	subs	r1, r2, r1
 8003ed2:	6439      	str	r1, [r7, #64]	; 0x40
 8003ed4:	4629      	mov	r1, r5
 8003ed6:	eb63 0301 	sbc.w	r3, r3, r1
 8003eda:	647b      	str	r3, [r7, #68]	; 0x44
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	f04f 0300 	mov.w	r3, #0
 8003ee4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003ee8:	4649      	mov	r1, r9
 8003eea:	018b      	lsls	r3, r1, #6
 8003eec:	4641      	mov	r1, r8
 8003eee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ef2:	4641      	mov	r1, r8
 8003ef4:	018a      	lsls	r2, r1, #6
 8003ef6:	4641      	mov	r1, r8
 8003ef8:	1a51      	subs	r1, r2, r1
 8003efa:	63b9      	str	r1, [r7, #56]	; 0x38
 8003efc:	4649      	mov	r1, r9
 8003efe:	eb63 0301 	sbc.w	r3, r3, r1
 8003f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	f04f 0300 	mov.w	r3, #0
 8003f0c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003f10:	4649      	mov	r1, r9
 8003f12:	00cb      	lsls	r3, r1, #3
 8003f14:	4641      	mov	r1, r8
 8003f16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f1a:	4641      	mov	r1, r8
 8003f1c:	00ca      	lsls	r2, r1, #3
 8003f1e:	4610      	mov	r0, r2
 8003f20:	4619      	mov	r1, r3
 8003f22:	4603      	mov	r3, r0
 8003f24:	4622      	mov	r2, r4
 8003f26:	189b      	adds	r3, r3, r2
 8003f28:	633b      	str	r3, [r7, #48]	; 0x30
 8003f2a:	462b      	mov	r3, r5
 8003f2c:	460a      	mov	r2, r1
 8003f2e:	eb42 0303 	adc.w	r3, r2, r3
 8003f32:	637b      	str	r3, [r7, #52]	; 0x34
 8003f34:	f04f 0200 	mov.w	r2, #0
 8003f38:	f04f 0300 	mov.w	r3, #0
 8003f3c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f40:	4629      	mov	r1, r5
 8003f42:	024b      	lsls	r3, r1, #9
 8003f44:	4621      	mov	r1, r4
 8003f46:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f4a:	4621      	mov	r1, r4
 8003f4c:	024a      	lsls	r2, r1, #9
 8003f4e:	4610      	mov	r0, r2
 8003f50:	4619      	mov	r1, r3
 8003f52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f56:	2200      	movs	r2, #0
 8003f58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f60:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003f64:	f7fc fb5a 	bl	800061c <__aeabi_uldivmod>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f72:	e067      	b.n	8004044 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f74:	4b75      	ldr	r3, [pc, #468]	; (800414c <HAL_RCC_GetSysClockFreq+0x354>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	099b      	lsrs	r3, r3, #6
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f80:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003f84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f8e:	2300      	movs	r3, #0
 8003f90:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f92:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003f96:	4622      	mov	r2, r4
 8003f98:	462b      	mov	r3, r5
 8003f9a:	f04f 0000 	mov.w	r0, #0
 8003f9e:	f04f 0100 	mov.w	r1, #0
 8003fa2:	0159      	lsls	r1, r3, #5
 8003fa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fa8:	0150      	lsls	r0, r2, #5
 8003faa:	4602      	mov	r2, r0
 8003fac:	460b      	mov	r3, r1
 8003fae:	4621      	mov	r1, r4
 8003fb0:	1a51      	subs	r1, r2, r1
 8003fb2:	62b9      	str	r1, [r7, #40]	; 0x28
 8003fb4:	4629      	mov	r1, r5
 8003fb6:	eb63 0301 	sbc.w	r3, r3, r1
 8003fba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003fc8:	4649      	mov	r1, r9
 8003fca:	018b      	lsls	r3, r1, #6
 8003fcc:	4641      	mov	r1, r8
 8003fce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fd2:	4641      	mov	r1, r8
 8003fd4:	018a      	lsls	r2, r1, #6
 8003fd6:	4641      	mov	r1, r8
 8003fd8:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fdc:	4649      	mov	r1, r9
 8003fde:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003fee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ff2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ff6:	4692      	mov	sl, r2
 8003ff8:	469b      	mov	fp, r3
 8003ffa:	4623      	mov	r3, r4
 8003ffc:	eb1a 0303 	adds.w	r3, sl, r3
 8004000:	623b      	str	r3, [r7, #32]
 8004002:	462b      	mov	r3, r5
 8004004:	eb4b 0303 	adc.w	r3, fp, r3
 8004008:	627b      	str	r3, [r7, #36]	; 0x24
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004016:	4629      	mov	r1, r5
 8004018:	028b      	lsls	r3, r1, #10
 800401a:	4621      	mov	r1, r4
 800401c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004020:	4621      	mov	r1, r4
 8004022:	028a      	lsls	r2, r1, #10
 8004024:	4610      	mov	r0, r2
 8004026:	4619      	mov	r1, r3
 8004028:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800402c:	2200      	movs	r2, #0
 800402e:	673b      	str	r3, [r7, #112]	; 0x70
 8004030:	677a      	str	r2, [r7, #116]	; 0x74
 8004032:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004036:	f7fc faf1 	bl	800061c <__aeabi_uldivmod>
 800403a:	4602      	mov	r2, r0
 800403c:	460b      	mov	r3, r1
 800403e:	4613      	mov	r3, r2
 8004040:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004044:	4b41      	ldr	r3, [pc, #260]	; (800414c <HAL_RCC_GetSysClockFreq+0x354>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	0c1b      	lsrs	r3, r3, #16
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	3301      	adds	r3, #1
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004056:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800405a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800405e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004062:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004066:	e0eb      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004068:	4b38      	ldr	r3, [pc, #224]	; (800414c <HAL_RCC_GetSysClockFreq+0x354>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004070:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004074:	4b35      	ldr	r3, [pc, #212]	; (800414c <HAL_RCC_GetSysClockFreq+0x354>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d06b      	beq.n	8004158 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004080:	4b32      	ldr	r3, [pc, #200]	; (800414c <HAL_RCC_GetSysClockFreq+0x354>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	099b      	lsrs	r3, r3, #6
 8004086:	2200      	movs	r2, #0
 8004088:	66bb      	str	r3, [r7, #104]	; 0x68
 800408a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800408c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800408e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004092:	663b      	str	r3, [r7, #96]	; 0x60
 8004094:	2300      	movs	r3, #0
 8004096:	667b      	str	r3, [r7, #100]	; 0x64
 8004098:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800409c:	4622      	mov	r2, r4
 800409e:	462b      	mov	r3, r5
 80040a0:	f04f 0000 	mov.w	r0, #0
 80040a4:	f04f 0100 	mov.w	r1, #0
 80040a8:	0159      	lsls	r1, r3, #5
 80040aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040ae:	0150      	lsls	r0, r2, #5
 80040b0:	4602      	mov	r2, r0
 80040b2:	460b      	mov	r3, r1
 80040b4:	4621      	mov	r1, r4
 80040b6:	1a51      	subs	r1, r2, r1
 80040b8:	61b9      	str	r1, [r7, #24]
 80040ba:	4629      	mov	r1, r5
 80040bc:	eb63 0301 	sbc.w	r3, r3, r1
 80040c0:	61fb      	str	r3, [r7, #28]
 80040c2:	f04f 0200 	mov.w	r2, #0
 80040c6:	f04f 0300 	mov.w	r3, #0
 80040ca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80040ce:	4659      	mov	r1, fp
 80040d0:	018b      	lsls	r3, r1, #6
 80040d2:	4651      	mov	r1, sl
 80040d4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040d8:	4651      	mov	r1, sl
 80040da:	018a      	lsls	r2, r1, #6
 80040dc:	4651      	mov	r1, sl
 80040de:	ebb2 0801 	subs.w	r8, r2, r1
 80040e2:	4659      	mov	r1, fp
 80040e4:	eb63 0901 	sbc.w	r9, r3, r1
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	f04f 0300 	mov.w	r3, #0
 80040f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040fc:	4690      	mov	r8, r2
 80040fe:	4699      	mov	r9, r3
 8004100:	4623      	mov	r3, r4
 8004102:	eb18 0303 	adds.w	r3, r8, r3
 8004106:	613b      	str	r3, [r7, #16]
 8004108:	462b      	mov	r3, r5
 800410a:	eb49 0303 	adc.w	r3, r9, r3
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800411c:	4629      	mov	r1, r5
 800411e:	024b      	lsls	r3, r1, #9
 8004120:	4621      	mov	r1, r4
 8004122:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004126:	4621      	mov	r1, r4
 8004128:	024a      	lsls	r2, r1, #9
 800412a:	4610      	mov	r0, r2
 800412c:	4619      	mov	r1, r3
 800412e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004132:	2200      	movs	r2, #0
 8004134:	65bb      	str	r3, [r7, #88]	; 0x58
 8004136:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004138:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800413c:	f7fc fa6e 	bl	800061c <__aeabi_uldivmod>
 8004140:	4602      	mov	r2, r0
 8004142:	460b      	mov	r3, r1
 8004144:	4613      	mov	r3, r2
 8004146:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800414a:	e065      	b.n	8004218 <HAL_RCC_GetSysClockFreq+0x420>
 800414c:	40023800 	.word	0x40023800
 8004150:	00f42400 	.word	0x00f42400
 8004154:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004158:	4b3d      	ldr	r3, [pc, #244]	; (8004250 <HAL_RCC_GetSysClockFreq+0x458>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	099b      	lsrs	r3, r3, #6
 800415e:	2200      	movs	r2, #0
 8004160:	4618      	mov	r0, r3
 8004162:	4611      	mov	r1, r2
 8004164:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004168:	653b      	str	r3, [r7, #80]	; 0x50
 800416a:	2300      	movs	r3, #0
 800416c:	657b      	str	r3, [r7, #84]	; 0x54
 800416e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004172:	4642      	mov	r2, r8
 8004174:	464b      	mov	r3, r9
 8004176:	f04f 0000 	mov.w	r0, #0
 800417a:	f04f 0100 	mov.w	r1, #0
 800417e:	0159      	lsls	r1, r3, #5
 8004180:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004184:	0150      	lsls	r0, r2, #5
 8004186:	4602      	mov	r2, r0
 8004188:	460b      	mov	r3, r1
 800418a:	4641      	mov	r1, r8
 800418c:	1a51      	subs	r1, r2, r1
 800418e:	60b9      	str	r1, [r7, #8]
 8004190:	4649      	mov	r1, r9
 8004192:	eb63 0301 	sbc.w	r3, r3, r1
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	f04f 0300 	mov.w	r3, #0
 80041a0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80041a4:	4659      	mov	r1, fp
 80041a6:	018b      	lsls	r3, r1, #6
 80041a8:	4651      	mov	r1, sl
 80041aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041ae:	4651      	mov	r1, sl
 80041b0:	018a      	lsls	r2, r1, #6
 80041b2:	4651      	mov	r1, sl
 80041b4:	1a54      	subs	r4, r2, r1
 80041b6:	4659      	mov	r1, fp
 80041b8:	eb63 0501 	sbc.w	r5, r3, r1
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	00eb      	lsls	r3, r5, #3
 80041c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041ca:	00e2      	lsls	r2, r4, #3
 80041cc:	4614      	mov	r4, r2
 80041ce:	461d      	mov	r5, r3
 80041d0:	4643      	mov	r3, r8
 80041d2:	18e3      	adds	r3, r4, r3
 80041d4:	603b      	str	r3, [r7, #0]
 80041d6:	464b      	mov	r3, r9
 80041d8:	eb45 0303 	adc.w	r3, r5, r3
 80041dc:	607b      	str	r3, [r7, #4]
 80041de:	f04f 0200 	mov.w	r2, #0
 80041e2:	f04f 0300 	mov.w	r3, #0
 80041e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041ea:	4629      	mov	r1, r5
 80041ec:	028b      	lsls	r3, r1, #10
 80041ee:	4621      	mov	r1, r4
 80041f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041f4:	4621      	mov	r1, r4
 80041f6:	028a      	lsls	r2, r1, #10
 80041f8:	4610      	mov	r0, r2
 80041fa:	4619      	mov	r1, r3
 80041fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004200:	2200      	movs	r2, #0
 8004202:	64bb      	str	r3, [r7, #72]	; 0x48
 8004204:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004206:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800420a:	f7fc fa07 	bl	800061c <__aeabi_uldivmod>
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	4613      	mov	r3, r2
 8004214:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004218:	4b0d      	ldr	r3, [pc, #52]	; (8004250 <HAL_RCC_GetSysClockFreq+0x458>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	0f1b      	lsrs	r3, r3, #28
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004226:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800422a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800422e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004232:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004236:	e003      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004238:	4b06      	ldr	r3, [pc, #24]	; (8004254 <HAL_RCC_GetSysClockFreq+0x45c>)
 800423a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800423e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004240:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004244:	4618      	mov	r0, r3
 8004246:	37b8      	adds	r7, #184	; 0xb8
 8004248:	46bd      	mov	sp, r7
 800424a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800424e:	bf00      	nop
 8004250:	40023800 	.word	0x40023800
 8004254:	00f42400 	.word	0x00f42400

08004258 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e28d      	b.n	8004786 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 8083 	beq.w	800437e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004278:	4b94      	ldr	r3, [pc, #592]	; (80044cc <HAL_RCC_OscConfig+0x274>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f003 030c 	and.w	r3, r3, #12
 8004280:	2b04      	cmp	r3, #4
 8004282:	d019      	beq.n	80042b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004284:	4b91      	ldr	r3, [pc, #580]	; (80044cc <HAL_RCC_OscConfig+0x274>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800428c:	2b08      	cmp	r3, #8
 800428e:	d106      	bne.n	800429e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004290:	4b8e      	ldr	r3, [pc, #568]	; (80044cc <HAL_RCC_OscConfig+0x274>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004298:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800429c:	d00c      	beq.n	80042b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800429e:	4b8b      	ldr	r3, [pc, #556]	; (80044cc <HAL_RCC_OscConfig+0x274>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80042a6:	2b0c      	cmp	r3, #12
 80042a8:	d112      	bne.n	80042d0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042aa:	4b88      	ldr	r3, [pc, #544]	; (80044cc <HAL_RCC_OscConfig+0x274>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042b6:	d10b      	bne.n	80042d0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b8:	4b84      	ldr	r3, [pc, #528]	; (80044cc <HAL_RCC_OscConfig+0x274>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d05b      	beq.n	800437c <HAL_RCC_OscConfig+0x124>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d157      	bne.n	800437c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e25a      	b.n	8004786 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d8:	d106      	bne.n	80042e8 <HAL_RCC_OscConfig+0x90>
 80042da:	4b7c      	ldr	r3, [pc, #496]	; (80044cc <HAL_RCC_OscConfig+0x274>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a7b      	ldr	r2, [pc, #492]	; (80044cc <HAL_RCC_OscConfig+0x274>)
 80042e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	e01d      	b.n	8004324 <HAL_RCC_OscConfig+0xcc>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042f0:	d10c      	bne.n	800430c <HAL_RCC_OscConfig+0xb4>
 80042f2:	4b76      	ldr	r3, [pc, #472]	; (80044cc <HAL_RCC_OscConfig+0x274>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a75      	ldr	r2, [pc, #468]	; (80044cc <HAL_RCC_OscConfig+0x274>)
 80042f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042fc:	6013      	str	r3, [r2, #0]
 80042fe:	4b73      	ldr	r3, [pc, #460]	; (80044cc <HAL_RCC_OscConfig+0x274>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a72      	ldr	r2, [pc, #456]	; (80044cc <HAL_RCC_OscConfig+0x274>)
 8004304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	e00b      	b.n	8004324 <HAL_RCC_OscConfig+0xcc>
 800430c:	4b6f      	ldr	r3, [pc, #444]	; (80044cc <HAL_RCC_OscConfig+0x274>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a6e      	ldr	r2, [pc, #440]	; (80044cc <HAL_RCC_OscConfig+0x274>)
 8004312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004316:	6013      	str	r3, [r2, #0]
 8004318:	4b6c      	ldr	r3, [pc, #432]	; (80044cc <HAL_RCC_OscConfig+0x274>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a6b      	ldr	r2, [pc, #428]	; (80044cc <HAL_RCC_OscConfig+0x274>)
 800431e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004322:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d013      	beq.n	8004354 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800432c:	f7fe f95c 	bl	80025e8 <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004334:	f7fe f958 	bl	80025e8 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b64      	cmp	r3, #100	; 0x64
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e21f      	b.n	8004786 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004346:	4b61      	ldr	r3, [pc, #388]	; (80044cc <HAL_RCC_OscConfig+0x274>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0f0      	beq.n	8004334 <HAL_RCC_OscConfig+0xdc>
 8004352:	e014      	b.n	800437e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004354:	f7fe f948 	bl	80025e8 <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800435c:	f7fe f944 	bl	80025e8 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b64      	cmp	r3, #100	; 0x64
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e20b      	b.n	8004786 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436e:	4b57      	ldr	r3, [pc, #348]	; (80044cc <HAL_RCC_OscConfig+0x274>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1f0      	bne.n	800435c <HAL_RCC_OscConfig+0x104>
 800437a:	e000      	b.n	800437e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800437c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d06f      	beq.n	800446a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800438a:	4b50      	ldr	r3, [pc, #320]	; (80044cc <HAL_RCC_OscConfig+0x274>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 030c 	and.w	r3, r3, #12
 8004392:	2b00      	cmp	r3, #0
 8004394:	d017      	beq.n	80043c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004396:	4b4d      	ldr	r3, [pc, #308]	; (80044cc <HAL_RCC_OscConfig+0x274>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800439e:	2b08      	cmp	r3, #8
 80043a0:	d105      	bne.n	80043ae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80043a2:	4b4a      	ldr	r3, [pc, #296]	; (80044cc <HAL_RCC_OscConfig+0x274>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00b      	beq.n	80043c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ae:	4b47      	ldr	r3, [pc, #284]	; (80044cc <HAL_RCC_OscConfig+0x274>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80043b6:	2b0c      	cmp	r3, #12
 80043b8:	d11c      	bne.n	80043f4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ba:	4b44      	ldr	r3, [pc, #272]	; (80044cc <HAL_RCC_OscConfig+0x274>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d116      	bne.n	80043f4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043c6:	4b41      	ldr	r3, [pc, #260]	; (80044cc <HAL_RCC_OscConfig+0x274>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d005      	beq.n	80043de <HAL_RCC_OscConfig+0x186>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d001      	beq.n	80043de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e1d3      	b.n	8004786 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043de:	4b3b      	ldr	r3, [pc, #236]	; (80044cc <HAL_RCC_OscConfig+0x274>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	4937      	ldr	r1, [pc, #220]	; (80044cc <HAL_RCC_OscConfig+0x274>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043f2:	e03a      	b.n	800446a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d020      	beq.n	800443e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043fc:	4b34      	ldr	r3, [pc, #208]	; (80044d0 <HAL_RCC_OscConfig+0x278>)
 80043fe:	2201      	movs	r2, #1
 8004400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004402:	f7fe f8f1 	bl	80025e8 <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004408:	e008      	b.n	800441c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800440a:	f7fe f8ed 	bl	80025e8 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e1b4      	b.n	8004786 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800441c:	4b2b      	ldr	r3, [pc, #172]	; (80044cc <HAL_RCC_OscConfig+0x274>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0f0      	beq.n	800440a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004428:	4b28      	ldr	r3, [pc, #160]	; (80044cc <HAL_RCC_OscConfig+0x274>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	4925      	ldr	r1, [pc, #148]	; (80044cc <HAL_RCC_OscConfig+0x274>)
 8004438:	4313      	orrs	r3, r2
 800443a:	600b      	str	r3, [r1, #0]
 800443c:	e015      	b.n	800446a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800443e:	4b24      	ldr	r3, [pc, #144]	; (80044d0 <HAL_RCC_OscConfig+0x278>)
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004444:	f7fe f8d0 	bl	80025e8 <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800444c:	f7fe f8cc 	bl	80025e8 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e193      	b.n	8004786 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800445e:	4b1b      	ldr	r3, [pc, #108]	; (80044cc <HAL_RCC_OscConfig+0x274>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1f0      	bne.n	800444c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0308 	and.w	r3, r3, #8
 8004472:	2b00      	cmp	r3, #0
 8004474:	d036      	beq.n	80044e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d016      	beq.n	80044ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800447e:	4b15      	ldr	r3, [pc, #84]	; (80044d4 <HAL_RCC_OscConfig+0x27c>)
 8004480:	2201      	movs	r2, #1
 8004482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004484:	f7fe f8b0 	bl	80025e8 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800448c:	f7fe f8ac 	bl	80025e8 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e173      	b.n	8004786 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800449e:	4b0b      	ldr	r3, [pc, #44]	; (80044cc <HAL_RCC_OscConfig+0x274>)
 80044a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0f0      	beq.n	800448c <HAL_RCC_OscConfig+0x234>
 80044aa:	e01b      	b.n	80044e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ac:	4b09      	ldr	r3, [pc, #36]	; (80044d4 <HAL_RCC_OscConfig+0x27c>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b2:	f7fe f899 	bl	80025e8 <HAL_GetTick>
 80044b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b8:	e00e      	b.n	80044d8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044ba:	f7fe f895 	bl	80025e8 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d907      	bls.n	80044d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e15c      	b.n	8004786 <HAL_RCC_OscConfig+0x52e>
 80044cc:	40023800 	.word	0x40023800
 80044d0:	42470000 	.word	0x42470000
 80044d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044d8:	4b8a      	ldr	r3, [pc, #552]	; (8004704 <HAL_RCC_OscConfig+0x4ac>)
 80044da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1ea      	bne.n	80044ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 8097 	beq.w	8004620 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044f2:	2300      	movs	r3, #0
 80044f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044f6:	4b83      	ldr	r3, [pc, #524]	; (8004704 <HAL_RCC_OscConfig+0x4ac>)
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10f      	bne.n	8004522 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004502:	2300      	movs	r3, #0
 8004504:	60bb      	str	r3, [r7, #8]
 8004506:	4b7f      	ldr	r3, [pc, #508]	; (8004704 <HAL_RCC_OscConfig+0x4ac>)
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	4a7e      	ldr	r2, [pc, #504]	; (8004704 <HAL_RCC_OscConfig+0x4ac>)
 800450c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004510:	6413      	str	r3, [r2, #64]	; 0x40
 8004512:	4b7c      	ldr	r3, [pc, #496]	; (8004704 <HAL_RCC_OscConfig+0x4ac>)
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451a:	60bb      	str	r3, [r7, #8]
 800451c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800451e:	2301      	movs	r3, #1
 8004520:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004522:	4b79      	ldr	r3, [pc, #484]	; (8004708 <HAL_RCC_OscConfig+0x4b0>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452a:	2b00      	cmp	r3, #0
 800452c:	d118      	bne.n	8004560 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800452e:	4b76      	ldr	r3, [pc, #472]	; (8004708 <HAL_RCC_OscConfig+0x4b0>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a75      	ldr	r2, [pc, #468]	; (8004708 <HAL_RCC_OscConfig+0x4b0>)
 8004534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800453a:	f7fe f855 	bl	80025e8 <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004540:	e008      	b.n	8004554 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004542:	f7fe f851 	bl	80025e8 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e118      	b.n	8004786 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004554:	4b6c      	ldr	r3, [pc, #432]	; (8004708 <HAL_RCC_OscConfig+0x4b0>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0f0      	beq.n	8004542 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d106      	bne.n	8004576 <HAL_RCC_OscConfig+0x31e>
 8004568:	4b66      	ldr	r3, [pc, #408]	; (8004704 <HAL_RCC_OscConfig+0x4ac>)
 800456a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456c:	4a65      	ldr	r2, [pc, #404]	; (8004704 <HAL_RCC_OscConfig+0x4ac>)
 800456e:	f043 0301 	orr.w	r3, r3, #1
 8004572:	6713      	str	r3, [r2, #112]	; 0x70
 8004574:	e01c      	b.n	80045b0 <HAL_RCC_OscConfig+0x358>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	2b05      	cmp	r3, #5
 800457c:	d10c      	bne.n	8004598 <HAL_RCC_OscConfig+0x340>
 800457e:	4b61      	ldr	r3, [pc, #388]	; (8004704 <HAL_RCC_OscConfig+0x4ac>)
 8004580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004582:	4a60      	ldr	r2, [pc, #384]	; (8004704 <HAL_RCC_OscConfig+0x4ac>)
 8004584:	f043 0304 	orr.w	r3, r3, #4
 8004588:	6713      	str	r3, [r2, #112]	; 0x70
 800458a:	4b5e      	ldr	r3, [pc, #376]	; (8004704 <HAL_RCC_OscConfig+0x4ac>)
 800458c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458e:	4a5d      	ldr	r2, [pc, #372]	; (8004704 <HAL_RCC_OscConfig+0x4ac>)
 8004590:	f043 0301 	orr.w	r3, r3, #1
 8004594:	6713      	str	r3, [r2, #112]	; 0x70
 8004596:	e00b      	b.n	80045b0 <HAL_RCC_OscConfig+0x358>
 8004598:	4b5a      	ldr	r3, [pc, #360]	; (8004704 <HAL_RCC_OscConfig+0x4ac>)
 800459a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459c:	4a59      	ldr	r2, [pc, #356]	; (8004704 <HAL_RCC_OscConfig+0x4ac>)
 800459e:	f023 0301 	bic.w	r3, r3, #1
 80045a2:	6713      	str	r3, [r2, #112]	; 0x70
 80045a4:	4b57      	ldr	r3, [pc, #348]	; (8004704 <HAL_RCC_OscConfig+0x4ac>)
 80045a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a8:	4a56      	ldr	r2, [pc, #344]	; (8004704 <HAL_RCC_OscConfig+0x4ac>)
 80045aa:	f023 0304 	bic.w	r3, r3, #4
 80045ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d015      	beq.n	80045e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b8:	f7fe f816 	bl	80025e8 <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045be:	e00a      	b.n	80045d6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045c0:	f7fe f812 	bl	80025e8 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e0d7      	b.n	8004786 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d6:	4b4b      	ldr	r3, [pc, #300]	; (8004704 <HAL_RCC_OscConfig+0x4ac>)
 80045d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0ee      	beq.n	80045c0 <HAL_RCC_OscConfig+0x368>
 80045e2:	e014      	b.n	800460e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e4:	f7fe f800 	bl	80025e8 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ea:	e00a      	b.n	8004602 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045ec:	f7fd fffc 	bl	80025e8 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e0c1      	b.n	8004786 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004602:	4b40      	ldr	r3, [pc, #256]	; (8004704 <HAL_RCC_OscConfig+0x4ac>)
 8004604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1ee      	bne.n	80045ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800460e:	7dfb      	ldrb	r3, [r7, #23]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d105      	bne.n	8004620 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004614:	4b3b      	ldr	r3, [pc, #236]	; (8004704 <HAL_RCC_OscConfig+0x4ac>)
 8004616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004618:	4a3a      	ldr	r2, [pc, #232]	; (8004704 <HAL_RCC_OscConfig+0x4ac>)
 800461a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800461e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 80ad 	beq.w	8004784 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800462a:	4b36      	ldr	r3, [pc, #216]	; (8004704 <HAL_RCC_OscConfig+0x4ac>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 030c 	and.w	r3, r3, #12
 8004632:	2b08      	cmp	r3, #8
 8004634:	d060      	beq.n	80046f8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d145      	bne.n	80046ca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800463e:	4b33      	ldr	r3, [pc, #204]	; (800470c <HAL_RCC_OscConfig+0x4b4>)
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004644:	f7fd ffd0 	bl	80025e8 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800464c:	f7fd ffcc 	bl	80025e8 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e093      	b.n	8004786 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800465e:	4b29      	ldr	r3, [pc, #164]	; (8004704 <HAL_RCC_OscConfig+0x4ac>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69da      	ldr	r2, [r3, #28]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	019b      	lsls	r3, r3, #6
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004680:	085b      	lsrs	r3, r3, #1
 8004682:	3b01      	subs	r3, #1
 8004684:	041b      	lsls	r3, r3, #16
 8004686:	431a      	orrs	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468c:	061b      	lsls	r3, r3, #24
 800468e:	431a      	orrs	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004694:	071b      	lsls	r3, r3, #28
 8004696:	491b      	ldr	r1, [pc, #108]	; (8004704 <HAL_RCC_OscConfig+0x4ac>)
 8004698:	4313      	orrs	r3, r2
 800469a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800469c:	4b1b      	ldr	r3, [pc, #108]	; (800470c <HAL_RCC_OscConfig+0x4b4>)
 800469e:	2201      	movs	r2, #1
 80046a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a2:	f7fd ffa1 	bl	80025e8 <HAL_GetTick>
 80046a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046a8:	e008      	b.n	80046bc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046aa:	f7fd ff9d 	bl	80025e8 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e064      	b.n	8004786 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046bc:	4b11      	ldr	r3, [pc, #68]	; (8004704 <HAL_RCC_OscConfig+0x4ac>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0f0      	beq.n	80046aa <HAL_RCC_OscConfig+0x452>
 80046c8:	e05c      	b.n	8004784 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ca:	4b10      	ldr	r3, [pc, #64]	; (800470c <HAL_RCC_OscConfig+0x4b4>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d0:	f7fd ff8a 	bl	80025e8 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046d8:	f7fd ff86 	bl	80025e8 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e04d      	b.n	8004786 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ea:	4b06      	ldr	r3, [pc, #24]	; (8004704 <HAL_RCC_OscConfig+0x4ac>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1f0      	bne.n	80046d8 <HAL_RCC_OscConfig+0x480>
 80046f6:	e045      	b.n	8004784 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d107      	bne.n	8004710 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e040      	b.n	8004786 <HAL_RCC_OscConfig+0x52e>
 8004704:	40023800 	.word	0x40023800
 8004708:	40007000 	.word	0x40007000
 800470c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004710:	4b1f      	ldr	r3, [pc, #124]	; (8004790 <HAL_RCC_OscConfig+0x538>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d030      	beq.n	8004780 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004728:	429a      	cmp	r2, r3
 800472a:	d129      	bne.n	8004780 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004736:	429a      	cmp	r2, r3
 8004738:	d122      	bne.n	8004780 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004740:	4013      	ands	r3, r2
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004746:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004748:	4293      	cmp	r3, r2
 800474a:	d119      	bne.n	8004780 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004756:	085b      	lsrs	r3, r3, #1
 8004758:	3b01      	subs	r3, #1
 800475a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800475c:	429a      	cmp	r2, r3
 800475e:	d10f      	bne.n	8004780 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800476c:	429a      	cmp	r2, r3
 800476e:	d107      	bne.n	8004780 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800477c:	429a      	cmp	r2, r3
 800477e:	d001      	beq.n	8004784 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e000      	b.n	8004786 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3718      	adds	r7, #24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	40023800 	.word	0x40023800

08004794 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e066      	b.n	8004878 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	7f5b      	ldrb	r3, [r3, #29]
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d105      	bne.n	80047c0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f7fd fb8e 	bl	8001edc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2202      	movs	r2, #2
 80047c4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	22ca      	movs	r2, #202	; 0xca
 80047cc:	625a      	str	r2, [r3, #36]	; 0x24
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2253      	movs	r2, #83	; 0x53
 80047d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f998 	bl	8004b0c <RTC_EnterInitMode>
 80047dc:	4603      	mov	r3, r0
 80047de:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80047e0:	7bfb      	ldrb	r3, [r7, #15]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d12c      	bne.n	8004840 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	6812      	ldr	r2, [r2, #0]
 80047f0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80047f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047f8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6899      	ldr	r1, [r3, #8]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	431a      	orrs	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	68d2      	ldr	r2, [r2, #12]
 8004820:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6919      	ldr	r1, [r3, #16]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	041a      	lsls	r2, r3, #16
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f99f 	bl	8004b7a <RTC_ExitInitMode>
 800483c:	4603      	mov	r3, r0
 800483e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004840:	7bfb      	ldrb	r3, [r7, #15]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d113      	bne.n	800486e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004854:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	699a      	ldr	r2, [r3, #24]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	22ff      	movs	r2, #255	; 0xff
 8004874:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8004876:	7bfb      	ldrb	r3, [r7, #15]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004880:	b590      	push	{r4, r7, lr}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	7f1b      	ldrb	r3, [r3, #28]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d101      	bne.n	800489c <HAL_RTC_SetTime+0x1c>
 8004898:	2302      	movs	r3, #2
 800489a:	e087      	b.n	80049ac <HAL_RTC_SetTime+0x12c>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2201      	movs	r2, #1
 80048a0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2202      	movs	r2, #2
 80048a6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d126      	bne.n	80048fc <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d102      	bne.n	80048c2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	2200      	movs	r2, #0
 80048c0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 f97c 	bl	8004bc4 <RTC_ByteToBcd2>
 80048cc:	4603      	mov	r3, r0
 80048ce:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	785b      	ldrb	r3, [r3, #1]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 f975 	bl	8004bc4 <RTC_ByteToBcd2>
 80048da:	4603      	mov	r3, r0
 80048dc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80048de:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	789b      	ldrb	r3, [r3, #2]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 f96d 	bl	8004bc4 <RTC_ByteToBcd2>
 80048ea:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80048ec:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	78db      	ldrb	r3, [r3, #3]
 80048f4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80048f6:	4313      	orrs	r3, r2
 80048f8:	617b      	str	r3, [r7, #20]
 80048fa:	e018      	b.n	800492e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004906:	2b00      	cmp	r3, #0
 8004908:	d102      	bne.n	8004910 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	2200      	movs	r2, #0
 800490e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	785b      	ldrb	r3, [r3, #1]
 800491a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800491c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004922:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	78db      	ldrb	r3, [r3, #3]
 8004928:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800492a:	4313      	orrs	r3, r2
 800492c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	22ca      	movs	r2, #202	; 0xca
 8004934:	625a      	str	r2, [r3, #36]	; 0x24
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2253      	movs	r2, #83	; 0x53
 800493c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 f8e4 	bl	8004b0c <RTC_EnterInitMode>
 8004944:	4603      	mov	r3, r0
 8004946:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004948:	7cfb      	ldrb	r3, [r7, #19]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d120      	bne.n	8004990 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004958:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800495c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800496c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6899      	ldr	r1, [r3, #8]
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	68da      	ldr	r2, [r3, #12]
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	431a      	orrs	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 f8f7 	bl	8004b7a <RTC_ExitInitMode>
 800498c:	4603      	mov	r3, r0
 800498e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004990:	7cfb      	ldrb	r3, [r7, #19]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d102      	bne.n	800499c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2201      	movs	r2, #1
 800499a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	22ff      	movs	r2, #255	; 0xff
 80049a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	771a      	strb	r2, [r3, #28]

  return status;
 80049aa:	7cfb      	ldrb	r3, [r7, #19]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	371c      	adds	r7, #28
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd90      	pop	{r4, r7, pc}

080049b4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80049b4:	b590      	push	{r4, r7, lr}
 80049b6:	b087      	sub	sp, #28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80049c0:	2300      	movs	r3, #0
 80049c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	7f1b      	ldrb	r3, [r3, #28]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d101      	bne.n	80049d0 <HAL_RTC_SetDate+0x1c>
 80049cc:	2302      	movs	r3, #2
 80049ce:	e071      	b.n	8004ab4 <HAL_RTC_SetDate+0x100>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2201      	movs	r2, #1
 80049d4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2202      	movs	r2, #2
 80049da:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10e      	bne.n	8004a00 <HAL_RTC_SetDate+0x4c>
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	785b      	ldrb	r3, [r3, #1]
 80049e6:	f003 0310 	and.w	r3, r3, #16
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d008      	beq.n	8004a00 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	785b      	ldrb	r3, [r3, #1]
 80049f2:	f023 0310 	bic.w	r3, r3, #16
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	330a      	adds	r3, #10
 80049fa:	b2da      	uxtb	r2, r3
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d11c      	bne.n	8004a40 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	78db      	ldrb	r3, [r3, #3]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 f8da 	bl	8004bc4 <RTC_ByteToBcd2>
 8004a10:	4603      	mov	r3, r0
 8004a12:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	785b      	ldrb	r3, [r3, #1]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 f8d3 	bl	8004bc4 <RTC_ByteToBcd2>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004a22:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	789b      	ldrb	r3, [r3, #2]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f000 f8cb 	bl	8004bc4 <RTC_ByteToBcd2>
 8004a2e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004a30:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	617b      	str	r3, [r7, #20]
 8004a3e:	e00e      	b.n	8004a5e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	78db      	ldrb	r3, [r3, #3]
 8004a44:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	785b      	ldrb	r3, [r3, #1]
 8004a4a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004a4c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004a52:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	22ca      	movs	r2, #202	; 0xca
 8004a64:	625a      	str	r2, [r3, #36]	; 0x24
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2253      	movs	r2, #83	; 0x53
 8004a6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 f84c 	bl	8004b0c <RTC_EnterInitMode>
 8004a74:	4603      	mov	r3, r0
 8004a76:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004a78:	7cfb      	ldrb	r3, [r7, #19]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10c      	bne.n	8004a98 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004a88:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004a8c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f000 f873 	bl	8004b7a <RTC_ExitInitMode>
 8004a94:	4603      	mov	r3, r0
 8004a96:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004a98:	7cfb      	ldrb	r3, [r7, #19]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d102      	bne.n	8004aa4 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	22ff      	movs	r2, #255	; 0xff
 8004aaa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	771a      	strb	r2, [r3, #28]

  return status;
 8004ab2:	7cfb      	ldrb	r3, [r7, #19]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	371c      	adds	r7, #28
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd90      	pop	{r4, r7, pc}

08004abc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68da      	ldr	r2, [r3, #12]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ad6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ad8:	f7fd fd86 	bl	80025e8 <HAL_GetTick>
 8004adc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004ade:	e009      	b.n	8004af4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004ae0:	f7fd fd82 	bl	80025e8 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004aee:	d901      	bls.n	8004af4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e007      	b.n	8004b04 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	f003 0320 	and.w	r3, r3, #32
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0ee      	beq.n	8004ae0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b14:	2300      	movs	r3, #0
 8004b16:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d122      	bne.n	8004b70 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68da      	ldr	r2, [r3, #12]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b38:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b3a:	f7fd fd55 	bl	80025e8 <HAL_GetTick>
 8004b3e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004b40:	e00c      	b.n	8004b5c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004b42:	f7fd fd51 	bl	80025e8 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b50:	d904      	bls.n	8004b5c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2204      	movs	r2, #4
 8004b56:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d102      	bne.n	8004b70 <RTC_EnterInitMode+0x64>
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d1e8      	bne.n	8004b42 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b084      	sub	sp, #16
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b82:	2300      	movs	r3, #0
 8004b84:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68da      	ldr	r2, [r3, #12]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b94:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f003 0320 	and.w	r3, r3, #32
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10a      	bne.n	8004bba <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f7ff ff89 	bl	8004abc <HAL_RTC_WaitForSynchro>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d004      	beq.n	8004bba <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2204      	movs	r2, #4
 8004bb4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	4603      	mov	r3, r0
 8004bcc:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8004bd2:	e005      	b.n	8004be0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8004bda:	79fb      	ldrb	r3, [r7, #7]
 8004bdc:	3b0a      	subs	r3, #10
 8004bde:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004be0:	79fb      	ldrb	r3, [r7, #7]
 8004be2:	2b09      	cmp	r3, #9
 8004be4:	d8f6      	bhi.n	8004bd4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004be6:	7bfb      	ldrb	r3, [r7, #15]
 8004be8:	011b      	lsls	r3, r3, #4
 8004bea:	b2da      	uxtb	r2, r3
 8004bec:	79fb      	ldrb	r3, [r7, #7]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	b2db      	uxtb	r3, r3
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b086      	sub	sp, #24
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	60f8      	str	r0, [r7, #12]
 8004c06:	60b9      	str	r1, [r7, #8]
 8004c08:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	7f1b      	ldrb	r3, [r3, #28]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d101      	bne.n	8004c1a <HAL_RTCEx_SetWakeUpTimer+0x1c>
 8004c16:	2302      	movs	r3, #2
 8004c18:	e08a      	b.n	8004d30 <HAL_RTCEx_SetWakeUpTimer+0x132>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2202      	movs	r2, #2
 8004c24:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	22ca      	movs	r2, #202	; 0xca
 8004c2c:	625a      	str	r2, [r3, #36]	; 0x24
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2253      	movs	r2, #83	; 0x53
 8004c34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d01e      	beq.n	8004c82 <HAL_RTCEx_SetWakeUpTimer+0x84>
  {
    tickstart = HAL_GetTick();
 8004c44:	f7fd fcd0 	bl	80025e8 <HAL_GetTick>
 8004c48:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8004c4a:	e013      	b.n	8004c74 <HAL_RTCEx_SetWakeUpTimer+0x76>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c4c:	f7fd fccc 	bl	80025e8 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c5a:	d90b      	bls.n	8004c74 <HAL_RTCEx_SetWakeUpTimer+0x76>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	22ff      	movs	r2, #255	; 0xff
 8004c62:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2203      	movs	r2, #3
 8004c68:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e05d      	b.n	8004d30 <HAL_RTCEx_SetWakeUpTimer+0x132>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f003 0304 	and.w	r3, r3, #4
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1e4      	bne.n	8004c4c <HAL_RTCEx_SetWakeUpTimer+0x4e>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c90:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004ca2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ca4:	f7fd fca0 	bl	80025e8 <HAL_GetTick>
 8004ca8:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004caa:	e013      	b.n	8004cd4 <HAL_RTCEx_SetWakeUpTimer+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004cac:	f7fd fc9c 	bl	80025e8 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cba:	d90b      	bls.n	8004cd4 <HAL_RTCEx_SetWakeUpTimer+0xd6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	22ff      	movs	r2, #255	; 0xff
 8004cc2:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2203      	movs	r2, #3
 8004cc8:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e02d      	b.n	8004d30 <HAL_RTCEx_SetWakeUpTimer+0x132>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	f003 0304 	and.w	r3, r3, #4
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0e4      	beq.n	8004cac <HAL_RTCEx_SetWakeUpTimer+0xae>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 0207 	bic.w	r2, r2, #7
 8004cf0:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6899      	ldr	r1, [r3, #8]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d18:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	22ff      	movs	r2, #255	; 0xff
 8004d20:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2201      	movs	r2, #1
 8004d26:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3718      	adds	r7, #24
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e041      	b.n	8004dce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d106      	bne.n	8004d64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7fd f968 	bl	8002034 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2202      	movs	r2, #2
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	3304      	adds	r3, #4
 8004d74:	4619      	mov	r1, r3
 8004d76:	4610      	mov	r0, r2
 8004d78:	f000 ff7e 	bl	8005c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b082      	sub	sp, #8
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e041      	b.n	8004e6c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d106      	bne.n	8004e02 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 f839 	bl	8004e74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2202      	movs	r2, #2
 8004e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	3304      	adds	r3, #4
 8004e12:	4619      	mov	r1, r3
 8004e14:	4610      	mov	r0, r2
 8004e16:	f000 ff2f 	bl	8005c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d109      	bne.n	8004eac <HAL_TIM_PWM_Start+0x24>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	bf14      	ite	ne
 8004ea4:	2301      	movne	r3, #1
 8004ea6:	2300      	moveq	r3, #0
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	e022      	b.n	8004ef2 <HAL_TIM_PWM_Start+0x6a>
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d109      	bne.n	8004ec6 <HAL_TIM_PWM_Start+0x3e>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	bf14      	ite	ne
 8004ebe:	2301      	movne	r3, #1
 8004ec0:	2300      	moveq	r3, #0
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	e015      	b.n	8004ef2 <HAL_TIM_PWM_Start+0x6a>
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b08      	cmp	r3, #8
 8004eca:	d109      	bne.n	8004ee0 <HAL_TIM_PWM_Start+0x58>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	bf14      	ite	ne
 8004ed8:	2301      	movne	r3, #1
 8004eda:	2300      	moveq	r3, #0
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	e008      	b.n	8004ef2 <HAL_TIM_PWM_Start+0x6a>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	bf14      	ite	ne
 8004eec:	2301      	movne	r3, #1
 8004eee:	2300      	moveq	r3, #0
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e07c      	b.n	8004ff4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d104      	bne.n	8004f0a <HAL_TIM_PWM_Start+0x82>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f08:	e013      	b.n	8004f32 <HAL_TIM_PWM_Start+0xaa>
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	d104      	bne.n	8004f1a <HAL_TIM_PWM_Start+0x92>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f18:	e00b      	b.n	8004f32 <HAL_TIM_PWM_Start+0xaa>
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	2b08      	cmp	r3, #8
 8004f1e:	d104      	bne.n	8004f2a <HAL_TIM_PWM_Start+0xa2>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f28:	e003      	b.n	8004f32 <HAL_TIM_PWM_Start+0xaa>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2201      	movs	r2, #1
 8004f38:	6839      	ldr	r1, [r7, #0]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f001 fb42 	bl	80065c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a2d      	ldr	r2, [pc, #180]	; (8004ffc <HAL_TIM_PWM_Start+0x174>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d004      	beq.n	8004f54 <HAL_TIM_PWM_Start+0xcc>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a2c      	ldr	r2, [pc, #176]	; (8005000 <HAL_TIM_PWM_Start+0x178>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d101      	bne.n	8004f58 <HAL_TIM_PWM_Start+0xd0>
 8004f54:	2301      	movs	r3, #1
 8004f56:	e000      	b.n	8004f5a <HAL_TIM_PWM_Start+0xd2>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d007      	beq.n	8004f6e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a22      	ldr	r2, [pc, #136]	; (8004ffc <HAL_TIM_PWM_Start+0x174>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d022      	beq.n	8004fbe <HAL_TIM_PWM_Start+0x136>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f80:	d01d      	beq.n	8004fbe <HAL_TIM_PWM_Start+0x136>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a1f      	ldr	r2, [pc, #124]	; (8005004 <HAL_TIM_PWM_Start+0x17c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d018      	beq.n	8004fbe <HAL_TIM_PWM_Start+0x136>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a1d      	ldr	r2, [pc, #116]	; (8005008 <HAL_TIM_PWM_Start+0x180>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d013      	beq.n	8004fbe <HAL_TIM_PWM_Start+0x136>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a1c      	ldr	r2, [pc, #112]	; (800500c <HAL_TIM_PWM_Start+0x184>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d00e      	beq.n	8004fbe <HAL_TIM_PWM_Start+0x136>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a16      	ldr	r2, [pc, #88]	; (8005000 <HAL_TIM_PWM_Start+0x178>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d009      	beq.n	8004fbe <HAL_TIM_PWM_Start+0x136>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a18      	ldr	r2, [pc, #96]	; (8005010 <HAL_TIM_PWM_Start+0x188>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d004      	beq.n	8004fbe <HAL_TIM_PWM_Start+0x136>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a16      	ldr	r2, [pc, #88]	; (8005014 <HAL_TIM_PWM_Start+0x18c>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d111      	bne.n	8004fe2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2b06      	cmp	r3, #6
 8004fce:	d010      	beq.n	8004ff2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f042 0201 	orr.w	r2, r2, #1
 8004fde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe0:	e007      	b.n	8004ff2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f042 0201 	orr.w	r2, r2, #1
 8004ff0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	40010000 	.word	0x40010000
 8005000:	40010400 	.word	0x40010400
 8005004:	40000400 	.word	0x40000400
 8005008:	40000800 	.word	0x40000800
 800500c:	40000c00 	.word	0x40000c00
 8005010:	40014000 	.word	0x40014000
 8005014:	40001800 	.word	0x40001800

08005018 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e041      	b.n	80050ae <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d106      	bne.n	8005044 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f7fc ff76 	bl	8001f30 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2202      	movs	r2, #2
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	3304      	adds	r3, #4
 8005054:	4619      	mov	r1, r3
 8005056:	4610      	mov	r0, r2
 8005058:	f000 fe0e 	bl	8005c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
	...

080050b8 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d104      	bne.n	80050d2 <HAL_TIM_IC_Start+0x1a>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	e013      	b.n	80050fa <HAL_TIM_IC_Start+0x42>
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b04      	cmp	r3, #4
 80050d6:	d104      	bne.n	80050e2 <HAL_TIM_IC_Start+0x2a>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	e00b      	b.n	80050fa <HAL_TIM_IC_Start+0x42>
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	d104      	bne.n	80050f2 <HAL_TIM_IC_Start+0x3a>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	e003      	b.n	80050fa <HAL_TIM_IC_Start+0x42>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d104      	bne.n	800510c <HAL_TIM_IC_Start+0x54>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005108:	b2db      	uxtb	r3, r3
 800510a:	e013      	b.n	8005134 <HAL_TIM_IC_Start+0x7c>
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	2b04      	cmp	r3, #4
 8005110:	d104      	bne.n	800511c <HAL_TIM_IC_Start+0x64>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005118:	b2db      	uxtb	r3, r3
 800511a:	e00b      	b.n	8005134 <HAL_TIM_IC_Start+0x7c>
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	2b08      	cmp	r3, #8
 8005120:	d104      	bne.n	800512c <HAL_TIM_IC_Start+0x74>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005128:	b2db      	uxtb	r3, r3
 800512a:	e003      	b.n	8005134 <HAL_TIM_IC_Start+0x7c>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005132:	b2db      	uxtb	r3, r3
 8005134:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005136:	7bfb      	ldrb	r3, [r7, #15]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d102      	bne.n	8005142 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800513c:	7bbb      	ldrb	r3, [r7, #14]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d001      	beq.n	8005146 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e081      	b.n	800524a <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d104      	bne.n	8005156 <HAL_TIM_IC_Start+0x9e>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005154:	e013      	b.n	800517e <HAL_TIM_IC_Start+0xc6>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b04      	cmp	r3, #4
 800515a:	d104      	bne.n	8005166 <HAL_TIM_IC_Start+0xae>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005164:	e00b      	b.n	800517e <HAL_TIM_IC_Start+0xc6>
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b08      	cmp	r3, #8
 800516a:	d104      	bne.n	8005176 <HAL_TIM_IC_Start+0xbe>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005174:	e003      	b.n	800517e <HAL_TIM_IC_Start+0xc6>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2202      	movs	r2, #2
 800517a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d104      	bne.n	800518e <HAL_TIM_IC_Start+0xd6>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800518c:	e013      	b.n	80051b6 <HAL_TIM_IC_Start+0xfe>
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2b04      	cmp	r3, #4
 8005192:	d104      	bne.n	800519e <HAL_TIM_IC_Start+0xe6>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2202      	movs	r2, #2
 8005198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800519c:	e00b      	b.n	80051b6 <HAL_TIM_IC_Start+0xfe>
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b08      	cmp	r3, #8
 80051a2:	d104      	bne.n	80051ae <HAL_TIM_IC_Start+0xf6>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2202      	movs	r2, #2
 80051a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051ac:	e003      	b.n	80051b6 <HAL_TIM_IC_Start+0xfe>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2202      	movs	r2, #2
 80051b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2201      	movs	r2, #1
 80051bc:	6839      	ldr	r1, [r7, #0]
 80051be:	4618      	mov	r0, r3
 80051c0:	f001 fa00 	bl	80065c4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a22      	ldr	r2, [pc, #136]	; (8005254 <HAL_TIM_IC_Start+0x19c>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d022      	beq.n	8005214 <HAL_TIM_IC_Start+0x15c>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d6:	d01d      	beq.n	8005214 <HAL_TIM_IC_Start+0x15c>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a1e      	ldr	r2, [pc, #120]	; (8005258 <HAL_TIM_IC_Start+0x1a0>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d018      	beq.n	8005214 <HAL_TIM_IC_Start+0x15c>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a1d      	ldr	r2, [pc, #116]	; (800525c <HAL_TIM_IC_Start+0x1a4>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d013      	beq.n	8005214 <HAL_TIM_IC_Start+0x15c>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a1b      	ldr	r2, [pc, #108]	; (8005260 <HAL_TIM_IC_Start+0x1a8>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d00e      	beq.n	8005214 <HAL_TIM_IC_Start+0x15c>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a1a      	ldr	r2, [pc, #104]	; (8005264 <HAL_TIM_IC_Start+0x1ac>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d009      	beq.n	8005214 <HAL_TIM_IC_Start+0x15c>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a18      	ldr	r2, [pc, #96]	; (8005268 <HAL_TIM_IC_Start+0x1b0>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d004      	beq.n	8005214 <HAL_TIM_IC_Start+0x15c>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a17      	ldr	r2, [pc, #92]	; (800526c <HAL_TIM_IC_Start+0x1b4>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d111      	bne.n	8005238 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f003 0307 	and.w	r3, r3, #7
 800521e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	2b06      	cmp	r3, #6
 8005224:	d010      	beq.n	8005248 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f042 0201 	orr.w	r2, r2, #1
 8005234:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005236:	e007      	b.n	8005248 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f042 0201 	orr.w	r2, r2, #1
 8005246:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	40010000 	.word	0x40010000
 8005258:	40000400 	.word	0x40000400
 800525c:	40000800 	.word	0x40000800
 8005260:	40000c00 	.word	0x40000c00
 8005264:	40010400 	.word	0x40010400
 8005268:	40014000 	.word	0x40014000
 800526c:	40001800 	.word	0x40001800

08005270 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800527a:	2300      	movs	r3, #0
 800527c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d104      	bne.n	800528e <HAL_TIM_IC_Start_IT+0x1e>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800528a:	b2db      	uxtb	r3, r3
 800528c:	e013      	b.n	80052b6 <HAL_TIM_IC_Start_IT+0x46>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b04      	cmp	r3, #4
 8005292:	d104      	bne.n	800529e <HAL_TIM_IC_Start_IT+0x2e>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800529a:	b2db      	uxtb	r3, r3
 800529c:	e00b      	b.n	80052b6 <HAL_TIM_IC_Start_IT+0x46>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d104      	bne.n	80052ae <HAL_TIM_IC_Start_IT+0x3e>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	e003      	b.n	80052b6 <HAL_TIM_IC_Start_IT+0x46>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d104      	bne.n	80052c8 <HAL_TIM_IC_Start_IT+0x58>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	e013      	b.n	80052f0 <HAL_TIM_IC_Start_IT+0x80>
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	2b04      	cmp	r3, #4
 80052cc:	d104      	bne.n	80052d8 <HAL_TIM_IC_Start_IT+0x68>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	e00b      	b.n	80052f0 <HAL_TIM_IC_Start_IT+0x80>
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	2b08      	cmp	r3, #8
 80052dc:	d104      	bne.n	80052e8 <HAL_TIM_IC_Start_IT+0x78>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	e003      	b.n	80052f0 <HAL_TIM_IC_Start_IT+0x80>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80052f2:	7bbb      	ldrb	r3, [r7, #14]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d102      	bne.n	80052fe <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80052f8:	7b7b      	ldrb	r3, [r7, #13]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d001      	beq.n	8005302 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e0cc      	b.n	800549c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d104      	bne.n	8005312 <HAL_TIM_IC_Start_IT+0xa2>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005310:	e013      	b.n	800533a <HAL_TIM_IC_Start_IT+0xca>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b04      	cmp	r3, #4
 8005316:	d104      	bne.n	8005322 <HAL_TIM_IC_Start_IT+0xb2>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005320:	e00b      	b.n	800533a <HAL_TIM_IC_Start_IT+0xca>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b08      	cmp	r3, #8
 8005326:	d104      	bne.n	8005332 <HAL_TIM_IC_Start_IT+0xc2>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005330:	e003      	b.n	800533a <HAL_TIM_IC_Start_IT+0xca>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2202      	movs	r2, #2
 8005336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d104      	bne.n	800534a <HAL_TIM_IC_Start_IT+0xda>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005348:	e013      	b.n	8005372 <HAL_TIM_IC_Start_IT+0x102>
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b04      	cmp	r3, #4
 800534e:	d104      	bne.n	800535a <HAL_TIM_IC_Start_IT+0xea>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005358:	e00b      	b.n	8005372 <HAL_TIM_IC_Start_IT+0x102>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	2b08      	cmp	r3, #8
 800535e:	d104      	bne.n	800536a <HAL_TIM_IC_Start_IT+0xfa>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2202      	movs	r2, #2
 8005364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005368:	e003      	b.n	8005372 <HAL_TIM_IC_Start_IT+0x102>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2202      	movs	r2, #2
 800536e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b0c      	cmp	r3, #12
 8005376:	d841      	bhi.n	80053fc <HAL_TIM_IC_Start_IT+0x18c>
 8005378:	a201      	add	r2, pc, #4	; (adr r2, 8005380 <HAL_TIM_IC_Start_IT+0x110>)
 800537a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537e:	bf00      	nop
 8005380:	080053b5 	.word	0x080053b5
 8005384:	080053fd 	.word	0x080053fd
 8005388:	080053fd 	.word	0x080053fd
 800538c:	080053fd 	.word	0x080053fd
 8005390:	080053c7 	.word	0x080053c7
 8005394:	080053fd 	.word	0x080053fd
 8005398:	080053fd 	.word	0x080053fd
 800539c:	080053fd 	.word	0x080053fd
 80053a0:	080053d9 	.word	0x080053d9
 80053a4:	080053fd 	.word	0x080053fd
 80053a8:	080053fd 	.word	0x080053fd
 80053ac:	080053fd 	.word	0x080053fd
 80053b0:	080053eb 	.word	0x080053eb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68da      	ldr	r2, [r3, #12]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 0202 	orr.w	r2, r2, #2
 80053c2:	60da      	str	r2, [r3, #12]
      break;
 80053c4:	e01d      	b.n	8005402 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68da      	ldr	r2, [r3, #12]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f042 0204 	orr.w	r2, r2, #4
 80053d4:	60da      	str	r2, [r3, #12]
      break;
 80053d6:	e014      	b.n	8005402 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68da      	ldr	r2, [r3, #12]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f042 0208 	orr.w	r2, r2, #8
 80053e6:	60da      	str	r2, [r3, #12]
      break;
 80053e8:	e00b      	b.n	8005402 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68da      	ldr	r2, [r3, #12]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f042 0210 	orr.w	r2, r2, #16
 80053f8:	60da      	str	r2, [r3, #12]
      break;
 80053fa:	e002      	b.n	8005402 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005400:	bf00      	nop
  }

  if (status == HAL_OK)
 8005402:	7bfb      	ldrb	r3, [r7, #15]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d148      	bne.n	800549a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2201      	movs	r2, #1
 800540e:	6839      	ldr	r1, [r7, #0]
 8005410:	4618      	mov	r0, r3
 8005412:	f001 f8d7 	bl	80065c4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a22      	ldr	r2, [pc, #136]	; (80054a4 <HAL_TIM_IC_Start_IT+0x234>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d022      	beq.n	8005466 <HAL_TIM_IC_Start_IT+0x1f6>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005428:	d01d      	beq.n	8005466 <HAL_TIM_IC_Start_IT+0x1f6>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a1e      	ldr	r2, [pc, #120]	; (80054a8 <HAL_TIM_IC_Start_IT+0x238>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d018      	beq.n	8005466 <HAL_TIM_IC_Start_IT+0x1f6>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a1c      	ldr	r2, [pc, #112]	; (80054ac <HAL_TIM_IC_Start_IT+0x23c>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d013      	beq.n	8005466 <HAL_TIM_IC_Start_IT+0x1f6>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a1b      	ldr	r2, [pc, #108]	; (80054b0 <HAL_TIM_IC_Start_IT+0x240>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d00e      	beq.n	8005466 <HAL_TIM_IC_Start_IT+0x1f6>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a19      	ldr	r2, [pc, #100]	; (80054b4 <HAL_TIM_IC_Start_IT+0x244>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d009      	beq.n	8005466 <HAL_TIM_IC_Start_IT+0x1f6>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a18      	ldr	r2, [pc, #96]	; (80054b8 <HAL_TIM_IC_Start_IT+0x248>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d004      	beq.n	8005466 <HAL_TIM_IC_Start_IT+0x1f6>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a16      	ldr	r2, [pc, #88]	; (80054bc <HAL_TIM_IC_Start_IT+0x24c>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d111      	bne.n	800548a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f003 0307 	and.w	r3, r3, #7
 8005470:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2b06      	cmp	r3, #6
 8005476:	d010      	beq.n	800549a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f042 0201 	orr.w	r2, r2, #1
 8005486:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005488:	e007      	b.n	800549a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f042 0201 	orr.w	r2, r2, #1
 8005498:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800549a:	7bfb      	ldrb	r3, [r7, #15]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	40010000 	.word	0x40010000
 80054a8:	40000400 	.word	0x40000400
 80054ac:	40000800 	.word	0x40000800
 80054b0:	40000c00 	.word	0x40000c00
 80054b4:	40010400 	.word	0x40010400
 80054b8:	40014000 	.word	0x40014000
 80054bc:	40001800 	.word	0x40001800

080054c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d122      	bne.n	800551c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d11b      	bne.n	800551c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f06f 0202 	mvn.w	r2, #2
 80054ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	f003 0303 	and.w	r3, r3, #3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7fb fa08 	bl	8000918 <HAL_TIM_IC_CaptureCallback>
 8005508:	e005      	b.n	8005516 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 fb96 	bl	8005c3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 fb9d 	bl	8005c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	f003 0304 	and.w	r3, r3, #4
 8005526:	2b04      	cmp	r3, #4
 8005528:	d122      	bne.n	8005570 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f003 0304 	and.w	r3, r3, #4
 8005534:	2b04      	cmp	r3, #4
 8005536:	d11b      	bne.n	8005570 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f06f 0204 	mvn.w	r2, #4
 8005540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2202      	movs	r2, #2
 8005546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7fb f9de 	bl	8000918 <HAL_TIM_IC_CaptureCallback>
 800555c:	e005      	b.n	800556a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 fb6c 	bl	8005c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 fb73 	bl	8005c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	f003 0308 	and.w	r3, r3, #8
 800557a:	2b08      	cmp	r3, #8
 800557c:	d122      	bne.n	80055c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f003 0308 	and.w	r3, r3, #8
 8005588:	2b08      	cmp	r3, #8
 800558a:	d11b      	bne.n	80055c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f06f 0208 	mvn.w	r2, #8
 8005594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2204      	movs	r2, #4
 800559a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	f003 0303 	and.w	r3, r3, #3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7fb f9b4 	bl	8000918 <HAL_TIM_IC_CaptureCallback>
 80055b0:	e005      	b.n	80055be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 fb42 	bl	8005c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 fb49 	bl	8005c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	f003 0310 	and.w	r3, r3, #16
 80055ce:	2b10      	cmp	r3, #16
 80055d0:	d122      	bne.n	8005618 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f003 0310 	and.w	r3, r3, #16
 80055dc:	2b10      	cmp	r3, #16
 80055de:	d11b      	bne.n	8005618 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f06f 0210 	mvn.w	r2, #16
 80055e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2208      	movs	r2, #8
 80055ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7fb f98a 	bl	8000918 <HAL_TIM_IC_CaptureCallback>
 8005604:	e005      	b.n	8005612 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 fb18 	bl	8005c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 fb1f 	bl	8005c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b01      	cmp	r3, #1
 8005624:	d10e      	bne.n	8005644 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b01      	cmp	r3, #1
 8005632:	d107      	bne.n	8005644 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f06f 0201 	mvn.w	r2, #1
 800563c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 faf2 	bl	8005c28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800564e:	2b80      	cmp	r3, #128	; 0x80
 8005650:	d10e      	bne.n	8005670 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800565c:	2b80      	cmp	r3, #128	; 0x80
 800565e:	d107      	bne.n	8005670 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f001 f856 	bl	800671c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800567a:	2b40      	cmp	r3, #64	; 0x40
 800567c:	d10e      	bne.n	800569c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005688:	2b40      	cmp	r3, #64	; 0x40
 800568a:	d107      	bne.n	800569c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fae4 	bl	8005c64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	f003 0320 	and.w	r3, r3, #32
 80056a6:	2b20      	cmp	r3, #32
 80056a8:	d10e      	bne.n	80056c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f003 0320 	and.w	r3, r3, #32
 80056b4:	2b20      	cmp	r3, #32
 80056b6:	d107      	bne.n	80056c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f06f 0220 	mvn.w	r2, #32
 80056c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f001 f820 	bl	8006708 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056c8:	bf00      	nop
 80056ca:	3708      	adds	r7, #8
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056dc:	2300      	movs	r3, #0
 80056de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d101      	bne.n	80056ee <HAL_TIM_IC_ConfigChannel+0x1e>
 80056ea:	2302      	movs	r3, #2
 80056ec:	e088      	b.n	8005800 <HAL_TIM_IC_ConfigChannel+0x130>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d11b      	bne.n	8005734 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6818      	ldr	r0, [r3, #0]
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	6819      	ldr	r1, [r3, #0]
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f000 fd96 	bl	800623c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	699a      	ldr	r2, [r3, #24]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f022 020c 	bic.w	r2, r2, #12
 800571e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6999      	ldr	r1, [r3, #24]
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	689a      	ldr	r2, [r3, #8]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	430a      	orrs	r2, r1
 8005730:	619a      	str	r2, [r3, #24]
 8005732:	e060      	b.n	80057f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b04      	cmp	r3, #4
 8005738:	d11c      	bne.n	8005774 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6818      	ldr	r0, [r3, #0]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	6819      	ldr	r1, [r3, #0]
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	685a      	ldr	r2, [r3, #4]
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	f000 fe1a 	bl	8006382 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	699a      	ldr	r2, [r3, #24]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800575c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6999      	ldr	r1, [r3, #24]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	021a      	lsls	r2, r3, #8
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	430a      	orrs	r2, r1
 8005770:	619a      	str	r2, [r3, #24]
 8005772:	e040      	b.n	80057f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b08      	cmp	r3, #8
 8005778:	d11b      	bne.n	80057b2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6818      	ldr	r0, [r3, #0]
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	6819      	ldr	r1, [r3, #0]
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	f000 fe67 	bl	800645c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	69da      	ldr	r2, [r3, #28]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f022 020c 	bic.w	r2, r2, #12
 800579c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	69d9      	ldr	r1, [r3, #28]
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	689a      	ldr	r2, [r3, #8]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	430a      	orrs	r2, r1
 80057ae:	61da      	str	r2, [r3, #28]
 80057b0:	e021      	b.n	80057f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b0c      	cmp	r3, #12
 80057b6:	d11c      	bne.n	80057f2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6818      	ldr	r0, [r3, #0]
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	6819      	ldr	r1, [r3, #0]
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f000 fe84 	bl	80064d4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	69da      	ldr	r2, [r3, #28]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80057da:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	69d9      	ldr	r1, [r3, #28]
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	021a      	lsls	r2, r3, #8
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	430a      	orrs	r2, r1
 80057ee:	61da      	str	r2, [r3, #28]
 80057f0:	e001      	b.n	80057f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3718      	adds	r7, #24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005814:	2300      	movs	r3, #0
 8005816:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800581e:	2b01      	cmp	r3, #1
 8005820:	d101      	bne.n	8005826 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005822:	2302      	movs	r3, #2
 8005824:	e0ae      	b.n	8005984 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2b0c      	cmp	r3, #12
 8005832:	f200 809f 	bhi.w	8005974 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005836:	a201      	add	r2, pc, #4	; (adr r2, 800583c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583c:	08005871 	.word	0x08005871
 8005840:	08005975 	.word	0x08005975
 8005844:	08005975 	.word	0x08005975
 8005848:	08005975 	.word	0x08005975
 800584c:	080058b1 	.word	0x080058b1
 8005850:	08005975 	.word	0x08005975
 8005854:	08005975 	.word	0x08005975
 8005858:	08005975 	.word	0x08005975
 800585c:	080058f3 	.word	0x080058f3
 8005860:	08005975 	.word	0x08005975
 8005864:	08005975 	.word	0x08005975
 8005868:	08005975 	.word	0x08005975
 800586c:	08005933 	.word	0x08005933
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68b9      	ldr	r1, [r7, #8]
 8005876:	4618      	mov	r0, r3
 8005878:	f000 fa9e 	bl	8005db8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	699a      	ldr	r2, [r3, #24]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f042 0208 	orr.w	r2, r2, #8
 800588a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	699a      	ldr	r2, [r3, #24]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f022 0204 	bic.w	r2, r2, #4
 800589a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6999      	ldr	r1, [r3, #24]
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	691a      	ldr	r2, [r3, #16]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	619a      	str	r2, [r3, #24]
      break;
 80058ae:	e064      	b.n	800597a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68b9      	ldr	r1, [r7, #8]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 faee 	bl	8005e98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	699a      	ldr	r2, [r3, #24]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699a      	ldr	r2, [r3, #24]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6999      	ldr	r1, [r3, #24]
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	021a      	lsls	r2, r3, #8
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	430a      	orrs	r2, r1
 80058ee:	619a      	str	r2, [r3, #24]
      break;
 80058f0:	e043      	b.n	800597a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68b9      	ldr	r1, [r7, #8]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f000 fb43 	bl	8005f84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	69da      	ldr	r2, [r3, #28]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f042 0208 	orr.w	r2, r2, #8
 800590c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	69da      	ldr	r2, [r3, #28]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 0204 	bic.w	r2, r2, #4
 800591c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	69d9      	ldr	r1, [r3, #28]
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	691a      	ldr	r2, [r3, #16]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	430a      	orrs	r2, r1
 800592e:	61da      	str	r2, [r3, #28]
      break;
 8005930:	e023      	b.n	800597a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68b9      	ldr	r1, [r7, #8]
 8005938:	4618      	mov	r0, r3
 800593a:	f000 fb97 	bl	800606c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	69da      	ldr	r2, [r3, #28]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800594c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	69da      	ldr	r2, [r3, #28]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800595c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	69d9      	ldr	r1, [r3, #28]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	021a      	lsls	r2, r3, #8
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	61da      	str	r2, [r3, #28]
      break;
 8005972:	e002      	b.n	800597a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	75fb      	strb	r3, [r7, #23]
      break;
 8005978:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005982:	7dfb      	ldrb	r3, [r7, #23]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3718      	adds	r7, #24
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d101      	bne.n	80059a8 <HAL_TIM_ConfigClockSource+0x1c>
 80059a4:	2302      	movs	r3, #2
 80059a6:	e0b4      	b.n	8005b12 <HAL_TIM_ConfigClockSource+0x186>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2202      	movs	r2, #2
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059e0:	d03e      	beq.n	8005a60 <HAL_TIM_ConfigClockSource+0xd4>
 80059e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059e6:	f200 8087 	bhi.w	8005af8 <HAL_TIM_ConfigClockSource+0x16c>
 80059ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ee:	f000 8086 	beq.w	8005afe <HAL_TIM_ConfigClockSource+0x172>
 80059f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059f6:	d87f      	bhi.n	8005af8 <HAL_TIM_ConfigClockSource+0x16c>
 80059f8:	2b70      	cmp	r3, #112	; 0x70
 80059fa:	d01a      	beq.n	8005a32 <HAL_TIM_ConfigClockSource+0xa6>
 80059fc:	2b70      	cmp	r3, #112	; 0x70
 80059fe:	d87b      	bhi.n	8005af8 <HAL_TIM_ConfigClockSource+0x16c>
 8005a00:	2b60      	cmp	r3, #96	; 0x60
 8005a02:	d050      	beq.n	8005aa6 <HAL_TIM_ConfigClockSource+0x11a>
 8005a04:	2b60      	cmp	r3, #96	; 0x60
 8005a06:	d877      	bhi.n	8005af8 <HAL_TIM_ConfigClockSource+0x16c>
 8005a08:	2b50      	cmp	r3, #80	; 0x50
 8005a0a:	d03c      	beq.n	8005a86 <HAL_TIM_ConfigClockSource+0xfa>
 8005a0c:	2b50      	cmp	r3, #80	; 0x50
 8005a0e:	d873      	bhi.n	8005af8 <HAL_TIM_ConfigClockSource+0x16c>
 8005a10:	2b40      	cmp	r3, #64	; 0x40
 8005a12:	d058      	beq.n	8005ac6 <HAL_TIM_ConfigClockSource+0x13a>
 8005a14:	2b40      	cmp	r3, #64	; 0x40
 8005a16:	d86f      	bhi.n	8005af8 <HAL_TIM_ConfigClockSource+0x16c>
 8005a18:	2b30      	cmp	r3, #48	; 0x30
 8005a1a:	d064      	beq.n	8005ae6 <HAL_TIM_ConfigClockSource+0x15a>
 8005a1c:	2b30      	cmp	r3, #48	; 0x30
 8005a1e:	d86b      	bhi.n	8005af8 <HAL_TIM_ConfigClockSource+0x16c>
 8005a20:	2b20      	cmp	r3, #32
 8005a22:	d060      	beq.n	8005ae6 <HAL_TIM_ConfigClockSource+0x15a>
 8005a24:	2b20      	cmp	r3, #32
 8005a26:	d867      	bhi.n	8005af8 <HAL_TIM_ConfigClockSource+0x16c>
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d05c      	beq.n	8005ae6 <HAL_TIM_ConfigClockSource+0x15a>
 8005a2c:	2b10      	cmp	r3, #16
 8005a2e:	d05a      	beq.n	8005ae6 <HAL_TIM_ConfigClockSource+0x15a>
 8005a30:	e062      	b.n	8005af8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6818      	ldr	r0, [r3, #0]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	6899      	ldr	r1, [r3, #8]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	f000 fd9f 	bl	8006584 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	609a      	str	r2, [r3, #8]
      break;
 8005a5e:	e04f      	b.n	8005b00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6818      	ldr	r0, [r3, #0]
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	6899      	ldr	r1, [r3, #8]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	f000 fd88 	bl	8006584 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689a      	ldr	r2, [r3, #8]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a82:	609a      	str	r2, [r3, #8]
      break;
 8005a84:	e03c      	b.n	8005b00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6818      	ldr	r0, [r3, #0]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	6859      	ldr	r1, [r3, #4]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	461a      	mov	r2, r3
 8005a94:	f000 fc46 	bl	8006324 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2150      	movs	r1, #80	; 0x50
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f000 fd55 	bl	800654e <TIM_ITRx_SetConfig>
      break;
 8005aa4:	e02c      	b.n	8005b00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6818      	ldr	r0, [r3, #0]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	6859      	ldr	r1, [r3, #4]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	f000 fca2 	bl	80063fc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2160      	movs	r1, #96	; 0x60
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 fd45 	bl	800654e <TIM_ITRx_SetConfig>
      break;
 8005ac4:	e01c      	b.n	8005b00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6818      	ldr	r0, [r3, #0]
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	6859      	ldr	r1, [r3, #4]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	f000 fc26 	bl	8006324 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2140      	movs	r1, #64	; 0x40
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 fd35 	bl	800654e <TIM_ITRx_SetConfig>
      break;
 8005ae4:	e00c      	b.n	8005b00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4619      	mov	r1, r3
 8005af0:	4610      	mov	r0, r2
 8005af2:	f000 fd2c 	bl	800654e <TIM_ITRx_SetConfig>
      break;
 8005af6:	e003      	b.n	8005b00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	73fb      	strb	r3, [r7, #15]
      break;
 8005afc:	e000      	b.n	8005b00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005afe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b082      	sub	sp, #8
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
 8005b22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d101      	bne.n	8005b32 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005b2e:	2302      	movs	r3, #2
 8005b30:	e031      	b.n	8005b96 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2202      	movs	r2, #2
 8005b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005b42:	6839      	ldr	r1, [r7, #0]
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 fae7 	bl	8006118 <TIM_SlaveTimer_SetConfig>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d009      	beq.n	8005b64 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e018      	b.n	8005b96 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68da      	ldr	r2, [r3, #12]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b72:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68da      	ldr	r2, [r3, #12]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b82:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3708      	adds	r7, #8
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
	...

08005ba0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005baa:	2300      	movs	r3, #0
 8005bac:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b0c      	cmp	r3, #12
 8005bb2:	d831      	bhi.n	8005c18 <HAL_TIM_ReadCapturedValue+0x78>
 8005bb4:	a201      	add	r2, pc, #4	; (adr r2, 8005bbc <HAL_TIM_ReadCapturedValue+0x1c>)
 8005bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bba:	bf00      	nop
 8005bbc:	08005bf1 	.word	0x08005bf1
 8005bc0:	08005c19 	.word	0x08005c19
 8005bc4:	08005c19 	.word	0x08005c19
 8005bc8:	08005c19 	.word	0x08005c19
 8005bcc:	08005bfb 	.word	0x08005bfb
 8005bd0:	08005c19 	.word	0x08005c19
 8005bd4:	08005c19 	.word	0x08005c19
 8005bd8:	08005c19 	.word	0x08005c19
 8005bdc:	08005c05 	.word	0x08005c05
 8005be0:	08005c19 	.word	0x08005c19
 8005be4:	08005c19 	.word	0x08005c19
 8005be8:	08005c19 	.word	0x08005c19
 8005bec:	08005c0f 	.word	0x08005c0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf6:	60fb      	str	r3, [r7, #12]

      break;
 8005bf8:	e00f      	b.n	8005c1a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c00:	60fb      	str	r3, [r7, #12]

      break;
 8005c02:	e00a      	b.n	8005c1a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c0a:	60fb      	str	r3, [r7, #12]

      break;
 8005c0c:	e005      	b.n	8005c1a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c14:	60fb      	str	r3, [r7, #12]

      break;
 8005c16:	e000      	b.n	8005c1a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005c18:	bf00      	nop
  }

  return tmpreg;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3714      	adds	r7, #20
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a40      	ldr	r2, [pc, #256]	; (8005d8c <TIM_Base_SetConfig+0x114>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d013      	beq.n	8005cb8 <TIM_Base_SetConfig+0x40>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c96:	d00f      	beq.n	8005cb8 <TIM_Base_SetConfig+0x40>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a3d      	ldr	r2, [pc, #244]	; (8005d90 <TIM_Base_SetConfig+0x118>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d00b      	beq.n	8005cb8 <TIM_Base_SetConfig+0x40>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a3c      	ldr	r2, [pc, #240]	; (8005d94 <TIM_Base_SetConfig+0x11c>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d007      	beq.n	8005cb8 <TIM_Base_SetConfig+0x40>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a3b      	ldr	r2, [pc, #236]	; (8005d98 <TIM_Base_SetConfig+0x120>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d003      	beq.n	8005cb8 <TIM_Base_SetConfig+0x40>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a3a      	ldr	r2, [pc, #232]	; (8005d9c <TIM_Base_SetConfig+0x124>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d108      	bne.n	8005cca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a2f      	ldr	r2, [pc, #188]	; (8005d8c <TIM_Base_SetConfig+0x114>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d02b      	beq.n	8005d2a <TIM_Base_SetConfig+0xb2>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cd8:	d027      	beq.n	8005d2a <TIM_Base_SetConfig+0xb2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a2c      	ldr	r2, [pc, #176]	; (8005d90 <TIM_Base_SetConfig+0x118>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d023      	beq.n	8005d2a <TIM_Base_SetConfig+0xb2>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a2b      	ldr	r2, [pc, #172]	; (8005d94 <TIM_Base_SetConfig+0x11c>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d01f      	beq.n	8005d2a <TIM_Base_SetConfig+0xb2>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a2a      	ldr	r2, [pc, #168]	; (8005d98 <TIM_Base_SetConfig+0x120>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d01b      	beq.n	8005d2a <TIM_Base_SetConfig+0xb2>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a29      	ldr	r2, [pc, #164]	; (8005d9c <TIM_Base_SetConfig+0x124>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d017      	beq.n	8005d2a <TIM_Base_SetConfig+0xb2>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a28      	ldr	r2, [pc, #160]	; (8005da0 <TIM_Base_SetConfig+0x128>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d013      	beq.n	8005d2a <TIM_Base_SetConfig+0xb2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a27      	ldr	r2, [pc, #156]	; (8005da4 <TIM_Base_SetConfig+0x12c>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d00f      	beq.n	8005d2a <TIM_Base_SetConfig+0xb2>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a26      	ldr	r2, [pc, #152]	; (8005da8 <TIM_Base_SetConfig+0x130>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d00b      	beq.n	8005d2a <TIM_Base_SetConfig+0xb2>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a25      	ldr	r2, [pc, #148]	; (8005dac <TIM_Base_SetConfig+0x134>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d007      	beq.n	8005d2a <TIM_Base_SetConfig+0xb2>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a24      	ldr	r2, [pc, #144]	; (8005db0 <TIM_Base_SetConfig+0x138>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d003      	beq.n	8005d2a <TIM_Base_SetConfig+0xb2>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a23      	ldr	r2, [pc, #140]	; (8005db4 <TIM_Base_SetConfig+0x13c>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d108      	bne.n	8005d3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	689a      	ldr	r2, [r3, #8]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a0a      	ldr	r2, [pc, #40]	; (8005d8c <TIM_Base_SetConfig+0x114>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d003      	beq.n	8005d70 <TIM_Base_SetConfig+0xf8>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a0c      	ldr	r2, [pc, #48]	; (8005d9c <TIM_Base_SetConfig+0x124>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d103      	bne.n	8005d78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	691a      	ldr	r2, [r3, #16]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	615a      	str	r2, [r3, #20]
}
 8005d7e:	bf00      	nop
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	40010000 	.word	0x40010000
 8005d90:	40000400 	.word	0x40000400
 8005d94:	40000800 	.word	0x40000800
 8005d98:	40000c00 	.word	0x40000c00
 8005d9c:	40010400 	.word	0x40010400
 8005da0:	40014000 	.word	0x40014000
 8005da4:	40014400 	.word	0x40014400
 8005da8:	40014800 	.word	0x40014800
 8005dac:	40001800 	.word	0x40001800
 8005db0:	40001c00 	.word	0x40001c00
 8005db4:	40002000 	.word	0x40002000

08005db8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	f023 0201 	bic.w	r2, r3, #1
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f023 0303 	bic.w	r3, r3, #3
 8005dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f023 0302 	bic.w	r3, r3, #2
 8005e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a20      	ldr	r2, [pc, #128]	; (8005e90 <TIM_OC1_SetConfig+0xd8>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d003      	beq.n	8005e1c <TIM_OC1_SetConfig+0x64>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a1f      	ldr	r2, [pc, #124]	; (8005e94 <TIM_OC1_SetConfig+0xdc>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d10c      	bne.n	8005e36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f023 0308 	bic.w	r3, r3, #8
 8005e22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f023 0304 	bic.w	r3, r3, #4
 8005e34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a15      	ldr	r2, [pc, #84]	; (8005e90 <TIM_OC1_SetConfig+0xd8>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d003      	beq.n	8005e46 <TIM_OC1_SetConfig+0x8e>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a14      	ldr	r2, [pc, #80]	; (8005e94 <TIM_OC1_SetConfig+0xdc>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d111      	bne.n	8005e6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	685a      	ldr	r2, [r3, #4]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	621a      	str	r2, [r3, #32]
}
 8005e84:	bf00      	nop
 8005e86:	371c      	adds	r7, #28
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	40010000 	.word	0x40010000
 8005e94:	40010400 	.word	0x40010400

08005e98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b087      	sub	sp, #28
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	f023 0210 	bic.w	r2, r3, #16
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	021b      	lsls	r3, r3, #8
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f023 0320 	bic.w	r3, r3, #32
 8005ee2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	011b      	lsls	r3, r3, #4
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a22      	ldr	r2, [pc, #136]	; (8005f7c <TIM_OC2_SetConfig+0xe4>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d003      	beq.n	8005f00 <TIM_OC2_SetConfig+0x68>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a21      	ldr	r2, [pc, #132]	; (8005f80 <TIM_OC2_SetConfig+0xe8>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d10d      	bne.n	8005f1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	011b      	lsls	r3, r3, #4
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a17      	ldr	r2, [pc, #92]	; (8005f7c <TIM_OC2_SetConfig+0xe4>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d003      	beq.n	8005f2c <TIM_OC2_SetConfig+0x94>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a16      	ldr	r2, [pc, #88]	; (8005f80 <TIM_OC2_SetConfig+0xe8>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d113      	bne.n	8005f54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	695b      	ldr	r3, [r3, #20]
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	621a      	str	r2, [r3, #32]
}
 8005f6e:	bf00      	nop
 8005f70:	371c      	adds	r7, #28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	40010000 	.word	0x40010000
 8005f80:	40010400 	.word	0x40010400

08005f84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b087      	sub	sp, #28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	69db      	ldr	r3, [r3, #28]
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f023 0303 	bic.w	r3, r3, #3
 8005fba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	021b      	lsls	r3, r3, #8
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a21      	ldr	r2, [pc, #132]	; (8006064 <TIM_OC3_SetConfig+0xe0>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d003      	beq.n	8005fea <TIM_OC3_SetConfig+0x66>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a20      	ldr	r2, [pc, #128]	; (8006068 <TIM_OC3_SetConfig+0xe4>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d10d      	bne.n	8006006 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ff0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	021b      	lsls	r3, r3, #8
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006004:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a16      	ldr	r2, [pc, #88]	; (8006064 <TIM_OC3_SetConfig+0xe0>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d003      	beq.n	8006016 <TIM_OC3_SetConfig+0x92>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a15      	ldr	r2, [pc, #84]	; (8006068 <TIM_OC3_SetConfig+0xe4>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d113      	bne.n	800603e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800601c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006024:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	011b      	lsls	r3, r3, #4
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	4313      	orrs	r3, r2
 8006030:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	011b      	lsls	r3, r3, #4
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	4313      	orrs	r3, r2
 800603c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	685a      	ldr	r2, [r3, #4]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	621a      	str	r2, [r3, #32]
}
 8006058:	bf00      	nop
 800605a:	371c      	adds	r7, #28
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr
 8006064:	40010000 	.word	0x40010000
 8006068:	40010400 	.word	0x40010400

0800606c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800606c:	b480      	push	{r7}
 800606e:	b087      	sub	sp, #28
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800609a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	021b      	lsls	r3, r3, #8
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	031b      	lsls	r3, r3, #12
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a12      	ldr	r2, [pc, #72]	; (8006110 <TIM_OC4_SetConfig+0xa4>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d003      	beq.n	80060d4 <TIM_OC4_SetConfig+0x68>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a11      	ldr	r2, [pc, #68]	; (8006114 <TIM_OC4_SetConfig+0xa8>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d109      	bne.n	80060e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	019b      	lsls	r3, r3, #6
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	685a      	ldr	r2, [r3, #4]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	621a      	str	r2, [r3, #32]
}
 8006102:	bf00      	nop
 8006104:	371c      	adds	r7, #28
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	40010000 	.word	0x40010000
 8006114:	40010400 	.word	0x40010400

08006118 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006122:	2300      	movs	r3, #0
 8006124:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006134:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	4313      	orrs	r3, r2
 800613e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f023 0307 	bic.w	r3, r3, #7
 8006146:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	4313      	orrs	r3, r2
 8006150:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	2b70      	cmp	r3, #112	; 0x70
 8006160:	d01a      	beq.n	8006198 <TIM_SlaveTimer_SetConfig+0x80>
 8006162:	2b70      	cmp	r3, #112	; 0x70
 8006164:	d860      	bhi.n	8006228 <TIM_SlaveTimer_SetConfig+0x110>
 8006166:	2b60      	cmp	r3, #96	; 0x60
 8006168:	d054      	beq.n	8006214 <TIM_SlaveTimer_SetConfig+0xfc>
 800616a:	2b60      	cmp	r3, #96	; 0x60
 800616c:	d85c      	bhi.n	8006228 <TIM_SlaveTimer_SetConfig+0x110>
 800616e:	2b50      	cmp	r3, #80	; 0x50
 8006170:	d046      	beq.n	8006200 <TIM_SlaveTimer_SetConfig+0xe8>
 8006172:	2b50      	cmp	r3, #80	; 0x50
 8006174:	d858      	bhi.n	8006228 <TIM_SlaveTimer_SetConfig+0x110>
 8006176:	2b40      	cmp	r3, #64	; 0x40
 8006178:	d019      	beq.n	80061ae <TIM_SlaveTimer_SetConfig+0x96>
 800617a:	2b40      	cmp	r3, #64	; 0x40
 800617c:	d854      	bhi.n	8006228 <TIM_SlaveTimer_SetConfig+0x110>
 800617e:	2b30      	cmp	r3, #48	; 0x30
 8006180:	d055      	beq.n	800622e <TIM_SlaveTimer_SetConfig+0x116>
 8006182:	2b30      	cmp	r3, #48	; 0x30
 8006184:	d850      	bhi.n	8006228 <TIM_SlaveTimer_SetConfig+0x110>
 8006186:	2b20      	cmp	r3, #32
 8006188:	d051      	beq.n	800622e <TIM_SlaveTimer_SetConfig+0x116>
 800618a:	2b20      	cmp	r3, #32
 800618c:	d84c      	bhi.n	8006228 <TIM_SlaveTimer_SetConfig+0x110>
 800618e:	2b00      	cmp	r3, #0
 8006190:	d04d      	beq.n	800622e <TIM_SlaveTimer_SetConfig+0x116>
 8006192:	2b10      	cmp	r3, #16
 8006194:	d04b      	beq.n	800622e <TIM_SlaveTimer_SetConfig+0x116>
 8006196:	e047      	b.n	8006228 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6818      	ldr	r0, [r3, #0]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	68d9      	ldr	r1, [r3, #12]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	689a      	ldr	r2, [r3, #8]
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	f000 f9ec 	bl	8006584 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80061ac:	e040      	b.n	8006230 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b05      	cmp	r3, #5
 80061b4:	d101      	bne.n	80061ba <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e03b      	b.n	8006232 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6a1a      	ldr	r2, [r3, #32]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f022 0201 	bic.w	r2, r2, #1
 80061d0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061e0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	011b      	lsls	r3, r3, #4
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	621a      	str	r2, [r3, #32]
      break;
 80061fe:	e017      	b.n	8006230 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6818      	ldr	r0, [r3, #0]
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	6899      	ldr	r1, [r3, #8]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	461a      	mov	r2, r3
 800620e:	f000 f889 	bl	8006324 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006212:	e00d      	b.n	8006230 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6818      	ldr	r0, [r3, #0]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	6899      	ldr	r1, [r3, #8]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	461a      	mov	r2, r3
 8006222:	f000 f8eb 	bl	80063fc <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006226:	e003      	b.n	8006230 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	75fb      	strb	r3, [r7, #23]
      break;
 800622c:	e000      	b.n	8006230 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800622e:	bf00      	nop
  }

  return status;
 8006230:	7dfb      	ldrb	r3, [r7, #23]
}
 8006232:	4618      	mov	r0, r3
 8006234:	3718      	adds	r7, #24
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
	...

0800623c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
 8006248:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6a1b      	ldr	r3, [r3, #32]
 800624e:	f023 0201 	bic.w	r2, r3, #1
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	4a28      	ldr	r2, [pc, #160]	; (8006308 <TIM_TI1_SetConfig+0xcc>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d01b      	beq.n	80062a2 <TIM_TI1_SetConfig+0x66>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006270:	d017      	beq.n	80062a2 <TIM_TI1_SetConfig+0x66>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	4a25      	ldr	r2, [pc, #148]	; (800630c <TIM_TI1_SetConfig+0xd0>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d013      	beq.n	80062a2 <TIM_TI1_SetConfig+0x66>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	4a24      	ldr	r2, [pc, #144]	; (8006310 <TIM_TI1_SetConfig+0xd4>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d00f      	beq.n	80062a2 <TIM_TI1_SetConfig+0x66>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	4a23      	ldr	r2, [pc, #140]	; (8006314 <TIM_TI1_SetConfig+0xd8>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d00b      	beq.n	80062a2 <TIM_TI1_SetConfig+0x66>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	4a22      	ldr	r2, [pc, #136]	; (8006318 <TIM_TI1_SetConfig+0xdc>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d007      	beq.n	80062a2 <TIM_TI1_SetConfig+0x66>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	4a21      	ldr	r2, [pc, #132]	; (800631c <TIM_TI1_SetConfig+0xe0>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d003      	beq.n	80062a2 <TIM_TI1_SetConfig+0x66>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	4a20      	ldr	r2, [pc, #128]	; (8006320 <TIM_TI1_SetConfig+0xe4>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d101      	bne.n	80062a6 <TIM_TI1_SetConfig+0x6a>
 80062a2:	2301      	movs	r3, #1
 80062a4:	e000      	b.n	80062a8 <TIM_TI1_SetConfig+0x6c>
 80062a6:	2300      	movs	r3, #0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d008      	beq.n	80062be <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	f023 0303 	bic.w	r3, r3, #3
 80062b2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	617b      	str	r3, [r7, #20]
 80062bc:	e003      	b.n	80062c6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f043 0301 	orr.w	r3, r3, #1
 80062c4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	011b      	lsls	r3, r3, #4
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	f023 030a 	bic.w	r3, r3, #10
 80062e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	f003 030a 	and.w	r3, r3, #10
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	621a      	str	r2, [r3, #32]
}
 80062fa:	bf00      	nop
 80062fc:	371c      	adds	r7, #28
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	40010000 	.word	0x40010000
 800630c:	40000400 	.word	0x40000400
 8006310:	40000800 	.word	0x40000800
 8006314:	40000c00 	.word	0x40000c00
 8006318:	40010400 	.word	0x40010400
 800631c:	40014000 	.word	0x40014000
 8006320:	40001800 	.word	0x40001800

08006324 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006324:	b480      	push	{r7}
 8006326:	b087      	sub	sp, #28
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6a1b      	ldr	r3, [r3, #32]
 8006334:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	f023 0201 	bic.w	r2, r3, #1
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800634e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	011b      	lsls	r3, r3, #4
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	4313      	orrs	r3, r2
 8006358:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f023 030a 	bic.w	r3, r3, #10
 8006360:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	4313      	orrs	r3, r2
 8006368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	621a      	str	r2, [r3, #32]
}
 8006376:	bf00      	nop
 8006378:	371c      	adds	r7, #28
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006382:	b480      	push	{r7}
 8006384:	b087      	sub	sp, #28
 8006386:	af00      	add	r7, sp, #0
 8006388:	60f8      	str	r0, [r7, #12]
 800638a:	60b9      	str	r1, [r7, #8]
 800638c:	607a      	str	r2, [r7, #4]
 800638e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6a1b      	ldr	r3, [r3, #32]
 8006394:	f023 0210 	bic.w	r2, r3, #16
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	699b      	ldr	r3, [r3, #24]
 80063a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	021b      	lsls	r3, r3, #8
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	031b      	lsls	r3, r3, #12
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063d4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	011b      	lsls	r3, r3, #4
 80063da:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	621a      	str	r2, [r3, #32]
}
 80063f0:	bf00      	nop
 80063f2:	371c      	adds	r7, #28
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b087      	sub	sp, #28
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6a1b      	ldr	r3, [r3, #32]
 800640c:	f023 0210 	bic.w	r2, r3, #16
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006426:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	031b      	lsls	r3, r3, #12
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	4313      	orrs	r3, r2
 8006430:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006438:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	011b      	lsls	r3, r3, #4
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	4313      	orrs	r3, r2
 8006442:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	621a      	str	r2, [r3, #32]
}
 8006450:	bf00      	nop
 8006452:	371c      	adds	r7, #28
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800645c:	b480      	push	{r7}
 800645e:	b087      	sub	sp, #28
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
 8006468:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6a1b      	ldr	r3, [r3, #32]
 8006480:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	f023 0303 	bic.w	r3, r3, #3
 8006488:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4313      	orrs	r3, r2
 8006490:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006498:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	011b      	lsls	r3, r3, #4
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80064ac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	021b      	lsls	r3, r3, #8
 80064b2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	621a      	str	r2, [r3, #32]
}
 80064c8:	bf00      	nop
 80064ca:	371c      	adds	r7, #28
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b087      	sub	sp, #28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
 80064e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6a1b      	ldr	r3, [r3, #32]
 80064e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	69db      	ldr	r3, [r3, #28]
 80064f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6a1b      	ldr	r3, [r3, #32]
 80064f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006500:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	021b      	lsls	r3, r3, #8
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	4313      	orrs	r3, r2
 800650a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006512:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	031b      	lsls	r3, r3, #12
 8006518:	b29b      	uxth	r3, r3
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	4313      	orrs	r3, r2
 800651e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006526:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	031b      	lsls	r3, r3, #12
 800652c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	4313      	orrs	r3, r2
 8006534:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	621a      	str	r2, [r3, #32]
}
 8006542:	bf00      	nop
 8006544:	371c      	adds	r7, #28
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800654e:	b480      	push	{r7}
 8006550:	b085      	sub	sp, #20
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
 8006556:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006564:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	4313      	orrs	r3, r2
 800656c:	f043 0307 	orr.w	r3, r3, #7
 8006570:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	609a      	str	r2, [r3, #8]
}
 8006578:	bf00      	nop
 800657a:	3714      	adds	r7, #20
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006584:	b480      	push	{r7}
 8006586:	b087      	sub	sp, #28
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
 8006590:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800659e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	021a      	lsls	r2, r3, #8
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	431a      	orrs	r2, r3
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	609a      	str	r2, [r3, #8]
}
 80065b8:	bf00      	nop
 80065ba:	371c      	adds	r7, #28
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b087      	sub	sp, #28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	f003 031f 	and.w	r3, r3, #31
 80065d6:	2201      	movs	r2, #1
 80065d8:	fa02 f303 	lsl.w	r3, r2, r3
 80065dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6a1a      	ldr	r2, [r3, #32]
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	43db      	mvns	r3, r3
 80065e6:	401a      	ands	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6a1a      	ldr	r2, [r3, #32]
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	f003 031f 	and.w	r3, r3, #31
 80065f6:	6879      	ldr	r1, [r7, #4]
 80065f8:	fa01 f303 	lsl.w	r3, r1, r3
 80065fc:	431a      	orrs	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	621a      	str	r2, [r3, #32]
}
 8006602:	bf00      	nop
 8006604:	371c      	adds	r7, #28
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
	...

08006610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006620:	2b01      	cmp	r3, #1
 8006622:	d101      	bne.n	8006628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006624:	2302      	movs	r3, #2
 8006626:	e05a      	b.n	80066de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2202      	movs	r2, #2
 8006634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800664e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	4313      	orrs	r3, r2
 8006658:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a21      	ldr	r2, [pc, #132]	; (80066ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d022      	beq.n	80066b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006674:	d01d      	beq.n	80066b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a1d      	ldr	r2, [pc, #116]	; (80066f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d018      	beq.n	80066b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a1b      	ldr	r2, [pc, #108]	; (80066f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d013      	beq.n	80066b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a1a      	ldr	r2, [pc, #104]	; (80066f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d00e      	beq.n	80066b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a18      	ldr	r2, [pc, #96]	; (80066fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d009      	beq.n	80066b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a17      	ldr	r2, [pc, #92]	; (8006700 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d004      	beq.n	80066b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a15      	ldr	r2, [pc, #84]	; (8006704 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d10c      	bne.n	80066cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3714      	adds	r7, #20
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	40010000 	.word	0x40010000
 80066f0:	40000400 	.word	0x40000400
 80066f4:	40000800 	.word	0x40000800
 80066f8:	40000c00 	.word	0x40000c00
 80066fc:	40010400 	.word	0x40010400
 8006700:	40014000 	.word	0x40014000
 8006704:	40001800 	.word	0x40001800

08006708 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e03f      	b.n	80067c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b00      	cmp	r3, #0
 800674c:	d106      	bne.n	800675c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f7fb fe1e 	bl	8002398 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2224      	movs	r2, #36	; 0x24
 8006760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68da      	ldr	r2, [r3, #12]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006772:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 f829 	bl	80067cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	691a      	ldr	r2, [r3, #16]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006788:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	695a      	ldr	r2, [r3, #20]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006798:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68da      	ldr	r2, [r3, #12]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2220      	movs	r2, #32
 80067b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2220      	movs	r2, #32
 80067bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
	...

080067cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067d0:	b0c0      	sub	sp, #256	; 0x100
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80067e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e8:	68d9      	ldr	r1, [r3, #12]
 80067ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	ea40 0301 	orr.w	r3, r0, r1
 80067f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067fa:	689a      	ldr	r2, [r3, #8]
 80067fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	431a      	orrs	r2, r3
 8006804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	431a      	orrs	r2, r3
 800680c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006810:	69db      	ldr	r3, [r3, #28]
 8006812:	4313      	orrs	r3, r2
 8006814:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006824:	f021 010c 	bic.w	r1, r1, #12
 8006828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006832:	430b      	orrs	r3, r1
 8006834:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006846:	6999      	ldr	r1, [r3, #24]
 8006848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	ea40 0301 	orr.w	r3, r0, r1
 8006852:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	4b8f      	ldr	r3, [pc, #572]	; (8006a98 <UART_SetConfig+0x2cc>)
 800685c:	429a      	cmp	r2, r3
 800685e:	d005      	beq.n	800686c <UART_SetConfig+0xa0>
 8006860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	4b8d      	ldr	r3, [pc, #564]	; (8006a9c <UART_SetConfig+0x2d0>)
 8006868:	429a      	cmp	r2, r3
 800686a:	d104      	bne.n	8006876 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800686c:	f7fc ff86 	bl	800377c <HAL_RCC_GetPCLK2Freq>
 8006870:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006874:	e003      	b.n	800687e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006876:	f7fc ff6d 	bl	8003754 <HAL_RCC_GetPCLK1Freq>
 800687a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800687e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006882:	69db      	ldr	r3, [r3, #28]
 8006884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006888:	f040 810c 	bne.w	8006aa4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800688c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006890:	2200      	movs	r2, #0
 8006892:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006896:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800689a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800689e:	4622      	mov	r2, r4
 80068a0:	462b      	mov	r3, r5
 80068a2:	1891      	adds	r1, r2, r2
 80068a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80068a6:	415b      	adcs	r3, r3
 80068a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80068ae:	4621      	mov	r1, r4
 80068b0:	eb12 0801 	adds.w	r8, r2, r1
 80068b4:	4629      	mov	r1, r5
 80068b6:	eb43 0901 	adc.w	r9, r3, r1
 80068ba:	f04f 0200 	mov.w	r2, #0
 80068be:	f04f 0300 	mov.w	r3, #0
 80068c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068ce:	4690      	mov	r8, r2
 80068d0:	4699      	mov	r9, r3
 80068d2:	4623      	mov	r3, r4
 80068d4:	eb18 0303 	adds.w	r3, r8, r3
 80068d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80068dc:	462b      	mov	r3, r5
 80068de:	eb49 0303 	adc.w	r3, r9, r3
 80068e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80068f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80068f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80068fa:	460b      	mov	r3, r1
 80068fc:	18db      	adds	r3, r3, r3
 80068fe:	653b      	str	r3, [r7, #80]	; 0x50
 8006900:	4613      	mov	r3, r2
 8006902:	eb42 0303 	adc.w	r3, r2, r3
 8006906:	657b      	str	r3, [r7, #84]	; 0x54
 8006908:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800690c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006910:	f7f9 fe84 	bl	800061c <__aeabi_uldivmod>
 8006914:	4602      	mov	r2, r0
 8006916:	460b      	mov	r3, r1
 8006918:	4b61      	ldr	r3, [pc, #388]	; (8006aa0 <UART_SetConfig+0x2d4>)
 800691a:	fba3 2302 	umull	r2, r3, r3, r2
 800691e:	095b      	lsrs	r3, r3, #5
 8006920:	011c      	lsls	r4, r3, #4
 8006922:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006926:	2200      	movs	r2, #0
 8006928:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800692c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006930:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006934:	4642      	mov	r2, r8
 8006936:	464b      	mov	r3, r9
 8006938:	1891      	adds	r1, r2, r2
 800693a:	64b9      	str	r1, [r7, #72]	; 0x48
 800693c:	415b      	adcs	r3, r3
 800693e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006940:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006944:	4641      	mov	r1, r8
 8006946:	eb12 0a01 	adds.w	sl, r2, r1
 800694a:	4649      	mov	r1, r9
 800694c:	eb43 0b01 	adc.w	fp, r3, r1
 8006950:	f04f 0200 	mov.w	r2, #0
 8006954:	f04f 0300 	mov.w	r3, #0
 8006958:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800695c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006960:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006964:	4692      	mov	sl, r2
 8006966:	469b      	mov	fp, r3
 8006968:	4643      	mov	r3, r8
 800696a:	eb1a 0303 	adds.w	r3, sl, r3
 800696e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006972:	464b      	mov	r3, r9
 8006974:	eb4b 0303 	adc.w	r3, fp, r3
 8006978:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800697c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006988:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800698c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006990:	460b      	mov	r3, r1
 8006992:	18db      	adds	r3, r3, r3
 8006994:	643b      	str	r3, [r7, #64]	; 0x40
 8006996:	4613      	mov	r3, r2
 8006998:	eb42 0303 	adc.w	r3, r2, r3
 800699c:	647b      	str	r3, [r7, #68]	; 0x44
 800699e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80069a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80069a6:	f7f9 fe39 	bl	800061c <__aeabi_uldivmod>
 80069aa:	4602      	mov	r2, r0
 80069ac:	460b      	mov	r3, r1
 80069ae:	4611      	mov	r1, r2
 80069b0:	4b3b      	ldr	r3, [pc, #236]	; (8006aa0 <UART_SetConfig+0x2d4>)
 80069b2:	fba3 2301 	umull	r2, r3, r3, r1
 80069b6:	095b      	lsrs	r3, r3, #5
 80069b8:	2264      	movs	r2, #100	; 0x64
 80069ba:	fb02 f303 	mul.w	r3, r2, r3
 80069be:	1acb      	subs	r3, r1, r3
 80069c0:	00db      	lsls	r3, r3, #3
 80069c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80069c6:	4b36      	ldr	r3, [pc, #216]	; (8006aa0 <UART_SetConfig+0x2d4>)
 80069c8:	fba3 2302 	umull	r2, r3, r3, r2
 80069cc:	095b      	lsrs	r3, r3, #5
 80069ce:	005b      	lsls	r3, r3, #1
 80069d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069d4:	441c      	add	r4, r3
 80069d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069da:	2200      	movs	r2, #0
 80069dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80069e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80069e8:	4642      	mov	r2, r8
 80069ea:	464b      	mov	r3, r9
 80069ec:	1891      	adds	r1, r2, r2
 80069ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80069f0:	415b      	adcs	r3, r3
 80069f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80069f8:	4641      	mov	r1, r8
 80069fa:	1851      	adds	r1, r2, r1
 80069fc:	6339      	str	r1, [r7, #48]	; 0x30
 80069fe:	4649      	mov	r1, r9
 8006a00:	414b      	adcs	r3, r1
 8006a02:	637b      	str	r3, [r7, #52]	; 0x34
 8006a04:	f04f 0200 	mov.w	r2, #0
 8006a08:	f04f 0300 	mov.w	r3, #0
 8006a0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006a10:	4659      	mov	r1, fp
 8006a12:	00cb      	lsls	r3, r1, #3
 8006a14:	4651      	mov	r1, sl
 8006a16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a1a:	4651      	mov	r1, sl
 8006a1c:	00ca      	lsls	r2, r1, #3
 8006a1e:	4610      	mov	r0, r2
 8006a20:	4619      	mov	r1, r3
 8006a22:	4603      	mov	r3, r0
 8006a24:	4642      	mov	r2, r8
 8006a26:	189b      	adds	r3, r3, r2
 8006a28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a2c:	464b      	mov	r3, r9
 8006a2e:	460a      	mov	r2, r1
 8006a30:	eb42 0303 	adc.w	r3, r2, r3
 8006a34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006a48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	18db      	adds	r3, r3, r3
 8006a50:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a52:	4613      	mov	r3, r2
 8006a54:	eb42 0303 	adc.w	r3, r2, r3
 8006a58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006a62:	f7f9 fddb 	bl	800061c <__aeabi_uldivmod>
 8006a66:	4602      	mov	r2, r0
 8006a68:	460b      	mov	r3, r1
 8006a6a:	4b0d      	ldr	r3, [pc, #52]	; (8006aa0 <UART_SetConfig+0x2d4>)
 8006a6c:	fba3 1302 	umull	r1, r3, r3, r2
 8006a70:	095b      	lsrs	r3, r3, #5
 8006a72:	2164      	movs	r1, #100	; 0x64
 8006a74:	fb01 f303 	mul.w	r3, r1, r3
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	00db      	lsls	r3, r3, #3
 8006a7c:	3332      	adds	r3, #50	; 0x32
 8006a7e:	4a08      	ldr	r2, [pc, #32]	; (8006aa0 <UART_SetConfig+0x2d4>)
 8006a80:	fba2 2303 	umull	r2, r3, r2, r3
 8006a84:	095b      	lsrs	r3, r3, #5
 8006a86:	f003 0207 	and.w	r2, r3, #7
 8006a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4422      	add	r2, r4
 8006a92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a94:	e106      	b.n	8006ca4 <UART_SetConfig+0x4d8>
 8006a96:	bf00      	nop
 8006a98:	40011000 	.word	0x40011000
 8006a9c:	40011400 	.word	0x40011400
 8006aa0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006aa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006aae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006ab2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006ab6:	4642      	mov	r2, r8
 8006ab8:	464b      	mov	r3, r9
 8006aba:	1891      	adds	r1, r2, r2
 8006abc:	6239      	str	r1, [r7, #32]
 8006abe:	415b      	adcs	r3, r3
 8006ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ac2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ac6:	4641      	mov	r1, r8
 8006ac8:	1854      	adds	r4, r2, r1
 8006aca:	4649      	mov	r1, r9
 8006acc:	eb43 0501 	adc.w	r5, r3, r1
 8006ad0:	f04f 0200 	mov.w	r2, #0
 8006ad4:	f04f 0300 	mov.w	r3, #0
 8006ad8:	00eb      	lsls	r3, r5, #3
 8006ada:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ade:	00e2      	lsls	r2, r4, #3
 8006ae0:	4614      	mov	r4, r2
 8006ae2:	461d      	mov	r5, r3
 8006ae4:	4643      	mov	r3, r8
 8006ae6:	18e3      	adds	r3, r4, r3
 8006ae8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006aec:	464b      	mov	r3, r9
 8006aee:	eb45 0303 	adc.w	r3, r5, r3
 8006af2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b06:	f04f 0200 	mov.w	r2, #0
 8006b0a:	f04f 0300 	mov.w	r3, #0
 8006b0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006b12:	4629      	mov	r1, r5
 8006b14:	008b      	lsls	r3, r1, #2
 8006b16:	4621      	mov	r1, r4
 8006b18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b1c:	4621      	mov	r1, r4
 8006b1e:	008a      	lsls	r2, r1, #2
 8006b20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006b24:	f7f9 fd7a 	bl	800061c <__aeabi_uldivmod>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	4b60      	ldr	r3, [pc, #384]	; (8006cb0 <UART_SetConfig+0x4e4>)
 8006b2e:	fba3 2302 	umull	r2, r3, r3, r2
 8006b32:	095b      	lsrs	r3, r3, #5
 8006b34:	011c      	lsls	r4, r3, #4
 8006b36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006b44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006b48:	4642      	mov	r2, r8
 8006b4a:	464b      	mov	r3, r9
 8006b4c:	1891      	adds	r1, r2, r2
 8006b4e:	61b9      	str	r1, [r7, #24]
 8006b50:	415b      	adcs	r3, r3
 8006b52:	61fb      	str	r3, [r7, #28]
 8006b54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b58:	4641      	mov	r1, r8
 8006b5a:	1851      	adds	r1, r2, r1
 8006b5c:	6139      	str	r1, [r7, #16]
 8006b5e:	4649      	mov	r1, r9
 8006b60:	414b      	adcs	r3, r1
 8006b62:	617b      	str	r3, [r7, #20]
 8006b64:	f04f 0200 	mov.w	r2, #0
 8006b68:	f04f 0300 	mov.w	r3, #0
 8006b6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b70:	4659      	mov	r1, fp
 8006b72:	00cb      	lsls	r3, r1, #3
 8006b74:	4651      	mov	r1, sl
 8006b76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b7a:	4651      	mov	r1, sl
 8006b7c:	00ca      	lsls	r2, r1, #3
 8006b7e:	4610      	mov	r0, r2
 8006b80:	4619      	mov	r1, r3
 8006b82:	4603      	mov	r3, r0
 8006b84:	4642      	mov	r2, r8
 8006b86:	189b      	adds	r3, r3, r2
 8006b88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b8c:	464b      	mov	r3, r9
 8006b8e:	460a      	mov	r2, r1
 8006b90:	eb42 0303 	adc.w	r3, r2, r3
 8006b94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ba2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006ba4:	f04f 0200 	mov.w	r2, #0
 8006ba8:	f04f 0300 	mov.w	r3, #0
 8006bac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006bb0:	4649      	mov	r1, r9
 8006bb2:	008b      	lsls	r3, r1, #2
 8006bb4:	4641      	mov	r1, r8
 8006bb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bba:	4641      	mov	r1, r8
 8006bbc:	008a      	lsls	r2, r1, #2
 8006bbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006bc2:	f7f9 fd2b 	bl	800061c <__aeabi_uldivmod>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	460b      	mov	r3, r1
 8006bca:	4611      	mov	r1, r2
 8006bcc:	4b38      	ldr	r3, [pc, #224]	; (8006cb0 <UART_SetConfig+0x4e4>)
 8006bce:	fba3 2301 	umull	r2, r3, r3, r1
 8006bd2:	095b      	lsrs	r3, r3, #5
 8006bd4:	2264      	movs	r2, #100	; 0x64
 8006bd6:	fb02 f303 	mul.w	r3, r2, r3
 8006bda:	1acb      	subs	r3, r1, r3
 8006bdc:	011b      	lsls	r3, r3, #4
 8006bde:	3332      	adds	r3, #50	; 0x32
 8006be0:	4a33      	ldr	r2, [pc, #204]	; (8006cb0 <UART_SetConfig+0x4e4>)
 8006be2:	fba2 2303 	umull	r2, r3, r2, r3
 8006be6:	095b      	lsrs	r3, r3, #5
 8006be8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bec:	441c      	add	r4, r3
 8006bee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	673b      	str	r3, [r7, #112]	; 0x70
 8006bf6:	677a      	str	r2, [r7, #116]	; 0x74
 8006bf8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006bfc:	4642      	mov	r2, r8
 8006bfe:	464b      	mov	r3, r9
 8006c00:	1891      	adds	r1, r2, r2
 8006c02:	60b9      	str	r1, [r7, #8]
 8006c04:	415b      	adcs	r3, r3
 8006c06:	60fb      	str	r3, [r7, #12]
 8006c08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c0c:	4641      	mov	r1, r8
 8006c0e:	1851      	adds	r1, r2, r1
 8006c10:	6039      	str	r1, [r7, #0]
 8006c12:	4649      	mov	r1, r9
 8006c14:	414b      	adcs	r3, r1
 8006c16:	607b      	str	r3, [r7, #4]
 8006c18:	f04f 0200 	mov.w	r2, #0
 8006c1c:	f04f 0300 	mov.w	r3, #0
 8006c20:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c24:	4659      	mov	r1, fp
 8006c26:	00cb      	lsls	r3, r1, #3
 8006c28:	4651      	mov	r1, sl
 8006c2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c2e:	4651      	mov	r1, sl
 8006c30:	00ca      	lsls	r2, r1, #3
 8006c32:	4610      	mov	r0, r2
 8006c34:	4619      	mov	r1, r3
 8006c36:	4603      	mov	r3, r0
 8006c38:	4642      	mov	r2, r8
 8006c3a:	189b      	adds	r3, r3, r2
 8006c3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c3e:	464b      	mov	r3, r9
 8006c40:	460a      	mov	r2, r1
 8006c42:	eb42 0303 	adc.w	r3, r2, r3
 8006c46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	663b      	str	r3, [r7, #96]	; 0x60
 8006c52:	667a      	str	r2, [r7, #100]	; 0x64
 8006c54:	f04f 0200 	mov.w	r2, #0
 8006c58:	f04f 0300 	mov.w	r3, #0
 8006c5c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006c60:	4649      	mov	r1, r9
 8006c62:	008b      	lsls	r3, r1, #2
 8006c64:	4641      	mov	r1, r8
 8006c66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c6a:	4641      	mov	r1, r8
 8006c6c:	008a      	lsls	r2, r1, #2
 8006c6e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006c72:	f7f9 fcd3 	bl	800061c <__aeabi_uldivmod>
 8006c76:	4602      	mov	r2, r0
 8006c78:	460b      	mov	r3, r1
 8006c7a:	4b0d      	ldr	r3, [pc, #52]	; (8006cb0 <UART_SetConfig+0x4e4>)
 8006c7c:	fba3 1302 	umull	r1, r3, r3, r2
 8006c80:	095b      	lsrs	r3, r3, #5
 8006c82:	2164      	movs	r1, #100	; 0x64
 8006c84:	fb01 f303 	mul.w	r3, r1, r3
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	011b      	lsls	r3, r3, #4
 8006c8c:	3332      	adds	r3, #50	; 0x32
 8006c8e:	4a08      	ldr	r2, [pc, #32]	; (8006cb0 <UART_SetConfig+0x4e4>)
 8006c90:	fba2 2303 	umull	r2, r3, r2, r3
 8006c94:	095b      	lsrs	r3, r3, #5
 8006c96:	f003 020f 	and.w	r2, r3, #15
 8006c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4422      	add	r2, r4
 8006ca2:	609a      	str	r2, [r3, #8]
}
 8006ca4:	bf00      	nop
 8006ca6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006caa:	46bd      	mov	sp, r7
 8006cac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cb0:	51eb851f 	.word	0x51eb851f

08006cb4 <memset>:
 8006cb4:	4402      	add	r2, r0
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d100      	bne.n	8006cbe <memset+0xa>
 8006cbc:	4770      	bx	lr
 8006cbe:	f803 1b01 	strb.w	r1, [r3], #1
 8006cc2:	e7f9      	b.n	8006cb8 <memset+0x4>

08006cc4 <__libc_init_array>:
 8006cc4:	b570      	push	{r4, r5, r6, lr}
 8006cc6:	4d0d      	ldr	r5, [pc, #52]	; (8006cfc <__libc_init_array+0x38>)
 8006cc8:	4c0d      	ldr	r4, [pc, #52]	; (8006d00 <__libc_init_array+0x3c>)
 8006cca:	1b64      	subs	r4, r4, r5
 8006ccc:	10a4      	asrs	r4, r4, #2
 8006cce:	2600      	movs	r6, #0
 8006cd0:	42a6      	cmp	r6, r4
 8006cd2:	d109      	bne.n	8006ce8 <__libc_init_array+0x24>
 8006cd4:	4d0b      	ldr	r5, [pc, #44]	; (8006d04 <__libc_init_array+0x40>)
 8006cd6:	4c0c      	ldr	r4, [pc, #48]	; (8006d08 <__libc_init_array+0x44>)
 8006cd8:	f000 f818 	bl	8006d0c <_init>
 8006cdc:	1b64      	subs	r4, r4, r5
 8006cde:	10a4      	asrs	r4, r4, #2
 8006ce0:	2600      	movs	r6, #0
 8006ce2:	42a6      	cmp	r6, r4
 8006ce4:	d105      	bne.n	8006cf2 <__libc_init_array+0x2e>
 8006ce6:	bd70      	pop	{r4, r5, r6, pc}
 8006ce8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cec:	4798      	blx	r3
 8006cee:	3601      	adds	r6, #1
 8006cf0:	e7ee      	b.n	8006cd0 <__libc_init_array+0xc>
 8006cf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cf6:	4798      	blx	r3
 8006cf8:	3601      	adds	r6, #1
 8006cfa:	e7f2      	b.n	8006ce2 <__libc_init_array+0x1e>
 8006cfc:	08006d44 	.word	0x08006d44
 8006d00:	08006d44 	.word	0x08006d44
 8006d04:	08006d44 	.word	0x08006d44
 8006d08:	08006d48 	.word	0x08006d48

08006d0c <_init>:
 8006d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0e:	bf00      	nop
 8006d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d12:	bc08      	pop	{r3}
 8006d14:	469e      	mov	lr, r3
 8006d16:	4770      	bx	lr

08006d18 <_fini>:
 8006d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d1a:	bf00      	nop
 8006d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d1e:	bc08      	pop	{r3}
 8006d20:	469e      	mov	lr, r3
 8006d22:	4770      	bx	lr
