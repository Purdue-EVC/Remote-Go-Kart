
RCGoKart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ec8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08006098  08006098  00016098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060ec  080060ec  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080060ec  080060ec  000160ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060f4  080060f4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060f4  080060f4  000160f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060f8  080060f8  000160f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080060fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004cc  20000068  08006164  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000534  08006164  00020534  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ec47  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002113  00000000  00000000  0002ed22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e70  00000000  00000000  00030e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b50  00000000  00000000  00031ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024037  00000000  00000000  000327f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001122e  00000000  00000000  0005682f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dee21  00000000  00000000  00067a5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004430  00000000  00000000  00146880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0014acb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006080 	.word	0x08006080

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08006080 	.word	0x08006080

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <convertPWMInToOut>:
			Frequency = 90000000/ICValue;
		}
	}
}

uint32_t convertPWMInToOut(uint32_t PWMIn){
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	return (540 * (PWMIn-90355))/13387;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80005ba:	fb03 f202 	mul.w	r2, r3, r2
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <convertPWMInToOut+0x2c>)
 80005c0:	4413      	add	r3, r2
 80005c2:	4a06      	ldr	r2, [pc, #24]	; (80005dc <convertPWMInToOut+0x30>)
 80005c4:	fba2 2303 	umull	r2, r3, r2, r3
 80005c8:	0adb      	lsrs	r3, r3, #11
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	fd177f6c 	.word	0xfd177f6c
 80005dc:	2729f99d 	.word	0x2729f99d

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b590      	push	{r4, r7, lr}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e6:	f001 fb39 	bl	8001c5c <HAL_Init>
  /* USER CODE BEGIN Init */
  uint32_t curVal;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ea:	f000 f893 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ee:	f000 fea9 	bl	8001344 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005f2:	f000 f901 	bl	80007f8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80005f6:	f000 f951 	bl	800089c <MX_TIM1_Init>
  MX_TIM2_Init();
 80005fa:	f000 f9d3 	bl	80009a4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005fe:	f000 fa51 	bl	8000aa4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000602:	f000 faed 	bl	8000be0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000606:	f000 fb89 	bl	8000d1c <MX_TIM5_Init>
  MX_TIM8_Init();
 800060a:	f000 fc25 	bl	8000e58 <MX_TIM8_Init>
  MX_TIM9_Init();
 800060e:	f000 fcc3 	bl	8000f98 <MX_TIM9_Init>
  MX_TIM10_Init();
 8000612:	f000 fd49 	bl	80010a8 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000616:	f000 fd95 	bl	8001144 <MX_TIM11_Init>
  MX_TIM12_Init();
 800061a:	f000 fde1 	bl	80011e0 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 800061e:	f000 fe67 	bl	80012f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //Starts hal timing for input capture
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);   // main channel
 8000622:	2100      	movs	r1, #0
 8000624:	482e      	ldr	r0, [pc, #184]	; (80006e0 <main+0x100>)
 8000626:	f003 f96f 	bl	8003908 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);   // indirect channel
 800062a:	2104      	movs	r1, #4
 800062c:	482c      	ldr	r0, [pc, #176]	; (80006e0 <main+0x100>)
 800062e:	f003 f88f 	bl	8003750 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);   // main channel
 8000632:	2100      	movs	r1, #0
 8000634:	482b      	ldr	r0, [pc, #172]	; (80006e4 <main+0x104>)
 8000636:	f003 f967 	bl	8003908 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);   // indirect channel
 800063a:	2104      	movs	r1, #4
 800063c:	4829      	ldr	r0, [pc, #164]	; (80006e4 <main+0x104>)
 800063e:	f003 f887 	bl	8003750 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);   // main channel
 8000642:	2100      	movs	r1, #0
 8000644:	4828      	ldr	r0, [pc, #160]	; (80006e8 <main+0x108>)
 8000646:	f003 f95f 	bl	8003908 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);   // indirect channel
 800064a:	2104      	movs	r1, #4
 800064c:	4826      	ldr	r0, [pc, #152]	; (80006e8 <main+0x108>)
 800064e:	f003 f87f 	bl	8003750 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);   // main channel
 8000652:	2100      	movs	r1, #0
 8000654:	4825      	ldr	r0, [pc, #148]	; (80006ec <main+0x10c>)
 8000656:	f003 f957 	bl	8003908 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2);   // indirect channel
 800065a:	2104      	movs	r1, #4
 800065c:	4823      	ldr	r0, [pc, #140]	; (80006ec <main+0x10c>)
 800065e:	f003 f877 	bl	8003750 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);   // main channel
 8000662:	2100      	movs	r1, #0
 8000664:	4822      	ldr	r0, [pc, #136]	; (80006f0 <main+0x110>)
 8000666:	f003 f94f 	bl	8003908 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);   // indirect channel
 800066a:	2104      	movs	r1, #4
 800066c:	4820      	ldr	r0, [pc, #128]	; (80006f0 <main+0x110>)
 800066e:	f003 f86f 	bl	8003750 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_1);   // main channel
 8000672:	2100      	movs	r1, #0
 8000674:	481f      	ldr	r0, [pc, #124]	; (80006f4 <main+0x114>)
 8000676:	f003 f947 	bl	8003908 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_2);   // indirect channel
 800067a:	2104      	movs	r1, #4
 800067c:	481d      	ldr	r0, [pc, #116]	; (80006f4 <main+0x114>)
 800067e:	f003 f867 	bl	8003750 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim9, TIM_CHANNEL_1);   // main channel
 8000682:	2100      	movs	r1, #0
 8000684:	481c      	ldr	r0, [pc, #112]	; (80006f8 <main+0x118>)
 8000686:	f003 f93f 	bl	8003908 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim9, TIM_CHANNEL_2);   // indirect channel
 800068a:	2104      	movs	r1, #4
 800068c:	481a      	ldr	r0, [pc, #104]	; (80006f8 <main+0x118>)
 800068e:	f003 f85f 	bl	8003750 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim12, TIM_CHANNEL_1);   // main channel
 8000692:	2100      	movs	r1, #0
 8000694:	4819      	ldr	r0, [pc, #100]	; (80006fc <main+0x11c>)
 8000696:	f003 f937 	bl	8003908 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim12, TIM_CHANNEL_2);   // indirect channel
 800069a:	2104      	movs	r1, #4
 800069c:	4817      	ldr	r0, [pc, #92]	; (80006fc <main+0x11c>)
 800069e:	f003 f857 	bl	8003750 <HAL_TIM_IC_Start>

  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 80006a2:	2100      	movs	r1, #0
 80006a4:	4816      	ldr	r0, [pc, #88]	; (8000700 <main+0x120>)
 80006a6:	f002 ff3b 	bl	8003520 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 80006aa:	2100      	movs	r1, #0
 80006ac:	4815      	ldr	r0, [pc, #84]	; (8000704 <main+0x124>)
 80006ae:	f002 ff37 	bl	8003520 <HAL_TIM_PWM_Start>
  TIM10->CCR1 = 450; //Sets the pwm output of tim1 channel 1 to 450
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <main+0x128>)
 80006b4:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80006b8:	635a      	str	r2, [r3, #52]	; 0x34
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  curVal = TIM2->CCR2;
 80006ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006c0:	607b      	str	r3, [r7, #4]
	  TIM1->CCR1 = convertPWMInToOut(curVal);
 80006c2:	4c12      	ldr	r4, [pc, #72]	; (800070c <main+0x12c>)
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f7ff ff71 	bl	80005ac <convertPWMInToOut>
 80006ca:	4603      	mov	r3, r0
 80006cc:	6363      	str	r3, [r4, #52]	; 0x34
	  printf("%lu0a\n", curVal);
 80006ce:	6879      	ldr	r1, [r7, #4]
 80006d0:	480f      	ldr	r0, [pc, #60]	; (8000710 <main+0x130>)
 80006d2:	f004 fe63 	bl	800539c <iprintf>
	  HAL_Delay(100);
 80006d6:	2064      	movs	r0, #100	; 0x64
 80006d8:	f001 fb32 	bl	8001d40 <HAL_Delay>
	  curVal = TIM2->CCR2;
 80006dc:	e7ed      	b.n	80006ba <main+0xda>
 80006de:	bf00      	nop
 80006e0:	200000cc 	.word	0x200000cc
 80006e4:	20000114 	.word	0x20000114
 80006e8:	2000015c 	.word	0x2000015c
 80006ec:	200001a4 	.word	0x200001a4
 80006f0:	200001ec 	.word	0x200001ec
 80006f4:	20000234 	.word	0x20000234
 80006f8:	2000027c 	.word	0x2000027c
 80006fc:	20000354 	.word	0x20000354
 8000700:	200002c4 	.word	0x200002c4
 8000704:	2000030c 	.word	0x2000030c
 8000708:	40014400 	.word	0x40014400
 800070c:	40010000 	.word	0x40010000
 8000710:	08006098 	.word	0x08006098

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b094      	sub	sp, #80	; 0x50
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	2234      	movs	r2, #52	; 0x34
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f004 fe4c 	bl	80053c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	f107 0308 	add.w	r3, r7, #8
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	4b2c      	ldr	r3, [pc, #176]	; (80007f0 <SystemClock_Config+0xdc>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	4a2b      	ldr	r2, [pc, #172]	; (80007f0 <SystemClock_Config+0xdc>)
 8000742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000746:	6413      	str	r3, [r2, #64]	; 0x40
 8000748:	4b29      	ldr	r3, [pc, #164]	; (80007f0 <SystemClock_Config+0xdc>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000754:	2300      	movs	r3, #0
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	4b26      	ldr	r3, [pc, #152]	; (80007f4 <SystemClock_Config+0xe0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a25      	ldr	r2, [pc, #148]	; (80007f4 <SystemClock_Config+0xe0>)
 800075e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000762:	6013      	str	r3, [r2, #0]
 8000764:	4b23      	ldr	r3, [pc, #140]	; (80007f4 <SystemClock_Config+0xe0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000770:	2301      	movs	r3, #1
 8000772:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000774:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000778:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077a:	2302      	movs	r3, #2
 800077c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000782:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000784:	2304      	movs	r3, #4
 8000786:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000788:	23b4      	movs	r3, #180	; 0xb4
 800078a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800078c:	2302      	movs	r3, #2
 800078e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000790:	2302      	movs	r3, #2
 8000792:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000794:	2302      	movs	r3, #2
 8000796:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000798:	f107 031c 	add.w	r3, r7, #28
 800079c:	4618      	mov	r0, r3
 800079e:	f002 fb79 	bl	8002e94 <HAL_RCC_OscConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007a8:	f000 fe38 	bl	800141c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007ac:	f001 ffd8 	bl	8002760 <HAL_PWREx_EnableOverDrive>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007b6:	f000 fe31 	bl	800141c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ba:	230f      	movs	r3, #15
 80007bc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007be:	2302      	movs	r3, #2
 80007c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80007cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007d0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007d2:	f107 0308 	add.w	r3, r7, #8
 80007d6:	2105      	movs	r1, #5
 80007d8:	4618      	mov	r0, r3
 80007da:	f002 f811 	bl	8002800 <HAL_RCC_ClockConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007e4:	f000 fe1a 	bl	800141c <Error_Handler>
  }
}
 80007e8:	bf00      	nop
 80007ea:	3750      	adds	r7, #80	; 0x50
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40007000 	.word	0x40007000

080007f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007fe:	463b      	mov	r3, r7
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800080a:	4b21      	ldr	r3, [pc, #132]	; (8000890 <MX_ADC1_Init+0x98>)
 800080c:	4a21      	ldr	r2, [pc, #132]	; (8000894 <MX_ADC1_Init+0x9c>)
 800080e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000810:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <MX_ADC1_Init+0x98>)
 8000812:	2200      	movs	r2, #0
 8000814:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000816:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <MX_ADC1_Init+0x98>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <MX_ADC1_Init+0x98>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000822:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <MX_ADC1_Init+0x98>)
 8000824:	2200      	movs	r2, #0
 8000826:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000828:	4b19      	ldr	r3, [pc, #100]	; (8000890 <MX_ADC1_Init+0x98>)
 800082a:	2200      	movs	r2, #0
 800082c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000830:	4b17      	ldr	r3, [pc, #92]	; (8000890 <MX_ADC1_Init+0x98>)
 8000832:	2200      	movs	r2, #0
 8000834:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000836:	4b16      	ldr	r3, [pc, #88]	; (8000890 <MX_ADC1_Init+0x98>)
 8000838:	4a17      	ldr	r2, [pc, #92]	; (8000898 <MX_ADC1_Init+0xa0>)
 800083a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <MX_ADC1_Init+0x98>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000842:	4b13      	ldr	r3, [pc, #76]	; (8000890 <MX_ADC1_Init+0x98>)
 8000844:	2201      	movs	r2, #1
 8000846:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000848:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_ADC1_Init+0x98>)
 800084a:	2200      	movs	r2, #0
 800084c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_ADC1_Init+0x98>)
 8000852:	2201      	movs	r2, #1
 8000854:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000856:	480e      	ldr	r0, [pc, #56]	; (8000890 <MX_ADC1_Init+0x98>)
 8000858:	f001 fa96 	bl	8001d88 <HAL_ADC_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000862:	f000 fddb 	bl	800141c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000866:	2304      	movs	r3, #4
 8000868:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800086a:	2301      	movs	r3, #1
 800086c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000872:	463b      	mov	r3, r7
 8000874:	4619      	mov	r1, r3
 8000876:	4806      	ldr	r0, [pc, #24]	; (8000890 <MX_ADC1_Init+0x98>)
 8000878:	f001 faca 	bl	8001e10 <HAL_ADC_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000882:	f000 fdcb 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000084 	.word	0x20000084
 8000894:	40012000 	.word	0x40012000
 8000898:	0f000001 	.word	0x0f000001

0800089c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08c      	sub	sp, #48	; 0x30
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80008b2:	f107 030c 	add.w	r3, r7, #12
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008c8:	4b34      	ldr	r3, [pc, #208]	; (800099c <MX_TIM1_Init+0x100>)
 80008ca:	4a35      	ldr	r2, [pc, #212]	; (80009a0 <MX_TIM1_Init+0x104>)
 80008cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008ce:	4b33      	ldr	r3, [pc, #204]	; (800099c <MX_TIM1_Init+0x100>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d4:	4b31      	ldr	r3, [pc, #196]	; (800099c <MX_TIM1_Init+0x100>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008da:	4b30      	ldr	r3, [pc, #192]	; (800099c <MX_TIM1_Init+0x100>)
 80008dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e2:	4b2e      	ldr	r3, [pc, #184]	; (800099c <MX_TIM1_Init+0x100>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008e8:	4b2c      	ldr	r3, [pc, #176]	; (800099c <MX_TIM1_Init+0x100>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ee:	4b2b      	ldr	r3, [pc, #172]	; (800099c <MX_TIM1_Init+0x100>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80008f4:	4829      	ldr	r0, [pc, #164]	; (800099c <MX_TIM1_Init+0x100>)
 80008f6:	f002 fedb 	bl	80036b0 <HAL_TIM_IC_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000900:	f000 fd8c 	bl	800141c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000904:	2304      	movs	r3, #4
 8000906:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000908:	2350      	movs	r3, #80	; 0x50
 800090a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	481f      	ldr	r0, [pc, #124]	; (800099c <MX_TIM1_Init+0x100>)
 8000920:	f003 fb3f 	bl	8003fa2 <HAL_TIM_SlaveConfigSynchro>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800092a:	f000 fd77 	bl	800141c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000932:	2301      	movs	r3, #1
 8000934:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800093e:	f107 030c 	add.w	r3, r7, #12
 8000942:	2200      	movs	r2, #0
 8000944:	4619      	mov	r1, r3
 8000946:	4815      	ldr	r0, [pc, #84]	; (800099c <MX_TIM1_Init+0x100>)
 8000948:	f003 f906 	bl	8003b58 <HAL_TIM_IC_ConfigChannel>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8000952:	f000 fd63 	bl	800141c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000956:	2302      	movs	r3, #2
 8000958:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800095a:	2302      	movs	r3, #2
 800095c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800095e:	f107 030c 	add.w	r3, r7, #12
 8000962:	2204      	movs	r2, #4
 8000964:	4619      	mov	r1, r3
 8000966:	480d      	ldr	r0, [pc, #52]	; (800099c <MX_TIM1_Init+0x100>)
 8000968:	f003 f8f6 	bl	8003b58 <HAL_TIM_IC_ConfigChannel>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8000972:	f000 fd53 	bl	800141c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097a:	2300      	movs	r3, #0
 800097c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	4619      	mov	r1, r3
 8000982:	4806      	ldr	r0, [pc, #24]	; (800099c <MX_TIM1_Init+0x100>)
 8000984:	f004 f81c 	bl	80049c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800098e:	f000 fd45 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	3730      	adds	r7, #48	; 0x30
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200000cc 	.word	0x200000cc
 80009a0:	40010000 	.word	0x40010000

080009a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08c      	sub	sp, #48	; 0x30
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80009ba:	f107 030c 	add.w	r3, r7, #12
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009d0:	4b33      	ldr	r3, [pc, #204]	; (8000aa0 <MX_TIM2_Init+0xfc>)
 80009d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009d8:	4b31      	ldr	r3, [pc, #196]	; (8000aa0 <MX_TIM2_Init+0xfc>)
 80009da:	2200      	movs	r2, #0
 80009dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009de:	4b30      	ldr	r3, [pc, #192]	; (8000aa0 <MX_TIM2_Init+0xfc>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80009e4:	4b2e      	ldr	r3, [pc, #184]	; (8000aa0 <MX_TIM2_Init+0xfc>)
 80009e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ec:	4b2c      	ldr	r3, [pc, #176]	; (8000aa0 <MX_TIM2_Init+0xfc>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f2:	4b2b      	ldr	r3, [pc, #172]	; (8000aa0 <MX_TIM2_Init+0xfc>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80009f8:	4829      	ldr	r0, [pc, #164]	; (8000aa0 <MX_TIM2_Init+0xfc>)
 80009fa:	f002 fe59 	bl	80036b0 <HAL_TIM_IC_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000a04:	f000 fd0a 	bl	800141c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000a08:	2304      	movs	r3, #4
 8000a0a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000a0c:	2350      	movs	r3, #80	; 0x50
 8000a0e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4619      	mov	r1, r3
 8000a22:	481f      	ldr	r0, [pc, #124]	; (8000aa0 <MX_TIM2_Init+0xfc>)
 8000a24:	f003 fabd 	bl	8003fa2 <HAL_TIM_SlaveConfigSynchro>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a2e:	f000 fcf5 	bl	800141c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a36:	2301      	movs	r3, #1
 8000a38:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a42:	f107 030c 	add.w	r3, r7, #12
 8000a46:	2200      	movs	r2, #0
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4815      	ldr	r0, [pc, #84]	; (8000aa0 <MX_TIM2_Init+0xfc>)
 8000a4c:	f003 f884 	bl	8003b58 <HAL_TIM_IC_ConfigChannel>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000a56:	f000 fce1 	bl	800141c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000a62:	f107 030c 	add.w	r3, r7, #12
 8000a66:	2204      	movs	r2, #4
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <MX_TIM2_Init+0xfc>)
 8000a6c:	f003 f874 	bl	8003b58 <HAL_TIM_IC_ConfigChannel>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000a76:	f000 fcd1 	bl	800141c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	4619      	mov	r1, r3
 8000a86:	4806      	ldr	r0, [pc, #24]	; (8000aa0 <MX_TIM2_Init+0xfc>)
 8000a88:	f003 ff9a 	bl	80049c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000a92:	f000 fcc3 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	3730      	adds	r7, #48	; 0x30
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000114 	.word	0x20000114

08000aa4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b090      	sub	sp, #64	; 0x40
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aaa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ade:	4b3e      	ldr	r3, [pc, #248]	; (8000bd8 <MX_TIM3_Init+0x134>)
 8000ae0:	4a3e      	ldr	r2, [pc, #248]	; (8000bdc <MX_TIM3_Init+0x138>)
 8000ae2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ae4:	4b3c      	ldr	r3, [pc, #240]	; (8000bd8 <MX_TIM3_Init+0x134>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aea:	4b3b      	ldr	r3, [pc, #236]	; (8000bd8 <MX_TIM3_Init+0x134>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000af0:	4b39      	ldr	r3, [pc, #228]	; (8000bd8 <MX_TIM3_Init+0x134>)
 8000af2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000af6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af8:	4b37      	ldr	r3, [pc, #220]	; (8000bd8 <MX_TIM3_Init+0x134>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afe:	4b36      	ldr	r3, [pc, #216]	; (8000bd8 <MX_TIM3_Init+0x134>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b04:	4834      	ldr	r0, [pc, #208]	; (8000bd8 <MX_TIM3_Init+0x134>)
 8000b06:	f002 fc63 	bl	80033d0 <HAL_TIM_Base_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000b10:	f000 fc84 	bl	800141c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b18:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b1e:	4619      	mov	r1, r3
 8000b20:	482d      	ldr	r0, [pc, #180]	; (8000bd8 <MX_TIM3_Init+0x134>)
 8000b22:	f003 f977 	bl	8003e14 <HAL_TIM_ConfigClockSource>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000b2c:	f000 fc76 	bl	800141c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000b30:	4829      	ldr	r0, [pc, #164]	; (8000bd8 <MX_TIM3_Init+0x134>)
 8000b32:	f002 fdbd 	bl	80036b0 <HAL_TIM_IC_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000b3c:	f000 fc6e 	bl	800141c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000b40:	2304      	movs	r3, #4
 8000b42:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000b44:	2350      	movs	r3, #80	; 0x50
 8000b46:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000b54:	f107 031c 	add.w	r3, r7, #28
 8000b58:	4619      	mov	r1, r3
 8000b5a:	481f      	ldr	r0, [pc, #124]	; (8000bd8 <MX_TIM3_Init+0x134>)
 8000b5c:	f003 fa21 	bl	8003fa2 <HAL_TIM_SlaveConfigSynchro>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8000b66:	f000 fc59 	bl	800141c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	2200      	movs	r2, #0
 8000b80:	4619      	mov	r1, r3
 8000b82:	4815      	ldr	r0, [pc, #84]	; (8000bd8 <MX_TIM3_Init+0x134>)
 8000b84:	f002 ffe8 	bl	8003b58 <HAL_TIM_IC_ConfigChannel>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000b8e:	f000 fc45 	bl	800141c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000b92:	2302      	movs	r3, #2
 8000b94:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000b96:	2302      	movs	r3, #2
 8000b98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	2204      	movs	r2, #4
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	480d      	ldr	r0, [pc, #52]	; (8000bd8 <MX_TIM3_Init+0x134>)
 8000ba4:	f002 ffd8 	bl	8003b58 <HAL_TIM_IC_ConfigChannel>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 8000bae:	f000 fc35 	bl	800141c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4806      	ldr	r0, [pc, #24]	; (8000bd8 <MX_TIM3_Init+0x134>)
 8000bc0:	f003 fefe 	bl	80049c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM3_Init+0x12a>
  {
    Error_Handler();
 8000bca:	f000 fc27 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	3740      	adds	r7, #64	; 0x40
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	2000015c 	.word	0x2000015c
 8000bdc:	40000400 	.word	0x40000400

08000be0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b090      	sub	sp, #64	; 0x40
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000bf4:	f107 031c 	add.w	r3, r7, #28
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c04:	f107 030c 	add.w	r3, r7, #12
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c1a:	4b3e      	ldr	r3, [pc, #248]	; (8000d14 <MX_TIM4_Init+0x134>)
 8000c1c:	4a3e      	ldr	r2, [pc, #248]	; (8000d18 <MX_TIM4_Init+0x138>)
 8000c1e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c20:	4b3c      	ldr	r3, [pc, #240]	; (8000d14 <MX_TIM4_Init+0x134>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c26:	4b3b      	ldr	r3, [pc, #236]	; (8000d14 <MX_TIM4_Init+0x134>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c2c:	4b39      	ldr	r3, [pc, #228]	; (8000d14 <MX_TIM4_Init+0x134>)
 8000c2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c32:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c34:	4b37      	ldr	r3, [pc, #220]	; (8000d14 <MX_TIM4_Init+0x134>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3a:	4b36      	ldr	r3, [pc, #216]	; (8000d14 <MX_TIM4_Init+0x134>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c40:	4834      	ldr	r0, [pc, #208]	; (8000d14 <MX_TIM4_Init+0x134>)
 8000c42:	f002 fbc5 	bl	80033d0 <HAL_TIM_Base_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000c4c:	f000 fbe6 	bl	800141c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c54:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	482d      	ldr	r0, [pc, #180]	; (8000d14 <MX_TIM4_Init+0x134>)
 8000c5e:	f003 f8d9 	bl	8003e14 <HAL_TIM_ConfigClockSource>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000c68:	f000 fbd8 	bl	800141c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000c6c:	4829      	ldr	r0, [pc, #164]	; (8000d14 <MX_TIM4_Init+0x134>)
 8000c6e:	f002 fd1f 	bl	80036b0 <HAL_TIM_IC_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000c78:	f000 fbd0 	bl	800141c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000c80:	2350      	movs	r3, #80	; 0x50
 8000c82:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c84:	2300      	movs	r3, #0
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000c90:	f107 031c 	add.w	r3, r7, #28
 8000c94:	4619      	mov	r1, r3
 8000c96:	481f      	ldr	r0, [pc, #124]	; (8000d14 <MX_TIM4_Init+0x134>)
 8000c98:	f003 f983 	bl	8003fa2 <HAL_TIM_SlaveConfigSynchro>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 8000ca2:	f000 fbbb 	bl	800141c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000caa:	2301      	movs	r3, #1
 8000cac:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000cb6:	f107 030c 	add.w	r3, r7, #12
 8000cba:	2200      	movs	r2, #0
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4815      	ldr	r0, [pc, #84]	; (8000d14 <MX_TIM4_Init+0x134>)
 8000cc0:	f002 ff4a 	bl	8003b58 <HAL_TIM_IC_ConfigChannel>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8000cca:	f000 fba7 	bl	800141c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000cd6:	f107 030c 	add.w	r3, r7, #12
 8000cda:	2204      	movs	r2, #4
 8000cdc:	4619      	mov	r1, r3
 8000cde:	480d      	ldr	r0, [pc, #52]	; (8000d14 <MX_TIM4_Init+0x134>)
 8000ce0:	f002 ff3a 	bl	8003b58 <HAL_TIM_IC_ConfigChannel>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM4_Init+0x10e>
  {
    Error_Handler();
 8000cea:	f000 fb97 	bl	800141c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4806      	ldr	r0, [pc, #24]	; (8000d14 <MX_TIM4_Init+0x134>)
 8000cfc:	f003 fe60 	bl	80049c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM4_Init+0x12a>
  {
    Error_Handler();
 8000d06:	f000 fb89 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	3740      	adds	r7, #64	; 0x40
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	200001a4 	.word	0x200001a4
 8000d18:	40000800 	.word	0x40000800

08000d1c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b090      	sub	sp, #64	; 0x40
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000d30:	f107 031c 	add.w	r3, r7, #28
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d40:	f107 030c 	add.w	r3, r7, #12
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d56:	4b3e      	ldr	r3, [pc, #248]	; (8000e50 <MX_TIM5_Init+0x134>)
 8000d58:	4a3e      	ldr	r2, [pc, #248]	; (8000e54 <MX_TIM5_Init+0x138>)
 8000d5a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000d5c:	4b3c      	ldr	r3, [pc, #240]	; (8000e50 <MX_TIM5_Init+0x134>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d62:	4b3b      	ldr	r3, [pc, #236]	; (8000e50 <MX_TIM5_Init+0x134>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000d68:	4b39      	ldr	r3, [pc, #228]	; (8000e50 <MX_TIM5_Init+0x134>)
 8000d6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d6e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d70:	4b37      	ldr	r3, [pc, #220]	; (8000e50 <MX_TIM5_Init+0x134>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d76:	4b36      	ldr	r3, [pc, #216]	; (8000e50 <MX_TIM5_Init+0x134>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000d7c:	4834      	ldr	r0, [pc, #208]	; (8000e50 <MX_TIM5_Init+0x134>)
 8000d7e:	f002 fb27 	bl	80033d0 <HAL_TIM_Base_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000d88:	f000 fb48 	bl	800141c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d90:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000d92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d96:	4619      	mov	r1, r3
 8000d98:	482d      	ldr	r0, [pc, #180]	; (8000e50 <MX_TIM5_Init+0x134>)
 8000d9a:	f003 f83b 	bl	8003e14 <HAL_TIM_ConfigClockSource>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000da4:	f000 fb3a 	bl	800141c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000da8:	4829      	ldr	r0, [pc, #164]	; (8000e50 <MX_TIM5_Init+0x134>)
 8000daa:	f002 fc81 	bl	80036b0 <HAL_TIM_IC_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8000db4:	f000 fb32 	bl	800141c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000db8:	2304      	movs	r3, #4
 8000dba:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000dbc:	2350      	movs	r3, #80	; 0x50
 8000dbe:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000dcc:	f107 031c 	add.w	r3, r7, #28
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	481f      	ldr	r0, [pc, #124]	; (8000e50 <MX_TIM5_Init+0x134>)
 8000dd4:	f003 f8e5 	bl	8003fa2 <HAL_TIM_SlaveConfigSynchro>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM5_Init+0xc6>
  {
    Error_Handler();
 8000dde:	f000 fb1d 	bl	800141c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000de6:	2301      	movs	r3, #1
 8000de8:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000df2:	f107 030c 	add.w	r3, r7, #12
 8000df6:	2200      	movs	r2, #0
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4815      	ldr	r0, [pc, #84]	; (8000e50 <MX_TIM5_Init+0x134>)
 8000dfc:	f002 feac 	bl	8003b58 <HAL_TIM_IC_ConfigChannel>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 8000e06:	f000 fb09 	bl	800141c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000e12:	f107 030c 	add.w	r3, r7, #12
 8000e16:	2204      	movs	r2, #4
 8000e18:	4619      	mov	r1, r3
 8000e1a:	480d      	ldr	r0, [pc, #52]	; (8000e50 <MX_TIM5_Init+0x134>)
 8000e1c:	f002 fe9c 	bl	8003b58 <HAL_TIM_IC_ConfigChannel>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM5_Init+0x10e>
  {
    Error_Handler();
 8000e26:	f000 faf9 	bl	800141c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	4619      	mov	r1, r3
 8000e36:	4806      	ldr	r0, [pc, #24]	; (8000e50 <MX_TIM5_Init+0x134>)
 8000e38:	f003 fdc2 	bl	80049c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM5_Init+0x12a>
  {
    Error_Handler();
 8000e42:	f000 faeb 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	3740      	adds	r7, #64	; 0x40
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	200001ec 	.word	0x200001ec
 8000e54:	40000c00 	.word	0x40000c00

08000e58 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b090      	sub	sp, #64	; 0x40
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e6c:	f107 031c 	add.w	r3, r7, #28
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000e92:	4b3f      	ldr	r3, [pc, #252]	; (8000f90 <MX_TIM8_Init+0x138>)
 8000e94:	4a3f      	ldr	r2, [pc, #252]	; (8000f94 <MX_TIM8_Init+0x13c>)
 8000e96:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000e98:	4b3d      	ldr	r3, [pc, #244]	; (8000f90 <MX_TIM8_Init+0x138>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9e:	4b3c      	ldr	r3, [pc, #240]	; (8000f90 <MX_TIM8_Init+0x138>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000ea4:	4b3a      	ldr	r3, [pc, #232]	; (8000f90 <MX_TIM8_Init+0x138>)
 8000ea6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eaa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eac:	4b38      	ldr	r3, [pc, #224]	; (8000f90 <MX_TIM8_Init+0x138>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000eb2:	4b37      	ldr	r3, [pc, #220]	; (8000f90 <MX_TIM8_Init+0x138>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb8:	4b35      	ldr	r3, [pc, #212]	; (8000f90 <MX_TIM8_Init+0x138>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000ebe:	4834      	ldr	r0, [pc, #208]	; (8000f90 <MX_TIM8_Init+0x138>)
 8000ec0:	f002 fa86 	bl	80033d0 <HAL_TIM_Base_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8000eca:	f000 faa7 	bl	800141c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ece:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000ed4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ed8:	4619      	mov	r1, r3
 8000eda:	482d      	ldr	r0, [pc, #180]	; (8000f90 <MX_TIM8_Init+0x138>)
 8000edc:	f002 ff9a 	bl	8003e14 <HAL_TIM_ConfigClockSource>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8000ee6:	f000 fa99 	bl	800141c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8000eea:	4829      	ldr	r0, [pc, #164]	; (8000f90 <MX_TIM8_Init+0x138>)
 8000eec:	f002 fbe0 	bl	80036b0 <HAL_TIM_IC_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_TIM8_Init+0xa2>
  {
    Error_Handler();
 8000ef6:	f000 fa91 	bl	800141c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000efa:	2304      	movs	r3, #4
 8000efc:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000efe:	2350      	movs	r3, #80	; 0x50
 8000f00:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f02:	2300      	movs	r3, #0
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8000f0e:	f107 031c 	add.w	r3, r7, #28
 8000f12:	4619      	mov	r1, r3
 8000f14:	481e      	ldr	r0, [pc, #120]	; (8000f90 <MX_TIM8_Init+0x138>)
 8000f16:	f003 f844 	bl	8003fa2 <HAL_TIM_SlaveConfigSynchro>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8000f20:	f000 fa7c 	bl	800141c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	2200      	movs	r2, #0
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4814      	ldr	r0, [pc, #80]	; (8000f90 <MX_TIM8_Init+0x138>)
 8000f3e:	f002 fe0b 	bl	8003b58 <HAL_TIM_IC_ConfigChannel>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8000f48:	f000 fa68 	bl	800141c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000f50:	2302      	movs	r3, #2
 8000f52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	2204      	movs	r2, #4
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	480c      	ldr	r0, [pc, #48]	; (8000f90 <MX_TIM8_Init+0x138>)
 8000f5e:	f002 fdfb 	bl	8003b58 <HAL_TIM_IC_ConfigChannel>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM8_Init+0x114>
  {
    Error_Handler();
 8000f68:	f000 fa58 	bl	800141c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	4619      	mov	r1, r3
 8000f78:	4805      	ldr	r0, [pc, #20]	; (8000f90 <MX_TIM8_Init+0x138>)
 8000f7a:	f003 fd21 	bl	80049c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8000f84:	f000 fa4a 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000f88:	bf00      	nop
 8000f8a:	3740      	adds	r7, #64	; 0x40
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000234 	.word	0x20000234
 8000f94:	40010400 	.word	0x40010400

08000f98 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08e      	sub	sp, #56	; 0x38
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000fc8:	4b35      	ldr	r3, [pc, #212]	; (80010a0 <MX_TIM9_Init+0x108>)
 8000fca:	4a36      	ldr	r2, [pc, #216]	; (80010a4 <MX_TIM9_Init+0x10c>)
 8000fcc:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8000fce:	4b34      	ldr	r3, [pc, #208]	; (80010a0 <MX_TIM9_Init+0x108>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd4:	4b32      	ldr	r3, [pc, #200]	; (80010a0 <MX_TIM9_Init+0x108>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8000fda:	4b31      	ldr	r3, [pc, #196]	; (80010a0 <MX_TIM9_Init+0x108>)
 8000fdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fe0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe2:	4b2f      	ldr	r3, [pc, #188]	; (80010a0 <MX_TIM9_Init+0x108>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe8:	4b2d      	ldr	r3, [pc, #180]	; (80010a0 <MX_TIM9_Init+0x108>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000fee:	482c      	ldr	r0, [pc, #176]	; (80010a0 <MX_TIM9_Init+0x108>)
 8000ff0:	f002 f9ee 	bl	80033d0 <HAL_TIM_Base_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM9_Init+0x66>
  {
    Error_Handler();
 8000ffa:	f000 fa0f 	bl	800141c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001002:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001004:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001008:	4619      	mov	r1, r3
 800100a:	4825      	ldr	r0, [pc, #148]	; (80010a0 <MX_TIM9_Init+0x108>)
 800100c:	f002 ff02 	bl	8003e14 <HAL_TIM_ConfigClockSource>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM9_Init+0x82>
  {
    Error_Handler();
 8001016:	f000 fa01 	bl	800141c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 800101a:	4821      	ldr	r0, [pc, #132]	; (80010a0 <MX_TIM9_Init+0x108>)
 800101c:	f002 fb48 	bl	80036b0 <HAL_TIM_IC_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM9_Init+0x92>
  {
    Error_Handler();
 8001026:	f000 f9f9 	bl	800141c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800102a:	2304      	movs	r3, #4
 800102c:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800102e:	2350      	movs	r3, #80	; 0x50
 8001030:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim9, &sSlaveConfig) != HAL_OK)
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	4816      	ldr	r0, [pc, #88]	; (80010a0 <MX_TIM9_Init+0x108>)
 8001046:	f002 ffac 	bl	8003fa2 <HAL_TIM_SlaveConfigSynchro>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM9_Init+0xbc>
  {
    Error_Handler();
 8001050:	f000 f9e4 	bl	800141c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001054:	2300      	movs	r3, #0
 8001056:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001058:	2301      	movs	r3, #1
 800105a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	2200      	movs	r2, #0
 8001068:	4619      	mov	r1, r3
 800106a:	480d      	ldr	r0, [pc, #52]	; (80010a0 <MX_TIM9_Init+0x108>)
 800106c:	f002 fd74 	bl	8003b58 <HAL_TIM_IC_ConfigChannel>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM9_Init+0xe2>
  {
    Error_Handler();
 8001076:	f000 f9d1 	bl	800141c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800107a:	2302      	movs	r3, #2
 800107c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800107e:	2302      	movs	r3, #2
 8001080:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	2204      	movs	r2, #4
 8001086:	4619      	mov	r1, r3
 8001088:	4805      	ldr	r0, [pc, #20]	; (80010a0 <MX_TIM9_Init+0x108>)
 800108a:	f002 fd65 	bl	8003b58 <HAL_TIM_IC_ConfigChannel>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM9_Init+0x100>
  {
    Error_Handler();
 8001094:	f000 f9c2 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001098:	bf00      	nop
 800109a:	3738      	adds	r7, #56	; 0x38
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	2000027c 	.word	0x2000027c
 80010a4:	40014000 	.word	0x40014000

080010a8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
 80010bc:	615a      	str	r2, [r3, #20]
 80010be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80010c0:	4b1e      	ldr	r3, [pc, #120]	; (800113c <MX_TIM10_Init+0x94>)
 80010c2:	4a1f      	ldr	r2, [pc, #124]	; (8001140 <MX_TIM10_Init+0x98>)
 80010c4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80010c6:	4b1d      	ldr	r3, [pc, #116]	; (800113c <MX_TIM10_Init+0x94>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010cc:	4b1b      	ldr	r3, [pc, #108]	; (800113c <MX_TIM10_Init+0x94>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80010d2:	4b1a      	ldr	r3, [pc, #104]	; (800113c <MX_TIM10_Init+0x94>)
 80010d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010d8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010da:	4b18      	ldr	r3, [pc, #96]	; (800113c <MX_TIM10_Init+0x94>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e0:	4b16      	ldr	r3, [pc, #88]	; (800113c <MX_TIM10_Init+0x94>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80010e6:	4815      	ldr	r0, [pc, #84]	; (800113c <MX_TIM10_Init+0x94>)
 80010e8:	f002 f972 	bl	80033d0 <HAL_TIM_Base_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80010f2:	f000 f993 	bl	800141c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80010f6:	4811      	ldr	r0, [pc, #68]	; (800113c <MX_TIM10_Init+0x94>)
 80010f8:	f002 f9b9 	bl	800346e <HAL_TIM_PWM_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001102:	f000 f98b 	bl	800141c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001106:	2360      	movs	r3, #96	; 0x60
 8001108:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	2200      	movs	r2, #0
 800111a:	4619      	mov	r1, r3
 800111c:	4807      	ldr	r0, [pc, #28]	; (800113c <MX_TIM10_Init+0x94>)
 800111e:	f002 fdb7 	bl	8003c90 <HAL_TIM_PWM_ConfigChannel>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001128:	f000 f978 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800112c:	4803      	ldr	r0, [pc, #12]	; (800113c <MX_TIM10_Init+0x94>)
 800112e:	f000 fbe1 	bl	80018f4 <HAL_TIM_MspPostInit>

}
 8001132:	bf00      	nop
 8001134:	3720      	adds	r7, #32
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200002c4 	.word	0x200002c4
 8001140:	40014400 	.word	0x40014400

08001144 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
 8001158:	615a      	str	r2, [r3, #20]
 800115a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800115c:	4b1e      	ldr	r3, [pc, #120]	; (80011d8 <MX_TIM11_Init+0x94>)
 800115e:	4a1f      	ldr	r2, [pc, #124]	; (80011dc <MX_TIM11_Init+0x98>)
 8001160:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8001162:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <MX_TIM11_Init+0x94>)
 8001164:	2200      	movs	r2, #0
 8001166:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001168:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <MX_TIM11_Init+0x94>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800116e:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <MX_TIM11_Init+0x94>)
 8001170:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001174:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <MX_TIM11_Init+0x94>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117c:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <MX_TIM11_Init+0x94>)
 800117e:	2200      	movs	r2, #0
 8001180:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001182:	4815      	ldr	r0, [pc, #84]	; (80011d8 <MX_TIM11_Init+0x94>)
 8001184:	f002 f924 	bl	80033d0 <HAL_TIM_Base_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800118e:	f000 f945 	bl	800141c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001192:	4811      	ldr	r0, [pc, #68]	; (80011d8 <MX_TIM11_Init+0x94>)
 8001194:	f002 f96b 	bl	800346e <HAL_TIM_PWM_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800119e:	f000 f93d 	bl	800141c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011a2:	2360      	movs	r3, #96	; 0x60
 80011a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	2200      	movs	r2, #0
 80011b6:	4619      	mov	r1, r3
 80011b8:	4807      	ldr	r0, [pc, #28]	; (80011d8 <MX_TIM11_Init+0x94>)
 80011ba:	f002 fd69 	bl	8003c90 <HAL_TIM_PWM_ConfigChannel>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80011c4:	f000 f92a 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80011c8:	4803      	ldr	r0, [pc, #12]	; (80011d8 <MX_TIM11_Init+0x94>)
 80011ca:	f000 fb93 	bl	80018f4 <HAL_TIM_MspPostInit>

}
 80011ce:	bf00      	nop
 80011d0:	3720      	adds	r7, #32
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	2000030c 	.word	0x2000030c
 80011dc:	40014800 	.word	0x40014800

080011e0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08e      	sub	sp, #56	; 0x38
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001210:	4b35      	ldr	r3, [pc, #212]	; (80012e8 <MX_TIM12_Init+0x108>)
 8001212:	4a36      	ldr	r2, [pc, #216]	; (80012ec <MX_TIM12_Init+0x10c>)
 8001214:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001216:	4b34      	ldr	r3, [pc, #208]	; (80012e8 <MX_TIM12_Init+0x108>)
 8001218:	2200      	movs	r2, #0
 800121a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121c:	4b32      	ldr	r3, [pc, #200]	; (80012e8 <MX_TIM12_Init+0x108>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001222:	4b31      	ldr	r3, [pc, #196]	; (80012e8 <MX_TIM12_Init+0x108>)
 8001224:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001228:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122a:	4b2f      	ldr	r3, [pc, #188]	; (80012e8 <MX_TIM12_Init+0x108>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001230:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <MX_TIM12_Init+0x108>)
 8001232:	2200      	movs	r2, #0
 8001234:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001236:	482c      	ldr	r0, [pc, #176]	; (80012e8 <MX_TIM12_Init+0x108>)
 8001238:	f002 f8ca 	bl	80033d0 <HAL_TIM_Base_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM12_Init+0x66>
  {
    Error_Handler();
 8001242:	f000 f8eb 	bl	800141c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800124c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001250:	4619      	mov	r1, r3
 8001252:	4825      	ldr	r0, [pc, #148]	; (80012e8 <MX_TIM12_Init+0x108>)
 8001254:	f002 fdde 	bl	8003e14 <HAL_TIM_ConfigClockSource>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM12_Init+0x82>
  {
    Error_Handler();
 800125e:	f000 f8dd 	bl	800141c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 8001262:	4821      	ldr	r0, [pc, #132]	; (80012e8 <MX_TIM12_Init+0x108>)
 8001264:	f002 fa24 	bl	80036b0 <HAL_TIM_IC_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM12_Init+0x92>
  {
    Error_Handler();
 800126e:	f000 f8d5 	bl	800141c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001272:	2304      	movs	r3, #4
 8001274:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001276:	2350      	movs	r3, #80	; 0x50
 8001278:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim12, &sSlaveConfig) != HAL_OK)
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	4816      	ldr	r0, [pc, #88]	; (80012e8 <MX_TIM12_Init+0x108>)
 800128e:	f002 fe88 	bl	8003fa2 <HAL_TIM_SlaveConfigSynchro>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM12_Init+0xbc>
  {
    Error_Handler();
 8001298:	f000 f8c0 	bl	800141c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800129c:	2300      	movs	r3, #0
 800129e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012a0:	2301      	movs	r3, #1
 80012a2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	2200      	movs	r2, #0
 80012b0:	4619      	mov	r1, r3
 80012b2:	480d      	ldr	r0, [pc, #52]	; (80012e8 <MX_TIM12_Init+0x108>)
 80012b4:	f002 fc50 	bl	8003b58 <HAL_TIM_IC_ConfigChannel>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM12_Init+0xe2>
  {
    Error_Handler();
 80012be:	f000 f8ad 	bl	800141c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80012c2:	2302      	movs	r3, #2
 80012c4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80012c6:	2302      	movs	r3, #2
 80012c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	2204      	movs	r2, #4
 80012ce:	4619      	mov	r1, r3
 80012d0:	4805      	ldr	r0, [pc, #20]	; (80012e8 <MX_TIM12_Init+0x108>)
 80012d2:	f002 fc41 	bl	8003b58 <HAL_TIM_IC_ConfigChannel>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM12_Init+0x100>
  {
    Error_Handler();
 80012dc:	f000 f89e 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	3738      	adds	r7, #56	; 0x38
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000354 	.word	0x20000354
 80012ec:	40001800 	.word	0x40001800

080012f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_USART1_UART_Init+0x4c>)
 80012f6:	4a12      	ldr	r2, [pc, #72]	; (8001340 <MX_USART1_UART_Init+0x50>)
 80012f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <MX_USART1_UART_Init+0x4c>)
 80012fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001300:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <MX_USART1_UART_Init+0x4c>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <MX_USART1_UART_Init+0x4c>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <MX_USART1_UART_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <MX_USART1_UART_Init+0x4c>)
 8001316:	220c      	movs	r2, #12
 8001318:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <MX_USART1_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <MX_USART1_UART_Init+0x4c>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001326:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_USART1_UART_Init+0x4c>)
 8001328:	f003 fbc6 	bl	8004ab8 <HAL_UART_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001332:	f000 f873 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	2000039c 	.word	0x2000039c
 8001340:	40011000 	.word	0x40011000

08001344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134a:	f107 0314 	add.w	r3, r7, #20
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	4b24      	ldr	r3, [pc, #144]	; (80013f0 <MX_GPIO_Init+0xac>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a23      	ldr	r2, [pc, #140]	; (80013f0 <MX_GPIO_Init+0xac>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <MX_GPIO_Init+0xac>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <MX_GPIO_Init+0xac>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a1c      	ldr	r2, [pc, #112]	; (80013f0 <MX_GPIO_Init+0xac>)
 8001380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <MX_GPIO_Init+0xac>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <MX_GPIO_Init+0xac>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a15      	ldr	r2, [pc, #84]	; (80013f0 <MX_GPIO_Init+0xac>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <MX_GPIO_Init+0xac>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <MX_GPIO_Init+0xac>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <MX_GPIO_Init+0xac>)
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <MX_GPIO_Init+0xac>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013d0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013da:	f107 0314 	add.w	r3, r7, #20
 80013de:	4619      	mov	r1, r3
 80013e0:	4804      	ldr	r0, [pc, #16]	; (80013f4 <MX_GPIO_Init+0xb0>)
 80013e2:	f001 f829 	bl	8002438 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013e6:	bf00      	nop
 80013e8:	3728      	adds	r7, #40	; 0x28
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40020800 	.word	0x40020800

080013f8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001400:	1d39      	adds	r1, r7, #4
 8001402:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001406:	2201      	movs	r2, #1
 8001408:	4803      	ldr	r0, [pc, #12]	; (8001418 <__io_putchar+0x20>)
 800140a:	f003 fba2 	bl	8004b52 <HAL_UART_Transmit>

  return ch;
 800140e:	687b      	ldr	r3, [r7, #4]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	2000039c 	.word	0x2000039c

0800141c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001420:	b672      	cpsid	i
}
 8001422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001424:	e7fe      	b.n	8001424 <Error_Handler+0x8>
	...

08001428 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <HAL_MspInit+0x4c>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	4a0f      	ldr	r2, [pc, #60]	; (8001474 <HAL_MspInit+0x4c>)
 8001438:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800143c:	6453      	str	r3, [r2, #68]	; 0x44
 800143e:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <HAL_MspInit+0x4c>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	603b      	str	r3, [r7, #0]
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <HAL_MspInit+0x4c>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	4a08      	ldr	r2, [pc, #32]	; (8001474 <HAL_MspInit+0x4c>)
 8001454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001458:	6413      	str	r3, [r2, #64]	; 0x40
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_MspInit+0x4c>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001466:	2007      	movs	r0, #7
 8001468:	f000 ffb2 	bl	80023d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40023800 	.word	0x40023800

08001478 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	; 0x28
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a17      	ldr	r2, [pc, #92]	; (80014f4 <HAL_ADC_MspInit+0x7c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d127      	bne.n	80014ea <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <HAL_ADC_MspInit+0x80>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	4a15      	ldr	r2, [pc, #84]	; (80014f8 <HAL_ADC_MspInit+0x80>)
 80014a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a8:	6453      	str	r3, [r2, #68]	; 0x44
 80014aa:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <HAL_ADC_MspInit+0x80>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b2:	613b      	str	r3, [r7, #16]
 80014b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <HAL_ADC_MspInit+0x80>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a0e      	ldr	r2, [pc, #56]	; (80014f8 <HAL_ADC_MspInit+0x80>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <HAL_ADC_MspInit+0x80>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014d2:	2310      	movs	r3, #16
 80014d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d6:	2303      	movs	r3, #3
 80014d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4619      	mov	r1, r3
 80014e4:	4805      	ldr	r0, [pc, #20]	; (80014fc <HAL_ADC_MspInit+0x84>)
 80014e6:	f000 ffa7 	bl	8002438 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014ea:	bf00      	nop
 80014ec:	3728      	adds	r7, #40	; 0x28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40012000 	.word	0x40012000
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40020000 	.word	0x40020000

08001500 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08c      	sub	sp, #48	; 0x30
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 031c 	add.w	r3, r7, #28
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a32      	ldr	r2, [pc, #200]	; (80015e8 <HAL_TIM_IC_MspInit+0xe8>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d12d      	bne.n	800157e <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	61bb      	str	r3, [r7, #24]
 8001526:	4b31      	ldr	r3, [pc, #196]	; (80015ec <HAL_TIM_IC_MspInit+0xec>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	4a30      	ldr	r2, [pc, #192]	; (80015ec <HAL_TIM_IC_MspInit+0xec>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6453      	str	r3, [r2, #68]	; 0x44
 8001532:	4b2e      	ldr	r3, [pc, #184]	; (80015ec <HAL_TIM_IC_MspInit+0xec>)
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	61bb      	str	r3, [r7, #24]
 800153c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
 8001542:	4b2a      	ldr	r3, [pc, #168]	; (80015ec <HAL_TIM_IC_MspInit+0xec>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a29      	ldr	r2, [pc, #164]	; (80015ec <HAL_TIM_IC_MspInit+0xec>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b27      	ldr	r3, [pc, #156]	; (80015ec <HAL_TIM_IC_MspInit+0xec>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800155a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800155e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001560:	2302      	movs	r3, #2
 8001562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001568:	2300      	movs	r3, #0
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800156c:	2301      	movs	r3, #1
 800156e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001570:	f107 031c 	add.w	r3, r7, #28
 8001574:	4619      	mov	r1, r3
 8001576:	481e      	ldr	r0, [pc, #120]	; (80015f0 <HAL_TIM_IC_MspInit+0xf0>)
 8001578:	f000 ff5e 	bl	8002438 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800157c:	e030      	b.n	80015e0 <HAL_TIM_IC_MspInit+0xe0>
  else if(htim_ic->Instance==TIM2)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001586:	d12b      	bne.n	80015e0 <HAL_TIM_IC_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001588:	2300      	movs	r3, #0
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	4b17      	ldr	r3, [pc, #92]	; (80015ec <HAL_TIM_IC_MspInit+0xec>)
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	4a16      	ldr	r2, [pc, #88]	; (80015ec <HAL_TIM_IC_MspInit+0xec>)
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	6413      	str	r3, [r2, #64]	; 0x40
 8001598:	4b14      	ldr	r3, [pc, #80]	; (80015ec <HAL_TIM_IC_MspInit+0xec>)
 800159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	4b10      	ldr	r3, [pc, #64]	; (80015ec <HAL_TIM_IC_MspInit+0xec>)
 80015aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ac:	4a0f      	ldr	r2, [pc, #60]	; (80015ec <HAL_TIM_IC_MspInit+0xec>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6313      	str	r3, [r2, #48]	; 0x30
 80015b4:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <HAL_TIM_IC_MspInit+0xec>)
 80015b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015c0:	2320      	movs	r3, #32
 80015c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015d0:	2301      	movs	r3, #1
 80015d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d4:	f107 031c 	add.w	r3, r7, #28
 80015d8:	4619      	mov	r1, r3
 80015da:	4805      	ldr	r0, [pc, #20]	; (80015f0 <HAL_TIM_IC_MspInit+0xf0>)
 80015dc:	f000 ff2c 	bl	8002438 <HAL_GPIO_Init>
}
 80015e0:	bf00      	nop
 80015e2:	3730      	adds	r7, #48	; 0x30
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40010000 	.word	0x40010000
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40020000 	.word	0x40020000

080015f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b096      	sub	sp, #88	; 0x58
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a8f      	ldr	r2, [pc, #572]	; (8001850 <HAL_TIM_Base_MspInit+0x25c>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d12c      	bne.n	8001670 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	643b      	str	r3, [r7, #64]	; 0x40
 800161a:	4b8e      	ldr	r3, [pc, #568]	; (8001854 <HAL_TIM_Base_MspInit+0x260>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	4a8d      	ldr	r2, [pc, #564]	; (8001854 <HAL_TIM_Base_MspInit+0x260>)
 8001620:	f043 0302 	orr.w	r3, r3, #2
 8001624:	6413      	str	r3, [r2, #64]	; 0x40
 8001626:	4b8b      	ldr	r3, [pc, #556]	; (8001854 <HAL_TIM_Base_MspInit+0x260>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	643b      	str	r3, [r7, #64]	; 0x40
 8001630:	6c3b      	ldr	r3, [r7, #64]	; 0x40

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001636:	4b87      	ldr	r3, [pc, #540]	; (8001854 <HAL_TIM_Base_MspInit+0x260>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a86      	ldr	r2, [pc, #536]	; (8001854 <HAL_TIM_Base_MspInit+0x260>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b84      	ldr	r3, [pc, #528]	; (8001854 <HAL_TIM_Base_MspInit+0x260>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800164c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800164e:	2340      	movs	r3, #64	; 0x40
 8001650:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001652:	2302      	movs	r3, #2
 8001654:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165a:	2300      	movs	r3, #0
 800165c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800165e:	2302      	movs	r3, #2
 8001660:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001662:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001666:	4619      	mov	r1, r3
 8001668:	487b      	ldr	r0, [pc, #492]	; (8001858 <HAL_TIM_Base_MspInit+0x264>)
 800166a:	f000 fee5 	bl	8002438 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800166e:	e137      	b.n	80018e0 <HAL_TIM_Base_MspInit+0x2ec>
  else if(htim_base->Instance==TIM4)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a79      	ldr	r2, [pc, #484]	; (800185c <HAL_TIM_Base_MspInit+0x268>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d12c      	bne.n	80016d4 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	63bb      	str	r3, [r7, #56]	; 0x38
 800167e:	4b75      	ldr	r3, [pc, #468]	; (8001854 <HAL_TIM_Base_MspInit+0x260>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	4a74      	ldr	r2, [pc, #464]	; (8001854 <HAL_TIM_Base_MspInit+0x260>)
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	6413      	str	r3, [r2, #64]	; 0x40
 800168a:	4b72      	ldr	r3, [pc, #456]	; (8001854 <HAL_TIM_Base_MspInit+0x260>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	63bb      	str	r3, [r7, #56]	; 0x38
 8001694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	637b      	str	r3, [r7, #52]	; 0x34
 800169a:	4b6e      	ldr	r3, [pc, #440]	; (8001854 <HAL_TIM_Base_MspInit+0x260>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a6d      	ldr	r2, [pc, #436]	; (8001854 <HAL_TIM_Base_MspInit+0x260>)
 80016a0:	f043 0302 	orr.w	r3, r3, #2
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b6b      	ldr	r3, [pc, #428]	; (8001854 <HAL_TIM_Base_MspInit+0x260>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	637b      	str	r3, [r7, #52]	; 0x34
 80016b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016b2:	2340      	movs	r3, #64	; 0x40
 80016b4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	2302      	movs	r3, #2
 80016b8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016c2:	2302      	movs	r3, #2
 80016c4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016ca:	4619      	mov	r1, r3
 80016cc:	4864      	ldr	r0, [pc, #400]	; (8001860 <HAL_TIM_Base_MspInit+0x26c>)
 80016ce:	f000 feb3 	bl	8002438 <HAL_GPIO_Init>
}
 80016d2:	e105      	b.n	80018e0 <HAL_TIM_Base_MspInit+0x2ec>
  else if(htim_base->Instance==TIM5)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a62      	ldr	r2, [pc, #392]	; (8001864 <HAL_TIM_Base_MspInit+0x270>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d12c      	bne.n	8001738 <HAL_TIM_Base_MspInit+0x144>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	633b      	str	r3, [r7, #48]	; 0x30
 80016e2:	4b5c      	ldr	r3, [pc, #368]	; (8001854 <HAL_TIM_Base_MspInit+0x260>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	4a5b      	ldr	r2, [pc, #364]	; (8001854 <HAL_TIM_Base_MspInit+0x260>)
 80016e8:	f043 0308 	orr.w	r3, r3, #8
 80016ec:	6413      	str	r3, [r2, #64]	; 0x40
 80016ee:	4b59      	ldr	r3, [pc, #356]	; (8001854 <HAL_TIM_Base_MspInit+0x260>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	f003 0308 	and.w	r3, r3, #8
 80016f6:	633b      	str	r3, [r7, #48]	; 0x30
 80016f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016fe:	4b55      	ldr	r3, [pc, #340]	; (8001854 <HAL_TIM_Base_MspInit+0x260>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	4a54      	ldr	r2, [pc, #336]	; (8001854 <HAL_TIM_Base_MspInit+0x260>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6313      	str	r3, [r2, #48]	; 0x30
 800170a:	4b52      	ldr	r3, [pc, #328]	; (8001854 <HAL_TIM_Base_MspInit+0x260>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001716:	2301      	movs	r3, #1
 8001718:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2300      	movs	r3, #0
 8001724:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001726:	2302      	movs	r3, #2
 8001728:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800172e:	4619      	mov	r1, r3
 8001730:	4849      	ldr	r0, [pc, #292]	; (8001858 <HAL_TIM_Base_MspInit+0x264>)
 8001732:	f000 fe81 	bl	8002438 <HAL_GPIO_Init>
}
 8001736:	e0d3      	b.n	80018e0 <HAL_TIM_Base_MspInit+0x2ec>
  else if(htim_base->Instance==TIM8)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a4a      	ldr	r2, [pc, #296]	; (8001868 <HAL_TIM_Base_MspInit+0x274>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d12c      	bne.n	800179c <HAL_TIM_Base_MspInit+0x1a8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	62bb      	str	r3, [r7, #40]	; 0x28
 8001746:	4b43      	ldr	r3, [pc, #268]	; (8001854 <HAL_TIM_Base_MspInit+0x260>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	4a42      	ldr	r2, [pc, #264]	; (8001854 <HAL_TIM_Base_MspInit+0x260>)
 800174c:	f043 0302 	orr.w	r3, r3, #2
 8001750:	6453      	str	r3, [r2, #68]	; 0x44
 8001752:	4b40      	ldr	r3, [pc, #256]	; (8001854 <HAL_TIM_Base_MspInit+0x260>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	62bb      	str	r3, [r7, #40]	; 0x28
 800175c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
 8001762:	4b3c      	ldr	r3, [pc, #240]	; (8001854 <HAL_TIM_Base_MspInit+0x260>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a3b      	ldr	r2, [pc, #236]	; (8001854 <HAL_TIM_Base_MspInit+0x260>)
 8001768:	f043 0304 	orr.w	r3, r3, #4
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b39      	ldr	r3, [pc, #228]	; (8001854 <HAL_TIM_Base_MspInit+0x260>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0304 	and.w	r3, r3, #4
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800177a:	2340      	movs	r3, #64	; 0x40
 800177c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177e:	2302      	movs	r3, #2
 8001780:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	2300      	movs	r3, #0
 8001788:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800178a:	2303      	movs	r3, #3
 800178c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800178e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001792:	4619      	mov	r1, r3
 8001794:	4835      	ldr	r0, [pc, #212]	; (800186c <HAL_TIM_Base_MspInit+0x278>)
 8001796:	f000 fe4f 	bl	8002438 <HAL_GPIO_Init>
}
 800179a:	e0a1      	b.n	80018e0 <HAL_TIM_Base_MspInit+0x2ec>
  else if(htim_base->Instance==TIM9)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a33      	ldr	r2, [pc, #204]	; (8001870 <HAL_TIM_Base_MspInit+0x27c>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d12c      	bne.n	8001800 <HAL_TIM_Base_MspInit+0x20c>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	623b      	str	r3, [r7, #32]
 80017aa:	4b2a      	ldr	r3, [pc, #168]	; (8001854 <HAL_TIM_Base_MspInit+0x260>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	4a29      	ldr	r2, [pc, #164]	; (8001854 <HAL_TIM_Base_MspInit+0x260>)
 80017b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b4:	6453      	str	r3, [r2, #68]	; 0x44
 80017b6:	4b27      	ldr	r3, [pc, #156]	; (8001854 <HAL_TIM_Base_MspInit+0x260>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017be:	623b      	str	r3, [r7, #32]
 80017c0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
 80017c6:	4b23      	ldr	r3, [pc, #140]	; (8001854 <HAL_TIM_Base_MspInit+0x260>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a22      	ldr	r2, [pc, #136]	; (8001854 <HAL_TIM_Base_MspInit+0x260>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b20      	ldr	r3, [pc, #128]	; (8001854 <HAL_TIM_Base_MspInit+0x260>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	61fb      	str	r3, [r7, #28]
 80017dc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017de:	2304      	movs	r3, #4
 80017e0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80017ee:	2303      	movs	r3, #3
 80017f0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017f6:	4619      	mov	r1, r3
 80017f8:	4817      	ldr	r0, [pc, #92]	; (8001858 <HAL_TIM_Base_MspInit+0x264>)
 80017fa:	f000 fe1d 	bl	8002438 <HAL_GPIO_Init>
}
 80017fe:	e06f      	b.n	80018e0 <HAL_TIM_Base_MspInit+0x2ec>
  else if(htim_base->Instance==TIM10)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a1b      	ldr	r2, [pc, #108]	; (8001874 <HAL_TIM_Base_MspInit+0x280>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d10e      	bne.n	8001828 <HAL_TIM_Base_MspInit+0x234>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	61bb      	str	r3, [r7, #24]
 800180e:	4b11      	ldr	r3, [pc, #68]	; (8001854 <HAL_TIM_Base_MspInit+0x260>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	4a10      	ldr	r2, [pc, #64]	; (8001854 <HAL_TIM_Base_MspInit+0x260>)
 8001814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001818:	6453      	str	r3, [r2, #68]	; 0x44
 800181a:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <HAL_TIM_Base_MspInit+0x260>)
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001822:	61bb      	str	r3, [r7, #24]
 8001824:	69bb      	ldr	r3, [r7, #24]
}
 8001826:	e05b      	b.n	80018e0 <HAL_TIM_Base_MspInit+0x2ec>
  else if(htim_base->Instance==TIM11)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a12      	ldr	r2, [pc, #72]	; (8001878 <HAL_TIM_Base_MspInit+0x284>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d124      	bne.n	800187c <HAL_TIM_Base_MspInit+0x288>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	4b07      	ldr	r3, [pc, #28]	; (8001854 <HAL_TIM_Base_MspInit+0x260>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	4a06      	ldr	r2, [pc, #24]	; (8001854 <HAL_TIM_Base_MspInit+0x260>)
 800183c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001840:	6453      	str	r3, [r2, #68]	; 0x44
 8001842:	4b04      	ldr	r3, [pc, #16]	; (8001854 <HAL_TIM_Base_MspInit+0x260>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	697b      	ldr	r3, [r7, #20]
}
 800184e:	e047      	b.n	80018e0 <HAL_TIM_Base_MspInit+0x2ec>
 8001850:	40000400 	.word	0x40000400
 8001854:	40023800 	.word	0x40023800
 8001858:	40020000 	.word	0x40020000
 800185c:	40000800 	.word	0x40000800
 8001860:	40020400 	.word	0x40020400
 8001864:	40000c00 	.word	0x40000c00
 8001868:	40010400 	.word	0x40010400
 800186c:	40020800 	.word	0x40020800
 8001870:	40014000 	.word	0x40014000
 8001874:	40014400 	.word	0x40014400
 8001878:	40014800 	.word	0x40014800
  else if(htim_base->Instance==TIM12)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a19      	ldr	r2, [pc, #100]	; (80018e8 <HAL_TIM_Base_MspInit+0x2f4>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d12c      	bne.n	80018e0 <HAL_TIM_Base_MspInit+0x2ec>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	4b18      	ldr	r3, [pc, #96]	; (80018ec <HAL_TIM_Base_MspInit+0x2f8>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	4a17      	ldr	r2, [pc, #92]	; (80018ec <HAL_TIM_Base_MspInit+0x2f8>)
 8001890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001894:	6413      	str	r3, [r2, #64]	; 0x40
 8001896:	4b15      	ldr	r3, [pc, #84]	; (80018ec <HAL_TIM_Base_MspInit+0x2f8>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <HAL_TIM_Base_MspInit+0x2f8>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a10      	ldr	r2, [pc, #64]	; (80018ec <HAL_TIM_Base_MspInit+0x2f8>)
 80018ac:	f043 0302 	orr.w	r3, r3, #2
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <HAL_TIM_Base_MspInit+0x2f8>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80018be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018c2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2300      	movs	r3, #0
 80018ce:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80018d0:	2309      	movs	r3, #9
 80018d2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018d8:	4619      	mov	r1, r3
 80018da:	4805      	ldr	r0, [pc, #20]	; (80018f0 <HAL_TIM_Base_MspInit+0x2fc>)
 80018dc:	f000 fdac 	bl	8002438 <HAL_GPIO_Init>
}
 80018e0:	bf00      	nop
 80018e2:	3758      	adds	r7, #88	; 0x58
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40001800 	.word	0x40001800
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40020400 	.word	0x40020400

080018f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08a      	sub	sp, #40	; 0x28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM10)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a25      	ldr	r2, [pc, #148]	; (80019a8 <HAL_TIM_MspPostInit+0xb4>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d11f      	bne.n	8001956 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	4b24      	ldr	r3, [pc, #144]	; (80019ac <HAL_TIM_MspPostInit+0xb8>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a23      	ldr	r2, [pc, #140]	; (80019ac <HAL_TIM_MspPostInit+0xb8>)
 8001920:	f043 0302 	orr.w	r3, r3, #2
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b21      	ldr	r3, [pc, #132]	; (80019ac <HAL_TIM_MspPostInit+0xb8>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001932:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001940:	2300      	movs	r3, #0
 8001942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001944:	2303      	movs	r3, #3
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	4619      	mov	r1, r3
 800194e:	4818      	ldr	r0, [pc, #96]	; (80019b0 <HAL_TIM_MspPostInit+0xbc>)
 8001950:	f000 fd72 	bl	8002438 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8001954:	e023      	b.n	800199e <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM11)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a16      	ldr	r2, [pc, #88]	; (80019b4 <HAL_TIM_MspPostInit+0xc0>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d11e      	bne.n	800199e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <HAL_TIM_MspPostInit+0xb8>)
 8001966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001968:	4a10      	ldr	r2, [pc, #64]	; (80019ac <HAL_TIM_MspPostInit+0xb8>)
 800196a:	f043 0302 	orr.w	r3, r3, #2
 800196e:	6313      	str	r3, [r2, #48]	; 0x30
 8001970:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <HAL_TIM_MspPostInit+0xb8>)
 8001972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800197c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001982:	2302      	movs	r3, #2
 8001984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198a:	2300      	movs	r3, #0
 800198c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800198e:	2303      	movs	r3, #3
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	4619      	mov	r1, r3
 8001998:	4805      	ldr	r0, [pc, #20]	; (80019b0 <HAL_TIM_MspPostInit+0xbc>)
 800199a:	f000 fd4d 	bl	8002438 <HAL_GPIO_Init>
}
 800199e:	bf00      	nop
 80019a0:	3728      	adds	r7, #40	; 0x28
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40014400 	.word	0x40014400
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40020400 	.word	0x40020400
 80019b4:	40014800 	.word	0x40014800

080019b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08a      	sub	sp, #40	; 0x28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a19      	ldr	r2, [pc, #100]	; (8001a3c <HAL_UART_MspInit+0x84>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d12c      	bne.n	8001a34 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <HAL_UART_MspInit+0x88>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	4a17      	ldr	r2, [pc, #92]	; (8001a40 <HAL_UART_MspInit+0x88>)
 80019e4:	f043 0310 	orr.w	r3, r3, #16
 80019e8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ea:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <HAL_UART_MspInit+0x88>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	f003 0310 	and.w	r3, r3, #16
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <HAL_UART_MspInit+0x88>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4a10      	ldr	r2, [pc, #64]	; (8001a40 <HAL_UART_MspInit+0x88>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <HAL_UART_MspInit+0x88>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a12:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a20:	2303      	movs	r3, #3
 8001a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a24:	2307      	movs	r3, #7
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4805      	ldr	r0, [pc, #20]	; (8001a44 <HAL_UART_MspInit+0x8c>)
 8001a30:	f000 fd02 	bl	8002438 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a34:	bf00      	nop
 8001a36:	3728      	adds	r7, #40	; 0x28
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40011000 	.word	0x40011000
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40020000 	.word	0x40020000

08001a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <NMI_Handler+0x4>

08001a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a52:	e7fe      	b.n	8001a52 <HardFault_Handler+0x4>

08001a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <MemManage_Handler+0x4>

08001a5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a5e:	e7fe      	b.n	8001a5e <BusFault_Handler+0x4>

08001a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <UsageFault_Handler+0x4>

08001a66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a94:	f000 f934 	bl	8001d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	e00a      	b.n	8001ac4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aae:	f3af 8000 	nop.w
 8001ab2:	4601      	mov	r1, r0
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	60ba      	str	r2, [r7, #8]
 8001aba:	b2ca      	uxtb	r2, r1
 8001abc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	dbf0      	blt.n	8001aae <_read+0x12>
  }

  return len;
 8001acc:	687b      	ldr	r3, [r7, #4]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b086      	sub	sp, #24
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	60f8      	str	r0, [r7, #12]
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	e009      	b.n	8001afc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	1c5a      	adds	r2, r3, #1
 8001aec:	60ba      	str	r2, [r7, #8]
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fc81 	bl	80013f8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	3301      	adds	r3, #1
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	dbf1      	blt.n	8001ae8 <_write+0x12>
  }
  return len;
 8001b04:	687b      	ldr	r3, [r7, #4]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <_close>:

int _close(int file)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b36:	605a      	str	r2, [r3, #4]
  return 0;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <_isatty>:

int _isatty(int file)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b4e:	2301      	movs	r3, #1
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
	...

08001b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b80:	4a14      	ldr	r2, [pc, #80]	; (8001bd4 <_sbrk+0x5c>)
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <_sbrk+0x60>)
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b8c:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <_sbrk+0x64>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d102      	bne.n	8001b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b94:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <_sbrk+0x64>)
 8001b96:	4a12      	ldr	r2, [pc, #72]	; (8001be0 <_sbrk+0x68>)
 8001b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b9a:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <_sbrk+0x64>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d207      	bcs.n	8001bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ba8:	f003 fc12 	bl	80053d0 <__errno>
 8001bac:	4603      	mov	r3, r0
 8001bae:	220c      	movs	r2, #12
 8001bb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bb6:	e009      	b.n	8001bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bb8:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <_sbrk+0x64>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bbe:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <_sbrk+0x64>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	4a05      	ldr	r2, [pc, #20]	; (8001bdc <_sbrk+0x64>)
 8001bc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bca:	68fb      	ldr	r3, [r7, #12]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20020000 	.word	0x20020000
 8001bd8:	00000400 	.word	0x00000400
 8001bdc:	200003e0 	.word	0x200003e0
 8001be0:	20000538 	.word	0x20000538

08001be4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <SystemInit+0x20>)
 8001bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bee:	4a05      	ldr	r2, [pc, #20]	; (8001c04 <SystemInit+0x20>)
 8001bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c0c:	480d      	ldr	r0, [pc, #52]	; (8001c44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c0e:	490e      	ldr	r1, [pc, #56]	; (8001c48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c10:	4a0e      	ldr	r2, [pc, #56]	; (8001c4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c14:	e002      	b.n	8001c1c <LoopCopyDataInit>

08001c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c1a:	3304      	adds	r3, #4

08001c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c20:	d3f9      	bcc.n	8001c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c22:	4a0b      	ldr	r2, [pc, #44]	; (8001c50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c24:	4c0b      	ldr	r4, [pc, #44]	; (8001c54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c28:	e001      	b.n	8001c2e <LoopFillZerobss>

08001c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c2c:	3204      	adds	r2, #4

08001c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c30:	d3fb      	bcc.n	8001c2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c32:	f7ff ffd7 	bl	8001be4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c36:	f003 fbd1 	bl	80053dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c3a:	f7fe fcd1 	bl	80005e0 <main>
  bx  lr    
 8001c3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c48:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001c4c:	080060fc 	.word	0x080060fc
  ldr r2, =_sbss
 8001c50:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001c54:	20000534 	.word	0x20000534

08001c58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c58:	e7fe      	b.n	8001c58 <ADC_IRQHandler>
	...

08001c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c60:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <HAL_Init+0x40>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a0d      	ldr	r2, [pc, #52]	; (8001c9c <HAL_Init+0x40>)
 8001c66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <HAL_Init+0x40>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a0a      	ldr	r2, [pc, #40]	; (8001c9c <HAL_Init+0x40>)
 8001c72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c78:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <HAL_Init+0x40>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a07      	ldr	r2, [pc, #28]	; (8001c9c <HAL_Init+0x40>)
 8001c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c84:	2003      	movs	r0, #3
 8001c86:	f000 fba3 	bl	80023d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	f000 f808 	bl	8001ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c90:	f7ff fbca 	bl	8001428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40023c00 	.word	0x40023c00

08001ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ca8:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <HAL_InitTick+0x54>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <HAL_InitTick+0x58>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 fbad 	bl	800241e <HAL_SYSTICK_Config>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e00e      	b.n	8001cec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b0f      	cmp	r3, #15
 8001cd2:	d80a      	bhi.n	8001cea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cdc:	f000 fb83 	bl	80023e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ce0:	4a06      	ldr	r2, [pc, #24]	; (8001cfc <HAL_InitTick+0x5c>)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	e000      	b.n	8001cec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20000000 	.word	0x20000000
 8001cf8:	20000008 	.word	0x20000008
 8001cfc:	20000004 	.word	0x20000004

08001d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_IncTick+0x20>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_IncTick+0x24>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4413      	add	r3, r2
 8001d10:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <HAL_IncTick+0x24>)
 8001d12:	6013      	str	r3, [r2, #0]
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	20000008 	.word	0x20000008
 8001d24:	200003e4 	.word	0x200003e4

08001d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d2c:	4b03      	ldr	r3, [pc, #12]	; (8001d3c <HAL_GetTick+0x14>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	200003e4 	.word	0x200003e4

08001d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d48:	f7ff ffee 	bl	8001d28 <HAL_GetTick>
 8001d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d58:	d005      	beq.n	8001d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <HAL_Delay+0x44>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4413      	add	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d66:	bf00      	nop
 8001d68:	f7ff ffde 	bl	8001d28 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d8f7      	bhi.n	8001d68 <HAL_Delay+0x28>
  {
  }
}
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000008 	.word	0x20000008

08001d88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d90:	2300      	movs	r3, #0
 8001d92:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e033      	b.n	8001e06 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d109      	bne.n	8001dba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff fb66 	bl	8001478 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f003 0310 	and.w	r3, r3, #16
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d118      	bne.n	8001df8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001dce:	f023 0302 	bic.w	r3, r3, #2
 8001dd2:	f043 0202 	orr.w	r2, r3, #2
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f94a 	bl	8002074 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f023 0303 	bic.w	r3, r3, #3
 8001dee:	f043 0201 	orr.w	r2, r3, #1
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	641a      	str	r2, [r3, #64]	; 0x40
 8001df6:	e001      	b.n	8001dfc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d101      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x1c>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	e113      	b.n	8002054 <HAL_ADC_ConfigChannel+0x244>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b09      	cmp	r3, #9
 8001e3a:	d925      	bls.n	8001e88 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68d9      	ldr	r1, [r3, #12]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4413      	add	r3, r2
 8001e50:	3b1e      	subs	r3, #30
 8001e52:	2207      	movs	r2, #7
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43da      	mvns	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	400a      	ands	r2, r1
 8001e60:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68d9      	ldr	r1, [r3, #12]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	4618      	mov	r0, r3
 8001e74:	4603      	mov	r3, r0
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	4403      	add	r3, r0
 8001e7a:	3b1e      	subs	r3, #30
 8001e7c:	409a      	lsls	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	e022      	b.n	8001ece <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6919      	ldr	r1, [r3, #16]
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	461a      	mov	r2, r3
 8001e96:	4613      	mov	r3, r2
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	4413      	add	r3, r2
 8001e9c:	2207      	movs	r2, #7
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43da      	mvns	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	400a      	ands	r2, r1
 8001eaa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6919      	ldr	r1, [r3, #16]
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	4403      	add	r3, r0
 8001ec4:	409a      	lsls	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b06      	cmp	r3, #6
 8001ed4:	d824      	bhi.n	8001f20 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	3b05      	subs	r3, #5
 8001ee8:	221f      	movs	r2, #31
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43da      	mvns	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	400a      	ands	r2, r1
 8001ef6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	4618      	mov	r0, r3
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	3b05      	subs	r3, #5
 8001f12:	fa00 f203 	lsl.w	r2, r0, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	635a      	str	r2, [r3, #52]	; 0x34
 8001f1e:	e04c      	b.n	8001fba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b0c      	cmp	r3, #12
 8001f26:	d824      	bhi.n	8001f72 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	4613      	mov	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	3b23      	subs	r3, #35	; 0x23
 8001f3a:	221f      	movs	r2, #31
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43da      	mvns	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	400a      	ands	r2, r1
 8001f48:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	4618      	mov	r0, r3
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	3b23      	subs	r3, #35	; 0x23
 8001f64:	fa00 f203 	lsl.w	r2, r0, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	631a      	str	r2, [r3, #48]	; 0x30
 8001f70:	e023      	b.n	8001fba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	3b41      	subs	r3, #65	; 0x41
 8001f84:	221f      	movs	r2, #31
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43da      	mvns	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	400a      	ands	r2, r1
 8001f92:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	3b41      	subs	r3, #65	; 0x41
 8001fae:	fa00 f203 	lsl.w	r2, r0, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fba:	4b29      	ldr	r3, [pc, #164]	; (8002060 <HAL_ADC_ConfigChannel+0x250>)
 8001fbc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a28      	ldr	r2, [pc, #160]	; (8002064 <HAL_ADC_ConfigChannel+0x254>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d10f      	bne.n	8001fe8 <HAL_ADC_ConfigChannel+0x1d8>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b12      	cmp	r3, #18
 8001fce:	d10b      	bne.n	8001fe8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a1d      	ldr	r2, [pc, #116]	; (8002064 <HAL_ADC_ConfigChannel+0x254>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d12b      	bne.n	800204a <HAL_ADC_ConfigChannel+0x23a>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a1c      	ldr	r2, [pc, #112]	; (8002068 <HAL_ADC_ConfigChannel+0x258>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d003      	beq.n	8002004 <HAL_ADC_ConfigChannel+0x1f4>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b11      	cmp	r3, #17
 8002002:	d122      	bne.n	800204a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a11      	ldr	r2, [pc, #68]	; (8002068 <HAL_ADC_ConfigChannel+0x258>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d111      	bne.n	800204a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002026:	4b11      	ldr	r3, [pc, #68]	; (800206c <HAL_ADC_ConfigChannel+0x25c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a11      	ldr	r2, [pc, #68]	; (8002070 <HAL_ADC_ConfigChannel+0x260>)
 800202c:	fba2 2303 	umull	r2, r3, r2, r3
 8002030:	0c9a      	lsrs	r2, r3, #18
 8002032:	4613      	mov	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800203c:	e002      	b.n	8002044 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	3b01      	subs	r3, #1
 8002042:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f9      	bne.n	800203e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	40012300 	.word	0x40012300
 8002064:	40012000 	.word	0x40012000
 8002068:	10000012 	.word	0x10000012
 800206c:	20000000 	.word	0x20000000
 8002070:	431bde83 	.word	0x431bde83

08002074 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800207c:	4b79      	ldr	r3, [pc, #484]	; (8002264 <ADC_Init+0x1f0>)
 800207e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	431a      	orrs	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6859      	ldr	r1, [r3, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	021a      	lsls	r2, r3, #8
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6859      	ldr	r1, [r3, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6899      	ldr	r1, [r3, #8]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002106:	4a58      	ldr	r2, [pc, #352]	; (8002268 <ADC_Init+0x1f4>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d022      	beq.n	8002152 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800211a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6899      	ldr	r1, [r3, #8]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800213c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6899      	ldr	r1, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	e00f      	b.n	8002172 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002160:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002170:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0202 	bic.w	r2, r2, #2
 8002180:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6899      	ldr	r1, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	7e1b      	ldrb	r3, [r3, #24]
 800218c:	005a      	lsls	r2, r3, #1
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 3020 	ldrb.w	r3, [r3, #32]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d01b      	beq.n	80021d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6859      	ldr	r1, [r3, #4]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	3b01      	subs	r3, #1
 80021cc:	035a      	lsls	r2, r3, #13
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	e007      	b.n	80021e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	3b01      	subs	r3, #1
 8002204:	051a      	lsls	r2, r3, #20
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	430a      	orrs	r2, r1
 800220c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800221c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6899      	ldr	r1, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800222a:	025a      	lsls	r2, r3, #9
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002242:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6899      	ldr	r1, [r3, #8]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	029a      	lsls	r2, r3, #10
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	609a      	str	r2, [r3, #8]
}
 8002258:	bf00      	nop
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	40012300 	.word	0x40012300
 8002268:	0f000001 	.word	0x0f000001

0800226c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800227c:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <__NVIC_SetPriorityGrouping+0x44>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002288:	4013      	ands	r3, r2
 800228a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002294:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800229c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800229e:	4a04      	ldr	r2, [pc, #16]	; (80022b0 <__NVIC_SetPriorityGrouping+0x44>)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	60d3      	str	r3, [r2, #12]
}
 80022a4:	bf00      	nop
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b8:	4b04      	ldr	r3, [pc, #16]	; (80022cc <__NVIC_GetPriorityGrouping+0x18>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	0a1b      	lsrs	r3, r3, #8
 80022be:	f003 0307 	and.w	r3, r3, #7
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	6039      	str	r1, [r7, #0]
 80022da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	db0a      	blt.n	80022fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	490c      	ldr	r1, [pc, #48]	; (800231c <__NVIC_SetPriority+0x4c>)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	0112      	lsls	r2, r2, #4
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	440b      	add	r3, r1
 80022f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022f8:	e00a      	b.n	8002310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	4908      	ldr	r1, [pc, #32]	; (8002320 <__NVIC_SetPriority+0x50>)
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	3b04      	subs	r3, #4
 8002308:	0112      	lsls	r2, r2, #4
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	440b      	add	r3, r1
 800230e:	761a      	strb	r2, [r3, #24]
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000e100 	.word	0xe000e100
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002324:	b480      	push	{r7}
 8002326:	b089      	sub	sp, #36	; 0x24
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f1c3 0307 	rsb	r3, r3, #7
 800233e:	2b04      	cmp	r3, #4
 8002340:	bf28      	it	cs
 8002342:	2304      	movcs	r3, #4
 8002344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	3304      	adds	r3, #4
 800234a:	2b06      	cmp	r3, #6
 800234c:	d902      	bls.n	8002354 <NVIC_EncodePriority+0x30>
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3b03      	subs	r3, #3
 8002352:	e000      	b.n	8002356 <NVIC_EncodePriority+0x32>
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002358:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43da      	mvns	r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	401a      	ands	r2, r3
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800236c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	fa01 f303 	lsl.w	r3, r1, r3
 8002376:	43d9      	mvns	r1, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800237c:	4313      	orrs	r3, r2
         );
}
 800237e:	4618      	mov	r0, r3
 8002380:	3724      	adds	r7, #36	; 0x24
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3b01      	subs	r3, #1
 8002398:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800239c:	d301      	bcc.n	80023a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800239e:	2301      	movs	r3, #1
 80023a0:	e00f      	b.n	80023c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023a2:	4a0a      	ldr	r2, [pc, #40]	; (80023cc <SysTick_Config+0x40>)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023aa:	210f      	movs	r1, #15
 80023ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023b0:	f7ff ff8e 	bl	80022d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <SysTick_Config+0x40>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ba:	4b04      	ldr	r3, [pc, #16]	; (80023cc <SysTick_Config+0x40>)
 80023bc:	2207      	movs	r2, #7
 80023be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	e000e010 	.word	0xe000e010

080023d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff ff47 	bl	800226c <__NVIC_SetPriorityGrouping>
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b086      	sub	sp, #24
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023f8:	f7ff ff5c 	bl	80022b4 <__NVIC_GetPriorityGrouping>
 80023fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	68b9      	ldr	r1, [r7, #8]
 8002402:	6978      	ldr	r0, [r7, #20]
 8002404:	f7ff ff8e 	bl	8002324 <NVIC_EncodePriority>
 8002408:	4602      	mov	r2, r0
 800240a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800240e:	4611      	mov	r1, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ff5d 	bl	80022d0 <__NVIC_SetPriority>
}
 8002416:	bf00      	nop
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7ff ffb0 	bl	800238c <SysTick_Config>
 800242c:	4603      	mov	r3, r0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002438:	b480      	push	{r7}
 800243a:	b089      	sub	sp, #36	; 0x24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002446:	2300      	movs	r3, #0
 8002448:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800244a:	2300      	movs	r3, #0
 800244c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
 8002452:	e165      	b.n	8002720 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002454:	2201      	movs	r2, #1
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	4013      	ands	r3, r2
 8002466:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	429a      	cmp	r2, r3
 800246e:	f040 8154 	bne.w	800271a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	2b01      	cmp	r3, #1
 800247c:	d005      	beq.n	800248a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002486:	2b02      	cmp	r3, #2
 8002488:	d130      	bne.n	80024ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	2203      	movs	r2, #3
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4013      	ands	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024c0:	2201      	movs	r2, #1
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	091b      	lsrs	r3, r3, #4
 80024d6:	f003 0201 	and.w	r2, r3, #1
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 0303 	and.w	r3, r3, #3
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d017      	beq.n	8002528 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	2203      	movs	r2, #3
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 0303 	and.w	r3, r3, #3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d123      	bne.n	800257c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	08da      	lsrs	r2, r3, #3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3208      	adds	r2, #8
 800253c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002540:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	220f      	movs	r2, #15
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4313      	orrs	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	08da      	lsrs	r2, r3, #3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3208      	adds	r2, #8
 8002576:	69b9      	ldr	r1, [r7, #24]
 8002578:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	2203      	movs	r2, #3
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 0203 	and.w	r2, r3, #3
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 80ae 	beq.w	800271a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	4b5d      	ldr	r3, [pc, #372]	; (8002738 <HAL_GPIO_Init+0x300>)
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c6:	4a5c      	ldr	r2, [pc, #368]	; (8002738 <HAL_GPIO_Init+0x300>)
 80025c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025cc:	6453      	str	r3, [r2, #68]	; 0x44
 80025ce:	4b5a      	ldr	r3, [pc, #360]	; (8002738 <HAL_GPIO_Init+0x300>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025da:	4a58      	ldr	r2, [pc, #352]	; (800273c <HAL_GPIO_Init+0x304>)
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	089b      	lsrs	r3, r3, #2
 80025e0:	3302      	adds	r3, #2
 80025e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	220f      	movs	r2, #15
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	43db      	mvns	r3, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4013      	ands	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a4f      	ldr	r2, [pc, #316]	; (8002740 <HAL_GPIO_Init+0x308>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d025      	beq.n	8002652 <HAL_GPIO_Init+0x21a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a4e      	ldr	r2, [pc, #312]	; (8002744 <HAL_GPIO_Init+0x30c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d01f      	beq.n	800264e <HAL_GPIO_Init+0x216>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a4d      	ldr	r2, [pc, #308]	; (8002748 <HAL_GPIO_Init+0x310>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d019      	beq.n	800264a <HAL_GPIO_Init+0x212>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a4c      	ldr	r2, [pc, #304]	; (800274c <HAL_GPIO_Init+0x314>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d013      	beq.n	8002646 <HAL_GPIO_Init+0x20e>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a4b      	ldr	r2, [pc, #300]	; (8002750 <HAL_GPIO_Init+0x318>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d00d      	beq.n	8002642 <HAL_GPIO_Init+0x20a>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a4a      	ldr	r2, [pc, #296]	; (8002754 <HAL_GPIO_Init+0x31c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d007      	beq.n	800263e <HAL_GPIO_Init+0x206>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a49      	ldr	r2, [pc, #292]	; (8002758 <HAL_GPIO_Init+0x320>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d101      	bne.n	800263a <HAL_GPIO_Init+0x202>
 8002636:	2306      	movs	r3, #6
 8002638:	e00c      	b.n	8002654 <HAL_GPIO_Init+0x21c>
 800263a:	2307      	movs	r3, #7
 800263c:	e00a      	b.n	8002654 <HAL_GPIO_Init+0x21c>
 800263e:	2305      	movs	r3, #5
 8002640:	e008      	b.n	8002654 <HAL_GPIO_Init+0x21c>
 8002642:	2304      	movs	r3, #4
 8002644:	e006      	b.n	8002654 <HAL_GPIO_Init+0x21c>
 8002646:	2303      	movs	r3, #3
 8002648:	e004      	b.n	8002654 <HAL_GPIO_Init+0x21c>
 800264a:	2302      	movs	r3, #2
 800264c:	e002      	b.n	8002654 <HAL_GPIO_Init+0x21c>
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <HAL_GPIO_Init+0x21c>
 8002652:	2300      	movs	r3, #0
 8002654:	69fa      	ldr	r2, [r7, #28]
 8002656:	f002 0203 	and.w	r2, r2, #3
 800265a:	0092      	lsls	r2, r2, #2
 800265c:	4093      	lsls	r3, r2
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4313      	orrs	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002664:	4935      	ldr	r1, [pc, #212]	; (800273c <HAL_GPIO_Init+0x304>)
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	089b      	lsrs	r3, r3, #2
 800266a:	3302      	adds	r3, #2
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002672:	4b3a      	ldr	r3, [pc, #232]	; (800275c <HAL_GPIO_Init+0x324>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	43db      	mvns	r3, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4013      	ands	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	4313      	orrs	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002696:	4a31      	ldr	r2, [pc, #196]	; (800275c <HAL_GPIO_Init+0x324>)
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800269c:	4b2f      	ldr	r3, [pc, #188]	; (800275c <HAL_GPIO_Init+0x324>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026c0:	4a26      	ldr	r2, [pc, #152]	; (800275c <HAL_GPIO_Init+0x324>)
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026c6:	4b25      	ldr	r3, [pc, #148]	; (800275c <HAL_GPIO_Init+0x324>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	43db      	mvns	r3, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4013      	ands	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026ea:	4a1c      	ldr	r2, [pc, #112]	; (800275c <HAL_GPIO_Init+0x324>)
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026f0:	4b1a      	ldr	r3, [pc, #104]	; (800275c <HAL_GPIO_Init+0x324>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	43db      	mvns	r3, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4013      	ands	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4313      	orrs	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002714:	4a11      	ldr	r2, [pc, #68]	; (800275c <HAL_GPIO_Init+0x324>)
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	3301      	adds	r3, #1
 800271e:	61fb      	str	r3, [r7, #28]
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	2b0f      	cmp	r3, #15
 8002724:	f67f ae96 	bls.w	8002454 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002728:	bf00      	nop
 800272a:	bf00      	nop
 800272c:	3724      	adds	r7, #36	; 0x24
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	40023800 	.word	0x40023800
 800273c:	40013800 	.word	0x40013800
 8002740:	40020000 	.word	0x40020000
 8002744:	40020400 	.word	0x40020400
 8002748:	40020800 	.word	0x40020800
 800274c:	40020c00 	.word	0x40020c00
 8002750:	40021000 	.word	0x40021000
 8002754:	40021400 	.word	0x40021400
 8002758:	40021800 	.word	0x40021800
 800275c:	40013c00 	.word	0x40013c00

08002760 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002766:	2300      	movs	r3, #0
 8002768:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	603b      	str	r3, [r7, #0]
 800276e:	4b20      	ldr	r3, [pc, #128]	; (80027f0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4a1f      	ldr	r2, [pc, #124]	; (80027f0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002778:	6413      	str	r3, [r2, #64]	; 0x40
 800277a:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <HAL_PWREx_EnableOverDrive+0x90>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002782:	603b      	str	r3, [r7, #0]
 8002784:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002786:	4b1b      	ldr	r3, [pc, #108]	; (80027f4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002788:	2201      	movs	r2, #1
 800278a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800278c:	f7ff facc 	bl	8001d28 <HAL_GetTick>
 8002790:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002792:	e009      	b.n	80027a8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002794:	f7ff fac8 	bl	8001d28 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027a2:	d901      	bls.n	80027a8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e01f      	b.n	80027e8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027a8:	4b13      	ldr	r3, [pc, #76]	; (80027f8 <HAL_PWREx_EnableOverDrive+0x98>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b4:	d1ee      	bne.n	8002794 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80027b6:	4b11      	ldr	r3, [pc, #68]	; (80027fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027bc:	f7ff fab4 	bl	8001d28 <HAL_GetTick>
 80027c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027c2:	e009      	b.n	80027d8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027c4:	f7ff fab0 	bl	8001d28 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027d2:	d901      	bls.n	80027d8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e007      	b.n	80027e8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027d8:	4b07      	ldr	r3, [pc, #28]	; (80027f8 <HAL_PWREx_EnableOverDrive+0x98>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027e4:	d1ee      	bne.n	80027c4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40023800 	.word	0x40023800
 80027f4:	420e0040 	.word	0x420e0040
 80027f8:	40007000 	.word	0x40007000
 80027fc:	420e0044 	.word	0x420e0044

08002800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0cc      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002814:	4b68      	ldr	r3, [pc, #416]	; (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 030f 	and.w	r3, r3, #15
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d90c      	bls.n	800283c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002822:	4b65      	ldr	r3, [pc, #404]	; (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800282a:	4b63      	ldr	r3, [pc, #396]	; (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	d001      	beq.n	800283c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0b8      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d020      	beq.n	800288a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002854:	4b59      	ldr	r3, [pc, #356]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	4a58      	ldr	r2, [pc, #352]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800285e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800286c:	4b53      	ldr	r3, [pc, #332]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	4a52      	ldr	r2, [pc, #328]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002876:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002878:	4b50      	ldr	r3, [pc, #320]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	494d      	ldr	r1, [pc, #308]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002886:	4313      	orrs	r3, r2
 8002888:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d044      	beq.n	8002920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d107      	bne.n	80028ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289e:	4b47      	ldr	r3, [pc, #284]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d119      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e07f      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d003      	beq.n	80028be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d107      	bne.n	80028ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028be:	4b3f      	ldr	r3, [pc, #252]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d109      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e06f      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ce:	4b3b      	ldr	r3, [pc, #236]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e067      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028de:	4b37      	ldr	r3, [pc, #220]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f023 0203 	bic.w	r2, r3, #3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	4934      	ldr	r1, [pc, #208]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028f0:	f7ff fa1a 	bl	8001d28 <HAL_GetTick>
 80028f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f6:	e00a      	b.n	800290e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f8:	f7ff fa16 	bl	8001d28 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f241 3288 	movw	r2, #5000	; 0x1388
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e04f      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290e:	4b2b      	ldr	r3, [pc, #172]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 020c 	and.w	r2, r3, #12
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	429a      	cmp	r2, r3
 800291e:	d1eb      	bne.n	80028f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002920:	4b25      	ldr	r3, [pc, #148]	; (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 030f 	and.w	r3, r3, #15
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d20c      	bcs.n	8002948 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292e:	4b22      	ldr	r3, [pc, #136]	; (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002936:	4b20      	ldr	r3, [pc, #128]	; (80029b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e032      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d008      	beq.n	8002966 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002954:	4b19      	ldr	r3, [pc, #100]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	4916      	ldr	r1, [pc, #88]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	4313      	orrs	r3, r2
 8002964:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d009      	beq.n	8002986 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002972:	4b12      	ldr	r3, [pc, #72]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	490e      	ldr	r1, [pc, #56]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	4313      	orrs	r3, r2
 8002984:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002986:	f000 f855 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 800298a:	4602      	mov	r2, r0
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	490a      	ldr	r1, [pc, #40]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002998:	5ccb      	ldrb	r3, [r1, r3]
 800299a:	fa22 f303 	lsr.w	r3, r2, r3
 800299e:	4a09      	ldr	r2, [pc, #36]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 80029a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029a2:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <HAL_RCC_ClockConfig+0x1c8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff f97a 	bl	8001ca0 <HAL_InitTick>

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40023c00 	.word	0x40023c00
 80029bc:	40023800 	.word	0x40023800
 80029c0:	080060a0 	.word	0x080060a0
 80029c4:	20000000 	.word	0x20000000
 80029c8:	20000004 	.word	0x20000004

080029cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029d0:	4b03      	ldr	r3, [pc, #12]	; (80029e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80029d2:	681b      	ldr	r3, [r3, #0]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	20000000 	.word	0x20000000

080029e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029e8:	f7ff fff0 	bl	80029cc <HAL_RCC_GetHCLKFreq>
 80029ec:	4602      	mov	r2, r0
 80029ee:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	0a9b      	lsrs	r3, r3, #10
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	4903      	ldr	r1, [pc, #12]	; (8002a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029fa:	5ccb      	ldrb	r3, [r1, r3]
 80029fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40023800 	.word	0x40023800
 8002a08:	080060b0 	.word	0x080060b0

08002a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a10:	f7ff ffdc 	bl	80029cc <HAL_RCC_GetHCLKFreq>
 8002a14:	4602      	mov	r2, r0
 8002a16:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	0b5b      	lsrs	r3, r3, #13
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	4903      	ldr	r1, [pc, #12]	; (8002a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a22:	5ccb      	ldrb	r3, [r1, r3]
 8002a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	080060b0 	.word	0x080060b0

08002a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a38:	b0ae      	sub	sp, #184	; 0xb8
 8002a3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a5a:	4bcb      	ldr	r3, [pc, #812]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 030c 	and.w	r3, r3, #12
 8002a62:	2b0c      	cmp	r3, #12
 8002a64:	f200 8206 	bhi.w	8002e74 <HAL_RCC_GetSysClockFreq+0x440>
 8002a68:	a201      	add	r2, pc, #4	; (adr r2, 8002a70 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a6e:	bf00      	nop
 8002a70:	08002aa5 	.word	0x08002aa5
 8002a74:	08002e75 	.word	0x08002e75
 8002a78:	08002e75 	.word	0x08002e75
 8002a7c:	08002e75 	.word	0x08002e75
 8002a80:	08002aad 	.word	0x08002aad
 8002a84:	08002e75 	.word	0x08002e75
 8002a88:	08002e75 	.word	0x08002e75
 8002a8c:	08002e75 	.word	0x08002e75
 8002a90:	08002ab5 	.word	0x08002ab5
 8002a94:	08002e75 	.word	0x08002e75
 8002a98:	08002e75 	.word	0x08002e75
 8002a9c:	08002e75 	.word	0x08002e75
 8002aa0:	08002ca5 	.word	0x08002ca5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002aa4:	4bb9      	ldr	r3, [pc, #740]	; (8002d8c <HAL_RCC_GetSysClockFreq+0x358>)
 8002aa6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002aaa:	e1e7      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002aac:	4bb8      	ldr	r3, [pc, #736]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002aae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ab2:	e1e3      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ab4:	4bb4      	ldr	r3, [pc, #720]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002abc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ac0:	4bb1      	ldr	r3, [pc, #708]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d071      	beq.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002acc:	4bae      	ldr	r3, [pc, #696]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	099b      	lsrs	r3, r3, #6
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ad8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002adc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ae4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ae8:	2300      	movs	r3, #0
 8002aea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002aee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002af2:	4622      	mov	r2, r4
 8002af4:	462b      	mov	r3, r5
 8002af6:	f04f 0000 	mov.w	r0, #0
 8002afa:	f04f 0100 	mov.w	r1, #0
 8002afe:	0159      	lsls	r1, r3, #5
 8002b00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b04:	0150      	lsls	r0, r2, #5
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4621      	mov	r1, r4
 8002b0c:	1a51      	subs	r1, r2, r1
 8002b0e:	6439      	str	r1, [r7, #64]	; 0x40
 8002b10:	4629      	mov	r1, r5
 8002b12:	eb63 0301 	sbc.w	r3, r3, r1
 8002b16:	647b      	str	r3, [r7, #68]	; 0x44
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002b24:	4649      	mov	r1, r9
 8002b26:	018b      	lsls	r3, r1, #6
 8002b28:	4641      	mov	r1, r8
 8002b2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b2e:	4641      	mov	r1, r8
 8002b30:	018a      	lsls	r2, r1, #6
 8002b32:	4641      	mov	r1, r8
 8002b34:	1a51      	subs	r1, r2, r1
 8002b36:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b38:	4649      	mov	r1, r9
 8002b3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	f04f 0300 	mov.w	r3, #0
 8002b48:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002b4c:	4649      	mov	r1, r9
 8002b4e:	00cb      	lsls	r3, r1, #3
 8002b50:	4641      	mov	r1, r8
 8002b52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b56:	4641      	mov	r1, r8
 8002b58:	00ca      	lsls	r2, r1, #3
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4603      	mov	r3, r0
 8002b60:	4622      	mov	r2, r4
 8002b62:	189b      	adds	r3, r3, r2
 8002b64:	633b      	str	r3, [r7, #48]	; 0x30
 8002b66:	462b      	mov	r3, r5
 8002b68:	460a      	mov	r2, r1
 8002b6a:	eb42 0303 	adc.w	r3, r2, r3
 8002b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b7c:	4629      	mov	r1, r5
 8002b7e:	024b      	lsls	r3, r1, #9
 8002b80:	4621      	mov	r1, r4
 8002b82:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b86:	4621      	mov	r1, r4
 8002b88:	024a      	lsls	r2, r1, #9
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b92:	2200      	movs	r2, #0
 8002b94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002b9c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002ba0:	f7fd fb86 	bl	80002b0 <__aeabi_uldivmod>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4613      	mov	r3, r2
 8002baa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bae:	e067      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bb0:	4b75      	ldr	r3, [pc, #468]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	099b      	lsrs	r3, r3, #6
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002bbc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002bc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bc8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002bca:	2300      	movs	r3, #0
 8002bcc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002bce:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002bd2:	4622      	mov	r2, r4
 8002bd4:	462b      	mov	r3, r5
 8002bd6:	f04f 0000 	mov.w	r0, #0
 8002bda:	f04f 0100 	mov.w	r1, #0
 8002bde:	0159      	lsls	r1, r3, #5
 8002be0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002be4:	0150      	lsls	r0, r2, #5
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4621      	mov	r1, r4
 8002bec:	1a51      	subs	r1, r2, r1
 8002bee:	62b9      	str	r1, [r7, #40]	; 0x28
 8002bf0:	4629      	mov	r1, r5
 8002bf2:	eb63 0301 	sbc.w	r3, r3, r1
 8002bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002c04:	4649      	mov	r1, r9
 8002c06:	018b      	lsls	r3, r1, #6
 8002c08:	4641      	mov	r1, r8
 8002c0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c0e:	4641      	mov	r1, r8
 8002c10:	018a      	lsls	r2, r1, #6
 8002c12:	4641      	mov	r1, r8
 8002c14:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c18:	4649      	mov	r1, r9
 8002c1a:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	f04f 0300 	mov.w	r3, #0
 8002c26:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c2a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c32:	4692      	mov	sl, r2
 8002c34:	469b      	mov	fp, r3
 8002c36:	4623      	mov	r3, r4
 8002c38:	eb1a 0303 	adds.w	r3, sl, r3
 8002c3c:	623b      	str	r3, [r7, #32]
 8002c3e:	462b      	mov	r3, r5
 8002c40:	eb4b 0303 	adc.w	r3, fp, r3
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
 8002c46:	f04f 0200 	mov.w	r2, #0
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c52:	4629      	mov	r1, r5
 8002c54:	028b      	lsls	r3, r1, #10
 8002c56:	4621      	mov	r1, r4
 8002c58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c5c:	4621      	mov	r1, r4
 8002c5e:	028a      	lsls	r2, r1, #10
 8002c60:	4610      	mov	r0, r2
 8002c62:	4619      	mov	r1, r3
 8002c64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c68:	2200      	movs	r2, #0
 8002c6a:	673b      	str	r3, [r7, #112]	; 0x70
 8002c6c:	677a      	str	r2, [r7, #116]	; 0x74
 8002c6e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002c72:	f7fd fb1d 	bl	80002b0 <__aeabi_uldivmod>
 8002c76:	4602      	mov	r2, r0
 8002c78:	460b      	mov	r3, r1
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c80:	4b41      	ldr	r3, [pc, #260]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	0c1b      	lsrs	r3, r3, #16
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002c92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ca2:	e0eb      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ca4:	4b38      	ldr	r3, [pc, #224]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cb0:	4b35      	ldr	r3, [pc, #212]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d06b      	beq.n	8002d94 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cbc:	4b32      	ldr	r3, [pc, #200]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	099b      	lsrs	r3, r3, #6
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cc6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002cc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cce:	663b      	str	r3, [r7, #96]	; 0x60
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	667b      	str	r3, [r7, #100]	; 0x64
 8002cd4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002cd8:	4622      	mov	r2, r4
 8002cda:	462b      	mov	r3, r5
 8002cdc:	f04f 0000 	mov.w	r0, #0
 8002ce0:	f04f 0100 	mov.w	r1, #0
 8002ce4:	0159      	lsls	r1, r3, #5
 8002ce6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cea:	0150      	lsls	r0, r2, #5
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4621      	mov	r1, r4
 8002cf2:	1a51      	subs	r1, r2, r1
 8002cf4:	61b9      	str	r1, [r7, #24]
 8002cf6:	4629      	mov	r1, r5
 8002cf8:	eb63 0301 	sbc.w	r3, r3, r1
 8002cfc:	61fb      	str	r3, [r7, #28]
 8002cfe:	f04f 0200 	mov.w	r2, #0
 8002d02:	f04f 0300 	mov.w	r3, #0
 8002d06:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002d0a:	4659      	mov	r1, fp
 8002d0c:	018b      	lsls	r3, r1, #6
 8002d0e:	4651      	mov	r1, sl
 8002d10:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d14:	4651      	mov	r1, sl
 8002d16:	018a      	lsls	r2, r1, #6
 8002d18:	4651      	mov	r1, sl
 8002d1a:	ebb2 0801 	subs.w	r8, r2, r1
 8002d1e:	4659      	mov	r1, fp
 8002d20:	eb63 0901 	sbc.w	r9, r3, r1
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d30:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d34:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d38:	4690      	mov	r8, r2
 8002d3a:	4699      	mov	r9, r3
 8002d3c:	4623      	mov	r3, r4
 8002d3e:	eb18 0303 	adds.w	r3, r8, r3
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	462b      	mov	r3, r5
 8002d46:	eb49 0303 	adc.w	r3, r9, r3
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	f04f 0300 	mov.w	r3, #0
 8002d54:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002d58:	4629      	mov	r1, r5
 8002d5a:	024b      	lsls	r3, r1, #9
 8002d5c:	4621      	mov	r1, r4
 8002d5e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d62:	4621      	mov	r1, r4
 8002d64:	024a      	lsls	r2, r1, #9
 8002d66:	4610      	mov	r0, r2
 8002d68:	4619      	mov	r1, r3
 8002d6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d6e:	2200      	movs	r2, #0
 8002d70:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d72:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002d74:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d78:	f7fd fa9a 	bl	80002b0 <__aeabi_uldivmod>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4613      	mov	r3, r2
 8002d82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d86:	e065      	b.n	8002e54 <HAL_RCC_GetSysClockFreq+0x420>
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	00f42400 	.word	0x00f42400
 8002d90:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d94:	4b3d      	ldr	r3, [pc, #244]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x458>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	099b      	lsrs	r3, r3, #6
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	4611      	mov	r1, r2
 8002da0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002da4:	653b      	str	r3, [r7, #80]	; 0x50
 8002da6:	2300      	movs	r3, #0
 8002da8:	657b      	str	r3, [r7, #84]	; 0x54
 8002daa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002dae:	4642      	mov	r2, r8
 8002db0:	464b      	mov	r3, r9
 8002db2:	f04f 0000 	mov.w	r0, #0
 8002db6:	f04f 0100 	mov.w	r1, #0
 8002dba:	0159      	lsls	r1, r3, #5
 8002dbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dc0:	0150      	lsls	r0, r2, #5
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4641      	mov	r1, r8
 8002dc8:	1a51      	subs	r1, r2, r1
 8002dca:	60b9      	str	r1, [r7, #8]
 8002dcc:	4649      	mov	r1, r9
 8002dce:	eb63 0301 	sbc.w	r3, r3, r1
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	f04f 0300 	mov.w	r3, #0
 8002ddc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002de0:	4659      	mov	r1, fp
 8002de2:	018b      	lsls	r3, r1, #6
 8002de4:	4651      	mov	r1, sl
 8002de6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dea:	4651      	mov	r1, sl
 8002dec:	018a      	lsls	r2, r1, #6
 8002dee:	4651      	mov	r1, sl
 8002df0:	1a54      	subs	r4, r2, r1
 8002df2:	4659      	mov	r1, fp
 8002df4:	eb63 0501 	sbc.w	r5, r3, r1
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	f04f 0300 	mov.w	r3, #0
 8002e00:	00eb      	lsls	r3, r5, #3
 8002e02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e06:	00e2      	lsls	r2, r4, #3
 8002e08:	4614      	mov	r4, r2
 8002e0a:	461d      	mov	r5, r3
 8002e0c:	4643      	mov	r3, r8
 8002e0e:	18e3      	adds	r3, r4, r3
 8002e10:	603b      	str	r3, [r7, #0]
 8002e12:	464b      	mov	r3, r9
 8002e14:	eb45 0303 	adc.w	r3, r5, r3
 8002e18:	607b      	str	r3, [r7, #4]
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e26:	4629      	mov	r1, r5
 8002e28:	028b      	lsls	r3, r1, #10
 8002e2a:	4621      	mov	r1, r4
 8002e2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e30:	4621      	mov	r1, r4
 8002e32:	028a      	lsls	r2, r1, #10
 8002e34:	4610      	mov	r0, r2
 8002e36:	4619      	mov	r1, r3
 8002e38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e40:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002e42:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e46:	f7fd fa33 	bl	80002b0 <__aeabi_uldivmod>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4613      	mov	r3, r2
 8002e50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e54:	4b0d      	ldr	r3, [pc, #52]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x458>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	0f1b      	lsrs	r3, r3, #28
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002e62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e72:	e003      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e74:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002e76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	37b8      	adds	r7, #184	; 0xb8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	00f42400 	.word	0x00f42400

08002e94 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e28d      	b.n	80033c2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 8083 	beq.w	8002fba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002eb4:	4b94      	ldr	r3, [pc, #592]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 030c 	and.w	r3, r3, #12
 8002ebc:	2b04      	cmp	r3, #4
 8002ebe:	d019      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ec0:	4b91      	ldr	r3, [pc, #580]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	d106      	bne.n	8002eda <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ecc:	4b8e      	ldr	r3, [pc, #568]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ed4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ed8:	d00c      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eda:	4b8b      	ldr	r3, [pc, #556]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ee2:	2b0c      	cmp	r3, #12
 8002ee4:	d112      	bne.n	8002f0c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ee6:	4b88      	ldr	r3, [pc, #544]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ef2:	d10b      	bne.n	8002f0c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef4:	4b84      	ldr	r3, [pc, #528]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d05b      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x124>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d157      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e25a      	b.n	80033c2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f14:	d106      	bne.n	8002f24 <HAL_RCC_OscConfig+0x90>
 8002f16:	4b7c      	ldr	r3, [pc, #496]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a7b      	ldr	r2, [pc, #492]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 8002f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	e01d      	b.n	8002f60 <HAL_RCC_OscConfig+0xcc>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f2c:	d10c      	bne.n	8002f48 <HAL_RCC_OscConfig+0xb4>
 8002f2e:	4b76      	ldr	r3, [pc, #472]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a75      	ldr	r2, [pc, #468]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 8002f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	4b73      	ldr	r3, [pc, #460]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a72      	ldr	r2, [pc, #456]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 8002f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	e00b      	b.n	8002f60 <HAL_RCC_OscConfig+0xcc>
 8002f48:	4b6f      	ldr	r3, [pc, #444]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a6e      	ldr	r2, [pc, #440]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 8002f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f52:	6013      	str	r3, [r2, #0]
 8002f54:	4b6c      	ldr	r3, [pc, #432]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a6b      	ldr	r2, [pc, #428]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 8002f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d013      	beq.n	8002f90 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f68:	f7fe fede 	bl	8001d28 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f70:	f7fe feda 	bl	8001d28 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b64      	cmp	r3, #100	; 0x64
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e21f      	b.n	80033c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f82:	4b61      	ldr	r3, [pc, #388]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0f0      	beq.n	8002f70 <HAL_RCC_OscConfig+0xdc>
 8002f8e:	e014      	b.n	8002fba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f90:	f7fe feca 	bl	8001d28 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f98:	f7fe fec6 	bl	8001d28 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b64      	cmp	r3, #100	; 0x64
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e20b      	b.n	80033c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002faa:	4b57      	ldr	r3, [pc, #348]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f0      	bne.n	8002f98 <HAL_RCC_OscConfig+0x104>
 8002fb6:	e000      	b.n	8002fba <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d06f      	beq.n	80030a6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002fc6:	4b50      	ldr	r3, [pc, #320]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 030c 	and.w	r3, r3, #12
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d017      	beq.n	8003002 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fd2:	4b4d      	ldr	r3, [pc, #308]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002fda:	2b08      	cmp	r3, #8
 8002fdc:	d105      	bne.n	8002fea <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fde:	4b4a      	ldr	r3, [pc, #296]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00b      	beq.n	8003002 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fea:	4b47      	ldr	r3, [pc, #284]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ff2:	2b0c      	cmp	r3, #12
 8002ff4:	d11c      	bne.n	8003030 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ff6:	4b44      	ldr	r3, [pc, #272]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d116      	bne.n	8003030 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003002:	4b41      	ldr	r3, [pc, #260]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d005      	beq.n	800301a <HAL_RCC_OscConfig+0x186>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d001      	beq.n	800301a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e1d3      	b.n	80033c2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301a:	4b3b      	ldr	r3, [pc, #236]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	4937      	ldr	r1, [pc, #220]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 800302a:	4313      	orrs	r3, r2
 800302c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800302e:	e03a      	b.n	80030a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d020      	beq.n	800307a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003038:	4b34      	ldr	r3, [pc, #208]	; (800310c <HAL_RCC_OscConfig+0x278>)
 800303a:	2201      	movs	r2, #1
 800303c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303e:	f7fe fe73 	bl	8001d28 <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003046:	f7fe fe6f 	bl	8001d28 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e1b4      	b.n	80033c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003058:	4b2b      	ldr	r3, [pc, #172]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0f0      	beq.n	8003046 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003064:	4b28      	ldr	r3, [pc, #160]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	4925      	ldr	r1, [pc, #148]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 8003074:	4313      	orrs	r3, r2
 8003076:	600b      	str	r3, [r1, #0]
 8003078:	e015      	b.n	80030a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800307a:	4b24      	ldr	r3, [pc, #144]	; (800310c <HAL_RCC_OscConfig+0x278>)
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003080:	f7fe fe52 	bl	8001d28 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003088:	f7fe fe4e 	bl	8001d28 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e193      	b.n	80033c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309a:	4b1b      	ldr	r3, [pc, #108]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f0      	bne.n	8003088 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d036      	beq.n	8003120 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d016      	beq.n	80030e8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ba:	4b15      	ldr	r3, [pc, #84]	; (8003110 <HAL_RCC_OscConfig+0x27c>)
 80030bc:	2201      	movs	r2, #1
 80030be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c0:	f7fe fe32 	bl	8001d28 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030c8:	f7fe fe2e 	bl	8001d28 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e173      	b.n	80033c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030da:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 80030dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCC_OscConfig+0x234>
 80030e6:	e01b      	b.n	8003120 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030e8:	4b09      	ldr	r3, [pc, #36]	; (8003110 <HAL_RCC_OscConfig+0x27c>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ee:	f7fe fe1b 	bl	8001d28 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f4:	e00e      	b.n	8003114 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030f6:	f7fe fe17 	bl	8001d28 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d907      	bls.n	8003114 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e15c      	b.n	80033c2 <HAL_RCC_OscConfig+0x52e>
 8003108:	40023800 	.word	0x40023800
 800310c:	42470000 	.word	0x42470000
 8003110:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003114:	4b8a      	ldr	r3, [pc, #552]	; (8003340 <HAL_RCC_OscConfig+0x4ac>)
 8003116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1ea      	bne.n	80030f6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 8097 	beq.w	800325c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800312e:	2300      	movs	r3, #0
 8003130:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003132:	4b83      	ldr	r3, [pc, #524]	; (8003340 <HAL_RCC_OscConfig+0x4ac>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10f      	bne.n	800315e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	60bb      	str	r3, [r7, #8]
 8003142:	4b7f      	ldr	r3, [pc, #508]	; (8003340 <HAL_RCC_OscConfig+0x4ac>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	4a7e      	ldr	r2, [pc, #504]	; (8003340 <HAL_RCC_OscConfig+0x4ac>)
 8003148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800314c:	6413      	str	r3, [r2, #64]	; 0x40
 800314e:	4b7c      	ldr	r3, [pc, #496]	; (8003340 <HAL_RCC_OscConfig+0x4ac>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003156:	60bb      	str	r3, [r7, #8]
 8003158:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800315a:	2301      	movs	r3, #1
 800315c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315e:	4b79      	ldr	r3, [pc, #484]	; (8003344 <HAL_RCC_OscConfig+0x4b0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003166:	2b00      	cmp	r3, #0
 8003168:	d118      	bne.n	800319c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800316a:	4b76      	ldr	r3, [pc, #472]	; (8003344 <HAL_RCC_OscConfig+0x4b0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a75      	ldr	r2, [pc, #468]	; (8003344 <HAL_RCC_OscConfig+0x4b0>)
 8003170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003174:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003176:	f7fe fdd7 	bl	8001d28 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800317e:	f7fe fdd3 	bl	8001d28 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e118      	b.n	80033c2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003190:	4b6c      	ldr	r3, [pc, #432]	; (8003344 <HAL_RCC_OscConfig+0x4b0>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0f0      	beq.n	800317e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d106      	bne.n	80031b2 <HAL_RCC_OscConfig+0x31e>
 80031a4:	4b66      	ldr	r3, [pc, #408]	; (8003340 <HAL_RCC_OscConfig+0x4ac>)
 80031a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a8:	4a65      	ldr	r2, [pc, #404]	; (8003340 <HAL_RCC_OscConfig+0x4ac>)
 80031aa:	f043 0301 	orr.w	r3, r3, #1
 80031ae:	6713      	str	r3, [r2, #112]	; 0x70
 80031b0:	e01c      	b.n	80031ec <HAL_RCC_OscConfig+0x358>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2b05      	cmp	r3, #5
 80031b8:	d10c      	bne.n	80031d4 <HAL_RCC_OscConfig+0x340>
 80031ba:	4b61      	ldr	r3, [pc, #388]	; (8003340 <HAL_RCC_OscConfig+0x4ac>)
 80031bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031be:	4a60      	ldr	r2, [pc, #384]	; (8003340 <HAL_RCC_OscConfig+0x4ac>)
 80031c0:	f043 0304 	orr.w	r3, r3, #4
 80031c4:	6713      	str	r3, [r2, #112]	; 0x70
 80031c6:	4b5e      	ldr	r3, [pc, #376]	; (8003340 <HAL_RCC_OscConfig+0x4ac>)
 80031c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ca:	4a5d      	ldr	r2, [pc, #372]	; (8003340 <HAL_RCC_OscConfig+0x4ac>)
 80031cc:	f043 0301 	orr.w	r3, r3, #1
 80031d0:	6713      	str	r3, [r2, #112]	; 0x70
 80031d2:	e00b      	b.n	80031ec <HAL_RCC_OscConfig+0x358>
 80031d4:	4b5a      	ldr	r3, [pc, #360]	; (8003340 <HAL_RCC_OscConfig+0x4ac>)
 80031d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d8:	4a59      	ldr	r2, [pc, #356]	; (8003340 <HAL_RCC_OscConfig+0x4ac>)
 80031da:	f023 0301 	bic.w	r3, r3, #1
 80031de:	6713      	str	r3, [r2, #112]	; 0x70
 80031e0:	4b57      	ldr	r3, [pc, #348]	; (8003340 <HAL_RCC_OscConfig+0x4ac>)
 80031e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e4:	4a56      	ldr	r2, [pc, #344]	; (8003340 <HAL_RCC_OscConfig+0x4ac>)
 80031e6:	f023 0304 	bic.w	r3, r3, #4
 80031ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d015      	beq.n	8003220 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f4:	f7fe fd98 	bl	8001d28 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031fa:	e00a      	b.n	8003212 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031fc:	f7fe fd94 	bl	8001d28 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f241 3288 	movw	r2, #5000	; 0x1388
 800320a:	4293      	cmp	r3, r2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e0d7      	b.n	80033c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003212:	4b4b      	ldr	r3, [pc, #300]	; (8003340 <HAL_RCC_OscConfig+0x4ac>)
 8003214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0ee      	beq.n	80031fc <HAL_RCC_OscConfig+0x368>
 800321e:	e014      	b.n	800324a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003220:	f7fe fd82 	bl	8001d28 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003226:	e00a      	b.n	800323e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003228:	f7fe fd7e 	bl	8001d28 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	f241 3288 	movw	r2, #5000	; 0x1388
 8003236:	4293      	cmp	r3, r2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e0c1      	b.n	80033c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800323e:	4b40      	ldr	r3, [pc, #256]	; (8003340 <HAL_RCC_OscConfig+0x4ac>)
 8003240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1ee      	bne.n	8003228 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800324a:	7dfb      	ldrb	r3, [r7, #23]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d105      	bne.n	800325c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003250:	4b3b      	ldr	r3, [pc, #236]	; (8003340 <HAL_RCC_OscConfig+0x4ac>)
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	4a3a      	ldr	r2, [pc, #232]	; (8003340 <HAL_RCC_OscConfig+0x4ac>)
 8003256:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800325a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 80ad 	beq.w	80033c0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003266:	4b36      	ldr	r3, [pc, #216]	; (8003340 <HAL_RCC_OscConfig+0x4ac>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 030c 	and.w	r3, r3, #12
 800326e:	2b08      	cmp	r3, #8
 8003270:	d060      	beq.n	8003334 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d145      	bne.n	8003306 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800327a:	4b33      	ldr	r3, [pc, #204]	; (8003348 <HAL_RCC_OscConfig+0x4b4>)
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003280:	f7fe fd52 	bl	8001d28 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003288:	f7fe fd4e 	bl	8001d28 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e093      	b.n	80033c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800329a:	4b29      	ldr	r3, [pc, #164]	; (8003340 <HAL_RCC_OscConfig+0x4ac>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f0      	bne.n	8003288 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69da      	ldr	r2, [r3, #28]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	019b      	lsls	r3, r3, #6
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032bc:	085b      	lsrs	r3, r3, #1
 80032be:	3b01      	subs	r3, #1
 80032c0:	041b      	lsls	r3, r3, #16
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c8:	061b      	lsls	r3, r3, #24
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d0:	071b      	lsls	r3, r3, #28
 80032d2:	491b      	ldr	r1, [pc, #108]	; (8003340 <HAL_RCC_OscConfig+0x4ac>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032d8:	4b1b      	ldr	r3, [pc, #108]	; (8003348 <HAL_RCC_OscConfig+0x4b4>)
 80032da:	2201      	movs	r2, #1
 80032dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032de:	f7fe fd23 	bl	8001d28 <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032e6:	f7fe fd1f 	bl	8001d28 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e064      	b.n	80033c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f8:	4b11      	ldr	r3, [pc, #68]	; (8003340 <HAL_RCC_OscConfig+0x4ac>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0f0      	beq.n	80032e6 <HAL_RCC_OscConfig+0x452>
 8003304:	e05c      	b.n	80033c0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003306:	4b10      	ldr	r3, [pc, #64]	; (8003348 <HAL_RCC_OscConfig+0x4b4>)
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330c:	f7fe fd0c 	bl	8001d28 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003314:	f7fe fd08 	bl	8001d28 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e04d      	b.n	80033c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003326:	4b06      	ldr	r3, [pc, #24]	; (8003340 <HAL_RCC_OscConfig+0x4ac>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f0      	bne.n	8003314 <HAL_RCC_OscConfig+0x480>
 8003332:	e045      	b.n	80033c0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d107      	bne.n	800334c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e040      	b.n	80033c2 <HAL_RCC_OscConfig+0x52e>
 8003340:	40023800 	.word	0x40023800
 8003344:	40007000 	.word	0x40007000
 8003348:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800334c:	4b1f      	ldr	r3, [pc, #124]	; (80033cc <HAL_RCC_OscConfig+0x538>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d030      	beq.n	80033bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003364:	429a      	cmp	r2, r3
 8003366:	d129      	bne.n	80033bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003372:	429a      	cmp	r2, r3
 8003374:	d122      	bne.n	80033bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800337c:	4013      	ands	r3, r2
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003382:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003384:	4293      	cmp	r3, r2
 8003386:	d119      	bne.n	80033bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003392:	085b      	lsrs	r3, r3, #1
 8003394:	3b01      	subs	r3, #1
 8003396:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003398:	429a      	cmp	r2, r3
 800339a:	d10f      	bne.n	80033bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d107      	bne.n	80033bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d001      	beq.n	80033c0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e000      	b.n	80033c2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40023800 	.word	0x40023800

080033d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e041      	b.n	8003466 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d106      	bne.n	80033fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fe f8fc 	bl	80015f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2202      	movs	r2, #2
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3304      	adds	r3, #4
 800340c:	4619      	mov	r1, r3
 800340e:	4610      	mov	r0, r2
 8003410:	f000 fe0a 	bl	8004028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b082      	sub	sp, #8
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e041      	b.n	8003504 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	d106      	bne.n	800349a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f839 	bl	800350c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2202      	movs	r2, #2
 800349e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	3304      	adds	r3, #4
 80034aa:	4619      	mov	r1, r3
 80034ac:	4610      	mov	r0, r2
 80034ae:	f000 fdbb 	bl	8004028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d109      	bne.n	8003544 <HAL_TIM_PWM_Start+0x24>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b01      	cmp	r3, #1
 800353a:	bf14      	ite	ne
 800353c:	2301      	movne	r3, #1
 800353e:	2300      	moveq	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	e022      	b.n	800358a <HAL_TIM_PWM_Start+0x6a>
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	2b04      	cmp	r3, #4
 8003548:	d109      	bne.n	800355e <HAL_TIM_PWM_Start+0x3e>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b01      	cmp	r3, #1
 8003554:	bf14      	ite	ne
 8003556:	2301      	movne	r3, #1
 8003558:	2300      	moveq	r3, #0
 800355a:	b2db      	uxtb	r3, r3
 800355c:	e015      	b.n	800358a <HAL_TIM_PWM_Start+0x6a>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b08      	cmp	r3, #8
 8003562:	d109      	bne.n	8003578 <HAL_TIM_PWM_Start+0x58>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b01      	cmp	r3, #1
 800356e:	bf14      	ite	ne
 8003570:	2301      	movne	r3, #1
 8003572:	2300      	moveq	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	e008      	b.n	800358a <HAL_TIM_PWM_Start+0x6a>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b01      	cmp	r3, #1
 8003582:	bf14      	ite	ne
 8003584:	2301      	movne	r3, #1
 8003586:	2300      	moveq	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e07c      	b.n	800368c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d104      	bne.n	80035a2 <HAL_TIM_PWM_Start+0x82>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035a0:	e013      	b.n	80035ca <HAL_TIM_PWM_Start+0xaa>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d104      	bne.n	80035b2 <HAL_TIM_PWM_Start+0x92>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2202      	movs	r2, #2
 80035ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035b0:	e00b      	b.n	80035ca <HAL_TIM_PWM_Start+0xaa>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d104      	bne.n	80035c2 <HAL_TIM_PWM_Start+0xa2>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035c0:	e003      	b.n	80035ca <HAL_TIM_PWM_Start+0xaa>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2202      	movs	r2, #2
 80035c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2201      	movs	r2, #1
 80035d0:	6839      	ldr	r1, [r7, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f001 f9ce 	bl	8004974 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a2d      	ldr	r2, [pc, #180]	; (8003694 <HAL_TIM_PWM_Start+0x174>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d004      	beq.n	80035ec <HAL_TIM_PWM_Start+0xcc>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a2c      	ldr	r2, [pc, #176]	; (8003698 <HAL_TIM_PWM_Start+0x178>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d101      	bne.n	80035f0 <HAL_TIM_PWM_Start+0xd0>
 80035ec:	2301      	movs	r3, #1
 80035ee:	e000      	b.n	80035f2 <HAL_TIM_PWM_Start+0xd2>
 80035f0:	2300      	movs	r3, #0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d007      	beq.n	8003606 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003604:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a22      	ldr	r2, [pc, #136]	; (8003694 <HAL_TIM_PWM_Start+0x174>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d022      	beq.n	8003656 <HAL_TIM_PWM_Start+0x136>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003618:	d01d      	beq.n	8003656 <HAL_TIM_PWM_Start+0x136>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a1f      	ldr	r2, [pc, #124]	; (800369c <HAL_TIM_PWM_Start+0x17c>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d018      	beq.n	8003656 <HAL_TIM_PWM_Start+0x136>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a1d      	ldr	r2, [pc, #116]	; (80036a0 <HAL_TIM_PWM_Start+0x180>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d013      	beq.n	8003656 <HAL_TIM_PWM_Start+0x136>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a1c      	ldr	r2, [pc, #112]	; (80036a4 <HAL_TIM_PWM_Start+0x184>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d00e      	beq.n	8003656 <HAL_TIM_PWM_Start+0x136>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a16      	ldr	r2, [pc, #88]	; (8003698 <HAL_TIM_PWM_Start+0x178>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d009      	beq.n	8003656 <HAL_TIM_PWM_Start+0x136>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a18      	ldr	r2, [pc, #96]	; (80036a8 <HAL_TIM_PWM_Start+0x188>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d004      	beq.n	8003656 <HAL_TIM_PWM_Start+0x136>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a16      	ldr	r2, [pc, #88]	; (80036ac <HAL_TIM_PWM_Start+0x18c>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d111      	bne.n	800367a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2b06      	cmp	r3, #6
 8003666:	d010      	beq.n	800368a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0201 	orr.w	r2, r2, #1
 8003676:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003678:	e007      	b.n	800368a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f042 0201 	orr.w	r2, r2, #1
 8003688:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40010000 	.word	0x40010000
 8003698:	40010400 	.word	0x40010400
 800369c:	40000400 	.word	0x40000400
 80036a0:	40000800 	.word	0x40000800
 80036a4:	40000c00 	.word	0x40000c00
 80036a8:	40014000 	.word	0x40014000
 80036ac:	40001800 	.word	0x40001800

080036b0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e041      	b.n	8003746 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d106      	bne.n	80036dc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7fd ff12 	bl	8001500 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2202      	movs	r2, #2
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3304      	adds	r3, #4
 80036ec:	4619      	mov	r1, r3
 80036ee:	4610      	mov	r0, r2
 80036f0:	f000 fc9a 	bl	8004028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
	...

08003750 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d104      	bne.n	800376a <HAL_TIM_IC_Start+0x1a>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003766:	b2db      	uxtb	r3, r3
 8003768:	e013      	b.n	8003792 <HAL_TIM_IC_Start+0x42>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2b04      	cmp	r3, #4
 800376e:	d104      	bne.n	800377a <HAL_TIM_IC_Start+0x2a>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003776:	b2db      	uxtb	r3, r3
 8003778:	e00b      	b.n	8003792 <HAL_TIM_IC_Start+0x42>
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	2b08      	cmp	r3, #8
 800377e:	d104      	bne.n	800378a <HAL_TIM_IC_Start+0x3a>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003786:	b2db      	uxtb	r3, r3
 8003788:	e003      	b.n	8003792 <HAL_TIM_IC_Start+0x42>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003790:	b2db      	uxtb	r3, r3
 8003792:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d104      	bne.n	80037a4 <HAL_TIM_IC_Start+0x54>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	e013      	b.n	80037cc <HAL_TIM_IC_Start+0x7c>
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d104      	bne.n	80037b4 <HAL_TIM_IC_Start+0x64>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	e00b      	b.n	80037cc <HAL_TIM_IC_Start+0x7c>
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	2b08      	cmp	r3, #8
 80037b8:	d104      	bne.n	80037c4 <HAL_TIM_IC_Start+0x74>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	e003      	b.n	80037cc <HAL_TIM_IC_Start+0x7c>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d102      	bne.n	80037da <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80037d4:	7bbb      	ldrb	r3, [r7, #14]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d001      	beq.n	80037de <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e081      	b.n	80038e2 <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d104      	bne.n	80037ee <HAL_TIM_IC_Start+0x9e>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2202      	movs	r2, #2
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037ec:	e013      	b.n	8003816 <HAL_TIM_IC_Start+0xc6>
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d104      	bne.n	80037fe <HAL_TIM_IC_Start+0xae>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2202      	movs	r2, #2
 80037f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037fc:	e00b      	b.n	8003816 <HAL_TIM_IC_Start+0xc6>
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	2b08      	cmp	r3, #8
 8003802:	d104      	bne.n	800380e <HAL_TIM_IC_Start+0xbe>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800380c:	e003      	b.n	8003816 <HAL_TIM_IC_Start+0xc6>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2202      	movs	r2, #2
 8003812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d104      	bne.n	8003826 <HAL_TIM_IC_Start+0xd6>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2202      	movs	r2, #2
 8003820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003824:	e013      	b.n	800384e <HAL_TIM_IC_Start+0xfe>
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2b04      	cmp	r3, #4
 800382a:	d104      	bne.n	8003836 <HAL_TIM_IC_Start+0xe6>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2202      	movs	r2, #2
 8003830:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003834:	e00b      	b.n	800384e <HAL_TIM_IC_Start+0xfe>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	2b08      	cmp	r3, #8
 800383a:	d104      	bne.n	8003846 <HAL_TIM_IC_Start+0xf6>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2202      	movs	r2, #2
 8003840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003844:	e003      	b.n	800384e <HAL_TIM_IC_Start+0xfe>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2202      	movs	r2, #2
 800384a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2201      	movs	r2, #1
 8003854:	6839      	ldr	r1, [r7, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f001 f88c 	bl	8004974 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a22      	ldr	r2, [pc, #136]	; (80038ec <HAL_TIM_IC_Start+0x19c>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d022      	beq.n	80038ac <HAL_TIM_IC_Start+0x15c>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386e:	d01d      	beq.n	80038ac <HAL_TIM_IC_Start+0x15c>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a1e      	ldr	r2, [pc, #120]	; (80038f0 <HAL_TIM_IC_Start+0x1a0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d018      	beq.n	80038ac <HAL_TIM_IC_Start+0x15c>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a1d      	ldr	r2, [pc, #116]	; (80038f4 <HAL_TIM_IC_Start+0x1a4>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d013      	beq.n	80038ac <HAL_TIM_IC_Start+0x15c>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a1b      	ldr	r2, [pc, #108]	; (80038f8 <HAL_TIM_IC_Start+0x1a8>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d00e      	beq.n	80038ac <HAL_TIM_IC_Start+0x15c>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a1a      	ldr	r2, [pc, #104]	; (80038fc <HAL_TIM_IC_Start+0x1ac>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d009      	beq.n	80038ac <HAL_TIM_IC_Start+0x15c>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a18      	ldr	r2, [pc, #96]	; (8003900 <HAL_TIM_IC_Start+0x1b0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d004      	beq.n	80038ac <HAL_TIM_IC_Start+0x15c>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a17      	ldr	r2, [pc, #92]	; (8003904 <HAL_TIM_IC_Start+0x1b4>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d111      	bne.n	80038d0 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b06      	cmp	r3, #6
 80038bc:	d010      	beq.n	80038e0 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f042 0201 	orr.w	r2, r2, #1
 80038cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ce:	e007      	b.n	80038e0 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0201 	orr.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40010000 	.word	0x40010000
 80038f0:	40000400 	.word	0x40000400
 80038f4:	40000800 	.word	0x40000800
 80038f8:	40000c00 	.word	0x40000c00
 80038fc:	40010400 	.word	0x40010400
 8003900:	40014000 	.word	0x40014000
 8003904:	40001800 	.word	0x40001800

08003908 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003912:	2300      	movs	r3, #0
 8003914:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d104      	bne.n	8003926 <HAL_TIM_IC_Start_IT+0x1e>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003922:	b2db      	uxtb	r3, r3
 8003924:	e013      	b.n	800394e <HAL_TIM_IC_Start_IT+0x46>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b04      	cmp	r3, #4
 800392a:	d104      	bne.n	8003936 <HAL_TIM_IC_Start_IT+0x2e>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003932:	b2db      	uxtb	r3, r3
 8003934:	e00b      	b.n	800394e <HAL_TIM_IC_Start_IT+0x46>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2b08      	cmp	r3, #8
 800393a:	d104      	bne.n	8003946 <HAL_TIM_IC_Start_IT+0x3e>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003942:	b2db      	uxtb	r3, r3
 8003944:	e003      	b.n	800394e <HAL_TIM_IC_Start_IT+0x46>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800394c:	b2db      	uxtb	r3, r3
 800394e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d104      	bne.n	8003960 <HAL_TIM_IC_Start_IT+0x58>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800395c:	b2db      	uxtb	r3, r3
 800395e:	e013      	b.n	8003988 <HAL_TIM_IC_Start_IT+0x80>
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	2b04      	cmp	r3, #4
 8003964:	d104      	bne.n	8003970 <HAL_TIM_IC_Start_IT+0x68>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800396c:	b2db      	uxtb	r3, r3
 800396e:	e00b      	b.n	8003988 <HAL_TIM_IC_Start_IT+0x80>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	2b08      	cmp	r3, #8
 8003974:	d104      	bne.n	8003980 <HAL_TIM_IC_Start_IT+0x78>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800397c:	b2db      	uxtb	r3, r3
 800397e:	e003      	b.n	8003988 <HAL_TIM_IC_Start_IT+0x80>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003986:	b2db      	uxtb	r3, r3
 8003988:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800398a:	7bbb      	ldrb	r3, [r7, #14]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d102      	bne.n	8003996 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003990:	7b7b      	ldrb	r3, [r7, #13]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d001      	beq.n	800399a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e0cc      	b.n	8003b34 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d104      	bne.n	80039aa <HAL_TIM_IC_Start_IT+0xa2>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039a8:	e013      	b.n	80039d2 <HAL_TIM_IC_Start_IT+0xca>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d104      	bne.n	80039ba <HAL_TIM_IC_Start_IT+0xb2>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039b8:	e00b      	b.n	80039d2 <HAL_TIM_IC_Start_IT+0xca>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d104      	bne.n	80039ca <HAL_TIM_IC_Start_IT+0xc2>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039c8:	e003      	b.n	80039d2 <HAL_TIM_IC_Start_IT+0xca>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2202      	movs	r2, #2
 80039ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d104      	bne.n	80039e2 <HAL_TIM_IC_Start_IT+0xda>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039e0:	e013      	b.n	8003a0a <HAL_TIM_IC_Start_IT+0x102>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b04      	cmp	r3, #4
 80039e6:	d104      	bne.n	80039f2 <HAL_TIM_IC_Start_IT+0xea>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039f0:	e00b      	b.n	8003a0a <HAL_TIM_IC_Start_IT+0x102>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d104      	bne.n	8003a02 <HAL_TIM_IC_Start_IT+0xfa>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a00:	e003      	b.n	8003a0a <HAL_TIM_IC_Start_IT+0x102>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2202      	movs	r2, #2
 8003a06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2b0c      	cmp	r3, #12
 8003a0e:	d841      	bhi.n	8003a94 <HAL_TIM_IC_Start_IT+0x18c>
 8003a10:	a201      	add	r2, pc, #4	; (adr r2, 8003a18 <HAL_TIM_IC_Start_IT+0x110>)
 8003a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a16:	bf00      	nop
 8003a18:	08003a4d 	.word	0x08003a4d
 8003a1c:	08003a95 	.word	0x08003a95
 8003a20:	08003a95 	.word	0x08003a95
 8003a24:	08003a95 	.word	0x08003a95
 8003a28:	08003a5f 	.word	0x08003a5f
 8003a2c:	08003a95 	.word	0x08003a95
 8003a30:	08003a95 	.word	0x08003a95
 8003a34:	08003a95 	.word	0x08003a95
 8003a38:	08003a71 	.word	0x08003a71
 8003a3c:	08003a95 	.word	0x08003a95
 8003a40:	08003a95 	.word	0x08003a95
 8003a44:	08003a95 	.word	0x08003a95
 8003a48:	08003a83 	.word	0x08003a83
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0202 	orr.w	r2, r2, #2
 8003a5a:	60da      	str	r2, [r3, #12]
      break;
 8003a5c:	e01d      	b.n	8003a9a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f042 0204 	orr.w	r2, r2, #4
 8003a6c:	60da      	str	r2, [r3, #12]
      break;
 8003a6e:	e014      	b.n	8003a9a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0208 	orr.w	r2, r2, #8
 8003a7e:	60da      	str	r2, [r3, #12]
      break;
 8003a80:	e00b      	b.n	8003a9a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68da      	ldr	r2, [r3, #12]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f042 0210 	orr.w	r2, r2, #16
 8003a90:	60da      	str	r2, [r3, #12]
      break;
 8003a92:	e002      	b.n	8003a9a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	73fb      	strb	r3, [r7, #15]
      break;
 8003a98:	bf00      	nop
  }

  if (status == HAL_OK)
 8003a9a:	7bfb      	ldrb	r3, [r7, #15]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d148      	bne.n	8003b32 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	6839      	ldr	r1, [r7, #0]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 ff63 	bl	8004974 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a22      	ldr	r2, [pc, #136]	; (8003b3c <HAL_TIM_IC_Start_IT+0x234>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d022      	beq.n	8003afe <HAL_TIM_IC_Start_IT+0x1f6>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac0:	d01d      	beq.n	8003afe <HAL_TIM_IC_Start_IT+0x1f6>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a1e      	ldr	r2, [pc, #120]	; (8003b40 <HAL_TIM_IC_Start_IT+0x238>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d018      	beq.n	8003afe <HAL_TIM_IC_Start_IT+0x1f6>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a1c      	ldr	r2, [pc, #112]	; (8003b44 <HAL_TIM_IC_Start_IT+0x23c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d013      	beq.n	8003afe <HAL_TIM_IC_Start_IT+0x1f6>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a1b      	ldr	r2, [pc, #108]	; (8003b48 <HAL_TIM_IC_Start_IT+0x240>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d00e      	beq.n	8003afe <HAL_TIM_IC_Start_IT+0x1f6>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a19      	ldr	r2, [pc, #100]	; (8003b4c <HAL_TIM_IC_Start_IT+0x244>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d009      	beq.n	8003afe <HAL_TIM_IC_Start_IT+0x1f6>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a18      	ldr	r2, [pc, #96]	; (8003b50 <HAL_TIM_IC_Start_IT+0x248>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d004      	beq.n	8003afe <HAL_TIM_IC_Start_IT+0x1f6>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a16      	ldr	r2, [pc, #88]	; (8003b54 <HAL_TIM_IC_Start_IT+0x24c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d111      	bne.n	8003b22 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	2b06      	cmp	r3, #6
 8003b0e:	d010      	beq.n	8003b32 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0201 	orr.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b20:	e007      	b.n	8003b32 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 0201 	orr.w	r2, r2, #1
 8003b30:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40010000 	.word	0x40010000
 8003b40:	40000400 	.word	0x40000400
 8003b44:	40000800 	.word	0x40000800
 8003b48:	40000c00 	.word	0x40000c00
 8003b4c:	40010400 	.word	0x40010400
 8003b50:	40014000 	.word	0x40014000
 8003b54:	40001800 	.word	0x40001800

08003b58 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b64:	2300      	movs	r3, #0
 8003b66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d101      	bne.n	8003b76 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003b72:	2302      	movs	r3, #2
 8003b74:	e088      	b.n	8003c88 <HAL_TIM_IC_ConfigChannel+0x130>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d11b      	bne.n	8003bbc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6818      	ldr	r0, [r3, #0]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	6819      	ldr	r1, [r3, #0]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f000 fd2a 	bl	80045ec <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699a      	ldr	r2, [r3, #24]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 020c 	bic.w	r2, r2, #12
 8003ba6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6999      	ldr	r1, [r3, #24]
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	689a      	ldr	r2, [r3, #8]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	619a      	str	r2, [r3, #24]
 8003bba:	e060      	b.n	8003c7e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d11c      	bne.n	8003bfc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6818      	ldr	r0, [r3, #0]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	6819      	ldr	r1, [r3, #0]
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f000 fdae 	bl	8004732 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	699a      	ldr	r2, [r3, #24]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003be4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6999      	ldr	r1, [r3, #24]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	021a      	lsls	r2, r3, #8
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	619a      	str	r2, [r3, #24]
 8003bfa:	e040      	b.n	8003c7e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b08      	cmp	r3, #8
 8003c00:	d11b      	bne.n	8003c3a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6818      	ldr	r0, [r3, #0]
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	6819      	ldr	r1, [r3, #0]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	f000 fdfb 	bl	800480c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	69da      	ldr	r2, [r3, #28]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 020c 	bic.w	r2, r2, #12
 8003c24:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	69d9      	ldr	r1, [r3, #28]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	61da      	str	r2, [r3, #28]
 8003c38:	e021      	b.n	8003c7e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b0c      	cmp	r3, #12
 8003c3e:	d11c      	bne.n	8003c7a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6818      	ldr	r0, [r3, #0]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	6819      	ldr	r1, [r3, #0]
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f000 fe18 	bl	8004884 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	69da      	ldr	r2, [r3, #28]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003c62:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	69d9      	ldr	r1, [r3, #28]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	021a      	lsls	r2, r3, #8
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	61da      	str	r2, [r3, #28]
 8003c78:	e001      	b.n	8003c7e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3718      	adds	r7, #24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d101      	bne.n	8003cae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003caa:	2302      	movs	r3, #2
 8003cac:	e0ae      	b.n	8003e0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b0c      	cmp	r3, #12
 8003cba:	f200 809f 	bhi.w	8003dfc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003cbe:	a201      	add	r2, pc, #4	; (adr r2, 8003cc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc4:	08003cf9 	.word	0x08003cf9
 8003cc8:	08003dfd 	.word	0x08003dfd
 8003ccc:	08003dfd 	.word	0x08003dfd
 8003cd0:	08003dfd 	.word	0x08003dfd
 8003cd4:	08003d39 	.word	0x08003d39
 8003cd8:	08003dfd 	.word	0x08003dfd
 8003cdc:	08003dfd 	.word	0x08003dfd
 8003ce0:	08003dfd 	.word	0x08003dfd
 8003ce4:	08003d7b 	.word	0x08003d7b
 8003ce8:	08003dfd 	.word	0x08003dfd
 8003cec:	08003dfd 	.word	0x08003dfd
 8003cf0:	08003dfd 	.word	0x08003dfd
 8003cf4:	08003dbb 	.word	0x08003dbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68b9      	ldr	r1, [r7, #8]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 fa32 	bl	8004168 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699a      	ldr	r2, [r3, #24]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0208 	orr.w	r2, r2, #8
 8003d12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	699a      	ldr	r2, [r3, #24]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0204 	bic.w	r2, r2, #4
 8003d22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6999      	ldr	r1, [r3, #24]
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	691a      	ldr	r2, [r3, #16]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	619a      	str	r2, [r3, #24]
      break;
 8003d36:	e064      	b.n	8003e02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68b9      	ldr	r1, [r7, #8]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 fa82 	bl	8004248 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	699a      	ldr	r2, [r3, #24]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699a      	ldr	r2, [r3, #24]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6999      	ldr	r1, [r3, #24]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	021a      	lsls	r2, r3, #8
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	619a      	str	r2, [r3, #24]
      break;
 8003d78:	e043      	b.n	8003e02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68b9      	ldr	r1, [r7, #8]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 fad7 	bl	8004334 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	69da      	ldr	r2, [r3, #28]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f042 0208 	orr.w	r2, r2, #8
 8003d94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	69da      	ldr	r2, [r3, #28]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 0204 	bic.w	r2, r2, #4
 8003da4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	69d9      	ldr	r1, [r3, #28]
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	691a      	ldr	r2, [r3, #16]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	61da      	str	r2, [r3, #28]
      break;
 8003db8:	e023      	b.n	8003e02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68b9      	ldr	r1, [r7, #8]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f000 fb2b 	bl	800441c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	69da      	ldr	r2, [r3, #28]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	69da      	ldr	r2, [r3, #28]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003de4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	69d9      	ldr	r1, [r3, #28]
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	021a      	lsls	r2, r3, #8
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	61da      	str	r2, [r3, #28]
      break;
 8003dfa:	e002      	b.n	8003e02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	75fb      	strb	r3, [r7, #23]
      break;
 8003e00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_TIM_ConfigClockSource+0x1c>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e0b4      	b.n	8003f9a <HAL_TIM_ConfigClockSource+0x186>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e68:	d03e      	beq.n	8003ee8 <HAL_TIM_ConfigClockSource+0xd4>
 8003e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e6e:	f200 8087 	bhi.w	8003f80 <HAL_TIM_ConfigClockSource+0x16c>
 8003e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e76:	f000 8086 	beq.w	8003f86 <HAL_TIM_ConfigClockSource+0x172>
 8003e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e7e:	d87f      	bhi.n	8003f80 <HAL_TIM_ConfigClockSource+0x16c>
 8003e80:	2b70      	cmp	r3, #112	; 0x70
 8003e82:	d01a      	beq.n	8003eba <HAL_TIM_ConfigClockSource+0xa6>
 8003e84:	2b70      	cmp	r3, #112	; 0x70
 8003e86:	d87b      	bhi.n	8003f80 <HAL_TIM_ConfigClockSource+0x16c>
 8003e88:	2b60      	cmp	r3, #96	; 0x60
 8003e8a:	d050      	beq.n	8003f2e <HAL_TIM_ConfigClockSource+0x11a>
 8003e8c:	2b60      	cmp	r3, #96	; 0x60
 8003e8e:	d877      	bhi.n	8003f80 <HAL_TIM_ConfigClockSource+0x16c>
 8003e90:	2b50      	cmp	r3, #80	; 0x50
 8003e92:	d03c      	beq.n	8003f0e <HAL_TIM_ConfigClockSource+0xfa>
 8003e94:	2b50      	cmp	r3, #80	; 0x50
 8003e96:	d873      	bhi.n	8003f80 <HAL_TIM_ConfigClockSource+0x16c>
 8003e98:	2b40      	cmp	r3, #64	; 0x40
 8003e9a:	d058      	beq.n	8003f4e <HAL_TIM_ConfigClockSource+0x13a>
 8003e9c:	2b40      	cmp	r3, #64	; 0x40
 8003e9e:	d86f      	bhi.n	8003f80 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea0:	2b30      	cmp	r3, #48	; 0x30
 8003ea2:	d064      	beq.n	8003f6e <HAL_TIM_ConfigClockSource+0x15a>
 8003ea4:	2b30      	cmp	r3, #48	; 0x30
 8003ea6:	d86b      	bhi.n	8003f80 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea8:	2b20      	cmp	r3, #32
 8003eaa:	d060      	beq.n	8003f6e <HAL_TIM_ConfigClockSource+0x15a>
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	d867      	bhi.n	8003f80 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d05c      	beq.n	8003f6e <HAL_TIM_ConfigClockSource+0x15a>
 8003eb4:	2b10      	cmp	r3, #16
 8003eb6:	d05a      	beq.n	8003f6e <HAL_TIM_ConfigClockSource+0x15a>
 8003eb8:	e062      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6818      	ldr	r0, [r3, #0]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	6899      	ldr	r1, [r3, #8]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f000 fd33 	bl	8004934 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003edc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	609a      	str	r2, [r3, #8]
      break;
 8003ee6:	e04f      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6818      	ldr	r0, [r3, #0]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	6899      	ldr	r1, [r3, #8]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f000 fd1c 	bl	8004934 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f0a:	609a      	str	r2, [r3, #8]
      break;
 8003f0c:	e03c      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6818      	ldr	r0, [r3, #0]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	6859      	ldr	r1, [r3, #4]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	f000 fbda 	bl	80046d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2150      	movs	r1, #80	; 0x50
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 fce9 	bl	80048fe <TIM_ITRx_SetConfig>
      break;
 8003f2c:	e02c      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6818      	ldr	r0, [r3, #0]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	6859      	ldr	r1, [r3, #4]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	f000 fc36 	bl	80047ac <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2160      	movs	r1, #96	; 0x60
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fcd9 	bl	80048fe <TIM_ITRx_SetConfig>
      break;
 8003f4c:	e01c      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6818      	ldr	r0, [r3, #0]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	6859      	ldr	r1, [r3, #4]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	f000 fbba 	bl	80046d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2140      	movs	r1, #64	; 0x40
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 fcc9 	bl	80048fe <TIM_ITRx_SetConfig>
      break;
 8003f6c:	e00c      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4619      	mov	r1, r3
 8003f78:	4610      	mov	r0, r2
 8003f7a:	f000 fcc0 	bl	80048fe <TIM_ITRx_SetConfig>
      break;
 8003f7e:	e003      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	73fb      	strb	r3, [r7, #15]
      break;
 8003f84:	e000      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b082      	sub	sp, #8
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d101      	bne.n	8003fba <HAL_TIM_SlaveConfigSynchro+0x18>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	e031      	b.n	800401e <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003fca:	6839      	ldr	r1, [r7, #0]
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 fa7b 	bl	80044c8 <TIM_SlaveTimer_SetConfig>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d009      	beq.n	8003fec <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e018      	b.n	800401e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ffa:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800400a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a40      	ldr	r2, [pc, #256]	; (800413c <TIM_Base_SetConfig+0x114>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d013      	beq.n	8004068 <TIM_Base_SetConfig+0x40>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004046:	d00f      	beq.n	8004068 <TIM_Base_SetConfig+0x40>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a3d      	ldr	r2, [pc, #244]	; (8004140 <TIM_Base_SetConfig+0x118>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d00b      	beq.n	8004068 <TIM_Base_SetConfig+0x40>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a3c      	ldr	r2, [pc, #240]	; (8004144 <TIM_Base_SetConfig+0x11c>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d007      	beq.n	8004068 <TIM_Base_SetConfig+0x40>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a3b      	ldr	r2, [pc, #236]	; (8004148 <TIM_Base_SetConfig+0x120>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d003      	beq.n	8004068 <TIM_Base_SetConfig+0x40>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a3a      	ldr	r2, [pc, #232]	; (800414c <TIM_Base_SetConfig+0x124>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d108      	bne.n	800407a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800406e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	4313      	orrs	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a2f      	ldr	r2, [pc, #188]	; (800413c <TIM_Base_SetConfig+0x114>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d02b      	beq.n	80040da <TIM_Base_SetConfig+0xb2>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004088:	d027      	beq.n	80040da <TIM_Base_SetConfig+0xb2>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a2c      	ldr	r2, [pc, #176]	; (8004140 <TIM_Base_SetConfig+0x118>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d023      	beq.n	80040da <TIM_Base_SetConfig+0xb2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a2b      	ldr	r2, [pc, #172]	; (8004144 <TIM_Base_SetConfig+0x11c>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d01f      	beq.n	80040da <TIM_Base_SetConfig+0xb2>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a2a      	ldr	r2, [pc, #168]	; (8004148 <TIM_Base_SetConfig+0x120>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d01b      	beq.n	80040da <TIM_Base_SetConfig+0xb2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a29      	ldr	r2, [pc, #164]	; (800414c <TIM_Base_SetConfig+0x124>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d017      	beq.n	80040da <TIM_Base_SetConfig+0xb2>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a28      	ldr	r2, [pc, #160]	; (8004150 <TIM_Base_SetConfig+0x128>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d013      	beq.n	80040da <TIM_Base_SetConfig+0xb2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a27      	ldr	r2, [pc, #156]	; (8004154 <TIM_Base_SetConfig+0x12c>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d00f      	beq.n	80040da <TIM_Base_SetConfig+0xb2>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a26      	ldr	r2, [pc, #152]	; (8004158 <TIM_Base_SetConfig+0x130>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d00b      	beq.n	80040da <TIM_Base_SetConfig+0xb2>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a25      	ldr	r2, [pc, #148]	; (800415c <TIM_Base_SetConfig+0x134>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d007      	beq.n	80040da <TIM_Base_SetConfig+0xb2>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a24      	ldr	r2, [pc, #144]	; (8004160 <TIM_Base_SetConfig+0x138>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d003      	beq.n	80040da <TIM_Base_SetConfig+0xb2>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a23      	ldr	r2, [pc, #140]	; (8004164 <TIM_Base_SetConfig+0x13c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d108      	bne.n	80040ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a0a      	ldr	r2, [pc, #40]	; (800413c <TIM_Base_SetConfig+0x114>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d003      	beq.n	8004120 <TIM_Base_SetConfig+0xf8>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a0c      	ldr	r2, [pc, #48]	; (800414c <TIM_Base_SetConfig+0x124>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d103      	bne.n	8004128 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	691a      	ldr	r2, [r3, #16]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	615a      	str	r2, [r3, #20]
}
 800412e:	bf00      	nop
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	40010000 	.word	0x40010000
 8004140:	40000400 	.word	0x40000400
 8004144:	40000800 	.word	0x40000800
 8004148:	40000c00 	.word	0x40000c00
 800414c:	40010400 	.word	0x40010400
 8004150:	40014000 	.word	0x40014000
 8004154:	40014400 	.word	0x40014400
 8004158:	40014800 	.word	0x40014800
 800415c:	40001800 	.word	0x40001800
 8004160:	40001c00 	.word	0x40001c00
 8004164:	40002000 	.word	0x40002000

08004168 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	f023 0201 	bic.w	r2, r3, #1
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f023 0303 	bic.w	r3, r3, #3
 800419e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f023 0302 	bic.w	r3, r3, #2
 80041b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a20      	ldr	r2, [pc, #128]	; (8004240 <TIM_OC1_SetConfig+0xd8>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d003      	beq.n	80041cc <TIM_OC1_SetConfig+0x64>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a1f      	ldr	r2, [pc, #124]	; (8004244 <TIM_OC1_SetConfig+0xdc>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d10c      	bne.n	80041e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f023 0308 	bic.w	r3, r3, #8
 80041d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	4313      	orrs	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f023 0304 	bic.w	r3, r3, #4
 80041e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a15      	ldr	r2, [pc, #84]	; (8004240 <TIM_OC1_SetConfig+0xd8>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d003      	beq.n	80041f6 <TIM_OC1_SetConfig+0x8e>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a14      	ldr	r2, [pc, #80]	; (8004244 <TIM_OC1_SetConfig+0xdc>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d111      	bne.n	800421a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	4313      	orrs	r3, r2
 8004218:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	621a      	str	r2, [r3, #32]
}
 8004234:	bf00      	nop
 8004236:	371c      	adds	r7, #28
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	40010000 	.word	0x40010000
 8004244:	40010400 	.word	0x40010400

08004248 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	f023 0210 	bic.w	r2, r3, #16
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800427e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	021b      	lsls	r3, r3, #8
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	4313      	orrs	r3, r2
 800428a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f023 0320 	bic.w	r3, r3, #32
 8004292:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	011b      	lsls	r3, r3, #4
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	4313      	orrs	r3, r2
 800429e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a22      	ldr	r2, [pc, #136]	; (800432c <TIM_OC2_SetConfig+0xe4>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d003      	beq.n	80042b0 <TIM_OC2_SetConfig+0x68>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a21      	ldr	r2, [pc, #132]	; (8004330 <TIM_OC2_SetConfig+0xe8>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d10d      	bne.n	80042cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a17      	ldr	r2, [pc, #92]	; (800432c <TIM_OC2_SetConfig+0xe4>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d003      	beq.n	80042dc <TIM_OC2_SetConfig+0x94>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a16      	ldr	r2, [pc, #88]	; (8004330 <TIM_OC2_SetConfig+0xe8>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d113      	bne.n	8004304 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	4313      	orrs	r3, r2
 8004302:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	621a      	str	r2, [r3, #32]
}
 800431e:	bf00      	nop
 8004320:	371c      	adds	r7, #28
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	40010000 	.word	0x40010000
 8004330:	40010400 	.word	0x40010400

08004334 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004334:	b480      	push	{r7}
 8004336:	b087      	sub	sp, #28
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	69db      	ldr	r3, [r3, #28]
 800435a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f023 0303 	bic.w	r3, r3, #3
 800436a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800437c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	021b      	lsls	r3, r3, #8
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	4313      	orrs	r3, r2
 8004388:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a21      	ldr	r2, [pc, #132]	; (8004414 <TIM_OC3_SetConfig+0xe0>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d003      	beq.n	800439a <TIM_OC3_SetConfig+0x66>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a20      	ldr	r2, [pc, #128]	; (8004418 <TIM_OC3_SetConfig+0xe4>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d10d      	bne.n	80043b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	021b      	lsls	r3, r3, #8
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a16      	ldr	r2, [pc, #88]	; (8004414 <TIM_OC3_SetConfig+0xe0>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d003      	beq.n	80043c6 <TIM_OC3_SetConfig+0x92>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a15      	ldr	r2, [pc, #84]	; (8004418 <TIM_OC3_SetConfig+0xe4>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d113      	bne.n	80043ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	4313      	orrs	r3, r2
 80043e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	621a      	str	r2, [r3, #32]
}
 8004408:	bf00      	nop
 800440a:	371c      	adds	r7, #28
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	40010000 	.word	0x40010000
 8004418:	40010400 	.word	0x40010400

0800441c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800441c:	b480      	push	{r7}
 800441e:	b087      	sub	sp, #28
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800444a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004452:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	021b      	lsls	r3, r3, #8
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	4313      	orrs	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004466:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	031b      	lsls	r3, r3, #12
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	4313      	orrs	r3, r2
 8004472:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a12      	ldr	r2, [pc, #72]	; (80044c0 <TIM_OC4_SetConfig+0xa4>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d003      	beq.n	8004484 <TIM_OC4_SetConfig+0x68>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a11      	ldr	r2, [pc, #68]	; (80044c4 <TIM_OC4_SetConfig+0xa8>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d109      	bne.n	8004498 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800448a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	019b      	lsls	r3, r3, #6
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	4313      	orrs	r3, r2
 8004496:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	621a      	str	r2, [r3, #32]
}
 80044b2:	bf00      	nop
 80044b4:	371c      	adds	r7, #28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	40010000 	.word	0x40010000
 80044c4:	40010400 	.word	0x40010400

080044c8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044d2:	2300      	movs	r3, #0
 80044d4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f023 0307 	bic.w	r3, r3, #7
 80044f6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	4313      	orrs	r3, r2
 8004500:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b70      	cmp	r3, #112	; 0x70
 8004510:	d01a      	beq.n	8004548 <TIM_SlaveTimer_SetConfig+0x80>
 8004512:	2b70      	cmp	r3, #112	; 0x70
 8004514:	d860      	bhi.n	80045d8 <TIM_SlaveTimer_SetConfig+0x110>
 8004516:	2b60      	cmp	r3, #96	; 0x60
 8004518:	d054      	beq.n	80045c4 <TIM_SlaveTimer_SetConfig+0xfc>
 800451a:	2b60      	cmp	r3, #96	; 0x60
 800451c:	d85c      	bhi.n	80045d8 <TIM_SlaveTimer_SetConfig+0x110>
 800451e:	2b50      	cmp	r3, #80	; 0x50
 8004520:	d046      	beq.n	80045b0 <TIM_SlaveTimer_SetConfig+0xe8>
 8004522:	2b50      	cmp	r3, #80	; 0x50
 8004524:	d858      	bhi.n	80045d8 <TIM_SlaveTimer_SetConfig+0x110>
 8004526:	2b40      	cmp	r3, #64	; 0x40
 8004528:	d019      	beq.n	800455e <TIM_SlaveTimer_SetConfig+0x96>
 800452a:	2b40      	cmp	r3, #64	; 0x40
 800452c:	d854      	bhi.n	80045d8 <TIM_SlaveTimer_SetConfig+0x110>
 800452e:	2b30      	cmp	r3, #48	; 0x30
 8004530:	d055      	beq.n	80045de <TIM_SlaveTimer_SetConfig+0x116>
 8004532:	2b30      	cmp	r3, #48	; 0x30
 8004534:	d850      	bhi.n	80045d8 <TIM_SlaveTimer_SetConfig+0x110>
 8004536:	2b20      	cmp	r3, #32
 8004538:	d051      	beq.n	80045de <TIM_SlaveTimer_SetConfig+0x116>
 800453a:	2b20      	cmp	r3, #32
 800453c:	d84c      	bhi.n	80045d8 <TIM_SlaveTimer_SetConfig+0x110>
 800453e:	2b00      	cmp	r3, #0
 8004540:	d04d      	beq.n	80045de <TIM_SlaveTimer_SetConfig+0x116>
 8004542:	2b10      	cmp	r3, #16
 8004544:	d04b      	beq.n	80045de <TIM_SlaveTimer_SetConfig+0x116>
 8004546:	e047      	b.n	80045d8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6818      	ldr	r0, [r3, #0]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	68d9      	ldr	r1, [r3, #12]
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	f000 f9ec 	bl	8004934 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800455c:	e040      	b.n	80045e0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b05      	cmp	r3, #5
 8004564:	d101      	bne.n	800456a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e03b      	b.n	80045e2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6a1a      	ldr	r2, [r3, #32]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 0201 	bic.w	r2, r2, #1
 8004580:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004590:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	011b      	lsls	r3, r3, #4
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	4313      	orrs	r3, r2
 800459c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	621a      	str	r2, [r3, #32]
      break;
 80045ae:	e017      	b.n	80045e0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6818      	ldr	r0, [r3, #0]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	6899      	ldr	r1, [r3, #8]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	461a      	mov	r2, r3
 80045be:	f000 f889 	bl	80046d4 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80045c2:	e00d      	b.n	80045e0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6818      	ldr	r0, [r3, #0]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	6899      	ldr	r1, [r3, #8]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	461a      	mov	r2, r3
 80045d2:	f000 f8eb 	bl	80047ac <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80045d6:	e003      	b.n	80045e0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	75fb      	strb	r3, [r7, #23]
      break;
 80045dc:	e000      	b.n	80045e0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80045de:	bf00      	nop
  }

  return status;
 80045e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
	...

080045ec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
 80045f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	f023 0201 	bic.w	r2, r3, #1
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	4a28      	ldr	r2, [pc, #160]	; (80046b8 <TIM_TI1_SetConfig+0xcc>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d01b      	beq.n	8004652 <TIM_TI1_SetConfig+0x66>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004620:	d017      	beq.n	8004652 <TIM_TI1_SetConfig+0x66>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	4a25      	ldr	r2, [pc, #148]	; (80046bc <TIM_TI1_SetConfig+0xd0>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d013      	beq.n	8004652 <TIM_TI1_SetConfig+0x66>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4a24      	ldr	r2, [pc, #144]	; (80046c0 <TIM_TI1_SetConfig+0xd4>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d00f      	beq.n	8004652 <TIM_TI1_SetConfig+0x66>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	4a23      	ldr	r2, [pc, #140]	; (80046c4 <TIM_TI1_SetConfig+0xd8>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d00b      	beq.n	8004652 <TIM_TI1_SetConfig+0x66>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	4a22      	ldr	r2, [pc, #136]	; (80046c8 <TIM_TI1_SetConfig+0xdc>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d007      	beq.n	8004652 <TIM_TI1_SetConfig+0x66>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	4a21      	ldr	r2, [pc, #132]	; (80046cc <TIM_TI1_SetConfig+0xe0>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d003      	beq.n	8004652 <TIM_TI1_SetConfig+0x66>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4a20      	ldr	r2, [pc, #128]	; (80046d0 <TIM_TI1_SetConfig+0xe4>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d101      	bne.n	8004656 <TIM_TI1_SetConfig+0x6a>
 8004652:	2301      	movs	r3, #1
 8004654:	e000      	b.n	8004658 <TIM_TI1_SetConfig+0x6c>
 8004656:	2300      	movs	r3, #0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d008      	beq.n	800466e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f023 0303 	bic.w	r3, r3, #3
 8004662:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4313      	orrs	r3, r2
 800466a:	617b      	str	r3, [r7, #20]
 800466c:	e003      	b.n	8004676 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f043 0301 	orr.w	r3, r3, #1
 8004674:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800467c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	011b      	lsls	r3, r3, #4
 8004682:	b2db      	uxtb	r3, r3
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	4313      	orrs	r3, r2
 8004688:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	f023 030a 	bic.w	r3, r3, #10
 8004690:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	f003 030a 	and.w	r3, r3, #10
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	4313      	orrs	r3, r2
 800469c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	621a      	str	r2, [r3, #32]
}
 80046aa:	bf00      	nop
 80046ac:	371c      	adds	r7, #28
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	40010000 	.word	0x40010000
 80046bc:	40000400 	.word	0x40000400
 80046c0:	40000800 	.word	0x40000800
 80046c4:	40000c00 	.word	0x40000c00
 80046c8:	40010400 	.word	0x40010400
 80046cc:	40014000 	.word	0x40014000
 80046d0:	40001800 	.word	0x40001800

080046d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b087      	sub	sp, #28
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	f023 0201 	bic.w	r2, r3, #1
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	011b      	lsls	r3, r3, #4
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	4313      	orrs	r3, r2
 8004708:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f023 030a 	bic.w	r3, r3, #10
 8004710:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004712:	697a      	ldr	r2, [r7, #20]
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	4313      	orrs	r3, r2
 8004718:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	621a      	str	r2, [r3, #32]
}
 8004726:	bf00      	nop
 8004728:	371c      	adds	r7, #28
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004732:	b480      	push	{r7}
 8004734:	b087      	sub	sp, #28
 8004736:	af00      	add	r7, sp, #0
 8004738:	60f8      	str	r0, [r7, #12]
 800473a:	60b9      	str	r1, [r7, #8]
 800473c:	607a      	str	r2, [r7, #4]
 800473e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	f023 0210 	bic.w	r2, r3, #16
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800475e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	021b      	lsls	r3, r3, #8
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	4313      	orrs	r3, r2
 8004768:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004770:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	031b      	lsls	r3, r3, #12
 8004776:	b29b      	uxth	r3, r3
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	4313      	orrs	r3, r2
 800477c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004784:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	011b      	lsls	r3, r3, #4
 800478a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	4313      	orrs	r3, r2
 8004792:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	621a      	str	r2, [r3, #32]
}
 80047a0:	bf00      	nop
 80047a2:	371c      	adds	r7, #28
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	f023 0210 	bic.w	r2, r3, #16
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	031b      	lsls	r3, r3, #12
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	4313      	orrs	r3, r2
 80047e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	011b      	lsls	r3, r3, #4
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	621a      	str	r2, [r3, #32]
}
 8004800:	bf00      	nop
 8004802:	371c      	adds	r7, #28
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800480c:	b480      	push	{r7}
 800480e:	b087      	sub	sp, #28
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
 8004818:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	f023 0303 	bic.w	r3, r3, #3
 8004838:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4313      	orrs	r3, r2
 8004840:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004848:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	011b      	lsls	r3, r3, #4
 800484e:	b2db      	uxtb	r3, r3
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	4313      	orrs	r3, r2
 8004854:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800485c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	021b      	lsls	r3, r3, #8
 8004862:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	4313      	orrs	r3, r2
 800486a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	621a      	str	r2, [r3, #32]
}
 8004878:	bf00      	nop
 800487a:	371c      	adds	r7, #28
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004884:	b480      	push	{r7}
 8004886:	b087      	sub	sp, #28
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
 8004890:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	021b      	lsls	r3, r3, #8
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048c2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	031b      	lsls	r3, r3, #12
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80048d6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	031b      	lsls	r3, r3, #12
 80048dc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	621a      	str	r2, [r3, #32]
}
 80048f2:	bf00      	nop
 80048f4:	371c      	adds	r7, #28
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048fe:	b480      	push	{r7}
 8004900:	b085      	sub	sp, #20
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
 8004906:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004914:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4313      	orrs	r3, r2
 800491c:	f043 0307 	orr.w	r3, r3, #7
 8004920:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	609a      	str	r2, [r3, #8]
}
 8004928:	bf00      	nop
 800492a:	3714      	adds	r7, #20
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004934:	b480      	push	{r7}
 8004936:	b087      	sub	sp, #28
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
 8004940:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800494e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	021a      	lsls	r2, r3, #8
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	431a      	orrs	r2, r3
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	4313      	orrs	r3, r2
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	4313      	orrs	r3, r2
 8004960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	609a      	str	r2, [r3, #8]
}
 8004968:	bf00      	nop
 800496a:	371c      	adds	r7, #28
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f003 031f 	and.w	r3, r3, #31
 8004986:	2201      	movs	r2, #1
 8004988:	fa02 f303 	lsl.w	r3, r2, r3
 800498c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6a1a      	ldr	r2, [r3, #32]
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	43db      	mvns	r3, r3
 8004996:	401a      	ands	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6a1a      	ldr	r2, [r3, #32]
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f003 031f 	and.w	r3, r3, #31
 80049a6:	6879      	ldr	r1, [r7, #4]
 80049a8:	fa01 f303 	lsl.w	r3, r1, r3
 80049ac:	431a      	orrs	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	621a      	str	r2, [r3, #32]
}
 80049b2:	bf00      	nop
 80049b4:	371c      	adds	r7, #28
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
	...

080049c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d101      	bne.n	80049d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049d4:	2302      	movs	r3, #2
 80049d6:	e05a      	b.n	8004a8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2202      	movs	r2, #2
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a21      	ldr	r2, [pc, #132]	; (8004a9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d022      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a24:	d01d      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a1d      	ldr	r2, [pc, #116]	; (8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d018      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a1b      	ldr	r2, [pc, #108]	; (8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d013      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a1a      	ldr	r2, [pc, #104]	; (8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d00e      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a18      	ldr	r2, [pc, #96]	; (8004aac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d009      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a17      	ldr	r2, [pc, #92]	; (8004ab0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d004      	beq.n	8004a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a15      	ldr	r2, [pc, #84]	; (8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d10c      	bne.n	8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40010000 	.word	0x40010000
 8004aa0:	40000400 	.word	0x40000400
 8004aa4:	40000800 	.word	0x40000800
 8004aa8:	40000c00 	.word	0x40000c00
 8004aac:	40010400 	.word	0x40010400
 8004ab0:	40014000 	.word	0x40014000
 8004ab4:	40001800 	.word	0x40001800

08004ab8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e03f      	b.n	8004b4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d106      	bne.n	8004ae4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7fc ff6a 	bl	80019b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2224      	movs	r2, #36	; 0x24
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004afa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f929 	bl	8004d54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	695a      	ldr	r2, [r3, #20]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68da      	ldr	r2, [r3, #12]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2220      	movs	r2, #32
 8004b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b08a      	sub	sp, #40	; 0x28
 8004b56:	af02      	add	r7, sp, #8
 8004b58:	60f8      	str	r0, [r7, #12]
 8004b5a:	60b9      	str	r1, [r7, #8]
 8004b5c:	603b      	str	r3, [r7, #0]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b20      	cmp	r3, #32
 8004b70:	d17c      	bne.n	8004c6c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <HAL_UART_Transmit+0x2c>
 8004b78:	88fb      	ldrh	r3, [r7, #6]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e075      	b.n	8004c6e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d101      	bne.n	8004b90 <HAL_UART_Transmit+0x3e>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	e06e      	b.n	8004c6e <HAL_UART_Transmit+0x11c>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2221      	movs	r2, #33	; 0x21
 8004ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ba6:	f7fd f8bf 	bl	8001d28 <HAL_GetTick>
 8004baa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	88fa      	ldrh	r2, [r7, #6]
 8004bb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	88fa      	ldrh	r2, [r7, #6]
 8004bb6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc0:	d108      	bne.n	8004bd4 <HAL_UART_Transmit+0x82>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d104      	bne.n	8004bd4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	61bb      	str	r3, [r7, #24]
 8004bd2:	e003      	b.n	8004bdc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004be4:	e02a      	b.n	8004c3c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	2200      	movs	r2, #0
 8004bee:	2180      	movs	r1, #128	; 0x80
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 f840 	bl	8004c76 <UART_WaitOnFlagUntilTimeout>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d001      	beq.n	8004c00 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e036      	b.n	8004c6e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10b      	bne.n	8004c1e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	881b      	ldrh	r3, [r3, #0]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	3302      	adds	r3, #2
 8004c1a:	61bb      	str	r3, [r7, #24]
 8004c1c:	e007      	b.n	8004c2e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	781a      	ldrb	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	3b01      	subs	r3, #1
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1cf      	bne.n	8004be6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	2140      	movs	r1, #64	; 0x40
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f000 f810 	bl	8004c76 <UART_WaitOnFlagUntilTimeout>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e006      	b.n	8004c6e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2220      	movs	r2, #32
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	e000      	b.n	8004c6e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004c6c:	2302      	movs	r3, #2
  }
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3720      	adds	r7, #32
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b090      	sub	sp, #64	; 0x40
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	60f8      	str	r0, [r7, #12]
 8004c7e:	60b9      	str	r1, [r7, #8]
 8004c80:	603b      	str	r3, [r7, #0]
 8004c82:	4613      	mov	r3, r2
 8004c84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c86:	e050      	b.n	8004d2a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c8e:	d04c      	beq.n	8004d2a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d007      	beq.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c96:	f7fd f847 	bl	8001d28 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d241      	bcs.n	8004d2a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	330c      	adds	r3, #12
 8004cac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb0:	e853 3f00 	ldrex	r3, [r3]
 8004cb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	330c      	adds	r3, #12
 8004cc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004cc6:	637a      	str	r2, [r7, #52]	; 0x34
 8004cc8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ccc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cce:	e841 2300 	strex	r3, r2, [r1]
 8004cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1e5      	bne.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	3314      	adds	r3, #20
 8004ce0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	e853 3f00 	ldrex	r3, [r3]
 8004ce8:	613b      	str	r3, [r7, #16]
   return(result);
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f023 0301 	bic.w	r3, r3, #1
 8004cf0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	3314      	adds	r3, #20
 8004cf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cfa:	623a      	str	r2, [r7, #32]
 8004cfc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfe:	69f9      	ldr	r1, [r7, #28]
 8004d00:	6a3a      	ldr	r2, [r7, #32]
 8004d02:	e841 2300 	strex	r3, r2, [r1]
 8004d06:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1e5      	bne.n	8004cda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2220      	movs	r2, #32
 8004d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e00f      	b.n	8004d4a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	4013      	ands	r3, r2
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	bf0c      	ite	eq
 8004d3a:	2301      	moveq	r3, #1
 8004d3c:	2300      	movne	r3, #0
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	461a      	mov	r2, r3
 8004d42:	79fb      	ldrb	r3, [r7, #7]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d09f      	beq.n	8004c88 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3740      	adds	r7, #64	; 0x40
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
	...

08004d54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d58:	b0c0      	sub	sp, #256	; 0x100
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d70:	68d9      	ldr	r1, [r3, #12]
 8004d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	ea40 0301 	orr.w	r3, r0, r1
 8004d7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	431a      	orrs	r2, r3
 8004d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004dac:	f021 010c 	bic.w	r1, r1, #12
 8004db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004dba:	430b      	orrs	r3, r1
 8004dbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dce:	6999      	ldr	r1, [r3, #24]
 8004dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	ea40 0301 	orr.w	r3, r0, r1
 8004dda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	4b8f      	ldr	r3, [pc, #572]	; (8005020 <UART_SetConfig+0x2cc>)
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d005      	beq.n	8004df4 <UART_SetConfig+0xa0>
 8004de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	4b8d      	ldr	r3, [pc, #564]	; (8005024 <UART_SetConfig+0x2d0>)
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d104      	bne.n	8004dfe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004df4:	f7fd fe0a 	bl	8002a0c <HAL_RCC_GetPCLK2Freq>
 8004df8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004dfc:	e003      	b.n	8004e06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004dfe:	f7fd fdf1 	bl	80029e4 <HAL_RCC_GetPCLK1Freq>
 8004e02:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e0a:	69db      	ldr	r3, [r3, #28]
 8004e0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e10:	f040 810c 	bne.w	800502c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e1e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004e26:	4622      	mov	r2, r4
 8004e28:	462b      	mov	r3, r5
 8004e2a:	1891      	adds	r1, r2, r2
 8004e2c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e2e:	415b      	adcs	r3, r3
 8004e30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e36:	4621      	mov	r1, r4
 8004e38:	eb12 0801 	adds.w	r8, r2, r1
 8004e3c:	4629      	mov	r1, r5
 8004e3e:	eb43 0901 	adc.w	r9, r3, r1
 8004e42:	f04f 0200 	mov.w	r2, #0
 8004e46:	f04f 0300 	mov.w	r3, #0
 8004e4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e56:	4690      	mov	r8, r2
 8004e58:	4699      	mov	r9, r3
 8004e5a:	4623      	mov	r3, r4
 8004e5c:	eb18 0303 	adds.w	r3, r8, r3
 8004e60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e64:	462b      	mov	r3, r5
 8004e66:	eb49 0303 	adc.w	r3, r9, r3
 8004e6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e7a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004e7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004e82:	460b      	mov	r3, r1
 8004e84:	18db      	adds	r3, r3, r3
 8004e86:	653b      	str	r3, [r7, #80]	; 0x50
 8004e88:	4613      	mov	r3, r2
 8004e8a:	eb42 0303 	adc.w	r3, r2, r3
 8004e8e:	657b      	str	r3, [r7, #84]	; 0x54
 8004e90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e98:	f7fb fa0a 	bl	80002b0 <__aeabi_uldivmod>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4b61      	ldr	r3, [pc, #388]	; (8005028 <UART_SetConfig+0x2d4>)
 8004ea2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ea6:	095b      	lsrs	r3, r3, #5
 8004ea8:	011c      	lsls	r4, r3, #4
 8004eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004eb4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004eb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ebc:	4642      	mov	r2, r8
 8004ebe:	464b      	mov	r3, r9
 8004ec0:	1891      	adds	r1, r2, r2
 8004ec2:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ec4:	415b      	adcs	r3, r3
 8004ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ec8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ecc:	4641      	mov	r1, r8
 8004ece:	eb12 0a01 	adds.w	sl, r2, r1
 8004ed2:	4649      	mov	r1, r9
 8004ed4:	eb43 0b01 	adc.w	fp, r3, r1
 8004ed8:	f04f 0200 	mov.w	r2, #0
 8004edc:	f04f 0300 	mov.w	r3, #0
 8004ee0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ee4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ee8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004eec:	4692      	mov	sl, r2
 8004eee:	469b      	mov	fp, r3
 8004ef0:	4643      	mov	r3, r8
 8004ef2:	eb1a 0303 	adds.w	r3, sl, r3
 8004ef6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004efa:	464b      	mov	r3, r9
 8004efc:	eb4b 0303 	adc.w	r3, fp, r3
 8004f00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f10:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004f14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f18:	460b      	mov	r3, r1
 8004f1a:	18db      	adds	r3, r3, r3
 8004f1c:	643b      	str	r3, [r7, #64]	; 0x40
 8004f1e:	4613      	mov	r3, r2
 8004f20:	eb42 0303 	adc.w	r3, r2, r3
 8004f24:	647b      	str	r3, [r7, #68]	; 0x44
 8004f26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004f2e:	f7fb f9bf 	bl	80002b0 <__aeabi_uldivmod>
 8004f32:	4602      	mov	r2, r0
 8004f34:	460b      	mov	r3, r1
 8004f36:	4611      	mov	r1, r2
 8004f38:	4b3b      	ldr	r3, [pc, #236]	; (8005028 <UART_SetConfig+0x2d4>)
 8004f3a:	fba3 2301 	umull	r2, r3, r3, r1
 8004f3e:	095b      	lsrs	r3, r3, #5
 8004f40:	2264      	movs	r2, #100	; 0x64
 8004f42:	fb02 f303 	mul.w	r3, r2, r3
 8004f46:	1acb      	subs	r3, r1, r3
 8004f48:	00db      	lsls	r3, r3, #3
 8004f4a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004f4e:	4b36      	ldr	r3, [pc, #216]	; (8005028 <UART_SetConfig+0x2d4>)
 8004f50:	fba3 2302 	umull	r2, r3, r3, r2
 8004f54:	095b      	lsrs	r3, r3, #5
 8004f56:	005b      	lsls	r3, r3, #1
 8004f58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f5c:	441c      	add	r4, r3
 8004f5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f62:	2200      	movs	r2, #0
 8004f64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f68:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004f6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004f70:	4642      	mov	r2, r8
 8004f72:	464b      	mov	r3, r9
 8004f74:	1891      	adds	r1, r2, r2
 8004f76:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f78:	415b      	adcs	r3, r3
 8004f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f80:	4641      	mov	r1, r8
 8004f82:	1851      	adds	r1, r2, r1
 8004f84:	6339      	str	r1, [r7, #48]	; 0x30
 8004f86:	4649      	mov	r1, r9
 8004f88:	414b      	adcs	r3, r1
 8004f8a:	637b      	str	r3, [r7, #52]	; 0x34
 8004f8c:	f04f 0200 	mov.w	r2, #0
 8004f90:	f04f 0300 	mov.w	r3, #0
 8004f94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f98:	4659      	mov	r1, fp
 8004f9a:	00cb      	lsls	r3, r1, #3
 8004f9c:	4651      	mov	r1, sl
 8004f9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fa2:	4651      	mov	r1, sl
 8004fa4:	00ca      	lsls	r2, r1, #3
 8004fa6:	4610      	mov	r0, r2
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4603      	mov	r3, r0
 8004fac:	4642      	mov	r2, r8
 8004fae:	189b      	adds	r3, r3, r2
 8004fb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fb4:	464b      	mov	r3, r9
 8004fb6:	460a      	mov	r2, r1
 8004fb8:	eb42 0303 	adc.w	r3, r2, r3
 8004fbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004fcc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004fd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	18db      	adds	r3, r3, r3
 8004fd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fda:	4613      	mov	r3, r2
 8004fdc:	eb42 0303 	adc.w	r3, r2, r3
 8004fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fe2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004fe6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004fea:	f7fb f961 	bl	80002b0 <__aeabi_uldivmod>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	4b0d      	ldr	r3, [pc, #52]	; (8005028 <UART_SetConfig+0x2d4>)
 8004ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ff8:	095b      	lsrs	r3, r3, #5
 8004ffa:	2164      	movs	r1, #100	; 0x64
 8004ffc:	fb01 f303 	mul.w	r3, r1, r3
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	3332      	adds	r3, #50	; 0x32
 8005006:	4a08      	ldr	r2, [pc, #32]	; (8005028 <UART_SetConfig+0x2d4>)
 8005008:	fba2 2303 	umull	r2, r3, r2, r3
 800500c:	095b      	lsrs	r3, r3, #5
 800500e:	f003 0207 	and.w	r2, r3, #7
 8005012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4422      	add	r2, r4
 800501a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800501c:	e106      	b.n	800522c <UART_SetConfig+0x4d8>
 800501e:	bf00      	nop
 8005020:	40011000 	.word	0x40011000
 8005024:	40011400 	.word	0x40011400
 8005028:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800502c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005030:	2200      	movs	r2, #0
 8005032:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005036:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800503a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800503e:	4642      	mov	r2, r8
 8005040:	464b      	mov	r3, r9
 8005042:	1891      	adds	r1, r2, r2
 8005044:	6239      	str	r1, [r7, #32]
 8005046:	415b      	adcs	r3, r3
 8005048:	627b      	str	r3, [r7, #36]	; 0x24
 800504a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800504e:	4641      	mov	r1, r8
 8005050:	1854      	adds	r4, r2, r1
 8005052:	4649      	mov	r1, r9
 8005054:	eb43 0501 	adc.w	r5, r3, r1
 8005058:	f04f 0200 	mov.w	r2, #0
 800505c:	f04f 0300 	mov.w	r3, #0
 8005060:	00eb      	lsls	r3, r5, #3
 8005062:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005066:	00e2      	lsls	r2, r4, #3
 8005068:	4614      	mov	r4, r2
 800506a:	461d      	mov	r5, r3
 800506c:	4643      	mov	r3, r8
 800506e:	18e3      	adds	r3, r4, r3
 8005070:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005074:	464b      	mov	r3, r9
 8005076:	eb45 0303 	adc.w	r3, r5, r3
 800507a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800507e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800508a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800508e:	f04f 0200 	mov.w	r2, #0
 8005092:	f04f 0300 	mov.w	r3, #0
 8005096:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800509a:	4629      	mov	r1, r5
 800509c:	008b      	lsls	r3, r1, #2
 800509e:	4621      	mov	r1, r4
 80050a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050a4:	4621      	mov	r1, r4
 80050a6:	008a      	lsls	r2, r1, #2
 80050a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80050ac:	f7fb f900 	bl	80002b0 <__aeabi_uldivmod>
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	4b60      	ldr	r3, [pc, #384]	; (8005238 <UART_SetConfig+0x4e4>)
 80050b6:	fba3 2302 	umull	r2, r3, r3, r2
 80050ba:	095b      	lsrs	r3, r3, #5
 80050bc:	011c      	lsls	r4, r3, #4
 80050be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050c2:	2200      	movs	r2, #0
 80050c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80050c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80050cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80050d0:	4642      	mov	r2, r8
 80050d2:	464b      	mov	r3, r9
 80050d4:	1891      	adds	r1, r2, r2
 80050d6:	61b9      	str	r1, [r7, #24]
 80050d8:	415b      	adcs	r3, r3
 80050da:	61fb      	str	r3, [r7, #28]
 80050dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050e0:	4641      	mov	r1, r8
 80050e2:	1851      	adds	r1, r2, r1
 80050e4:	6139      	str	r1, [r7, #16]
 80050e6:	4649      	mov	r1, r9
 80050e8:	414b      	adcs	r3, r1
 80050ea:	617b      	str	r3, [r7, #20]
 80050ec:	f04f 0200 	mov.w	r2, #0
 80050f0:	f04f 0300 	mov.w	r3, #0
 80050f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050f8:	4659      	mov	r1, fp
 80050fa:	00cb      	lsls	r3, r1, #3
 80050fc:	4651      	mov	r1, sl
 80050fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005102:	4651      	mov	r1, sl
 8005104:	00ca      	lsls	r2, r1, #3
 8005106:	4610      	mov	r0, r2
 8005108:	4619      	mov	r1, r3
 800510a:	4603      	mov	r3, r0
 800510c:	4642      	mov	r2, r8
 800510e:	189b      	adds	r3, r3, r2
 8005110:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005114:	464b      	mov	r3, r9
 8005116:	460a      	mov	r2, r1
 8005118:	eb42 0303 	adc.w	r3, r2, r3
 800511c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	67bb      	str	r3, [r7, #120]	; 0x78
 800512a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800512c:	f04f 0200 	mov.w	r2, #0
 8005130:	f04f 0300 	mov.w	r3, #0
 8005134:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005138:	4649      	mov	r1, r9
 800513a:	008b      	lsls	r3, r1, #2
 800513c:	4641      	mov	r1, r8
 800513e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005142:	4641      	mov	r1, r8
 8005144:	008a      	lsls	r2, r1, #2
 8005146:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800514a:	f7fb f8b1 	bl	80002b0 <__aeabi_uldivmod>
 800514e:	4602      	mov	r2, r0
 8005150:	460b      	mov	r3, r1
 8005152:	4611      	mov	r1, r2
 8005154:	4b38      	ldr	r3, [pc, #224]	; (8005238 <UART_SetConfig+0x4e4>)
 8005156:	fba3 2301 	umull	r2, r3, r3, r1
 800515a:	095b      	lsrs	r3, r3, #5
 800515c:	2264      	movs	r2, #100	; 0x64
 800515e:	fb02 f303 	mul.w	r3, r2, r3
 8005162:	1acb      	subs	r3, r1, r3
 8005164:	011b      	lsls	r3, r3, #4
 8005166:	3332      	adds	r3, #50	; 0x32
 8005168:	4a33      	ldr	r2, [pc, #204]	; (8005238 <UART_SetConfig+0x4e4>)
 800516a:	fba2 2303 	umull	r2, r3, r2, r3
 800516e:	095b      	lsrs	r3, r3, #5
 8005170:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005174:	441c      	add	r4, r3
 8005176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800517a:	2200      	movs	r2, #0
 800517c:	673b      	str	r3, [r7, #112]	; 0x70
 800517e:	677a      	str	r2, [r7, #116]	; 0x74
 8005180:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005184:	4642      	mov	r2, r8
 8005186:	464b      	mov	r3, r9
 8005188:	1891      	adds	r1, r2, r2
 800518a:	60b9      	str	r1, [r7, #8]
 800518c:	415b      	adcs	r3, r3
 800518e:	60fb      	str	r3, [r7, #12]
 8005190:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005194:	4641      	mov	r1, r8
 8005196:	1851      	adds	r1, r2, r1
 8005198:	6039      	str	r1, [r7, #0]
 800519a:	4649      	mov	r1, r9
 800519c:	414b      	adcs	r3, r1
 800519e:	607b      	str	r3, [r7, #4]
 80051a0:	f04f 0200 	mov.w	r2, #0
 80051a4:	f04f 0300 	mov.w	r3, #0
 80051a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80051ac:	4659      	mov	r1, fp
 80051ae:	00cb      	lsls	r3, r1, #3
 80051b0:	4651      	mov	r1, sl
 80051b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051b6:	4651      	mov	r1, sl
 80051b8:	00ca      	lsls	r2, r1, #3
 80051ba:	4610      	mov	r0, r2
 80051bc:	4619      	mov	r1, r3
 80051be:	4603      	mov	r3, r0
 80051c0:	4642      	mov	r2, r8
 80051c2:	189b      	adds	r3, r3, r2
 80051c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80051c6:	464b      	mov	r3, r9
 80051c8:	460a      	mov	r2, r1
 80051ca:	eb42 0303 	adc.w	r3, r2, r3
 80051ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	663b      	str	r3, [r7, #96]	; 0x60
 80051da:	667a      	str	r2, [r7, #100]	; 0x64
 80051dc:	f04f 0200 	mov.w	r2, #0
 80051e0:	f04f 0300 	mov.w	r3, #0
 80051e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80051e8:	4649      	mov	r1, r9
 80051ea:	008b      	lsls	r3, r1, #2
 80051ec:	4641      	mov	r1, r8
 80051ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051f2:	4641      	mov	r1, r8
 80051f4:	008a      	lsls	r2, r1, #2
 80051f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80051fa:	f7fb f859 	bl	80002b0 <__aeabi_uldivmod>
 80051fe:	4602      	mov	r2, r0
 8005200:	460b      	mov	r3, r1
 8005202:	4b0d      	ldr	r3, [pc, #52]	; (8005238 <UART_SetConfig+0x4e4>)
 8005204:	fba3 1302 	umull	r1, r3, r3, r2
 8005208:	095b      	lsrs	r3, r3, #5
 800520a:	2164      	movs	r1, #100	; 0x64
 800520c:	fb01 f303 	mul.w	r3, r1, r3
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	011b      	lsls	r3, r3, #4
 8005214:	3332      	adds	r3, #50	; 0x32
 8005216:	4a08      	ldr	r2, [pc, #32]	; (8005238 <UART_SetConfig+0x4e4>)
 8005218:	fba2 2303 	umull	r2, r3, r2, r3
 800521c:	095b      	lsrs	r3, r3, #5
 800521e:	f003 020f 	and.w	r2, r3, #15
 8005222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4422      	add	r2, r4
 800522a:	609a      	str	r2, [r3, #8]
}
 800522c:	bf00      	nop
 800522e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005232:	46bd      	mov	sp, r7
 8005234:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005238:	51eb851f 	.word	0x51eb851f

0800523c <std>:
 800523c:	2300      	movs	r3, #0
 800523e:	b510      	push	{r4, lr}
 8005240:	4604      	mov	r4, r0
 8005242:	e9c0 3300 	strd	r3, r3, [r0]
 8005246:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800524a:	6083      	str	r3, [r0, #8]
 800524c:	8181      	strh	r1, [r0, #12]
 800524e:	6643      	str	r3, [r0, #100]	; 0x64
 8005250:	81c2      	strh	r2, [r0, #14]
 8005252:	6183      	str	r3, [r0, #24]
 8005254:	4619      	mov	r1, r3
 8005256:	2208      	movs	r2, #8
 8005258:	305c      	adds	r0, #92	; 0x5c
 800525a:	f000 f8b1 	bl	80053c0 <memset>
 800525e:	4b05      	ldr	r3, [pc, #20]	; (8005274 <std+0x38>)
 8005260:	6263      	str	r3, [r4, #36]	; 0x24
 8005262:	4b05      	ldr	r3, [pc, #20]	; (8005278 <std+0x3c>)
 8005264:	62a3      	str	r3, [r4, #40]	; 0x28
 8005266:	4b05      	ldr	r3, [pc, #20]	; (800527c <std+0x40>)
 8005268:	62e3      	str	r3, [r4, #44]	; 0x2c
 800526a:	4b05      	ldr	r3, [pc, #20]	; (8005280 <std+0x44>)
 800526c:	6224      	str	r4, [r4, #32]
 800526e:	6323      	str	r3, [r4, #48]	; 0x30
 8005270:	bd10      	pop	{r4, pc}
 8005272:	bf00      	nop
 8005274:	08005c85 	.word	0x08005c85
 8005278:	08005ca7 	.word	0x08005ca7
 800527c:	08005cdf 	.word	0x08005cdf
 8005280:	08005d03 	.word	0x08005d03

08005284 <stdio_exit_handler>:
 8005284:	4a02      	ldr	r2, [pc, #8]	; (8005290 <stdio_exit_handler+0xc>)
 8005286:	4903      	ldr	r1, [pc, #12]	; (8005294 <stdio_exit_handler+0x10>)
 8005288:	4803      	ldr	r0, [pc, #12]	; (8005298 <stdio_exit_handler+0x14>)
 800528a:	f000 b869 	b.w	8005360 <_fwalk_sglue>
 800528e:	bf00      	nop
 8005290:	2000000c 	.word	0x2000000c
 8005294:	08005c1d 	.word	0x08005c1d
 8005298:	20000018 	.word	0x20000018

0800529c <cleanup_stdio>:
 800529c:	6841      	ldr	r1, [r0, #4]
 800529e:	4b0c      	ldr	r3, [pc, #48]	; (80052d0 <cleanup_stdio+0x34>)
 80052a0:	4299      	cmp	r1, r3
 80052a2:	b510      	push	{r4, lr}
 80052a4:	4604      	mov	r4, r0
 80052a6:	d001      	beq.n	80052ac <cleanup_stdio+0x10>
 80052a8:	f000 fcb8 	bl	8005c1c <_fflush_r>
 80052ac:	68a1      	ldr	r1, [r4, #8]
 80052ae:	4b09      	ldr	r3, [pc, #36]	; (80052d4 <cleanup_stdio+0x38>)
 80052b0:	4299      	cmp	r1, r3
 80052b2:	d002      	beq.n	80052ba <cleanup_stdio+0x1e>
 80052b4:	4620      	mov	r0, r4
 80052b6:	f000 fcb1 	bl	8005c1c <_fflush_r>
 80052ba:	68e1      	ldr	r1, [r4, #12]
 80052bc:	4b06      	ldr	r3, [pc, #24]	; (80052d8 <cleanup_stdio+0x3c>)
 80052be:	4299      	cmp	r1, r3
 80052c0:	d004      	beq.n	80052cc <cleanup_stdio+0x30>
 80052c2:	4620      	mov	r0, r4
 80052c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052c8:	f000 bca8 	b.w	8005c1c <_fflush_r>
 80052cc:	bd10      	pop	{r4, pc}
 80052ce:	bf00      	nop
 80052d0:	200003e8 	.word	0x200003e8
 80052d4:	20000450 	.word	0x20000450
 80052d8:	200004b8 	.word	0x200004b8

080052dc <global_stdio_init.part.0>:
 80052dc:	b510      	push	{r4, lr}
 80052de:	4b0b      	ldr	r3, [pc, #44]	; (800530c <global_stdio_init.part.0+0x30>)
 80052e0:	4c0b      	ldr	r4, [pc, #44]	; (8005310 <global_stdio_init.part.0+0x34>)
 80052e2:	4a0c      	ldr	r2, [pc, #48]	; (8005314 <global_stdio_init.part.0+0x38>)
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	4620      	mov	r0, r4
 80052e8:	2200      	movs	r2, #0
 80052ea:	2104      	movs	r1, #4
 80052ec:	f7ff ffa6 	bl	800523c <std>
 80052f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80052f4:	2201      	movs	r2, #1
 80052f6:	2109      	movs	r1, #9
 80052f8:	f7ff ffa0 	bl	800523c <std>
 80052fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005300:	2202      	movs	r2, #2
 8005302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005306:	2112      	movs	r1, #18
 8005308:	f7ff bf98 	b.w	800523c <std>
 800530c:	20000520 	.word	0x20000520
 8005310:	200003e8 	.word	0x200003e8
 8005314:	08005285 	.word	0x08005285

08005318 <__sfp_lock_acquire>:
 8005318:	4801      	ldr	r0, [pc, #4]	; (8005320 <__sfp_lock_acquire+0x8>)
 800531a:	f000 b883 	b.w	8005424 <__retarget_lock_acquire_recursive>
 800531e:	bf00      	nop
 8005320:	20000525 	.word	0x20000525

08005324 <__sfp_lock_release>:
 8005324:	4801      	ldr	r0, [pc, #4]	; (800532c <__sfp_lock_release+0x8>)
 8005326:	f000 b87e 	b.w	8005426 <__retarget_lock_release_recursive>
 800532a:	bf00      	nop
 800532c:	20000525 	.word	0x20000525

08005330 <__sinit>:
 8005330:	b510      	push	{r4, lr}
 8005332:	4604      	mov	r4, r0
 8005334:	f7ff fff0 	bl	8005318 <__sfp_lock_acquire>
 8005338:	6a23      	ldr	r3, [r4, #32]
 800533a:	b11b      	cbz	r3, 8005344 <__sinit+0x14>
 800533c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005340:	f7ff bff0 	b.w	8005324 <__sfp_lock_release>
 8005344:	4b04      	ldr	r3, [pc, #16]	; (8005358 <__sinit+0x28>)
 8005346:	6223      	str	r3, [r4, #32]
 8005348:	4b04      	ldr	r3, [pc, #16]	; (800535c <__sinit+0x2c>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1f5      	bne.n	800533c <__sinit+0xc>
 8005350:	f7ff ffc4 	bl	80052dc <global_stdio_init.part.0>
 8005354:	e7f2      	b.n	800533c <__sinit+0xc>
 8005356:	bf00      	nop
 8005358:	0800529d 	.word	0x0800529d
 800535c:	20000520 	.word	0x20000520

08005360 <_fwalk_sglue>:
 8005360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005364:	4607      	mov	r7, r0
 8005366:	4688      	mov	r8, r1
 8005368:	4614      	mov	r4, r2
 800536a:	2600      	movs	r6, #0
 800536c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005370:	f1b9 0901 	subs.w	r9, r9, #1
 8005374:	d505      	bpl.n	8005382 <_fwalk_sglue+0x22>
 8005376:	6824      	ldr	r4, [r4, #0]
 8005378:	2c00      	cmp	r4, #0
 800537a:	d1f7      	bne.n	800536c <_fwalk_sglue+0xc>
 800537c:	4630      	mov	r0, r6
 800537e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005382:	89ab      	ldrh	r3, [r5, #12]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d907      	bls.n	8005398 <_fwalk_sglue+0x38>
 8005388:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800538c:	3301      	adds	r3, #1
 800538e:	d003      	beq.n	8005398 <_fwalk_sglue+0x38>
 8005390:	4629      	mov	r1, r5
 8005392:	4638      	mov	r0, r7
 8005394:	47c0      	blx	r8
 8005396:	4306      	orrs	r6, r0
 8005398:	3568      	adds	r5, #104	; 0x68
 800539a:	e7e9      	b.n	8005370 <_fwalk_sglue+0x10>

0800539c <iprintf>:
 800539c:	b40f      	push	{r0, r1, r2, r3}
 800539e:	b507      	push	{r0, r1, r2, lr}
 80053a0:	4906      	ldr	r1, [pc, #24]	; (80053bc <iprintf+0x20>)
 80053a2:	ab04      	add	r3, sp, #16
 80053a4:	6808      	ldr	r0, [r1, #0]
 80053a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80053aa:	6881      	ldr	r1, [r0, #8]
 80053ac:	9301      	str	r3, [sp, #4]
 80053ae:	f000 f865 	bl	800547c <_vfiprintf_r>
 80053b2:	b003      	add	sp, #12
 80053b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80053b8:	b004      	add	sp, #16
 80053ba:	4770      	bx	lr
 80053bc:	20000064 	.word	0x20000064

080053c0 <memset>:
 80053c0:	4402      	add	r2, r0
 80053c2:	4603      	mov	r3, r0
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d100      	bne.n	80053ca <memset+0xa>
 80053c8:	4770      	bx	lr
 80053ca:	f803 1b01 	strb.w	r1, [r3], #1
 80053ce:	e7f9      	b.n	80053c4 <memset+0x4>

080053d0 <__errno>:
 80053d0:	4b01      	ldr	r3, [pc, #4]	; (80053d8 <__errno+0x8>)
 80053d2:	6818      	ldr	r0, [r3, #0]
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	20000064 	.word	0x20000064

080053dc <__libc_init_array>:
 80053dc:	b570      	push	{r4, r5, r6, lr}
 80053de:	4d0d      	ldr	r5, [pc, #52]	; (8005414 <__libc_init_array+0x38>)
 80053e0:	4c0d      	ldr	r4, [pc, #52]	; (8005418 <__libc_init_array+0x3c>)
 80053e2:	1b64      	subs	r4, r4, r5
 80053e4:	10a4      	asrs	r4, r4, #2
 80053e6:	2600      	movs	r6, #0
 80053e8:	42a6      	cmp	r6, r4
 80053ea:	d109      	bne.n	8005400 <__libc_init_array+0x24>
 80053ec:	4d0b      	ldr	r5, [pc, #44]	; (800541c <__libc_init_array+0x40>)
 80053ee:	4c0c      	ldr	r4, [pc, #48]	; (8005420 <__libc_init_array+0x44>)
 80053f0:	f000 fe46 	bl	8006080 <_init>
 80053f4:	1b64      	subs	r4, r4, r5
 80053f6:	10a4      	asrs	r4, r4, #2
 80053f8:	2600      	movs	r6, #0
 80053fa:	42a6      	cmp	r6, r4
 80053fc:	d105      	bne.n	800540a <__libc_init_array+0x2e>
 80053fe:	bd70      	pop	{r4, r5, r6, pc}
 8005400:	f855 3b04 	ldr.w	r3, [r5], #4
 8005404:	4798      	blx	r3
 8005406:	3601      	adds	r6, #1
 8005408:	e7ee      	b.n	80053e8 <__libc_init_array+0xc>
 800540a:	f855 3b04 	ldr.w	r3, [r5], #4
 800540e:	4798      	blx	r3
 8005410:	3601      	adds	r6, #1
 8005412:	e7f2      	b.n	80053fa <__libc_init_array+0x1e>
 8005414:	080060f4 	.word	0x080060f4
 8005418:	080060f4 	.word	0x080060f4
 800541c:	080060f4 	.word	0x080060f4
 8005420:	080060f8 	.word	0x080060f8

08005424 <__retarget_lock_acquire_recursive>:
 8005424:	4770      	bx	lr

08005426 <__retarget_lock_release_recursive>:
 8005426:	4770      	bx	lr

08005428 <__sfputc_r>:
 8005428:	6893      	ldr	r3, [r2, #8]
 800542a:	3b01      	subs	r3, #1
 800542c:	2b00      	cmp	r3, #0
 800542e:	b410      	push	{r4}
 8005430:	6093      	str	r3, [r2, #8]
 8005432:	da08      	bge.n	8005446 <__sfputc_r+0x1e>
 8005434:	6994      	ldr	r4, [r2, #24]
 8005436:	42a3      	cmp	r3, r4
 8005438:	db01      	blt.n	800543e <__sfputc_r+0x16>
 800543a:	290a      	cmp	r1, #10
 800543c:	d103      	bne.n	8005446 <__sfputc_r+0x1e>
 800543e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005442:	f000 bc62 	b.w	8005d0a <__swbuf_r>
 8005446:	6813      	ldr	r3, [r2, #0]
 8005448:	1c58      	adds	r0, r3, #1
 800544a:	6010      	str	r0, [r2, #0]
 800544c:	7019      	strb	r1, [r3, #0]
 800544e:	4608      	mov	r0, r1
 8005450:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005454:	4770      	bx	lr

08005456 <__sfputs_r>:
 8005456:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005458:	4606      	mov	r6, r0
 800545a:	460f      	mov	r7, r1
 800545c:	4614      	mov	r4, r2
 800545e:	18d5      	adds	r5, r2, r3
 8005460:	42ac      	cmp	r4, r5
 8005462:	d101      	bne.n	8005468 <__sfputs_r+0x12>
 8005464:	2000      	movs	r0, #0
 8005466:	e007      	b.n	8005478 <__sfputs_r+0x22>
 8005468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800546c:	463a      	mov	r2, r7
 800546e:	4630      	mov	r0, r6
 8005470:	f7ff ffda 	bl	8005428 <__sfputc_r>
 8005474:	1c43      	adds	r3, r0, #1
 8005476:	d1f3      	bne.n	8005460 <__sfputs_r+0xa>
 8005478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800547c <_vfiprintf_r>:
 800547c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005480:	460d      	mov	r5, r1
 8005482:	b09d      	sub	sp, #116	; 0x74
 8005484:	4614      	mov	r4, r2
 8005486:	4698      	mov	r8, r3
 8005488:	4606      	mov	r6, r0
 800548a:	b118      	cbz	r0, 8005494 <_vfiprintf_r+0x18>
 800548c:	6a03      	ldr	r3, [r0, #32]
 800548e:	b90b      	cbnz	r3, 8005494 <_vfiprintf_r+0x18>
 8005490:	f7ff ff4e 	bl	8005330 <__sinit>
 8005494:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005496:	07d9      	lsls	r1, r3, #31
 8005498:	d405      	bmi.n	80054a6 <_vfiprintf_r+0x2a>
 800549a:	89ab      	ldrh	r3, [r5, #12]
 800549c:	059a      	lsls	r2, r3, #22
 800549e:	d402      	bmi.n	80054a6 <_vfiprintf_r+0x2a>
 80054a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054a2:	f7ff ffbf 	bl	8005424 <__retarget_lock_acquire_recursive>
 80054a6:	89ab      	ldrh	r3, [r5, #12]
 80054a8:	071b      	lsls	r3, r3, #28
 80054aa:	d501      	bpl.n	80054b0 <_vfiprintf_r+0x34>
 80054ac:	692b      	ldr	r3, [r5, #16]
 80054ae:	b99b      	cbnz	r3, 80054d8 <_vfiprintf_r+0x5c>
 80054b0:	4629      	mov	r1, r5
 80054b2:	4630      	mov	r0, r6
 80054b4:	f000 fc66 	bl	8005d84 <__swsetup_r>
 80054b8:	b170      	cbz	r0, 80054d8 <_vfiprintf_r+0x5c>
 80054ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054bc:	07dc      	lsls	r4, r3, #31
 80054be:	d504      	bpl.n	80054ca <_vfiprintf_r+0x4e>
 80054c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054c4:	b01d      	add	sp, #116	; 0x74
 80054c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ca:	89ab      	ldrh	r3, [r5, #12]
 80054cc:	0598      	lsls	r0, r3, #22
 80054ce:	d4f7      	bmi.n	80054c0 <_vfiprintf_r+0x44>
 80054d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054d2:	f7ff ffa8 	bl	8005426 <__retarget_lock_release_recursive>
 80054d6:	e7f3      	b.n	80054c0 <_vfiprintf_r+0x44>
 80054d8:	2300      	movs	r3, #0
 80054da:	9309      	str	r3, [sp, #36]	; 0x24
 80054dc:	2320      	movs	r3, #32
 80054de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80054e6:	2330      	movs	r3, #48	; 0x30
 80054e8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800569c <_vfiprintf_r+0x220>
 80054ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054f0:	f04f 0901 	mov.w	r9, #1
 80054f4:	4623      	mov	r3, r4
 80054f6:	469a      	mov	sl, r3
 80054f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054fc:	b10a      	cbz	r2, 8005502 <_vfiprintf_r+0x86>
 80054fe:	2a25      	cmp	r2, #37	; 0x25
 8005500:	d1f9      	bne.n	80054f6 <_vfiprintf_r+0x7a>
 8005502:	ebba 0b04 	subs.w	fp, sl, r4
 8005506:	d00b      	beq.n	8005520 <_vfiprintf_r+0xa4>
 8005508:	465b      	mov	r3, fp
 800550a:	4622      	mov	r2, r4
 800550c:	4629      	mov	r1, r5
 800550e:	4630      	mov	r0, r6
 8005510:	f7ff ffa1 	bl	8005456 <__sfputs_r>
 8005514:	3001      	adds	r0, #1
 8005516:	f000 80a9 	beq.w	800566c <_vfiprintf_r+0x1f0>
 800551a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800551c:	445a      	add	r2, fp
 800551e:	9209      	str	r2, [sp, #36]	; 0x24
 8005520:	f89a 3000 	ldrb.w	r3, [sl]
 8005524:	2b00      	cmp	r3, #0
 8005526:	f000 80a1 	beq.w	800566c <_vfiprintf_r+0x1f0>
 800552a:	2300      	movs	r3, #0
 800552c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005530:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005534:	f10a 0a01 	add.w	sl, sl, #1
 8005538:	9304      	str	r3, [sp, #16]
 800553a:	9307      	str	r3, [sp, #28]
 800553c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005540:	931a      	str	r3, [sp, #104]	; 0x68
 8005542:	4654      	mov	r4, sl
 8005544:	2205      	movs	r2, #5
 8005546:	f814 1b01 	ldrb.w	r1, [r4], #1
 800554a:	4854      	ldr	r0, [pc, #336]	; (800569c <_vfiprintf_r+0x220>)
 800554c:	f7fa fe60 	bl	8000210 <memchr>
 8005550:	9a04      	ldr	r2, [sp, #16]
 8005552:	b9d8      	cbnz	r0, 800558c <_vfiprintf_r+0x110>
 8005554:	06d1      	lsls	r1, r2, #27
 8005556:	bf44      	itt	mi
 8005558:	2320      	movmi	r3, #32
 800555a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800555e:	0713      	lsls	r3, r2, #28
 8005560:	bf44      	itt	mi
 8005562:	232b      	movmi	r3, #43	; 0x2b
 8005564:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005568:	f89a 3000 	ldrb.w	r3, [sl]
 800556c:	2b2a      	cmp	r3, #42	; 0x2a
 800556e:	d015      	beq.n	800559c <_vfiprintf_r+0x120>
 8005570:	9a07      	ldr	r2, [sp, #28]
 8005572:	4654      	mov	r4, sl
 8005574:	2000      	movs	r0, #0
 8005576:	f04f 0c0a 	mov.w	ip, #10
 800557a:	4621      	mov	r1, r4
 800557c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005580:	3b30      	subs	r3, #48	; 0x30
 8005582:	2b09      	cmp	r3, #9
 8005584:	d94d      	bls.n	8005622 <_vfiprintf_r+0x1a6>
 8005586:	b1b0      	cbz	r0, 80055b6 <_vfiprintf_r+0x13a>
 8005588:	9207      	str	r2, [sp, #28]
 800558a:	e014      	b.n	80055b6 <_vfiprintf_r+0x13a>
 800558c:	eba0 0308 	sub.w	r3, r0, r8
 8005590:	fa09 f303 	lsl.w	r3, r9, r3
 8005594:	4313      	orrs	r3, r2
 8005596:	9304      	str	r3, [sp, #16]
 8005598:	46a2      	mov	sl, r4
 800559a:	e7d2      	b.n	8005542 <_vfiprintf_r+0xc6>
 800559c:	9b03      	ldr	r3, [sp, #12]
 800559e:	1d19      	adds	r1, r3, #4
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	9103      	str	r1, [sp, #12]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	bfbb      	ittet	lt
 80055a8:	425b      	neglt	r3, r3
 80055aa:	f042 0202 	orrlt.w	r2, r2, #2
 80055ae:	9307      	strge	r3, [sp, #28]
 80055b0:	9307      	strlt	r3, [sp, #28]
 80055b2:	bfb8      	it	lt
 80055b4:	9204      	strlt	r2, [sp, #16]
 80055b6:	7823      	ldrb	r3, [r4, #0]
 80055b8:	2b2e      	cmp	r3, #46	; 0x2e
 80055ba:	d10c      	bne.n	80055d6 <_vfiprintf_r+0x15a>
 80055bc:	7863      	ldrb	r3, [r4, #1]
 80055be:	2b2a      	cmp	r3, #42	; 0x2a
 80055c0:	d134      	bne.n	800562c <_vfiprintf_r+0x1b0>
 80055c2:	9b03      	ldr	r3, [sp, #12]
 80055c4:	1d1a      	adds	r2, r3, #4
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	9203      	str	r2, [sp, #12]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	bfb8      	it	lt
 80055ce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80055d2:	3402      	adds	r4, #2
 80055d4:	9305      	str	r3, [sp, #20]
 80055d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80056ac <_vfiprintf_r+0x230>
 80055da:	7821      	ldrb	r1, [r4, #0]
 80055dc:	2203      	movs	r2, #3
 80055de:	4650      	mov	r0, sl
 80055e0:	f7fa fe16 	bl	8000210 <memchr>
 80055e4:	b138      	cbz	r0, 80055f6 <_vfiprintf_r+0x17a>
 80055e6:	9b04      	ldr	r3, [sp, #16]
 80055e8:	eba0 000a 	sub.w	r0, r0, sl
 80055ec:	2240      	movs	r2, #64	; 0x40
 80055ee:	4082      	lsls	r2, r0
 80055f0:	4313      	orrs	r3, r2
 80055f2:	3401      	adds	r4, #1
 80055f4:	9304      	str	r3, [sp, #16]
 80055f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055fa:	4829      	ldr	r0, [pc, #164]	; (80056a0 <_vfiprintf_r+0x224>)
 80055fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005600:	2206      	movs	r2, #6
 8005602:	f7fa fe05 	bl	8000210 <memchr>
 8005606:	2800      	cmp	r0, #0
 8005608:	d03f      	beq.n	800568a <_vfiprintf_r+0x20e>
 800560a:	4b26      	ldr	r3, [pc, #152]	; (80056a4 <_vfiprintf_r+0x228>)
 800560c:	bb1b      	cbnz	r3, 8005656 <_vfiprintf_r+0x1da>
 800560e:	9b03      	ldr	r3, [sp, #12]
 8005610:	3307      	adds	r3, #7
 8005612:	f023 0307 	bic.w	r3, r3, #7
 8005616:	3308      	adds	r3, #8
 8005618:	9303      	str	r3, [sp, #12]
 800561a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800561c:	443b      	add	r3, r7
 800561e:	9309      	str	r3, [sp, #36]	; 0x24
 8005620:	e768      	b.n	80054f4 <_vfiprintf_r+0x78>
 8005622:	fb0c 3202 	mla	r2, ip, r2, r3
 8005626:	460c      	mov	r4, r1
 8005628:	2001      	movs	r0, #1
 800562a:	e7a6      	b.n	800557a <_vfiprintf_r+0xfe>
 800562c:	2300      	movs	r3, #0
 800562e:	3401      	adds	r4, #1
 8005630:	9305      	str	r3, [sp, #20]
 8005632:	4619      	mov	r1, r3
 8005634:	f04f 0c0a 	mov.w	ip, #10
 8005638:	4620      	mov	r0, r4
 800563a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800563e:	3a30      	subs	r2, #48	; 0x30
 8005640:	2a09      	cmp	r2, #9
 8005642:	d903      	bls.n	800564c <_vfiprintf_r+0x1d0>
 8005644:	2b00      	cmp	r3, #0
 8005646:	d0c6      	beq.n	80055d6 <_vfiprintf_r+0x15a>
 8005648:	9105      	str	r1, [sp, #20]
 800564a:	e7c4      	b.n	80055d6 <_vfiprintf_r+0x15a>
 800564c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005650:	4604      	mov	r4, r0
 8005652:	2301      	movs	r3, #1
 8005654:	e7f0      	b.n	8005638 <_vfiprintf_r+0x1bc>
 8005656:	ab03      	add	r3, sp, #12
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	462a      	mov	r2, r5
 800565c:	4b12      	ldr	r3, [pc, #72]	; (80056a8 <_vfiprintf_r+0x22c>)
 800565e:	a904      	add	r1, sp, #16
 8005660:	4630      	mov	r0, r6
 8005662:	f3af 8000 	nop.w
 8005666:	4607      	mov	r7, r0
 8005668:	1c78      	adds	r0, r7, #1
 800566a:	d1d6      	bne.n	800561a <_vfiprintf_r+0x19e>
 800566c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800566e:	07d9      	lsls	r1, r3, #31
 8005670:	d405      	bmi.n	800567e <_vfiprintf_r+0x202>
 8005672:	89ab      	ldrh	r3, [r5, #12]
 8005674:	059a      	lsls	r2, r3, #22
 8005676:	d402      	bmi.n	800567e <_vfiprintf_r+0x202>
 8005678:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800567a:	f7ff fed4 	bl	8005426 <__retarget_lock_release_recursive>
 800567e:	89ab      	ldrh	r3, [r5, #12]
 8005680:	065b      	lsls	r3, r3, #25
 8005682:	f53f af1d 	bmi.w	80054c0 <_vfiprintf_r+0x44>
 8005686:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005688:	e71c      	b.n	80054c4 <_vfiprintf_r+0x48>
 800568a:	ab03      	add	r3, sp, #12
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	462a      	mov	r2, r5
 8005690:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <_vfiprintf_r+0x22c>)
 8005692:	a904      	add	r1, sp, #16
 8005694:	4630      	mov	r0, r6
 8005696:	f000 f919 	bl	80058cc <_printf_i>
 800569a:	e7e4      	b.n	8005666 <_vfiprintf_r+0x1ea>
 800569c:	080060b8 	.word	0x080060b8
 80056a0:	080060c2 	.word	0x080060c2
 80056a4:	00000000 	.word	0x00000000
 80056a8:	08005457 	.word	0x08005457
 80056ac:	080060be 	.word	0x080060be

080056b0 <sbrk_aligned>:
 80056b0:	b570      	push	{r4, r5, r6, lr}
 80056b2:	4e0e      	ldr	r6, [pc, #56]	; (80056ec <sbrk_aligned+0x3c>)
 80056b4:	460c      	mov	r4, r1
 80056b6:	6831      	ldr	r1, [r6, #0]
 80056b8:	4605      	mov	r5, r0
 80056ba:	b911      	cbnz	r1, 80056c2 <sbrk_aligned+0x12>
 80056bc:	f000 fc72 	bl	8005fa4 <_sbrk_r>
 80056c0:	6030      	str	r0, [r6, #0]
 80056c2:	4621      	mov	r1, r4
 80056c4:	4628      	mov	r0, r5
 80056c6:	f000 fc6d 	bl	8005fa4 <_sbrk_r>
 80056ca:	1c43      	adds	r3, r0, #1
 80056cc:	d00a      	beq.n	80056e4 <sbrk_aligned+0x34>
 80056ce:	1cc4      	adds	r4, r0, #3
 80056d0:	f024 0403 	bic.w	r4, r4, #3
 80056d4:	42a0      	cmp	r0, r4
 80056d6:	d007      	beq.n	80056e8 <sbrk_aligned+0x38>
 80056d8:	1a21      	subs	r1, r4, r0
 80056da:	4628      	mov	r0, r5
 80056dc:	f000 fc62 	bl	8005fa4 <_sbrk_r>
 80056e0:	3001      	adds	r0, #1
 80056e2:	d101      	bne.n	80056e8 <sbrk_aligned+0x38>
 80056e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80056e8:	4620      	mov	r0, r4
 80056ea:	bd70      	pop	{r4, r5, r6, pc}
 80056ec:	2000052c 	.word	0x2000052c

080056f0 <_malloc_r>:
 80056f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056f4:	1ccd      	adds	r5, r1, #3
 80056f6:	f025 0503 	bic.w	r5, r5, #3
 80056fa:	3508      	adds	r5, #8
 80056fc:	2d0c      	cmp	r5, #12
 80056fe:	bf38      	it	cc
 8005700:	250c      	movcc	r5, #12
 8005702:	2d00      	cmp	r5, #0
 8005704:	4607      	mov	r7, r0
 8005706:	db01      	blt.n	800570c <_malloc_r+0x1c>
 8005708:	42a9      	cmp	r1, r5
 800570a:	d905      	bls.n	8005718 <_malloc_r+0x28>
 800570c:	230c      	movs	r3, #12
 800570e:	603b      	str	r3, [r7, #0]
 8005710:	2600      	movs	r6, #0
 8005712:	4630      	mov	r0, r6
 8005714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005718:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80057ec <_malloc_r+0xfc>
 800571c:	f000 faa6 	bl	8005c6c <__malloc_lock>
 8005720:	f8d8 3000 	ldr.w	r3, [r8]
 8005724:	461c      	mov	r4, r3
 8005726:	bb5c      	cbnz	r4, 8005780 <_malloc_r+0x90>
 8005728:	4629      	mov	r1, r5
 800572a:	4638      	mov	r0, r7
 800572c:	f7ff ffc0 	bl	80056b0 <sbrk_aligned>
 8005730:	1c43      	adds	r3, r0, #1
 8005732:	4604      	mov	r4, r0
 8005734:	d155      	bne.n	80057e2 <_malloc_r+0xf2>
 8005736:	f8d8 4000 	ldr.w	r4, [r8]
 800573a:	4626      	mov	r6, r4
 800573c:	2e00      	cmp	r6, #0
 800573e:	d145      	bne.n	80057cc <_malloc_r+0xdc>
 8005740:	2c00      	cmp	r4, #0
 8005742:	d048      	beq.n	80057d6 <_malloc_r+0xe6>
 8005744:	6823      	ldr	r3, [r4, #0]
 8005746:	4631      	mov	r1, r6
 8005748:	4638      	mov	r0, r7
 800574a:	eb04 0903 	add.w	r9, r4, r3
 800574e:	f000 fc29 	bl	8005fa4 <_sbrk_r>
 8005752:	4581      	cmp	r9, r0
 8005754:	d13f      	bne.n	80057d6 <_malloc_r+0xe6>
 8005756:	6821      	ldr	r1, [r4, #0]
 8005758:	1a6d      	subs	r5, r5, r1
 800575a:	4629      	mov	r1, r5
 800575c:	4638      	mov	r0, r7
 800575e:	f7ff ffa7 	bl	80056b0 <sbrk_aligned>
 8005762:	3001      	adds	r0, #1
 8005764:	d037      	beq.n	80057d6 <_malloc_r+0xe6>
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	442b      	add	r3, r5
 800576a:	6023      	str	r3, [r4, #0]
 800576c:	f8d8 3000 	ldr.w	r3, [r8]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d038      	beq.n	80057e6 <_malloc_r+0xf6>
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	42a2      	cmp	r2, r4
 8005778:	d12b      	bne.n	80057d2 <_malloc_r+0xe2>
 800577a:	2200      	movs	r2, #0
 800577c:	605a      	str	r2, [r3, #4]
 800577e:	e00f      	b.n	80057a0 <_malloc_r+0xb0>
 8005780:	6822      	ldr	r2, [r4, #0]
 8005782:	1b52      	subs	r2, r2, r5
 8005784:	d41f      	bmi.n	80057c6 <_malloc_r+0xd6>
 8005786:	2a0b      	cmp	r2, #11
 8005788:	d917      	bls.n	80057ba <_malloc_r+0xca>
 800578a:	1961      	adds	r1, r4, r5
 800578c:	42a3      	cmp	r3, r4
 800578e:	6025      	str	r5, [r4, #0]
 8005790:	bf18      	it	ne
 8005792:	6059      	strne	r1, [r3, #4]
 8005794:	6863      	ldr	r3, [r4, #4]
 8005796:	bf08      	it	eq
 8005798:	f8c8 1000 	streq.w	r1, [r8]
 800579c:	5162      	str	r2, [r4, r5]
 800579e:	604b      	str	r3, [r1, #4]
 80057a0:	4638      	mov	r0, r7
 80057a2:	f104 060b 	add.w	r6, r4, #11
 80057a6:	f000 fa67 	bl	8005c78 <__malloc_unlock>
 80057aa:	f026 0607 	bic.w	r6, r6, #7
 80057ae:	1d23      	adds	r3, r4, #4
 80057b0:	1af2      	subs	r2, r6, r3
 80057b2:	d0ae      	beq.n	8005712 <_malloc_r+0x22>
 80057b4:	1b9b      	subs	r3, r3, r6
 80057b6:	50a3      	str	r3, [r4, r2]
 80057b8:	e7ab      	b.n	8005712 <_malloc_r+0x22>
 80057ba:	42a3      	cmp	r3, r4
 80057bc:	6862      	ldr	r2, [r4, #4]
 80057be:	d1dd      	bne.n	800577c <_malloc_r+0x8c>
 80057c0:	f8c8 2000 	str.w	r2, [r8]
 80057c4:	e7ec      	b.n	80057a0 <_malloc_r+0xb0>
 80057c6:	4623      	mov	r3, r4
 80057c8:	6864      	ldr	r4, [r4, #4]
 80057ca:	e7ac      	b.n	8005726 <_malloc_r+0x36>
 80057cc:	4634      	mov	r4, r6
 80057ce:	6876      	ldr	r6, [r6, #4]
 80057d0:	e7b4      	b.n	800573c <_malloc_r+0x4c>
 80057d2:	4613      	mov	r3, r2
 80057d4:	e7cc      	b.n	8005770 <_malloc_r+0x80>
 80057d6:	230c      	movs	r3, #12
 80057d8:	603b      	str	r3, [r7, #0]
 80057da:	4638      	mov	r0, r7
 80057dc:	f000 fa4c 	bl	8005c78 <__malloc_unlock>
 80057e0:	e797      	b.n	8005712 <_malloc_r+0x22>
 80057e2:	6025      	str	r5, [r4, #0]
 80057e4:	e7dc      	b.n	80057a0 <_malloc_r+0xb0>
 80057e6:	605b      	str	r3, [r3, #4]
 80057e8:	deff      	udf	#255	; 0xff
 80057ea:	bf00      	nop
 80057ec:	20000528 	.word	0x20000528

080057f0 <_printf_common>:
 80057f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057f4:	4616      	mov	r6, r2
 80057f6:	4699      	mov	r9, r3
 80057f8:	688a      	ldr	r2, [r1, #8]
 80057fa:	690b      	ldr	r3, [r1, #16]
 80057fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005800:	4293      	cmp	r3, r2
 8005802:	bfb8      	it	lt
 8005804:	4613      	movlt	r3, r2
 8005806:	6033      	str	r3, [r6, #0]
 8005808:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800580c:	4607      	mov	r7, r0
 800580e:	460c      	mov	r4, r1
 8005810:	b10a      	cbz	r2, 8005816 <_printf_common+0x26>
 8005812:	3301      	adds	r3, #1
 8005814:	6033      	str	r3, [r6, #0]
 8005816:	6823      	ldr	r3, [r4, #0]
 8005818:	0699      	lsls	r1, r3, #26
 800581a:	bf42      	ittt	mi
 800581c:	6833      	ldrmi	r3, [r6, #0]
 800581e:	3302      	addmi	r3, #2
 8005820:	6033      	strmi	r3, [r6, #0]
 8005822:	6825      	ldr	r5, [r4, #0]
 8005824:	f015 0506 	ands.w	r5, r5, #6
 8005828:	d106      	bne.n	8005838 <_printf_common+0x48>
 800582a:	f104 0a19 	add.w	sl, r4, #25
 800582e:	68e3      	ldr	r3, [r4, #12]
 8005830:	6832      	ldr	r2, [r6, #0]
 8005832:	1a9b      	subs	r3, r3, r2
 8005834:	42ab      	cmp	r3, r5
 8005836:	dc26      	bgt.n	8005886 <_printf_common+0x96>
 8005838:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800583c:	1e13      	subs	r3, r2, #0
 800583e:	6822      	ldr	r2, [r4, #0]
 8005840:	bf18      	it	ne
 8005842:	2301      	movne	r3, #1
 8005844:	0692      	lsls	r2, r2, #26
 8005846:	d42b      	bmi.n	80058a0 <_printf_common+0xb0>
 8005848:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800584c:	4649      	mov	r1, r9
 800584e:	4638      	mov	r0, r7
 8005850:	47c0      	blx	r8
 8005852:	3001      	adds	r0, #1
 8005854:	d01e      	beq.n	8005894 <_printf_common+0xa4>
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	6922      	ldr	r2, [r4, #16]
 800585a:	f003 0306 	and.w	r3, r3, #6
 800585e:	2b04      	cmp	r3, #4
 8005860:	bf02      	ittt	eq
 8005862:	68e5      	ldreq	r5, [r4, #12]
 8005864:	6833      	ldreq	r3, [r6, #0]
 8005866:	1aed      	subeq	r5, r5, r3
 8005868:	68a3      	ldr	r3, [r4, #8]
 800586a:	bf0c      	ite	eq
 800586c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005870:	2500      	movne	r5, #0
 8005872:	4293      	cmp	r3, r2
 8005874:	bfc4      	itt	gt
 8005876:	1a9b      	subgt	r3, r3, r2
 8005878:	18ed      	addgt	r5, r5, r3
 800587a:	2600      	movs	r6, #0
 800587c:	341a      	adds	r4, #26
 800587e:	42b5      	cmp	r5, r6
 8005880:	d11a      	bne.n	80058b8 <_printf_common+0xc8>
 8005882:	2000      	movs	r0, #0
 8005884:	e008      	b.n	8005898 <_printf_common+0xa8>
 8005886:	2301      	movs	r3, #1
 8005888:	4652      	mov	r2, sl
 800588a:	4649      	mov	r1, r9
 800588c:	4638      	mov	r0, r7
 800588e:	47c0      	blx	r8
 8005890:	3001      	adds	r0, #1
 8005892:	d103      	bne.n	800589c <_printf_common+0xac>
 8005894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800589c:	3501      	adds	r5, #1
 800589e:	e7c6      	b.n	800582e <_printf_common+0x3e>
 80058a0:	18e1      	adds	r1, r4, r3
 80058a2:	1c5a      	adds	r2, r3, #1
 80058a4:	2030      	movs	r0, #48	; 0x30
 80058a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058aa:	4422      	add	r2, r4
 80058ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058b4:	3302      	adds	r3, #2
 80058b6:	e7c7      	b.n	8005848 <_printf_common+0x58>
 80058b8:	2301      	movs	r3, #1
 80058ba:	4622      	mov	r2, r4
 80058bc:	4649      	mov	r1, r9
 80058be:	4638      	mov	r0, r7
 80058c0:	47c0      	blx	r8
 80058c2:	3001      	adds	r0, #1
 80058c4:	d0e6      	beq.n	8005894 <_printf_common+0xa4>
 80058c6:	3601      	adds	r6, #1
 80058c8:	e7d9      	b.n	800587e <_printf_common+0x8e>
	...

080058cc <_printf_i>:
 80058cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058d0:	7e0f      	ldrb	r7, [r1, #24]
 80058d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058d4:	2f78      	cmp	r7, #120	; 0x78
 80058d6:	4691      	mov	r9, r2
 80058d8:	4680      	mov	r8, r0
 80058da:	460c      	mov	r4, r1
 80058dc:	469a      	mov	sl, r3
 80058de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058e2:	d807      	bhi.n	80058f4 <_printf_i+0x28>
 80058e4:	2f62      	cmp	r7, #98	; 0x62
 80058e6:	d80a      	bhi.n	80058fe <_printf_i+0x32>
 80058e8:	2f00      	cmp	r7, #0
 80058ea:	f000 80d4 	beq.w	8005a96 <_printf_i+0x1ca>
 80058ee:	2f58      	cmp	r7, #88	; 0x58
 80058f0:	f000 80c0 	beq.w	8005a74 <_printf_i+0x1a8>
 80058f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058fc:	e03a      	b.n	8005974 <_printf_i+0xa8>
 80058fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005902:	2b15      	cmp	r3, #21
 8005904:	d8f6      	bhi.n	80058f4 <_printf_i+0x28>
 8005906:	a101      	add	r1, pc, #4	; (adr r1, 800590c <_printf_i+0x40>)
 8005908:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800590c:	08005965 	.word	0x08005965
 8005910:	08005979 	.word	0x08005979
 8005914:	080058f5 	.word	0x080058f5
 8005918:	080058f5 	.word	0x080058f5
 800591c:	080058f5 	.word	0x080058f5
 8005920:	080058f5 	.word	0x080058f5
 8005924:	08005979 	.word	0x08005979
 8005928:	080058f5 	.word	0x080058f5
 800592c:	080058f5 	.word	0x080058f5
 8005930:	080058f5 	.word	0x080058f5
 8005934:	080058f5 	.word	0x080058f5
 8005938:	08005a7d 	.word	0x08005a7d
 800593c:	080059a5 	.word	0x080059a5
 8005940:	08005a37 	.word	0x08005a37
 8005944:	080058f5 	.word	0x080058f5
 8005948:	080058f5 	.word	0x080058f5
 800594c:	08005a9f 	.word	0x08005a9f
 8005950:	080058f5 	.word	0x080058f5
 8005954:	080059a5 	.word	0x080059a5
 8005958:	080058f5 	.word	0x080058f5
 800595c:	080058f5 	.word	0x080058f5
 8005960:	08005a3f 	.word	0x08005a3f
 8005964:	682b      	ldr	r3, [r5, #0]
 8005966:	1d1a      	adds	r2, r3, #4
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	602a      	str	r2, [r5, #0]
 800596c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005970:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005974:	2301      	movs	r3, #1
 8005976:	e09f      	b.n	8005ab8 <_printf_i+0x1ec>
 8005978:	6820      	ldr	r0, [r4, #0]
 800597a:	682b      	ldr	r3, [r5, #0]
 800597c:	0607      	lsls	r7, r0, #24
 800597e:	f103 0104 	add.w	r1, r3, #4
 8005982:	6029      	str	r1, [r5, #0]
 8005984:	d501      	bpl.n	800598a <_printf_i+0xbe>
 8005986:	681e      	ldr	r6, [r3, #0]
 8005988:	e003      	b.n	8005992 <_printf_i+0xc6>
 800598a:	0646      	lsls	r6, r0, #25
 800598c:	d5fb      	bpl.n	8005986 <_printf_i+0xba>
 800598e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005992:	2e00      	cmp	r6, #0
 8005994:	da03      	bge.n	800599e <_printf_i+0xd2>
 8005996:	232d      	movs	r3, #45	; 0x2d
 8005998:	4276      	negs	r6, r6
 800599a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800599e:	485a      	ldr	r0, [pc, #360]	; (8005b08 <_printf_i+0x23c>)
 80059a0:	230a      	movs	r3, #10
 80059a2:	e012      	b.n	80059ca <_printf_i+0xfe>
 80059a4:	682b      	ldr	r3, [r5, #0]
 80059a6:	6820      	ldr	r0, [r4, #0]
 80059a8:	1d19      	adds	r1, r3, #4
 80059aa:	6029      	str	r1, [r5, #0]
 80059ac:	0605      	lsls	r5, r0, #24
 80059ae:	d501      	bpl.n	80059b4 <_printf_i+0xe8>
 80059b0:	681e      	ldr	r6, [r3, #0]
 80059b2:	e002      	b.n	80059ba <_printf_i+0xee>
 80059b4:	0641      	lsls	r1, r0, #25
 80059b6:	d5fb      	bpl.n	80059b0 <_printf_i+0xe4>
 80059b8:	881e      	ldrh	r6, [r3, #0]
 80059ba:	4853      	ldr	r0, [pc, #332]	; (8005b08 <_printf_i+0x23c>)
 80059bc:	2f6f      	cmp	r7, #111	; 0x6f
 80059be:	bf0c      	ite	eq
 80059c0:	2308      	moveq	r3, #8
 80059c2:	230a      	movne	r3, #10
 80059c4:	2100      	movs	r1, #0
 80059c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059ca:	6865      	ldr	r5, [r4, #4]
 80059cc:	60a5      	str	r5, [r4, #8]
 80059ce:	2d00      	cmp	r5, #0
 80059d0:	bfa2      	ittt	ge
 80059d2:	6821      	ldrge	r1, [r4, #0]
 80059d4:	f021 0104 	bicge.w	r1, r1, #4
 80059d8:	6021      	strge	r1, [r4, #0]
 80059da:	b90e      	cbnz	r6, 80059e0 <_printf_i+0x114>
 80059dc:	2d00      	cmp	r5, #0
 80059de:	d04b      	beq.n	8005a78 <_printf_i+0x1ac>
 80059e0:	4615      	mov	r5, r2
 80059e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80059e6:	fb03 6711 	mls	r7, r3, r1, r6
 80059ea:	5dc7      	ldrb	r7, [r0, r7]
 80059ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059f0:	4637      	mov	r7, r6
 80059f2:	42bb      	cmp	r3, r7
 80059f4:	460e      	mov	r6, r1
 80059f6:	d9f4      	bls.n	80059e2 <_printf_i+0x116>
 80059f8:	2b08      	cmp	r3, #8
 80059fa:	d10b      	bne.n	8005a14 <_printf_i+0x148>
 80059fc:	6823      	ldr	r3, [r4, #0]
 80059fe:	07de      	lsls	r6, r3, #31
 8005a00:	d508      	bpl.n	8005a14 <_printf_i+0x148>
 8005a02:	6923      	ldr	r3, [r4, #16]
 8005a04:	6861      	ldr	r1, [r4, #4]
 8005a06:	4299      	cmp	r1, r3
 8005a08:	bfde      	ittt	le
 8005a0a:	2330      	movle	r3, #48	; 0x30
 8005a0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a10:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005a14:	1b52      	subs	r2, r2, r5
 8005a16:	6122      	str	r2, [r4, #16]
 8005a18:	f8cd a000 	str.w	sl, [sp]
 8005a1c:	464b      	mov	r3, r9
 8005a1e:	aa03      	add	r2, sp, #12
 8005a20:	4621      	mov	r1, r4
 8005a22:	4640      	mov	r0, r8
 8005a24:	f7ff fee4 	bl	80057f0 <_printf_common>
 8005a28:	3001      	adds	r0, #1
 8005a2a:	d14a      	bne.n	8005ac2 <_printf_i+0x1f6>
 8005a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a30:	b004      	add	sp, #16
 8005a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	f043 0320 	orr.w	r3, r3, #32
 8005a3c:	6023      	str	r3, [r4, #0]
 8005a3e:	4833      	ldr	r0, [pc, #204]	; (8005b0c <_printf_i+0x240>)
 8005a40:	2778      	movs	r7, #120	; 0x78
 8005a42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	6829      	ldr	r1, [r5, #0]
 8005a4a:	061f      	lsls	r7, r3, #24
 8005a4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a50:	d402      	bmi.n	8005a58 <_printf_i+0x18c>
 8005a52:	065f      	lsls	r7, r3, #25
 8005a54:	bf48      	it	mi
 8005a56:	b2b6      	uxthmi	r6, r6
 8005a58:	07df      	lsls	r7, r3, #31
 8005a5a:	bf48      	it	mi
 8005a5c:	f043 0320 	orrmi.w	r3, r3, #32
 8005a60:	6029      	str	r1, [r5, #0]
 8005a62:	bf48      	it	mi
 8005a64:	6023      	strmi	r3, [r4, #0]
 8005a66:	b91e      	cbnz	r6, 8005a70 <_printf_i+0x1a4>
 8005a68:	6823      	ldr	r3, [r4, #0]
 8005a6a:	f023 0320 	bic.w	r3, r3, #32
 8005a6e:	6023      	str	r3, [r4, #0]
 8005a70:	2310      	movs	r3, #16
 8005a72:	e7a7      	b.n	80059c4 <_printf_i+0xf8>
 8005a74:	4824      	ldr	r0, [pc, #144]	; (8005b08 <_printf_i+0x23c>)
 8005a76:	e7e4      	b.n	8005a42 <_printf_i+0x176>
 8005a78:	4615      	mov	r5, r2
 8005a7a:	e7bd      	b.n	80059f8 <_printf_i+0x12c>
 8005a7c:	682b      	ldr	r3, [r5, #0]
 8005a7e:	6826      	ldr	r6, [r4, #0]
 8005a80:	6961      	ldr	r1, [r4, #20]
 8005a82:	1d18      	adds	r0, r3, #4
 8005a84:	6028      	str	r0, [r5, #0]
 8005a86:	0635      	lsls	r5, r6, #24
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	d501      	bpl.n	8005a90 <_printf_i+0x1c4>
 8005a8c:	6019      	str	r1, [r3, #0]
 8005a8e:	e002      	b.n	8005a96 <_printf_i+0x1ca>
 8005a90:	0670      	lsls	r0, r6, #25
 8005a92:	d5fb      	bpl.n	8005a8c <_printf_i+0x1c0>
 8005a94:	8019      	strh	r1, [r3, #0]
 8005a96:	2300      	movs	r3, #0
 8005a98:	6123      	str	r3, [r4, #16]
 8005a9a:	4615      	mov	r5, r2
 8005a9c:	e7bc      	b.n	8005a18 <_printf_i+0x14c>
 8005a9e:	682b      	ldr	r3, [r5, #0]
 8005aa0:	1d1a      	adds	r2, r3, #4
 8005aa2:	602a      	str	r2, [r5, #0]
 8005aa4:	681d      	ldr	r5, [r3, #0]
 8005aa6:	6862      	ldr	r2, [r4, #4]
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	4628      	mov	r0, r5
 8005aac:	f7fa fbb0 	bl	8000210 <memchr>
 8005ab0:	b108      	cbz	r0, 8005ab6 <_printf_i+0x1ea>
 8005ab2:	1b40      	subs	r0, r0, r5
 8005ab4:	6060      	str	r0, [r4, #4]
 8005ab6:	6863      	ldr	r3, [r4, #4]
 8005ab8:	6123      	str	r3, [r4, #16]
 8005aba:	2300      	movs	r3, #0
 8005abc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ac0:	e7aa      	b.n	8005a18 <_printf_i+0x14c>
 8005ac2:	6923      	ldr	r3, [r4, #16]
 8005ac4:	462a      	mov	r2, r5
 8005ac6:	4649      	mov	r1, r9
 8005ac8:	4640      	mov	r0, r8
 8005aca:	47d0      	blx	sl
 8005acc:	3001      	adds	r0, #1
 8005ace:	d0ad      	beq.n	8005a2c <_printf_i+0x160>
 8005ad0:	6823      	ldr	r3, [r4, #0]
 8005ad2:	079b      	lsls	r3, r3, #30
 8005ad4:	d413      	bmi.n	8005afe <_printf_i+0x232>
 8005ad6:	68e0      	ldr	r0, [r4, #12]
 8005ad8:	9b03      	ldr	r3, [sp, #12]
 8005ada:	4298      	cmp	r0, r3
 8005adc:	bfb8      	it	lt
 8005ade:	4618      	movlt	r0, r3
 8005ae0:	e7a6      	b.n	8005a30 <_printf_i+0x164>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	4632      	mov	r2, r6
 8005ae6:	4649      	mov	r1, r9
 8005ae8:	4640      	mov	r0, r8
 8005aea:	47d0      	blx	sl
 8005aec:	3001      	adds	r0, #1
 8005aee:	d09d      	beq.n	8005a2c <_printf_i+0x160>
 8005af0:	3501      	adds	r5, #1
 8005af2:	68e3      	ldr	r3, [r4, #12]
 8005af4:	9903      	ldr	r1, [sp, #12]
 8005af6:	1a5b      	subs	r3, r3, r1
 8005af8:	42ab      	cmp	r3, r5
 8005afa:	dcf2      	bgt.n	8005ae2 <_printf_i+0x216>
 8005afc:	e7eb      	b.n	8005ad6 <_printf_i+0x20a>
 8005afe:	2500      	movs	r5, #0
 8005b00:	f104 0619 	add.w	r6, r4, #25
 8005b04:	e7f5      	b.n	8005af2 <_printf_i+0x226>
 8005b06:	bf00      	nop
 8005b08:	080060c9 	.word	0x080060c9
 8005b0c:	080060da 	.word	0x080060da

08005b10 <__sflush_r>:
 8005b10:	898a      	ldrh	r2, [r1, #12]
 8005b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b16:	4605      	mov	r5, r0
 8005b18:	0710      	lsls	r0, r2, #28
 8005b1a:	460c      	mov	r4, r1
 8005b1c:	d458      	bmi.n	8005bd0 <__sflush_r+0xc0>
 8005b1e:	684b      	ldr	r3, [r1, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	dc05      	bgt.n	8005b30 <__sflush_r+0x20>
 8005b24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	dc02      	bgt.n	8005b30 <__sflush_r+0x20>
 8005b2a:	2000      	movs	r0, #0
 8005b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b32:	2e00      	cmp	r6, #0
 8005b34:	d0f9      	beq.n	8005b2a <__sflush_r+0x1a>
 8005b36:	2300      	movs	r3, #0
 8005b38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b3c:	682f      	ldr	r7, [r5, #0]
 8005b3e:	6a21      	ldr	r1, [r4, #32]
 8005b40:	602b      	str	r3, [r5, #0]
 8005b42:	d032      	beq.n	8005baa <__sflush_r+0x9a>
 8005b44:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b46:	89a3      	ldrh	r3, [r4, #12]
 8005b48:	075a      	lsls	r2, r3, #29
 8005b4a:	d505      	bpl.n	8005b58 <__sflush_r+0x48>
 8005b4c:	6863      	ldr	r3, [r4, #4]
 8005b4e:	1ac0      	subs	r0, r0, r3
 8005b50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b52:	b10b      	cbz	r3, 8005b58 <__sflush_r+0x48>
 8005b54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b56:	1ac0      	subs	r0, r0, r3
 8005b58:	2300      	movs	r3, #0
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b5e:	6a21      	ldr	r1, [r4, #32]
 8005b60:	4628      	mov	r0, r5
 8005b62:	47b0      	blx	r6
 8005b64:	1c43      	adds	r3, r0, #1
 8005b66:	89a3      	ldrh	r3, [r4, #12]
 8005b68:	d106      	bne.n	8005b78 <__sflush_r+0x68>
 8005b6a:	6829      	ldr	r1, [r5, #0]
 8005b6c:	291d      	cmp	r1, #29
 8005b6e:	d82b      	bhi.n	8005bc8 <__sflush_r+0xb8>
 8005b70:	4a29      	ldr	r2, [pc, #164]	; (8005c18 <__sflush_r+0x108>)
 8005b72:	410a      	asrs	r2, r1
 8005b74:	07d6      	lsls	r6, r2, #31
 8005b76:	d427      	bmi.n	8005bc8 <__sflush_r+0xb8>
 8005b78:	2200      	movs	r2, #0
 8005b7a:	6062      	str	r2, [r4, #4]
 8005b7c:	04d9      	lsls	r1, r3, #19
 8005b7e:	6922      	ldr	r2, [r4, #16]
 8005b80:	6022      	str	r2, [r4, #0]
 8005b82:	d504      	bpl.n	8005b8e <__sflush_r+0x7e>
 8005b84:	1c42      	adds	r2, r0, #1
 8005b86:	d101      	bne.n	8005b8c <__sflush_r+0x7c>
 8005b88:	682b      	ldr	r3, [r5, #0]
 8005b8a:	b903      	cbnz	r3, 8005b8e <__sflush_r+0x7e>
 8005b8c:	6560      	str	r0, [r4, #84]	; 0x54
 8005b8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b90:	602f      	str	r7, [r5, #0]
 8005b92:	2900      	cmp	r1, #0
 8005b94:	d0c9      	beq.n	8005b2a <__sflush_r+0x1a>
 8005b96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b9a:	4299      	cmp	r1, r3
 8005b9c:	d002      	beq.n	8005ba4 <__sflush_r+0x94>
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	f000 fa22 	bl	8005fe8 <_free_r>
 8005ba4:	2000      	movs	r0, #0
 8005ba6:	6360      	str	r0, [r4, #52]	; 0x34
 8005ba8:	e7c0      	b.n	8005b2c <__sflush_r+0x1c>
 8005baa:	2301      	movs	r3, #1
 8005bac:	4628      	mov	r0, r5
 8005bae:	47b0      	blx	r6
 8005bb0:	1c41      	adds	r1, r0, #1
 8005bb2:	d1c8      	bne.n	8005b46 <__sflush_r+0x36>
 8005bb4:	682b      	ldr	r3, [r5, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d0c5      	beq.n	8005b46 <__sflush_r+0x36>
 8005bba:	2b1d      	cmp	r3, #29
 8005bbc:	d001      	beq.n	8005bc2 <__sflush_r+0xb2>
 8005bbe:	2b16      	cmp	r3, #22
 8005bc0:	d101      	bne.n	8005bc6 <__sflush_r+0xb6>
 8005bc2:	602f      	str	r7, [r5, #0]
 8005bc4:	e7b1      	b.n	8005b2a <__sflush_r+0x1a>
 8005bc6:	89a3      	ldrh	r3, [r4, #12]
 8005bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bcc:	81a3      	strh	r3, [r4, #12]
 8005bce:	e7ad      	b.n	8005b2c <__sflush_r+0x1c>
 8005bd0:	690f      	ldr	r7, [r1, #16]
 8005bd2:	2f00      	cmp	r7, #0
 8005bd4:	d0a9      	beq.n	8005b2a <__sflush_r+0x1a>
 8005bd6:	0793      	lsls	r3, r2, #30
 8005bd8:	680e      	ldr	r6, [r1, #0]
 8005bda:	bf08      	it	eq
 8005bdc:	694b      	ldreq	r3, [r1, #20]
 8005bde:	600f      	str	r7, [r1, #0]
 8005be0:	bf18      	it	ne
 8005be2:	2300      	movne	r3, #0
 8005be4:	eba6 0807 	sub.w	r8, r6, r7
 8005be8:	608b      	str	r3, [r1, #8]
 8005bea:	f1b8 0f00 	cmp.w	r8, #0
 8005bee:	dd9c      	ble.n	8005b2a <__sflush_r+0x1a>
 8005bf0:	6a21      	ldr	r1, [r4, #32]
 8005bf2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005bf4:	4643      	mov	r3, r8
 8005bf6:	463a      	mov	r2, r7
 8005bf8:	4628      	mov	r0, r5
 8005bfa:	47b0      	blx	r6
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	dc06      	bgt.n	8005c0e <__sflush_r+0xfe>
 8005c00:	89a3      	ldrh	r3, [r4, #12]
 8005c02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c06:	81a3      	strh	r3, [r4, #12]
 8005c08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c0c:	e78e      	b.n	8005b2c <__sflush_r+0x1c>
 8005c0e:	4407      	add	r7, r0
 8005c10:	eba8 0800 	sub.w	r8, r8, r0
 8005c14:	e7e9      	b.n	8005bea <__sflush_r+0xda>
 8005c16:	bf00      	nop
 8005c18:	dfbffffe 	.word	0xdfbffffe

08005c1c <_fflush_r>:
 8005c1c:	b538      	push	{r3, r4, r5, lr}
 8005c1e:	690b      	ldr	r3, [r1, #16]
 8005c20:	4605      	mov	r5, r0
 8005c22:	460c      	mov	r4, r1
 8005c24:	b913      	cbnz	r3, 8005c2c <_fflush_r+0x10>
 8005c26:	2500      	movs	r5, #0
 8005c28:	4628      	mov	r0, r5
 8005c2a:	bd38      	pop	{r3, r4, r5, pc}
 8005c2c:	b118      	cbz	r0, 8005c36 <_fflush_r+0x1a>
 8005c2e:	6a03      	ldr	r3, [r0, #32]
 8005c30:	b90b      	cbnz	r3, 8005c36 <_fflush_r+0x1a>
 8005c32:	f7ff fb7d 	bl	8005330 <__sinit>
 8005c36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d0f3      	beq.n	8005c26 <_fflush_r+0xa>
 8005c3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c40:	07d0      	lsls	r0, r2, #31
 8005c42:	d404      	bmi.n	8005c4e <_fflush_r+0x32>
 8005c44:	0599      	lsls	r1, r3, #22
 8005c46:	d402      	bmi.n	8005c4e <_fflush_r+0x32>
 8005c48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c4a:	f7ff fbeb 	bl	8005424 <__retarget_lock_acquire_recursive>
 8005c4e:	4628      	mov	r0, r5
 8005c50:	4621      	mov	r1, r4
 8005c52:	f7ff ff5d 	bl	8005b10 <__sflush_r>
 8005c56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c58:	07da      	lsls	r2, r3, #31
 8005c5a:	4605      	mov	r5, r0
 8005c5c:	d4e4      	bmi.n	8005c28 <_fflush_r+0xc>
 8005c5e:	89a3      	ldrh	r3, [r4, #12]
 8005c60:	059b      	lsls	r3, r3, #22
 8005c62:	d4e1      	bmi.n	8005c28 <_fflush_r+0xc>
 8005c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c66:	f7ff fbde 	bl	8005426 <__retarget_lock_release_recursive>
 8005c6a:	e7dd      	b.n	8005c28 <_fflush_r+0xc>

08005c6c <__malloc_lock>:
 8005c6c:	4801      	ldr	r0, [pc, #4]	; (8005c74 <__malloc_lock+0x8>)
 8005c6e:	f7ff bbd9 	b.w	8005424 <__retarget_lock_acquire_recursive>
 8005c72:	bf00      	nop
 8005c74:	20000524 	.word	0x20000524

08005c78 <__malloc_unlock>:
 8005c78:	4801      	ldr	r0, [pc, #4]	; (8005c80 <__malloc_unlock+0x8>)
 8005c7a:	f7ff bbd4 	b.w	8005426 <__retarget_lock_release_recursive>
 8005c7e:	bf00      	nop
 8005c80:	20000524 	.word	0x20000524

08005c84 <__sread>:
 8005c84:	b510      	push	{r4, lr}
 8005c86:	460c      	mov	r4, r1
 8005c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c8c:	f000 f978 	bl	8005f80 <_read_r>
 8005c90:	2800      	cmp	r0, #0
 8005c92:	bfab      	itete	ge
 8005c94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c96:	89a3      	ldrhlt	r3, [r4, #12]
 8005c98:	181b      	addge	r3, r3, r0
 8005c9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c9e:	bfac      	ite	ge
 8005ca0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ca2:	81a3      	strhlt	r3, [r4, #12]
 8005ca4:	bd10      	pop	{r4, pc}

08005ca6 <__swrite>:
 8005ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005caa:	461f      	mov	r7, r3
 8005cac:	898b      	ldrh	r3, [r1, #12]
 8005cae:	05db      	lsls	r3, r3, #23
 8005cb0:	4605      	mov	r5, r0
 8005cb2:	460c      	mov	r4, r1
 8005cb4:	4616      	mov	r6, r2
 8005cb6:	d505      	bpl.n	8005cc4 <__swrite+0x1e>
 8005cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f000 f94c 	bl	8005f5c <_lseek_r>
 8005cc4:	89a3      	ldrh	r3, [r4, #12]
 8005cc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cce:	81a3      	strh	r3, [r4, #12]
 8005cd0:	4632      	mov	r2, r6
 8005cd2:	463b      	mov	r3, r7
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cda:	f000 b973 	b.w	8005fc4 <_write_r>

08005cde <__sseek>:
 8005cde:	b510      	push	{r4, lr}
 8005ce0:	460c      	mov	r4, r1
 8005ce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ce6:	f000 f939 	bl	8005f5c <_lseek_r>
 8005cea:	1c43      	adds	r3, r0, #1
 8005cec:	89a3      	ldrh	r3, [r4, #12]
 8005cee:	bf15      	itete	ne
 8005cf0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005cf2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005cf6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005cfa:	81a3      	strheq	r3, [r4, #12]
 8005cfc:	bf18      	it	ne
 8005cfe:	81a3      	strhne	r3, [r4, #12]
 8005d00:	bd10      	pop	{r4, pc}

08005d02 <__sclose>:
 8005d02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d06:	f000 b8f7 	b.w	8005ef8 <_close_r>

08005d0a <__swbuf_r>:
 8005d0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0c:	460e      	mov	r6, r1
 8005d0e:	4614      	mov	r4, r2
 8005d10:	4605      	mov	r5, r0
 8005d12:	b118      	cbz	r0, 8005d1c <__swbuf_r+0x12>
 8005d14:	6a03      	ldr	r3, [r0, #32]
 8005d16:	b90b      	cbnz	r3, 8005d1c <__swbuf_r+0x12>
 8005d18:	f7ff fb0a 	bl	8005330 <__sinit>
 8005d1c:	69a3      	ldr	r3, [r4, #24]
 8005d1e:	60a3      	str	r3, [r4, #8]
 8005d20:	89a3      	ldrh	r3, [r4, #12]
 8005d22:	071a      	lsls	r2, r3, #28
 8005d24:	d525      	bpl.n	8005d72 <__swbuf_r+0x68>
 8005d26:	6923      	ldr	r3, [r4, #16]
 8005d28:	b31b      	cbz	r3, 8005d72 <__swbuf_r+0x68>
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	6922      	ldr	r2, [r4, #16]
 8005d2e:	1a98      	subs	r0, r3, r2
 8005d30:	6963      	ldr	r3, [r4, #20]
 8005d32:	b2f6      	uxtb	r6, r6
 8005d34:	4283      	cmp	r3, r0
 8005d36:	4637      	mov	r7, r6
 8005d38:	dc04      	bgt.n	8005d44 <__swbuf_r+0x3a>
 8005d3a:	4621      	mov	r1, r4
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	f7ff ff6d 	bl	8005c1c <_fflush_r>
 8005d42:	b9e0      	cbnz	r0, 8005d7e <__swbuf_r+0x74>
 8005d44:	68a3      	ldr	r3, [r4, #8]
 8005d46:	3b01      	subs	r3, #1
 8005d48:	60a3      	str	r3, [r4, #8]
 8005d4a:	6823      	ldr	r3, [r4, #0]
 8005d4c:	1c5a      	adds	r2, r3, #1
 8005d4e:	6022      	str	r2, [r4, #0]
 8005d50:	701e      	strb	r6, [r3, #0]
 8005d52:	6962      	ldr	r2, [r4, #20]
 8005d54:	1c43      	adds	r3, r0, #1
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d004      	beq.n	8005d64 <__swbuf_r+0x5a>
 8005d5a:	89a3      	ldrh	r3, [r4, #12]
 8005d5c:	07db      	lsls	r3, r3, #31
 8005d5e:	d506      	bpl.n	8005d6e <__swbuf_r+0x64>
 8005d60:	2e0a      	cmp	r6, #10
 8005d62:	d104      	bne.n	8005d6e <__swbuf_r+0x64>
 8005d64:	4621      	mov	r1, r4
 8005d66:	4628      	mov	r0, r5
 8005d68:	f7ff ff58 	bl	8005c1c <_fflush_r>
 8005d6c:	b938      	cbnz	r0, 8005d7e <__swbuf_r+0x74>
 8005d6e:	4638      	mov	r0, r7
 8005d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d72:	4621      	mov	r1, r4
 8005d74:	4628      	mov	r0, r5
 8005d76:	f000 f805 	bl	8005d84 <__swsetup_r>
 8005d7a:	2800      	cmp	r0, #0
 8005d7c:	d0d5      	beq.n	8005d2a <__swbuf_r+0x20>
 8005d7e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005d82:	e7f4      	b.n	8005d6e <__swbuf_r+0x64>

08005d84 <__swsetup_r>:
 8005d84:	b538      	push	{r3, r4, r5, lr}
 8005d86:	4b2a      	ldr	r3, [pc, #168]	; (8005e30 <__swsetup_r+0xac>)
 8005d88:	4605      	mov	r5, r0
 8005d8a:	6818      	ldr	r0, [r3, #0]
 8005d8c:	460c      	mov	r4, r1
 8005d8e:	b118      	cbz	r0, 8005d98 <__swsetup_r+0x14>
 8005d90:	6a03      	ldr	r3, [r0, #32]
 8005d92:	b90b      	cbnz	r3, 8005d98 <__swsetup_r+0x14>
 8005d94:	f7ff facc 	bl	8005330 <__sinit>
 8005d98:	89a3      	ldrh	r3, [r4, #12]
 8005d9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d9e:	0718      	lsls	r0, r3, #28
 8005da0:	d422      	bmi.n	8005de8 <__swsetup_r+0x64>
 8005da2:	06d9      	lsls	r1, r3, #27
 8005da4:	d407      	bmi.n	8005db6 <__swsetup_r+0x32>
 8005da6:	2309      	movs	r3, #9
 8005da8:	602b      	str	r3, [r5, #0]
 8005daa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005dae:	81a3      	strh	r3, [r4, #12]
 8005db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005db4:	e034      	b.n	8005e20 <__swsetup_r+0x9c>
 8005db6:	0758      	lsls	r0, r3, #29
 8005db8:	d512      	bpl.n	8005de0 <__swsetup_r+0x5c>
 8005dba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dbc:	b141      	cbz	r1, 8005dd0 <__swsetup_r+0x4c>
 8005dbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005dc2:	4299      	cmp	r1, r3
 8005dc4:	d002      	beq.n	8005dcc <__swsetup_r+0x48>
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	f000 f90e 	bl	8005fe8 <_free_r>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	6363      	str	r3, [r4, #52]	; 0x34
 8005dd0:	89a3      	ldrh	r3, [r4, #12]
 8005dd2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005dd6:	81a3      	strh	r3, [r4, #12]
 8005dd8:	2300      	movs	r3, #0
 8005dda:	6063      	str	r3, [r4, #4]
 8005ddc:	6923      	ldr	r3, [r4, #16]
 8005dde:	6023      	str	r3, [r4, #0]
 8005de0:	89a3      	ldrh	r3, [r4, #12]
 8005de2:	f043 0308 	orr.w	r3, r3, #8
 8005de6:	81a3      	strh	r3, [r4, #12]
 8005de8:	6923      	ldr	r3, [r4, #16]
 8005dea:	b94b      	cbnz	r3, 8005e00 <__swsetup_r+0x7c>
 8005dec:	89a3      	ldrh	r3, [r4, #12]
 8005dee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005df2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005df6:	d003      	beq.n	8005e00 <__swsetup_r+0x7c>
 8005df8:	4621      	mov	r1, r4
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	f000 f840 	bl	8005e80 <__smakebuf_r>
 8005e00:	89a0      	ldrh	r0, [r4, #12]
 8005e02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e06:	f010 0301 	ands.w	r3, r0, #1
 8005e0a:	d00a      	beq.n	8005e22 <__swsetup_r+0x9e>
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	60a3      	str	r3, [r4, #8]
 8005e10:	6963      	ldr	r3, [r4, #20]
 8005e12:	425b      	negs	r3, r3
 8005e14:	61a3      	str	r3, [r4, #24]
 8005e16:	6923      	ldr	r3, [r4, #16]
 8005e18:	b943      	cbnz	r3, 8005e2c <__swsetup_r+0xa8>
 8005e1a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005e1e:	d1c4      	bne.n	8005daa <__swsetup_r+0x26>
 8005e20:	bd38      	pop	{r3, r4, r5, pc}
 8005e22:	0781      	lsls	r1, r0, #30
 8005e24:	bf58      	it	pl
 8005e26:	6963      	ldrpl	r3, [r4, #20]
 8005e28:	60a3      	str	r3, [r4, #8]
 8005e2a:	e7f4      	b.n	8005e16 <__swsetup_r+0x92>
 8005e2c:	2000      	movs	r0, #0
 8005e2e:	e7f7      	b.n	8005e20 <__swsetup_r+0x9c>
 8005e30:	20000064 	.word	0x20000064

08005e34 <__swhatbuf_r>:
 8005e34:	b570      	push	{r4, r5, r6, lr}
 8005e36:	460c      	mov	r4, r1
 8005e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e3c:	2900      	cmp	r1, #0
 8005e3e:	b096      	sub	sp, #88	; 0x58
 8005e40:	4615      	mov	r5, r2
 8005e42:	461e      	mov	r6, r3
 8005e44:	da0d      	bge.n	8005e62 <__swhatbuf_r+0x2e>
 8005e46:	89a3      	ldrh	r3, [r4, #12]
 8005e48:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005e4c:	f04f 0100 	mov.w	r1, #0
 8005e50:	bf0c      	ite	eq
 8005e52:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005e56:	2340      	movne	r3, #64	; 0x40
 8005e58:	2000      	movs	r0, #0
 8005e5a:	6031      	str	r1, [r6, #0]
 8005e5c:	602b      	str	r3, [r5, #0]
 8005e5e:	b016      	add	sp, #88	; 0x58
 8005e60:	bd70      	pop	{r4, r5, r6, pc}
 8005e62:	466a      	mov	r2, sp
 8005e64:	f000 f858 	bl	8005f18 <_fstat_r>
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	dbec      	blt.n	8005e46 <__swhatbuf_r+0x12>
 8005e6c:	9901      	ldr	r1, [sp, #4]
 8005e6e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005e72:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005e76:	4259      	negs	r1, r3
 8005e78:	4159      	adcs	r1, r3
 8005e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e7e:	e7eb      	b.n	8005e58 <__swhatbuf_r+0x24>

08005e80 <__smakebuf_r>:
 8005e80:	898b      	ldrh	r3, [r1, #12]
 8005e82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e84:	079d      	lsls	r5, r3, #30
 8005e86:	4606      	mov	r6, r0
 8005e88:	460c      	mov	r4, r1
 8005e8a:	d507      	bpl.n	8005e9c <__smakebuf_r+0x1c>
 8005e8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e90:	6023      	str	r3, [r4, #0]
 8005e92:	6123      	str	r3, [r4, #16]
 8005e94:	2301      	movs	r3, #1
 8005e96:	6163      	str	r3, [r4, #20]
 8005e98:	b002      	add	sp, #8
 8005e9a:	bd70      	pop	{r4, r5, r6, pc}
 8005e9c:	ab01      	add	r3, sp, #4
 8005e9e:	466a      	mov	r2, sp
 8005ea0:	f7ff ffc8 	bl	8005e34 <__swhatbuf_r>
 8005ea4:	9900      	ldr	r1, [sp, #0]
 8005ea6:	4605      	mov	r5, r0
 8005ea8:	4630      	mov	r0, r6
 8005eaa:	f7ff fc21 	bl	80056f0 <_malloc_r>
 8005eae:	b948      	cbnz	r0, 8005ec4 <__smakebuf_r+0x44>
 8005eb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eb4:	059a      	lsls	r2, r3, #22
 8005eb6:	d4ef      	bmi.n	8005e98 <__smakebuf_r+0x18>
 8005eb8:	f023 0303 	bic.w	r3, r3, #3
 8005ebc:	f043 0302 	orr.w	r3, r3, #2
 8005ec0:	81a3      	strh	r3, [r4, #12]
 8005ec2:	e7e3      	b.n	8005e8c <__smakebuf_r+0xc>
 8005ec4:	89a3      	ldrh	r3, [r4, #12]
 8005ec6:	6020      	str	r0, [r4, #0]
 8005ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ecc:	81a3      	strh	r3, [r4, #12]
 8005ece:	9b00      	ldr	r3, [sp, #0]
 8005ed0:	6163      	str	r3, [r4, #20]
 8005ed2:	9b01      	ldr	r3, [sp, #4]
 8005ed4:	6120      	str	r0, [r4, #16]
 8005ed6:	b15b      	cbz	r3, 8005ef0 <__smakebuf_r+0x70>
 8005ed8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005edc:	4630      	mov	r0, r6
 8005ede:	f000 f82d 	bl	8005f3c <_isatty_r>
 8005ee2:	b128      	cbz	r0, 8005ef0 <__smakebuf_r+0x70>
 8005ee4:	89a3      	ldrh	r3, [r4, #12]
 8005ee6:	f023 0303 	bic.w	r3, r3, #3
 8005eea:	f043 0301 	orr.w	r3, r3, #1
 8005eee:	81a3      	strh	r3, [r4, #12]
 8005ef0:	89a3      	ldrh	r3, [r4, #12]
 8005ef2:	431d      	orrs	r5, r3
 8005ef4:	81a5      	strh	r5, [r4, #12]
 8005ef6:	e7cf      	b.n	8005e98 <__smakebuf_r+0x18>

08005ef8 <_close_r>:
 8005ef8:	b538      	push	{r3, r4, r5, lr}
 8005efa:	4d06      	ldr	r5, [pc, #24]	; (8005f14 <_close_r+0x1c>)
 8005efc:	2300      	movs	r3, #0
 8005efe:	4604      	mov	r4, r0
 8005f00:	4608      	mov	r0, r1
 8005f02:	602b      	str	r3, [r5, #0]
 8005f04:	f7fb fe03 	bl	8001b0e <_close>
 8005f08:	1c43      	adds	r3, r0, #1
 8005f0a:	d102      	bne.n	8005f12 <_close_r+0x1a>
 8005f0c:	682b      	ldr	r3, [r5, #0]
 8005f0e:	b103      	cbz	r3, 8005f12 <_close_r+0x1a>
 8005f10:	6023      	str	r3, [r4, #0]
 8005f12:	bd38      	pop	{r3, r4, r5, pc}
 8005f14:	20000530 	.word	0x20000530

08005f18 <_fstat_r>:
 8005f18:	b538      	push	{r3, r4, r5, lr}
 8005f1a:	4d07      	ldr	r5, [pc, #28]	; (8005f38 <_fstat_r+0x20>)
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	4604      	mov	r4, r0
 8005f20:	4608      	mov	r0, r1
 8005f22:	4611      	mov	r1, r2
 8005f24:	602b      	str	r3, [r5, #0]
 8005f26:	f7fb fdfe 	bl	8001b26 <_fstat>
 8005f2a:	1c43      	adds	r3, r0, #1
 8005f2c:	d102      	bne.n	8005f34 <_fstat_r+0x1c>
 8005f2e:	682b      	ldr	r3, [r5, #0]
 8005f30:	b103      	cbz	r3, 8005f34 <_fstat_r+0x1c>
 8005f32:	6023      	str	r3, [r4, #0]
 8005f34:	bd38      	pop	{r3, r4, r5, pc}
 8005f36:	bf00      	nop
 8005f38:	20000530 	.word	0x20000530

08005f3c <_isatty_r>:
 8005f3c:	b538      	push	{r3, r4, r5, lr}
 8005f3e:	4d06      	ldr	r5, [pc, #24]	; (8005f58 <_isatty_r+0x1c>)
 8005f40:	2300      	movs	r3, #0
 8005f42:	4604      	mov	r4, r0
 8005f44:	4608      	mov	r0, r1
 8005f46:	602b      	str	r3, [r5, #0]
 8005f48:	f7fb fdfd 	bl	8001b46 <_isatty>
 8005f4c:	1c43      	adds	r3, r0, #1
 8005f4e:	d102      	bne.n	8005f56 <_isatty_r+0x1a>
 8005f50:	682b      	ldr	r3, [r5, #0]
 8005f52:	b103      	cbz	r3, 8005f56 <_isatty_r+0x1a>
 8005f54:	6023      	str	r3, [r4, #0]
 8005f56:	bd38      	pop	{r3, r4, r5, pc}
 8005f58:	20000530 	.word	0x20000530

08005f5c <_lseek_r>:
 8005f5c:	b538      	push	{r3, r4, r5, lr}
 8005f5e:	4d07      	ldr	r5, [pc, #28]	; (8005f7c <_lseek_r+0x20>)
 8005f60:	4604      	mov	r4, r0
 8005f62:	4608      	mov	r0, r1
 8005f64:	4611      	mov	r1, r2
 8005f66:	2200      	movs	r2, #0
 8005f68:	602a      	str	r2, [r5, #0]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	f7fb fdf6 	bl	8001b5c <_lseek>
 8005f70:	1c43      	adds	r3, r0, #1
 8005f72:	d102      	bne.n	8005f7a <_lseek_r+0x1e>
 8005f74:	682b      	ldr	r3, [r5, #0]
 8005f76:	b103      	cbz	r3, 8005f7a <_lseek_r+0x1e>
 8005f78:	6023      	str	r3, [r4, #0]
 8005f7a:	bd38      	pop	{r3, r4, r5, pc}
 8005f7c:	20000530 	.word	0x20000530

08005f80 <_read_r>:
 8005f80:	b538      	push	{r3, r4, r5, lr}
 8005f82:	4d07      	ldr	r5, [pc, #28]	; (8005fa0 <_read_r+0x20>)
 8005f84:	4604      	mov	r4, r0
 8005f86:	4608      	mov	r0, r1
 8005f88:	4611      	mov	r1, r2
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	602a      	str	r2, [r5, #0]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	f7fb fd84 	bl	8001a9c <_read>
 8005f94:	1c43      	adds	r3, r0, #1
 8005f96:	d102      	bne.n	8005f9e <_read_r+0x1e>
 8005f98:	682b      	ldr	r3, [r5, #0]
 8005f9a:	b103      	cbz	r3, 8005f9e <_read_r+0x1e>
 8005f9c:	6023      	str	r3, [r4, #0]
 8005f9e:	bd38      	pop	{r3, r4, r5, pc}
 8005fa0:	20000530 	.word	0x20000530

08005fa4 <_sbrk_r>:
 8005fa4:	b538      	push	{r3, r4, r5, lr}
 8005fa6:	4d06      	ldr	r5, [pc, #24]	; (8005fc0 <_sbrk_r+0x1c>)
 8005fa8:	2300      	movs	r3, #0
 8005faa:	4604      	mov	r4, r0
 8005fac:	4608      	mov	r0, r1
 8005fae:	602b      	str	r3, [r5, #0]
 8005fb0:	f7fb fde2 	bl	8001b78 <_sbrk>
 8005fb4:	1c43      	adds	r3, r0, #1
 8005fb6:	d102      	bne.n	8005fbe <_sbrk_r+0x1a>
 8005fb8:	682b      	ldr	r3, [r5, #0]
 8005fba:	b103      	cbz	r3, 8005fbe <_sbrk_r+0x1a>
 8005fbc:	6023      	str	r3, [r4, #0]
 8005fbe:	bd38      	pop	{r3, r4, r5, pc}
 8005fc0:	20000530 	.word	0x20000530

08005fc4 <_write_r>:
 8005fc4:	b538      	push	{r3, r4, r5, lr}
 8005fc6:	4d07      	ldr	r5, [pc, #28]	; (8005fe4 <_write_r+0x20>)
 8005fc8:	4604      	mov	r4, r0
 8005fca:	4608      	mov	r0, r1
 8005fcc:	4611      	mov	r1, r2
 8005fce:	2200      	movs	r2, #0
 8005fd0:	602a      	str	r2, [r5, #0]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f7fb fd7f 	bl	8001ad6 <_write>
 8005fd8:	1c43      	adds	r3, r0, #1
 8005fda:	d102      	bne.n	8005fe2 <_write_r+0x1e>
 8005fdc:	682b      	ldr	r3, [r5, #0]
 8005fde:	b103      	cbz	r3, 8005fe2 <_write_r+0x1e>
 8005fe0:	6023      	str	r3, [r4, #0]
 8005fe2:	bd38      	pop	{r3, r4, r5, pc}
 8005fe4:	20000530 	.word	0x20000530

08005fe8 <_free_r>:
 8005fe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005fea:	2900      	cmp	r1, #0
 8005fec:	d044      	beq.n	8006078 <_free_r+0x90>
 8005fee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ff2:	9001      	str	r0, [sp, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f1a1 0404 	sub.w	r4, r1, #4
 8005ffa:	bfb8      	it	lt
 8005ffc:	18e4      	addlt	r4, r4, r3
 8005ffe:	f7ff fe35 	bl	8005c6c <__malloc_lock>
 8006002:	4a1e      	ldr	r2, [pc, #120]	; (800607c <_free_r+0x94>)
 8006004:	9801      	ldr	r0, [sp, #4]
 8006006:	6813      	ldr	r3, [r2, #0]
 8006008:	b933      	cbnz	r3, 8006018 <_free_r+0x30>
 800600a:	6063      	str	r3, [r4, #4]
 800600c:	6014      	str	r4, [r2, #0]
 800600e:	b003      	add	sp, #12
 8006010:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006014:	f7ff be30 	b.w	8005c78 <__malloc_unlock>
 8006018:	42a3      	cmp	r3, r4
 800601a:	d908      	bls.n	800602e <_free_r+0x46>
 800601c:	6825      	ldr	r5, [r4, #0]
 800601e:	1961      	adds	r1, r4, r5
 8006020:	428b      	cmp	r3, r1
 8006022:	bf01      	itttt	eq
 8006024:	6819      	ldreq	r1, [r3, #0]
 8006026:	685b      	ldreq	r3, [r3, #4]
 8006028:	1949      	addeq	r1, r1, r5
 800602a:	6021      	streq	r1, [r4, #0]
 800602c:	e7ed      	b.n	800600a <_free_r+0x22>
 800602e:	461a      	mov	r2, r3
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	b10b      	cbz	r3, 8006038 <_free_r+0x50>
 8006034:	42a3      	cmp	r3, r4
 8006036:	d9fa      	bls.n	800602e <_free_r+0x46>
 8006038:	6811      	ldr	r1, [r2, #0]
 800603a:	1855      	adds	r5, r2, r1
 800603c:	42a5      	cmp	r5, r4
 800603e:	d10b      	bne.n	8006058 <_free_r+0x70>
 8006040:	6824      	ldr	r4, [r4, #0]
 8006042:	4421      	add	r1, r4
 8006044:	1854      	adds	r4, r2, r1
 8006046:	42a3      	cmp	r3, r4
 8006048:	6011      	str	r1, [r2, #0]
 800604a:	d1e0      	bne.n	800600e <_free_r+0x26>
 800604c:	681c      	ldr	r4, [r3, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	6053      	str	r3, [r2, #4]
 8006052:	440c      	add	r4, r1
 8006054:	6014      	str	r4, [r2, #0]
 8006056:	e7da      	b.n	800600e <_free_r+0x26>
 8006058:	d902      	bls.n	8006060 <_free_r+0x78>
 800605a:	230c      	movs	r3, #12
 800605c:	6003      	str	r3, [r0, #0]
 800605e:	e7d6      	b.n	800600e <_free_r+0x26>
 8006060:	6825      	ldr	r5, [r4, #0]
 8006062:	1961      	adds	r1, r4, r5
 8006064:	428b      	cmp	r3, r1
 8006066:	bf04      	itt	eq
 8006068:	6819      	ldreq	r1, [r3, #0]
 800606a:	685b      	ldreq	r3, [r3, #4]
 800606c:	6063      	str	r3, [r4, #4]
 800606e:	bf04      	itt	eq
 8006070:	1949      	addeq	r1, r1, r5
 8006072:	6021      	streq	r1, [r4, #0]
 8006074:	6054      	str	r4, [r2, #4]
 8006076:	e7ca      	b.n	800600e <_free_r+0x26>
 8006078:	b003      	add	sp, #12
 800607a:	bd30      	pop	{r4, r5, pc}
 800607c:	20000528 	.word	0x20000528

08006080 <_init>:
 8006080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006082:	bf00      	nop
 8006084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006086:	bc08      	pop	{r3}
 8006088:	469e      	mov	lr, r3
 800608a:	4770      	bx	lr

0800608c <_fini>:
 800608c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800608e:	bf00      	nop
 8006090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006092:	bc08      	pop	{r3}
 8006094:	469e      	mov	lr, r3
 8006096:	4770      	bx	lr
